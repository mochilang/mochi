-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_buckets(n)
    local buckets = nil
    local i = 0
    while (i < n) do
      buckets = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(buckets, {state = 0, key = 0, val = 0})
    i = (i + 1)
  end
  return buckets
end
function hashmap_new(initial_size)
  return {buckets = make_buckets(initial_size), len = 0, cap_num = 3, cap_den = 4, initial_size = initial_size}
end
function bucket_index(hm, key)
  local ind = (key % (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(hm.buckets))
      if (ind < 0) then
        ind = (ind + (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(hm.buckets))
          end
          return ind
        end
        function next_index(hm, ind)
          return ((ind + 1) % (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(hm.buckets))
            end
            function try_set(hm, ind, key, val)
              local buckets = hm.buckets
              local b = buckets[ind + 1]
              if ((b.state == 0) or (b.state == 2)) then
                buckets[ind + 1] = {state = 1, key = key, val = val}
                hm.buckets = buckets
                hm.len = (hm.len + 1)
                return true
              end
              if (b.key == key) then
                buckets[ind + 1] = {state = 1, key = key, val = val}
                hm.buckets = buckets
                return true
              end
              return false
            end
            function is_full(hm)
              local limit = (((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(hm.buckets) * hm.cap_num) // hm.cap_den)
                  return (hm.len >= limit)
                end
                function is_sparse(hm)
                  if ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(hm.buckets) <= hm.initial_size) then
                        return false
                      end
                      local limit = (((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(hm.buckets) * hm.cap_num) // (2 * hm.cap_den))
                          return (hm.len < limit)
                        end
                        function resize(hm, new_size)
                          local old = hm.buckets
                          hm.buckets = make_buckets(new_size)
                          hm.len = 0
                          local i = 0
                          while (i < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(old)) do
                                local it = old[i + 1]
                                if (it.state == 1) then
                                  add_item(hm, it.key, it.val)
                                end
                                i = (i + 1)
                              end
                            end
                            function size_up(hm)
                              resize(hm, ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(hm.buckets) * 2))
                                end
                                function size_down(hm)
                                  resize(hm, ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(hm.buckets) // 2))
                                    end
                                    function add_item(hm, key, val)
                                      local ind = bucket_index(hm, key)
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(hm.buckets)) do
                                            if try_set(hm, ind, key, val) then
                                              break
                                            end
                                            ind = next_index(hm, ind)
                                            i = (i + 1)
                                          end
                                        end
                                        function hashmap_set(hm, key, val)
                                          if is_full(hm) then
                                            size_up(hm)
                                          end
                                          add_item(hm, key, val)
                                        end
                                        function hashmap_get(hm, key)
                                          local buckets = hm.buckets
                                          local ind = bucket_index(hm, key)
                                          local i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(buckets)) do
                                                local it = buckets[ind + 1]
                                                if (it.state == 0) then
                                                  break
                                                end
                                                if ((it.state == 1) and (it.key == key)) then
                                                  return it.val
                                                end
                                                ind = next_index(hm, ind)
                                                i = (i + 1)
                                              end
                                              return 0
                                            end
                                            function hashmap_del(hm, key)
                                              local buckets = hm.buckets
                                              local ind = bucket_index(hm, key)
                                              local i = 0
                                              while (i < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(buckets)) do
                                                    local it = buckets[ind + 1]
                                                    if (it.state == 0) then
                                                      print((((type(("KeyError: " .. _str(key))) == "table")) and (
                                                      (function(v)
                                                      local function encode(x)
                                                      if type(x) == "table" then
                                                        if x.__name and x.__order then
                                                          local parts = {x.__name, " {"}
                                                          for i, k in ipairs(x.__order) do
                                                            if i > 1 then parts[#parts+1] = ", " end
                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        elseif #x > 0 then
                                                            local allTables = true
                                                            for _, v in ipairs(x) do
                                                              if type(v) ~= "table" then allTables = false break end
                                                            end
                                                            local parts = {}
                                                            if not allTables then parts[#parts+1] = "[" end
                                                            for i, val in ipairs(x) do
                                                              parts[#parts+1] = encode(val)
                                                              if i < #x then parts[#parts+1] = " " end
                                                            end
                                                            if not allTables then parts[#parts+1] = "]" end
                                                            return table.concat(parts)
                                                          else
                                                            local keys = {}
                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                            local parts = {"{"}
                                                            for i, k in ipairs(keys) do
                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                              if i < #keys then parts[#parts+1] = ", " end
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(("KeyError: " .. _str(key)))) or (("KeyError: " .. _str(key)))))
                                                      return
                                                    end
                                                    if ((it.state == 1) and (it.key == key)) then
                                                      buckets[ind + 1] = {state = 2, key = 0, val = 0}
                                                      hm.buckets = buckets
                                                      hm.len = (hm.len - 1)
                                                      break
                                                    end
                                                    ind = next_index(hm, ind)
                                                    i = (i + 1)
                                                  end
                                                  if is_sparse(hm) then
                                                    size_down(hm)
                                                  end
                                                end
                                                function hashmap_len(hm)
                                                  return hm.len
                                                end
                                                function hashmap_repr(hm)
                                                  local out = "HashMap("
                                                  local first = true
                                                  local i = 0
                                                  while (i < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(hm.buckets)) do
                                                        local b = hm.buckets[i + 1]
                                                        if (b.state == 1) then
                                                          if (not first) then
                                                            out = (out .. ", ")
                                                          else
                                                            first = false
                                                          end
                                                          out = (((out .. _str(b.key)) .. ": ") .. _str(b.val))
                                                        end
                                                        i = (i + 1)
                                                      end
                                                      out = (out .. ")")
                                                      return out
                                                    end
                                                    hm = hashmap_new(5)
                                                    hashmap_set(hm, 1, 10)
                                                    hashmap_set(hm, 2, 20)
                                                    hashmap_set(hm, 3, 30)
                                                    print((((type(hashmap_repr(hm)) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(hashmap_repr(hm))) or (hashmap_repr(hm))))
                                                    print((((type(_str(hashmap_get(hm, 2))) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(_str(hashmap_get(hm, 2)))) or (_str(hashmap_get(hm, 2)))))
                                                    hashmap_del(hm, 1)
                                                    print((((type(hashmap_repr(hm)) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(hashmap_repr(hm))) or (hashmap_repr(hm))))
                                                    print((((type(_str(hashmap_len(hm))) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(_str(hashmap_len(hm)))) or (_str(hashmap_len(hm)))))
                                                    local _bench_end = os.clock()
                                                    collectgarbage()
                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                  end;
