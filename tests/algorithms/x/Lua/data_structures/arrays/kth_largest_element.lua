-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function partition(arr, low, high)
    local pivot = arr[high + 1]
    local i = (low - 1)
    local j = low
    while (j < high) do
      if (arr[j + 1] >= pivot) then
        i = (i + 1)
        local tmp = arr[i + 1]
        arr[i + 1] = arr[j + 1]
        arr[j + 1] = tmp
      end
      j = (j + 1)
    end
    local k = (i + 1)
    local tmp = arr[k + 1]
    arr[k + 1] = arr[high + 1]
    arr[high + 1] = tmp
    return k
  end
  function kth_largest_element(arr, position)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr) == 0) then
          return (-1)
        end
        if ((position < 1) or (position > (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr))) then
              return (-1)
            end
            local low = 0
            local high = ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(arr) - 1)
                while (low <= high) do
                  if ((low > ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(arr) - 1)) or (high < 0)) then
                        return (-1)
                      end
                      local pivot_index = partition(arr, low, high)
                      if (pivot_index == (position - 1)) then
                        return arr[pivot_index + 1]
                      else
                        if (pivot_index > (position - 1)) then
                          high = (pivot_index - 1)
                        else
                          low = (pivot_index + 1)
                        end
                      end
                    end
                    return (-1)
                  end
                  arr1 = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}
                  print(kth_largest_element(arr1, 3))
                  print("\n")
                  arr2 = {2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5}
                  print(kth_largest_element(arr2, 1))
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
