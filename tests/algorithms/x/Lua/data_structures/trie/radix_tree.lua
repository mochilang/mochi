-- Generated by Mochi v0.10.59 on 2025-08-06 22:50 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_node(prefix, is_leaf)
    return {prefix = prefix, is_leaf = is_leaf, children = {}}
  end
  function new_tree()
    local nodes = {new_node("", false)}
    return {nodes = nodes}
  end
  function match_prefix(node, word)
    local x = 0
    local p = node.prefix
    local w = word
    local min_len = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(p)
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(w) < min_len) then
              min_len = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(w)
                end
                while (x < min_len) do
                  if (_substring(p, x, (x + 1)) ~= _substring(w, x, (x + 1))) then
                    break
                  end
                  x = (x + 1)
                end
                local common = _substring(p, 0, x)
                local rem_prefix = _substring(p, x, (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(p))
                    local rem_word = _substring(w, x, (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(w))
                        return {common = common, rem_prefix = rem_prefix, rem_word = rem_word}
                      end
                      function insert_many(tree, words)
                        for _, w in ipairs(words) do
                          insert(tree, 0, w)
                        end
                      end
                      function insert(tree, idx, word)
                        local nodes = tree.nodes
                        local node = nodes[idx + 1]
                        if ((node.prefix == word) and (not node.is_leaf)) then
                          node.is_leaf = true
                          nodes[idx + 1] = node
                          tree.nodes = nodes
                          return
                        end
                        local first = _substring(word, 0, 1)
                        local children = node.children
                        if (not has_key(children, first)) then
                          local new_idx = (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(nodes)
                              nodes = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(nodes, new_node(word, true))
                            children[first] = new_idx
                            node.children = children
                            nodes[idx + 1] = node
                            tree.nodes = nodes
                            return
                          end
                          local child_idx = children[first]
                          local child = nodes[child_idx + 1]
                          local res = match_prefix(child, word)
                          if (res.rem_prefix == "") then
                            insert(tree, child_idx, res.rem_word)
                            return
                          end
                          child.prefix = res.rem_prefix
                          nodes[child_idx + 1] = child
                          local new_children = {}
                          new_children[_substring(res.rem_prefix, 0, 1)] = child_idx
                          local new_idx = (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(nodes)
                              nodes = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(nodes, new_node(res.common, false))
                            nodes[new_idx + 1] = new_children
                            if (res.rem_word == "") then
                              nodes[new_idx + 1] = true
                            else
                              insert(tree, new_idx, res.rem_word)
                            end
                            children[first] = new_idx
                            node.children = children
                            nodes[idx + 1] = node
                            tree.nodes = nodes
                          end
                          function find(tree, idx, word)
                            local nodes = tree.nodes
                            local node = nodes[idx + 1]
                            local first = _substring(word, 0, 1)
                            local children = node.children
                            if (not has_key(children, first)) then
                              return false
                            end
                            local child_idx = children[first]
                            local child = nodes[child_idx + 1]
                            local res = match_prefix(child, word)
                            if (res.rem_prefix ~= "") then
                              return false
                            end
                            if (res.rem_word == "") then
                              return child.is_leaf
                            end
                            return find(tree, child_idx, res.rem_word)
                          end
                          function remove_key(m, k)
                            local out = {}
                            for key in pairs(m) do
                              if (key ~= k) then
                                out[key] = m[key]
                              end
                            end
                            return out
                          end
                          function has_key(m, k)
                            for key in pairs(m) do
                              if (key == k) then
                                return true
                              end
                            end
                            return false
                          end
                          function delete(tree, idx, word)
                            local nodes = tree.nodes
                            local node = nodes[idx + 1]
                            local first = _substring(word, 0, 1)
                            local children = node.children
                            if (not has_key(children, first)) then
                              return false
                            end
                            local child_idx = children[first]
                            local child = nodes[child_idx + 1]
                            local res = match_prefix(child, word)
                            if (res.rem_prefix ~= "") then
                              return false
                            end
                            if (res.rem_word ~= "") then
                              local deleted = delete(tree, child_idx, res.rem_word)
                              if deleted then
                                nodes = tree.nodes
                                node = nodes[idx + 1]
                              end
                              return deleted
                            end
                            if (not child.is_leaf) then
                              return false
                            end
                            if ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(child.children) == 0) then
                                  children = remove_key(children, first)
                                  node.children = children
                                  nodes[idx + 1] = node
                                  tree.nodes = nodes
                                  if (((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(children) == 1) and (not node.is_leaf)) then
                                        local only_key = ""
                                        for k in pairs(children) do
                                          only_key = k
                                        end
                                        local merge_idx = children[only_key]
                                        local merge_node = nodes[merge_idx + 1]
                                        node.is_leaf = merge_node.is_leaf
                                        node.prefix = (node.prefix .. merge_node.prefix)
                                        node.children = merge_node.children
                                        nodes[idx + 1] = node
                                        tree.nodes = nodes
                                      end
                                    else
                                      if ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(child.children) > 1) then
                                            child.is_leaf = false
                                            nodes[child_idx + 1] = child
                                            tree.nodes = nodes
                                          else
                                            local only_key = ""
                                            for k in pairs(child.children) do
                                              only_key = k
                                            end
                                            local merge_idx = child.children[only_key]
                                            local merge_node = nodes[merge_idx + 1]
                                            child.is_leaf = merge_node.is_leaf
                                            child.prefix = (child.prefix .. merge_node.prefix)
                                            child.children = merge_node.children
                                            nodes[child_idx + 1] = child
                                            tree.nodes = nodes
                                          end
                                        end
                                        return true
                                      end
                                      function print_tree(tree, idx, height)
                                        local nodes = tree.nodes
                                        local node = nodes[idx + 1]
                                        if (node.prefix ~= "") then
                                          local line = ""
                                          local i = 0
                                          while (i < height) do
                                            line = (line .. "-")
                                            i = (i + 1)
                                          end
                                          line = ((line .. " ") .. node.prefix)
                                          if node.is_leaf then
                                            line = (line .. "  (leaf)")
                                          end
                                          print((((type(line) == "table")) and (
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(line)) or (line)))
                                        end
                                        local children = node.children
                                        for k in pairs(children) do
                                          local child_idx = children[k]
                                          print_tree(tree, child_idx, (height + 1))
                                        end
                                      end
                                      function test_trie()
                                        local words = {"banana", "bananas", "bandana", "band", "apple", "all", "beast"}
                                        local tree = new_tree()
                                        insert_many(tree, words)
                                        local ok = true
                                        for _, w in ipairs(words) do
                                          if (not find(tree, 0, w)) then
                                            ok = false
                                          end
                                        end
                                        if find(tree, 0, "bandanas") then
                                          ok = false
                                        end
                                        if find(tree, 0, "apps") then
                                          ok = false
                                        end
                                        delete(tree, 0, "all")
                                        if find(tree, 0, "all") then
                                          ok = false
                                        end
                                        delete(tree, 0, "banana")
                                        if find(tree, 0, "banana") then
                                          ok = false
                                        end
                                        if (not find(tree, 0, "bananas")) then
                                          ok = false
                                        end
                                        return ok
                                      end
                                      function pytests()
                                        if (not test_trie()) then
                                          panic("test failed")
                                        end
                                      end
                                      function main()
                                        local tree = new_tree()
                                        local words = {"banana", "bananas", "bandanas", "bandana", "band", "apple", "all", "beast"}
                                        insert_many(tree, words)
                                        print((((type(("Words: " ..
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(words))) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(("Words: " ..
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(words)))) or (("Words: " ..
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(words)))))
                                        print("Tree:")
                                        print_tree(tree, 0, 0)
                                      end
                                      main()
                                      local _bench_end = os.clock()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
