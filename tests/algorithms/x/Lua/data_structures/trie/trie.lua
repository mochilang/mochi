-- Generated by Mochi v0.10.60 on 2025-08-08 10:08 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_trie()
    return {nodes = {{children = {}, is_leaf = false}}}
  end
  function remove_key(m, k)
    local out = {}
    for key in pairs(m) do
      if (key ~= k) then
        out[key] = m[key]
      end
    end
    return out
  end
  function insert(trie, word)
    local nodes = trie.nodes
    local curr = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(word)) do
          local ch = string.sub(word, (i + 1), (i + 1))
          local child_idx = (-1)
          local children = nodes[curr + 1].children
          if (children[ch] ~= nil) then
            child_idx = children[ch]
          else
            local new_node = {children = {}, is_leaf = false}
            nodes = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(nodes, new_node)
          child_idx = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(nodes) - 1)
              local new_children = children
              new_children[ch] = child_idx
              local node = nodes[curr + 1]
              node.children = new_children
              nodes[curr + 1] = node
            end
            curr = child_idx
            i = (i + 1)
          end
          local node = nodes[curr + 1]
          node.is_leaf = true
          nodes[curr + 1] = node
          trie.nodes = nodes
        end
        function insert_many(trie, words)
          for _, w in ipairs(words) do
            insert(trie, w)
          end
        end
        function find(trie, word)
          local nodes = trie.nodes
          local curr = 0
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(word)) do
                local ch = string.sub(word, (i + 1), (i + 1))
                local children = nodes[curr + 1].children
                if (not (children[ch] ~= nil)) then
                  return false
                end
                curr = children[ch]
                i = (i + 1)
              end
              local node = nodes[curr + 1]
              return node.is_leaf
            end
            function delete(trie, word)
              local nodes = trie.nodes
              local function _delete(idx, pos)
              if (pos == (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(word)) then
                    local node = nodes[idx + 1]
                    if (node.is_leaf == false) then
                      return false
                    end
                    node.is_leaf = false
                    nodes[idx + 1] = node
                    return ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(node.children) == 0)
                      end
                      local node = nodes[idx + 1]
                      local children = node.children
                      local ch = string.sub(word, (pos + 1), (pos + 1))
                      if (not (children[ch] ~= nil)) then
                        return false
                      end
                      local child_idx = children[ch]
                      local should_delete = _delete(child_idx, (pos + 1))
                      node = nodes[idx + 1]
                      if should_delete then
                        local new_children = remove_key(node.children, ch)
                        node.children = new_children
                        nodes[idx + 1] = node
                        return (((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(new_children) == 0) and (node.is_leaf == false))
                          end
                          nodes[idx + 1] = node
                          return false
                        end
                        _delete(0, 0)
                        trie.nodes = nodes
                      end
                      function print_words(trie)
                        local function dfs(idx, word)
                        local node = trie.nodes[idx + 1]
                        if node.is_leaf then
                          print((((type(word) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(word)) or (word)))
                        end
                        for key in pairs(node.children) do
                          dfs(node.children[key], (word .. tostring(key)))
                        end
                      end
                      dfs(0, "")
                    end
                    function test_trie()
                      local words = {"banana", "bananas", "bandana", "band", "apple", "all", "beast"}
                      local trie = new_trie()
                      insert_many(trie, words)
                      local ok = true
                      for _, w in ipairs(words) do
                        ok = (ok and find(trie, w))
                      end
                      ok = (ok and find(trie, "banana"))
                      local t = find(trie, "bandanas")
                      ok = (ok and (t == false))
                      local t2 = find(trie, "apps")
                      ok = (ok and (t2 == false))
                      ok = (ok and find(trie, "apple"))
                      ok = (ok and find(trie, "all"))
                      delete(trie, "all")
                      local t3 = find(trie, "all")
                      ok = (ok and (t3 == false))
                      delete(trie, "banana")
                      local t4 = find(trie, "banana")
                      ok = (ok and (t4 == false))
                      ok = (ok and find(trie, "bananas"))
                      return ok
                    end
                    function print_results(msg, passes)
                      if passes then
                        print((((type((msg .. " works!")) == "table")) and (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)((msg .. " works!"))) or ((msg .. " works!"))))
                      else
                        print((((type((msg .. " doesn't work :(")) == "table")) and (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)((msg .. " doesn't work :("))) or ((msg .. " doesn't work :("))))
                      end
                    end
                    trie = new_trie()
                    print_results("Testing trie functionality", test_trie())
                    local _bench_end = os.clock()
                    collectgarbage()
                    local _bench_end_mem = collectgarbage('count') * 1024
                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                  end;
