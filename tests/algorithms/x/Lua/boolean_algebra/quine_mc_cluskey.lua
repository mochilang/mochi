-- Generated by Mochi v0.10.61 on 2025-08-08 19:19 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function compare_string(string1, string2)
    local result = ""
    local count = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(string1)) do
          local c1 = _substring(string1, i, (i + 1))
          local c2 = _substring(string2, i, (i + 1))
          if (c1 ~= c2) then
            count = (count + 1)
            result = (result .. "_")
          else
            result = (result .. c1)
          end
          i = (i + 1)
        end
        if (count > 1) then
          return ""
        end
        return result
      end
      function contains_string(arr, value)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr)) do
              if (arr[i + 1] == value) then
                return true
              end
              i = (i + 1)
            end
            return false
          end
          function unique_strings(arr)
            local res = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(arr)) do
                  if (not contains_string(res, arr[i + 1])) then
                    res = (function(lst, item)
                    lst = lst or {}
                    table.insert(lst, item)
                    return lst
                  end)(res, arr[i + 1])
                end
                i = (i + 1)
              end
              return res
            end
            function check(binary)
              local pi = {}
              local current = binary
              while true do
                local check1 = {}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(current)) do
                      check1 = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(check1, "$")
                    i = (i + 1)
                  end
                  local temp = {}
                  i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(current)) do
                        local j = (i + 1)
                        while (j < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(current)) do
                              local k = compare_string(current[i + 1], current[j + 1])
                              if (k == "") then
                                check1[i + 1] = "*"
                                check1[j + 1] = "*"
                                temp = (function(lst, item)
                                lst = lst or {}
                                table.insert(lst, item)
                                return lst
                              end)(temp, "X")
                            end
                            j = (j + 1)
                          end
                          i = (i + 1)
                        end
                        i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(current)) do
                              if (check1[i + 1] == "$") then
                                pi = (function(lst, item)
                                lst = lst or {}
                                table.insert(lst, item)
                                return lst
                              end)(pi, current[i + 1])
                            end
                            i = (i + 1)
                          end
                          if ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(temp) == 0) then
                                return pi
                              end
                              current = unique_strings(temp)
                            end
                          end
                          function decimal_to_binary(no_of_variable, minterms)
                            local temp = {}
                            local idx = 0
                            while (idx < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(minterms)) do
                                  local minterm = minterms[idx + 1]
                                  local _string = ""
                                  local i = 0
                                  while (i < no_of_variable) do
                                    _string = (_str((minterm % 2)) .. _string)
                                    minterm = (minterm // 2)
                                    i = (i + 1)
                                  end
                                  temp = (function(lst, item)
                                  lst = lst or {}
                                  table.insert(lst, item)
                                  return lst
                                end)(temp, _string)
                                idx = (idx + 1)
                              end
                              return temp
                            end
                            function is_for_table(string1, string2, count)
                              local count_n = 0
                              local i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(string1)) do
                                    local c1 = _substring(string1, i, (i + 1))
                                    local c2 = _substring(string2, i, (i + 1))
                                    if (c1 ~= c2) then
                                      count_n = (count_n + 1)
                                    end
                                    i = (i + 1)
                                  end
                                  return (count_n == count)
                                end
                                function count_ones(row)
                                  local c = 0
                                  local j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(row)) do
                                        if (row[j + 1] == 1) then
                                          c = (c + 1)
                                        end
                                        j = (j + 1)
                                      end
                                      return c
                                    end
                                    function selection(chart, prime_implicants)
                                      local temp = {}
                                      local select = {}
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(chart)) do
                                            select = (function(lst, item)
                                            lst = lst or {}
                                            table.insert(lst, item)
                                            return lst
                                          end)(select, 0)
                                          i = (i + 1)
                                        end
                                        local col = 0
                                        while (col < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(chart[0 + 1])) do
                                              local count = 0
                                              local row = 0
                                              while (row < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(chart)) do
                                                    if (chart[row + 1][col + 1] == 1) then
                                                      count = (count + 1)
                                                    end
                                                    row = (row + 1)
                                                  end
                                                  if (count == 1) then
                                                    local rem = 0
                                                    row = 0
                                                    while (row < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(chart)) do
                                                          if (chart[row + 1][col + 1] == 1) then
                                                            rem = row
                                                          end
                                                          row = (row + 1)
                                                        end
                                                        select[rem + 1] = 1
                                                      end
                                                      col = (col + 1)
                                                    end
                                                    i = 0
                                                    while (i < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(select)) do
                                                          if (select[i + 1] == 1) then
                                                            local j = 0
                                                            while (j < (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(chart[0 + 1])) do
                                                                  if (chart[i + 1][j + 1] == 1) then
                                                                    local r = 0
                                                                    while (r < (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(chart)) do
                                                                          chart[r + 1][j + 1] = 0
                                                                          r = (r + 1)
                                                                        end
                                                                      end
                                                                      j = (j + 1)
                                                                    end
                                                                    temp = (function(lst, item)
                                                                    lst = lst or {}
                                                                    table.insert(lst, item)
                                                                    return lst
                                                                  end)(temp, prime_implicants[i + 1])
                                                                end
                                                                i = (i + 1)
                                                              end
                                                              while true do
                                                                local counts = {}
                                                                local r = 0
                                                                while (r < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(chart)) do
                                                                      counts = (function(lst, item)
                                                                      lst = lst or {}
                                                                      table.insert(lst, item)
                                                                      return lst
                                                                    end)(counts, count_ones(chart[r + 1]))
                                                                    r = (r + 1)
                                                                  end
                                                                  local max_n = counts[0 + 1]
                                                                  local rem = 0
                                                                  local k = 1
                                                                  while (k < (function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(counts)) do
                                                                        if (counts[k + 1] > max_n) then
                                                                          max_n = counts[k + 1]
                                                                          rem = k
                                                                        end
                                                                        k = (k + 1)
                                                                      end
                                                                      if (max_n == 0) then
                                                                        return temp
                                                                      end
                                                                      temp = (function(lst, item)
                                                                      lst = lst or {}
                                                                      table.insert(lst, item)
                                                                      return lst
                                                                    end)(temp, prime_implicants[rem + 1])
                                                                    local j = 0
                                                                    while (j < (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(chart[0 + 1])) do
                                                                          if (chart[rem + 1][j + 1] == 1) then
                                                                            local r2 = 0
                                                                            while (r2 < (function(v)
                                                                            if type(v) == 'table' and v.items ~= nil then
                                                                              return #v.items
                                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                                local c = 0
                                                                                for _ in pairs(v) do c = c + 1 end
                                                                                return c
                                                                              elseif type(v) == 'string' then
                                                                                  local l = utf8.len(v)
                                                                                  if l then return l end
                                                                                  return #v
                                                                                elseif type(v) == 'table' then
                                                                                    return #v
                                                                                  else
                                                                                    return 0
                                                                                  end
                                                                                end)(chart)) do
                                                                                  chart[r2 + 1][j + 1] = 0
                                                                                  r2 = (r2 + 1)
                                                                                end
                                                                              end
                                                                              j = (j + 1)
                                                                            end
                                                                          end
                                                                        end
                                                                        function count_char(s, ch)
                                                                          local cnt = 0
                                                                          local i = 0
                                                                          while (i < (function(v)
                                                                          if type(v) == 'table' and v.items ~= nil then
                                                                            return #v.items
                                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                                              local c = 0
                                                                              for _ in pairs(v) do c = c + 1 end
                                                                              return c
                                                                            elseif type(v) == 'string' then
                                                                                local l = utf8.len(v)
                                                                                if l then return l end
                                                                                return #v
                                                                              elseif type(v) == 'table' then
                                                                                  return #v
                                                                                else
                                                                                  return 0
                                                                                end
                                                                              end)(s)) do
                                                                                if (_substring(s, i, (i + 1)) == ch) then
                                                                                  cnt = (cnt + 1)
                                                                                end
                                                                                i = (i + 1)
                                                                              end
                                                                              return cnt
                                                                            end
                                                                            function prime_implicant_chart(prime_implicants, binary)
                                                                              local chart = {}
                                                                              local i = 0
                                                                              while (i < (function(v)
                                                                              if type(v) == 'table' and v.items ~= nil then
                                                                                return #v.items
                                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                                  local c = 0
                                                                                  for _ in pairs(v) do c = c + 1 end
                                                                                  return c
                                                                                elseif type(v) == 'string' then
                                                                                    local l = utf8.len(v)
                                                                                    if l then return l end
                                                                                    return #v
                                                                                  elseif type(v) == 'table' then
                                                                                      return #v
                                                                                    else
                                                                                      return 0
                                                                                    end
                                                                                  end)(prime_implicants)) do
                                                                                    local row = {}
                                                                                    local j = 0
                                                                                    while (j < (function(v)
                                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                                      return #v.items
                                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                                        local c = 0
                                                                                        for _ in pairs(v) do c = c + 1 end
                                                                                        return c
                                                                                      elseif type(v) == 'string' then
                                                                                          local l = utf8.len(v)
                                                                                          if l then return l end
                                                                                          return #v
                                                                                        elseif type(v) == 'table' then
                                                                                            return #v
                                                                                          else
                                                                                            return 0
                                                                                          end
                                                                                        end)(binary)) do
                                                                                          row = (function(lst, item)
                                                                                          lst = lst or {}
                                                                                          table.insert(lst, item)
                                                                                          return lst
                                                                                        end)(row, 0)
                                                                                        j = (j + 1)
                                                                                      end
                                                                                      chart = (function(lst, item)
                                                                                      lst = lst or {}
                                                                                      table.insert(lst, item)
                                                                                      return lst
                                                                                    end)(chart, row)
                                                                                    i = (i + 1)
                                                                                  end
                                                                                  i = 0
                                                                                  while (i < (function(v)
                                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                                    return #v.items
                                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                                      local c = 0
                                                                                      for _ in pairs(v) do c = c + 1 end
                                                                                      return c
                                                                                    elseif type(v) == 'string' then
                                                                                        local l = utf8.len(v)
                                                                                        if l then return l end
                                                                                        return #v
                                                                                      elseif type(v) == 'table' then
                                                                                          return #v
                                                                                        else
                                                                                          return 0
                                                                                        end
                                                                                      end)(prime_implicants)) do
                                                                                        local count = count_char(prime_implicants[i + 1], "_")
                                                                                        local j = 0
                                                                                        while (j < (function(v)
                                                                                        if type(v) == 'table' and v.items ~= nil then
                                                                                          return #v.items
                                                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                                                            local c = 0
                                                                                            for _ in pairs(v) do c = c + 1 end
                                                                                            return c
                                                                                          elseif type(v) == 'string' then
                                                                                              local l = utf8.len(v)
                                                                                              if l then return l end
                                                                                              return #v
                                                                                            elseif type(v) == 'table' then
                                                                                                return #v
                                                                                              else
                                                                                                return 0
                                                                                              end
                                                                                            end)(binary)) do
                                                                                              if is_for_table(prime_implicants[i + 1], binary[j + 1], count) then
                                                                                                chart[i + 1][j + 1] = 1
                                                                                              end
                                                                                              j = (j + 1)
                                                                                            end
                                                                                            i = (i + 1)
                                                                                          end
                                                                                          return chart
                                                                                        end
                                                                                        function main()
                                                                                          local no_of_variable = 3
                                                                                          local minterms = {1, 5, 7}
                                                                                          local binary = decimal_to_binary(no_of_variable, minterms)
                                                                                          local prime_implicants = check(binary)
                                                                                          print("Prime Implicants are:")
                                                                                          print((((type(
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(prime_implicants)) == "table")) and (
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(prime_implicants))) or (
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(prime_implicants))))
                                                                                          local chart = prime_implicant_chart(prime_implicants, binary)
                                                                                          local essential_prime_implicants = selection(chart, prime_implicants)
                                                                                          print("Essential Prime Implicants are:")
                                                                                          print((((type(
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(essential_prime_implicants)) == "table")) and (
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(essential_prime_implicants))) or (
                                                                                          (function(v)
                                                                                          local function encode(x)
                                                                                          if type(x) == "table" then
                                                                                            if x.__name and x.__order then
                                                                                              local parts = {x.__name, " {"}
                                                                                              for i, k in ipairs(x.__order) do
                                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                              end
                                                                                              parts[#parts+1] = "}"
                                                                                              return table.concat(parts)
                                                                                            elseif #x > 0 then
                                                                                                local allTables = true
                                                                                                for _, v in ipairs(x) do
                                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                                end
                                                                                                local parts = {}
                                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                                for i, val in ipairs(x) do
                                                                                                  parts[#parts+1] = encode(val)
                                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                                end
                                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                                return table.concat(parts)
                                                                                              else
                                                                                                local keys = {}
                                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                local parts = {"{"}
                                                                                                for i, k in ipairs(keys) do
                                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                                end
                                                                                                parts[#parts+1] = "}"
                                                                                                return table.concat(parts)
                                                                                              end
                                                                                            elseif type(x) == "string" then
                                                                                                return '"' .. x .. '"'
                                                                                              else
                                                                                                return tostring(x)
                                                                                              end
                                                                                            end
                                                                                            return encode(v)
                                                                                          end)(essential_prime_implicants))))
                                                                                        end
                                                                                        main()
                                                                                        local _bench_end = os.clock()
                                                                                        collectgarbage()
                                                                                        local _bench_end_mem = collectgarbage('count') * 1024
                                                                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                                      end;
