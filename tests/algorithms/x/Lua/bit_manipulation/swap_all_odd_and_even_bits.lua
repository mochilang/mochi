-- Generated by Mochi v0.10.59 on 2025-08-06 16:39 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pad_left_num(n)
    local s = tostring(n)
    while ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) < 5) do
          s = (" " .. s)
        end
        return s
      end
      function to_binary(n)
        local sign = ""
        local num = n
        if (num < 0) then
          sign = "-"
          num = (0 - num)
        end
        local bits = ""
        while (num > 0) do
          bits = (tostring((num % 2)) .. bits)
          num = ((num - (num % 2)) // 2)
        end
        if (bits == "") then
          bits = "0"
        end
        local min_width = 8
        while ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(bits) < (min_width - (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sign))) do
                  bits = ("0" .. bits)
                end
                return (sign .. bits)
              end
              function show_bits(before, after)
                return ((((((pad_left_num(before) .. ": ") .. to_binary(before)) .. "\n") .. pad_left_num(after)) .. ": ") .. to_binary(after))
              end
              function lshift(num, k)
                local result = num
                local i = 0
                while (i < k) do
                  result = (result * 2)
                  i = (i + 1)
                end
                return result
              end
              function rshift(num, k)
                local result = num
                local i = 0
                while (i < k) do
                  result = ((result - (result % 2)) // 2)
                  i = (i + 1)
                end
                return result
              end
              function swap_odd_even_bits(num)
                local n = num
                if (n < 0) then
                  n = (n + 4294967296)
                end
                local result = 0
                local i = 0
                while (i < 32) do
                  local bit1 = (rshift(n, i) % 2)
                  local bit2 = (rshift(n, (i + 1)) % 2)
                  result = ((result + lshift(bit1, (i + 1))) + lshift(bit2, i))
                  i = (i + 2)
                end
                return result
              end
              function main()
                local nums = {(-1), 0, 1, 2, 3, 4, 23, 24}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(nums)) do
                      local n = nums[i + 1]
                      print((((type(show_bits(n, swap_odd_even_bits(n))) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(show_bits(n, swap_odd_even_bits(n)))) or (show_bits(n, swap_odd_even_bits(n)))))
                      print("")
                      i = (i + 1)
                    end
                  end
                  main()
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
