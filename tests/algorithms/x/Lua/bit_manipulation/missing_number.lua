-- Generated by Mochi v0.10.61 on 2025-08-08 19:00 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function find_missing_number(nums)
    local low = math.floor(tonumber((function(lst)
    local m = nil
    for _, v in ipairs(lst) do
      if m == nil or v < m then
        m = v
      end
    end
    return m
  end)(nums)) or 0)
  local high = math.floor(tonumber((function(lst)
  local m = nil
  for _, v in ipairs(lst) do
    if m == nil or v > m then
      m = v
    end
  end
  return m
end)(nums)) or 0)
local count = ((high - low) + 1)
local expected_sum = (((low + high) * count) // 2)
local actual_sum = 0
local i = 0
local n = (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(nums)
    while (i < n) do
      actual_sum = (actual_sum + nums[i + 1])
      i = (i + 1)
    end
    return (expected_sum - actual_sum)
  end
  print(find_missing_number({0, 1, 3, 4}))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
