-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function bubble_sort(nums)
    local arr = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(nums)) do
          arr = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(arr, nums[i + 1])
        i = (i + 1)
      end
      local n = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr)
          local a = 0
          while (a < n) do
            local b = 0
            while (b < ((n - a) - 1)) do
              if (arr[b + 1] > arr[(b + 1) + 1]) then
                local tmp = arr[b + 1]
                arr[b + 1] = arr[(b + 1) + 1]
                arr[(b + 1) + 1] = tmp
              end
              b = (b + 1)
            end
            a = (a + 1)
          end
          return arr
        end
        function sort3(xs)
          local arr = {}
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(xs)) do
                arr = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(arr, xs[i + 1])
              i = (i + 1)
            end
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(arr)
                local a = 0
                while (a < n) do
                  local b = 0
                  while (b < ((n - a) - 1)) do
                    if (arr[b + 1] > arr[(b + 1) + 1]) then
                      local tmp = arr[b + 1]
                      arr[b + 1] = arr[(b + 1) + 1]
                      arr[(b + 1) + 1] = tmp
                    end
                    b = (b + 1)
                  end
                  a = (a + 1)
                end
                return arr
              end
              function triplet_sum1(arr, target)
                local i = 0
                while (i < ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(arr) - 2)) do
                      local j = (i + 1)
                      while (j < ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(arr) - 1)) do
                            local k = (j + 1)
                            while (k < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(arr)) do
                                  if (((arr[i + 1] + arr[j + 1]) + arr[k + 1]) == target) then
                                    return sort3({arr[i + 1], arr[j + 1], arr[k + 1]})
                                  end
                                  k = (k + 1)
                                end
                                j = (j + 1)
                              end
                              i = (i + 1)
                            end
                            return {0, 0, 0}
                          end
                          function triplet_sum2(arr, target)
                            local sorted = bubble_sort(arr)
                            local n = (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(sorted)
                                local i = 0
                                while (i < (n - 2)) do
                                  local left = (i + 1)
                                  local right = (n - 1)
                                  while (left < right) do
                                    local s = ((sorted[i + 1] + sorted[left + 1]) + sorted[right + 1])
                                    if (s == target) then
                                      return {sorted[i + 1], sorted[left + 1], sorted[right + 1]}
                                    end
                                    if (s < target) then
                                      left = (left + 1)
                                    else
                                      right = (right - 1)
                                    end
                                  end
                                  i = (i + 1)
                                end
                                return {0, 0, 0}
                              end
                              function list_equal(a, b)
                                if ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(a) ~= (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(b)) then
                                          return false
                                        end
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(a)) do
                                              if (a[i + 1] ~= b[i + 1]) then
                                                return false
                                              end
                                              i = (i + 1)
                                            end
                                            return true
                                          end
                                          function test_triplet_sum()
                                            local arr1 = {13, 29, 7, 23, 5}
                                            if (not list_equal(triplet_sum1(arr1, 35), {5, 7, 23})) then
                                              _panic("ts1 case1 failed")
                                            end
                                            if (not list_equal(triplet_sum2(arr1, 35), {5, 7, 23})) then
                                              _panic("ts2 case1 failed")
                                            end
                                            local arr2 = {37, 9, 19, 50, 44}
                                            if (not list_equal(triplet_sum1(arr2, 65), {9, 19, 37})) then
                                              _panic("ts1 case2 failed")
                                            end
                                            if (not list_equal(triplet_sum2(arr2, 65), {9, 19, 37})) then
                                              _panic("ts2 case2 failed")
                                            end
                                            local arr3 = {6, 47, 27, 1, 15}
                                            if (not list_equal(triplet_sum1(arr3, 11), {0, 0, 0})) then
                                              _panic("ts1 case3 failed")
                                            end
                                            if (not list_equal(triplet_sum2(arr3, 11), {0, 0, 0})) then
                                              _panic("ts2 case3 failed")
                                            end
                                          end
                                          function main()
                                            test_triplet_sum()
                                            local sample = {13, 29, 7, 23, 5}
                                            local res = triplet_sum2(sample, 35)
                                            print((((type(((((tostring(res[0 + 1]) .. " ") .. tostring(res[1 + 1])) .. " ") .. tostring(res[2 + 1]))) == "table")) and (
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)(((((tostring(res[0 + 1]) .. " ") .. tostring(res[1 + 1])) .. " ") .. tostring(res[2 + 1])))) or (((((tostring(res[0 + 1]) .. " ") .. tostring(res[1 + 1])) .. " ") .. tostring(res[2 + 1])))))
                                          end
                                          main()
                                          local _bench_end = os.clock()
                                          collectgarbage()
                                          local _bench_end_mem = collectgarbage('count') * 1024
                                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                        end;
