-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function min_int(a, b)
    if (a < b) then
      return a
    end
    return b
  end
  function int_sqrt(n)
    local r = 0
    while (((r + 1) * (r + 1)) <= n) do
      r = (r + 1)
    end
    return r
  end
  function sieve(n)
    if (n <= 0) then
      _panic("Number must instead be a positive integer")
    end
    local in_prime = {}
    local start = 2
    local _end = int_sqrt(n)
    local temp = {}
    local i = 0
    while (i < (_end + 1)) do
      temp = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(temp, 1)
    i = (i + 1)
  end
  local prime = {}
  while (start <= _end) do
    if (temp[start + 1] == 1) then
      in_prime = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(in_prime, start)
    local j = (start * start)
    while (j <= _end) do
      temp[j + 1] = 0
      j = (j + start)
    end
  end
  start = (start + 1)
end
i = 0
while (i < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(in_prime)) do
      prime = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(prime, in_prime[i + 1])
    i = (i + 1)
  end
  local low = (_end + 1)
  local high = min_int((2 * _end), n)
  while (low <= n) do
    local tempSeg = {}
    local size = ((high - low) + 1)
    local k = 0
    while (k < size) do
      tempSeg = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(tempSeg, 1)
    k = (k + 1)
  end
  local idx = 0
  while (idx < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(in_prime)) do
        local each = in_prime[idx + 1]
        local t = ((low // each) * each)
        if (t < low) then
          t = (t + each)
        end
        local j2 = t
        while (j2 <= high) do
          tempSeg[(j2 - low) + 1] = 0
          j2 = (j2 + each)
        end
        idx = (idx + 1)
      end
      local j3 = 0
      while (j3 < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(tempSeg)) do
            if (tempSeg[j3 + 1] == 1) then
              prime = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(prime, (j3 + low))
          end
          j3 = (j3 + 1)
        end
        low = (high + 1)
        high = min_int((high + _end), n)
      end
      return prime
    end
    function lists_equal(a, b)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(a) ~= (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(b)) then
                return false
              end
              local m = 0
              while (m < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(a)) do
                    if (a[m + 1] ~= b[m + 1]) then
                      return false
                    end
                    m = (m + 1)
                  end
                  return true
                end
                function test_sieve()
                  local e1 = sieve(8)
                  if (not lists_equal(e1, {2, 3, 5, 7})) then
                    _panic("sieve(8) failed")
                  end
                  local e2 = sieve(27)
                  if (not lists_equal(e2, {2, 3, 5, 7, 11, 13, 17, 19, 23})) then
                    _panic("sieve(27) failed")
                  end
                end
                function main()
                  test_sieve()
                  print((((type(
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(sieve(30))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(sieve(30)))) or (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(sieve(30)))))
                end
                main()
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
