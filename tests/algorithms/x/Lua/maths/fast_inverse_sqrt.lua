-- Generated by Mochi v0.10.66 on 2025-08-16 14:41 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow2_int(n)
    local result = 1
    local i = 0
    while (i < n) do
      result = (result * 2)
      i = (i + 1)
    end
    return result
  end
  function pow2_float(n)
    local result = 1.0
    if (n >= 0) then
      local i = 0
      while (i < n) do
        result = (result * 2.0)
        i = (i + 1)
      end
    else
      local i = 0
      local m = (0 - n)
      while (i < m) do
        result = (result / 2.0)
        i = (i + 1)
      end
    end
    return result
  end
  function lshift(num, k)
    local result = num
    local i = 0
    while (i < k) do
      result = (result * 2)
      i = (i + 1)
    end
    return result
  end
  function rshift(num, k)
    local result = num
    local i = 0
    while (i < k) do
      result = ((result - (result % 2)) // 2)
      i = (i + 1)
    end
    return result
  end
  function log2_floor(x)
    local n = x
    local e = 0
    while (n >= 2.0) do
      n = (n / 2.0)
      e = (e + 1)
    end
    while (n < 1.0) do
      n = (n * 2.0)
      e = (e - 1)
    end
    return e
  end
  function float_to_bits(x)
    local num = x
    local sign = 0
    if (num < 0.0) then
      sign = 1
      num = (-num)
    end
    local exp = log2_floor(num)
    local pow = pow2_float(exp)
    local normalized = (num / pow)
    local frac = (normalized - 1.0)
    local mantissa = (math.modf(tonumber((frac * pow2_float(23))) or 0))
    local exp_bits = (exp + 127)
    return ((lshift(sign, 31) + lshift(exp_bits, 23)) + mantissa)
  end
  function bits_to_float(bits)
    local sign_bit = (rshift(bits, 31) % 2)
    local sign = 1.0
    if (sign_bit == 1) then
      sign = (-1.0)
    end
    local exp_bits = (rshift(bits, 23) % 256)
    local exp = (exp_bits - 127)
    local mantissa_bits = (bits % pow2_int(23))
    local mantissa = (1.0 + (mantissa_bits / pow2_float(23)))
    return ((sign * mantissa) * pow2_float(exp))
  end
  function absf(x)
    if (x < 0.0) then
      return (-x)
    end
    return x
  end
  function sqrtApprox(x)
    if (x <= 0.0) then
      return 0.0
    end
    local guess = (x / 2.0)
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2.0)
      i = (i + 1)
    end
    return guess
  end
  function is_close(a, b, rel_tol)
    return (absf((a - b)) <= (rel_tol * absf(b)))
  end
  function fast_inverse_sqrt(number)
    if (number <= 0.0) then
      _panic("Input must be a positive number.")
    end
    local i = float_to_bits(number)
    local magic = 1597463007
    local y_bits = (magic - rshift(i, 1))
    local y = bits_to_float(y_bits)
    y = (y * (1.5 - (((0.5 * number) * y) * y)))
    return y
  end
  function test_fast_inverse_sqrt()
    if (absf((fast_inverse_sqrt(10.0) - 0.3156857923527257)) > 0.0001) then
      _panic("fast_inverse_sqrt(10) failed")
    end
    if (absf((fast_inverse_sqrt(4.0) - 0.49915357479239103)) > 0.0001) then
      _panic("fast_inverse_sqrt(4) failed")
    end
    if (absf((fast_inverse_sqrt(4.1) - 0.4932849504615651)) > 0.0001) then
      _panic("fast_inverse_sqrt(4.1) failed")
    end
    local i = 50
    while (i < 60) do
      local y = fast_inverse_sqrt(i)
      local actual = (1.0 / sqrtApprox(i))
      if (not is_close(y, actual, 0.00132)) then
        _panic("relative error too high")
      end
      i = (i + 1)
    end
  end
  function main()
    test_fast_inverse_sqrt()
    local i = 5
    while (i <= 100) do
      local diff = ((1.0 / sqrtApprox(i)) - fast_inverse_sqrt(i))
      print((((type(((_str(i) .. ": ") .. _str(diff))) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
              return string.format("%d", x)
            else
              return tostring(x)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(((_str(i) .. ": ") .. _str(diff)))) or (((_str(i) .. ": ") .. _str(diff)))))
        i = (i + 5)
      end
    end
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
