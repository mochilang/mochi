-- Generated by Mochi v0.10.67 on 2025-08-17 14:03 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function factorial(n)
    if (n < 0) then
      _panic("factorial() not defined for negative values")
    end
    local value = 1
    local i = 1
    while (i <= n) do
      value = (value * i)
      i = (i + 1)
    end
    return value
  end
  function factorial_recursive(n)
    if (n < 0) then
      _panic("factorial() not defined for negative values")
    end
    if (n <= 1) then
      return 1
    end
    return (n * factorial_recursive((n - 1)))
  end
  function test_zero()
    if (factorial(0) ~= 1) then
      _panic("factorial(0) failed")
    end
    if (factorial_recursive(0) ~= 1) then
      _panic("factorial_recursive(0) failed")
    end
  end
  function test_positive_integers()
    if (factorial(1) ~= 1) then
      _panic("factorial(1) failed")
    end
    if (factorial_recursive(1) ~= 1) then
      _panic("factorial_recursive(1) failed")
    end
    if (factorial(5) ~= 120) then
      _panic("factorial(5) failed")
    end
    if (factorial_recursive(5) ~= 120) then
      _panic("factorial_recursive(5) failed")
    end
    if (factorial(7) ~= 5040) then
      _panic("factorial(7) failed")
    end
    if (factorial_recursive(7) ~= 5040) then
      _panic("factorial_recursive(7) failed")
    end
  end
  function test_large_number()
    if (factorial(10) ~= 3628800) then
      _panic("factorial(10) failed")
    end
    if (factorial_recursive(10) ~= 3628800) then
      _panic("factorial_recursive(10) failed")
    end
  end
  function run_tests()
    test_zero()
    test_positive_integers()
    test_large_number()
  end
  function main()
    run_tests()
    print(factorial(6))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
