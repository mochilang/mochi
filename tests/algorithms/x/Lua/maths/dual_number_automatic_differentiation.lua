-- Generated by Mochi v0.10.63 on 2025-08-11 22:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_dual(real, rank)
    local ds = {}
    local i = 0
    while (i < rank) do
      ds = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(ds, 1)
    i = (i + 1)
  end
  return {real = real, duals = ds}
end
function dual_from_list(real, ds)
  return {real = real, duals = ds}
end
function dual_add(a, b)
  local s_dual = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(a.duals)) do
        s_dual = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(s_dual, a.duals[i + 1])
      i = (i + 1)
    end
    local o_dual = {}
    local j = 0
    while (j < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(b.duals)) do
          o_dual = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(o_dual, b.duals[j + 1])
        j = (j + 1)
      end
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s_dual) > (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(o_dual)) then
                local diff = ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s_dual) - (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(o_dual))
                        local k = 0
                        while (k < diff) do
                          o_dual = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(o_dual, 1)
                        k = (k + 1)
                      end
                    else
                      if ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(s_dual) < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(o_dual)) then
                                local diff2 = ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(o_dual) - (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(s_dual))
                                        local k2 = 0
                                        while (k2 < diff2) do
                                          s_dual = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(s_dual, 1)
                                        k2 = (k2 + 1)
                                      end
                                    end
                                  end
                                  local new_duals = {}
                                  local idx = 0
                                  while (idx < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(s_dual)) do
                                        new_duals = (function(lst, item)
                                        lst = lst or {}
                                        table.insert(lst, item)
                                        return lst
                                      end)(new_duals, (s_dual[idx + 1] + o_dual[idx + 1]))
                                      idx = (idx + 1)
                                    end
                                    return {real = (a.real + b.real), duals = new_duals}
                                  end
                                  function dual_add_real(a, b)
                                    local ds = {}
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(a.duals)) do
                                          ds = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(ds, a.duals[i + 1])
                                        i = (i + 1)
                                      end
                                      return {real = (a.real + b), duals = ds}
                                    end
                                    function dual_mul(a, b)
                                      local new_len = (((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(a.duals) + (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(b.duals)) + 1)
                                              local new_duals = {}
                                              local idx = 0
                                              while (idx < new_len) do
                                                new_duals = (function(lst, item)
                                                lst = lst or {}
                                                table.insert(lst, item)
                                                return lst
                                              end)(new_duals, 0)
                                              idx = (idx + 1)
                                            end
                                            local i = 0
                                            while (i < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(a.duals)) do
                                                  local j = 0
                                                  while (j < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(b.duals)) do
                                                        local pos = ((i + j) + 1)
                                                        local val = (new_duals[pos + 1] + (a.duals[i + 1] * b.duals[j + 1]))
                                                        new_duals[pos + 1] = val
                                                        j = (j + 1)
                                                      end
                                                      i = (i + 1)
                                                    end
                                                    local k = 0
                                                    while (k < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(a.duals)) do
                                                          local val = (new_duals[k + 1] + (a.duals[k + 1] * b.real))
                                                          new_duals[k + 1] = val
                                                          k = (k + 1)
                                                        end
                                                        local l = 0
                                                        while (l < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(b.duals)) do
                                                              local val = (new_duals[l + 1] + (b.duals[l + 1] * a.real))
                                                              new_duals[l + 1] = val
                                                              l = (l + 1)
                                                            end
                                                            return {real = (a.real * b.real), duals = new_duals}
                                                          end
                                                          function dual_mul_real(a, b)
                                                            local ds = {}
                                                            local i = 0
                                                            while (i < (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(a.duals)) do
                                                                  ds = (function(lst, item)
                                                                  lst = lst or {}
                                                                  table.insert(lst, item)
                                                                  return lst
                                                                end)(ds, (a.duals[i + 1] * b))
                                                                i = (i + 1)
                                                              end
                                                              return {real = (a.real * b), duals = ds}
                                                            end
                                                            function dual_pow(x, n)
                                                              if (n < 0) then
                                                                _panic("power must be a positive integer")
                                                              end
                                                              if (n == 0) then
                                                                return {real = 1, duals = {}}
                                                              end
                                                              local res = x
                                                              local i = 1
                                                              while (i < n) do
                                                                res = dual_mul(res, x)
                                                                i = (i + 1)
                                                              end
                                                              return res
                                                            end
                                                            function factorial(n)
                                                              local res = 1
                                                              local i = 2
                                                              while (i <= n) do
                                                                res = (res * i)
                                                                i = (i + 1)
                                                              end
                                                              return res
                                                            end
                                                            function differentiate(func, position, order)
                                                              local d = make_dual(position, 1)
                                                              local result = func((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(d))
                                                              if (order == 0) then
                                                                return result.real
                                                              end
                                                              return (result.duals[(order - 1) + 1] * factorial(order))
                                                            end
                                                            function test_differentiate()
                                                              local function f1(x)
                                                              return dual_pow(x, 2)
                                                            end
                                                            if (differentiate(f1, 2, 2) ~= 2) then
                                                              _panic("f1 failed")
                                                            end
                                                            local function f2(x)
                                                            return dual_mul(dual_pow(x, 2), dual_pow(x, 4))
                                                          end
                                                          if (differentiate(f2, 9, 2) ~= 196830) then
                                                            _panic("f2 failed")
                                                          end
                                                          local function f3(y)
                                                          return dual_mul_real(dual_pow(dual_add_real(y, 3), 6), 0.5)
                                                        end
                                                        if (differentiate(f3, 3.5, 4) ~= 7605) then
                                                          _panic("f3 failed")
                                                        end
                                                        local function f4(y)
                                                        return dual_pow(y, 2)
                                                      end
                                                      if (differentiate(f4, 4, 3) ~= 0) then
                                                        _panic("f4 failed")
                                                      end
                                                    end
                                                    function main()
                                                      test_differentiate()
                                                      local function f(y)
                                                      return dual_mul(dual_pow(y, 2), dual_pow(y, 4))
                                                    end
                                                    local res = differentiate(f, 9, 2)
                                                    print((((type(res) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(res)) or (res)))
                                                  end
                                                  main()
                                                  local _bench_end = os.clock()
                                                  collectgarbage()
                                                  local _bench_end_mem = collectgarbage('count') * 1024
                                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                end;
