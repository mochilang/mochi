-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function gcd(a, b)
    local x = (((a < 0)) and ((-a)) or (a))
    local y = (((b < 0)) and ((-b)) or (b))
    while (y ~= 0) do
      local t = (x % y)
      x = y
      y = t
    end
    return x
  end
  function rand_fn(value, step, modulus)
    return (((value * value) + step) % modulus)
  end
  function pollard_rho(num, seed, step, attempts)
    if (num < 2) then
      _panic("The input value cannot be less than 2")
    end
    if ((num > 2) and ((num % 2) == 0)) then
      return {factor = 2, ok = true}
    end
    local s = seed
    local st = step
    local i = 0
    while (i < attempts) do
      local tortoise = s
      local hare = s
      while true do
        ::__cont_2::
        tortoise = rand_fn(tortoise, st, num)
        hare = rand_fn(hare, st, num)
        hare = rand_fn(hare, st, num)
        local divisor = gcd((hare - tortoise), num)
        if (divisor == 1) then
          goto __cont_2
        else
          if (divisor == num) then
            break
          else
            return {factor = divisor, ok = true}
          end
        end
      end
      s = hare
      st = (st + 1)
      i = (i + 1)
      ::__cont_1::
    end
    return {factor = 0, ok = false}
  end
  function test_pollard_rho()
    local r1 = pollard_rho(8051, 2, 1, 5)
    if ((not r1.ok) or ((r1.factor ~= 83) and (r1.factor ~= 97))) then
      _panic("test1 failed")
    end
    local r2 = pollard_rho(10403, 2, 1, 5)
    if ((not r2.ok) or ((r2.factor ~= 101) and (r2.factor ~= 103))) then
      _panic("test2 failed")
    end
    local r3 = pollard_rho(100, 2, 1, 3)
    if ((not r3.ok) or (r3.factor ~= 2)) then
      _panic("test3 failed")
    end
    local r4 = pollard_rho(17, 2, 1, 3)
    if r4.ok then
      _panic("test4 failed")
    end
    local r5 = pollard_rho(((17 * 17) * 17), 2, 1, 3)
    if ((not r5.ok) or (r5.factor ~= 17)) then
      _panic("test5 failed")
    end
    local r6 = pollard_rho(((17 * 17) * 17), 2, 1, 1)
    if r6.ok then
      _panic("test6 failed")
    end
    local r7 = pollard_rho(((3 * 5) * 7), 2, 1, 3)
    if ((not r7.ok) or (r7.factor ~= 21)) then
      _panic("test7 failed")
    end
  end
  function main()
    test_pollard_rho()
    local a = pollard_rho(100, 2, 1, 3)
    if a.ok then
      print((((type(tostring(a.factor)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(tostring(a.factor))) or (tostring(a.factor))))
    else
      print("None")
    end
    local b = pollard_rho(17, 2, 1, 3)
    if b.ok then
      print((((type(tostring(b.factor)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(tostring(b.factor))) or (tostring(b.factor))))
    else
      print("None")
    end
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
