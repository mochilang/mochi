-- Generated by Mochi v0.10.59 on 2025-08-07 10:05 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function runge_kutta_fehlberg_45(func, x_initial, y_initial, step_size, x_final)
    if (x_initial >= x_final) then
      _panic("The final value of x must be greater than initial value of x.")
    end
    if (step_size <= 0) then
      _panic("Step size must be positive.")
    end
    local n = math.floor(tonumber(((x_final - x_initial) / step_size)) or 0)
    local ys = {}
    local x = x_initial
    local y = y_initial
    ys = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(ys, y)
  local i = 0
  while (i < n) do
    local k1 = (step_size * func(x, y))
    local k2 = (step_size * func((x + (step_size / 4)), (y + (k1 / 4))))
    local k3 = (step_size * func((x + ((3 / 8) * step_size)), ((y + ((3 / 32) * k1)) + ((9 / 32) * k2))))
    local k4 = (step_size * func((x + ((12 / 13) * step_size)), (((y + ((1932 / 2197) * k1)) - ((7200 / 2197) * k2)) + ((7296 / 2197) * k3))))
    local k5 = (step_size * func((x + step_size), ((((y + ((439 / 216) * k1)) - (8 * k2)) + ((3680 / 513) * k3)) - ((845 / 4104) * k4))))
    local k6 = (step_size * func((x + (step_size / 2)), (((((y - ((8 / 27) * k1)) + (2 * k2)) - ((3544 / 2565) * k3)) + ((1859 / 4104) * k4)) - ((11 / 40) * k5))))
    y = (((((y + ((16 / 135) * k1)) + ((6656 / 12825) * k3)) + ((28561 / 56430) * k4)) - ((9 / 50) * k5)) + ((2 / 55) * k6))
    x = (x + step_size)
    ys = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(ys, y)
  i = (i + 1)
end
return ys
end
function main()
  local function f1(x, y)
  return (1 + (y * y))
end
local y1 = runge_kutta_fehlberg_45(f1, 0, 0, 0.2, 1)
print((((type(y1[1 + 1]) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(y1[1 + 1])) or (y1[1 + 1])))
local function f2(x, y)
return x
end
local y2 = runge_kutta_fehlberg_45(f2, (-1), 0, 0.2, 0)
print((((type(y2[1 + 1]) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(y2[1 + 1])) or (y2[1 + 1])))
end
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
