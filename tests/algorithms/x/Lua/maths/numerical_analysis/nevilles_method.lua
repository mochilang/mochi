-- Generated by Mochi v0.10.59 on 2025-08-07 10:05 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function neville_interpolate(x_points, y_points, x0)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(x_points)
        local q = {}
        local i = 0
        while (i < n) do
          local row = {}
          local j = 0
          while (j < n) do
            row = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(row, 0)
          j = (j + 1)
        end
        q = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(q, row)
      i = (i + 1)
    end
    i = 0
    while (i < n) do
      q[i + 1][1 + 1] = y_points[i + 1]
      i = (i + 1)
    end
    local col = 2
    while (col < n) do
      local row_idx = col
      while (row_idx < n) do
        q[row_idx + 1][col + 1] = ((((x0 - x_points[((row_idx - col) + 1) + 1]) * q[row_idx + 1][(col - 1) + 1]) - ((x0 - x_points[row_idx + 1]) * q[(row_idx - 1) + 1][(col - 1) + 1])) / (x_points[row_idx + 1] - x_points[((row_idx - col) + 1) + 1]))
        row_idx = (row_idx + 1)
      end
      col = (col + 1)
    end
    return {value = q[(n - 1) + 1][(n - 1) + 1], table = q}
  end
  function test_neville()
    local xs = {1, 2, 3, 4, 6}
    local ys = {6, 7, 8, 9, 11}
    local r1 = neville_interpolate(xs, ys, 5)
    if (r1.value ~= 10) then
      _panic("neville_interpolate at 5 failed")
    end
    local r2 = neville_interpolate(xs, ys, 99)
    if (r2.value ~= 104) then
      _panic("neville_interpolate at 99 failed")
    end
  end
  function main()
    test_neville()
    local xs = {1, 2, 3, 4, 6}
    local ys = {6, 7, 8, 9, 11}
    local r = neville_interpolate(xs, ys, 5)
    print((((type(r.value) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(r.value)) or (r.value)))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
