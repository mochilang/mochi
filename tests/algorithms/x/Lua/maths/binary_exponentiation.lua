-- Generated by Mochi v0.10.66 on 2025-08-16 11:48 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function binary_exp_recursive(base, exponent)
    if (exponent < 0) then
      _panic("exponent must be non-negative")
    end
    if (exponent == 0) then
      return 1.0
    end
    if ((exponent % 2) == 1) then
      return (binary_exp_recursive(base, (exponent - 1)) * base)
    end
    local half = binary_exp_recursive(base, (exponent // 2))
    return (half * half)
  end
  function binary_exp_iterative(base, exponent)
    if (exponent < 0) then
      _panic("exponent must be non-negative")
    end
    local result = 1.0
    local b = base
    local e = exponent
    while (e > 0) do
      if ((e % 2) == 1) then
        result = (result * b)
      end
      b = (b * b)
      e = (e // 2)
    end
    return result
  end
  function binary_exp_mod_recursive(base, exponent, modulus)
    if (exponent < 0) then
      _panic("exponent must be non-negative")
    end
    if (modulus <= 0) then
      _panic("modulus must be positive")
    end
    if (exponent == 0) then
      return (1 % modulus)
    end
    if ((exponent % 2) == 1) then
      return ((binary_exp_mod_recursive(base, (exponent - 1), modulus) * (base % modulus)) % modulus)
    end
    local r = binary_exp_mod_recursive(base, (exponent // 2), modulus)
    return ((r * r) % modulus)
  end
  function binary_exp_mod_iterative(base, exponent, modulus)
    if (exponent < 0) then
      _panic("exponent must be non-negative")
    end
    if (modulus <= 0) then
      _panic("modulus must be positive")
    end
    local result = (1 % modulus)
    local b = (base % modulus)
    local e = exponent
    while (e > 0) do
      if ((e % 2) == 1) then
        result = ((result * b) % modulus)
      end
      b = ((b * b) % modulus)
      e = (e // 2)
    end
    return result
  end
  print((((type(binary_exp_recursive(3.0, 5)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "number" then
        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
          return string.format("%d", x)
        else
          return tostring(x)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(binary_exp_recursive(3.0, 5))) or (binary_exp_recursive(3.0, 5))))
    print((((type(binary_exp_iterative(1.5, 4)) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "number" then
          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
            return string.format("%d", x)
          else
            return tostring(x)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(binary_exp_iterative(1.5, 4))) or (binary_exp_iterative(1.5, 4))))
      print(binary_exp_mod_recursive(3, 4, 5))
      print(binary_exp_mod_iterative(11, 13, 7))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
