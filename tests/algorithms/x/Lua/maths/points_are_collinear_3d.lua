-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function create_vector(p1, p2)
    local vx = (p2.x - p1.x)
    local vy = (p2.y - p1.y)
    local vz = (p2.z - p1.z)
    return {x = vx, y = vy, z = vz}
  end
  function get_3d_vectors_cross(ab, ac)
    local cx = ((ab.y * ac.z) - (ab.z * ac.y))
    local cy = ((ab.z * ac.x) - (ab.x * ac.z))
    local cz = ((ab.x * ac.y) - (ab.y * ac.x))
    return {x = cx, y = cy, z = cz}
  end
  function pow10(exp)
    local result = 1
    local i = 0
    while (i < exp) do
      result = (result * 10)
      i = (i + 1)
    end
    return result
  end
  function round_float(x, digits)
    local factor = pow10(digits)
    local v = (x * factor)
    if (v >= 0) then
      v = (v + 0.5)
    else
      v = (v - 0.5)
    end
    local t = math.floor(tonumber(v) or 0)
    return (t / factor)
  end
  function is_zero_vector(v, accuracy)
    return (((round_float(v.x, accuracy) == 0) and (round_float(v.y, accuracy) == 0)) and (round_float(v.z, accuracy) == 0))
  end
  function are_collinear(a, b, c, accuracy)
    local ab = create_vector(a, b)
    local ac = create_vector(a, c)
    local cross = get_3d_vectors_cross((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ab), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ac))
    return is_zero_vector(cross, accuracy)
  end
  function test_are_collinear()
    local p1 = {x = 0, y = 0, z = 0}
    local p2 = {x = 1, y = 1, z = 1}
    local p3 = {x = 2, y = 2, z = 2}
    if (not are_collinear(p1, p2, p3, 10)) then
      _panic("collinear test failed")
    end
    local q3 = {x = 1, y = 2, z = 3}
    if are_collinear(p1, p2, q3, 10) then
      _panic("non-collinear test failed")
    end
  end
  function main()
    test_are_collinear()
    local a = {x = 4.802293498137402, y = 3.536233125455244, z = 0}
    local b = {x = (-2.186788107953106), y = (-9.24561398001649), z = 7.141509524846482}
    local c = {x = 1.530169574640268, y = (-2.447927606600034), z = 3.343487096469054}
    print((((type(tostring(are_collinear(a, b, c, 10))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(tostring(are_collinear(a, b, c, 10)))) or (tostring(are_collinear(a, b, c, 10)))))
    local d = {x = 2.399001826862445, y = (-2.452009976680793), z = 4.464656666157666}
    local e = {x = (-3.682816335934376), y = 5.753788986533145, z = 9.490993909044244}
    local f = {x = 1.962903518985307, y = 3.741415730125627, z = 7}
    print((((type(tostring(are_collinear(d, e, f, 10))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(tostring(are_collinear(d, e, f, 10)))) or (tostring(are_collinear(d, e, f, 10)))))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
