-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function copy_list(xs)
    local res = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          res = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(res, xs[i + 1])
        i = (i + 1)
      end
      return res
    end
    function polynomial_new(degree, coeffs)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(coeffs) ~= (degree + 1)) then
            _panic("The number of coefficients should be equal to the degree + 1.")
          end
          return {degree = degree, coefficients = copy_list(coeffs)}
        end
        function add(p, q)
          if (p.degree > q.degree) then
            local coeffs = copy_list(p.coefficients)
            local i = 0
            while (i <= q.degree) do
              coeffs[i + 1] = (coeffs[i + 1] + q.coefficients[i + 1])
              i = (i + 1)
            end
            return {degree = p.degree, coefficients = coeffs}
          else
            local coeffs = copy_list(q.coefficients)
            local i = 0
            while (i <= p.degree) do
              coeffs[i + 1] = (coeffs[i + 1] + p.coefficients[i + 1])
              i = (i + 1)
            end
            return {degree = q.degree, coefficients = coeffs}
          end
        end
        function neg(p)
          local coeffs = {}
          local i = 0
          while (i <= p.degree) do
            coeffs = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(coeffs, (-p.coefficients[i + 1]))
          i = (i + 1)
        end
        return {degree = p.degree, coefficients = coeffs}
      end
      function sub(p, q)
        return add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(neg((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(q))))
      end
      function mul(p, q)
        local size = ((p.degree + q.degree) + 1)
        local coeffs = {}
        local i = 0
        while (i < size) do
          coeffs = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(coeffs, 0)
        i = (i + 1)
      end
      i = 0
      while (i <= p.degree) do
        local j = 0
        while (j <= q.degree) do
          coeffs[(i + j) + 1] = (coeffs[(i + j) + 1] + (p.coefficients[i + 1] * q.coefficients[j + 1]))
          j = (j + 1)
        end
        i = (i + 1)
      end
      return {degree = (p.degree + q.degree), coefficients = coeffs}
    end
    function power(base, exp)
      local result = 1
      local i = 0
      while (i < exp) do
        result = (result * base)
        i = (i + 1)
      end
      return result
    end
    function evaluate(p, x)
      local result = 0
      local i = 0
      while (i <= p.degree) do
        result = (result + (p.coefficients[i + 1] * power(x, i)))
        i = (i + 1)
      end
      return result
    end
    function poly_to_string(p)
      local s = ""
      local i = p.degree
      while (i >= 0) do
        local coeff = p.coefficients[i + 1]
        if (coeff ~= 0) then
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(s) > 0) then
                if (coeff > 0) then
                  s = (s .. " + ")
                else
                  s = (s .. " - ")
                end
              else
                if (coeff < 0) then
                  s = (s .. "-")
                end
              end
              local abs_coeff = (((coeff < 0)) and ((-coeff)) or (coeff))
              if (i == 0) then
                s = (s .. _str(abs_coeff))
              else
                if (i == 1) then
                  s = ((s .. _str(abs_coeff)) .. "x")
                else
                  s = (((s .. _str(abs_coeff)) .. "x^") .. _str(i))
                end
              end
            end
            i = (i - 1)
          end
          if (s == "") then
            s = "0"
          end
          return s
        end
        function derivative(p)
          if (p.degree == 0) then
            return {degree = 0, coefficients = {0}}
          end
          local coeffs = {}
          local i = 0
          while (i < p.degree) do
            coeffs = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(coeffs, (p.coefficients[(i + 1) + 1] * tonumber((i + 1))))
          i = (i + 1)
        end
        return {degree = (p.degree - 1), coefficients = coeffs}
      end
      function integral(p, constant)
        local coeffs = {constant}
        local i = 0
        while (i <= p.degree) do
          coeffs = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(coeffs, (p.coefficients[i + 1] / tonumber((i + 1))))
        i = (i + 1)
      end
      return {degree = (p.degree + 1), coefficients = coeffs}
    end
    function equals(p, q)
      if (p.degree ~= q.degree) then
        return false
      end
      local i = 0
      while (i <= p.degree) do
        if (p.coefficients[i + 1] ~= q.coefficients[i + 1]) then
          return false
        end
        i = (i + 1)
      end
      return true
    end
    function not_equals(p, q)
      return (not equals(p, q))
    end
    function test_polynomial()
      local p = polynomial_new(2, {1, 2, 3})
      local q = polynomial_new(2, {1, 2, 3})
      if (poly_to_string(add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(q))) ~= "6x^2 + 4x + 2") then
        _panic("add failed")
      end
      if (poly_to_string(sub((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(q))) ~= "0") then
        _panic("sub failed")
      end
      if (evaluate(p, 2) ~= 17) then
        _panic("evaluate failed")
      end
      if (poly_to_string(derivative((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))) ~= "6x + 2") then
        _panic("derivative failed")
      end
      local integ = poly_to_string(integral((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p), 0))
      if (integ ~= "1x^3 + 1x^2 + 1x") then
        _panic("integral failed")
      end
      if (not equals(p, q)) then
        _panic("equals failed")
      end
      if not_equals(p, q) then
        _panic("not_equals failed")
      end
    end
    function main()
      test_polynomial()
      local p = polynomial_new(2, {1, 2, 3})
      local d = derivative((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(p))
      print((((type(poly_to_string(d)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(poly_to_string(d))) or (poly_to_string(d))))
    end
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
