-- Generated by Mochi v0.10.67 on 2025-08-17 13:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    io.stderr:write(tostring(msg) .. '\n')
    io.stderr:flush()
    os.exit(1)
  end
  
  local function _equal(a, b)
  if a == b then return true end
  if type(a) ~= type(b) then return false end
  if type(a) ~= 'table' then return a == b end
  local count = 0
  for k, v in pairs(a) do
    if not _equal(v, b[k]) then return false end
    count = count + 1
  end
  for k in pairs(b) do
    count = count - 1
  end
  return count == 0
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function bubble_sort(xs)
    local arr = xs
    local n = _len(arr)
    local i = 0
    while (i < n) do
      local j = 0
      while (j < ((n - i) - 1)) do
        if (arr[j + 1] > arr[(j + 1) + 1]) then
          local tmp = arr[j + 1]
          arr[j + 1] = arr[(j + 1) + 1]
          arr[(j + 1) + 1] = tmp
        end
        j = (j + 1)
      end
      i = (i + 1)
    end
    return arr
  end
  function factors(num)
    local values = {1}
    local i = 2
    while ((i * i) <= num) do
      if ((num % i) == 0) then
        values = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(values, i)
      local d = (num // i)
      if (d ~= i) then
        values = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(values, d)
    end
  end
  i = (i + 1)
end
return bubble_sort(values)
end
function sum_list(xs)
  local total = 0
  local i = 0
  while (i < _len(xs)) do
    total = (total + xs[i + 1])
    i = (i + 1)
  end
  return total
end
function abundant(n)
  return (sum_list(factors(n)) > n)
end
function semi_perfect(number)
  if (number <= 0) then
    return true
  end
  local values = factors(number)
  local possible = {}
  local j = 0
  while (j <= number) do
    possible = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(possible, (j == 0))
  j = (j + 1)
end
local idx = 0
while (idx < _len(values)) do
  local v = values[idx + 1]
  local s = number
  while (s >= v) do
    if possible[(s - v) + 1] then
      possible[s + 1] = true
    end
    s = (s - 1)
  end
  idx = (idx + 1)
end
return possible[number + 1]
end
function weird(number)
  return (abundant(number) and (semi_perfect(number) == false))
end
function run_tests()
  if (not _equal(factors(12), {1, 2, 3, 4, 6})) then
    _panic("factors 12 failed")
  end
  if (not _equal(factors(1), {1})) then
    _panic("factors 1 failed")
  end
  if (not _equal(factors(100), {1, 2, 4, 5, 10, 20, 25, 50})) then
    _panic("factors 100 failed")
  end
  if (abundant(0) ~= true) then
    _panic("abundant 0 failed")
  end
  if (abundant(1) ~= false) then
    _panic("abundant 1 failed")
  end
  if (abundant(12) ~= true) then
    _panic("abundant 12 failed")
  end
  if (abundant(13) ~= false) then
    _panic("abundant 13 failed")
  end
  if (abundant(20) ~= true) then
    _panic("abundant 20 failed")
  end
  if (semi_perfect(0) ~= true) then
    _panic("semi_perfect 0 failed")
  end
  if (semi_perfect(1) ~= true) then
    _panic("semi_perfect 1 failed")
  end
  if (semi_perfect(12) ~= true) then
    _panic("semi_perfect 12 failed")
  end
  if (semi_perfect(13) ~= false) then
    _panic("semi_perfect 13 failed")
  end
  if (weird(0) ~= false) then
    _panic("weird 0 failed")
  end
  if (weird(70) ~= true) then
    _panic("weird 70 failed")
  end
  if (weird(77) ~= false) then
    _panic("weird 77 failed")
  end
end
function main()
  run_tests()
  local nums = {69, 70, 71}
  local i = 0
  while (i < _len(nums)) do
    local n = nums[i + 1]
    if weird(n) then
      print((((type((_str(n) .. " is weird.")) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
              return string.format("%d", x)
            else
              return tostring(x)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)((_str(n) .. " is weird."))) or ((_str(n) .. " is weird."))))
      else
        print((((type((_str(n) .. " is not weird.")) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "number" then
              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                return string.format("%d", x)
              else
                return tostring(x)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)((_str(n) .. " is not weird."))) or ((_str(n) .. " is not weird."))))
        end
        i = (i + 1)
      end
    end
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
