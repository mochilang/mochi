-- Generated by Mochi v0.10.66 on 2025-08-16 11:48 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs(x)
    if (x < 0.0) then
      return (-x)
    end
    return x
  end
  function factorial(n)
    if (n < 0) then
      _panic("factorial is undefined for negative numbers")
    end
    local result = 1
    local i = 2
    while (i <= n) do
      result = (result * i)
      i = (i + 1)
    end
    return result
  end
  function pow_float(base, exp)
    local result = 1.0
    local i = 0
    while (i < exp) do
      result = (result * base)
      i = (i + 1)
    end
    return result
  end
  function binomial_distribution(successes, trials, prob)
    if (successes > trials) then
      _panic("successes must be lower or equal to trials")
    end
    if ((trials < 0) or (successes < 0)) then
      _panic("the function is defined for non-negative integers")
    end
    if (not ((0.0 < prob) and (prob < 1.0))) then
      _panic("prob has to be in range of 1 - 0")
    end
    local probability = (pow_float(prob, successes) * pow_float((1.0 - prob), (trials - successes)))
    local numerator = factorial(trials)
    local denominator = (factorial(successes) * factorial((trials - successes)))
    local coefficient = (numerator / denominator)
    return (probability * coefficient)
  end
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
