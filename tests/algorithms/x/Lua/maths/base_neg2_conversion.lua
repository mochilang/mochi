-- Generated by Mochi v0.10.66 on 2025-08-15 10:17 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function decimal_to_negative_base_2(num)
    if (num == 0) then
      return 0
    end
    local n = num
    local ans = ""
    while (n ~= 0) do
      local rem = (n % ((-2)))
      n = (n // ((-2)))
      if (rem < 0) then
        rem = (rem + 2)
        n = (n + 1)
      end
      ans = (_str(rem) .. ans)
    end
    return math.floor(tonumber(ans) or 0)
  end
  print(decimal_to_negative_base_2(0))
  print(decimal_to_negative_base_2((-19)))
  print(decimal_to_negative_base_2(4))
  print(decimal_to_negative_base_2(7))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
