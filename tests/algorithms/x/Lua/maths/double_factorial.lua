-- Generated by Mochi v0.10.63 on 2025-08-11 22:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function double_factorial_recursive(n)
    if (n < 0) then
      _panic("double_factorial_recursive() not defined for negative values")
    end
    if (n <= 1) then
      return 1
    end
    return (n * double_factorial_recursive((n - 2)))
  end
  function double_factorial_iterative(n)
    if (n < 0) then
      _panic("double_factorial_iterative() not defined for negative values")
    end
    local result = 1
    local i = n
    while (i > 0) do
      result = (result * i)
      i = (i - 2)
    end
    return result
  end
  function test_double_factorial()
    if (double_factorial_recursive(0) ~= 1) then
      _panic("0!! recursive failed")
    end
    if (double_factorial_iterative(0) ~= 1) then
      _panic("0!! iterative failed")
    end
    if (double_factorial_recursive(1) ~= 1) then
      _panic("1!! recursive failed")
    end
    if (double_factorial_iterative(1) ~= 1) then
      _panic("1!! iterative failed")
    end
    if (double_factorial_recursive(5) ~= 15) then
      _panic("5!! recursive failed")
    end
    if (double_factorial_iterative(5) ~= 15) then
      _panic("5!! iterative failed")
    end
    if (double_factorial_recursive(6) ~= 48) then
      _panic("6!! recursive failed")
    end
    if (double_factorial_iterative(6) ~= 48) then
      _panic("6!! iterative failed")
    end
    local n = 0
    while (n <= 10) do
      if (double_factorial_recursive(n) ~= double_factorial_iterative(n)) then
        _panic("double factorial mismatch")
      end
      n = (n + 1)
    end
  end
  function main()
    test_double_factorial()
    print(double_factorial_iterative(10))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
