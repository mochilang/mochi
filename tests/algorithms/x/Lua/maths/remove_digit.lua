-- Generated by Mochi v0.10.67 on 2025-08-17 13:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function remove_digit(num)
    local n = num
    if (n < 0) then
      n = (-n)
    end
    local max_val = 0
    local divisor = 1
    while (divisor <= n) do
      local higher = (n // (divisor * 10))
      local lower = (n % divisor)
      local candidate = ((higher * divisor) + lower)
      if (candidate > max_val) then
        max_val = candidate
      end
      divisor = (divisor * 10)
    end
    return max_val
  end
  function test_remove_digit()
    if (remove_digit(152) ~= 52) then
      _panic("remove_digit(152) failed")
    end
    if (remove_digit(6385) ~= 685) then
      _panic("remove_digit(6385) failed")
    end
    if (remove_digit((-11)) ~= 1) then
      _panic("remove_digit(-11) failed")
    end
    if (remove_digit(2222222) ~= 222222) then
      _panic("remove_digit(2222222) failed")
    end
  end
  function main()
    test_remove_digit()
    print(remove_digit(152))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
