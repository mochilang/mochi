-- Generated by Mochi v0.10.67 on 2025-08-17 13:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    io.stderr:write(tostring(msg) .. '\n')
    io.stderr:flush()
    os.exit(1)
  end
  
  local function _str(v)
  if type(v) == 'number' then
    local s = tostring(v)
    s = string.gsub(s, '%.0+$', '')
    return s
  elseif type(v) == 'table' then
      local parts = {}
      for i = 1, #v do
        parts[#parts+1] = _str(v[i])
      end
      return '[' .. table.concat(parts, ', ') .. ']'
    end
    return tostring(v)
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function assign_ranks(data)
      local ranks = {}
      local n = _len(data)
      local i = 0
      while (i < n) do
        local rank = 1
        local j = 0
        while (j < n) do
          if ((data[j + 1] < data[i + 1]) or ((data[j + 1] == data[i + 1]) and (j < i))) then
            rank = (rank + 1)
          end
          j = (j + 1)
        end
        ranks = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(ranks, rank)
      i = (i + 1)
    end
    return ranks
  end
  function calculate_spearman_rank_correlation(var1, var2)
    if (_len(var1) ~= _len(var2)) then
      _panic("Lists must have equal length")
    end
    local n = _len(var1)
    local rank1 = assign_ranks(var1)
    local rank2 = assign_ranks(var2)
    local i = 0
    local d_sq = 0.0
    while (i < n) do
      local diff = (rank1[i + 1] - rank2[i + 1])
      d_sq = (d_sq + (diff * diff))
      i = (i + 1)
    end
    local n_f = n
    return (1.0 - ((6.0 * d_sq) / (n_f * ((n_f * n_f) - 1.0))))
  end
  function test_spearman()
    local x = {1.0, 2.0, 3.0, 4.0, 5.0}
    local y_inc = {2.0, 4.0, 6.0, 8.0, 10.0}
    if (calculate_spearman_rank_correlation(x, y_inc) ~= 1.0) then
      _panic("case1")
    end
    local y_dec = {5.0, 4.0, 3.0, 2.0, 1.0}
    if (calculate_spearman_rank_correlation(x, y_dec) ~= ((-1.0))) then
      _panic("case2")
    end
    local y_mix = {5.0, 1.0, 2.0, 9.0, 5.0}
    if (calculate_spearman_rank_correlation(x, y_mix) ~= 0.6) then
      _panic("case3")
    end
  end
  function main()
    test_spearman()
    print((((type(_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {2.0, 4.0, 6.0, 8.0, 10.0}))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "number" then
          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
            return string.format("%d", x)
          else
            return tostring(x)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {2.0, 4.0, 6.0, 8.0, 10.0})))) or (_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {2.0, 4.0, 6.0, 8.0, 10.0})))))
      print((((type(_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {5.0, 4.0, 3.0, 2.0, 1.0}))) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
              return string.format("%d", x)
            else
              return tostring(x)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {5.0, 4.0, 3.0, 2.0, 1.0})))) or (_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {5.0, 4.0, 3.0, 2.0, 1.0})))))
        print((((type(_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {5.0, 1.0, 2.0, 9.0, 5.0}))) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "number" then
              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                return string.format("%d", x)
              else
                return tostring(x)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {5.0, 1.0, 2.0, 9.0, 5.0})))) or (_str(calculate_spearman_rank_correlation({1.0, 2.0, 3.0, 4.0, 5.0}, {5.0, 1.0, 2.0, 9.0, 5.0})))))
        end
        main()
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
