-- Generated by Mochi v0.10.63 on 2025-08-11 22:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function bubble_sort(nums)
    local arr = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(nums)) do
          arr = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(arr, nums[i + 1])
        i = (i + 1)
      end
      local n = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr)
          local a = 0
          while (a < n) do
            local b = 0
            while (b < ((n - a) - 1)) do
              if (arr[b + 1] > arr[(b + 1) + 1]) then
                local temp = arr[b + 1]
                arr[b + 1] = arr[(b + 1) + 1]
                arr[(b + 1) + 1] = temp
              end
              b = (b + 1)
            end
            a = (a + 1)
          end
          return arr
        end
        function find_median(nums)
          local length = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(nums)
              local div = (length // 2)
              local mod = (length % 2)
              if (mod ~= 0) then
                return nums[div + 1]
              end
              return ((nums[div + 1] + nums[(div - 1) + 1]) / 2)
            end
            function interquartile_range(nums)
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(nums) == 0) then
                    _panic("The list is empty. Provide a non-empty list.")
                  end
                  local sorted = bubble_sort(nums)
                  local length = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(sorted)
                      local div = (length // 2)
                      local mod = (length % 2)
                      local lower = {}
                      local i = 0
                      while (i < div) do
                        lower = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(lower, sorted[i + 1])
                      i = (i + 1)
                    end
                    local upper = {}
                    local j = (div + mod)
                    while (j < length) do
                      upper = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(upper, sorted[j + 1])
                    j = (j + 1)
                  end
                  local q1 = find_median(lower)
                  local q3 = find_median(upper)
                  return (q3 - q1)
                end
                function absf(x)
                  if (x < 0) then
                    return (-x)
                  end
                  return x
                end
                function float_equal(a, b)
                  local diff = absf((a - b))
                  return (diff < 1e-07)
                end
                function test_interquartile_range()
                  if (not float_equal(interquartile_range({4, 1, 2, 3, 2}), 2)) then
                    _panic("interquartile_range case1 failed")
                  end
                  if (not float_equal(interquartile_range({(-2), (-7), (-10), 9, 8, 4, (-67), 45}), 17)) then
                    _panic("interquartile_range case2 failed")
                  end
                  if (not float_equal(interquartile_range({(-2.1), (-7.1), (-10.1), 9.1, 8.1, 4.1, (-67.1), 45.1}), 17.2)) then
                    _panic("interquartile_range case3 failed")
                  end
                  if (not float_equal(interquartile_range({0, 0, 0, 0, 0}), 0)) then
                    _panic("interquartile_range case4 failed")
                  end
                end
                function main()
                  test_interquartile_range()
                  print((((type(_str(interquartile_range({4, 1, 2, 3, 2}))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(_str(interquartile_range({4, 1, 2, 3, 2})))) or (_str(interquartile_range({4, 1, 2, 3, 2})))))
                end
                main()
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
