-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function floor(x)
    local i = math.floor(tonumber(x) or 0)
    if (i > x) then
      i = (i - 1)
    end
    return i
  end
  function pow(x, n)
    local result = 1
    local i = 0
    while (i < n) do
      result = (result * x)
      i = (i + 1)
    end
    return result
  end
  function factorial(n)
    local result = 1
    local i = 2
    while (i <= n) do
      result = (result * i)
      i = (i + 1)
    end
    return result
  end
  function radians(deg)
    return ((deg * PI) / 180)
  end
  function taylor_sin(angle_in_degrees, accuracy, rounded_values_count)
    local k = floor((angle_in_degrees / 360))
    local angle = (angle_in_degrees - (k * 360))
    local angle_in_radians = radians(angle)
    local result = angle_in_radians
    local a = 3
    local sign = (-1)
    local i = 0
    while (i < accuracy) do
      result = (result + ((sign * pow(angle_in_radians, a)) / factorial(a)))
      sign = (-sign)
      a = (a + 2)
      i = (i + 1)
    end
    return result
  end
  function test_sin()
    local eps = 1e-07
    if (abs((taylor_sin(0, 18, 10) - 0)) > eps) then
      _panic("sin(0) failed")
    end
    if (abs((taylor_sin(90, 18, 10) - 1)) > eps) then
      _panic("sin(90) failed")
    end
    if (abs((taylor_sin(180, 18, 10) - 0)) > eps) then
      _panic("sin(180) failed")
    end
    if (abs((taylor_sin(270, 18, 10) - (-1))) > eps) then
      _panic("sin(270) failed")
    end
  end
  function main()
    test_sin()
    local res = taylor_sin(64, 18, 10)
    print((((type(res) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(res)) or (res)))
  end
  PI = 3.141592653589793
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
