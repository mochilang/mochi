-- Generated by Mochi v0.10.66 on 2025-08-16 14:41 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs_val(n)
    if (n < 0) then
      return (-n)
    end
    return n
  end
  function extended_euclidean_algorithm(a, b)
    if (abs_val(a) == 1) then
      return {x = a, y = 0}
    end
    if (abs_val(b) == 1) then
      return {x = 0, y = b}
    end
    local old_remainder = a
    local remainder = b
    local old_coeff_a = 1
    local coeff_a = 0
    local old_coeff_b = 0
    local coeff_b = 1
    while (remainder ~= 0) do
      local quotient = (old_remainder // remainder)
      local temp_remainder = (old_remainder - (quotient * remainder))
      old_remainder = remainder
      remainder = temp_remainder
      local temp_a = (old_coeff_a - (quotient * coeff_a))
      old_coeff_a = coeff_a
      coeff_a = temp_a
      local temp_b = (old_coeff_b - (quotient * coeff_b))
      old_coeff_b = coeff_b
      coeff_b = temp_b
    end
    if (a < 0) then
      old_coeff_a = (-old_coeff_a)
    end
    if (b < 0) then
      old_coeff_b = (-old_coeff_b)
    end
    return {x = old_coeff_a, y = old_coeff_b}
  end
  function test_extended_euclidean_algorithm()
    local r1 = extended_euclidean_algorithm(1, 24)
    if ((r1.x ~= 1) or (r1.y ~= 0)) then
      _panic("test1 failed")
    end
    local r2 = extended_euclidean_algorithm(8, 14)
    if ((r2.x ~= 2) or (r2.y ~= ((-1)))) then
      _panic("test2 failed")
    end
    local r3 = extended_euclidean_algorithm(240, 46)
    if ((r3.x ~= ((-9))) or (r3.y ~= 47)) then
      _panic("test3 failed")
    end
    local r4 = extended_euclidean_algorithm(1, (-4))
    if ((r4.x ~= 1) or (r4.y ~= 0)) then
      _panic("test4 failed")
    end
    local r5 = extended_euclidean_algorithm((-2), (-4))
    if ((r5.x ~= ((-1))) or (r5.y ~= 0)) then
      _panic("test5 failed")
    end
    local r6 = extended_euclidean_algorithm(0, (-4))
    if ((r6.x ~= 0) or (r6.y ~= ((-1)))) then
      _panic("test6 failed")
    end
    local r7 = extended_euclidean_algorithm(2, 0)
    if ((r7.x ~= 1) or (r7.y ~= 0)) then
      _panic("test7 failed")
    end
  end
  function main()
    test_extended_euclidean_algorithm()
    local res = extended_euclidean_algorithm(240, 46)
    print((((type((((("(" .. _str(res.x)) .. ", ") .. _str(res.y)) .. ")")) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "number" then
          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
            return string.format("%d", x)
          else
            return tostring(x)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)((((("(" .. _str(res.x)) .. ", ") .. _str(res.y)) .. ")"))) or ((((("(" .. _str(res.x)) .. ", ") .. _str(res.y)) .. ")"))))
    end
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
