-- Generated by Mochi v0.10.63 on 2025-08-11 22:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _equal(a, b)
if a == b then return true end
if type(a) ~= type(b) then return false end
if type(a) ~= 'table' then return a == b end
local count = 0
for k, v in pairs(a) do
  if not _equal(v, b[k]) then return false end
  count = count + 1
end
for k in pairs(b) do
  count = count - 1
end
return count == 0
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sqrt(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function powf(x, n)
    local res = 1
    local i = 0
    while (i < n) do
      res = (res * x)
      i = (i + 1)
    end
    return res
  end
  function roundf(x)
    if (x >= 0) then
      return math.floor(tonumber((x + 0.5)) or 0)
    end
    return math.floor(tonumber((x - 0.5)) or 0)
  end
  function fib_iterative(n)
    if (n < 0) then
      _panic("n is negative")
    end
    if (n == 0) then
      return {0}
    end
    local fib = {0, 1}
    local i = 2
    while (i <= n) do
      fib = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(fib, (fib[(i - 1) + 1] + fib[(i - 2) + 1]))
    i = (i + 1)
  end
  return fib
end
function fib_recursive_term(i)
  if (i < 0) then
    _panic("n is negative")
  end
  if (i < 2) then
    return i
  end
  return (fib_recursive_term((i - 1)) + fib_recursive_term((i - 2)))
end
function fib_recursive(n)
  if (n < 0) then
    _panic("n is negative")
  end
  local res = {}
  local i = 0
  while (i <= n) do
    res = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(res, fib_recursive_term(i))
  i = (i + 1)
end
return res
end
function fib_recursive_cached_term(i)
  if (i < 0) then
    _panic("n is negative")
  end
  if (i < 2) then
    return i
  end
  if (fib_cache_global[i] ~= nil) then
    return fib_cache_global[i]
  end
  local val = (fib_recursive_cached_term((i - 1)) + fib_recursive_cached_term((i - 2)))
  fib_cache_global[i] = val
  return val
end
function fib_recursive_cached(n)
  if (n < 0) then
    _panic("n is negative")
  end
  local res = {}
  local j = 0
  while (j <= n) do
    res = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(res, fib_recursive_cached_term(j))
  j = (j + 1)
end
return res
end
function fib_memoization_term(num)
  if (fib_memo_cache[num] ~= nil) then
    return fib_memo_cache[num]
  end
  local value = (fib_memoization_term((num - 1)) + fib_memoization_term((num - 2)))
  fib_memo_cache[num] = value
  return value
end
function fib_memoization(n)
  if (n < 0) then
    _panic("n is negative")
  end
  local out = {}
  local i = 0
  while (i <= n) do
    out = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(out, fib_memoization_term(i))
  i = (i + 1)
end
return out
end
function fib_binet(n)
  if (n < 0) then
    _panic("n is negative")
  end
  if (n >= 1475) then
    _panic("n is too large")
  end
  local sqrt5 = sqrt(5)
  local phi = ((1 + sqrt5) / 2)
  local res = {}
  local i = 0
  while (i <= n) do
    local val = roundf((powf(phi, i) / sqrt5))
    res = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(res, val)
  i = (i + 1)
end
return res
end
function matrix_mul(a, b)
  local a00 = ((a[0 + 1][0 + 1] * b[0 + 1][0 + 1]) + (a[0 + 1][1 + 1] * b[1 + 1][0 + 1]))
  local a01 = ((a[0 + 1][0 + 1] * b[0 + 1][1 + 1]) + (a[0 + 1][1 + 1] * b[1 + 1][1 + 1]))
  local a10 = ((a[1 + 1][0 + 1] * b[0 + 1][0 + 1]) + (a[1 + 1][1 + 1] * b[1 + 1][0 + 1]))
  local a11 = ((a[1 + 1][0 + 1] * b[0 + 1][1 + 1]) + (a[1 + 1][1 + 1] * b[1 + 1][1 + 1]))
  return {{a00, a01}, {a10, a11}}
end
function matrix_pow(m, power)
  if (power < 0) then
    _panic("power is negative")
  end
  local result = {{1, 0}, {0, 1}}
  local base = m
  local p = power
  while (p > 0) do
    if ((p % 2) == 1) then
      result = matrix_mul(result, base)
    end
    base = matrix_mul(base, base)
    p = math.floor(tonumber((p // 2)) or 0)
  end
  return result
end
function fib_matrix(n)
  if (n < 0) then
    _panic("n is negative")
  end
  if (n == 0) then
    return 0
  end
  local m = {{1, 1}, {1, 0}}
  local res = matrix_pow(m, (n - 1))
  return res[0 + 1][0 + 1]
end
function run_tests()
  local expected = {0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55}
  local it = fib_iterative(10)
  local rec = fib_recursive(10)
  local cache = fib_recursive_cached(10)
  local memo = fib_memoization(10)
  local bin = fib_binet(10)
  local m = fib_matrix(10)
  if (not _equal(it, expected)) then
    _panic("iterative failed")
  end
  if (not _equal(rec, expected)) then
    _panic("recursive failed")
  end
  if (not _equal(cache, expected)) then
    _panic("cached failed")
  end
  if (not _equal(memo, expected)) then
    _panic("memoization failed")
  end
  if (not _equal(bin, expected)) then
    _panic("binet failed")
  end
  if (m ~= 55) then
    _panic("matrix failed")
  end
  return m
end
fib_cache_global = {}
fib_memo_cache = {[0] = 0, [1] = 1, [2] = 1}
print((((type(_str(run_tests())) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(_str(run_tests()))) or (_str(run_tests()))))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
