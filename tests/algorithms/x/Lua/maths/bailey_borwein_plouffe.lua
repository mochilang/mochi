-- Generated by Mochi v0.10.66 on 2025-08-15 10:17 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function mod_pow(base, exponent, modulus)
    local result = 1
    local b = (base % modulus)
    local e = exponent
    while (e > 0) do
      if ((e % 2) == 1) then
        result = ((result * b) % modulus)
      end
      b = ((b * b) % modulus)
      e = (e // 2)
    end
    return result
  end
  function pow_float(base, exponent)
    local exp = exponent
    local result = 1.0
    if (exp < 0) then
      exp = (-exp)
    end
    local i = 0
    while (i < exp) do
      result = (result * base)
      i = (i + 1)
    end
    if (exponent < 0) then
      result = (1.0 / result)
    end
    return result
  end
  function hex_digit(n)
    if (n < 10) then
      return _str(n)
    end
    local letters = {"a", "b", "c", "d", "e", "f"}
    return letters[(n - 10) + 1]
  end
  function floor_float(x)
    local i = math.floor(tonumber(x) or 0)
    if (i > x) then
      i = (i - 1)
    end
    return i
  end
  function subsum(digit_pos_to_extract, denominator_addend, precision)
    local total = 0.0
    local sum_index = 0
    while (sum_index < (digit_pos_to_extract + precision)) do
      local denominator = ((8 * sum_index) + denominator_addend)
      if (sum_index < digit_pos_to_extract) then
        local exponent = ((digit_pos_to_extract - 1) - sum_index)
        local exponential_term = mod_pow(16, exponent, denominator)
        total = (total + (exponential_term / denominator))
      else
        local exponent = ((digit_pos_to_extract - 1) - sum_index)
        local exponential_term = pow_float(16.0, exponent)
        total = (total + (exponential_term / denominator))
      end
      sum_index = (sum_index + 1)
    end
    return total
  end
  function bailey_borwein_plouffe(digit_position, precision)
    if (digit_position <= 0) then
      _panic("Digit position must be a positive integer")
    end
    if (precision < 0) then
      _panic("Precision must be a nonnegative integer")
    end
    local sum_result = ((((4.0 * subsum(digit_position, 1, precision)) - (2.0 * subsum(digit_position, 4, precision))) - (1.0 * subsum(digit_position, 5, precision))) - (1.0 * subsum(digit_position, 6, precision)))
    local fraction = (sum_result - floor_float(sum_result))
    local digit = math.floor(tonumber((fraction * 16.0)) or 0)
    local hd = hex_digit(digit)
    return hd
  end
  digits = ""
  i = 1
  while (i <= 10) do
    digits = (digits .. bailey_borwein_plouffe(i, 1000))
    i = (i + 1)
  end
  print((((type(digits) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(digits)) or (digits)))
  print((((type(bailey_borwein_plouffe(5, 10000)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(bailey_borwein_plouffe(5, 10000))) or (bailey_borwein_plouffe(5, 10000))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
