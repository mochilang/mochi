-- Generated by Mochi v0.10.66 on 2025-08-16 14:41 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow10(n)
    local result = 1
    local i = 0
    while (i < n) do
      result = (result * 10)
      i = (i + 1)
    end
    return result
  end
  function gcd(a, b)
    local x = a
    local y = b
    if (x < 0) then
      x = (-x)
    end
    if (y < 0) then
      y = (-y)
    end
    while (y ~= 0) do
      local r = (x % y)
      x = y
      y = r
    end
    return x
  end
  function parse_decimal(s)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) == 0) then
          _panic("invalid number")
        end
        local idx = 0
        local sign = 1
        local first = _substring(s, 0, 1)
        if (first == "-") then
          sign = (-1)
          idx = 1
        else
          if (first == "+") then
            idx = 1
          end
        end
        local int_part = ""
        while (idx < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) do
              local c = _substring(s, idx, (idx + 1))
              if ((c >= "0") and (c <= "9")) then
                int_part = (int_part .. c)
                idx = (idx + 1)
              else
                break
              end
            end
            local frac_part = ""
            if ((idx < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)) and (_substring(s, idx, (idx + 1)) == ".")) then
                  idx = (idx + 1)
                  while (idx < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(s)) do
                        local c = _substring(s, idx, (idx + 1))
                        if ((c >= "0") and (c <= "9")) then
                          frac_part = (frac_part .. c)
                          idx = (idx + 1)
                        else
                          break
                        end
                      end
                    end
                    local exp = 0
                    if ((idx < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(s)) and ((_substring(s, idx, (idx + 1)) == "e") or (_substring(s, idx, (idx + 1)) == "E"))) then
                          idx = (idx + 1)
                          local exp_sign = 1
                          if ((idx < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(s)) and (_substring(s, idx, (idx + 1)) == "-")) then
                                exp_sign = (-1)
                                idx = (idx + 1)
                              else
                                if ((idx < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(s)) and (_substring(s, idx, (idx + 1)) == "+")) then
                                      idx = (idx + 1)
                                    end
                                  end
                                  local exp_str = ""
                                  while (idx < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(s)) do
                                        local c = _substring(s, idx, (idx + 1))
                                        if ((c >= "0") and (c <= "9")) then
                                          exp_str = (exp_str .. c)
                                          idx = (idx + 1)
                                        else
                                          _panic("invalid number")
                                        end
                                      end
                                      if ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(exp_str) == 0) then
                                            _panic("invalid number")
                                          end
                                          exp = (exp_sign * (math.modf(tonumber(exp_str) or 0)))
                                        end
                                        if (idx ~= (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(s)) then
                                              _panic("invalid number")
                                            end
                                            if ((function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(int_part) == 0) then
                                                  int_part = "0"
                                                end
                                                local num_str = (int_part .. frac_part)
                                                local numerator = (math.modf(tonumber(num_str) or 0))
                                                if (sign == (0 - 1)) then
                                                  numerator = (0 - numerator)
                                                end
                                                local denominator = pow10((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(frac_part))
                                                    if (exp > 0) then
                                                      numerator = (numerator * pow10(exp))
                                                    else
                                                      if (exp < 0) then
                                                        denominator = (denominator * pow10((-exp)))
                                                      end
                                                    end
                                                    return {numerator = numerator, denominator = denominator}
                                                  end
                                                  function reduce(fr)
                                                    local g = gcd(fr.numerator, fr.denominator)
                                                    return {numerator = (fr.numerator // g), denominator = (fr.denominator // g)}
                                                  end
                                                  function decimal_to_fraction_str(s)
                                                    return reduce(parse_decimal(s))
                                                  end
                                                  function decimal_to_fraction(x)
                                                    return decimal_to_fraction_str(_str(x))
                                                  end
                                                  function assert_fraction(name, fr, num, den)
                                                    if ((fr.numerator ~= num) or (fr.denominator ~= den)) then
                                                      _panic(name)
                                                    end
                                                  end
                                                  function test_decimal_to_fraction()
                                                    assert_fraction("case1", decimal_to_fraction(2.0), 2, 1)
                                                    assert_fraction("case2", decimal_to_fraction(89.0), 89, 1)
                                                    assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1)
                                                    assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1)
                                                    assert_fraction("case5", decimal_to_fraction(1.5), 3, 2)
                                                    assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4)
                                                    assert_fraction("case7", decimal_to_fraction(0.0), 0, 1)
                                                    assert_fraction("case8", decimal_to_fraction((-2.5)), (-5), 2)
                                                    assert_fraction("case9", decimal_to_fraction(0.125), 1, 8)
                                                    assert_fraction("case10", decimal_to_fraction(1.00000025e+06), 4000001, 4)
                                                    assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000)
                                                    assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1)
                                                    assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2)
                                                  end
                                                  function main()
                                                    test_decimal_to_fraction()
                                                    local fr = decimal_to_fraction(1.5)
                                                    print((((type(((_str(fr.numerator) .. "/") .. _str(fr.denominator))) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "number" then
                                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                            return string.format("%d", x)
                                                          else
                                                            return tostring(x)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(((_str(fr.numerator) .. "/") .. _str(fr.denominator)))) or (((_str(fr.numerator) .. "/") .. _str(fr.denominator)))))
                                                    end
                                                    main()
                                                    local _bench_end = os.clock()
                                                    collectgarbage()
                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                  end;
