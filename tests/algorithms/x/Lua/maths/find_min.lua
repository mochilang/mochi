-- Generated by Mochi v0.10.66 on 2025-08-16 14:41 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function find_min_iterative(nums)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(nums) == 0) then
          _panic("find_min_iterative() arg is an empty sequence")
        end
        local min_num = nums[0 + 1]
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(nums)) do
              local num = nums[i + 1]
              if (num < min_num) then
                min_num = num
              end
              i = (i + 1)
            end
            return min_num
          end
          function find_min_recursive(nums, left, right)
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(nums)
                if (n == 0) then
                  _panic("find_min_recursive() arg is an empty sequence")
                end
                if ((((left >= n) or (left < (0 - n))) or (right >= n)) or (right < (0 - n))) then
                  _panic("list index out of range")
                end
                local l = left
                local r = right
                if (l < 0) then
                  l = (n + l)
                end
                if (r < 0) then
                  r = (n + r)
                end
                if (l == r) then
                  return nums[l + 1]
                end
                local mid = ((l + r) // 2)
                local left_min = find_min_recursive(nums, l, mid)
                local right_min = find_min_recursive(nums, (mid + 1), r)
                if (left_min <= right_min) then
                  return left_min
                end
                return right_min
              end
              function test_find_min()
                local a = {3.0, 2.0, 1.0}
                if (find_min_iterative(a) ~= 1.0) then
                  _panic("iterative test1 failed")
                end
                if (find_min_recursive(a, 0, ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(a) - 1)) ~= 1.0) then
                      _panic("recursive test1 failed")
                    end
                    local b = {(-3.0), (-2.0), (-1.0)}
                    if (find_min_iterative(b) ~= ((-3.0))) then
                      _panic("iterative test2 failed")
                    end
                    if (find_min_recursive(b, 0, ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(b) - 1)) ~= ((-3.0))) then
                          _panic("recursive test2 failed")
                        end
                        local c = {3.0, (-3.0), 0.0}
                        if (find_min_iterative(c) ~= ((-3.0))) then
                          _panic("iterative test3 failed")
                        end
                        if (find_min_recursive(c, 0, ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(c) - 1)) ~= ((-3.0))) then
                              _panic("recursive test3 failed")
                            end
                            local d = {1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0}
                            if (find_min_recursive(d, (0 - (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(d)), (0 - 1)) ~= 1.0) then
                                  _panic("negative index test failed")
                                end
                              end
                              function main()
                                test_find_min()
                                local sample = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, (-3.0), 24.0, (-56.0)}
                                print((((type(_str(find_min_iterative(sample))) == "table")) and (
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "number" then
                                      if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                        return string.format("%d", x)
                                      else
                                        return tostring(x)
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(_str(find_min_iterative(sample)))) or (_str(find_min_iterative(sample)))))
                                end
                                main()
                                local _bench_end = os.clock()
                                collectgarbage()
                                local _bench_end_mem = collectgarbage('count') * 1024
                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                              end;
