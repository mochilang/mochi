-- Generated by Mochi v0.10.59 on 2025-08-07 10:05 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function lcg_rand()
    lcg_seed = (((lcg_seed * 1103515245) + 12345) % 2147483648)
    return lcg_seed
  end
  function roll()
    local rv = lcg_rand()
    local r = ((rv * 6) / 2.147483648e+09)
    return (1 + math.floor(tonumber(r) or 0))
  end
  function round2(x)
    local y = ((x * 100) + 0.5)
    local z = math.floor(tonumber(y) or 0)
    return (z / 100)
  end
  function throw_dice(num_throws, num_dice)
    local count_of_sum = {}
    local max_sum = ((num_dice * 6) + 1)
    local i = 0
    while (i < max_sum) do
      count_of_sum = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(count_of_sum, 0)
    i = (i + 1)
  end
  local t = 0
  while (t < num_throws) do
    local s = 0
    local d = 0
    while (d < num_dice) do
      s = (s + roll())
      d = (d + 1)
    end
    count_of_sum[s + 1] = (count_of_sum[s + 1] + 1)
    t = (t + 1)
  end
  local probability = {}
  i = num_dice
  while (i < max_sum) do
    local p = ((count_of_sum[i + 1] * 100) / num_throws)
    probability = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(probability, round2(p))
  i = (i + 1)
end
return probability
end
function main()
  lcg_seed = 1
  local result = throw_dice(10000, 2)
  print((((type(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(result)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(result))) or (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(result))))
end
lcg_seed = 1
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
