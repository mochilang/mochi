-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function next_seed(x)
    return (((x * 1103515245) + 12345) % 2147483648)
  end
  function rand_unit()
    seed = next_seed(seed)
    return (seed / 2.147483648e+09)
  end
  function is_in_unit_circle(p)
    return (((p.x * p.x) + (p.y * p.y)) <= 1)
  end
  function random_unit_square()
    return {x = rand_unit(), y = rand_unit()}
  end
  function estimate_pi(simulations)
    if (simulations < 1) then
      _panic("At least one simulation is necessary to estimate PI.")
    end
    local inside = 0
    local i = 0
    while (i < simulations) do
      local p = random_unit_square()
      if is_in_unit_circle(p) then
        inside = (inside + 1)
      end
      i = (i + 1)
    end
    return ((4 * inside) / simulations)
  end
  function abs_float(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function main()
    local n = 10000
    local my_pi = estimate_pi(n)
    local error = abs_float((my_pi - PI))
    print((((type(((("An estimate of PI is " .. tostring(my_pi)) .. " with an error of ") .. tostring(error))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(((("An estimate of PI is " .. tostring(my_pi)) .. " with an error of ") .. tostring(error)))) or (((("An estimate of PI is " .. tostring(my_pi)) .. " with an error of ") .. tostring(error)))))
  end
  PI = 3.141592653589793
  seed = 1
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
