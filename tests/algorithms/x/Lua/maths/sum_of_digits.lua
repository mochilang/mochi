-- Generated by Mochi v0.10.67 on 2025-08-17 13:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    io.stderr:write(tostring(msg) .. '\n')
    io.stderr:flush()
    os.exit(1)
  end
  
  local function _str(v)
  if type(v) == 'number' then
    local s = tostring(v)
    s = string.gsub(s, '%.0+$', '')
    return s
  elseif type(v) == 'table' then
      local parts = {}
      for i = 1, #v do
        parts[#parts+1] = _str(v[i])
      end
      return '[' .. table.concat(parts, ', ') .. ']'
    end
    return tostring(v)
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function abs_int(n)
      if (n < 0) then
        return (-n)
      end
      return n
    end
    function sum_of_digits(n)
      local m = abs_int(n)
      local res = 0
      while (m > 0) do
        res = (res + (m % 10))
        m = (m // 10)
      end
      return res
    end
    function sum_of_digits_recursion(n)
      local m = abs_int(n)
      if (m < 10) then
        return m
      end
      return ((m % 10) + sum_of_digits_recursion((m // 10)))
    end
    function sum_of_digits_compact(n)
      local s = _str(abs_int(n))
      local res = 0
      local i = 0
      while (i < _len(s)) do
        res = (res + (function(v) if v >= 0 then return math.floor(v) else return math.ceil(v) end end)((tonumber(string.sub(s, (i + 1), (i + 1))) or 0)))
        i = (i + 1)
      end
      return res
    end
    function test_sum_of_digits()
      if (sum_of_digits(12345) ~= 15) then
        _panic("sum_of_digits 12345 failed")
      end
      if (sum_of_digits(123) ~= 6) then
        _panic("sum_of_digits 123 failed")
      end
      if (sum_of_digits((-123)) ~= 6) then
        _panic("sum_of_digits -123 failed")
      end
      if (sum_of_digits(0) ~= 0) then
        _panic("sum_of_digits 0 failed")
      end
      if (sum_of_digits_recursion(12345) ~= 15) then
        _panic("recursion 12345 failed")
      end
      if (sum_of_digits_recursion(123) ~= 6) then
        _panic("recursion 123 failed")
      end
      if (sum_of_digits_recursion((-123)) ~= 6) then
        _panic("recursion -123 failed")
      end
      if (sum_of_digits_recursion(0) ~= 0) then
        _panic("recursion 0 failed")
      end
      if (sum_of_digits_compact(12345) ~= 15) then
        _panic("compact 12345 failed")
      end
      if (sum_of_digits_compact(123) ~= 6) then
        _panic("compact 123 failed")
      end
      if (sum_of_digits_compact((-123)) ~= 6) then
        _panic("compact -123 failed")
      end
      if (sum_of_digits_compact(0) ~= 0) then
        _panic("compact 0 failed")
      end
    end
    function main()
      test_sum_of_digits()
      print((((type(_str(sum_of_digits(12345))) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
              return string.format("%d", x)
            else
              return tostring(x)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(_str(sum_of_digits(12345)))) or (_str(sum_of_digits(12345)))))
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
