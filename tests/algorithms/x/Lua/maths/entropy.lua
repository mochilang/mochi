-- Generated by Mochi v0.10.63 on 2025-08-11 22:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function log2(x)
    local k = 0
    local v = x
    while (v >= 2) do
      v = (v / 2)
      k = (k + 1)
    end
    while (v < 1) do
      v = (v * 2)
      k = (k - 1)
    end
    local z = ((v - 1) / (v + 1))
    local zpow = z
    local sum = z
    local i = 3
    while (i <= 9) do
      zpow = ((zpow * z) * z)
      sum = (sum + (zpow / i))
      i = (i + 2)
    end
    local ln2 = 0.6931471805599453
    return (k + ((2 * sum) / ln2))
  end
  function analyze_text(text)
    local single = {}
    local double = {}
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(text)
        if (n == 0) then
          return {single = single, double = double}
        end
        local last = _substring(text, (n - 1), n)
        if (single[last] ~= nil) then
          single[last] = (single[last] + 1)
        else
          single[last] = 1
        end
        local first = _substring(text, 0, 1)
        local pair0 = (" " .. first)
        double[pair0] = 1
        local i = 0
        while (i < (n - 1)) do
          local ch = _substring(text, i, (i + 1))
          if (single[ch] ~= nil) then
            single[ch] = (single[ch] + 1)
          else
            single[ch] = 1
          end
          local seq = _substring(text, i, (i + 2))
          if (double[seq] ~= nil) then
            double[seq] = (double[seq] + 1)
          else
            double[seq] = 1
          end
          i = (i + 1)
        end
        return {single = single, double = double}
      end
      function round_to_int(x)
        if (x < 0) then
          return math.floor(tonumber((x - 0.5)) or 0)
        end
        return math.floor(tonumber((x + 0.5)) or 0)
      end
      function calculate_entropy(text)
        local counts = analyze_text(text)
        local alphas = " abcdefghijklmnopqrstuvwxyz"
        local total1 = 0
        for ch in pairs(counts.single) do
          total1 = (total1 + counts.single[ch])
        end
        local h1 = 0
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(alphas)) do
              local ch = _substring(alphas, i, (i + 1))
              if (counts.single[ch] ~= nil) then
                local prob = (counts.single[ch] // total1)
                h1 = (h1 + (prob * log2(prob)))
              end
              i = (i + 1)
            end
            local first_entropy = (-h1)
            print((((type((_str(round_to_int(first_entropy)) .. ".0")) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)((_str(round_to_int(first_entropy)) .. ".0"))) or ((_str(round_to_int(first_entropy)) .. ".0"))))
            local total2 = 0
            for seq in pairs(counts.double) do
              total2 = (total2 + counts.double[seq])
            end
            local h2 = 0
            local a0 = 0
            while (a0 < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(alphas)) do
                  local ch0 = _substring(alphas, a0, (a0 + 1))
                  local a1 = 0
                  while (a1 < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(alphas)) do
                        local ch1 = _substring(alphas, a1, (a1 + 1))
                        local seq = (ch0 .. ch1)
                        if (counts.double[seq] ~= nil) then
                          local prob = (counts.double[seq] // total2)
                          h2 = (h2 + (prob * log2(prob)))
                        end
                        a1 = (a1 + 1)
                      end
                      a0 = (a0 + 1)
                    end
                    local second_entropy = (-h2)
                    print((((type((_str(round_to_int(second_entropy)) .. ".0")) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)((_str(round_to_int(second_entropy)) .. ".0"))) or ((_str(round_to_int(second_entropy)) .. ".0"))))
                    local diff = (second_entropy - first_entropy)
                    print((((type((_str(round_to_int(diff)) .. ".0")) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)((_str(round_to_int(diff)) .. ".0"))) or ((_str(round_to_int(diff)) .. ".0"))))
                  end
                  text1 = (("Behind Winston's back the voice " .. "from the telescreen was still ") .. "babbling and the overfulfilment")
                  calculate_entropy(text1)
                  text3 = (((((((((("Had repulsive dashwoods suspicion sincerity but advantage now him. " .. "Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. ") .. "You greatest jointure saw horrible. He private he on be imagine ") .. "suppose. Fertile beloved evident through no service elderly is. Blind ") .. "there if every no so at. Own neglected you preferred way sincerity ") .. "delivered his attempted. To of message cottage windows do besides ") .. "against uncivil.  Delightful unreserved impossible few estimating ") .. "men favourable see entreaties. She propriety immediate was improving. ") .. "He or entrance humoured likewise moderate. Much nor game son say ") .. "feel. Fat make met can must form into gate. Me we offending prevailed ") .. "discovery.")
                  calculate_entropy(text3)
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
