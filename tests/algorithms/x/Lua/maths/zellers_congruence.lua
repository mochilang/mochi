-- Generated by Mochi v0.10.67 on 2025-08-17 14:03 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    io.stderr:write(tostring(msg) .. '\n')
    io.stderr:flush()
    os.exit(1)
  end
  
  local function slice(lst, s, e)
  local len = #lst
  if s < 0 then s = len + s end
  if s < 0 then s = 0 end
  if e == nil then
    e = len
  elseif e < 0 then
      e = len + e
    end
    if e > len then e = len end
    if s > e then return {} end
    local r = {}
    for i = s + 1, e do
      r[#r+1] = lst[i]
    end
    return r
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function parse_decimal(s)
      local value = 0
      local i = 0
      while (i < _len(s)) do
        local c = string.sub(s, (i + 1), (i + 1))
        if ((c < "0") or (c > "9")) then
          _panic("invalid literal")
        end
        value = ((value * 10) + (function(v) if v >= 0 then return math.floor(v) else return math.ceil(v) end end)((tonumber(c) or 0)))
        i = (i + 1)
      end
      return value
    end
    function zeller_day(date_input)
      local days = {[0] = "Sunday", [1] = "Monday", [2] = "Tuesday", [3] = "Wednesday", [4] = "Thursday", [5] = "Friday", [6] = "Saturday"}
      if (_len(date_input) ~= 10) then
        _panic("Must be 10 characters long")
      end
      local m = parse_decimal(string.sub(date_input, (0 + 1), 2))
      if ((m <= 0) or (m >= 13)) then
        _panic("Month must be between 1 - 12")
      end
      local sep1 = string.sub(date_input, (2 + 1), (2 + 1))
      if ((sep1 ~= "-") and (sep1 ~= "/")) then
        _panic("Date separator must be '-' or '/'")
      end
      local d = parse_decimal(string.sub(date_input, (3 + 1), 5))
      if ((d <= 0) or (d >= 32)) then
        _panic("Date must be between 1 - 31")
      end
      local sep2 = string.sub(date_input, (5 + 1), (5 + 1))
      if ((sep2 ~= "-") and (sep2 ~= "/")) then
        _panic("Date separator must be '-' or '/'")
      end
      local y = parse_decimal(string.sub(date_input, (6 + 1), 10))
      if ((y <= 45) or (y >= 8500)) then
        _panic("Year out of range. There has to be some sort of limit...right?")
      end
      local year = y
      local month = m
      if (month <= 2) then
        year = (year - 1)
        month = (month + 12)
      end
      local c = (year // 100)
      local k = (year % 100)
      local t = (function(v) if v >= 0 then return math.floor(v) else return math.ceil(v) end end)((tonumber(((2.6 * month) - 5.39)) or 0))
      local u = (c // 4)
      local v = (k // 4)
      local x = (d + k)
      local z = (((t + u) + v) + x)
      local w = (z - (2 * c))
      local f = (w % 7)
      if (f < 0) then
        f = (f + 7)
      end
      return days[f]
    end
    function zeller(date_input)
      local day = zeller_day(date_input)
      return (((("Your date " .. date_input) .. ", is a ") .. day) .. "!")
    end
    function test_zeller()
      local inputs = {"01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"}
      local expected = {"Sunday", "Monday", "Tuesday", "Thursday"}
      local i = 0
      while (i < _len(inputs)) do
        local res = zeller_day(inputs[i + 1])
        if (res ~= expected[i + 1]) then
          _panic("zeller test failed")
        end
        i = (i + 1)
      end
    end
    function main()
      test_zeller()
      print((((type(zeller("01-31-2010")) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if math.type and math.type(x) == "integer" then
              return string.format("%d", x)
            else
              local s = string.format("%g", x)
              if not string.find(s, "[%.eE]") then
                s = s .. ".0"
              end
              return s
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(zeller("01-31-2010"))) or (zeller("01-31-2010"))))
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
