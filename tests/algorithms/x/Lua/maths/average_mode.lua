-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function contains_int(xs, x)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (xs[i + 1] == x) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function contains_string(xs, x)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs)) do
              if (xs[i + 1] == x) then
                return true
              end
              i = (i + 1)
            end
            return false
          end
          function count_int(xs, x)
            local cnt = 0
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(xs)) do
                  if (xs[i + 1] == x) then
                    cnt = (cnt + 1)
                  end
                  i = (i + 1)
                end
                return cnt
              end
              function count_string(xs, x)
                local cnt = 0
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(xs)) do
                      if (xs[i + 1] == x) then
                        cnt = (cnt + 1)
                      end
                      i = (i + 1)
                    end
                    return cnt
                  end
                  function sort_int(xs)
                    local arr = xs
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(arr)) do
                          local j = (i + 1)
                          while (j < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(arr)) do
                                if (arr[j + 1] < arr[i + 1]) then
                                  local tmp = arr[i + 1]
                                  arr[i + 1] = arr[j + 1]
                                  arr[j + 1] = tmp
                                end
                                j = (j + 1)
                              end
                              i = (i + 1)
                            end
                            return arr
                          end
                          function sort_string(xs)
                            local arr = xs
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(arr)) do
                                  local j = (i + 1)
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(arr)) do
                                        if (arr[j + 1] < arr[i + 1]) then
                                          local tmp = arr[i + 1]
                                          arr[i + 1] = arr[j + 1]
                                          arr[j + 1] = tmp
                                        end
                                        j = (j + 1)
                                      end
                                      i = (i + 1)
                                    end
                                    return arr
                                  end
                                  function mode_int(lst)
                                    if ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(lst) == 0) then
                                          return {}
                                        end
                                        local counts = {}
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(lst)) do
                                              counts = (function(lst, item)
                                              local res = {table.unpack(lst or {})}
                                              table.insert(res, item)
                                              return res
                                            end)(counts, count_int(lst, lst[i + 1]))
                                            i = (i + 1)
                                          end
                                          local max_count = 0
                                          i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(counts)) do
                                                if (counts[i + 1] > max_count) then
                                                  max_count = counts[i + 1]
                                                end
                                                i = (i + 1)
                                              end
                                              local modes = {}
                                              i = 0
                                              while (i < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(lst)) do
                                                    if (counts[i + 1] == max_count) then
                                                      local v = lst[i + 1]
                                                      if (not contains_int(modes, v)) then
                                                        modes = (function(lst, item)
                                                        local res = {table.unpack(lst or {})}
                                                        table.insert(res, item)
                                                        return res
                                                      end)(modes, v)
                                                    end
                                                  end
                                                  i = (i + 1)
                                                end
                                                return sort_int(modes)
                                              end
                                              function mode_string(lst)
                                                if ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(lst) == 0) then
                                                      return {}
                                                    end
                                                    local counts = {}
                                                    local i = 0
                                                    while (i < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(lst)) do
                                                          counts = (function(lst, item)
                                                          local res = {table.unpack(lst or {})}
                                                          table.insert(res, item)
                                                          return res
                                                        end)(counts, count_string(lst, lst[i + 1]))
                                                        i = (i + 1)
                                                      end
                                                      local max_count = 0
                                                      i = 0
                                                      while (i < (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(counts)) do
                                                            if (counts[i + 1] > max_count) then
                                                              max_count = counts[i + 1]
                                                            end
                                                            i = (i + 1)
                                                          end
                                                          local modes = {}
                                                          i = 0
                                                          while (i < (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(lst)) do
                                                                if (counts[i + 1] == max_count) then
                                                                  local v = lst[i + 1]
                                                                  if (not contains_string(modes, v)) then
                                                                    modes = (function(lst, item)
                                                                    local res = {table.unpack(lst or {})}
                                                                    table.insert(res, item)
                                                                    return res
                                                                  end)(modes, v)
                                                                end
                                                              end
                                                              i = (i + 1)
                                                            end
                                                            return sort_string(modes)
                                                          end
                                                          print(
                                                          (function(v)
                                                          local function encode(x)
                                                          if type(x) == "table" then
                                                            if x.__name and x.__order then
                                                              local parts = {x.__name, " {"}
                                                              for i, k in ipairs(x.__order) do
                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            elseif #x > 0 then
                                                                local allTables = true
                                                                for _, v in ipairs(x) do
                                                                  if type(v) ~= "table" then allTables = false break end
                                                                end
                                                                local parts = {}
                                                                if not allTables then parts[#parts+1] = "[" end
                                                                for i, val in ipairs(x) do
                                                                  parts[#parts+1] = encode(val)
                                                                  if i < #x then parts[#parts+1] = " " end
                                                                end
                                                                if not allTables then parts[#parts+1] = "]" end
                                                                return table.concat(parts)
                                                              else
                                                                local keys = {}
                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                local parts = {"{"}
                                                                for i, k in ipairs(keys) do
                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              end
                                                            elseif type(x) == "string" then
                                                                return '"' .. x .. '"'
                                                              else
                                                                return tostring(x)
                                                              end
                                                            end
                                                            return encode(v)
                                                          end)(mode_int({2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2})))
                                                          print(
                                                          (function(v)
                                                          local function encode(x)
                                                          if type(x) == "table" then
                                                            if x.__name and x.__order then
                                                              local parts = {x.__name, " {"}
                                                              for i, k in ipairs(x.__order) do
                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            elseif #x > 0 then
                                                                local allTables = true
                                                                for _, v in ipairs(x) do
                                                                  if type(v) ~= "table" then allTables = false break end
                                                                end
                                                                local parts = {}
                                                                if not allTables then parts[#parts+1] = "[" end
                                                                for i, val in ipairs(x) do
                                                                  parts[#parts+1] = encode(val)
                                                                  if i < #x then parts[#parts+1] = " " end
                                                                end
                                                                if not allTables then parts[#parts+1] = "]" end
                                                                return table.concat(parts)
                                                              else
                                                                local keys = {}
                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                local parts = {"{"}
                                                                for i, k in ipairs(keys) do
                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              end
                                                            elseif type(x) == "string" then
                                                                return '"' .. x .. '"'
                                                              else
                                                                return tostring(x)
                                                              end
                                                            end
                                                            return encode(v)
                                                          end)(mode_int({3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2})))
                                                          print(
                                                          (function(v)
                                                          local function encode(x)
                                                          if type(x) == "table" then
                                                            if x.__name and x.__order then
                                                              local parts = {x.__name, " {"}
                                                              for i, k in ipairs(x.__order) do
                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            elseif #x > 0 then
                                                                local allTables = true
                                                                for _, v in ipairs(x) do
                                                                  if type(v) ~= "table" then allTables = false break end
                                                                end
                                                                local parts = {}
                                                                if not allTables then parts[#parts+1] = "[" end
                                                                for i, val in ipairs(x) do
                                                                  parts[#parts+1] = encode(val)
                                                                  if i < #x then parts[#parts+1] = " " end
                                                                end
                                                                if not allTables then parts[#parts+1] = "]" end
                                                                return table.concat(parts)
                                                              else
                                                                local keys = {}
                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                local parts = {"{"}
                                                                for i, k in ipairs(keys) do
                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              end
                                                            elseif type(x) == "string" then
                                                                return '"' .. x .. '"'
                                                              else
                                                                return tostring(x)
                                                              end
                                                            end
                                                            return encode(v)
                                                          end)(mode_int({3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2})))
                                                          print(
                                                          (function(v)
                                                          local function encode(x)
                                                          if type(x) == "table" then
                                                            if x.__name and x.__order then
                                                              local parts = {x.__name, " {"}
                                                              for i, k in ipairs(x.__order) do
                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            elseif #x > 0 then
                                                                local allTables = true
                                                                for _, v in ipairs(x) do
                                                                  if type(v) ~= "table" then allTables = false break end
                                                                end
                                                                local parts = {}
                                                                if not allTables then parts[#parts+1] = "[" end
                                                                for i, val in ipairs(x) do
                                                                  parts[#parts+1] = encode(val)
                                                                  if i < #x then parts[#parts+1] = " " end
                                                                end
                                                                if not allTables then parts[#parts+1] = "]" end
                                                                return table.concat(parts)
                                                              else
                                                                local keys = {}
                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                local parts = {"{"}
                                                                for i, k in ipairs(keys) do
                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              end
                                                            elseif type(x) == "string" then
                                                                return '"' .. x .. '"'
                                                              else
                                                                return tostring(x)
                                                              end
                                                            end
                                                            return encode(v)
                                                          end)(mode_string({"x", "y", "y", "z"})))
                                                          print(
                                                          (function(v)
                                                          local function encode(x)
                                                          if type(x) == "table" then
                                                            if x.__name and x.__order then
                                                              local parts = {x.__name, " {"}
                                                              for i, k in ipairs(x.__order) do
                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            elseif #x > 0 then
                                                                local allTables = true
                                                                for _, v in ipairs(x) do
                                                                  if type(v) ~= "table" then allTables = false break end
                                                                end
                                                                local parts = {}
                                                                if not allTables then parts[#parts+1] = "[" end
                                                                for i, val in ipairs(x) do
                                                                  parts[#parts+1] = encode(val)
                                                                  if i < #x then parts[#parts+1] = " " end
                                                                end
                                                                if not allTables then parts[#parts+1] = "]" end
                                                                return table.concat(parts)
                                                              else
                                                                local keys = {}
                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                local parts = {"{"}
                                                                for i, k in ipairs(keys) do
                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              end
                                                            elseif type(x) == "string" then
                                                                return '"' .. x .. '"'
                                                              else
                                                                return tostring(x)
                                                              end
                                                            end
                                                            return encode(v)
                                                          end)(mode_string({"x", "x", "y", "y", "z"})))
                                                          local _bench_end = os.clock()
                                                          collectgarbage()
                                                          local _bench_end_mem = collectgarbage('count') * 1024
                                                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                        end;
