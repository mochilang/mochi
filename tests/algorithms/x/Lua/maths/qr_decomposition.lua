-- Generated by Mochi v0.10.59 on 2025-08-07 10:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sqrt_approx(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function sign(x)
    if (x >= 0) then
      return 1
    else
      return (-1)
    end
  end
  function vector_norm(v)
    local sum = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(v)) do
          sum = (sum + (v[i + 1] * v[i + 1]))
          i = (i + 1)
        end
        local n = sqrt_approx(sum)
        return n
      end
      function identity_matrix(n)
        local mat = {}
        local i = 0
        while (i < n) do
          local row = {}
          local j = 0
          while (j < n) do
            if (i == j) then
              row = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(row, 1)
          else
            row = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(row, 0)
        end
        j = (j + 1)
      end
      mat = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(mat, row)
    i = (i + 1)
  end
  return mat
end
function copy_matrix(a)
  local mat = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(a)) do
        local row = {}
        local j = 0
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(a[i + 1])) do
              row = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(row, a[i + 1][j + 1])
            j = (j + 1)
          end
          mat = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(mat, row)
        i = (i + 1)
      end
      return mat
    end
    function matmul(a, b)
      local m = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(a)
          local n = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(a[0 + 1])
              local p = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(b[0 + 1])
                  local res = {}
                  local i = 0
                  while (i < m) do
                    local row = {}
                    local j = 0
                    while (j < p) do
                      local sum = 0
                      local k = 0
                      while (k < n) do
                        sum = (sum + (a[i + 1][k + 1] * b[k + 1][j + 1]))
                        k = (k + 1)
                      end
                      row = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(row, sum)
                    j = (j + 1)
                  end
                  res = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(res, row)
                i = (i + 1)
              end
              return res
            end
            function qr_decomposition(a)
              local m = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(a)
                  local n = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(a[0 + 1])
                      local t = (((m < n)) and (m) or (n))
                      local q = identity_matrix(m)
                      local r = copy_matrix(a)
                      local k = 0
                      while (k < (t - 1)) do
                        local x = {}
                        local i = k
                        while (i < m) do
                          x = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(x, r[i + 1][k + 1])
                        i = (i + 1)
                      end
                      local e1 = {}
                      i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(x)) do
                            if (i == 0) then
                              e1 = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(e1, 1)
                          else
                            e1 = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(e1, 0)
                        end
                        i = (i + 1)
                      end
                      local alpha = vector_norm(x)
                      local s = (sign(x[0 + 1]) * alpha)
                      local v = {}
                      i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(x)) do
                            v = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(v, (x[i + 1] + (s * e1[i + 1])))
                          i = (i + 1)
                        end
                        local vnorm = vector_norm(v)
                        i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(v)) do
                              v[i + 1] = (v[i + 1] / vnorm)
                              i = (i + 1)
                            end
                            local size = (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(v)
                                local qk_small = {}
                                i = 0
                                while (i < size) do
                                  local row = {}
                                  local j = 0
                                  while (j < size) do
                                    local delta = (((i == j)) and (1) or (0))
                                    row = (function(lst, item)
                                    local res = {table.unpack(lst or {})}
                                    table.insert(res, item)
                                    return res
                                  end)(row, (delta - ((2 * v[i + 1]) * v[j + 1])))
                                  j = (j + 1)
                                end
                                qk_small = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(qk_small, row)
                              i = (i + 1)
                            end
                            local qk = identity_matrix(m)
                            i = 0
                            while (i < size) do
                              local j = 0
                              while (j < size) do
                                qk[(k + i) + 1][(k + j) + 1] = qk_small[i + 1][j + 1]
                                j = (j + 1)
                              end
                              i = (i + 1)
                            end
                            q = matmul(q, qk)
                            r = matmul(qk, r)
                            k = (k + 1)
                          end
                          return {q = q, r = r}
                        end
                        function print_matrix(mat)
                          local i = 0
                          while (i < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(mat)) do
                                local line = ""
                                local j = 0
                                while (j < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(mat[i + 1])) do
                                      line = (line .. tostring(mat[i + 1][j + 1]))
                                      if ((j + 1) < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(mat[i + 1])) then
                                            line = (line .. " ")
                                          end
                                          j = (j + 1)
                                        end
                                        print((((type(line) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(line)) or (line)))
                                        i = (i + 1)
                                      end
                                    end
                                    A = {{12, (-51), 4}, {6, 167, (-68)}, {(-4), 24, (-41)}}
                                    result = qr_decomposition(A)
                                    print_matrix(result.q)
                                    print_matrix(result.r)
                                    local _bench_end = os.clock()
                                    collectgarbage()
                                    local _bench_end_mem = collectgarbage('count') * 1024
                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                  end;
