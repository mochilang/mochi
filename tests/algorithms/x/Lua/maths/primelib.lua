-- Generated by Mochi v0.10.67 on 2025-08-17 09:08 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    io.stderr:write(tostring(msg) .. '\n')
    io.stderr:flush()
    os.exit(1)
  end
  
  local function _str(v)
  if type(v) == 'number' then
    local s = tostring(v)
    s = string.gsub(s, '%.0+$', '')
    return s
  elseif type(v) == 'table' then
      local parts = {}
      for i = 1, #v do
        parts[#parts+1] = _str(v[i])
      end
      return '[' .. table.concat(parts, ', ') .. ']'
    end
    return tostring(v)
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function abs_int(x)
      if (x < 0) then
        return (-x)
      end
      return x
    end
    function gcd_iter(a, b)
      local x = abs_int(a)
      local y = abs_int(b)
      while (y ~= 0) do
        local t = y
        y = (x % y)
        x = t
      end
      return x
    end
    function is_prime(n)
      if (n <= 1) then
        return false
      end
      local d = 2
      while ((d * d) <= n) do
        if ((n % d) == 0) then
          return false
        end
        d = (d + 1)
      end
      return true
    end
    function sieve_er(n)
      local nums = {}
      local i = 2
      while (i <= n) do
        nums = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(nums, i)
      i = (i + 1)
    end
    local idx = 0
    while (idx < _len(nums)) do
      local j = (idx + 1)
      while (j < _len(nums)) do
        if (nums[idx + 1] ~= 0) then
          if ((nums[j + 1] % nums[idx + 1]) == 0) then
            nums[j + 1] = 0
          end
        end
        j = (j + 1)
      end
      idx = (idx + 1)
    end
    local res = {}
    local k = 0
    while (k < _len(nums)) do
      local v = nums[k + 1]
      if (v ~= 0) then
        res = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(res, v)
    end
    k = (k + 1)
  end
  return res
end
function get_prime_numbers(n)
  local ans = {}
  local num = 2
  while (num <= n) do
    if is_prime(num) then
      ans = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(ans, num)
  end
  num = (num + 1)
end
return ans
end
function prime_factorization(number)
  if (number == 0) then
    return {0}
  end
  if (number == 1) then
    return {1}
  end
  local ans = {}
  if is_prime(number) then
    ans = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(ans, number)
  return ans
end
local quotient = number
local factor = 2
while (quotient ~= 1) do
  if (is_prime(factor) and ((quotient % factor) == 0)) then
    ans = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(ans, factor)
  quotient = (quotient // factor)
else
  factor = (factor + 1)
end
end
return ans
end
function greatest_prime_factor(number)
  local factors = prime_factorization(number)
  local m = factors[0 + 1]
  local i = 1
  while (i < _len(factors)) do
    if (factors[i + 1] > m) then
      m = factors[i + 1]
    end
    i = (i + 1)
  end
  return m
end
function smallest_prime_factor(number)
  local factors = prime_factorization(number)
  local m = factors[0 + 1]
  local i = 1
  while (i < _len(factors)) do
    if (factors[i + 1] < m) then
      m = factors[i + 1]
    end
    i = (i + 1)
  end
  return m
end
function kg_v(number1, number2)
  if ((number1 < 1) or (number2 < 1)) then
    _panic("numbers must be positive")
  end
  local g = gcd_iter(number1, number2)
  return ((number1 // g) * number2)
end
function is_even(number)
  return ((number % 2) == 0)
end
function is_odd(number)
  return ((number % 2) ~= 0)
end
function goldbach(number)
  if ((not is_even(number)) or (number <= 2)) then
    _panic("number must be even and > 2")
  end
  local primes = get_prime_numbers(number)
  local i = 0
  while (i < _len(primes)) do
    local j = (i + 1)
    while (j < _len(primes)) do
      if ((primes[i + 1] + primes[j + 1]) == number) then
        return {primes[i + 1], primes[j + 1]}
      end
      j = (j + 1)
    end
    i = (i + 1)
  end
  return {}
end
function get_prime(n)
  if (n < 0) then
    _panic("n must be non-negative")
  end
  local index = 0
  local ans = 2
  while (index < n) do
    index = (index + 1)
    ans = (ans + 1)
    while (not is_prime(ans)) do
      ans = (ans + 1)
    end
  end
  return ans
end
function get_primes_between(p1, p2)
  local bad1 = (not is_prime(p1))
  local bad2 = (not is_prime(p2))
  if ((bad1 or bad2) or (p1 >= p2)) then
    _panic("arguments must be prime and p1 < p2")
  end
  local num = (p1 + 1)
  while (num < p2) do
    if is_prime(num) then
      break
    end
    num = (num + 1)
  end
  local ans = {}
  while (num < p2) do
    ans = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(ans, num)
  num = (num + 1)
  while (num < p2) do
    if is_prime(num) then
      break
    end
    num = (num + 1)
  end
end
return ans
end
function get_divisors(n)
  if (n < 1) then
    _panic("n must be >= 1")
  end
  local ans = {}
  local d = 1
  while (d <= n) do
    if ((n % d) == 0) then
      ans = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(ans, d)
  end
  d = (d + 1)
end
return ans
end
function is_perfect_number(number)
  if (number <= 1) then
    _panic("number must be > 1")
  end
  local divisors = get_divisors(number)
  local sum = 0
  local i = 0
  while (i < (_len(divisors) - 1)) do
    sum = (sum + divisors[i + 1])
    i = (i + 1)
  end
  return (sum == number)
end
function simplify_fraction(numerator, denominator)
  if (denominator == 0) then
    _panic("denominator cannot be zero")
  end
  local g = gcd_iter(abs_int(numerator), abs_int(denominator))
  return {(numerator // g), (denominator // g)}
end
function factorial(n)
  if (n < 0) then
    _panic("n must be >= 0")
  end
  local ans = 1
  local i = 1
  while (i <= n) do
    ans = (ans * i)
    i = (i + 1)
  end
  return ans
end
function fib(n)
  if (n < 0) then
    _panic("n must be >= 0")
  end
  if (n <= 1) then
    return 1
  end
  local tmp = 0
  local fib1 = 1
  local ans = 1
  local i = 0
  while (i < (n - 1)) do
    tmp = ans
    ans = (ans + fib1)
    fib1 = tmp
    i = (i + 1)
  end
  return ans
end
print((((type(_str(is_prime(97))) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "number" then
      if (math.type and math.type(x) == "integer") or x % 1 == 0 then
        return string.format("%d", x)
      else
        return tostring(x)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(_str(is_prime(97)))) or (_str(is_prime(97)))))
  print((((type(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "number" then
        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
          return string.format("%d", x)
        else
          return tostring(x)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(sieve_er(20))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "number" then
          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
            return string.format("%d", x)
          else
            return tostring(x)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
              return string.format("%d", x)
            else
              return tostring(x)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(sieve_er(20)))) or (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "number" then
              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                return string.format("%d", x)
              else
                return tostring(x)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(sieve_er(20)))))
          print((((type(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "number" then
                if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                  return string.format("%d", x)
                else
                  return tostring(x)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(get_prime_numbers(20))) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "number" then
                  if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                    return string.format("%d", x)
                  else
                    return tostring(x)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "number" then
                    if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                      return string.format("%d", x)
                    else
                      return tostring(x)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(get_prime_numbers(20)))) or (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "number" then
                      if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                        return string.format("%d", x)
                      else
                        return tostring(x)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(get_prime_numbers(20)))))
                  print((((type(
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "number" then
                        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                          return string.format("%d", x)
                        else
                          return tostring(x)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)(prime_factorization(287))) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "number" then
                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                            return string.format("%d", x)
                          else
                            return tostring(x)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "number" then
                            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                              return string.format("%d", x)
                            else
                              return tostring(x)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)(prime_factorization(287)))) or (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "number" then
                              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                return string.format("%d", x)
                              else
                                return tostring(x)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(prime_factorization(287)))))
                          print((((type(_str(greatest_prime_factor(287))) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "number" then
                                if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                  return string.format("%d", x)
                                else
                                  return tostring(x)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(_str(greatest_prime_factor(287)))) or (_str(greatest_prime_factor(287)))))
                            print((((type(_str(smallest_prime_factor(287))) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "number" then
                                  if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                    return string.format("%d", x)
                                  else
                                    return tostring(x)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(_str(smallest_prime_factor(287)))) or (_str(smallest_prime_factor(287)))))
                              print((((type(_str(kg_v(8, 10))) == "table")) and (
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "number" then
                                    if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                      return string.format("%d", x)
                                    else
                                      return tostring(x)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(_str(kg_v(8, 10)))) or (_str(kg_v(8, 10)))))
                                print((((type(
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "number" then
                                      if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                        return string.format("%d", x)
                                      else
                                        return tostring(x)
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(goldbach(28))) == "table")) and (
                                  (function(v)
                                  local function encode(x)
                                  if type(x) == "table" then
                                    if x.__name and x.__order then
                                      local parts = {x.__name, " {"}
                                      for i, k in ipairs(x.__order) do
                                        if i > 1 then parts[#parts+1] = ", " end
                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    elseif #x > 0 then
                                        local allTables = true
                                        for _, v in ipairs(x) do
                                          if type(v) ~= "table" then allTables = false break end
                                        end
                                        local parts = {}
                                        if not allTables then parts[#parts+1] = "[" end
                                        for i, val in ipairs(x) do
                                          parts[#parts+1] = encode(val)
                                          if i < #x then parts[#parts+1] = " " end
                                        end
                                        if not allTables then parts[#parts+1] = "]" end
                                        return table.concat(parts)
                                      else
                                        local keys = {}
                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                        local parts = {"{"}
                                        for i, k in ipairs(keys) do
                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                          if i < #keys then parts[#parts+1] = ", " end
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      end
                                    elseif type(x) == "number" then
                                        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                          return string.format("%d", x)
                                        else
                                          return tostring(x)
                                        end
                                      elseif type(x) == "string" then
                                          return '"' .. x .. '"'
                                        else
                                          return tostring(x)
                                        end
                                      end
                                      return encode(v)
                                    end)(
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "number" then
                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                            return string.format("%d", x)
                                          else
                                            return tostring(x)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(goldbach(28)))) or (
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "number" then
                                            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                              return string.format("%d", x)
                                            else
                                              return tostring(x)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(goldbach(28)))))
                                        print((((type(_str(get_prime(8))) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "number" then
                                              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                return string.format("%d", x)
                                              else
                                                return tostring(x)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(_str(get_prime(8)))) or (_str(get_prime(8)))))
                                          print((((type(
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "number" then
                                                if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                  return string.format("%d", x)
                                                else
                                                  return tostring(x)
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)(get_primes_between(3, 23))) == "table")) and (
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "number" then
                                                  if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                    return string.format("%d", x)
                                                  else
                                                    return tostring(x)
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "number" then
                                                    if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                      return string.format("%d", x)
                                                    else
                                                      return tostring(x)
                                                    end
                                                  elseif type(x) == "string" then
                                                      return '"' .. x .. '"'
                                                    else
                                                      return tostring(x)
                                                    end
                                                  end
                                                  return encode(v)
                                                end)(get_primes_between(3, 23)))) or (
                                                (function(v)
                                                local function encode(x)
                                                if type(x) == "table" then
                                                  if x.__name and x.__order then
                                                    local parts = {x.__name, " {"}
                                                    for i, k in ipairs(x.__order) do
                                                      if i > 1 then parts[#parts+1] = ", " end
                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  elseif #x > 0 then
                                                      local allTables = true
                                                      for _, v in ipairs(x) do
                                                        if type(v) ~= "table" then allTables = false break end
                                                      end
                                                      local parts = {}
                                                      if not allTables then parts[#parts+1] = "[" end
                                                      for i, val in ipairs(x) do
                                                        parts[#parts+1] = encode(val)
                                                        if i < #x then parts[#parts+1] = " " end
                                                      end
                                                      if not allTables then parts[#parts+1] = "]" end
                                                      return table.concat(parts)
                                                    else
                                                      local keys = {}
                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                      local parts = {"{"}
                                                      for i, k in ipairs(keys) do
                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                        if i < #keys then parts[#parts+1] = ", " end
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    end
                                                  elseif type(x) == "number" then
                                                      if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                        return string.format("%d", x)
                                                      else
                                                        return tostring(x)
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(get_primes_between(3, 23)))))
                                                  print((((type(
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "number" then
                                                        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                          return string.format("%d", x)
                                                        else
                                                          return tostring(x)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(get_divisors(28))) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "number" then
                                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                            return string.format("%d", x)
                                                          else
                                                            return tostring(x)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(
                                                      (function(v)
                                                      local function encode(x)
                                                      if type(x) == "table" then
                                                        if x.__name and x.__order then
                                                          local parts = {x.__name, " {"}
                                                          for i, k in ipairs(x.__order) do
                                                            if i > 1 then parts[#parts+1] = ", " end
                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        elseif #x > 0 then
                                                            local allTables = true
                                                            for _, v in ipairs(x) do
                                                              if type(v) ~= "table" then allTables = false break end
                                                            end
                                                            local parts = {}
                                                            if not allTables then parts[#parts+1] = "[" end
                                                            for i, val in ipairs(x) do
                                                              parts[#parts+1] = encode(val)
                                                              if i < #x then parts[#parts+1] = " " end
                                                            end
                                                            if not allTables then parts[#parts+1] = "]" end
                                                            return table.concat(parts)
                                                          else
                                                            local keys = {}
                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                            local parts = {"{"}
                                                            for i, k in ipairs(keys) do
                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                              if i < #keys then parts[#parts+1] = ", " end
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          end
                                                        elseif type(x) == "number" then
                                                            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                              return string.format("%d", x)
                                                            else
                                                              return tostring(x)
                                                            end
                                                          elseif type(x) == "string" then
                                                              return '"' .. x .. '"'
                                                            else
                                                              return tostring(x)
                                                            end
                                                          end
                                                          return encode(v)
                                                        end)(get_divisors(28)))) or (
                                                        (function(v)
                                                        local function encode(x)
                                                        if type(x) == "table" then
                                                          if x.__name and x.__order then
                                                            local parts = {x.__name, " {"}
                                                            for i, k in ipairs(x.__order) do
                                                              if i > 1 then parts[#parts+1] = ", " end
                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          elseif #x > 0 then
                                                              local allTables = true
                                                              for _, v in ipairs(x) do
                                                                if type(v) ~= "table" then allTables = false break end
                                                              end
                                                              local parts = {}
                                                              if not allTables then parts[#parts+1] = "[" end
                                                              for i, val in ipairs(x) do
                                                                parts[#parts+1] = encode(val)
                                                                if i < #x then parts[#parts+1] = " " end
                                                              end
                                                              if not allTables then parts[#parts+1] = "]" end
                                                              return table.concat(parts)
                                                            else
                                                              local keys = {}
                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                              local parts = {"{"}
                                                              for i, k in ipairs(keys) do
                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                if i < #keys then parts[#parts+1] = ", " end
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            end
                                                          elseif type(x) == "number" then
                                                              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                return string.format("%d", x)
                                                              else
                                                                return tostring(x)
                                                              end
                                                            elseif type(x) == "string" then
                                                                return '"' .. x .. '"'
                                                              else
                                                                return tostring(x)
                                                              end
                                                            end
                                                            return encode(v)
                                                          end)(get_divisors(28)))))
                                                          print((((type(_str(is_perfect_number(28))) == "table")) and (
                                                          (function(v)
                                                          local function encode(x)
                                                          if type(x) == "table" then
                                                            if x.__name and x.__order then
                                                              local parts = {x.__name, " {"}
                                                              for i, k in ipairs(x.__order) do
                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            elseif #x > 0 then
                                                                local allTables = true
                                                                for _, v in ipairs(x) do
                                                                  if type(v) ~= "table" then allTables = false break end
                                                                end
                                                                local parts = {}
                                                                if not allTables then parts[#parts+1] = "[" end
                                                                for i, val in ipairs(x) do
                                                                  parts[#parts+1] = encode(val)
                                                                  if i < #x then parts[#parts+1] = " " end
                                                                end
                                                                if not allTables then parts[#parts+1] = "]" end
                                                                return table.concat(parts)
                                                              else
                                                                local keys = {}
                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                local parts = {"{"}
                                                                for i, k in ipairs(keys) do
                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              end
                                                            elseif type(x) == "number" then
                                                                if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                  return string.format("%d", x)
                                                                else
                                                                  return tostring(x)
                                                                end
                                                              elseif type(x) == "string" then
                                                                  return '"' .. x .. '"'
                                                                else
                                                                  return tostring(x)
                                                                end
                                                              end
                                                              return encode(v)
                                                            end)(_str(is_perfect_number(28)))) or (_str(is_perfect_number(28)))))
                                                            print((((type(
                                                            (function(v)
                                                            local function encode(x)
                                                            if type(x) == "table" then
                                                              if x.__name and x.__order then
                                                                local parts = {x.__name, " {"}
                                                                for i, k in ipairs(x.__order) do
                                                                  if i > 1 then parts[#parts+1] = ", " end
                                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              elseif #x > 0 then
                                                                  local allTables = true
                                                                  for _, v in ipairs(x) do
                                                                    if type(v) ~= "table" then allTables = false break end
                                                                  end
                                                                  local parts = {}
                                                                  if not allTables then parts[#parts+1] = "[" end
                                                                  for i, val in ipairs(x) do
                                                                    parts[#parts+1] = encode(val)
                                                                    if i < #x then parts[#parts+1] = " " end
                                                                  end
                                                                  if not allTables then parts[#parts+1] = "]" end
                                                                  return table.concat(parts)
                                                                else
                                                                  local keys = {}
                                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                  local parts = {"{"}
                                                                  for i, k in ipairs(keys) do
                                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                    if i < #keys then parts[#parts+1] = ", " end
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                end
                                                              elseif type(x) == "number" then
                                                                  if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                    return string.format("%d", x)
                                                                  else
                                                                    return tostring(x)
                                                                  end
                                                                elseif type(x) == "string" then
                                                                    return '"' .. x .. '"'
                                                                  else
                                                                    return tostring(x)
                                                                  end
                                                                end
                                                                return encode(v)
                                                              end)(simplify_fraction(10, 20))) == "table")) and (
                                                              (function(v)
                                                              local function encode(x)
                                                              if type(x) == "table" then
                                                                if x.__name and x.__order then
                                                                  local parts = {x.__name, " {"}
                                                                  for i, k in ipairs(x.__order) do
                                                                    if i > 1 then parts[#parts+1] = ", " end
                                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                elseif #x > 0 then
                                                                    local allTables = true
                                                                    for _, v in ipairs(x) do
                                                                      if type(v) ~= "table" then allTables = false break end
                                                                    end
                                                                    local parts = {}
                                                                    if not allTables then parts[#parts+1] = "[" end
                                                                    for i, val in ipairs(x) do
                                                                      parts[#parts+1] = encode(val)
                                                                      if i < #x then parts[#parts+1] = " " end
                                                                    end
                                                                    if not allTables then parts[#parts+1] = "]" end
                                                                    return table.concat(parts)
                                                                  else
                                                                    local keys = {}
                                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                    local parts = {"{"}
                                                                    for i, k in ipairs(keys) do
                                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                      if i < #keys then parts[#parts+1] = ", " end
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  end
                                                                elseif type(x) == "number" then
                                                                    if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                      return string.format("%d", x)
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  elseif type(x) == "string" then
                                                                      return '"' .. x .. '"'
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  end
                                                                  return encode(v)
                                                                end)(
                                                                (function(v)
                                                                local function encode(x)
                                                                if type(x) == "table" then
                                                                  if x.__name and x.__order then
                                                                    local parts = {x.__name, " {"}
                                                                    for i, k in ipairs(x.__order) do
                                                                      if i > 1 then parts[#parts+1] = ", " end
                                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  elseif #x > 0 then
                                                                      local allTables = true
                                                                      for _, v in ipairs(x) do
                                                                        if type(v) ~= "table" then allTables = false break end
                                                                      end
                                                                      local parts = {}
                                                                      if not allTables then parts[#parts+1] = "[" end
                                                                      for i, val in ipairs(x) do
                                                                        parts[#parts+1] = encode(val)
                                                                        if i < #x then parts[#parts+1] = " " end
                                                                      end
                                                                      if not allTables then parts[#parts+1] = "]" end
                                                                      return table.concat(parts)
                                                                    else
                                                                      local keys = {}
                                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                      local parts = {"{"}
                                                                      for i, k in ipairs(keys) do
                                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                        if i < #keys then parts[#parts+1] = ", " end
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    end
                                                                  elseif type(x) == "number" then
                                                                      if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                        return string.format("%d", x)
                                                                      else
                                                                        return tostring(x)
                                                                      end
                                                                    elseif type(x) == "string" then
                                                                        return '"' .. x .. '"'
                                                                      else
                                                                        return tostring(x)
                                                                      end
                                                                    end
                                                                    return encode(v)
                                                                  end)(simplify_fraction(10, 20)))) or (
                                                                  (function(v)
                                                                  local function encode(x)
                                                                  if type(x) == "table" then
                                                                    if x.__name and x.__order then
                                                                      local parts = {x.__name, " {"}
                                                                      for i, k in ipairs(x.__order) do
                                                                        if i > 1 then parts[#parts+1] = ", " end
                                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    elseif #x > 0 then
                                                                        local allTables = true
                                                                        for _, v in ipairs(x) do
                                                                          if type(v) ~= "table" then allTables = false break end
                                                                        end
                                                                        local parts = {}
                                                                        if not allTables then parts[#parts+1] = "[" end
                                                                        for i, val in ipairs(x) do
                                                                          parts[#parts+1] = encode(val)
                                                                          if i < #x then parts[#parts+1] = " " end
                                                                        end
                                                                        if not allTables then parts[#parts+1] = "]" end
                                                                        return table.concat(parts)
                                                                      else
                                                                        local keys = {}
                                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                        local parts = {"{"}
                                                                        for i, k in ipairs(keys) do
                                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                          if i < #keys then parts[#parts+1] = ", " end
                                                                        end
                                                                        parts[#parts+1] = "}"
                                                                        return table.concat(parts)
                                                                      end
                                                                    elseif type(x) == "number" then
                                                                        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                          return string.format("%d", x)
                                                                        else
                                                                          return tostring(x)
                                                                        end
                                                                      elseif type(x) == "string" then
                                                                          return '"' .. x .. '"'
                                                                        else
                                                                          return tostring(x)
                                                                        end
                                                                      end
                                                                      return encode(v)
                                                                    end)(simplify_fraction(10, 20)))))
                                                                    print((((type(_str(factorial(5))) == "table")) and (
                                                                    (function(v)
                                                                    local function encode(x)
                                                                    if type(x) == "table" then
                                                                      if x.__name and x.__order then
                                                                        local parts = {x.__name, " {"}
                                                                        for i, k in ipairs(x.__order) do
                                                                          if i > 1 then parts[#parts+1] = ", " end
                                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                        end
                                                                        parts[#parts+1] = "}"
                                                                        return table.concat(parts)
                                                                      elseif #x > 0 then
                                                                          local allTables = true
                                                                          for _, v in ipairs(x) do
                                                                            if type(v) ~= "table" then allTables = false break end
                                                                          end
                                                                          local parts = {}
                                                                          if not allTables then parts[#parts+1] = "[" end
                                                                          for i, val in ipairs(x) do
                                                                            parts[#parts+1] = encode(val)
                                                                            if i < #x then parts[#parts+1] = " " end
                                                                          end
                                                                          if not allTables then parts[#parts+1] = "]" end
                                                                          return table.concat(parts)
                                                                        else
                                                                          local keys = {}
                                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                          local parts = {"{"}
                                                                          for i, k in ipairs(keys) do
                                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                            if i < #keys then parts[#parts+1] = ", " end
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        end
                                                                      elseif type(x) == "number" then
                                                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                            return string.format("%d", x)
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        elseif type(x) == "string" then
                                                                            return '"' .. x .. '"'
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        end
                                                                        return encode(v)
                                                                      end)(_str(factorial(5)))) or (_str(factorial(5)))))
                                                                      print((((type(_str(fib(10))) == "table")) and (
                                                                      (function(v)
                                                                      local function encode(x)
                                                                      if type(x) == "table" then
                                                                        if x.__name and x.__order then
                                                                          local parts = {x.__name, " {"}
                                                                          for i, k in ipairs(x.__order) do
                                                                            if i > 1 then parts[#parts+1] = ", " end
                                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        elseif #x > 0 then
                                                                            local allTables = true
                                                                            for _, v in ipairs(x) do
                                                                              if type(v) ~= "table" then allTables = false break end
                                                                            end
                                                                            local parts = {}
                                                                            if not allTables then parts[#parts+1] = "[" end
                                                                            for i, val in ipairs(x) do
                                                                              parts[#parts+1] = encode(val)
                                                                              if i < #x then parts[#parts+1] = " " end
                                                                            end
                                                                            if not allTables then parts[#parts+1] = "]" end
                                                                            return table.concat(parts)
                                                                          else
                                                                            local keys = {}
                                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                            local parts = {"{"}
                                                                            for i, k in ipairs(keys) do
                                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                              if i < #keys then parts[#parts+1] = ", " end
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          end
                                                                        elseif type(x) == "number" then
                                                                            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                              return string.format("%d", x)
                                                                            else
                                                                              return tostring(x)
                                                                            end
                                                                          elseif type(x) == "string" then
                                                                              return '"' .. x .. '"'
                                                                            else
                                                                              return tostring(x)
                                                                            end
                                                                          end
                                                                          return encode(v)
                                                                        end)(_str(fib(10)))) or (_str(fib(10)))))
                                                                        local _bench_end = os.clock()
                                                                        collectgarbage()
                                                                        local _bench_end_mem = collectgarbage('count') * 1024
                                                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                      end;
