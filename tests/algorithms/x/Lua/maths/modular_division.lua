-- Generated by Mochi v0.10.59 on 2025-08-07 10:05 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function mod(a, n)
    local r = (a % n)
    if (r < 0) then
      return (r + n)
    end
    return r
  end
  function greatest_common_divisor(a, b)
    local x = (((a < 0)) and ((-a)) or (a))
    local y = (((b < 0)) and ((-b)) or (b))
    while (y ~= 0) do
      local t = (x % y)
      x = y
      y = t
    end
    return x
  end
  function extended_gcd(a, b)
    if (b == 0) then
      return {a, 1, 0}
    end
    local res = extended_gcd(b, (a % b))
    local d = res[0 + 1]
    local p = res[1 + 1]
    local q = res[2 + 1]
    local x = q
    local y = (p - (q * (a // b)))
    return {d, x, y}
  end
  function extended_euclid(a, b)
    if (b == 0) then
      return {1, 0}
    end
    local res = extended_euclid(b, (a % b))
    local x = res[1 + 1]
    local y = (res[0 + 1] - ((a // b) * res[1 + 1]))
    return {x, y}
  end
  function invert_modulo(a, n)
    local res = extended_euclid(a, n)
    local inv = res[0 + 1]
    return mod(inv, n)
  end
  function modular_division(a, b, n)
    if (n <= 1) then
      _panic("n must be > 1")
    end
    if (a <= 0) then
      _panic("a must be > 0")
    end
    if (greatest_common_divisor(a, n) ~= 1) then
      _panic("gcd(a,n) != 1")
    end
    local eg = extended_gcd(n, a)
    local s = eg[2 + 1]
    return mod((b * s), n)
  end
  function modular_division2(a, b, n)
    local s = invert_modulo(a, n)
    return mod((b * s), n)
  end
  function tests()
    if (modular_division(4, 8, 5) ~= 2) then
      _panic("md1")
    end
    if (modular_division(3, 8, 5) ~= 1) then
      _panic("md2")
    end
    if (modular_division(4, 11, 5) ~= 4) then
      _panic("md3")
    end
    if (modular_division2(4, 8, 5) ~= 2) then
      _panic("md21")
    end
    if (modular_division2(3, 8, 5) ~= 1) then
      _panic("md22")
    end
    if (modular_division2(4, 11, 5) ~= 4) then
      _panic("md23")
    end
    if (invert_modulo(2, 5) ~= 3) then
      _panic("inv")
    end
    local eg = extended_gcd(10, 6)
    if (((eg[0 + 1] ~= 2) or (eg[1 + 1] ~= (-1))) or (eg[2 + 1] ~= 2)) then
      _panic("eg")
    end
    local eu = extended_euclid(10, 6)
    if ((eu[0 + 1] ~= (-1)) or (eu[1 + 1] ~= 2)) then
      _panic("eu")
    end
    if (greatest_common_divisor(121, 11) ~= 11) then
      _panic("gcd")
    end
  end
  function main()
    tests()
    print((((type(tostring(modular_division(4, 8, 5))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(tostring(modular_division(4, 8, 5)))) or (tostring(modular_division(4, 8, 5)))))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
