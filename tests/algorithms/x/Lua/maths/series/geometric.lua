-- Generated by Mochi v0.10.67 on 2025-08-17 13:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    io.stderr:write(tostring(msg) .. '\n')
    io.stderr:flush()
    os.exit(1)
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function is_geometric_series(series)
      if (_len(series) == 0) then
        _panic("Input list must be a non empty list")
      end
      if (_len(series) == 1) then
        return true
      end
      if (series[0 + 1] == 0.0) then
        return false
      end
      local ratio = (series[1 + 1] / series[0 + 1])
      local i = 0
      while (i < (_len(series) - 1)) do
        if (series[i + 1] == 0.0) then
          return false
        end
        if ((series[(i + 1) + 1] / series[i + 1]) ~= ratio) then
          return false
        end
        i = (i + 1)
      end
      return true
    end
    function geometric_mean(series)
      if (_len(series) == 0) then
        _panic("Input list must be a non empty list")
      end
      local product = 1.0
      local i = 0
      while (i < _len(series)) do
        product = (product * series[i + 1])
        i = (i + 1)
      end
      local n = _len(series)
      return nth_root(product, n)
    end
    function pow_float(base, exp)
      local result = 1.0
      local i = 0
      while (i < exp) do
        result = (result * base)
        i = (i + 1)
      end
      return result
    end
    function nth_root(value, n)
      if (value == 0.0) then
        return 0.0
      end
      local low = 0.0
      local high = value
      if (value < 1.0) then
        high = 1.0
      end
      local mid = ((low + high) / 2.0)
      local i = 0
      while (i < 40) do
        local mp = pow_float(mid, n)
        if (mp > value) then
          high = mid
        else
          low = mid
        end
        mid = ((low + high) / 2.0)
        i = (i + 1)
      end
      return mid
    end
    function test_geometric()
      local a = {2.0, 4.0, 8.0}
      if (not is_geometric_series(a)) then
        _panic("expected geometric series")
      end
      local b = {1.0, 2.0, 3.0}
      if is_geometric_series(b) then
        _panic("expected non geometric series")
      end
    end
    function main()
      test_geometric()
      print((((type(geometric_mean({2.0, 4.0, 8.0})) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
              return string.format("%d", x)
            else
              return tostring(x)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(geometric_mean({2.0, 4.0, 8.0}))) or (geometric_mean({2.0, 4.0, 8.0}))))
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
