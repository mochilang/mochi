-- Generated by Mochi v0.10.66 on 2025-08-16 14:41 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function binary_exponentiation(a, n, mod)
    if (n == 0) then
      return 1
    end
    if ((n % 2) == 1) then
      return ((binary_exponentiation(a, (n - 1), mod) * a) % mod)
    end
    local b = binary_exponentiation(a, (n // 2), mod)
    return ((b * b) % mod)
  end
  function naive_exponent_mod(a, n, mod)
    local result = 1
    local i = 0
    while (i < n) do
      result = ((result * a) % mod)
      i = (i + 1)
    end
    return result
  end
  function print_bool(b)
    if b then
      print(((true) and (1) or (0)))
    else
      print(((false) and (1) or (0)))
    end
  end
  p = 701
  a = 1000000000
  b = 10
  left = ((a // b) % p)
  right_fast = ((a * binary_exponentiation(b, (p - 2), p)) % p)
  print_bool((left == right_fast))
  right_naive = ((a * naive_exponent_mod(b, (p - 2), p)) % p)
  print_bool((left == right_naive))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
