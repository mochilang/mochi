-- Generated by Mochi v0.10.61 on 2025-08-08 17:12 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _fetch(url)
local p = io.popen('curl -fsSL ' .. url)
if not p then return '' end
local out = p:read('*a') or ''
p:close()
local title = string.match(out, '"title"%s*:%s*"([^"]+)"')
if title then return {title = title} end
return out
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function contains(xs, x)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (xs[i + 1] == x) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function join_with_comma(xs)
        local s = ""
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs)) do
              if (i > 0) then
                s = (s .. ", ")
              end
              s = (s .. xs[i + 1])
              i = (i + 1)
            end
            return s
          end
          function get_subreddit_data(subreddit, limit, age, wanted_data)
            local invalid = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(wanted_data)) do
                  local term = wanted_data[i + 1]
                  if (not (function(lst, v)
                  for _, x in ipairs(lst) do
                    if x == v then
                      return true
                    end
                  end
                  return false
                end)(valid_terms, term)) then
                  invalid = (function(lst, item)
                  lst = lst or {}
                  table.insert(lst, item)
                  return lst
                end)(invalid, term)
              end
              i = (i + 1)
            end
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(invalid) > 0) then
                  local msg = ("Invalid search term: " .. join_with_comma(invalid))
                  _panic(msg)
                end
                local resp = _fetch("tests/github/TheAlgorithms/Mochi/web_programming/reddit_sample.json")
                local result = {}
                local idx = 0
                while (idx < limit) do
                  local post = resp.data.children[idx + 1].data
                  local post_map = {}
                  if ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(wanted_data) == 0) then
                        post_map.title = post.title
                        post_map.url = post.url
                        post_map.selftext = post.selftext
                      else
                        local j = 0
                        while (j < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(wanted_data)) do
                              local field = wanted_data[j + 1]
                              if (field == "title") then
                                post_map.title = post.title
                              else
                                if (field == "url") then
                                  post_map.url = post.url
                                else
                                  if (field == "selftext") then
                                    post_map.selftext = post.selftext
                                  end
                                end
                              end
                              j = (j + 1)
                            end
                          end
                          result[idx] = post_map
                          idx = (idx + 1)
                        end
                        return result
                      end
                      valid_terms = {"approved_at_utc", "approved_by", "author_flair_background_color", "author_flair_css_class", "author_flair_richtext", "author_flair_template_id", "author_fullname", "author_premium", "can_mod_post", "category", "clicked", "content_categories", "created_utc", "downs", "edited", "gilded", "gildings", "hidden", "hide_score", "is_created_from_ads_ui", "is_meta", "is_original_content", "is_reddit_media_domain", "is_video", "link_flair_css_class", "link_flair_richtext", "link_flair_text", "link_flair_text_color", "media_embed", "mod_reason_title", "name", "permalink", "pwls", "quarantine", "saved", "score", "secure_media", "secure_media_embed", "selftext", "subreddit", "subreddit_name_prefixed", "subreddit_type", "thumbnail", "title", "top_awarded_type", "total_awards_received", "ups", "upvote_ratio", "url", "user_reports"}
                      print(
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(get_subreddit_data("learnpython", 1, "new", {"title", "url", "selftext"})))
                      local _bench_end = os.clock()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
