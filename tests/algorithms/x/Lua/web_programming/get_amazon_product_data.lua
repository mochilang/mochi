-- Generated by Mochi v0.10.61 on 2025-08-08 17:12 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function find_index(s, pat, start)
    local i = start
    while (i <= ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(pat))) do
              local j = 0
              local ok = true
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(pat)) do
                    if (string.sub(s, ((i + j) + 1), ((i + j) + 1)) ~= string.sub(pat, (j + 1), (j + 1))) then
                      ok = false
                      break
                    end
                    j = (j + 1)
                  end
                  if ok then
                    return i
                  end
                  i = (i + 1)
                end
                return (-1)
              end
              function slice_between(s, start_pat, end_pat, from)
                local a = find_index(s, start_pat, from)
                if (a < 0) then
                  return ""
                end
                local b = (a + (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(start_pat))
                    local c = find_index(s, end_pat, b)
                    if (c < 0) then
                      return ""
                    end
                    return _substring(s, b, c)
                  end
                  function char_to_digit(c)
                    if (c == "0") then
                      return 0
                    end
                    if (c == "1") then
                      return 1
                    end
                    if (c == "2") then
                      return 2
                    end
                    if (c == "3") then
                      return 3
                    end
                    if (c == "4") then
                      return 4
                    end
                    if (c == "5") then
                      return 5
                    end
                    if (c == "6") then
                      return 6
                    end
                    if (c == "7") then
                      return 7
                    end
                    if (c == "8") then
                      return 8
                    end
                    return 9
                  end
                  function parse_int(txt)
                    local n = 0
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(txt)) do
                          local c = string.sub(txt, (i + 1), (i + 1))
                          if ((c >= "0") and (c <= "9")) then
                            n = ((n * 10) + char_to_digit(c))
                          end
                          i = (i + 1)
                        end
                        return n
                      end
                      function parse_product(block)
                        local href = slice_between(block, "href=\"", "\"", 0)
                        local link = ("https://www.amazon.in" .. href)
                        local title = slice_between(block, ">", "</a>", find_index(block, "<a", 0))
                        local price = slice_between(block, "<span class=\"a-offscreen\">", "</span>", 0)
                        local rating = slice_between(block, "<span class=\"a-icon-alt\">", "</span>", 0)
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(rating) == 0) then
                              rating = "Not available"
                            end
                            local mrp = slice_between(block, "<span class=\"a-price a-text-price\">", "</span>", 0)
                            local disc = 0
                            if (((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(mrp) > 0) and ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(price) > 0)) then
                                      local p = parse_int(price)
                                      local m = parse_int(mrp)
                                      if (m > 0) then
                                        disc = (((m - p) * 100) // m)
                                      end
                                    else
                                      mrp = ""
                                      disc = 0
                                    end
                                    return {title = title, link = link, price = price, rating = rating, mrp = mrp, discount = disc}
                                  end
                                  function get_amazon_product_data(product)
                                    local html = "<div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/sample_product\">Sample Product</a></h2><span class=\"a-offscreen\">₹900</span><span class=\"a-icon-alt\">4.3 out of 5 stars</span><span class=\"a-price a-text-price\">₹1000</span></div><div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/item2\">Another Product</a></h2><span class=\"a-offscreen\">₹500</span><span class=\"a-icon-alt\">3.8 out of 5 stars</span><span class=\"a-price a-text-price\">₹800</span></div>"
                                    local out = {}
                                    local start = 0
                                    while true do
                                      local div_start = find_index(html, "<div class=\"s-result-item\"", start)
                                      if (div_start < 0) then
                                        break
                                      end
                                      local div_end = find_index(html, "</div>", div_start)
                                      if (div_end < 0) then
                                        break
                                      end
                                      local block = _substring(html, div_start, div_end)
                                      out = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(out, parse_product(block))
                                    start = (div_end + (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)("</div>"))
                                      end
                                      return out
                                    end
                                    function main()
                                      local products = get_amazon_product_data("laptop")
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(products)) do
                                            local p = products[i + 1]
                                            print((((type(((((((((((p.title .. " | ") .. p.link) .. " | ") .. p.price) .. " | ") .. p.rating) .. " | ") .. p.mrp) .. " | ") .. _str(p.discount))) == "table")) and (
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)(((((((((((p.title .. " | ") .. p.link) .. " | ") .. p.price) .. " | ") .. p.rating) .. " | ") .. p.mrp) .. " | ") .. _str(p.discount)))) or (((((((((((p.title .. " | ") .. p.link) .. " | ") .. p.price) .. " | ") .. p.rating) .. " | ") .. p.mrp) .. " | ") .. _str(p.discount)))))
                                            i = (i + 1)
                                          end
                                        end
                                        main()
                                        local _bench_end = os.clock()
                                        collectgarbage()
                                        local _bench_end_mem = collectgarbage('count') * 1024
                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                      end;
