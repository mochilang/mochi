-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function index_of(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (string.sub(s, (i + 1), (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return (-1)
      end
      function index_of_substring(s, sub)
        local n = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)
            local m = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sub)
                if (m == 0) then
                  return 0
                end
                local i = 0
                while (i <= (n - m)) do
                  local j = 0
                  local is_match = true
                  while (j < m) do
                    if (string.sub(s, ((i + j) + 1), ((i + j) + 1)) ~= string.sub(sub, (j + 1), (j + 1))) then
                      is_match = false
                      break
                    end
                    j = (j + 1)
                  end
                  if is_match then
                    return i
                  end
                  i = (i + 1)
                end
                return (-1)
              end
              function split(s, sep)
                local parts = {}
                local last = 0
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)) do
                      local ch = string.sub(s, (i + 1), (i + 1))
                      if (ch == sep) then
                        parts = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(parts, _substring(s, last, i))
                      last = (i + 1)
                    end
                    if ((i + 1) == (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(s)) then
                          parts = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(parts, _substring(s, last, (i + 1)))
                      end
                      i = (i + 1)
                    end
                    return parts
                  end
                  function get_sub_domain_name(url)
                    local proto_pos = index_of_substring(url, "://")
                    local start = 0
                    if (proto_pos >= 0) then
                      start = (proto_pos + 3)
                    end
                    local i = start
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(url)) do
                          if (string.sub(url, (i + 1), (i + 1)) == "/") then
                            break
                          end
                          i = (i + 1)
                        end
                        return _substring(url, start, i)
                      end
                      function get_domain_name(url)
                        local sub = get_sub_domain_name(url)
                        local parts = _split(sub, ".")
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(parts) >= 2) then
                              return ((parts[((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(parts) - 2) + 1] .. ".") .. parts[((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(parts) - 1) + 1])
                                    end
                                    return sub
                                  end
                                  function is_alnum(ch)
                                    local chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                                    return (index_of(chars, ch) >= 0)
                                  end
                                  function contains(xs, x)
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(xs)) do
                                          if (xs[i + 1] == x) then
                                            return true
                                          end
                                          i = (i + 1)
                                        end
                                        return false
                                      end
                                      function bubble_sort(xs)
                                        local arr = xs
                                        local n = (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(arr)
                                            local i = 0
                                            while (i < n) do
                                              local j = 0
                                              while ((j + 1) < (n - i)) do
                                                if (arr[j + 1] > arr[(j + 1) + 1]) then
                                                  local tmp = arr[j + 1]
                                                  arr[j + 1] = arr[(j + 1) + 1]
                                                  arr[(j + 1) + 1] = tmp
                                                end
                                                j = (j + 1)
                                              end
                                              i = (i + 1)
                                            end
                                            return arr
                                          end
                                          function extract_links(domain, html)
                                            local links = {}
                                            local pos = index_of_substring(html, "href=")
                                            while (pos >= 0) do
                                              local start_quote = index_of(_substring(html, (pos + 5), (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(html)), "\"")
                                                  if (start_quote < 0) then
                                                    break
                                                  end
                                                  local rest = (((pos + 5) + start_quote) + 1)
                                                  local end_quote = index_of(_substring(html, rest, (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(html)), "\"")
                                                      if (end_quote < 0) then
                                                        break
                                                      end
                                                      local link = _substring(html, rest, (rest + end_quote))
                                                      if (not (function(lst, v)
                                                      for _, x in ipairs(lst) do
                                                        if x == v then
                                                          return true
                                                        end
                                                      end
                                                      return false
                                                    end)(links, link)) then
                                                      local absolute = link
                                                      if (not ((index_of_substring(link, "http://") == 0) or (index_of_substring(link, "https://") == 0))) then
                                                        if (index_of_substring(link, "/") == 0) then
                                                          absolute = (("https://" .. domain) .. link)
                                                        else
                                                          absolute = ((("https://" .. domain) .. "/") .. link)
                                                        end
                                                      end
                                                      links = (function(lst, item)
                                                      lst = lst or {}
                                                      table.insert(lst, item)
                                                      return lst
                                                    end)(links, absolute)
                                                  end
                                                  pos = index_of_substring(_substring(html, (rest + end_quote), (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(html)), "href=")
                                                      if (pos >= 0) then
                                                        pos = ((pos + rest) + end_quote)
                                                      end
                                                    end
                                                    return links
                                                  end
                                                  function extract_emails(domain, text)
                                                    local emails = {}
                                                    local i = 0
                                                    while (i < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(text)) do
                                                          if (string.sub(text, (i + 1), (i + 1)) == "@") then
                                                            if (_substring(text, (i + 1), ((i + 1) + (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(domain))) == domain) then
                                                                  local j = (i - 1)
                                                                  while ((j >= 0) and is_alnum(string.sub(text, (j + 1), (j + 1)))) do
                                                                    j = (j - 1)
                                                                  end
                                                                  local _local = _substring(text, (j + 1), i)
                                                                  if ((function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(_local) > 0) then
                                                                        local email = ((_local .. "@") .. domain)
                                                                        if (not (function(lst, v)
                                                                        for _, x in ipairs(lst) do
                                                                          if x == v then
                                                                            return true
                                                                          end
                                                                        end
                                                                        return false
                                                                      end)(emails, email)) then
                                                                        emails = (function(lst, item)
                                                                        lst = lst or {}
                                                                        table.insert(lst, item)
                                                                        return lst
                                                                      end)(emails, email)
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                              i = (i + 1)
                                                            end
                                                            return emails
                                                          end
                                                          function find_page(pages, url)
                                                            local i = 0
                                                            while (i < (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(pages)) do
                                                                  local p = pages[i + 1]
                                                                  if (p.url == url) then
                                                                    return p.html
                                                                  end
                                                                  i = (i + 1)
                                                                end
                                                                return ""
                                                              end
                                                              function emails_from_url(url, pages)
                                                                local domain = get_domain_name(url)
                                                                local base_html = find_page(pages, url)
                                                                local links = extract_links(domain, base_html)
                                                                local found = {}
                                                                local i = 0
                                                                while (i < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(links)) do
                                                                      local html = find_page(pages, links[i + 1])
                                                                      local emails = extract_emails(domain, html)
                                                                      local j = 0
                                                                      while (j < (function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(emails)) do
                                                                            if (not (function(lst, v)
                                                                            for _, x in ipairs(lst) do
                                                                              if x == v then
                                                                                return true
                                                                              end
                                                                            end
                                                                            return false
                                                                          end)(found, emails[j + 1])) then
                                                                            found = (function(lst, item)
                                                                            lst = lst or {}
                                                                            table.insert(lst, item)
                                                                            return lst
                                                                          end)(found, emails[j + 1])
                                                                        end
                                                                        j = (j + 1)
                                                                      end
                                                                      i = (i + 1)
                                                                    end
                                                                    local sorted = bubble_sort(found)
                                                                    return sorted
                                                                  end
                                                                  pages = {{url = "https://example.com", html = "<html><body><a href=\"/contact\">Contact</a></body></html>"}, {url = "https://example.com/contact", html = "<html>Contact us at info@example.com or support@example.com</html>"}}
                                                                  emails = emails_from_url("https://example.com", pages)
                                                                  print((((type((_str((function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(emails)) .. " emails found:")) == "table")) and (
                                                                      (function(v)
                                                                      local function encode(x)
                                                                      if type(x) == "table" then
                                                                        if x.__name and x.__order then
                                                                          local parts = {x.__name, " {"}
                                                                          for i, k in ipairs(x.__order) do
                                                                            if i > 1 then parts[#parts+1] = ", " end
                                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        elseif #x > 0 then
                                                                            local allTables = true
                                                                            for _, v in ipairs(x) do
                                                                              if type(v) ~= "table" then allTables = false break end
                                                                            end
                                                                            local parts = {}
                                                                            if not allTables then parts[#parts+1] = "[" end
                                                                            for i, val in ipairs(x) do
                                                                              parts[#parts+1] = encode(val)
                                                                              if i < #x then parts[#parts+1] = " " end
                                                                            end
                                                                            if not allTables then parts[#parts+1] = "]" end
                                                                            return table.concat(parts)
                                                                          else
                                                                            local keys = {}
                                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                            local parts = {"{"}
                                                                            for i, k in ipairs(keys) do
                                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                              if i < #keys then parts[#parts+1] = ", " end
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          end
                                                                        elseif type(x) == "string" then
                                                                            return '"' .. x .. '"'
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        end
                                                                        return encode(v)
                                                                      end)((_str((function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(emails)) .. " emails found:"))) or ((_str((function(v)
                                                                          if type(v) == 'table' and v.items ~= nil then
                                                                            return #v.items
                                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                                              local c = 0
                                                                              for _ in pairs(v) do c = c + 1 end
                                                                              return c
                                                                            elseif type(v) == 'string' then
                                                                                local l = utf8.len(v)
                                                                                if l then return l end
                                                                                return #v
                                                                              elseif type(v) == 'table' then
                                                                                  return #v
                                                                                else
                                                                                  return 0
                                                                                end
                                                                              end)(emails)) .. " emails found:"))))
                                                                              k = 0
                                                                              while (k < (function(v)
                                                                              if type(v) == 'table' and v.items ~= nil then
                                                                                return #v.items
                                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                                  local c = 0
                                                                                  for _ in pairs(v) do c = c + 1 end
                                                                                  return c
                                                                                elseif type(v) == 'string' then
                                                                                    local l = utf8.len(v)
                                                                                    if l then return l end
                                                                                    return #v
                                                                                  elseif type(v) == 'table' then
                                                                                      return #v
                                                                                    else
                                                                                      return 0
                                                                                    end
                                                                                  end)(emails)) do
                                                                                    print((((type(emails[k + 1]) == "table")) and (
                                                                                    (function(v)
                                                                                    local function encode(x)
                                                                                    if type(x) == "table" then
                                                                                      if x.__name and x.__order then
                                                                                        local parts = {x.__name, " {"}
                                                                                        for i, k in ipairs(x.__order) do
                                                                                          if i > 1 then parts[#parts+1] = ", " end
                                                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                        end
                                                                                        parts[#parts+1] = "}"
                                                                                        return table.concat(parts)
                                                                                      elseif #x > 0 then
                                                                                          local allTables = true
                                                                                          for _, v in ipairs(x) do
                                                                                            if type(v) ~= "table" then allTables = false break end
                                                                                          end
                                                                                          local parts = {}
                                                                                          if not allTables then parts[#parts+1] = "[" end
                                                                                          for i, val in ipairs(x) do
                                                                                            parts[#parts+1] = encode(val)
                                                                                            if i < #x then parts[#parts+1] = " " end
                                                                                          end
                                                                                          if not allTables then parts[#parts+1] = "]" end
                                                                                          return table.concat(parts)
                                                                                        else
                                                                                          local keys = {}
                                                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                          local parts = {"{"}
                                                                                          for i, k in ipairs(keys) do
                                                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                            if i < #keys then parts[#parts+1] = ", " end
                                                                                          end
                                                                                          parts[#parts+1] = "}"
                                                                                          return table.concat(parts)
                                                                                        end
                                                                                      elseif type(x) == "string" then
                                                                                          return '"' .. x .. '"'
                                                                                        else
                                                                                          return tostring(x)
                                                                                        end
                                                                                      end
                                                                                      return encode(v)
                                                                                    end)(emails[k + 1])) or (emails[k + 1])))
                                                                                    k = (k + 1)
                                                                                  end
                                                                                  local _bench_end = os.clock()
                                                                                  collectgarbage()
                                                                                  local _bench_end_mem = collectgarbage('count') * 1024
                                                                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                                end;
