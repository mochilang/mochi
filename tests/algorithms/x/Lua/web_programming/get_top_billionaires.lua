-- Generated by Mochi v0.10.61 on 2025-08-08 17:12 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _fetch(url)
local p = io.popen('curl -fsSL ' .. url)
if not p then return '' end
local out = p:read('*a') or ''
p:close()
local title = string.match(out, '"title"%s*:%s*"([^"]+)"')
if title then return {title = title} end
return out
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function round1(value)
    if (value >= 0) then
      local scaled = math.floor(tonumber(((value * 10) + 0.5)) or 0)
      return (scaled / 10)
    end
    local scaled = math.floor(tonumber(((value * 10) - 0.5)) or 0)
    return (scaled / 10)
  end
  function years_old(birth_ms, today_ms)
    local ms_per_year = 3.15576e+10
    return math.floor(tonumber(((today_ms - birth_ms) / ms_per_year)) or 0)
  end
  function get_forbes_real_time_billionaires()
    local response = _fetch(API_URL)
    local out = {}
    for _, person in ipairs(response.personList.personsLists) do
      local worth_billion = round1((person.finalWorth / 1000))
      local age_years = years_old(person.birthDate, TODAY_MS)
      local entry = {__name = "GenType1", __order = {"Name", "Source", "Country", "Gender", "Worth ($)", "Age"}, Name = person.personName, Source = person.source, Country = person.countryOfCitizenship, Gender = person.gender, ["Worth ($)"] = (_str(worth_billion) .. " Billion"), Age = _str(age_years)}
      out = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(out, entry)
  end
  return out
end
function display_billionaires(list)
  for _, b in ipairs(list) do
    print((((type(((((((((((tostring(b.Name) .. " | ") .. tostring(b.Source)) .. " | ") .. tostring(b.Country)) .. " | ") .. tostring(b.Gender)) .. " | ") .. tostring(b["Worth ($)"])) .. " | ") .. tostring(b.Age))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(((((((((((tostring(b.Name) .. " | ") .. tostring(b.Source)) .. " | ") .. tostring(b.Country)) .. " | ") .. tostring(b.Gender)) .. " | ") .. tostring(b["Worth ($)"])) .. " | ") .. tostring(b.Age)))) or (((((((((((tostring(b.Name) .. " | ") .. tostring(b.Source)) .. " | ") .. tostring(b.Country)) .. " | ") .. tostring(b.Gender)) .. " | ") .. tostring(b["Worth ($)"])) .. " | ") .. tostring(b.Age)))))
  end
end
LIMIT = 10
TODAY_MS = 1.7050176e+12
API_URL = ("https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=" .. _str(LIMIT))
display_billionaires(get_forbes_real_time_billionaires())
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
