<?php
ini_set('memory_limit', '-1');
function _str($x) {
    if (is_array($x)) {
        $isList = array_keys($x) === range(0, count($x) - 1);
        if ($isList) {
            $parts = [];
            foreach ($x as $v) { $parts[] = _str($v); }
            return '[' . implode(' ', $parts) . ']';
        }
        $parts = [];
        foreach ($x as $k => $v) { $parts[] = _str($k) . ':' . _str($v); }
        return 'map[' . implode(' ', $parts) . ']';
    }
    if (is_bool($x)) return $x ? 'true' : 'false';
    if ($x === null) return 'null';
    return strval($x);
}
function _append($arr, $x) {
    $arr[] = $x;
    return $arr;
}
function _intdiv($a, $b) {
    if (function_exists('bcdiv')) {
        $sa = is_int($a) ? strval($a) : (is_string($a) ? $a : sprintf('%.0f', $a));
        $sb = is_int($b) ? strval($b) : (is_string($b) ? $b : sprintf('%.0f', $b));
        return intval(bcdiv($sa, $sb, 0));
    }
    return intdiv($a, $b);
}
function mod_pow($base, $exp, $mod) {
  global $prime, $primitive_root, $a_private, $b_private, $a_public, $b_public, $a_secret, $b_secret;
  $result = 1;
  $b = $base % $mod;
  $e = $exp;
  while ($e > 0) {
  if ($e % 2 == 1) {
  $result = ($result * $b) % $mod;
}
  $e = _intdiv($e, 2);
  $b = ($b * $b) % $mod;
};
  return $result;
}
function contains($xs, $val) {
  global $prime, $primitive_root, $a_private, $b_private, $a_public, $b_public, $a_secret, $b_secret;
  $i = 0;
  while ($i < count($xs)) {
  if ($xs[$i] == $val) {
  return true;
}
  $i = $i + 1;
};
  return false;
}
function find_primitive($modulus) {
  global $prime, $primitive_root, $a_private, $b_private, $a_public, $b_public, $a_secret, $b_secret;
  $r = 1;
  while ($r < $modulus) {
  $li = [];
  $x = 0;
  $valid = true;
  while ($x < $modulus - 1 && $valid) {
  $value = mod_pow($r, $x, $modulus);
  if (in_array($value, $li)) {
  $valid = false;
} else {
  $li = _append($li, $value);
  $x = $x + 1;
}
};
  if ($valid) {
  return $r;
}
  $r = $r + 1;
};
  return -1;
}
echo rtrim(json_encode(find_primitive(7), 1344)), PHP_EOL;
echo rtrim(json_encode(find_primitive(11), 1344)), PHP_EOL;
echo rtrim(json_encode(find_primitive(8), 1344)), PHP_EOL;
$prime = 23;
$primitive_root = find_primitive($prime);
if ($primitive_root == (0 - 1)) {
  echo rtrim('Cannot find the primitive for the value: -1'), PHP_EOL;
} else {
  $a_private = 6;
  $b_private = 15;
  $a_public = mod_pow($primitive_root, $a_private, $prime);
  $b_public = mod_pow($primitive_root, $b_private, $prime);
  $a_secret = mod_pow($b_public, $a_private, $prime);
  $b_secret = mod_pow($a_public, $b_private, $prime);
  echo rtrim('The key value generated by A is: ' . _str($a_secret)), PHP_EOL;
  echo rtrim('The key value generated by B is: ' . _str($b_secret)), PHP_EOL;
}
