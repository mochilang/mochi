// Generated by Mochi v0.10.70 on 2025-08-23 13:54:42 GMT+7

let DIGITS: string = "0123456789";
let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
let LOOKUP_LETTERS: string = "TRWAGMYFPDXBNJZSQVHLCKE";
let ERROR_MSG: string = "Input must be a string of 8 numbers plus letter";
function to_upper(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    let j: number = 0;
    let converted: string = ch;
    while ((j < _len(LOWER))) {
      if ((LOWER[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? LOWER.length + _mochi_idx : _mochi_idx;})()] === ch)) {
        converted = UPPER[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? UPPER.length + _mochi_idx : _mochi_idx;})()];
        break
      }
      j = (j + 1);
    }
    res = (res + converted);
    i = (i + 1);
  }
  return res;
}
function is_digit(ch: string): boolean {
  let i: number = 0;
  while ((i < _len(DIGITS))) {
    if ((DIGITS[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? DIGITS.length + _mochi_idx : _mochi_idx;})()] === ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function clean_id(spanish_id: string): string {
  let upper_id: string = to_upper(spanish_id);
  let cleaned: string = "";
  let i: number = 0;
  while ((i < _len(upper_id))) {
    let ch: string = upper_id[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? upper_id.length + _mochi_idx : _mochi_idx;})()];
    if ((ch !== "-")) {
      cleaned = (cleaned + ch);
    }
    i = (i + 1);
  }
  return cleaned;
}
function is_spain_national_id(spanish_id: string): boolean {
  let sid: string = clean_id(spanish_id);
  if ((_len(sid) !== 9)) {
    _panic(ERROR_MSG);
  }
  let i: number = 0;
  while ((i < 8)) {
    if (!is_digit(sid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sid.length + _mochi_idx : _mochi_idx;})()])) {
      _panic(ERROR_MSG);
    }
    i = (i + 1);
  }
  let _number: number = Math.trunc((sid).substring(0, 8));
  let letter: string = sid[(()=>{const _mochi_idx = Math.trunc(8); return _mochi_idx < 0 ? sid.length + _mochi_idx : _mochi_idx;})()];
  if (is_digit(letter)) {
    _panic(ERROR_MSG);
  }
  let expected: string = LOOKUP_LETTERS[(()=>{const _mochi_idx = Math.trunc((_number % 23)); return _mochi_idx < 0 ? LOOKUP_LETTERS.length + _mochi_idx : _mochi_idx;})()];
  return (letter === expected);
}
function main() {
  console.log(_str(is_spain_national_id("12345678Z")));
  console.log(_str(is_spain_national_id("12345678z")));
  console.log(_str(is_spain_national_id("12345678x")));
  console.log(_str(is_spain_national_id("12345678I")));
  console.log(_str(is_spain_national_id("12345678-Z")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

