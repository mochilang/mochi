// Generated by Mochi v0.10.59 on 2025-08-07 08:56:06 GMT+7

function validate_initial_digits(cc: string): boolean {
  return ((((((cc.slice(0, 2) == "34") || (cc.slice(0, 2) == "35")) || (cc.slice(0, 2) == "37")) || (cc.slice(0, 1) == "4")) || (cc.slice(0, 1) == "5")) || (cc.slice(0, 1) == "6"));
}
function luhn_validation(cc: string): boolean {
  let sum: number = 0;
  let double_digit: boolean = false;
  let i: number = (_len(cc) - 1);
  while ((i >= 0)) {
    let n: number = parseIntStr(cc.slice(i, (i + 1)), 10);
    if (double_digit) {
      n = (n * 2);
      if ((n > 9)) {
        n = (n - 9);
      }
    }
    sum = (sum + n);
    double_digit = !double_digit;
    i = (i - 1);
  }
  return ((sum % 10) == 0);
}
function is_digit_string(s: string): boolean {
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s.slice(i, (i + 1));
    if (((c < "0") || (c > "9"))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function validate_credit_card_number(cc: string): boolean {
  let error_message: string = (cc + " is an invalid credit card number because");
  if (!is_digit_string(cc)) {
    console.log(_str((error_message + " it has nonnumerical characters.")));
    return false;
  }
  if (!((_len(cc) >= 13) && (_len(cc) <= 16))) {
    console.log(_str((error_message + " of its length.")));
    return false;
  }
  if (!validate_initial_digits(cc)) {
    console.log(_str((error_message + " of its first two digits.")));
    return false;
  }
  if (!luhn_validation(cc)) {
    console.log(_str((error_message + " it fails the Luhn check.")));
    return false;
  }
  console.log(_str((cc + " is a valid credit card number.")));
  return true;
}
function main() {
  validate_credit_card_number("4111111111111111");
  validate_credit_card_number("32323");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

