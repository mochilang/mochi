// Generated by Mochi v0.10.59 on 2025-08-07 08:56:17 GMT+7

function parse_int(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(i) < 0 ? s.length + (i) : i];
    value = ((value * 10) + Math.trunc(c));
    i = (i + 1);
  }
  return value;
}
function is_polish_national_id(id: string): boolean {
  if ((_len(id) == 0)) {
    return false;
  }
  if (((id).substring(0, 1) == "-")) {
    return false;
  }
  let input_int: number = parse_int(id);
  if (((input_int < 10100000) || (input_int > 99923199999))) {
    return false;
  }
  let month: number = parse_int((id).substring(2, 4));
  if (!((((((month >= 1) && (month <= 12)) || ((month >= 21) && (month <= 32))) || ((month >= 41) && (month <= 52))) || ((month >= 61) && (month <= 72))) || ((month >= 81) && (month <= 92)))) {
    return false;
  }
  let day: number = parse_int((id).substring(4, 6));
  if (((day < 1) || (day > 31))) {
    return false;
  }
  let multipliers: number[] = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3];
  let subtotal: number = 0;
  let i: number = 0;
  while ((i < _len(multipliers))) {
    let digit: number = parse_int((id).substring(i, (i + 1)));
    subtotal = (subtotal + ((digit * multipliers[(i) < 0 ? multipliers.length + (i) : i]) % 10));
    i = (i + 1);
  }
  let checksum: number = (10 - (subtotal % 10));
  return (checksum == (input_int % 10));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(is_polish_national_id("02070803628"))));
  console.log(_str(_str(is_polish_national_id("02150803629"))));
  console.log(_str(_str(is_polish_national_id("02075503622"))));
  console.log(_str(_str(is_polish_national_id("-99012212349"))));
  console.log(_str(_str(is_polish_national_id("990122123499999"))));
  console.log(_str(_str(is_polish_national_id("02070803621"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

