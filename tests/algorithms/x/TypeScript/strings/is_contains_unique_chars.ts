// Generated by Mochi v0.10.59 on 2025-08-07 08:56:14 GMT+7

function ord(ch: string): number {
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let digits: string = "0123456789";
  let i: number = 0;
  while ((i < _len(lower))) {
    if ((lower[(i) < 0 ? lower.length + (i) : i] == ch)) {
      return (97 + i);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(upper))) {
    if ((upper[(i) < 0 ? upper.length + (i) : i] == ch)) {
      return (65 + i);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(digits))) {
    if ((digits[(i) < 0 ? digits.length + (i) : i] == ch)) {
      return (48 + i);
    }
    i = (i + 1);
  }
  if ((ch == " ")) {
    return 32;
  }
  if ((ch == "_")) {
    return 95;
  }
  if ((ch == ".")) {
    return 46;
  }
  if ((ch == "'")) {
    return 39;
  }
  return 0;
}
function lshift(num: number, k: number): number {
  let result = num;
  let i: number = 0;
  while ((i < k)) {
    result = (result * 2);
    i = (i + 1);
  }
  return result;
}
function rshift(num: number, k: number): number {
  let result = num;
  let i: number = 0;
  while ((i < k)) {
    result = ((result - (result % 2)) / 2);
    i = (i + 1);
  }
  return result;
}
function is_contains_unique_chars(input_str: string): boolean {
  let bitmap: number = 0;
  let i: number = 0;
  while ((i < _len(input_str))) {
    let code: number = ord(input_str[(i) < 0 ? input_str.length + (i) : i]);
    if (((rshift(bitmap, code) % 2) == 1)) {
      return false;
    }
    bitmap = (bitmap + lshift(1, code));
    i = (i + 1);
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(is_contains_unique_chars("I_love.py"))));
  console.log(_str(_str(is_contains_unique_chars("I don't love Python"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

