// Generated by Mochi v0.10.70 on 2025-08-23 13:54:31 GMT+7

let LETTERS_AND_SPACE: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n";
let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
function to_upper(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s.slice(i, (i + 1));
    let j: number = 0;
    let up: string = c;
    while ((j < _len(LOWER))) {
      if ((c === LOWER.slice(j, (j + 1)))) {
        up = UPPER.slice(j, (j + 1));
        break
      }
      j = (j + 1);
    }
    res = (res + up);
    i = (i + 1);
  }
  return res;
}
function char_in(chars: string, c: string): boolean {
  let i: number = 0;
  while ((i < _len(chars))) {
    if ((chars.slice(i, (i + 1)) === c)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function remove_non_letters(message: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let ch: string = message.slice(i, (i + 1));
    if (char_in(LETTERS_AND_SPACE, ch)) {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function split_spaces(text: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(text))) {
    let ch: string = text.slice(i, (i + 1));
    if ((ch === " ")) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function load_dictionary(): Record<string, boolean> {
  let words: string[] = ["HELLO", "WORLD", "HOW", "ARE", "YOU", "THE", "QUICK", "BROWN", "FOX", "JUMPS", "OVER", "LAZY", "DOG"];
  let dict: Record<string, boolean> = {};
  for (const w of words) {
    dict[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? dict.length + _mochi_idx : _mochi_idx;})()] = true;
  }
  return dict;
}
function get_english_count(message: string): number {
  let upper = to_upper(message);
  let cleaned = remove_non_letters(upper);
  let possible: string[] = split_spaces(cleaned);
  let matches: number = 0;
  let total: number = 0;
  for (const w of possible) {
    if ((w !== "")) {
      total = (total + 1);
      if ((w in ENGLISH_WORDS)) {
        matches = (matches + 1);
      }
    }
  }
  if ((total === 0)) {
    return 0.0;
  }
  return Math.trunc(matches / total);
}
function is_english(message: string, word_percentage: number, letter_percentage: number): boolean {
  let words_match: boolean = ((get_english_count(message) * 100.0) >= word_percentage);
  let num_letters: number = _len(remove_non_letters(message));
  let letters_pct: number = ((_len(message) === 0) ? 0.0 : ((num_letters / _len(message)) * 100.0));
  let letters_match: boolean = (letters_pct >= letter_percentage);
  return (words_match && letters_match);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let ENGLISH_WORDS: Record<string, boolean>
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
ENGLISH_WORDS = load_dictionary()
  console.log(_str(is_english("Hello World", 20, 85)));
  console.log(_str(is_english("llold HorWd", 20, 85)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

