// Generated by Mochi v0.10.70 on 2025-08-23 13:54:23 GMT+7

function match_in_pattern(pat: string, ch: string): number {
  let i: bigint = (_len(pat) - 1);
  while ((i >= 0)) {
    if (((pat).substring(i, (i + 1)) === ch)) {
      return i;
    }
    i = (i - 1);
  }
  return -1;
}
function mismatch_in_text(text: string, pat: string, current_pos: number): number {
  let i: bigint = (_len(pat) - 1);
  while ((i >= 0)) {
    if (((pat).substring(i, (i + 1)) !== (text).substring((current_pos + i), ((current_pos + i) + 1)))) {
      return (current_pos + i);
    }
    i = (i - 1);
  }
  return -1;
}
function bad_character_heuristic(text: string, pat: string): number[] {
  let textLen: number = _len(text);
  let patLen: number = _len(pat);
  let positions: number[] = [];
  let i: number = 0;
  while ((i <= (textLen - patLen))) {
    let mismatch_index: number = mismatch_in_text(text, pat, i);
    if ((mismatch_index < 0)) {
      positions.push(i);
      i = (i + 1);
    } else {
      let ch: string = (text).substring(mismatch_index, (mismatch_index + 1));
      let match_index: number = match_in_pattern(pat, ch);
      if ((match_index < 0)) {
        i = (mismatch_index + 1);
      } else {
        i = (mismatch_index - match_index);
      }
    }
  }
  return positions;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

