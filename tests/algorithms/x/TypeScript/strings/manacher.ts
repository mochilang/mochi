// Generated by Mochi v0.10.70 on 2025-08-23 13:54:50 GMT+7

function palindromic_string(input_string: string): string {
  let max_length: number = 0;
  let new_input_string: string = "";
  let output_string: string = "";
  let n: number = _len(input_string);
  let i: number = 0;
  while ((i < (n - 1))) {
    new_input_string = ((new_input_string + (input_string).substring(i, (i + 1))) + "|");
    i = (i + 1);
  }
  new_input_string = (new_input_string + (input_string).substring((n - 1), n));
  let left: number = 0;
  let right: number = 0;
  let length: number[] = [];
  i = 0;
  let m: number = _len(new_input_string);
  while ((i < m)) {
    length.push(1);
    i = (i + 1);
  }
  let start: number = 0;
  let j: number = 0;
  while ((j < m)) {
    let k: number = 1;
    if ((j <= right)) {
      let mirror: bigint = ((left + right) - j);
      k = Math.trunc(length[(()=>{const _mochi_idx = mirror; return _mochi_idx < 0 ? length.length + _mochi_idx : _mochi_idx;})()] / 2);
      let diff: bigint = ((right - j) + 1);
      if ((diff < k)) {
        k = diff;
      }
      if ((k < 1)) {
        k = 1;
      }
    }
    while (((((j - k) >= 0) && ((j + k) < m)) && ((new_input_string).substring((j + k), ((j + k) + 1)) === (new_input_string).substring((j - k), ((j - k) + 1))))) {
      k = (k + 1);
    }
    length[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? length.length + _mochi_idx : _mochi_idx;})()] = ((2 * k) - 1);
    if ((((j + k) - 1) > right)) {
      left = ((j - k) + 1);
      right = ((j + k) - 1);
    }
    if ((length[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? length.length + _mochi_idx : _mochi_idx;})()] > max_length)) {
      max_length = length[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? length.length + _mochi_idx : _mochi_idx;})()];
      start = j;
    }
    j = (j + 1);
  }
  let s: string = (new_input_string).substring((start - Math.trunc(max_length / 2)), ((start + Math.trunc(max_length / 2)) + 1));
  let idx: number = 0;
  while ((idx < _len(s))) {
    let ch: string = (s).substring(idx, (idx + 1));
    if ((ch !== "|")) {
      output_string = (output_string + ch);
    }
    idx = (idx + 1);
  }
  return output_string;
}
function main() {
  console.log(_str(palindromic_string("abbbaba")));
  console.log(_str(palindromic_string("ababa")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

