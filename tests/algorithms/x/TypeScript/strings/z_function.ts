// Generated by Mochi v0.10.59 on 2025-08-07 08:56:54 GMT+7

function z_function(s: string): number[] {
  let z: number[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    z.push(0);
    i = (i + 1);
  }
  let l: number = 0;
  let r: number = 0;
  i = 1;
  while ((i < _len(s))) {
    if ((i <= r)) {
      let min_edge: number = ((r - i) + 1);
      let zi: number = z[(Math.trunc((i - l))) < 0 ? z.length + (Math.trunc((i - l))) : Math.trunc((i - l))];
      if ((zi < min_edge)) {
        min_edge = zi;
      }
      z[(i) < 0 ? z.length + (i) : i] = min_edge;
    }
    while (go_next(i, z, s)) {
      z[(i) < 0 ? z.length + (i) : i] = (z[(i) < 0 ? z.length + (i) : i] + 1);
    }
    if ((((i + z[(i) < 0 ? z.length + (i) : i]) - 1) > r)) {
      l = i;
      r = ((i + z[(i) < 0 ? z.length + (i) : i]) - 1);
    }
    i = (i + 1);
  }
  return z;
}
function go_next(i: number, z: number[], s: string): boolean {
  return (((i + z[(i) < 0 ? z.length + (i) : i]) < _len(s)) && (s[(Math.trunc(z[(i) < 0 ? z.length + (i) : i])) < 0 ? s.length + (Math.trunc(z[(i) < 0 ? z.length + (i) : i])) : Math.trunc(z[(i) < 0 ? z.length + (i) : i])] == s[(Math.trunc((i + z[(i) < 0 ? z.length + (i) : i]))) < 0 ? s.length + (Math.trunc((i + z[(i) < 0 ? z.length + (i) : i]))) : Math.trunc((i + z[(i) < 0 ? z.length + (i) : i]))]));
}
function find_pattern(pattern: string, input_str: string): number {
  let answer: number = 0;
  let z_res: number[] = z_function((pattern + input_str));
  let i: number = 0;
  while ((i < _len(z_res))) {
    if ((z_res[(i) < 0 ? z_res.length + (i) : i] >= _len(pattern))) {
      answer = (answer + 1);
    }
    i = (i + 1);
  }
  return answer;
}
function list_eq_int(a: number[], b: number[]): boolean {
  if ((_len(a) != _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    if ((a[(i) < 0 ? a.length + (i) : i] != b[(i) < 0 ? b.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function test_z_function() {
  let s1: string = "abracadabra";
  let expected1: number[] = [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1];
  let r1: number[] = z_function(s1);
  if (!list_eq_int(r1, expected1)) {
    _panic("z_function abracadabra failed");
  }
  let s2: string = "aaaa";
  let expected2: number[] = [0, 3, 2, 1];
  let r2: number[] = z_function(s2);
  if (!list_eq_int(r2, expected2)) {
    _panic("z_function aaaa failed");
  }
  let s3: string = "zxxzxxz";
  let expected3: number[] = [0, 0, 0, 4, 0, 0, 1];
  let r3: number[] = z_function(s3);
  if (!list_eq_int(r3, expected3)) {
    _panic("z_function zxxzxxz failed");
  }
}
function test_find_pattern() {
  if ((find_pattern("abr", "abracadabra") != 2)) {
    _panic("find_pattern abr failed");
  }
  if ((find_pattern("a", "aaaa") != 4)) {
    _panic("find_pattern aaaa failed");
  }
  if ((find_pattern("xz", "zxxzxxz") != 2)) {
    _panic("find_pattern xz failed");
  }
}
function main() {
  test_z_function();
  test_find_pattern();
  let r1: number[] = z_function("abracadabra");
  let r2: number[] = z_function("aaaa");
  let r3: number[] = z_function("zxxzxxz");
  console.log(_str(_str(r1)));
  console.log(_str(_str(r2)));
  console.log(_str(_str(r3)));
  console.log(_str(_str(find_pattern("abr", "abracadabra"))));
  console.log(_str(_str(find_pattern("a", "aaaa"))));
  console.log(_str(_str(find_pattern("xz", "zxxzxxz"))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

