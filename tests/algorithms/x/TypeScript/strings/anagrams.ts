// Generated by Mochi v0.10.70 on 2025-08-23 13:54:02 GMT+7

function split(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s.slice(i, (i + 1));
    if ((ch === sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function insertion_sort(arr: string[]): string[] {
  let a: string[] = arr;
  let i: number = 1;
  while ((i < _len(a))) {
    let key: string = a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
    let j: bigint = (i - 1);
    while (((j >= 0) && (a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] > key))) {
      a[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] = a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
      j = (j - 1);
    }
    a[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] = key;
    i = (i + 1);
  }
  return a;
}
function sort_chars(word: string): string {
  let chars: string[] = [];
  let i: number = 0;
  while ((i < _len(word))) {
    chars.push(word.slice(i, (i + 1)));
    i = (i + 1);
  }
  chars = insertion_sort(chars);
  let res: string = "";
  i = 0;
  while ((i < _len(chars))) {
    res = (res + chars[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? chars.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function unique_sorted(words: string[]): string[] {
  let seen: Record<string, boolean> = {};
  let res: string[] = [];
  for (const w of words) {
    if (((w !== "") && !(w in seen))) {
      res.push(w);
      seen[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
    }
  }
  res = insertion_sort(res);
  return res;
}
let word_by_signature: Record<string, string[]> = {};
function build_map(words: string[]) {
  for (const w of words) {
    let sig: string = sort_chars(w);
    let arr: string[] = [];
    if ((sig in word_by_signature)) {
      arr = word_by_signature[sig];
    }
    arr.push(w);
    word_by_signature[(()=>{const _mochi_idx = sig; return _mochi_idx < 0 ? word_by_signature.length + _mochi_idx : _mochi_idx;})()] = arr;
  }
}
function anagram(my_word: string): string[] {
  let sig: string = sort_chars(my_word);
  if ((sig in word_by_signature)) {
    return word_by_signature[sig];
  }
  return [];
}
function main() {
  let text: string = _read_file("words.txt");
  let lines: string[] = split(text, "\n");
  let words: string[] = unique_sorted(lines);
  build_map(words);
  for (const w of words) {
    let anas: string[] = anagram(w);
    if ((_len(anas) > 1)) {
      let line: string = (w + ":");
      let i: number = 0;
      while ((i < _len(anas))) {
        if ((i > 0)) {
          line = (line + ",");
        }
        line = (line + anas[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? anas.length + _mochi_idx : _mochi_idx;})()]);
        i = (i + 1);
      }
      console.log(_str(line));
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _read_file(path: string): string {
  const read = (p: string): string => {
    try {
      if (typeof Deno !== 'undefined') {
        return Deno.readTextFileSync(p);
      } else {
        const fs = require('fs');
        if (fs.existsSync(p)) return fs.readFileSync(p, 'utf8');
      }
    } catch (_) {}
    return '';
  };
  let text = read(path);
  if (text) return text;
  try {
    const dir = typeof Deno !== 'undefined' ? new URL('.', import.meta.url).pathname : __dirname + '/';
    text = read(dir + path);
    if (text) return text;
    const alt = dir.replace('tests/algorithms/x/TypeScript/', 'tests/github/TheAlgorithms/Mochi/') + path;
    text = read(alt);
    if (text) return text;
  } catch (_) {}
  return '';
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

