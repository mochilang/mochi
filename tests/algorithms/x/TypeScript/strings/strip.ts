// Generated by Mochi v0.10.59 on 2025-08-07 08:56:45 GMT+7

function contains(chars: string, ch: string): boolean {
  let i: number = 0;
  while ((i < _len(chars))) {
    if ((chars[(i) < 0 ? chars.length + (i) : i] == ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function substring(s: string, start: number, end: number): string {
  let res: string = "";
  let i: number = start;
  while ((i < end)) {
    res = (res + s[(i) < 0 ? s.length + (i) : i]);
    i = (i + 1);
  }
  return res;
}
function strip_chars(user_string: string, characters: string): string {
  let start: number = 0;
  let end: number = _len(user_string);
  while (((start < end) && contains(characters, user_string[(start) < 0 ? user_string.length + (start) : start]))) {
    start = (start + 1);
  }
  while (((end > start) && contains(characters, user_string[(Math.trunc((end - 1))) < 0 ? user_string.length + (Math.trunc((end - 1))) : Math.trunc((end - 1))]))) {
    end = (end - 1);
  }
  return (user_string).substring(start, end);
}
function strip(user_string: string): string {
  return strip_chars(user_string, " \t\n\r");
}
function test_strip() {
  if ((strip("   hello   ") != "hello")) {
    _panic("test1 failed");
  }
  if ((strip_chars("...world...", ".") != "world")) {
    _panic("test2 failed");
  }
  if ((strip_chars("123hello123", "123") != "hello")) {
    _panic("test3 failed");
  }
  if ((strip("") != "")) {
    _panic("test4 failed");
  }
}
function main() {
  test_strip();
  console.log(_str(strip("   hello   ")));
  console.log(_str(strip_chars("...world...", ".")));
  console.log(_str(strip_chars("123hello123", "123")));
  console.log(_str(strip("")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

