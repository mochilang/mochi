// Generated by Mochi v0.10.59 on 2025-08-07 08:56:35 GMT+7

function split_ws(s: string): string[] {
  let res: string[] = [];
  let word: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == " ")) {
      if ((word != "")) {
        res.push(word);
        word = "";
      }
    } else {
      word = (word + ch);
    }
    i = (i + 1);
  }
  if ((word != "")) {
    res.push(word);
  }
  return res;
}
function contains(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function unique(xs: string[]): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    let w: string = xs[(i) < 0 ? xs.length + (i) : i];
    if (!contains(res, w)) {
      res.push(w);
    }
    i = (i + 1);
  }
  return res;
}
function insertion_sort(arr: string[]): string[] {
  let a: string[] = arr;
  let i: number = 1;
  while ((i < _len(a))) {
    let key: string = a[(i) < 0 ? a.length + (i) : i];
    let j: number = (i - 1);
    while (((j >= 0) && (a[(j) < 0 ? a.length + (j) : j] > key))) {
      a[((j + 1)) < 0 ? a.length + ((j + 1)) : (j + 1)] = a[(j) < 0 ? a.length + (j) : j];
      j = (j - 1);
    }
    a[((j + 1)) < 0 ? a.length + ((j + 1)) : (j + 1)] = key;
    i = (i + 1);
  }
  return a;
}
function join_with_space(xs: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i > 0)) {
      s = (s + " ");
    }
    s = (s + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return s;
}
function remove_duplicates(sentence: string): string {
  let words: string[] = split_ws(sentence);
  let uniq: string[] = unique(words);
  let sorted_words: string[] = insertion_sort(uniq);
  return join_with_space(sorted_words);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(remove_duplicates("Python is great and Java is also great")));
  console.log(_str(remove_duplicates("Python   is      great and Java is also great")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

