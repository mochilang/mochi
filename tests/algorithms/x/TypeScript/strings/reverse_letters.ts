// Generated by Mochi v0.10.59 on 2025-08-07 09:46:26 GMT+7

function split(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[(i) < 0 ? s.length + (i) : i];
    if ((ch == sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function join_with_space(xs: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    s = (s + xs[(i) < 0 ? xs.length + (i) : i]);
    if (((i + 1) < _len(xs))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  return s;
}
function reverse_str(s: string): string {
  let res: string = "";
  let i: number = (_len(s) - 1);
  while ((i >= 0)) {
    res = (res + s[(i) < 0 ? s.length + (i) : i]);
    i = (i - 1);
  }
  return res;
}
function reverse_letters(sentence: string, length: number): string {
  let words: string[] = sentence.split(" ");
  let result: string[] = [];
  let i: number = 0;
  while ((i < _len(words))) {
    let word: string = words[(i) < 0 ? words.length + (i) : i];
    if ((_len(word) > length)) {
      result.push(reverse_str(word));
    } else {
      result.push(word);
    }
    i = (i + 1);
  }
  return join_with_space(result);
}
function test_reverse_letters() {
  if ((reverse_letters("Hey wollef sroirraw", 3) != "Hey fellow warriors")) {
    _panic("test1 failed");
  }
  if ((reverse_letters("nohtyP is nohtyP", 2) != "Python is Python")) {
    _panic("test2 failed");
  }
  if ((reverse_letters("1 12 123 1234 54321 654321", 0) != "1 21 321 4321 12345 123456")) {
    _panic("test3 failed");
  }
  if ((reverse_letters("racecar", 0) != "racecar")) {
    _panic("test4 failed");
  }
}
function main() {
  test_reverse_letters();
  console.log(_str(reverse_letters("Hey wollef sroirraw", 3)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

