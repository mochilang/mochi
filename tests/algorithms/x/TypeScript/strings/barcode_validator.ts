// Generated by Mochi v0.10.59 on 2025-08-07 08:55:59 GMT+7

function has_alpha(s: string): boolean {
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(i) < 0 ? s.length + (i) : i];
    if ((((c >= "a") && (c <= "z")) || ((c >= "A") && (c <= "Z")))) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function parse_decimal(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(i) < 0 ? s.length + (i) : i];
    if (((c < "0") || (c > "9"))) {
      _panic("Non-digit character encountered");
    }
    value = ((value * 10) + Math.trunc(c));
    i = (i + 1);
  }
  return value;
}
function get_barcode(barcode: string): number {
  if (has_alpha(barcode)) {
    _panic((("Barcode '" + barcode) + "' has alphabetic characters."));
  }
  if (((_len(barcode) > 0) && (barcode[(Math.trunc(0)) < 0 ? barcode.length + (Math.trunc(0)) : Math.trunc(0)] == "-"))) {
    _panic("The entered barcode has a negative value. Try again.");
  }
  return parse_decimal(barcode);
}
function get_check_digit(barcode: number): number {
  let num: number = Math.trunc(barcode / 10);
  let s: number = 0;
  let position: number = 0;
  while ((num != 0)) {
    let mult: number = (((position % 2) == 0) ? 3 : 1);
    s = (s + (mult * (num % 10)));
    num = Math.trunc(num / 10);
    position = (position + 1);
  }
  return ((10 - (s % 10)) % 10);
}
function is_valid(barcode: number): boolean {
  return ((_len(_str(barcode)) == 13) && (get_check_digit(barcode) == (barcode % 10)));
}
let res: number[] = [];
let x: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(get_check_digit(8718452538119))));
  console.log(_str(_str(get_check_digit(87184523))));
  console.log(_str(_str(get_check_digit(87193425381086))));
  while ((x < 100)) {
    res.push(get_check_digit(x));
    x = (x + 10);
  }
  console.log(_str("[" + (res).join(' ') + "]"));
  console.log(_str(_str(is_valid(8718452538119))));
  console.log(_str(_str(is_valid(87184525))));
  console.log(_str(_str(is_valid(87193425381089))));
  console.log(_str(_str(is_valid(0))));
  console.log(_str(_str(get_barcode("8718452538119"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

