// Generated by Mochi v0.10.59 on 2025-08-07 08:56:00 GMT+7

function pow2(n: number): number {
  let res: number = 1;
  let i: number = 0;
  while ((i < n)) {
    res = (res * 2);
    i = (i + 1);
  }
  return res;
}
function bit_and(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  let res: number = 0;
  let bit: number = 1;
  while (((x > 0) || (y > 0))) {
    if ((((x % 2) == 1) && ((y % 2) == 1))) {
      res = (res + bit);
    }
    x = Math.trunc(Math.trunc(x / 2));
    y = Math.trunc(Math.trunc(y / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_or(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  let res: number = 0;
  let bit: number = 1;
  while (((x > 0) || (y > 0))) {
    if ((((x % 2) == 1) || ((y % 2) == 1))) {
      res = (res + bit);
    }
    x = Math.trunc(Math.trunc(x / 2));
    y = Math.trunc(Math.trunc(y / 2));
    bit = (bit * 2);
  }
  return res;
}
function char_to_index(ch: string): number {
  let letters: string = "abcdefghijklmnopqrstuvwxyz";
  let i: number = 0;
  while ((i < _len(letters))) {
    if ((letters.slice(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return 26;
}
function bitap_string_match(text: string, pattern: string): number {
  if ((pattern == "")) {
    return 0;
  }
  let m: number = _len(pattern);
  if ((m > _len(text))) {
    return -1;
  }
  let limit: number = pow2((m + 1));
  let all_ones: number = (limit - 1);
  let pattern_mask: number[] = [];
  let i: number = 0;
  while ((i < 27)) {
    pattern_mask.push(all_ones);
    i = (i + 1);
  }
  i = 0;
  while ((i < m)) {
    let ch: string = pattern.slice(i, (i + 1));
    let idx: number = char_to_index(ch);
    pattern_mask[(idx) < 0 ? pattern_mask.length + (idx) : idx] = bit_and(pattern_mask[(idx) < 0 ? pattern_mask.length + (idx) : idx], (all_ones - pow2(i)));
    i = (i + 1);
  }
  let state: number = (all_ones - 1);
  i = 0;
  while ((i < _len(text))) {
    let ch: string = text.slice(i, (i + 1));
    let idx: number = char_to_index(ch);
    state = bit_or(state, pattern_mask[(idx) < 0 ? pattern_mask.length + (idx) : idx]);
    state = ((state * 2) % limit);
    if ((bit_and(state, pow2(m)) == 0)) {
      return ((i - m) + 1);
    }
    i = (i + 1);
  }
  return -1;
}
function main() {
  console.log(_str(_str(bitap_string_match("abdabababc", "ababc"))));
  console.log(_str(_str(bitap_string_match("abdabababc", ""))));
  console.log(_str(_str(bitap_string_match("abdabababc", "c"))));
  console.log(_str(_str(bitap_string_match("abdabababc", "fofosdfo"))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

