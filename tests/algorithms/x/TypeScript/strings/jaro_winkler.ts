// Generated by Mochi v0.10.59 on 2025-08-07 09:46:04 GMT+7

function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  } else {
    return b;
  }
}
function max_int(a: number, b: number): number {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}
function repeat_bool(n: number, value: boolean): boolean[] {
  let res: boolean[] = [];
  let i: number = 0;
  while ((i < n)) {
    res.push(value);
    i = (i + 1);
  }
  return res;
}
function set_bool(xs: boolean[], idx: number, value: boolean): boolean[] {
  let res: boolean[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i == idx)) {
      res.push(value);
    } else {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function jaro_winkler(s1: string, s2: string): number {
  let len1: number = _len(s1);
  let len2: number = _len(s2);
  let limit: number = Math.trunc(min_int(len1, len2) / 2);
  let match1: boolean[] = repeat_bool(len1, false);
  let match2: boolean[] = repeat_bool(len2, false);
  let matches: number = 0;
  let i: number = 0;
  while ((i < len1)) {
    let start: number = max_int(0, (i - limit));
    let end: number = min_int(((i + limit) + 1), len2);
    let j: number = start;
    while ((j < end)) {
      if ((!match2[(j) < 0 ? match2.length + (j) : j] && ((s1).substring(i, (i + 1)) == (s2).substring(j, (j + 1))))) {
        match1 = set_bool(match1, i, true);
        match2 = set_bool(match2, j, true);
        matches = (matches + 1);
        break
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  if ((matches == 0)) {
    return 0.0;
  }
  let transpositions: number = 0;
  let k: number = 0;
  i = 0;
  while ((i < len1)) {
    if (match1[(i) < 0 ? match1.length + (i) : i]) {
      while (!match2[(k) < 0 ? match2.length + (k) : k]) {
        k = (k + 1);
      }
      if (((s1).substring(i, (i + 1)) != (s2).substring(k, (k + 1)))) {
        transpositions = (transpositions + 1);
      }
      k = (k + 1);
    }
    i = (i + 1);
  }
  let m: number = matches;
  let jaro: number = ((((m / len1) + (m / len2)) + ((m - (transpositions / 2.0)) / m)) / 3.0);
  let prefix_len: number = 0;
  i = 0;
  while ((((i < 4) && (i < len1)) && (i < len2))) {
    if (((s1).substring(i, (i + 1)) == (s2).substring(i, (i + 1)))) {
      prefix_len = (prefix_len + 1);
    } else {
      break
    }
    i = (i + 1);
  }
  return (jaro + ((0.1 * prefix_len) * (1.0 - jaro)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(jaro_winkler("hello", "world"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

