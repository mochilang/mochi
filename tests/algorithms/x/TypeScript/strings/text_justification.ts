// Generated by Mochi v0.10.59 on 2025-08-07 09:47:21 GMT+7

function repeat_str(s: string, count: number): string {
  let res: string = "";
  let i: number = 0;
  while ((i < count)) {
    res = (res + s);
    i = (i + 1);
  }
  return res;
}
function split_words(s: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s.slice(i, (i + 1));
    if ((ch == " ")) {
      if ((current != "")) {
        res.push(current);
        current = "";
      }
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  if ((current != "")) {
    res.push(current);
  }
  return res;
}
function justify_line(line: string[], width: number, max_width: number): string {
  let overall_spaces_count: number = (max_width - width);
  let words_count: number = _len(line);
  if ((words_count == 1)) {
    return (line[(Math.trunc(0)) < 0 ? line.length + (Math.trunc(0)) : Math.trunc(0)] + repeat_str(" ", overall_spaces_count));
  }
  let spaces_to_insert_between_words: number = (words_count - 1);
  let num_spaces_between_words_list: number[] = [];
  let base: number = Math.trunc(overall_spaces_count / spaces_to_insert_between_words);
  let extra: number = (overall_spaces_count % spaces_to_insert_between_words);
  let i: number = 0;
  while ((i < spaces_to_insert_between_words)) {
    let spaces: number = base;
    if ((i < extra)) {
      spaces = (spaces + 1);
    }
    num_spaces_between_words_list.push(spaces);
    i = (i + 1);
  }
  let aligned: string = "";
  i = 0;
  while ((i < spaces_to_insert_between_words)) {
    aligned = ((aligned + line[(i) < 0 ? line.length + (i) : i]) + repeat_str(" ", num_spaces_between_words_list[(i) < 0 ? num_spaces_between_words_list.length + (i) : i]));
    i = (i + 1);
  }
  aligned = (aligned + line[(spaces_to_insert_between_words) < 0 ? line.length + (spaces_to_insert_between_words) : spaces_to_insert_between_words]);
  return aligned;
}
function text_justification(word: string, max_width: number): string[] {
  let words: string[] = split_words(word);
  let answer: string[] = [];
  let line: string[] = [];
  let width: number = 0;
  let idx: number = 0;
  while ((idx < _len(words))) {
    let w: string = words[(idx) < 0 ? words.length + (idx) : idx];
    if ((((width + _len(w)) + _len(line)) <= max_width)) {
      line.push(w);
      width = (width + _len(w));
    } else {
      answer.push(justify_line(line, width, max_width));
      line = [w];
      width = _len(w);
    }
    idx = (idx + 1);
  }
  let remaining_spaces: number = ((max_width - width) - _len(line));
  let last_line: string = "";
  let j: number = 0;
  while ((j < _len(line))) {
    if ((j > 0)) {
      last_line = (last_line + " ");
    }
    last_line = (last_line + line[(j) < 0 ? line.length + (j) : j]);
    j = (j + 1);
  }
  last_line = (last_line + repeat_str(" ", (remaining_spaces + 1)));
  answer.push(last_line);
  return answer;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(text_justification("This is an example of text justification.", 16))));
  console.log(_str(_str(text_justification("Two roads diverged in a yellow wood", 16))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

