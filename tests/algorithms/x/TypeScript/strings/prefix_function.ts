// Generated by Mochi v0.10.59 on 2025-08-07 08:56:33 GMT+7

function prefix_function(s: string): number[] {
  let pi: number[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    pi.push(0);
    i = (i + 1);
  }
  i = 1;
  while ((i < _len(s))) {
    let j: number = pi[(Math.trunc((i - 1))) < 0 ? pi.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))];
    while (((j > 0) && (s[(i) < 0 ? s.length + (i) : i] != s[(j) < 0 ? s.length + (j) : j]))) {
      j = pi[(Math.trunc((j - 1))) < 0 ? pi.length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
    }
    if ((s[(i) < 0 ? s.length + (i) : i] == s[(j) < 0 ? s.length + (j) : j])) {
      j = (j + 1);
    }
    pi[(i) < 0 ? pi.length + (i) : i] = j;
    i = (i + 1);
  }
  return pi;
}
function longest_prefix(s: string): number {
  let pi: number[] = prefix_function(s);
  let max_val: number = 0;
  let i: number = 0;
  while ((i < _len(pi))) {
    if ((pi[(i) < 0 ? pi.length + (i) : i] > max_val)) {
      max_val = pi[(i) < 0 ? pi.length + (i) : i];
    }
    i = (i + 1);
  }
  return max_val;
}
function list_eq_int(a: number[], b: number[]): boolean {
  if ((_len(a) != _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    if ((a[(i) < 0 ? a.length + (i) : i] != b[(i) < 0 ? b.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function test_prefix_function() {
  let s1: string = "aabcdaabc";
  let expected1: number[] = [0, 1, 0, 0, 0, 1, 2, 3, 4];
  let r1: number[] = prefix_function(s1);
  if (!list_eq_int(r1, expected1)) {
    _panic("prefix_function aabcdaabc failed");
  }
  let s2: string = "asdasdad";
  let expected2: number[] = [0, 0, 0, 1, 2, 3, 4, 0];
  let r2: number[] = prefix_function(s2);
  if (!list_eq_int(r2, expected2)) {
    _panic("prefix_function asdasdad failed");
  }
}
function test_longest_prefix() {
  if ((longest_prefix("aabcdaabc") != 4)) {
    _panic("longest_prefix example1 failed");
  }
  if ((longest_prefix("asdasdad") != 4)) {
    _panic("longest_prefix example2 failed");
  }
  if ((longest_prefix("abcab") != 2)) {
    _panic("longest_prefix example3 failed");
  }
}
function main() {
  test_prefix_function();
  test_longest_prefix();
  let r1: number[] = prefix_function("aabcdaabc");
  let r2: number[] = prefix_function("asdasdad");
  console.log(_str(_str(r1)));
  console.log(_str(_str(r2)));
  console.log(_str(_str(longest_prefix("aabcdaabc"))));
  console.log(_str(_str(longest_prefix("abcab"))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

