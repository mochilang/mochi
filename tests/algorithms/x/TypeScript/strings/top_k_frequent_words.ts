// Generated by Mochi v0.10.59 on 2025-08-07 08:56:48 GMT+7

export interface WordCount { word: string; count: number }
let freq_map: Record<string, number> = {};
function heapify(arr: WordCount[], index: number, heap_size: number) {
  let largest: number = index;
  let left: number = ((2 * index) + 1);
  let right: number = ((2 * index) + 2);
  if ((left < heap_size)) {
    let left_item: WordCount = arr[(left) < 0 ? arr.length + (left) : left];
    let largest_item: WordCount = arr[(largest) < 0 ? arr.length + (largest) : largest];
    if ((left_item.count > largest_item.count)) {
      largest = left;
    }
  }
  if ((right < heap_size)) {
    let right_item: WordCount = arr[(right) < 0 ? arr.length + (right) : right];
    let largest_item2: WordCount = arr[(largest) < 0 ? arr.length + (largest) : largest];
    if ((right_item.count > largest_item2.count)) {
      largest = right;
    }
  }
  if ((largest != index)) {
    let temp: WordCount = arr[(largest) < 0 ? arr.length + (largest) : largest];
    arr[(largest) < 0 ? arr.length + (largest) : largest] = arr[(index) < 0 ? arr.length + (index) : index];
    arr[(index) < 0 ? arr.length + (index) : index] = temp;
    heapify(arr, largest, heap_size);
  }
}
function build_max_heap(arr: WordCount[]) {
  let i: number = (Math.trunc(_len(arr) / 2) - 1);
  while ((i >= 0)) {
    heapify(arr, i, _len(arr));
    i = (i - 1);
  }
}
function top_k_frequent_words(words: string[], k_value: number): string[] {
  freq_map = {};
  let i: number = 0;
  while ((i < _len(words))) {
    let w: string = words[(i) < 0 ? words.length + (i) : i];
    if ((w in freq_map)) {
      freq_map[(w) < 0 ? freq_map.length + (w) : w] = (freq_map[(w) < 0 ? freq_map.length + (w) : w] + 1);
    } else {
      freq_map[(w) < 0 ? freq_map.length + (w) : w] = 1;
    }
    i = (i + 1);
  }
  let heap: WordCount[] = [];
  for (const w in freq_map) {
    heap.push({"word": w, "count": freq_map[(w) < 0 ? freq_map.length + (w) : w]});
  }
  build_max_heap(heap);
  let result: string[] = [];
  let heap_size: number = _len(heap);
  let limit: number = k_value;
  if ((limit > heap_size)) {
    limit = heap_size;
  }
  let j: number = 0;
  while ((j < limit)) {
    let item: WordCount = heap[(Math.trunc(0)) < 0 ? heap.length + (Math.trunc(0)) : Math.trunc(0)];
    result.push(item.word);
    heap[(0) < 0 ? heap.length + (0) : 0] = heap[(Math.trunc((heap_size - 1))) < 0 ? heap.length + (Math.trunc((heap_size - 1))) : Math.trunc((heap_size - 1))];
    heap[((heap_size - 1)) < 0 ? heap.length + ((heap_size - 1)) : (heap_size - 1)] = item;
    heap_size = (heap_size - 1);
    heapify(heap, 0, heap_size);
    j = (j + 1);
  }
  return result;
}
function main() {
  let sample: string[] = ["a", "b", "c", "a", "c", "c"];
  console.log(_str("[" + (top_k_frequent_words(sample, 3)).join(' ') + "]"));
  console.log(_str("[" + (top_k_frequent_words(sample, 2)).join(' ') + "]"));
  console.log(_str("[" + (top_k_frequent_words(sample, 1)).join(' ') + "]"));
  console.log(_str("[" + (top_k_frequent_words(sample, 0)).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

