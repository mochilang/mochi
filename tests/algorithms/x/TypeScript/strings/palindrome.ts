// Generated by Mochi v0.10.70 on 2025-08-23 13:54:54 GMT+7

export interface Case { text: string; expected: boolean }
function reverse(s: string): string {
  let res: string = "";
  let i: number = (_len(s) - 1);
  while ((i >= 0)) {
    res = (res + s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  return res;
}
function is_palindrome(s: string): boolean {
  let start_i: number = 0;
  let end_i: number = (_len(s) - 1);
  while ((start_i < end_i)) {
    if ((s[(()=>{const _mochi_idx = start_i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()] === s[(()=>{const _mochi_idx = end_i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()])) {
      start_i = (start_i + 1);
      end_i = (end_i - 1);
    } else {
      return false;
    }
  }
  return true;
}
function is_palindrome_traversal(s: string): boolean {
  let end: number = Math.trunc(_len(s) / 2);
  let n: number = _len(s);
  let i: number = 0;
  while ((i < end)) {
    if ((s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()] !== s[(()=>{const _mochi_idx = Math.trunc(((n - i) - 1)); return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function is_palindrome_recursive(s: string): boolean {
  if ((_len(s) <= 1)) {
    return true;
  }
  if ((s[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()] === s[(()=>{const _mochi_idx = Math.trunc((_len(s) - 1)); return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()])) {
    return is_palindrome_recursive(s.slice(1, (_len(s) - 1)));
  }
  return false;
}
function is_palindrome_slice(s: string): boolean {
  return (s === reverse(s));
}
let test_data: Case[] = [{text: "MALAYALAM", expected: true}, {text: "String", expected: false}, {text: "rotor", expected: true}, {text: "level", expected: true}, {text: "A", expected: true}, {text: "BB", expected: true}, {text: "ABC", expected: false}, {text: "amanaplanacanalpanama", expected: true}];
function main() {
  for (const t of test_data) {
    let s: string = t.text;
    let expected: boolean = t.expected;
    let r1: boolean = is_palindrome(s);
    let r2: boolean = is_palindrome_traversal(s);
    let r3: boolean = is_palindrome_recursive(s);
    let r4: boolean = is_palindrome_slice(s);
    if (((((r1 !== expected) || (r2 !== expected)) || (r3 !== expected)) || (r4 !== expected))) {
      _panic("algorithm mismatch");
    }
    console.log(_str(((s + " ") + _str(expected))));
  }
  console.log(_str("a man a plan a canal panama"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

