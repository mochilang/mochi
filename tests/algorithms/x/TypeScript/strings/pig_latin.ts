// Generated by Mochi v0.10.59 on 2025-08-07 09:46:20 GMT+7

let VOWELS: string = "aeiou";
function strip(s: string): string {
  let start: number = 0;
  let end: number = _len(s);
  while (((start < end) && ((s).substring(start, (start + 1)) == " "))) {
    start = (start + 1);
  }
  while (((end > start) && ((s).substring((end - 1), end) == " "))) {
    end = (end - 1);
  }
  return (s).substring(start, end);
}
function is_vowel(c: string): boolean {
  let i: number = 0;
  while ((i < _len(VOWELS))) {
    if ((c == (VOWELS).substring(i, (i + 1)))) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function pig_latin(word: string): string {
  let trimmed: string = strip(word);
  if ((_len(trimmed) == 0)) {
    return "";
  }
  let w: string = trimmed.toLowerCase();
  let first = (w).substring(0, 1);
  if (is_vowel(first)) {
    return (w + "way");
  }
  let i: number = 0;
  while ((i < _len(w))) {
    let ch: string = (w).substring(i, (i + 1));
    if (is_vowel(ch)) {
      break
    }
    i = (i + 1);
  }
  return (((w).substring(i, _len(w)) + (w).substring(0, i)) + "ay");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("pig_latin('friends') = " + pig_latin("friends"))));
  console.log(_str(("pig_latin('smile') = " + pig_latin("smile"))));
  console.log(_str(("pig_latin('eat') = " + pig_latin("eat"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

