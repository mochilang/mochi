// Generated by Mochi v0.10.70 on 2025-08-23 13:56:24 GMT+7

function is_pangram(input_str: string): boolean {
  let letters: string[] = [];
  let i: number = 0;
  while ((i < _len(input_str))) {
    let c: string = input_str[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? input_str.length + _mochi_idx : _mochi_idx;})()].toLowerCase();
    let is_new: boolean = !((Array.isArray(letters) || (typeof letters === "string")) ? letters.includes(c) : (c in letters));
    if (((((c !== " ") && ("a" <= c)) && (c <= "z")) && is_new)) {
      letters.push(c);
    }
    i = (i + 1);
  }
  return (_len(letters) === 26);
}
function is_pangram_faster(input_str: string): boolean {
  let alphabet: string = "abcdefghijklmnopqrstuvwxyz";
  let flag: boolean[] = [];
  let i: number = 0;
  while ((i < 26)) {
    flag.push(false);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < _len(input_str))) {
    let c: string = input_str[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? input_str.length + _mochi_idx : _mochi_idx;})()].toLowerCase();
    let k: number = 0;
    while ((k < 26)) {
      if ((alphabet[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? alphabet.length + _mochi_idx : _mochi_idx;})()] === c)) {
        flag[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = true;
        break
      }
      k = (k + 1);
    }
    j = (j + 1);
  }
  let t: number = 0;
  while ((t < 26)) {
    if (!flag[(()=>{const _mochi_idx = t; return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()]) {
      return false;
    }
    t = (t + 1);
  }
  return true;
}
function is_pangram_fastest(input_str: string): boolean {
  let s: string = input_str.toLowerCase();
  let alphabet: string = "abcdefghijklmnopqrstuvwxyz";
  let i: number = 0;
  while ((i < _len(alphabet))) {
    let letter: string = alphabet[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? alphabet.length + _mochi_idx : _mochi_idx;})()];
    if (!((Array.isArray(s) || (typeof s === "string")) ? s.includes(letter) : (letter in s))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
let s1: string = "The quick brown fox jumps over the lazy dog";
let s2: string = "My name is Unknown";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(is_pangram(s1)));
  console.log(_str(is_pangram(s2)));
  console.log(_str(is_pangram_faster(s1)));
  console.log(_str(is_pangram_faster(s2)));
  console.log(_str(is_pangram_fastest(s1)));
  console.log(_str(is_pangram_fastest(s2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

