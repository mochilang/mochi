// Generated by Mochi v0.10.59 on 2025-08-07 08:56:20 GMT+7

let MAX_LOCAL_PART_OCTETS: number = 64;
let MAX_DOMAIN_OCTETS: number = 255;
let ASCII_LETTERS: string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
let DIGITS: string = "0123456789";
let LOCAL_EXTRA: string = ".(!#$%&'*+-/=?^_`{|}~)";
let DOMAIN_EXTRA: string = ".-";
function count_char(s: string, target: string): number {
  let cnt: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == target)) {
      cnt = (cnt + 1);
    }
    i = (i + 1);
  }
  return cnt;
}
function char_in(c: string, allowed: string): boolean {
  let i: number = 0;
  while ((i < _len(allowed))) {
    if (((allowed).substring(i, (i + 1)) == c)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function starts_with_char(s: string, c: string): boolean {
  return ((_len(s) > 0) && ((s).substring(0, 1) == c));
}
function ends_with_char(s: string, c: string): boolean {
  return ((_len(s) > 0) && ((s).substring((_len(s) - 1), _len(s)) == c));
}
function contains_double_dot(s: string): boolean {
  if ((_len(s) < 2)) {
    return false;
  }
  let i: number = 0;
  while ((i < (_len(s) - 1))) {
    if (((s).substring(i, (i + 2)) == "..")) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function is_valid_email_address(email: string): boolean {
  if ((count_char(email, "@") != 1)) {
    return false;
  }
  let at_idx: number = 0;
  let i: number = 0;
  while ((i < _len(email))) {
    if (((email).substring(i, (i + 1)) == "@")) {
      at_idx = i;
      break
    }
    i = (i + 1);
  }
  let local_part: string = (email).substring(0, at_idx);
  let domain: string = (email).substring((at_idx + 1), _len(email));
  if (((_len(local_part) > MAX_LOCAL_PART_OCTETS) || (_len(domain) > MAX_DOMAIN_OCTETS))) {
    return false;
  }
  i = 0;
  while ((i < _len(local_part))) {
    let ch: string = (local_part).substring(i, (i + 1));
    if (!char_in(ch, ((ASCII_LETTERS + DIGITS) + LOCAL_EXTRA))) {
      return false;
    }
    i = (i + 1);
  }
  if (((starts_with_char(local_part, ".") || ends_with_char(local_part, ".")) || contains_double_dot(local_part))) {
    return false;
  }
  i = 0;
  while ((i < _len(domain))) {
    let ch: string = (domain).substring(i, (i + 1));
    if (!char_in(ch, ((ASCII_LETTERS + DIGITS) + DOMAIN_EXTRA))) {
      return false;
    }
    i = (i + 1);
  }
  if ((starts_with_char(domain, "-") || ends_with_char(domain, "."))) {
    return false;
  }
  if (((starts_with_char(domain, ".") || ends_with_char(domain, ".")) || contains_double_dot(domain))) {
    return false;
  }
  return true;
}
let email_tests: string[] = ["simple@example.com", "very.common@example.com", "disposable.style.email.with+symbol@example.com", "other-email-with-hyphen@and.subdomains.example.com", "fully-qualified-domain@example.com", "user.name+tag+sorting@example.com", "x@example.com", "example-indeed@strange-example.com", "test/test@test.com", "123456789012345678901234567890123456789012345678901234567890123@example.com", "admin@mailserver1", "example@s.example", "Abc.example.com", "A@b@c@example.com", "abc@example..com", "a(c)d,e:f;g<h>i[j\\k]l@example.com", "12345678901234567890123456789012345678901234567890123456789012345@example.com", "i.like.underscores@but_its_not_allowed_in_this_part", ""];
let idx: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((idx < _len(email_tests))) {
    let email: string = email_tests[(idx) < 0 ? email_tests.length + (idx) : idx];
    console.log(_str(_str(is_valid_email_address(email))));
    idx = (idx + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

