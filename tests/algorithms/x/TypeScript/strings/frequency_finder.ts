// Generated by Mochi v0.10.59 on 2025-08-07 09:45:49 GMT+7

let ETAOIN: string = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
let LETTERS: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
function etaoin_index(letter: string): number {
  let i: number = 0;
  while ((i < _len(ETAOIN))) {
    if (((ETAOIN).substring(i, (i + 1)) == letter)) {
      return i;
    }
    i = (i + 1);
  }
  return _len(ETAOIN);
}
function get_letter_count(message: string): Record<string, number> {
  let letter_count: Record<string, number> = {};
  let i: number = 0;
  while ((i < _len(LETTERS))) {
    let c: string = (LETTERS).substring(i, (i + 1));
    letter_count[(c) < 0 ? letter_count.length + (c) : c] = 0;
    i = (i + 1);
  }
  let msg: string = message.toUpperCase();
  let j: number = 0;
  while ((j < _len(msg))) {
    let ch: string = (msg).substring(j, (j + 1));
    if (LETTERS.includes(ch)) {
      letter_count[(ch) < 0 ? letter_count.length + (ch) : ch] = (letter_count[(ch) < 0 ? letter_count.length + (ch) : ch] + 1);
    }
    j = (j + 1);
  }
  return letter_count;
}
function get_frequency_order(message: string): string {
  let letter_to_freq: Record<string, number> = get_letter_count(message);
  let max_freq: number = 0;
  let i: number = 0;
  while ((i < _len(LETTERS))) {
    let letter: string = (LETTERS).substring(i, (i + 1));
    let f: number = letter_to_freq[(letter) < 0 ? letter_to_freq.length + (letter) : letter];
    if ((f > max_freq)) {
      max_freq = f;
    }
    i = (i + 1);
  }
  let result: string = "";
  let freq: number = max_freq;
  while ((freq >= 0)) {
    let group: string[] = [];
    let j: number = 0;
    while ((j < _len(LETTERS))) {
      let letter: string = (LETTERS).substring(j, (j + 1));
      if ((letter_to_freq[(letter) < 0 ? letter_to_freq.length + (letter) : letter] == freq)) {
        group.push(letter);
      }
      j = (j + 1);
    }
    let g_len: number = _len(group);
    let a: number = 0;
    while ((a < g_len)) {
      let b: number = 0;
      while ((b < ((g_len - a) - 1))) {
        let g1: string = group[(b) < 0 ? group.length + (b) : b];
        let g2: string = group[(Math.trunc((b + 1))) < 0 ? group.length + (Math.trunc((b + 1))) : Math.trunc((b + 1))];
        let idx1: number = etaoin_index(g1);
        let idx2: number = etaoin_index(g2);
        if ((idx1 < idx2)) {
          let tmp: string = group[(b) < 0 ? group.length + (b) : b];
          group[(b) < 0 ? group.length + (b) : b] = group[(Math.trunc((b + 1))) < 0 ? group.length + (Math.trunc((b + 1))) : Math.trunc((b + 1))];
          group[((b + 1)) < 0 ? group.length + ((b + 1)) : (b + 1)] = tmp;
        }
        b = (b + 1);
      }
      a = (a + 1);
    }
    let g: number = 0;
    while ((g < _len(group))) {
      result = (result + group[(g) < 0 ? group.length + (g) : g]);
      g = (g + 1);
    }
    freq = (freq - 1);
  }
  return result;
}
function english_freq_match_score(message: string): number {
  let freq_order: string = get_frequency_order(message);
  let top: string = (freq_order).substring(0, 6);
  let bottom: string = (freq_order).substring((_len(freq_order) - 6), _len(freq_order));
  let score: number = 0;
  let i: number = 0;
  while ((i < 6)) {
    let c: string = (ETAOIN).substring(i, (i + 1));
    if (top.includes(c)) {
      score = (score + 1);
    }
    i = (i + 1);
  }
  let j: number = (_len(ETAOIN) - 6);
  while ((j < _len(ETAOIN))) {
    let c: string = (ETAOIN).substring(j, (j + 1));
    if (bottom.includes(c)) {
      score = (score + 1);
    }
    j = (j + 1);
  }
  return score;
}
function main() {
  console.log(_str(get_frequency_order("Hello World")));
  console.log(_str(english_freq_match_score("Hello World")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

