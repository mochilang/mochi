// Generated by Mochi v0.10.59 on 2025-08-07 09:46:08 GMT+7

function range_list(n: number): number[] {
  let lst: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    lst.push(i);
    i = (i + 1);
  }
  return lst;
}
function min3(a: number, b: number, c: number): number {
  let m: number = a;
  if ((b < m)) {
    m = b;
  }
  if ((c < m)) {
    m = c;
  }
  return m;
}
function levenshtein_distance(first_word: string, second_word: string): number {
  if ((_len(first_word) < _len(second_word))) {
    return levenshtein_distance(second_word, first_word);
  }
  if ((_len(second_word) == 0)) {
    return _len(first_word);
  }
  let previous_row: number[] = range_list((_len(second_word) + 1));
  let i: number = 0;
  while ((i < _len(first_word))) {
    let c1: string = first_word[(i) < 0 ? first_word.length + (i) : i];
    let current_row: number[] = [];
    current_row.push((i + 1));
    let j: number = 0;
    while ((j < _len(second_word))) {
      let c2: string = second_word[(j) < 0 ? second_word.length + (j) : j];
      let insertions: number = (previous_row[(Math.trunc((j + 1))) < 0 ? previous_row.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))] + 1);
      let deletions: number = (current_row[(j) < 0 ? current_row.length + (j) : j] + 1);
      let substitutions: number = (previous_row[(j) < 0 ? previous_row.length + (j) : j] + ((c1 == c2) ? 0 : 1));
      let min_val: number = min3(insertions, deletions, substitutions);
      current_row.push(min_val);
      j = (j + 1);
    }
    previous_row = current_row;
    i = (i + 1);
  }
  return previous_row[(Math.trunc((_len(previous_row) - 1))) < 0 ? previous_row.length + (Math.trunc((_len(previous_row) - 1))) : Math.trunc((_len(previous_row) - 1))];
}
function levenshtein_distance_optimized(first_word: string, second_word: string): number {
  if ((_len(first_word) < _len(second_word))) {
    return levenshtein_distance_optimized(second_word, first_word);
  }
  if ((_len(second_word) == 0)) {
    return _len(first_word);
  }
  let previous_row: number[] = range_list((_len(second_word) + 1));
  let i: number = 0;
  while ((i < _len(first_word))) {
    let c1: string = first_word[(i) < 0 ? first_word.length + (i) : i];
    let current_row: number[] = [];
    current_row.push((i + 1));
    let k: number = 0;
    while ((k < _len(second_word))) {
      current_row.push(0);
      k = (k + 1);
    }
    let j: number = 0;
    while ((j < _len(second_word))) {
      let c2: string = second_word[(j) < 0 ? second_word.length + (j) : j];
      let insertions: number = (previous_row[(Math.trunc((j + 1))) < 0 ? previous_row.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))] + 1);
      let deletions: number = (current_row[(j) < 0 ? current_row.length + (j) : j] + 1);
      let substitutions: number = (previous_row[(j) < 0 ? previous_row.length + (j) : j] + ((c1 == c2) ? 0 : 1));
      let min_val: number = min3(insertions, deletions, substitutions);
      current_row[((j + 1)) < 0 ? current_row.length + ((j + 1)) : (j + 1)] = min_val;
      j = (j + 1);
    }
    previous_row = current_row;
    i = (i + 1);
  }
  return previous_row[(Math.trunc((_len(previous_row) - 1))) < 0 ? previous_row.length + (Math.trunc((_len(previous_row) - 1))) : Math.trunc((_len(previous_row) - 1))];
}
function main() {
  let a: string = "kitten";
  let b: string = "sitting";
  console.log(_str(_str(levenshtein_distance(a, b))));
  console.log(_str(_str(levenshtein_distance_optimized(a, b))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

