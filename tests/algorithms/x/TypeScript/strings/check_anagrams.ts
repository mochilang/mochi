// Generated by Mochi v0.10.59 on 2025-08-07 08:56:05 GMT+7

function strip_and_remove_spaces(s: string): string {
  let start: number = 0;
  let end: number = (_len(s) - 1);
  while (((start < _len(s)) && (s[(start) < 0 ? s.length + (start) : start] == " "))) {
    start = (start + 1);
  }
  while (((end >= start) && (s[(end) < 0 ? s.length + (end) : end] == " "))) {
    end = (end - 1);
  }
  let res: string = "";
  let i: number = start;
  while ((i <= end)) {
    let ch: string = s[(i) < 0 ? s.length + (i) : i];
    if ((ch != " ")) {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function check_anagrams(a: string, b: string): boolean {
  let s1: string = a.toLowerCase();
  let s2: string = b.toLowerCase();
  s1 = strip_and_remove_spaces(s1);
  s2 = strip_and_remove_spaces(s2);
  if ((_len(s1) != _len(s2))) {
    return false;
  }
  let count: Record<string, number> = {};
  let i: number = 0;
  while ((i < _len(s1))) {
    let c1: string = s1[(i) < 0 ? s1.length + (i) : i];
    let c2: string = s2[(i) < 0 ? s2.length + (i) : i];
    if ((c1 in count)) {
      count[(c1) < 0 ? count.length + (c1) : c1] = (count[(c1) < 0 ? count.length + (c1) : c1] + 1);
    } else {
      count[(c1) < 0 ? count.length + (c1) : c1] = 1;
    }
    if ((c2 in count)) {
      count[(c2) < 0 ? count.length + (c2) : c2] = (count[(c2) < 0 ? count.length + (c2) : c2] - 1);
    } else {
      count[(c2) < 0 ? count.length + (c2) : c2] = -1;
    }
    i = (i + 1);
  }
  for (const ch in count) {
    if ((count[(ch) < 0 ? count.length + (ch) : ch] != 0)) {
      return false;
    }
  }
  return true;
}
function print_bool(b: boolean) {
  if (b) {
    console.log("");
  } else {
    _stdout_write("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_bool(check_anagrams("Silent", "Listen"));
  print_bool(check_anagrams("This is a string", "Is this a string"));
  print_bool(check_anagrams("This is    a      string", "Is     this a string"));
  print_bool(check_anagrams("There", "Their"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

