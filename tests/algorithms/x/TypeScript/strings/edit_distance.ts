// Generated by Mochi v0.10.59 on 2025-08-07 08:56:10 GMT+7

function min3(a: number, b: number, c: number): number {
  let m: number = a;
  if ((b < m)) {
    m = b;
  }
  if ((c < m)) {
    m = c;
  }
  return m;
}
function edit_distance(source: string, target: string): number {
  if ((_len(source) == 0)) {
    return _len(target);
  }
  if ((_len(target) == 0)) {
    return _len(source);
  }
  let last_source: string = (source).substring((_len(source) - 1), _len(source));
  let last_target: string = (target).substring((_len(target) - 1), _len(target));
  let delta: number = ((last_source == last_target) ? 0 : 1);
  let delete_cost: number = (edit_distance((source).substring(0, (_len(source) - 1)), target) + 1);
  let insert_cost: number = (edit_distance(source, (target).substring(0, (_len(target) - 1))) + 1);
  let replace_cost: number = (edit_distance((source).substring(0, (_len(source) - 1)), (target).substring(0, (_len(target) - 1))) + delta);
  return min3(delete_cost, insert_cost, replace_cost);
}
function main() {
  let result: number = edit_distance("ATCGCTG", "TAGCTAA");
  console.log(_str(_str(result)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

