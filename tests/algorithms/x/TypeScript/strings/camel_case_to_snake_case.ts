// Generated by Mochi v0.10.70 on 2025-08-23 13:54:24 GMT+7

let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let DIGITS: string = "0123456789";
function is_lower(ch: string): boolean {
  let i: number = 0;
  while ((i < _len(LOWER))) {
    if ((LOWER[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? LOWER.length + _mochi_idx : _mochi_idx;})()] === ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function is_upper(ch: string): boolean {
  let i: number = 0;
  while ((i < _len(UPPER))) {
    if ((UPPER[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? UPPER.length + _mochi_idx : _mochi_idx;})()] === ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function is_digit(ch: string): boolean {
  let i: number = 0;
  while ((i < _len(DIGITS))) {
    if ((DIGITS[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? DIGITS.length + _mochi_idx : _mochi_idx;})()] === ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function is_alpha(ch: string): boolean {
  if (is_lower(ch)) {
    return true;
  }
  if (is_upper(ch)) {
    return true;
  }
  return false;
}
function is_alnum(ch: string): boolean {
  if (is_alpha(ch)) {
    return true;
  }
  if (is_digit(ch)) {
    return true;
  }
  return false;
}
function to_lower(ch: string): string {
  let i: number = 0;
  while ((i < _len(UPPER))) {
    if ((UPPER[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? UPPER.length + _mochi_idx : _mochi_idx;})()] === ch)) {
      return LOWER[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? LOWER.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return ch;
}
function camel_to_snake_case(input_str: string): string {
  let snake_str: string = "";
  let i: number = 0;
  let prev_is_digit: boolean = false;
  let prev_is_alpha: boolean = false;
  while ((i < _len(input_str))) {
    let ch: string = input_str[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? input_str.length + _mochi_idx : _mochi_idx;})()];
    if (is_upper(ch)) {
      snake_str = ((snake_str + "_") + to_lower(ch));
    } else {
      if ((prev_is_digit && is_lower(ch))) {
        snake_str = ((snake_str + "_") + ch);
      } else {
        if ((prev_is_alpha && is_digit(ch))) {
          snake_str = ((snake_str + "_") + ch);
        } else {
          if (!is_alnum(ch)) {
            snake_str = (snake_str + "_");
          } else {
            snake_str = (snake_str + ch);
          }
        }
      }
    }
    prev_is_digit = is_digit(ch);
    prev_is_alpha = is_alpha(ch);
    i = (i + 1);
  }
  if (((_len(snake_str) > 0) && (snake_str[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? snake_str.length + _mochi_idx : _mochi_idx;})()] === "_"))) {
    snake_str = snake_str.slice(1, _len(snake_str));
  }
  return snake_str;
}
function main() {
  console.log(_str(camel_to_snake_case("someRandomString")));
  console.log(_str(camel_to_snake_case("SomeRandomStr#ng")));
  console.log(_str(camel_to_snake_case("123SomeRandom123String123")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

