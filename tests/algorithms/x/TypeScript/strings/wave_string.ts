// Generated by Mochi v0.10.59 on 2025-08-07 08:56:50 GMT+7

let lowercase: string = "abcdefghijklmnopqrstuvwxyz";
let uppercase: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
function index_of(s: string, c: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == c)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function is_alpha(c: string): boolean {
  return ((index_of(lowercase, c) >= 0) || (index_of(uppercase, c) >= 0));
}
function to_upper(c: string): string {
  let idx: number = index_of(lowercase, c);
  if ((idx >= 0)) {
    return (uppercase).substring(idx, (idx + 1));
  }
  return c;
}
function wave(txt: string): string[] {
  let result: string[] = [];
  let i: number = 0;
  while ((i < _len(txt))) {
    let ch: string = (txt).substring(i, (i + 1));
    if (is_alpha(ch)) {
      let prefix: string = (txt).substring(0, i);
      let suffix: string = (txt).substring((i + 1), _len(txt));
      result.push(((prefix + to_upper(ch)) + suffix));
    }
    i = (i + 1);
  }
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(wave("cat"))));
  console.log(_str(_str(wave("one"))));
  console.log(_str(_str(wave("book"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

