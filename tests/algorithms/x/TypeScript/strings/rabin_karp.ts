// Generated by Mochi v0.10.59 on 2025-08-07 09:46:23 GMT+7

let alphabet_size: number = 256;
let modulus: number = 1000003;
function index_of_char(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[(i) < 0 ? s.length + (i) : i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let digits: string = "0123456789";
  let idx: number = index_of_char(upper, ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = index_of_char(lower, ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  idx = index_of_char(digits, ch);
  if ((idx >= 0)) {
    return (48 + idx);
  }
  if ((ch == "ü")) {
    return 252;
  }
  if ((ch == "Ü")) {
    return 220;
  }
  if ((ch == " ")) {
    return 32;
  }
  return 0;
}
function rabin_karp(pattern: string, text: string): boolean {
  let p_len: number = _len(pattern);
  let t_len: number = _len(text);
  if ((p_len > t_len)) {
    return false;
  }
  let p_hash: number = 0;
  let t_hash: number = 0;
  let modulus_power: number = 1;
  let i: number = 0;
  while ((i < p_len)) {
    p_hash = ((ord(pattern[(i) < 0 ? pattern.length + (i) : i]) + (p_hash * alphabet_size)) % modulus);
    t_hash = ((ord(text[(i) < 0 ? text.length + (i) : i]) + (t_hash * alphabet_size)) % modulus);
    if ((i != (p_len - 1))) {
      modulus_power = ((modulus_power * alphabet_size) % modulus);
    }
    i = (i + 1);
  }
  let j: number = 0;
  while ((j <= (t_len - p_len))) {
    if (((t_hash == p_hash) && ((text).substring(j, (j + p_len)) == pattern))) {
      return true;
    }
    if ((j == (t_len - p_len))) {
      j = (j + 1);
      continue
    }
    t_hash = ((((t_hash - (ord(text[(j) < 0 ? text.length + (j) : j]) * modulus_power)) * alphabet_size) + ord(text[(Math.trunc((j + p_len))) < 0 ? text.length + (Math.trunc((j + p_len))) : Math.trunc((j + p_len))])) % modulus);
    if ((t_hash < 0)) {
      t_hash = (t_hash + modulus);
    }
    j = (j + 1);
  }
  return false;
}
function test_rabin_karp() {
  let pattern1: string = "abc1abc12";
  let text1: string = "alskfjaldsabc1abc1abc12k23adsfabcabc";
  let text2: string = "alskfjaldsk23adsfabcabc";
  if ((!rabin_karp(pattern1, text1) || rabin_karp(pattern1, text2))) {
    console.log(_str("Failure"));
    return;
  }
  let pattern2: string = "ABABX";
  let text3: string = "ABABZABABYABABX";
  if (!rabin_karp(pattern2, text3)) {
    console.log(_str("Failure"));
    return;
  }
  let pattern3: string = "AAAB";
  let text4: string = "ABAAAAAB";
  if (!rabin_karp(pattern3, text4)) {
    console.log(_str("Failure"));
    return;
  }
  let pattern4: string = "abcdabcy";
  let text5: string = "abcxabcdabxabcdabcdabcy";
  if (!rabin_karp(pattern4, text5)) {
    console.log(_str("Failure"));
    return;
  }
  let pattern5: string = "Lü";
  let text6: string = "Lüsai";
  if (!rabin_karp(pattern5, text6)) {
    console.log(_str("Failure"));
    return;
  }
  let pattern6: string = "Lue";
  if (rabin_karp(pattern6, text6)) {
    console.log(_str("Failure"));
    return;
  }
  console.log(_str("Success."));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  test_rabin_karp();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

