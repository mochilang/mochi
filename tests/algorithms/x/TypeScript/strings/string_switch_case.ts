// Generated by Mochi v0.10.59 on 2025-08-07 08:56:44 GMT+7

function split_words(s: string): string[] {
  let words: string[] = [];
  let current: string = "";
  for (const ch of s) {
    if ((ch == " ")) {
      if ((current != "")) {
        words.push(current);
        current = "";
      }
    } else {
      current = (current + ch);
    }
  }
  if ((current != "")) {
    words.push(current);
  }
  return words;
}
function is_alnum(c: string): boolean {
  return ((("0123456789".includes(c) || "abcdefghijklmnopqrstuvwxyz".includes(c)) || "ABCDEFGHIJKLMNOPQRSTUVWXYZ".includes(c)) || (c == " "));
}
function split_input(text: string): string[][] {
  let result: string[][] = [];
  let current: string = "";
  for (const ch of text) {
    if (is_alnum(ch)) {
      current = (current + ch);
    } else {
      if ((current != "")) {
        result.push(split_words(current));
        current = "";
      }
    }
  }
  if ((current != "")) {
    result.push(split_words(current));
  }
  return result;
}
function capitalize(word: string): string {
  if ((_len(word) == 0)) {
    return "";
  }
  if ((_len(word) == 1)) {
    return word.toUpperCase();
  }
  return (word.slice(0, 1).toUpperCase() + word.slice(1).toLowerCase());
}
function to_simple_case(text: string): string {
  let parts: string[][] = split_input(text);
  let res: string = "";
  for (const sub of parts) {
    for (const w of sub) {
      res = (res + capitalize(w));
    }
  }
  return res;
}
function to_complex_case(text: string, upper_flag: boolean, sep: string): string {
  let parts: string[][] = split_input(text);
  let res: string = "";
  for (const sub of parts) {
    let first: boolean = true;
    for (const w of sub) {
      let word: string = (upper_flag ? w.toUpperCase() : w.toLowerCase());
      if (first) {
        res = (res + word);
        first = false;
      } else {
        res = ((res + sep) + word);
      }
    }
  }
  return res;
}
function to_pascal_case(text: string): string {
  return to_simple_case(text);
}
function to_camel_case(text: string): string {
  let s: string = to_simple_case(text);
  if ((_len(s) == 0)) {
    return "";
  }
  return (s.slice(0, 1).toLowerCase() + s.slice(1));
}
function to_snake_case(text: string, upper_flag: boolean): string {
  return to_complex_case(text, upper_flag, "_");
}
function to_kebab_case(text: string, upper_flag: boolean): string {
  return to_complex_case(text, upper_flag, "-");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(to_pascal_case("one two 31235three4four")));
  console.log(_str(to_camel_case("one two 31235three4four")));
  console.log(_str(to_snake_case("one two 31235three4four", true)));
  console.log(_str(to_snake_case("one two 31235three4four", false)));
  console.log(_str(to_kebab_case("one two 31235three4four", true)));
  console.log(_str(to_kebab_case("one two 31235three4four", false)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

