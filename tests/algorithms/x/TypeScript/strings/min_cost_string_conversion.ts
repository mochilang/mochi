// Generated by Mochi v0.10.70 on 2025-08-23 13:54:51 GMT+7

export interface TransformTables { costs: number[][]; ops: string[][] }
function string_to_chars(s: string): string[] {
  let chars: string[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    chars.push((s).substring(i, (i + 1)));
    i = (i + 1);
  }
  return chars;
}
function join_chars(chars: string[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(chars))) {
    res = (res + chars[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? chars.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function insert_at(chars: string[], index: number, ch: string): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < index)) {
    res.push(chars[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? chars.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  res.push(ch);
  while ((i < _len(chars))) {
    res.push(chars[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? chars.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function remove_at(chars: string[], index: number): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(chars))) {
    if ((i !== index)) {
      res.push(chars[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? chars.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function make_matrix_int(rows: number, cols: number, init: number): number[][] {
  let matrix: number[][] = [];
  for (let _ = 0; _ < rows; _++) {
    let row: number[] = [];
    for (let _2 = 0; _2 < cols; _2++) {
      row.push(init);
    }
    matrix.push(row);
  }
  return matrix;
}
function make_matrix_string(rows: number, cols: number, init: string): string[][] {
  let matrix: string[][] = [];
  for (let _ = 0; _ < rows; _++) {
    let row: string[] = [];
    for (let _2 = 0; _2 < cols; _2++) {
      row.push(init);
    }
    matrix.push(row);
  }
  return matrix;
}
function compute_transform_tables(source_string: string, destination_string: string, copy_cost: number, replace_cost: number, delete_cost: number, insert_cost: number): TransformTables {
  let source_seq: string[] = string_to_chars(source_string);
  let dest_seq: string[] = string_to_chars(destination_string);
  let m: number = _len(source_seq);
  let n: number = _len(dest_seq);
  let costs: number[][] = make_matrix_int((m + 1), (n + 1), 0);
  let ops: string[][] = make_matrix_string((m + 1), (n + 1), "0");
  let i: number = 1;
  while ((i <= m)) {
    costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (i * delete_cost);
    ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ("D" + source_seq[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? source_seq.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let j: number = 1;
  while ((j <= n)) {
    costs[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (j * insert_cost);
    ops[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ops[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ("I" + dest_seq[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dest_seq.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  i = 1;
  while ((i <= m)) {
    j = 1;
    while ((j <= n)) {
      if ((source_seq[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? source_seq.length + _mochi_idx : _mochi_idx;})()] === dest_seq[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dest_seq.length + _mochi_idx : _mochi_idx;})()])) {
        costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + copy_cost);
        ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ("C" + source_seq[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? source_seq.length + _mochi_idx : _mochi_idx;})()]);
      } else {
        costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + replace_cost);
        ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (("R" + source_seq[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? source_seq.length + _mochi_idx : _mochi_idx;})()]) + dest_seq[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dest_seq.length + _mochi_idx : _mochi_idx;})()]);
      }
      if (((costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + delete_cost) < costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + delete_cost);
        ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ("D" + source_seq[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? source_seq.length + _mochi_idx : _mochi_idx;})()]);
      }
      if (((costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + insert_cost) < costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + insert_cost);
        ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ("I" + dest_seq[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dest_seq.length + _mochi_idx : _mochi_idx;})()]);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return {costs, ops};
}
function assemble_transformation(ops: string[][], i: number, j: number): string[] {
  if (((i === 0) && (j === 0))) {
    return [];
  }
  let op: string = ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ops[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ops.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let kind: string = (op).substring(0, 1);
  if (((kind === "C") || (kind === "R"))) {
    let seq: string[] = assemble_transformation(ops, (i - 1), (j - 1));
    seq.push(op);
    return seq;
  } else {
    if ((kind === "D")) {
      let seq: string[] = assemble_transformation(ops, (i - 1), j);
      seq.push(op);
      return seq;
    } else {
      let seq: string[] = assemble_transformation(ops, i, (j - 1));
      seq.push(op);
      return seq;
    }
  }
}
function main() {
  let copy_cost: number = -1;
  let replace_cost: number = 1;
  let delete_cost: number = 2;
  let insert_cost: number = 2;
  let src: string = "Python";
  let dst: string = "Algorithms";
  let tables: TransformTables = compute_transform_tables(src, dst, copy_cost, replace_cost, delete_cost, insert_cost);
  let operations: string[][] = tables.ops;
  let m: number = _len(operations);
  let n: number = _len(operations[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? operations.length + _mochi_idx : _mochi_idx;})()]);
  let sequence: string[] = assemble_transformation(operations, (m - 1), (n - 1));
  let string_list: string[] = string_to_chars(src);
  let idx: number = 0;
  let cost: number = 0;
  let k: number = 0;
  while ((k < _len(sequence))) {
    console.log(_str(join_chars(string_list)));
    let op: string = sequence[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? sequence.length + _mochi_idx : _mochi_idx;})()];
    let kind: string = (op).substring(0, 1);
    if ((kind === "C")) {
      cost = (cost + copy_cost);
    } else {
      if ((kind === "R")) {
        string_list[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? string_list.length + _mochi_idx : _mochi_idx;})()] = (op).substring(2, 3);
        cost = (cost + replace_cost);
      } else {
        if ((kind === "D")) {
          string_list = remove_at(string_list, idx);
          cost = (cost + delete_cost);
        } else {
          string_list = insert_at(string_list, idx, (op).substring(1, 2));
          cost = (cost + insert_cost);
        }
      }
    }
    idx = (idx + 1);
    k = (k + 1);
  }
  console.log(_str(join_chars(string_list)));
  console.log(_str(("Cost: " + _str(cost))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

