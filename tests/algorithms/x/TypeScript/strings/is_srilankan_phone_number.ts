// Generated by Mochi v0.10.70 on 2025-08-23 13:54:43 GMT+7

function starts_with(s: string, prefix: string): boolean {
  if ((_len(s) < _len(prefix))) {
    return false;
  }
  return ((s).substring(0, _len(prefix)) === prefix);
}
function all_digits(s: string): boolean {
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    if (((c < "0") || (c > "9"))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function is_sri_lankan_phone_number(phone: string): boolean {
  let p: string = phone;
  if (starts_with(p, "+94")) {
    p = (p).substring(3, _len(p));
  } else {
    if (starts_with(p, "0094")) {
      p = (p).substring(4, _len(p));
    } else {
      if (starts_with(p, "94")) {
        p = (p).substring(2, _len(p));
      } else {
        if (starts_with(p, "0")) {
          p = (p).substring(1, _len(p));
        } else {
          return false;
        }
      }
    }
  }
  if (((_len(p) !== 9) && (_len(p) !== 10))) {
    return false;
  }
  if ((p[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()] !== "7")) {
    return false;
  }
  let second: string = p[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()];
  let allowed: string[] = ["0", "1", "2", "4", "5", "6", "7", "8"];
  if (!(Array.isArray(allowed) ? allowed.includes(second) : (second in allowed))) {
    return false;
  }
  let idx: number = 2;
  if ((_len(p) === 10)) {
    let sep: string = p[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()];
    if (((sep !== "-") && (sep !== " "))) {
      return false;
    }
    idx = 3;
  }
  if (((_len(p) - idx) !== 7)) {
    return false;
  }
  let rest: string = (p).substring(idx, _len(p));
  return all_digits(rest);
}
let phone: string = "0094702343221";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(is_sri_lankan_phone_number(phone)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

