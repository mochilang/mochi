// Generated by Mochi v0.10.59 on 2025-08-07 08:56:02 GMT+7

let LETTERS: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let LOWERCASE: string = "abcdefghijklmnopqrstuvwxyz";
function char_to_lower(c: string): string {
  let i: number = 0;
  while ((i < _len(LETTERS))) {
    if ((c == (LETTERS).substring(i, (i + 1)))) {
      return (LOWERCASE).substring(i, (i + 1));
    }
    i = (i + 1);
  }
  return c;
}
function normalize(input_str: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(input_str))) {
    let ch: string = (input_str).substring(i, (i + 1));
    let lc: string = char_to_lower(ch);
    if (((lc >= "a") && (lc <= "z"))) {
      res = (res + lc);
    }
    i = (i + 1);
  }
  return res;
}
function can_string_be_rearranged_as_palindrome_counter(input_str: string): boolean {
  let s: string = normalize(input_str);
  let freq: Record<string, number> = {};
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch in freq)) {
      freq[(ch) < 0 ? freq.length + (ch) : ch] = (freq[(ch) < 0 ? freq.length + (ch) : ch] + 1);
    } else {
      freq[(ch) < 0 ? freq.length + (ch) : ch] = 1;
    }
    i = (i + 1);
  }
  let odd: number = 0;
  for (const key in freq) {
    if (((freq[(key) < 0 ? freq.length + (key) : key] % 2) != 0)) {
      odd = (odd + 1);
    }
  }
  return (odd < 2);
}
function can_string_be_rearranged_as_palindrome(input_str: string): boolean {
  let s: string = normalize(input_str);
  if ((_len(s) == 0)) {
    return true;
  }
  let character_freq_dict: Record<string, number> = {};
  let i: number = 0;
  while ((i < _len(s))) {
    let character: string = (s).substring(i, (i + 1));
    if ((character in character_freq_dict)) {
      character_freq_dict[(character) < 0 ? character_freq_dict.length + (character) : character] = (character_freq_dict[(character) < 0 ? character_freq_dict.length + (character) : character] + 1);
    } else {
      character_freq_dict[(character) < 0 ? character_freq_dict.length + (character) : character] = 1;
    }
    i = (i + 1);
  }
  let odd_char: number = 0;
  for (const character_key in character_freq_dict) {
    let character_count: number = character_freq_dict[(character_key) < 0 ? character_freq_dict.length + (character_key) : character_key];
    if (((character_count % 2) != 0)) {
      odd_char = (odd_char + 1);
    }
  }
  return !(odd_char > 1);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(can_string_be_rearranged_as_palindrome_counter("Momo")));
  console.log(_str(can_string_be_rearranged_as_palindrome_counter("Mother")));
  console.log(_str(can_string_be_rearranged_as_palindrome("Momo")));
  console.log(_str(can_string_be_rearranged_as_palindrome("Mother")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

