// Generated by Mochi v0.10.70 on 2025-08-23 13:55:01 GMT+7

function split(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch === sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function capitalize(word: string): string {
  if ((_len(word) === 0)) {
    return "";
  }
  let first = (word).substring(0, 1).toUpperCase();
  let rest: string = (word).substring(1, _len(word));
  return (first + rest);
}
function snake_to_camel_case(input_str: string, use_pascal: boolean): string {
  let words: string[] = split(input_str, "_");
  let result: string = "";
  let index: number = 0;
  if (!use_pascal) {
    if ((_len(words) > 0)) {
      result = words[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? words.length + _mochi_idx : _mochi_idx;})()];
      index = 1;
    }
  }
  while ((index < _len(words))) {
    let word: string = words[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? words.length + _mochi_idx : _mochi_idx;})()];
    result = (result + capitalize(word));
    index = (index + 1);
  }
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(snake_to_camel_case("some_random_string", false)));
  console.log(_str(snake_to_camel_case("some_random_string", true)));
  console.log(_str(snake_to_camel_case("some_random_string_with_numbers_123", false)));
  console.log(_str(snake_to_camel_case("some_random_string_with_numbers_123", true)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

