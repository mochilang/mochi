// Generated by Mochi v0.10.59 on 2025-08-07 08:56:07 GMT+7

function damerau_levenshtein_distance(first_string: string, second_string: string): number {
  let len1: number = _len(first_string);
  let len2: number = _len(second_string);
  let dp_matrix: number[][] = [];
  for (let _ = 0; _ < (len1 + 1); _++) {
    let row: number[] = [];
    for (let _2 = 0; _2 < (len2 + 1); _2++) {
      row.push(0);
    }
    dp_matrix.push(row);
  }
  for (let i = 0; i < (len1 + 1); i++) {
    let row: number[] = dp_matrix[(i) < 0 ? dp_matrix.length + (i) : i];
    row[(0) < 0 ? row.length + (0) : 0] = i;
    dp_matrix[(i) < 0 ? dp_matrix.length + (i) : i] = row;
  }
  let first_row: number[] = dp_matrix[(Math.trunc(0)) < 0 ? dp_matrix.length + (Math.trunc(0)) : Math.trunc(0)];
  for (let j = 0; j < (len2 + 1); j++) {
    first_row[(j) < 0 ? first_row.length + (j) : j] = j;
  }
  dp_matrix[(0) < 0 ? dp_matrix.length + (0) : 0] = first_row;
  for (let i = 1; i < (len1 + 1); i++) {
    let row: number[] = dp_matrix[(i) < 0 ? dp_matrix.length + (i) : i];
    let first_char: string = (first_string).substring((i - 1), i);
    for (let j = 1; j < (len2 + 1); j++) {
      let second_char: string = (second_string).substring((j - 1), j);
      let cost: number = ((first_char == second_char) ? 0 : 1);
      let value: number = (dp_matrix[(Math.trunc((i - 1))) < 0 ? dp_matrix.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(j) < 0 ? dp_matrix[(Math.trunc((i - 1))) < 0 ? dp_matrix.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (j) : j] + 1);
      let insertion: number = (row[(Math.trunc((j - 1))) < 0 ? row.length + (Math.trunc((j - 1))) : Math.trunc((j - 1))] + 1);
      if ((insertion < value)) {
        value = insertion;
      }
      let substitution: number = (dp_matrix[(Math.trunc((i - 1))) < 0 ? dp_matrix.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(Math.trunc((j - 1))) < 0 ? dp_matrix[(Math.trunc((i - 1))) < 0 ? dp_matrix.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))] + cost);
      if ((substitution < value)) {
        value = substitution;
      }
      row[(j) < 0 ? row.length + (j) : j] = value;
      if (((((i > 1) && (j > 1)) && ((first_string).substring((i - 1), i) == (second_string).substring((j - 2), (j - 1)))) && ((first_string).substring((i - 2), (i - 1)) == (second_string).substring((j - 1), j)))) {
        let transposition: number = (dp_matrix[(Math.trunc((i - 2))) < 0 ? dp_matrix.length + (Math.trunc((i - 2))) : Math.trunc((i - 2))][(Math.trunc((j - 2))) < 0 ? dp_matrix[(Math.trunc((i - 2))) < 0 ? dp_matrix.length + (Math.trunc((i - 2))) : Math.trunc((i - 2))].length + (Math.trunc((j - 2))) : Math.trunc((j - 2))] + cost);
        if ((transposition < row[(j) < 0 ? row.length + (j) : j])) {
          row[(j) < 0 ? row.length + (j) : j] = transposition;
        }
      }
    }
    dp_matrix[(i) < 0 ? dp_matrix.length + (i) : i] = row;
  }
  return dp_matrix[(len1) < 0 ? dp_matrix.length + (len1) : len1][(len2) < 0 ? dp_matrix[(len1) < 0 ? dp_matrix.length + (len1) : len1].length + (len2) : len2];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(damerau_levenshtein_distance("cat", "cut"))));
  console.log(_str(_str(damerau_levenshtein_distance("kitten", "sitting"))));
  console.log(_str(_str(damerau_levenshtein_distance("hello", "world"))));
  console.log(_str(_str(damerau_levenshtein_distance("book", "back"))));
  console.log(_str(_str(damerau_levenshtein_distance("container", "containment"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

