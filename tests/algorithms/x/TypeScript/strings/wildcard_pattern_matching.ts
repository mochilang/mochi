// Generated by Mochi v0.10.59 on 2025-08-07 09:47:29 GMT+7

function make_matrix_bool(rows: number, cols: number, init: boolean): boolean[][] {
  let matrix: boolean[][] = [];
  for (let _ = 0; _ < rows; _++) {
    let row: boolean[] = [];
    for (let _2 = 0; _2 < cols; _2++) {
      row.push(init);
    }
    matrix.push(row);
  }
  return matrix;
}
function match_pattern(input_string: string, pattern: string): boolean {
  let len_string: number = (_len(input_string) + 1);
  let len_pattern: number = (_len(pattern) + 1);
  let dp: boolean[][] = make_matrix_bool(len_string, len_pattern, false);
  let row0: boolean[] = dp[(Math.trunc(0)) < 0 ? dp.length + (Math.trunc(0)) : Math.trunc(0)];
  row0[(0) < 0 ? row0.length + (0) : 0] = true;
  dp[(0) < 0 ? dp.length + (0) : 0] = row0;
  let j: number = 1;
  while ((j < len_pattern)) {
    row0 = dp[(Math.trunc(0)) < 0 ? dp.length + (Math.trunc(0)) : Math.trunc(0)];
    if (((pattern).substring((j - 1), j) == "*")) {
      row0[(j) < 0 ? row0.length + (j) : j] = row0[(Math.trunc((j - 2))) < 0 ? row0.length + (Math.trunc((j - 2))) : Math.trunc((j - 2))];
    } else {
      row0[(j) < 0 ? row0.length + (j) : j] = false;
    }
    dp[(0) < 0 ? dp.length + (0) : 0] = row0;
    j = (j + 1);
  }
  let i: number = 1;
  while ((i < len_string)) {
    let row: boolean[] = dp[(i) < 0 ? dp.length + (i) : i];
    let j2: number = 1;
    while ((j2 < len_pattern)) {
      let s_char: string = (input_string).substring((i - 1), i);
      let p_char: string = (pattern).substring((j2 - 1), j2);
      if (((s_char == p_char) || (p_char == "."))) {
        row[(j2) < 0 ? row.length + (j2) : j2] = dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(Math.trunc((j2 - 1))) < 0 ? dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (Math.trunc((j2 - 1))) : Math.trunc((j2 - 1))];
      } else {
        if ((p_char == "*")) {
          let val: boolean = dp[(i) < 0 ? dp.length + (i) : i][(Math.trunc((j2 - 2))) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (Math.trunc((j2 - 2))) : Math.trunc((j2 - 2))];
          let prev_p: string = (pattern).substring((j2 - 2), (j2 - 1));
          if ((!val && ((prev_p == s_char) || (prev_p == ".")))) {
            val = dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(j2) < 0 ? dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (j2) : j2];
          }
          row[(j2) < 0 ? row.length + (j2) : j2] = val;
        } else {
          row[(j2) < 0 ? row.length + (j2) : j2] = false;
        }
      }
      j2 = (j2 + 1);
    }
    dp[(i) < 0 ? dp.length + (i) : i] = row;
    i = (i + 1);
  }
  return dp[(Math.trunc((len_string - 1))) < 0 ? dp.length + (Math.trunc((len_string - 1))) : Math.trunc((len_string - 1))][(Math.trunc((len_pattern - 1))) < 0 ? dp[(Math.trunc((len_string - 1))) < 0 ? dp.length + (Math.trunc((len_string - 1))) : Math.trunc((len_string - 1))].length + (Math.trunc((len_pattern - 1))) : Math.trunc((len_pattern - 1))];
}
function main() {
  if (!match_pattern("aab", "c*a*b")) {
    _panic("case1 failed");
  }
  if (match_pattern("dabc", "*abc")) {
    _panic("case2 failed");
  }
  if (match_pattern("aaa", "aa")) {
    _panic("case3 failed");
  }
  if (!match_pattern("aaa", "a.a")) {
    _panic("case4 failed");
  }
  if (match_pattern("aaab", "aa*")) {
    _panic("case5 failed");
  }
  if (!match_pattern("aaab", ".*")) {
    _panic("case6 failed");
  }
  if (match_pattern("a", "bbbb")) {
    _panic("case7 failed");
  }
  if (match_pattern("", "bbbb")) {
    _panic("case8 failed");
  }
  if (match_pattern("a", "")) {
    _panic("case9 failed");
  }
  if (!match_pattern("", "")) {
    _panic("case10 failed");
  }
  console.log(_str(_str(match_pattern("aab", "c*a*b"))));
  console.log(_str(_str(match_pattern("dabc", "*abc"))));
  console.log(_str(_str(match_pattern("aaa", "aa"))));
  console.log(_str(_str(match_pattern("aaa", "a.a"))));
  console.log(_str(_str(match_pattern("aaab", "aa*"))));
  console.log(_str(_str(match_pattern("aaab", ".*"))));
  console.log(_str(_str(match_pattern("a", "bbbb"))));
  console.log(_str(_str(match_pattern("", "bbbb"))));
  console.log(_str(_str(match_pattern("a", ""))));
  console.log(_str(_str(match_pattern("", ""))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

