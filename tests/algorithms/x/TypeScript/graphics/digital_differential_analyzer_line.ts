// Generated by Mochi v0.10.59 on 2025-08-06 22:15:50 GMT+7

export interface Point { x: number; y: number }
function abs_int(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function round_int(x: number): number {
  return Math.trunc((x + 0.5));
}
function digital_differential_analyzer_line(p1: Point, p2: Point): Point[] {
  let dx: number = (p2.x - p1.x);
  let dy: number = (p2.y - p1.y);
  let abs_dx: number = abs_int(dx);
  let abs_dy: number = abs_int(dy);
  let steps: number = ((abs_dx > abs_dy) ? abs_dx : abs_dy);
  let x_increment: number = (dx / steps);
  let y_increment: number = (dy / steps);
  let coordinates: Point[] = [];
  let x: number = p1.x;
  let y: number = p1.y;
  let i: number = 0;
  while ((i < steps)) {
    x = (x + x_increment);
    y = (y + y_increment);
    let point: Point = {"x": round_int(x), "y": round_int(y)};
    coordinates.push(point);
    i = (i + 1);
  }
  return coordinates;
}
function main() {
  let result: Point[] = digital_differential_analyzer_line({"x": 1, "y": 1}, {"x": 4, "y": 4});
  console.log(_str("[" + (result).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

