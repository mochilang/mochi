// Generated by Mochi v0.10.62 on 2025-08-09 10:36:40 GMT+7

function repeat_char(ch: string, count: number): string {
  let result: string = "";
  let i: number = 0;
  while ((i < count)) {
    result = (result + ch);
    i = (i + 1);
  }
  return result;
}
function butterfly_pattern(n: number): string {
  let lines: string[] = [];
  let i: number = 1;
  while ((i < n)) {
    let left: string = repeat_char("*", i);
    let mid: string = repeat_char(" ", ((2 * (n - i)) - 1));
    let right: string = repeat_char("*", i);
    lines.push(((left + mid) + right));
    i = (i + 1);
  }
  lines.push(repeat_char("*", ((2 * n) - 1)));
  let j: number = (n - 1);
  while ((j > 0)) {
    let left: string = repeat_char("*", j);
    let mid: string = repeat_char(" ", ((2 * (n - j)) - 1));
    let right: string = repeat_char("*", j);
    lines.push(((left + mid) + right));
    j = (j - 1);
  }
  let out: string = "";
  let k: number = 0;
  while ((k < _len(lines))) {
    if ((k > 0)) {
      out = (out + "\n");
    }
    out = (out + lines[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? lines.length + _mochi_idx : _mochi_idx;})()]);
    k = (k + 1);
  }
  return out;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(butterfly_pattern(3)));
  console.log(_str(butterfly_pattern(5)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

