// Generated by Mochi v0.10.65 on 2025-08-14 10:03:44 GMT+7

function n_choose_k(n: number, k: number): number {
  if (((k < 0) || (k > n))) {
    return 0.0;
  }
  if (((k === 0) || (k === n))) {
    return 1.0;
  }
  let result: number = 1.0;
  let i: number = 1;
  while ((i <= k)) {
    result = ((result * (1.0 * ((n - k) + i))) / (1.0 * i));
    i = (i + 1);
  }
  return result;
}
function pow_float(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function basis_function(points: number[][], t: number): number[] {
  let degree: number = (_len(points) - 1);
  let res: number[] = [];
  let i: number = 0;
  while ((i <= degree)) {
    let coef: number = n_choose_k(degree, i);
    let term: number = (pow_float((1.0 - t), (degree - i)) * pow_float(t, i));
    res.push((coef * term));
    i = (i + 1);
  }
  return res;
}
function bezier_point(points: number[][], t: number): number[] {
  let basis: number[] = basis_function(points, t);
  let x: number = 0.0;
  let y: number = 0.0;
  let i: number = 0;
  while ((i < _len(points))) {
    x = (x + (basis[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? basis.length + _mochi_idx : _mochi_idx;})()] * points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
    y = (y + (basis[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? basis.length + _mochi_idx : _mochi_idx;})()] * points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return [x, y];
}
let control: number[][] = [[1.0, 1.0], [1.0, 2.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(basis_function(control, 0.0)));
  console.log(_str(basis_function(control, 1.0)));
  console.log(_str(bezier_point(control, 0.0)));
  console.log(_str(bezier_point(control, 1.0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

