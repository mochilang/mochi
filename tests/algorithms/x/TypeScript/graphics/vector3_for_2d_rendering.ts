// Generated by Mochi v0.10.64 on 2025-08-13 16:13:26 GMT+7

let PI: number = 3.141592653589793;
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function modf(x: number, m: number): number {
  return (x - (Math.floor((x / m)) * m));
}
function sin_taylor(x: number): number {
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = (k1 + 1.0);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function convert_to_2d(x: number, y: number, z: number, scale: number, distance: number): number[] {
  let projected_x: number = (((x * distance) / (z + distance)) * scale);
  let projected_y: number = (((y * distance) / (z + distance)) * scale);
  return [projected_x, projected_y];
}
function rotate(x: number, y: number, z: number, axis: string, angle: number): number[] {
  angle = (((modf(angle, 360.0) / 450.0) * 180.0) / PI);
  angle = modf(angle, (2.0 * PI));
  if ((angle > PI)) {
    angle = (angle - (2.0 * PI));
  }
  if ((axis === "z")) {
    let new_x: number = ((x * cos_taylor(angle)) - (y * sin_taylor(angle)));
    let new_y: number = ((y * cos_taylor(angle)) + (x * sin_taylor(angle)));
    let new_z: number = z;
    return [new_x, new_y, new_z];
  }
  if ((axis === "x")) {
    let new_y: number = ((y * cos_taylor(angle)) - (z * sin_taylor(angle)));
    let new_z: number = ((z * cos_taylor(angle)) + (y * sin_taylor(angle)));
    let new_x: number = x;
    return [new_x, new_y, new_z];
  }
  if ((axis === "y")) {
    let new_x: number = ((x * cos_taylor(angle)) - (z * sin_taylor(angle)));
    let new_z: number = ((z * cos_taylor(angle)) + (x * sin_taylor(angle)));
    let new_y: number = y;
    return [new_x, new_y, new_z];
  }
  console.log(_str("not a valid axis, choose one of 'x', 'y', 'z'"));
  return [0.0, 0.0, 0.0];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)));
  console.log(_str(rotate(1.0, 2.0, 3.0, "y", 90.0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

