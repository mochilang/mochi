// Generated by Mochi v0.10.62 on 2025-08-09 10:36:27 GMT+7

export interface RGB { r: number; g: number; b: number }
function round_int(x: number): number {
  return Math.trunc((x + 0.5));
}
function hsv_to_rgb(h: number, s: number, v: number): RGB {
  let i: number = Math.trunc((h * 6.0));
  let f: number = ((h * 6.0) - i);
  let p: number = (v * (1.0 - s));
  let q: number = (v * (1.0 - (f * s)));
  let t: number = (v * (1.0 - ((1.0 - f) * s)));
  let mod: number = (i % 6);
  let r: number = 0.0;
  let g: number = 0.0;
  let b: number = 0.0;
  if ((mod == 0)) {
    r = v;
    g = t;
    b = p;
  } else {
    if ((mod == 1)) {
      r = q;
      g = v;
      b = p;
    } else {
      if ((mod == 2)) {
        r = p;
        g = v;
        b = t;
      } else {
        if ((mod == 3)) {
          r = p;
          g = q;
          b = v;
        } else {
          if ((mod == 4)) {
            r = t;
            g = p;
            b = v;
          } else {
            r = v;
            g = p;
            b = q;
          }
        }
      }
    }
  }
  return {"r": round_int((r * 255.0)), "g": round_int((g * 255.0)), "b": round_int((b * 255.0))};
}
function get_distance(x: number, y: number, max_step: number): number {
  let a: number = x;
  let b: number = y;
  let step: number = -1;
  while ((step < (max_step - 1))) {
    step = (step + 1);
    let a_new: number = (((a * a) - (b * b)) + x);
    b = (((2.0 * a) * b) + y);
    a = a_new;
    if ((((a * a) + (b * b)) > 4.0)) {
      break
    }
  }
  return (step / (max_step - 1));
}
function get_black_and_white_rgb(distance: number): RGB {
  if ((distance == 1.0)) {
    return {"r": 0, "g": 0, "b": 0};
  } else {
    return {"r": 255, "g": 255, "b": 255};
  }
}
function get_color_coded_rgb(distance: number): RGB {
  if ((distance == 1.0)) {
    return {"r": 0, "g": 0, "b": 0};
  } else {
    return hsv_to_rgb(distance, 1.0, 1.0);
  }
}
function get_image(image_width: number, image_height: number, figure_center_x: number, figure_center_y: number, figure_width: number, max_step: number, use_distance_color_coding: boolean): RGB[][] {
  let img: RGB[][] = [];
  let figure_height: number = ((figure_width / image_width) * image_height);
  let image_y: number = 0;
  while ((image_y < image_height)) {
    let row: RGB[] = [];
    let image_x: number = 0;
    while ((image_x < image_width)) {
      let fx: number = (figure_center_x + (((image_x / image_width) - 0.5) * figure_width));
      let fy: number = (figure_center_y + (((image_y / image_height) - 0.5) * figure_height));
      let distance: number = get_distance(fx, fy, max_step);
      let rgb: RGB = {};
      if (use_distance_color_coding) {
        rgb = get_color_coded_rgb(distance);
      } else {
        rgb = get_black_and_white_rgb(distance);
      }
      row.push(rgb);
      image_x = (image_x + 1);
    }
    img.push(row);
    image_y = (image_y + 1);
  }
  return img;
}
function rgb_to_string(c: RGB): string {
  return (((((("(" + _str(c.r)) + ", ") + _str(c.g)) + ", ") + _str(c.b)) + ")");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let img1: RGB[][]
let img2: RGB[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
img1 = get_image(10, 10, -0.6, 0.0, 3.2, 50, true)
  console.log(_str(rgb_to_string(img1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? img1.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? img1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? img1.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])));
img2 = get_image(10, 10, -0.6, 0.0, 3.2, 50, false)
  console.log(_str(rgb_to_string(img2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? img2.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? img2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? img2.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

