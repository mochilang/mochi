// Generated by Mochi v0.10.59 on 2025-08-06 22:15:06 GMT+7

export interface Point { x: number; y: number }
function get_mid(p1: Point, p2: Point): Point {
  return {"x": Math.trunc((p1.x + p2.x) / 2), "y": Math.trunc((p1.y + p2.y) / 2)};
}
function point_to_string(p: Point): string {
  return (((("(" + _str(p.x)) + ",") + _str(p.y)) + ")");
}
function triangle(v1: Point, v2: Point, v3: Point, depth: number) {
  console.log(_str(((((point_to_string(v1) + " ") + point_to_string(v2)) + " ") + point_to_string(v3))));
  if ((depth == 0)) {
    return;
  }
  triangle(v1, get_mid(v1, v2), get_mid(v1, v3), (depth - 1));
  triangle(v2, get_mid(v1, v2), get_mid(v2, v3), (depth - 1));
  triangle(v3, get_mid(v3, v2), get_mid(v1, v3), (depth - 1));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  triangle({"x": -175, "y": -125}, {"x": 0, "y": 175}, {"x": 175, "y": -125}, 2);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

