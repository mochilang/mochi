// Generated by Mochi v0.10.64 on 2025-08-13 16:13:17 GMT+7

function repeat_char(c: string, count: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < count)) {
    s = (s + c);
    i = (i + 1);
  }
  return s;
}
function vicsek(order: number): string[] {
  if ((order === 0)) {
    return ["#"];
  }
  let prev: string[] = vicsek((order - 1));
  let size: number = _len(prev);
  let blank: string = repeat_char(" ", size);
  let result: string[] = [];
  let i: number = 0;
  while ((i < size)) {
    result.push(((blank + prev[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? prev.length + _mochi_idx : _mochi_idx;})()]) + blank));
    i = (i + 1);
  }
  i = 0;
  while ((i < size)) {
    result.push(((prev[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? prev.length + _mochi_idx : _mochi_idx;})()] + prev[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? prev.length + _mochi_idx : _mochi_idx;})()]) + prev[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? prev.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  i = 0;
  while ((i < size)) {
    result.push(((blank + prev[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? prev.length + _mochi_idx : _mochi_idx;})()]) + blank));
    i = (i + 1);
  }
  return result;
}
function print_pattern(pattern: string[]) {
  let i: number = 0;
  while ((i < _len(pattern))) {
    console.log(_str(pattern[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? pattern.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
}
function main() {
  let depth: number = 3;
  let pattern: string[] = vicsek(depth);
  print_pattern(pattern);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

