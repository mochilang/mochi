// Generated by Mochi v0.10.64 on 2025-08-13 16:13:13 GMT+7

export interface Complex { re: number; im: number }
function complex_add(a: Complex, b: Complex): Complex {
  return {re: (a.re + b.re), im: (a.im + b.im)};
}
function complex_mul(a: Complex, b: Complex): Complex {
  let real: number = ((a.re * b.re) - (a.im * b.im));
  let imag: number = ((a.re * b.im) + (a.im * b.re));
  return {re: real, im: imag};
}
function sqrtApprox(x: number): number {
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function complex_abs(a: Complex): number {
  return sqrtApprox(((a.re * a.re) + (a.im * a.im)));
}
function sin_taylor(x: number): number {
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = ((2.0 * i) + 1.0);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function exp_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1.0;
  while ((i < 20.0)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1.0);
  }
  return sum;
}
function complex_exp(z: Complex): Complex {
  let e: number = exp_taylor(z.re);
  return {re: (e * cos_taylor(z.im)), im: (e * sin_taylor(z.im))};
}
function eval_quadratic(c: Complex, z: Complex): Complex {
  return complex_add(complex_mul(z, z), c);
}
function eval_exponential(c: Complex, z: Complex): Complex {
  return complex_add(complex_exp(z), c);
}
function iterate_function(eval_function, c: Complex, nb_iterations: number, z0: Complex, infinity: number): Complex {
  let z_n: Complex = z0;
  let i: number = 0;
  while ((i < nb_iterations)) {
    z_n = eval_function(c, z_n);
    if ((complex_abs(z_n) > infinity)) {
      return z_n;
    }
    i = (i + 1);
  }
  return z_n;
}
function prepare_grid(window_size: number, nb_pixels: number): Complex[][] {
  let grid: Complex[][] = [];
  let i: number = 0;
  while ((i < nb_pixels)) {
    let row: Complex[] = [];
    let j: number = 0;
    while ((j < nb_pixels)) {
      let real: number = (-window_size + (((2.0 * window_size) * i) / (nb_pixels - 1)));
      let imag: number = (-window_size + (((2.0 * window_size) * j) / (nb_pixels - 1)));
      row.push({re: real, im: imag});
      j = (j + 1);
    }
    grid.push(row);
    i = (i + 1);
  }
  return grid;
}
function julia_demo() {
  let grid: Complex[][] = prepare_grid(1.0, 5);
  let c_poly: Complex = {re: -0.4, im: 0.6};
  let c_exp: Complex = {re: -2.0, im: 0.0};
  let poly_result: number[][] = [];
  let exp_result: number[][] = [];
  let y: number = 0;
  while ((y < _len(grid))) {
    let row_poly: number[] = [];
    let row_exp: number[] = [];
    let x: number = 0;
    while ((x < _len(grid[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) {
      let z0: Complex = grid[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let z_poly: Complex = iterate_function(eval_quadratic, c_poly, 20, z0, 4.0);
      let z_exp: Complex = iterate_function(eval_exponential, c_exp, 10, z0, 10000000000.0);
      row_poly.push(((complex_abs(z_poly) < 2.0) ? 1 : 0));
      row_exp.push(((complex_abs(z_exp) < 10000.0) ? 1 : 0));
      x = (x + 1);
    }
    poly_result.push(row_poly);
    exp_result.push(row_exp);
    y = (y + 1);
  }
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(poly_result)));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(exp_result)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  julia_demo();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

