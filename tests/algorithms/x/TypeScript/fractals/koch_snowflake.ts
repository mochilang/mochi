// Generated by Mochi v0.10.65 on 2025-08-14 10:03:35 GMT+7

export interface Vec { x: number; y: number }
let PI: number = 3.141592653589793;
let TWO_PI: number = 6.283185307179586;
function _mod(x: number, m: number): number {
  return (x - (Math.trunc((x / m)) * m));
}
function sin(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y3: number = (y2 * y);
  let y5: number = (y3 * y2);
  let y7: number = (y5 * y2);
  return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0));
}
function cos(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y4: number = (y2 * y2);
  let y6: number = (y4 * y2);
  return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0));
}
function rotate(v: Vec, angle_deg: number): Vec {
  let theta: number = ((angle_deg * PI) / 180.0);
  let c: number = cos(theta);
  let s: number = sin(theta);
  return {x: ((v.x * c) - (v.y * s)), y: ((v.x * s) + (v.y * c))};
}
function iteration_step(vectors: Vec[]): Vec[] {
  let new_vectors: Vec[] = [];
  let i: number = 0;
  while ((i < (_len(vectors) - 1))) {
    let start: Vec = vectors[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()];
    let end: Vec = vectors[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()];
    new_vectors.push(start);
    let dx: number = (end.x - start.x);
    let dy: number = (end.y - start.y);
    let one_third: Vec = {x: (start.x + (dx / 3.0)), y: (start.y + (dy / 3.0))};
    let mid: Vec = rotate({x: (dx / 3.0), y: (dy / 3.0)}, 60.0);
    let peak: Vec = {x: (one_third.x + mid.x), y: (one_third.y + mid.y)};
    let two_third: Vec = {x: (start.x + ((dx * 2.0) / 3.0)), y: (start.y + ((dy * 2.0) / 3.0))};
    new_vectors.push(one_third);
    new_vectors.push(peak);
    new_vectors.push(two_third);
    i = (i + 1);
  }
  new_vectors.push(vectors[(()=>{const _mochi_idx = Math.trunc((_len(vectors) - 1)); return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()]);
  return new_vectors;
}
function iterate(initial: Vec[], steps: number): Vec[] {
  let vectors: Vec[] = initial;
  let i: number = 0;
  while ((i < steps)) {
    vectors = iteration_step(vectors);
    i = (i + 1);
  }
  return vectors;
}
function vec_to_string(v: Vec): string {
  return (((("(" + _str(v.x)) + ", ") + _str(v.y)) + ")");
}
function vec_list_to_string(lst: Vec[]): string {
  let res: string = "[";
  let i: number = 0;
  while ((i < _len(lst))) {
    res = (res + vec_to_string(lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(lst) - 1))) {
      res = (res + ", ");
    }
    i = (i + 1);
  }
  res = (res + "]");
  return res;
}
let VECTOR_1: Vec = {x: 0.0, y: 0.0};
let VECTOR_2: Vec = {x: 0.5, y: 0.8660254};
let VECTOR_3: Vec = {x: 1.0, y: 0.0};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let INITIAL_VECTORS: Vec[]
let example: Vec[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
INITIAL_VECTORS = [VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1]
example = iterate([VECTOR_1, VECTOR_3], 1)
  console.log(_str(vec_list_to_string(example)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

