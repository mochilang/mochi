// Generated by Mochi v0.10.59 on 2025-08-06 16:06:58 GMT+7

function repeat_bool(times: number): boolean[] {
  let res: boolean[] = [];
  let i: number = 0;
  while ((i < times)) {
    res.push(false);
    i = (i + 1);
  }
  return res;
}
function set_bool(xs: boolean[], idx: number, value: boolean): boolean[] {
  let res: boolean[] = [];
  let i: number = 0;
  while ((i < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((i == idx)) {
      res.push(value);
    } else {
      res.push(xs[i]);
    }
    i = (i + 1);
  }
  return res;
}
function create_state_space_tree(sequence: any[], current: any[], index: number, used: boolean[]) {
  if ((index == Number(Array.isArray(sequence) || typeof sequence === 'string' ? sequence.length : Object.keys(sequence ?? {}).length))) {
    console.log(_str(_str(current)));
    return;
  }
  let i: number = 0;
  while ((i < Number(Array.isArray(sequence) || typeof sequence === 'string' ? sequence.length : Object.keys(sequence ?? {}).length))) {
    if (!used[i]) {
      let next_current: any[] = [...current, sequence[i]];
      let next_used: boolean[] = set_bool(used, i, true);
      create_state_space_tree(sequence, next_current, (index + 1), next_used);
    }
    i = (i + 1);
  }
}
function generate_all_permutations(sequence: any[]) {
  let used: boolean[] = repeat_bool(Number(Array.isArray(sequence) || typeof sequence === 'string' ? sequence.length : Object.keys(sequence ?? {}).length));
  create_state_space_tree(sequence, [], 0, used);
}
let sequence: any[] = [3, 1, 2, 4];
let sequence_2: any[] = ["A", "B", "C"];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  generate_all_permutations(sequence);
  generate_all_permutations(sequence_2);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

