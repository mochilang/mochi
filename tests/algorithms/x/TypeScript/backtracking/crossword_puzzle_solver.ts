// Generated by Mochi v0.10.59 on 2025-08-06 16:07:14 GMT+7

function is_valid(puzzle: string[][], word: string, row: number, col: number, vertical: boolean): boolean {
  for (let i = 0; i < Number(Array.isArray(word) || typeof word === 'string' ? word.length : Object.keys(word ?? {}).length); i++) {
    if (vertical) {
      if ((((row + i) >= Number(Array.isArray(puzzle) || typeof puzzle === 'string' ? puzzle.length : Object.keys(puzzle ?? {}).length)) || (puzzle[Math.trunc((row + i))][col] != ""))) {
        return false;
      }
    } else {
      if ((((col + i) >= Number(Array.isArray(puzzle[Math.trunc(0)]) || typeof puzzle[Math.trunc(0)] === 'string' ? puzzle[Math.trunc(0)].length : Object.keys(puzzle[Math.trunc(0)] ?? {}).length)) || (puzzle[row][Math.trunc((col + i))] != ""))) {
        return false;
      }
    }
  }
  return true;
}
function place_word(puzzle: string[][], word: string, row: number, col: number, vertical: boolean) {
  for (let i = 0; i < Number(Array.isArray(word) || typeof word === 'string' ? word.length : Object.keys(word ?? {}).length); i++) {
    let ch: string = word[i];
    if (vertical) {
      puzzle[(row + i)][col] = ch;
    } else {
      puzzle[row][(col + i)] = ch;
    }
  }
}
function remove_word(puzzle: string[][], word: string, row: number, col: number, vertical: boolean) {
  for (let i = 0; i < Number(Array.isArray(word) || typeof word === 'string' ? word.length : Object.keys(word ?? {}).length); i++) {
    if (vertical) {
      puzzle[(row + i)][col] = "";
    } else {
      puzzle[row][(col + i)] = "";
    }
  }
}
function solve_crossword(puzzle: string[][], words: string[], used: boolean[]): boolean {
  for (let row = 0; row < Number(Array.isArray(puzzle) || typeof puzzle === 'string' ? puzzle.length : Object.keys(puzzle ?? {}).length); row++) {
    for (let col = 0; col < Number(Array.isArray(puzzle[Math.trunc(0)]) || typeof puzzle[Math.trunc(0)] === 'string' ? puzzle[Math.trunc(0)].length : Object.keys(puzzle[Math.trunc(0)] ?? {}).length); col++) {
      if ((puzzle[row][col] == "")) {
        for (let i = 0; i < Number(Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length); i++) {
          if (!used[i]) {
            let word: string = words[i];
            for (const vertical of [true, false]) {
              if (is_valid(puzzle, word, row, col, vertical)) {
                place_word(puzzle, word, row, col, vertical);
                used[i] = true;
                if (solve_crossword(puzzle, words, used)) {
                  return true;
                }
                used[i] = false;
                remove_word(puzzle, word, row, col, vertical);
              }
            }
          }
        }
        return false;
      }
    }
  }
  return true;
}
let puzzle: string[][] = [["", "", ""], ["", "", ""], ["", "", ""]];
let words: string[] = ["cat", "dog", "car"];
let used: boolean[] = [false, false, false];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  if (solve_crossword(puzzle, words, used)) {
    console.log(_str("Solution found:"));
    for (const row of puzzle) {
      console.log(_str("[" + (row).join(' ') + "]"));
    }
  } else {
    console.log(_str("No solution found:"));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

