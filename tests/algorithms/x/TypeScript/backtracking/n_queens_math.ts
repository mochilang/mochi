// Generated by Mochi v0.10.59 on 2025-08-06 16:10:03 GMT+7

function contains(xs: number[], x: number): boolean {
  let i: number = 0;
  while ((i < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((xs[i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function repeat(s: string, times: number): string {
  let result: string = "";
  let i: number = 0;
  while ((i < times)) {
    result = (result + s);
    i = (i + 1);
  }
  return result;
}
function build_board(pos: number[], n: number): string[] {
  let board: string[] = [];
  let i: number = 0;
  while ((i < Number(Array.isArray(pos) || typeof pos === 'string' ? pos.length : Object.keys(pos ?? {}).length))) {
    let col: number = pos[i];
    let line: string = ((repeat(". ", col) + "Q ") + repeat(". ", ((n - 1) - col)));
    board.push(line);
    i = (i + 1);
  }
  return board;
}
function depth_first_search(pos: number[], dr: number[], dl: number[], n: number): string[][] {
  let row: number = Number(Array.isArray(pos) || typeof pos === 'string' ? pos.length : Object.keys(pos ?? {}).length);
  if ((row == n)) {
    let single: string[][] = [];
    single.push(build_board(pos, n));
    return single;
  }
  let boards: string[][] = [];
  let col: number = 0;
  while ((col < n)) {
    if (((pos.includes(col) || dr.includes((row - col))) || dl.includes((row + col)))) {
      col = (col + 1);
      continue
    }
    let result: string[][] = depth_first_search([...pos, col], [...dr, (row - col)], [...dl, (row + col)], n);
    boards = concat(boards, result);
    col = (col + 1);
  }
  return boards;
}
function n_queens_solution(n: number): number {
  let boards: string[][] = depth_first_search([], [], [], n);
  let i: number = 0;
  while ((i < Number(Array.isArray(boards) || typeof boards === 'string' ? boards.length : Object.keys(boards ?? {}).length))) {
    let j: number = 0;
    while ((j < Number(Array.isArray(boards[i]) || typeof boards[i] === 'string' ? boards[i].length : Object.keys(boards[i] ?? {}).length))) {
      console.log(_str(boards[i][j]));
      j = (j + 1);
    }
    console.log(_str(""));
    i = (i + 1);
  }
  console.log(_str(Number(Array.isArray(boards) || typeof boards === 'string' ? boards.length : Object.keys(boards ?? {}).length)) + " " + _str("solutions were found."));
  return Number(Array.isArray(boards) || typeof boards === 'string' ? boards.length : Object.keys(boards ?? {}).length);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  n_queens_solution(4);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

