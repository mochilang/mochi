// Generated by Mochi v0.10.59 on 2025-08-06 16:10:49 GMT+7

function contains(xs: number[], x: number): boolean {
  let i: number = 0;
  while ((i < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((xs[i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function get_point_key(len_board: number, len_board_column: number, row: number, column: number): number {
  return (((len_board * len_board_column) * row) + column);
}
function search_from(board: string[][], word: string, row: number, column: number, word_index: number, visited: number[]): boolean {
  if ((board[row][column] != (word).substring(word_index, (word_index + 1)))) {
    return false;
  }
  if ((word_index == (Number(Array.isArray(word) || typeof word === 'string' ? word.length : Object.keys(word ?? {}).length) - 1))) {
    return true;
  }
  let len_board: number = Number(Array.isArray(board) || typeof board === 'string' ? board.length : Object.keys(board ?? {}).length);
  let len_board_column: number = Number(Array.isArray(board[Math.trunc(0)]) || typeof board[Math.trunc(0)] === 'string' ? board[Math.trunc(0)].length : Object.keys(board[Math.trunc(0)] ?? {}).length);
  let dir_i: number[] = [0, 0, -1, 1];
  let dir_j: number[] = [1, -1, 0, 0];
  let k: number = 0;
  while ((k < 4)) {
    let next_i: number = (row + dir_i[k]);
    let next_j: number = (column + dir_j[k]);
    if (!((((0 <= next_i) && (next_i < len_board)) && (0 <= next_j)) && (next_j < len_board_column))) {
      k = (k + 1);
      continue
    }
    let key: number = get_point_key(len_board, len_board_column, next_i, next_j);
    if (visited.includes(key)) {
      k = (k + 1);
      continue
    }
    let new_visited: any[] = [...visited, key];
    if (search_from(board, word, next_i, next_j, (word_index + 1), new_visited)) {
      return true;
    }
    k = (k + 1);
  }
  return false;
}
function word_exists(board: string[][], word: string): boolean {
  let len_board: number = Number(Array.isArray(board) || typeof board === 'string' ? board.length : Object.keys(board ?? {}).length);
  let len_board_column: number = Number(Array.isArray(board[Math.trunc(0)]) || typeof board[Math.trunc(0)] === 'string' ? board[Math.trunc(0)].length : Object.keys(board[Math.trunc(0)] ?? {}).length);
  let i: number = 0;
  while ((i < len_board)) {
    let j: number = 0;
    while ((j < len_board_column)) {
      let key: number = get_point_key(len_board, len_board_column, i, j);
      let visited: any[] = [...[], key];
      if (search_from(board, word, i, j, 0, visited)) {
        return true;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return false;
}
function main() {
  let board: string[][] = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]];
  console.log(_str(word_exists(board, "ABCCED")));
  console.log(_str(word_exists(board, "SEE")));
  console.log(_str(word_exists(board, "ABCB")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

