// Generated by Mochi v0.10.59 on 2025-08-06 16:07:06 GMT+7

function valid_coloring(neighbours: number[], colored_vertices: number[], color: number): boolean {
  let i: number = 0;
  while ((i < Number(Array.isArray(neighbours) || typeof neighbours === 'string' ? neighbours.length : Object.keys(neighbours ?? {}).length))) {
    if (((neighbours[i] == 1) && (colored_vertices[i] == color))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function util_color(graph: number[][], max_colors: number, colored_vertices: number[], index: number): boolean {
  if ((index == Number(Array.isArray(graph) || typeof graph === 'string' ? graph.length : Object.keys(graph ?? {}).length))) {
    return true;
  }
  let c: number = 0;
  while ((c < max_colors)) {
    if (valid_coloring(graph[index], colored_vertices, c)) {
      colored_vertices[index] = c;
      if (util_color(graph, max_colors, colored_vertices, (index + 1))) {
        return true;
      }
      colored_vertices[index] = -1;
    }
    c = (c + 1);
  }
  return false;
}
function color(graph: number[][], max_colors: number): number[] {
  let colored_vertices: number[] = [];
  let i: number = 0;
  while ((i < Number(Array.isArray(graph) || typeof graph === 'string' ? graph.length : Object.keys(graph ?? {}).length))) {
    colored_vertices.push(-1);
    i = (i + 1);
  }
  if (util_color(graph, max_colors, colored_vertices, 0)) {
    return colored_vertices;
  }
  return [];
}
let graph: number[][] = [[0, 1, 0, 0, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (color(graph, 3)).join(' ') + "]"));
  console.log(_str("\n"));
  console.log(_str(Number(Array.isArray(color(graph, 2)) || typeof color(graph, 2) === 'string' ? color(graph, 2).length : Object.keys(color(graph, 2) ?? {}).length)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

