// Generated by Mochi v0.10.59 on 2025-08-06 16:07:18 GMT+7

function valid_connection(graph: number[][], next_ver: number, curr_ind: number, path: number[]): boolean {
  if ((graph[Math.trunc(path[Math.trunc((curr_ind - 1))])][next_ver] == 0)) {
    return false;
  }
  for (const v of path) {
    if ((v == next_ver)) {
      return false;
    }
  }
  return true;
}
function util_hamilton_cycle(graph: number[][], path: number[], curr_ind: number): boolean {
  if ((curr_ind == Number(Array.isArray(graph) || typeof graph === 'string' ? graph.length : Object.keys(graph ?? {}).length))) {
    return (graph[Math.trunc(path[Math.trunc((curr_ind - 1))])][Math.trunc(path[Math.trunc(0)])] == 1);
  }
  let next_ver: number = 0;
  while ((next_ver < Number(Array.isArray(graph) || typeof graph === 'string' ? graph.length : Object.keys(graph ?? {}).length))) {
    if (valid_connection(graph, next_ver, curr_ind, path)) {
      path[curr_ind] = next_ver;
      if (util_hamilton_cycle(graph, path, (curr_ind + 1))) {
        return true;
      }
      path[curr_ind] = -1;
    }
    next_ver = (next_ver + 1);
  }
  return false;
}
function hamilton_cycle(graph: number[][], start_index: number): number[] {
  let path: number[] = [];
  let i: number = 0;
  while ((i < (Number(Array.isArray(graph) || typeof graph === 'string' ? graph.length : Object.keys(graph ?? {}).length) + 1))) {
    path[i] = -1;
    i = (i + 1);
  }
  path[0] = start_index;
  let last: number = (Number(Array.isArray(path) || typeof path === 'string' ? path.length : Object.keys(path ?? {}).length) - 1);
  path[last] = start_index;
  if (util_hamilton_cycle(graph, path, 1)) {
    return path;
  }
  return [];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

