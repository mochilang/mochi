// Generated by Mochi v0.10.59 on 2025-08-06 16:10:31 GMT+7

function is_safe(grid: number[][], row: number, column: number, n: number): boolean {
  for (let i = 0; i < 9; i++) {
    if (((grid[row][i] == n) || (grid[i][column] == n))) {
      return false;
    }
  }
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if ((grid[Math.trunc(((row - (row % 3)) + i))][Math.trunc(((column - (column % 3)) + j))] == n)) {
        return false;
      }
    }
  }
  return true;
}
function find_empty_location(grid: number[][]): number[] {
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      if ((grid[i][j] == 0)) {
        return [i, j];
      }
    }
  }
  return [];
}
function sudoku(grid: number[][]): boolean {
  let loc: number[] = find_empty_location(grid);
  if ((Number(Array.isArray(loc) || typeof loc === 'string' ? loc.length : Object.keys(loc ?? {}).length) == 0)) {
    return true;
  }
  let row: number = loc[Math.trunc(0)];
  let column: number = loc[Math.trunc(1)];
  for (let digit = 1; digit < 10; digit++) {
    if (is_safe(grid, row, column, digit)) {
      grid[row][column] = digit;
      if (sudoku(grid)) {
        return true;
      }
      grid[row][column] = 0;
    }
  }
  return false;
}
function print_solution(grid: number[][]) {
  for (let r = 0; r < Number(Array.isArray(grid) || typeof grid === 'string' ? grid.length : Object.keys(grid ?? {}).length); r++) {
    let line: string = "";
    for (let c = 0; c < Number(Array.isArray(grid[r]) || typeof grid[r] === 'string' ? grid[r].length : Object.keys(grid[r] ?? {}).length); c++) {
      line = (line + _str(grid[r][c]));
      if ((c < (Number(Array.isArray(grid[r]) || typeof grid[r] === 'string' ? grid[r].length : Object.keys(grid[r] ?? {}).length) - 1))) {
        line = (line + " ");
      }
    }
    console.log(_str(line));
  }
}
let initial_grid: number[][] = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]];
let no_solution: number[][] = [[5, 0, 6, 5, 0, 8, 4, 0, 3], [5, 2, 0, 0, 0, 0, 0, 0, 2], [1, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]];
let idx: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let examples: number[][][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
examples = [initial_grid, no_solution]
  while ((idx < Number(Array.isArray(examples) || typeof examples === 'string' ? examples.length : Object.keys(examples ?? {}).length))) {
    console.log(_str("\nExample grid:\n===================="));
    print_solution(examples[idx]);
    console.log(_str("\nExample grid solution:"));
    if (sudoku(examples[idx])) {
      print_solution(examples[idx]);
    } else {
      console.log(_str("Cannot find a solution."));
    }
    idx = (idx + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

