// Generated by Mochi v0.10.59 on 2025-08-06 16:10:35 GMT+7

function sum_list(nums: number[]): number {
  let s: number = 0;
  for (const n of nums) {
    s = (s + n);
  }
  return s;
}
function create_state_space_tree(nums: number[], max_sum: number, num_index: number, path: number[], curr_sum: number, remaining_sum: number): number[][] {
  let result: number[][] = [];
  if (((curr_sum > max_sum) || ((curr_sum + remaining_sum) < max_sum))) {
    return result;
  }
  if ((curr_sum == max_sum)) {
    result.push(path);
    return result;
  }
  let index: number = num_index;
  while ((index < Number(Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
    let value: number = nums[index];
    let subres: number[][] = create_state_space_tree(nums, max_sum, (index + 1), [...path, value], (curr_sum + value), (remaining_sum - value));
    let j: number = 0;
    while ((j < Number(Array.isArray(subres) || typeof subres === 'string' ? subres.length : Object.keys(subres ?? {}).length))) {
      result.push(subres[j]);
      j = (j + 1);
    }
    index = (index + 1);
  }
  return result;
}
function generate_sum_of_subsets_solutions(nums: number[], max_sum: number): number[][] {
  let total: number = sum_list(nums);
  return create_state_space_tree(nums, max_sum, 0, [], 0, total);
}
function main() {
  console.log(JSON.stringify(generate_sum_of_subsets_solutions([3, 34, 4, 12, 5, 2], 9), null, 2));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

