// Generated by Mochi v0.10.59 on 2025-08-06 16:07:37 GMT+7

function create_board(n: number): number[][] {
  let board: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(0);
      j = (j + 1);
    }
    board.push(row);
    i = (i + 1);
  }
  return board;
}
function is_safe(board: number[][], row: number, column: number): boolean {
  let n: number = Number(Array.isArray(board) || typeof board === 'string' ? board.length : Object.keys(board ?? {}).length);
  let i: number = 0;
  while ((i < row)) {
    if ((board[i][column] == 1)) {
      return false;
    }
    i = (i + 1);
  }
  i = (row - 1);
  let j: number = (column - 1);
  while (((i >= 0) && (j >= 0))) {
    if ((board[i][j] == 1)) {
      return false;
    }
    i = (i - 1);
    j = (j - 1);
  }
  i = (row - 1);
  j = (column + 1);
  while (((i >= 0) && (j < n))) {
    if ((board[i][j] == 1)) {
      return false;
    }
    i = (i - 1);
    j = (j + 1);
  }
  return true;
}
function row_string(row: number[]): string {
  let s: string = "";
  let j: number = 0;
  while ((j < Number(Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
    if ((row[j] == 1)) {
      s = (s + "Q ");
    } else {
      s = (s + ". ");
    }
    j = (j + 1);
  }
  return s;
}
function printboard(board: number[][]) {
  let i: number = 0;
  while ((i < Number(Array.isArray(board) || typeof board === 'string' ? board.length : Object.keys(board ?? {}).length))) {
    console.log(_str(row_string(board[i])));
    i = (i + 1);
  }
}
function solve(board: number[][], row: number): number {
  if ((row >= Number(Array.isArray(board) || typeof board === 'string' ? board.length : Object.keys(board ?? {}).length))) {
    printboard(board);
    console.log(_str(""));
    return 1;
  }
  let count: number = 0;
  let i: number = 0;
  while ((i < Number(Array.isArray(board) || typeof board === 'string' ? board.length : Object.keys(board ?? {}).length))) {
    if (is_safe(board, row, i)) {
      board[row][i] = 1;
      count = (count + solve(board, (row + 1)));
      board[row][i] = 0;
    }
    i = (i + 1);
  }
  return count;
}
function n_queens(n: number): number {
  let board: number[][] = create_board(n);
  let total: number = solve(board, 0);
  console.log(_str(("The total number of solutions are: " + _str(total))));
  return total;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  n_queens(4);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

