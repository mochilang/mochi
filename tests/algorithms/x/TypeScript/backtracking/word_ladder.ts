// Generated by Mochi v0.10.59 on 2025-08-06 16:10:43 GMT+7

let alphabet: string = "abcdefghijklmnopqrstuvwxyz";
function contains(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((xs[i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function remove_item(xs: string[], x: string): string[] {
  let res: string[] = [];
  let removed: boolean = false;
  let i: number = 0;
  while ((i < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((!removed && (xs[i] == x))) {
      removed = true;
    } else {
      res.push(xs[i]);
    }
    i = (i + 1);
  }
  return res;
}
function word_ladder(current: string, path: string[], target: string, words: string[]): string[] {
  if ((current == target)) {
    return path;
  }
  let i: number = 0;
  while ((i < Number(Array.isArray(current) || typeof current === 'string' ? current.length : Object.keys(current ?? {}).length))) {
    let j: number = 0;
    while ((j < Number(Array.isArray(alphabet) || typeof alphabet === 'string' ? alphabet.length : Object.keys(alphabet ?? {}).length))) {
      let c: string = (alphabet).substring(j, (j + 1));
      let transformed: string = (((current).substring(0, i) + c) + (current).substring((i + 1), Number(Array.isArray(current) || typeof current === 'string' ? current.length : Object.keys(current ?? {}).length)));
      if (words.includes(transformed)) {
        let new_words: string[] = remove_item(words, transformed);
        let new_path: any[] = [...path, transformed];
        let result: string[] = word_ladder(transformed, new_path, target, new_words);
        if ((Number(Array.isArray(result) || typeof result === 'string' ? result.length : Object.keys(result ?? {}).length) > 0)) {
          return result;
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return [];
}
function main() {
  let w1: string[] = ["hot", "dot", "dog", "lot", "log", "cog"];
  console.log(_str(_str(word_ladder("hit", ["hit"], "cog", w1))));
  let w2: string[] = ["hot", "dot", "dog", "lot", "log"];
  console.log(_str(_str(word_ladder("hit", ["hit"], "cog", w2))));
  let w3: string[] = ["load", "goad", "gold", "lead", "lord"];
  console.log(_str(_str(word_ladder("lead", ["lead"], "gold", w3))));
  let w4: string[] = ["came", "cage", "code", "cade", "gave"];
  console.log(_str(_str(word_ladder("game", ["game"], "code", w4))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

