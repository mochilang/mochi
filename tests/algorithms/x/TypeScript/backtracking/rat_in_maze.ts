// Generated by Mochi v0.10.59 on 2025-08-06 16:10:26 GMT+7

function run_maze(maze: number[][], i: number, j: number, dr: number, dc: number, sol: number[][]): boolean {
  let size: number = Number(Array.isArray(maze) || typeof maze === 'string' ? maze.length : Object.keys(maze ?? {}).length);
  if ((((i == dr) && (j == dc)) && (maze[i][j] == 0))) {
    sol[i][j] = 0;
    return true;
  }
  let lower_flag: boolean = ((i >= 0) && (j >= 0));
  let upper_flag: boolean = ((i < size) && (j < size));
  if ((lower_flag && upper_flag)) {
    let block_flag: boolean = ((sol[i][j] == 1) && (maze[i][j] == 0));
    if (block_flag) {
      sol[i][j] = 0;
      if ((((run_maze(maze, (i + 1), j, dr, dc, sol) || run_maze(maze, i, (j + 1), dr, dc, sol)) || run_maze(maze, (i - 1), j, dr, dc, sol)) || run_maze(maze, i, (j - 1), dr, dc, sol))) {
        return true;
      }
      sol[i][j] = 1;
      return false;
    }
  }
  return false;
}
function solve_maze(maze: number[][], sr: number, sc: number, dr: number, dc: number): number[][] {
  let size: number = Number(Array.isArray(maze) || typeof maze === 'string' ? maze.length : Object.keys(maze ?? {}).length);
  if (!((((((((0 <= sr) && (sr < size)) && (0 <= sc)) && (sc < size)) && (0 <= dr)) && (dr < size)) && (0 <= dc)) && (dc < size))) {
    panic("Invalid source or destination coordinates");
  }
  let sol: number[][] = [];
  let i: number = 0;
  while ((i < size)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < size)) {
      row.push(1);
      j = (j + 1);
    }
    sol.push(row);
    i = (i + 1);
  }
  let solved: boolean = run_maze(maze, sr, sc, dr, dc, sol);
  if (solved) {
    return sol;
  } else {
    panic("No solution exists!");
  }
}
let maze: number[][] = [[0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let n: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
n = (Number(Array.isArray(maze) || typeof maze === 'string' ? maze.length : Object.keys(maze ?? {}).length) - 1)
  console.log(_str(_str(solve_maze(maze, 0, 0, n, n))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

