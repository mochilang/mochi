// Generated by Mochi v0.10.59 on 2025-08-07 08:55:36 GMT+7

function make_list(n: number, value: number): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    result.push(value);
    i = (i + 1);
  }
  return result;
}
function min_value(arr: number[]): number {
  let m: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(arr))) {
    if ((arr[(i) < 0 ? arr.length + (i) : i] < m)) {
      m = arr[(i) < 0 ? arr.length + (i) : i];
    }
    i = (i + 1);
  }
  return m;
}
function max_value(arr: number[]): number {
  let m: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(arr))) {
    if ((arr[(i) < 0 ? arr.length + (i) : i] > m)) {
      m = arr[(i) < 0 ? arr.length + (i) : i];
    }
    i = (i + 1);
  }
  return m;
}
function pigeon_sort(array: number[]): number[] {
  if ((_len(array) == 0)) {
    return array;
  }
  let mn: number = min_value(array);
  let mx: number = max_value(array);
  let holes_range: number = ((mx - mn) + 1);
  let holes: number[] = make_list(holes_range, 0);
  let holes_repeat: number[] = make_list(holes_range, 0);
  let i: number = 0;
  while ((i < _len(array))) {
    let index: number = (array[(i) < 0 ? array.length + (i) : i] - mn);
    holes[(index) < 0 ? holes.length + (index) : index] = array[(i) < 0 ? array.length + (i) : i];
    holes_repeat[(index) < 0 ? holes_repeat.length + (index) : index] = (holes_repeat[(index) < 0 ? holes_repeat.length + (index) : index] + 1);
    i = (i + 1);
  }
  let array_index: number = 0;
  let h: number = 0;
  while ((h < holes_range)) {
    while ((holes_repeat[(h) < 0 ? holes_repeat.length + (h) : h] > 0)) {
      array[(array_index) < 0 ? array.length + (array_index) : array_index] = holes[(h) < 0 ? holes.length + (h) : h];
      array_index = (array_index + 1);
      holes_repeat[(h) < 0 ? holes_repeat.length + (h) : h] = (holes_repeat[(h) < 0 ? holes_repeat.length + (h) : h] - 1);
    }
    h = (h + 1);
  }
  return array;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(pigeon_sort([0, 5, 3, 2, 2]))));
  console.log(_str(_str(pigeon_sort([]))));
  console.log(_str(_str(pigeon_sort([-2, -5, -45]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

