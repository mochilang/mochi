// Generated by Mochi v0.10.59 on 2025-08-07 08:55:51 GMT+7

export interface Edges { a: string[]; b: string[]; c: any[]; d: any[]; e: any[] }
let edges: Edges = {"a": ["c", "b"], "b": ["d", "e"], "c": [], "d": [], "e": []};
let vertices: string[] = ["a", "b", "c", "d", "e"];
function topological_sort(start: string, visited: Record<string, boolean>, sort: string[]): string[] {
  visited[(start) < 0 ? visited.length + (start) : start] = true;
  let neighbors = edges[(start) < 0 ? edges.length + (start) : start];
  let i: number = 0;
  while ((i < _len(neighbors))) {
    let neighbor = neighbors[(i) < 0 ? neighbors.length + (i) : i];
    if (!(neighbor in visited)) {
      sort = topological_sort(neighbor, visited, sort);
    }
    i = (i + 1);
  }
  sort.push(start);
  if ((_len(visited) != _len(vertices))) {
    let j: number = 0;
    while ((j < _len(vertices))) {
      let v: string = vertices[(j) < 0 ? vertices.length + (j) : j];
      if (!(v in visited)) {
        sort = topological_sort(v, visited, sort);
      }
      j = (j + 1);
    }
  }
  return sort;
}
function main() {
  let result: string[] = topological_sort("a", {}, []);
  console.log(_str(_str(result)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

