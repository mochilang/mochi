// Generated by Mochi v0.10.59 on 2025-08-07 08:55:35 GMT+7

function bisect_left(stacks: number[][], value: number): number {
  let low: number = 0;
  let high: number = _len(stacks);
  while ((low < high)) {
    let mid: number = Math.trunc((low + high) / 2);
    let stack: number[] = stacks[(mid) < 0 ? stacks.length + (mid) : mid];
    let top_idx: number = (_len(stack) - 1);
    let top: number = stack[(top_idx) < 0 ? stack.length + (top_idx) : top_idx];
    if ((top < value)) {
      low = (mid + 1);
    } else {
      high = mid;
    }
  }
  return low;
}
function reverse_list(src: number[]): number[] {
  let res: number[] = [];
  let i: number = (_len(src) - 1);
  while ((i >= 0)) {
    res.push(src[(i) < 0 ? src.length + (i) : i]);
    i = (i - 1);
  }
  return res;
}
function patience_sort(collection: number[]): number[] {
  let stacks: number[][] = [];
  let i: number = 0;
  while ((i < _len(collection))) {
    let element: number = collection[(i) < 0 ? collection.length + (i) : i];
    let idx: number = bisect_left(stacks, element);
    if ((idx != _len(stacks))) {
      let stack: number[] = stacks[(idx) < 0 ? stacks.length + (idx) : idx];
      stacks[(idx) < 0 ? stacks.length + (idx) : idx] = [...stack, element];
    } else {
      let new_stack: number[] = [element];
      stacks.push(new_stack);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(stacks))) {
    stacks[(i) < 0 ? stacks.length + (i) : i] = reverse_list(stacks[(i) < 0 ? stacks.length + (i) : i]);
    i = (i + 1);
  }
  let indices: number[] = [];
  i = 0;
  while ((i < _len(stacks))) {
    indices.push(0);
    i = (i + 1);
  }
  let total: number = 0;
  i = 0;
  while ((i < _len(stacks))) {
    total = (total + _len(stacks[(i) < 0 ? stacks.length + (i) : i]));
    i = (i + 1);
  }
  let result: number[] = [];
  let count: number = 0;
  while ((count < total)) {
    let min_val: number = 0;
    let min_stack: number = -1;
    let j: number = 0;
    while ((j < _len(stacks))) {
      let idx: number = indices[(j) < 0 ? indices.length + (j) : j];
      if ((idx < _len(stacks[(j) < 0 ? stacks.length + (j) : j]))) {
        let val: number = stacks[(j) < 0 ? stacks.length + (j) : j][(idx) < 0 ? stacks[(j) < 0 ? stacks.length + (j) : j].length + (idx) : idx];
        if ((min_stack < 0)) {
          min_val = val;
          min_stack = j;
        } else {
          if ((val < min_val)) {
            min_val = val;
            min_stack = j;
          }
        }
      }
      j = (j + 1);
    }
    result.push(min_val);
    indices[(min_stack) < 0 ? indices.length + (min_stack) : min_stack] = (indices[(min_stack) < 0 ? indices.length + (min_stack) : min_stack] + 1);
    count = (count + 1);
  }
  i = 0;
  while ((i < _len(result))) {
    collection[(i) < 0 ? collection.length + (i) : i] = result[(i) < 0 ? result.length + (i) : i];
    i = (i + 1);
  }
  return collection;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(patience_sort([1, 9, 5, 21, 17, 6]))));
  console.log(_str(_str(patience_sort([]))));
  console.log(_str(_str(patience_sort([-3, -17, -48]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

