// Generated by Mochi v0.10.59 on 2025-08-07 08:55:48 GMT+7

function stooge(arr: number[], i: number, h: number) {
  if ((i >= h)) {
    return;
  }
  if ((arr[(i) < 0 ? arr.length + (i) : i] > arr[(h) < 0 ? arr.length + (h) : h])) {
    let tmp: number = arr[(i) < 0 ? arr.length + (i) : i];
    arr[(i) < 0 ? arr.length + (i) : i] = arr[(h) < 0 ? arr.length + (h) : h];
    arr[(h) < 0 ? arr.length + (h) : h] = tmp;
  }
  if ((((h - i) + 1) > 2)) {
    let t: number = Math.trunc(Math.trunc(((h - i) + 1) / 3));
    stooge(arr, i, (h - t));
    stooge(arr, (i + t), h);
    stooge(arr, i, (h - t));
  }
}
function stooge_sort(arr: number[]): number[] {
  stooge(arr, 0, (_len(arr) - 1));
  return arr;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(stooge_sort([18, 0, -7, -1, 2, 2]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

