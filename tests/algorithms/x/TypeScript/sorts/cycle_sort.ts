// Generated by Mochi v0.10.59 on 2025-08-07 08:55:16 GMT+7

function cycle_sort(arr: number[]): number[] {
  let n: number = _len(arr);
  let cycle_start: number = 0;
  while ((cycle_start < (n - 1))) {
    let item: number = arr[(cycle_start) < 0 ? arr.length + (cycle_start) : cycle_start];
    let pos: number = cycle_start;
    let i: number = (cycle_start + 1);
    while ((i < n)) {
      if ((arr[(i) < 0 ? arr.length + (i) : i] < item)) {
        pos = (pos + 1);
      }
      i = (i + 1);
    }
    if ((pos == cycle_start)) {
      cycle_start = (cycle_start + 1);
      continue
    }
    while ((item == arr[(pos) < 0 ? arr.length + (pos) : pos])) {
      pos = (pos + 1);
    }
    let temp: number = arr[(pos) < 0 ? arr.length + (pos) : pos];
    arr[(pos) < 0 ? arr.length + (pos) : pos] = item;
    item = temp;
    while ((pos != cycle_start)) {
      pos = cycle_start;
      i = (cycle_start + 1);
      while ((i < n)) {
        if ((arr[(i) < 0 ? arr.length + (i) : i] < item)) {
          pos = (pos + 1);
        }
        i = (i + 1);
      }
      while ((item == arr[(pos) < 0 ? arr.length + (pos) : pos])) {
        pos = (pos + 1);
      }
      let temp2: number = arr[(pos) < 0 ? arr.length + (pos) : pos];
      arr[(pos) < 0 ? arr.length + (pos) : pos] = item;
      item = temp2;
    }
    cycle_start = (cycle_start + 1);
  }
  return arr;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(cycle_sort([4, 3, 2, 1]))));
  console.log(_str(_str(cycle_sort([-4, 20, 0, -50, 100, -1]))));
  console.log(_str(_str(cycle_sort([]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

