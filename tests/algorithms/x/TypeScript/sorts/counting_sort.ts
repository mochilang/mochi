// Generated by Mochi v0.10.59 on 2025-08-07 08:55:15 GMT+7

function max_val(arr: number[]): number {
  let m: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(arr))) {
    if ((arr[(i) < 0 ? arr.length + (i) : i] > m)) {
      m = arr[(i) < 0 ? arr.length + (i) : i];
    }
    i = (i + 1);
  }
  return m;
}
function min_val(arr: number[]): number {
  let m: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(arr))) {
    if ((arr[(i) < 0 ? arr.length + (i) : i] < m)) {
      m = arr[(i) < 0 ? arr.length + (i) : i];
    }
    i = (i + 1);
  }
  return m;
}
function counting_sort(collection: number[]): number[] {
  if ((_len(collection) == 0)) {
    return [];
  }
  let coll_len: number = _len(collection);
  let coll_max: number = max_val(collection);
  let coll_min: number = min_val(collection);
  let counting_arr_length: number = ((coll_max + 1) - coll_min);
  let counting_arr: number[] = [];
  let i: number = 0;
  while ((i < counting_arr_length)) {
    counting_arr.push(0);
    i = (i + 1);
  }
  i = 0;
  while ((i < coll_len)) {
    let _number: number = collection[(i) < 0 ? collection.length + (i) : i];
    counting_arr[((_number - coll_min)) < 0 ? counting_arr.length + ((_number - coll_min)) : (_number - coll_min)] = (counting_arr[(Math.trunc((_number - coll_min))) < 0 ? counting_arr.length + (Math.trunc((_number - coll_min))) : Math.trunc((_number - coll_min))] + 1);
    i = (i + 1);
  }
  i = 1;
  while ((i < counting_arr_length)) {
    counting_arr[(i) < 0 ? counting_arr.length + (i) : i] = (counting_arr[(i) < 0 ? counting_arr.length + (i) : i] + counting_arr[(Math.trunc((i - 1))) < 0 ? counting_arr.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))]);
    i = (i + 1);
  }
  let ordered: number[] = [];
  i = 0;
  while ((i < coll_len)) {
    ordered.push(0);
    i = (i + 1);
  }
  let idx: number = (coll_len - 1);
  while ((idx >= 0)) {
    let _number: number = collection[(idx) < 0 ? collection.length + (idx) : idx];
    let pos: number = (counting_arr[(Math.trunc((_number - coll_min))) < 0 ? counting_arr.length + (Math.trunc((_number - coll_min))) : Math.trunc((_number - coll_min))] - 1);
    ordered[(pos) < 0 ? ordered.length + (pos) : pos] = _number;
    counting_arr[((_number - coll_min)) < 0 ? counting_arr.length + ((_number - coll_min)) : (_number - coll_min)] = (counting_arr[(Math.trunc((_number - coll_min))) < 0 ? counting_arr.length + (Math.trunc((_number - coll_min))) : Math.trunc((_number - coll_min))] - 1);
    idx = (idx - 1);
  }
  return ordered;
}
let ascii_chars: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
function chr(code: number): string {
  if ((code == 10)) {
    return "\n";
  }
  if ((code == 13)) {
    return "\r";
  }
  if ((code == 9)) {
    return "\t";
  }
  if (((code >= 32) && (code < 127))) {
    return ascii_chars.slice((code - 32), (code - 31));
  }
  return "";
}
function ord(ch: string): number {
  if ((ch == "\n")) {
    return 10;
  }
  if ((ch == "\r")) {
    return 13;
  }
  if ((ch == "\t")) {
    return 9;
  }
  let i: number = 0;
  while ((i < _len(ascii_chars))) {
    if ((ascii_chars.slice(i, (i + 1)) == ch)) {
      return (32 + i);
    }
    i = (i + 1);
  }
  return 0;
}
function counting_sort_string(s: string): string {
  let codes: number[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    codes.push(ord(s.slice(i, (i + 1))));
    i = (i + 1);
  }
  let sorted_codes: number[] = counting_sort(codes);
  let res: string = "";
  i = 0;
  while ((i < _len(sorted_codes))) {
    res = (res + chr(sorted_codes[(i) < 0 ? sorted_codes.length + (i) : i]));
    i = (i + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let example1: number[]
let example2: number[]
let example3: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
example1 = counting_sort([0, 5, 3, 2, 2])
  console.log(_str(_str(example1)));
example2 = counting_sort([])
  console.log(_str(_str(example2)));
example3 = counting_sort([-2, -5, -45])
  console.log(_str(_str(example3)));
  console.log(_str(counting_sort_string("thisisthestring")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

