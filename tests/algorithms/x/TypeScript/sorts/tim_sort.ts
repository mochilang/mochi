// Generated by Mochi v0.10.59 on 2025-08-07 08:55:50 GMT+7

function copy_list(xs: number[]): number[] {
  let res: number[] = [];
  let k: number = 0;
  while ((k < _len(xs))) {
    res.push(xs[(k) < 0 ? xs.length + (k) : k]);
    k = (k + 1);
  }
  return res;
}
function insertion_sort(xs: number[]): number[] {
  let arr: number[] = copy_list(xs);
  let idx: number = 1;
  while ((idx < _len(arr))) {
    let value: number = arr[(idx) < 0 ? arr.length + (idx) : idx];
    let jdx: number = (idx - 1);
    while (((jdx >= 0) && (arr[(jdx) < 0 ? arr.length + (jdx) : jdx] > value))) {
      arr[((jdx + 1)) < 0 ? arr.length + ((jdx + 1)) : (jdx + 1)] = arr[(jdx) < 0 ? arr.length + (jdx) : jdx];
      jdx = (jdx - 1);
    }
    arr[((jdx + 1)) < 0 ? arr.length + ((jdx + 1)) : (jdx + 1)] = value;
    idx = (idx + 1);
  }
  return arr;
}
function merge(left: number[], right: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  let j: number = 0;
  while (((i < _len(left)) && (j < _len(right)))) {
    if ((left[(i) < 0 ? left.length + (i) : i] < right[(j) < 0 ? right.length + (j) : j])) {
      result.push(left[(i) < 0 ? left.length + (i) : i]);
      i = (i + 1);
    } else {
      result.push(right[(j) < 0 ? right.length + (j) : j]);
      j = (j + 1);
    }
  }
  while ((i < _len(left))) {
    result.push(left[(i) < 0 ? left.length + (i) : i]);
    i = (i + 1);
  }
  while ((j < _len(right))) {
    result.push(right[(j) < 0 ? right.length + (j) : j]);
    j = (j + 1);
  }
  return result;
}
function tim_sort(xs: number[]): number[] {
  let n: number = _len(xs);
  let runs: number[][] = [];
  let sorted_runs: number[][] = [];
  let current: number[] = [];
  current.push(xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)]);
  let i: number = 1;
  while ((i < n)) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] < xs[(Math.trunc((i - 1))) < 0 ? xs.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))])) {
      runs.push(copy_list(current));
      current = [];
      current.push(xs[(i) < 0 ? xs.length + (i) : i]);
    } else {
      current.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  runs.push(copy_list(current));
  let r: number = 0;
  while ((r < _len(runs))) {
    sorted_runs.push(insertion_sort(runs[(r) < 0 ? runs.length + (r) : r]));
    r = (r + 1);
  }
  let result: number[] = [];
  r = 0;
  while ((r < _len(sorted_runs))) {
    result = merge(result, sorted_runs[(r) < 0 ? sorted_runs.length + (r) : r]);
    r = (r + 1);
  }
  return result;
}
function list_to_string(xs: number[]): string {
  let s: string = "[";
  let k: number = 0;
  while ((k < _len(xs))) {
    s = (s + _str(xs[(k) < 0 ? xs.length + (k) : k]));
    if ((k < (_len(xs) - 1))) {
      s = (s + ", ");
    }
    k = (k + 1);
  }
  return (s + "]");
}
let sample2: number[] = [3, 2, 1];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let sample: number[]
let sorted_sample: number[]
let sorted_sample2: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
sample = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
sorted_sample = tim_sort(sample)
  console.log(_str(list_to_string(sorted_sample)));
sorted_sample2 = tim_sort(sample2)
  console.log(_str(list_to_string(sorted_sample2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

