// Generated by Mochi v0.10.59 on 2025-08-07 08:55:10 GMT+7

function bubble_sort_iterative(collection: number[]): number[] {
  let n: number = _len(collection);
  while ((n > 0)) {
    let swapped: boolean = false;
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((collection[(j) < 0 ? collection.length + (j) : j] > collection[(Math.trunc((j + 1))) < 0 ? collection.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))])) {
        let temp: number = collection[(j) < 0 ? collection.length + (j) : j];
        collection[(j) < 0 ? collection.length + (j) : j] = collection[(Math.trunc((j + 1))) < 0 ? collection.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))];
        collection[((j + 1)) < 0 ? collection.length + ((j + 1)) : (j + 1)] = temp;
        swapped = true;
      }
      j = (j + 1);
    }
    if (!swapped) {
      break
    }
    n = (n - 1);
  }
  return collection;
}
function bubble_sort_recursive(collection: number[]): number[] {
  let n: number = _len(collection);
  let swapped: boolean = false;
  let i: number = 0;
  while ((i < (n - 1))) {
    if ((collection[(i) < 0 ? collection.length + (i) : i] > collection[(Math.trunc((i + 1))) < 0 ? collection.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))])) {
      let temp: number = collection[(i) < 0 ? collection.length + (i) : i];
      collection[(i) < 0 ? collection.length + (i) : i] = collection[(Math.trunc((i + 1))) < 0 ? collection.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))];
      collection[((i + 1)) < 0 ? collection.length + ((i + 1)) : (i + 1)] = temp;
      swapped = true;
    }
    i = (i + 1);
  }
  if (swapped) {
    return bubble_sort_recursive(collection);
  }
  return collection;
}
function copy_list(xs: number[]): number[] {
  let out: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    out.push(xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return out;
}
function list_eq(a: number[], b: number[]): boolean {
  if ((_len(a) != _len(b))) {
    return false;
  }
  let k: number = 0;
  while ((k < _len(a))) {
    if ((a[(k) < 0 ? a.length + (k) : k] != b[(k) < 0 ? b.length + (k) : k])) {
      return false;
    }
    k = (k + 1);
  }
  return true;
}
function test_bubble_sort() {
  let example: number[] = [0, 5, 2, 3, 2];
  let expected: number[] = [0, 2, 2, 3, 5];
  if (!list_eq(bubble_sort_iterative(copy_list(example)), expected)) {
    _panic("iterative failed");
  }
  if (!list_eq(bubble_sort_recursive(copy_list(example)), expected)) {
    _panic("recursive failed");
  }
  let empty: number[] = [];
  if ((_len(bubble_sort_iterative(copy_list(empty))) != 0)) {
    _panic("empty iterative failed");
  }
  if ((_len(bubble_sort_recursive(copy_list(empty))) != 0)) {
    _panic("empty recursive failed");
  }
}
function main() {
  test_bubble_sort();
  let arr: number[] = [5, 1, 4, 2, 8];
  console.log(_str(_str(bubble_sort_iterative(copy_list(arr)))));
  console.log(_str(_str(bubble_sort_recursive(copy_list(arr)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

