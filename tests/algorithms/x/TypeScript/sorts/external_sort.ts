// Generated by Mochi v0.10.59 on 2025-08-07 08:55:20 GMT+7

function subarray(xs: number[], start: number, end: number): number[] {
  let result: number[] = [];
  let k: number = start;
  while ((k < end)) {
    result.push(xs[(k) < 0 ? xs.length + (k) : k]);
    k = (k + 1);
  }
  return result;
}
function merge(left_half: number[], right_half: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  let j: number = 0;
  while (((i < _len(left_half)) && (j < _len(right_half)))) {
    if ((left_half[(i) < 0 ? left_half.length + (i) : i] < right_half[(j) < 0 ? right_half.length + (j) : j])) {
      result.push(left_half[(i) < 0 ? left_half.length + (i) : i]);
      i = (i + 1);
    } else {
      result.push(right_half[(j) < 0 ? right_half.length + (j) : j]);
      j = (j + 1);
    }
  }
  while ((i < _len(left_half))) {
    result.push(left_half[(i) < 0 ? left_half.length + (i) : i]);
    i = (i + 1);
  }
  while ((j < _len(right_half))) {
    result.push(right_half[(j) < 0 ? right_half.length + (j) : j]);
    j = (j + 1);
  }
  return result;
}
function merge_sort(array: number[]): number[] {
  if ((_len(array) <= 1)) {
    return array;
  }
  let middle: number = Math.trunc(_len(array) / 2);
  let left_half: number[] = subarray(array, 0, middle);
  let right_half: number[] = subarray(array, middle, _len(array));
  let sorted_left: number[] = merge_sort(left_half);
  let sorted_right: number[] = merge_sort(right_half);
  return merge(sorted_left, sorted_right);
}
function split_into_blocks(data: number[], block_size: number): number[][] {
  let blocks: number[][] = [];
  let i: number = 0;
  while ((i < _len(data))) {
    let end: number = (((i + block_size) < _len(data)) ? (i + block_size) : _len(data));
    let block: number[] = subarray(data, i, end);
    let sorted_block: number[] = merge_sort(block);
    blocks.push(sorted_block);
    i = end;
  }
  return blocks;
}
function merge_blocks(blocks: number[][]): number[] {
  let num_blocks: number = _len(blocks);
  let indices: number[] = [];
  let i: number = 0;
  while ((i < num_blocks)) {
    indices.push(0);
    i = (i + 1);
  }
  let result: number[] = [];
  let done: boolean = false;
  while (!done) {
    done = true;
    let min_val: number = 0;
    let min_block: number = (0 - 1);
    let j: number = 0;
    while ((j < num_blocks)) {
      let idx: number = indices[(j) < 0 ? indices.length + (j) : j];
      if ((idx < _len(blocks[(j) < 0 ? blocks.length + (j) : j]))) {
        let val: number = blocks[(j) < 0 ? blocks.length + (j) : j][(idx) < 0 ? blocks[(j) < 0 ? blocks.length + (j) : j].length + (idx) : idx];
        if (((min_block == (0 - 1)) || (val < min_val))) {
          min_val = val;
          min_block = j;
        }
        done = false;
      }
      j = (j + 1);
    }
    if (!done) {
      result.push(min_val);
      indices[(min_block) < 0 ? indices.length + (min_block) : min_block] = (indices[(min_block) < 0 ? indices.length + (min_block) : min_block] + 1);
    }
  }
  return result;
}
function external_sort(data: number[], block_size: number): number[] {
  let blocks: number[][] = split_into_blocks(data, block_size);
  return merge_blocks(blocks);
}
function main() {
  let data: number[] = [7, 1, 5, 3, 9, 2, 6, 4, 8, 0];
  let sorted_data: number[] = external_sort(data, 3);
  console.log(_str("[" + (sorted_data).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

