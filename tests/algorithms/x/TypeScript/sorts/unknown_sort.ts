// Generated by Mochi v0.10.59 on 2025-08-07 08:55:53 GMT+7

function list_min(xs: number[]): number {
  let i: number = 1;
  let m: number = xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)];
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] < m)) {
      m = xs[(i) < 0 ? xs.length + (i) : i];
    }
    i = (i + 1);
  }
  return m;
}
function list_max(xs: number[]): number {
  let i: number = 1;
  let m: number = xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)];
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] > m)) {
      m = xs[(i) < 0 ? xs.length + (i) : i];
    }
    i = (i + 1);
  }
  return m;
}
function remove_once(xs: number[], value: number): number[] {
  let res: number[] = [];
  let removed: boolean = false;
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((!removed && (xs[(i) < 0 ? xs.length + (i) : i] == value))) {
      removed = true;
    } else {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function reverse_list(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = (_len(xs) - 1);
  while ((i >= 0)) {
    res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i - 1);
  }
  return res;
}
function merge_sort(collection: number[]): number[] {
  let start: number[] = [];
  let end: number[] = [];
  let coll: number[] = collection;
  while ((_len(coll) > 1)) {
    let mn: number = list_min(coll);
    let mx: number = list_max(coll);
    start.push(mn);
    end.push(mx);
    coll = remove_once(coll, mn);
    coll = remove_once(coll, mx);
  }
  end = reverse_list(end);
  return concat(concat(start, coll), end);
}
function test_merge_sort() {
  if ((merge_sort([0, 5, 3, 2, 2]) != [0, 2, 2, 3, 5])) {
    _panic("case1 failed");
  }
  if ((merge_sort([]) != [])) {
    _panic("case2 failed");
  }
  if ((merge_sort([-2, -5, -45]) != [-45, -5, -2])) {
    _panic("case3 failed");
  }
}
function main() {
  test_merge_sort();
  console.log(_str(_str(merge_sort([0, 5, 3, 2, 2]))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

