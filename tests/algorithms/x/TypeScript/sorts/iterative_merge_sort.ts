// Generated by Mochi v0.10.59 on 2025-08-07 08:55:25 GMT+7

function merge(a: number[], low: number, mid: number, high: number): number[] {
  let left: number[] = a.slice(low, mid);
  let right: number[] = a.slice(mid, (high + 1));
  let result: number[] = [];
  while (((_len(left) > 0) && (_len(right) > 0))) {
    if ((left[(Math.trunc(0)) < 0 ? left.length + (Math.trunc(0)) : Math.trunc(0)] <= right[(Math.trunc(0)) < 0 ? right.length + (Math.trunc(0)) : Math.trunc(0)])) {
      result.push(left[(Math.trunc(0)) < 0 ? left.length + (Math.trunc(0)) : Math.trunc(0)]);
      left = left.slice(1);
    } else {
      result.push(right[(Math.trunc(0)) < 0 ? right.length + (Math.trunc(0)) : Math.trunc(0)]);
      right = right.slice(1);
    }
  }
  let i: number = 0;
  while ((i < _len(left))) {
    result.push(left[(i) < 0 ? left.length + (i) : i]);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(right))) {
    result.push(right[(i) < 0 ? right.length + (i) : i]);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(result))) {
    a[((low + i)) < 0 ? a.length + ((low + i)) : (low + i)] = result[(i) < 0 ? result.length + (i) : i];
    i = (i + 1);
  }
  return a;
}
function iter_merge_sort(items: number[]): number[] {
  let n: number = _len(items);
  if ((n <= 1)) {
    return items;
  }
  let arr: number[] = items.slice(0);
  let p: number = 2;
  while ((p <= n)) {
    let i: number = 0;
    while ((i < n)) {
      let high: number = ((i + p) - 1);
      if ((high >= n)) {
        high = (n - 1);
      }
      let low: number = i;
      let mid: number = Math.trunc(((low + high) + 1) / 2);
      arr = merge(arr, low, mid, high);
      i = (i + p);
    }
    if (((p * 2) >= n)) {
      let mid2: number = (i - p);
      arr = merge(arr, 0, mid2, (n - 1));
      break
    }
    p = (p * 2);
  }
  return arr;
}
function list_to_string(arr: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(arr))) {
    s = (s + _str(arr[(i) < 0 ? arr.length + (i) : i]));
    if ((i < (_len(arr) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(list_to_string(iter_merge_sort([5, 9, 8, 7, 1, 2, 7]))));
  console.log(_str(list_to_string(iter_merge_sort([1]))));
  console.log(_str(list_to_string(iter_merge_sort([2, 1]))));
  console.log(_str(list_to_string(iter_merge_sort([4, 3, 2, 1]))));
  console.log(_str(list_to_string(iter_merge_sort([5, 4, 3, 2, 1]))));
  console.log(_str(list_to_string(iter_merge_sort([-2, -9, -1, -4]))));
  console.log(_str(list_to_string(iter_merge_sort([]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

