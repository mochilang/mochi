// Generated by Mochi v0.10.59 on 2025-08-07 08:55:41 GMT+7

function insert_next(collection: number[], index: number): number[] {
  let arr: number[] = collection;
  if (((index >= _len(arr)) || (arr[(Math.trunc((index - 1))) < 0 ? arr.length + (Math.trunc((index - 1))) : Math.trunc((index - 1))] <= arr[(index) < 0 ? arr.length + (index) : index]))) {
    return arr;
  }
  let j: number = (index - 1);
  let temp: number = arr[(j) < 0 ? arr.length + (j) : j];
  arr[(j) < 0 ? arr.length + (j) : j] = arr[(index) < 0 ? arr.length + (index) : index];
  arr[(index) < 0 ? arr.length + (index) : index] = temp;
  return insert_next(arr, (index + 1));
}
function rec_insertion_sort(collection: number[], n: number): number[] {
  let arr: number[] = collection;
  if (((_len(arr) <= 1) || (n <= 1))) {
    return arr;
  }
  arr = insert_next(arr, (n - 1));
  return rec_insertion_sort(arr, (n - 1));
}
function test_rec_insertion_sort() {
  let col1: number[] = [1, 2, 1];
  col1 = rec_insertion_sort(col1, _len(col1));
  if ((((col1[(Math.trunc(0)) < 0 ? col1.length + (Math.trunc(0)) : Math.trunc(0)] != 1) || (col1[(Math.trunc(1)) < 0 ? col1.length + (Math.trunc(1)) : Math.trunc(1)] != 1)) || (col1[(Math.trunc(2)) < 0 ? col1.length + (Math.trunc(2)) : Math.trunc(2)] != 2))) {
    _panic("test1 failed");
  }
  let col2: number[] = [2, 1, 0, -1, -2];
  col2 = rec_insertion_sort(col2, _len(col2));
  if ((col2[(Math.trunc(0)) < 0 ? col2.length + (Math.trunc(0)) : Math.trunc(0)] != (0 - 2))) {
    _panic("test2 failed");
  }
  if ((col2[(Math.trunc(1)) < 0 ? col2.length + (Math.trunc(1)) : Math.trunc(1)] != (0 - 1))) {
    _panic("test2 failed");
  }
  if ((col2[(Math.trunc(2)) < 0 ? col2.length + (Math.trunc(2)) : Math.trunc(2)] != 0)) {
    _panic("test2 failed");
  }
  if ((col2[(Math.trunc(3)) < 0 ? col2.length + (Math.trunc(3)) : Math.trunc(3)] != 1)) {
    _panic("test2 failed");
  }
  if ((col2[(Math.trunc(4)) < 0 ? col2.length + (Math.trunc(4)) : Math.trunc(4)] != 2)) {
    _panic("test2 failed");
  }
  let col3: number[] = [1];
  col3 = rec_insertion_sort(col3, _len(col3));
  if ((col3[(Math.trunc(0)) < 0 ? col3.length + (Math.trunc(0)) : Math.trunc(0)] != 1)) {
    _panic("test3 failed");
  }
}
function main() {
  test_rec_insertion_sort();
  let numbers: number[] = [5, 3, 4, 1, 2];
  numbers = rec_insertion_sort(numbers, _len(numbers));
  console.log(_str(_str(numbers)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

