// Generated by Mochi v0.10.59 on 2025-08-07 08:55:28 GMT+7

function get_bit_length(n: number): number {
  if ((n == 0)) {
    return 1;
  }
  let length: number = 0;
  let num: number = n;
  while ((num > 0)) {
    length = (length + 1);
    num = Math.trunc(num / 2);
  }
  return length;
}
function max_bit_length(nums: number[]): number {
  let i: number = 0;
  let max_len: number = 0;
  while ((i < _len(nums))) {
    let l: number = get_bit_length(nums[(i) < 0 ? nums.length + (i) : i]);
    if ((l > max_len)) {
      max_len = l;
    }
    i = (i + 1);
  }
  return max_len;
}
function get_bit(num: number, pos: number): number {
  let n = num;
  let i: number = 0;
  while ((i < pos)) {
    n = (n / 2);
    i = (i + 1);
  }
  return (n % 2);
}
function _msd_radix_sort(nums: number[], bit_position: number): number[] {
  if (((bit_position == 0) || (_len(nums) <= 1))) {
    return nums;
  }
  let zeros: number[] = [];
  let ones: number[] = [];
  let i: number = 0;
  while ((i < _len(nums))) {
    let num = nums[(i) < 0 ? nums.length + (i) : i];
    if ((get_bit(num, (bit_position - 1)) == 1)) {
      ones.push(num);
    } else {
      zeros.push(num);
    }
    i = (i + 1);
  }
  zeros = _msd_radix_sort(zeros, (bit_position - 1));
  ones = _msd_radix_sort(ones, (bit_position - 1));
  let res: number[] = zeros;
  i = 0;
  while ((i < _len(ones))) {
    res.push(ones[(i) < 0 ? ones.length + (i) : i]);
    i = (i + 1);
  }
  return res;
}
function msd_radix_sort(nums: number[]): number[] {
  if ((_len(nums) == 0)) {
    return [];
  }
  let i: number = 0;
  while ((i < _len(nums))) {
    if ((nums[(i) < 0 ? nums.length + (i) : i] < 0)) {
      _panic("All numbers must be positive");
    }
    i = (i + 1);
  }
  let bits: number = max_bit_length(nums);
  let result: number[] = _msd_radix_sort(nums, bits);
  return result;
}
function msd_radix_sort_inplace(nums: number[]): number[] {
  return msd_radix_sort(nums);
}
let ex1: number[] = [40, 12, 1, 100, 4];
let ex2: number[] = [];
let ex3: number[] = [123, 345, 123, 80];
let ex4: number[] = [1209, 834598, 1, 540402, 45];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let sorted1: number[]
let sorted2: number[]
let sorted3: number[]
let sorted4: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
sorted1 = msd_radix_sort(ex1)
  console.log(_str(_str(sorted1)));
sorted2 = msd_radix_sort(ex2)
  console.log(_str(_str(sorted2)));
sorted3 = msd_radix_sort(ex3)
  console.log(_str(_str(sorted3)));
sorted4 = msd_radix_sort(ex4)
  console.log(_str(_str(sorted4)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

