// Generated by Mochi v0.10.59 on 2025-08-07 08:55:26 GMT+7

function binary_search_insertion_from(sorted_list: number[], item: number, start: number): number[] {
  let left: number = start;
  let right: number = (_len(sorted_list) - 1);
  while ((left <= right)) {
    let middle: number = Math.trunc((left + right) / 2);
    if ((left == right)) {
      if ((sorted_list[(middle) < 0 ? sorted_list.length + (middle) : middle] < item)) {
        left = (middle + 1);
      }
      break
    } else {
      if ((sorted_list[(middle) < 0 ? sorted_list.length + (middle) : middle] < item)) {
        left = (middle + 1);
      } else {
        right = (middle - 1);
      }
    }
  }
  let result: number[] = [];
  let i: number = 0;
  while ((i < left)) {
    result.push(sorted_list[(i) < 0 ? sorted_list.length + (i) : i]);
    i = (i + 1);
  }
  result.push(item);
  while ((i < _len(sorted_list))) {
    result.push(sorted_list[(i) < 0 ? sorted_list.length + (i) : i]);
    i = (i + 1);
  }
  return result;
}
function binary_search_insertion(sorted_list: number[], item: number): number[] {
  return binary_search_insertion_from(sorted_list, item, 0);
}
function merge(left: number[][], right: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  let j: number = 0;
  while (((i < _len(left)) && (j < _len(right)))) {
    if ((left[(i) < 0 ? left.length + (i) : i][(Math.trunc(0)) < 0 ? left[(i) < 0 ? left.length + (i) : i].length + (Math.trunc(0)) : Math.trunc(0)] < right[(j) < 0 ? right.length + (j) : j][(Math.trunc(0)) < 0 ? right[(j) < 0 ? right.length + (j) : j].length + (Math.trunc(0)) : Math.trunc(0)])) {
      result.push(left[(i) < 0 ? left.length + (i) : i]);
      i = (i + 1);
    } else {
      result.push(right[(j) < 0 ? right.length + (j) : j]);
      j = (j + 1);
    }
  }
  while ((i < _len(left))) {
    result.push(left[(i) < 0 ? left.length + (i) : i]);
    i = (i + 1);
  }
  while ((j < _len(right))) {
    result.push(right[(j) < 0 ? right.length + (j) : j]);
    j = (j + 1);
  }
  return result;
}
function sortlist_2d(list_2d: number[][]): number[][] {
  let length: number = _len(list_2d);
  if ((length <= 1)) {
    return list_2d;
  }
  let middle: number = Math.trunc(length / 2);
  let left: number[][] = [];
  let i: number = 0;
  while ((i < middle)) {
    left.push(list_2d[(i) < 0 ? list_2d.length + (i) : i]);
    i = (i + 1);
  }
  let right: number[][] = [];
  let j: number = middle;
  while ((j < length)) {
    right.push(list_2d[(j) < 0 ? list_2d.length + (j) : j]);
    j = (j + 1);
  }
  return merge(sortlist_2d(left), sortlist_2d(right));
}
function merge_insertion_sort(collection: number[]): number[] {
  if ((_len(collection) <= 1)) {
    return collection;
  }
  let two_paired_list: number[][] = [];
  let has_last_odd_item: boolean = false;
  let i: number = 0;
  while ((i < _len(collection))) {
    if ((i == (_len(collection) - 1))) {
      has_last_odd_item = true;
    } else {
      let a: number = collection[(i) < 0 ? collection.length + (i) : i];
      let b: number = collection[(Math.trunc((i + 1))) < 0 ? collection.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))];
      if ((a < b)) {
        two_paired_list.push([a, b]);
      } else {
        two_paired_list.push([b, a]);
      }
    }
    i = (i + 2);
  }
  let sorted_list_2d: number[][] = sortlist_2d(two_paired_list);
  let result: number[] = [];
  i = 0;
  while ((i < _len(sorted_list_2d))) {
    result.push(sorted_list_2d[(i) < 0 ? sorted_list_2d.length + (i) : i][(Math.trunc(0)) < 0 ? sorted_list_2d[(i) < 0 ? sorted_list_2d.length + (i) : i].length + (Math.trunc(0)) : Math.trunc(0)]);
    i = (i + 1);
  }
  result.push(sorted_list_2d[(Math.trunc((_len(sorted_list_2d) - 1))) < 0 ? sorted_list_2d.length + (Math.trunc((_len(sorted_list_2d) - 1))) : Math.trunc((_len(sorted_list_2d) - 1))][(Math.trunc(1)) < 0 ? sorted_list_2d[(Math.trunc((_len(sorted_list_2d) - 1))) < 0 ? sorted_list_2d.length + (Math.trunc((_len(sorted_list_2d) - 1))) : Math.trunc((_len(sorted_list_2d) - 1))].length + (Math.trunc(1)) : Math.trunc(1)]);
  if (has_last_odd_item) {
    result = binary_search_insertion(result, collection[(Math.trunc((_len(collection) - 1))) < 0 ? collection.length + (Math.trunc((_len(collection) - 1))) : Math.trunc((_len(collection) - 1))]);
  }
  let inserted_before: boolean = false;
  let idx: number = 0;
  while ((idx < (_len(sorted_list_2d) - 1))) {
    if ((has_last_odd_item && (result[(idx) < 0 ? result.length + (idx) : idx] == collection[(Math.trunc((_len(collection) - 1))) < 0 ? collection.length + (Math.trunc((_len(collection) - 1))) : Math.trunc((_len(collection) - 1))]))) {
      inserted_before = true;
    }
    let pivot: number = sorted_list_2d[(idx) < 0 ? sorted_list_2d.length + (idx) : idx][(Math.trunc(1)) < 0 ? sorted_list_2d[(idx) < 0 ? sorted_list_2d.length + (idx) : idx].length + (Math.trunc(1)) : Math.trunc(1)];
    if (inserted_before) {
      result = binary_search_insertion_from(result, pivot, (idx + 2));
    } else {
      result = binary_search_insertion_from(result, pivot, (idx + 1));
    }
    idx = (idx + 1);
  }
  return result;
}
function main() {
  let example1: number[] = [0, 5, 3, 2, 2];
  let example2: number[] = [99];
  let example3: number[] = [-2, -5, -45];
  console.log(_str(_str(merge_insertion_sort(example1))));
  console.log(_str(_str(merge_insertion_sort(example2))));
  console.log(_str(_str(merge_insertion_sort(example3))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

