// Generated by Mochi v0.10.59 on 2025-08-07 08:55:45 GMT+7

function shell_sort(collection: number[]): number[] {
  let arr: number[] = collection;
  let gaps: number[] = [701, 301, 132, 57, 23, 10, 4, 1];
  let g: number = 0;
  while ((g < _len(gaps))) {
    let gap: number = gaps[(g) < 0 ? gaps.length + (g) : g];
    let i: number = gap;
    while ((i < _len(arr))) {
      let insert_value: number = arr[(i) < 0 ? arr.length + (i) : i];
      let j: number = i;
      while (((j >= gap) && (arr[(Math.trunc((j - gap))) < 0 ? arr.length + (Math.trunc((j - gap))) : Math.trunc((j - gap))] > insert_value))) {
        arr[(j) < 0 ? arr.length + (j) : j] = arr[(Math.trunc((j - gap))) < 0 ? arr.length + (Math.trunc((j - gap))) : Math.trunc((j - gap))];
        j = (j - gap);
      }
      if ((j != i)) {
        arr[(j) < 0 ? arr.length + (j) : j] = insert_value;
      }
      i = (i + 1);
    }
    g = (g + 1);
  }
  return arr;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(shell_sort([0, 5, 3, 2, 2]))));
  console.log(_str(_str(shell_sort([]))));
  console.log(_str(_str(shell_sort([-2, -5, -45]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

