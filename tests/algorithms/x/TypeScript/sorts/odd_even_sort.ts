// Generated by Mochi v0.10.59 on 2025-08-07 08:55:31 GMT+7

function odd_even_sort(xs: number[]): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    arr.push(xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  let n: number = _len(arr);
  let sorted: boolean = false;
  while ((sorted == false)) {
    sorted = true;
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((arr[(j) < 0 ? arr.length + (j) : j] > arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))])) {
        let tmp: number = arr[(j) < 0 ? arr.length + (j) : j];
        arr[(j) < 0 ? arr.length + (j) : j] = arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))];
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = tmp;
        sorted = false;
      }
      j = (j + 2);
    }
    j = 1;
    while ((j < (n - 1))) {
      if ((arr[(j) < 0 ? arr.length + (j) : j] > arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))])) {
        let tmp: number = arr[(j) < 0 ? arr.length + (j) : j];
        arr[(j) < 0 ? arr.length + (j) : j] = arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))];
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = tmp;
        sorted = false;
      }
      j = (j + 2);
    }
  }
  return arr;
}
function print_list(xs: number[]) {
  let i: number = 0;
  let out: string = "";
  while ((i < _len(xs))) {
    if ((i > 0)) {
      out = (out + " ");
    }
    out = (out + _str(xs[(i) < 0 ? xs.length + (i) : i]));
    i = (i + 1);
  }
  console.log(_str(out));
}
function test_odd_even_sort() {
  let a: number[] = [5, 4, 3, 2, 1];
  let r1: number[] = odd_even_sort(a);
  if ((((((r1[(Math.trunc(0)) < 0 ? r1.length + (Math.trunc(0)) : Math.trunc(0)] != 1) || (r1[(Math.trunc(1)) < 0 ? r1.length + (Math.trunc(1)) : Math.trunc(1)] != 2)) || (r1[(Math.trunc(2)) < 0 ? r1.length + (Math.trunc(2)) : Math.trunc(2)] != 3)) || (r1[(Math.trunc(3)) < 0 ? r1.length + (Math.trunc(3)) : Math.trunc(3)] != 4)) || (r1[(Math.trunc(4)) < 0 ? r1.length + (Math.trunc(4)) : Math.trunc(4)] != 5))) {
    _panic("case1 failed");
  }
  let b: number[] = [];
  let r2: number[] = odd_even_sort(b);
  if ((_len(r2) != 0)) {
    _panic("case2 failed");
  }
  let c: number[] = [-10, -1, 10, 2];
  let r3: number[] = odd_even_sort(c);
  if (((((r3[(Math.trunc(0)) < 0 ? r3.length + (Math.trunc(0)) : Math.trunc(0)] != -10) || (r3[(Math.trunc(1)) < 0 ? r3.length + (Math.trunc(1)) : Math.trunc(1)] != -1)) || (r3[(Math.trunc(2)) < 0 ? r3.length + (Math.trunc(2)) : Math.trunc(2)] != 2)) || (r3[(Math.trunc(3)) < 0 ? r3.length + (Math.trunc(3)) : Math.trunc(3)] != 10))) {
    _panic("case3 failed");
  }
  let d: number[] = [1, 2, 3, 4];
  let r4: number[] = odd_even_sort(d);
  if (((((r4[(Math.trunc(0)) < 0 ? r4.length + (Math.trunc(0)) : Math.trunc(0)] != 1) || (r4[(Math.trunc(1)) < 0 ? r4.length + (Math.trunc(1)) : Math.trunc(1)] != 2)) || (r4[(Math.trunc(2)) < 0 ? r4.length + (Math.trunc(2)) : Math.trunc(2)] != 3)) || (r4[(Math.trunc(3)) < 0 ? r4.length + (Math.trunc(3)) : Math.trunc(3)] != 4))) {
    _panic("case4 failed");
  }
}
function main() {
  test_odd_even_sort();
  let sample: number[] = [5, 4, 3, 2, 1];
  let sorted: number[] = odd_even_sort(sample);
  print_list(sorted);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

