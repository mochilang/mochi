// Generated by Mochi v0.10.59 on 2025-08-07 08:55:30 GMT+7

let DIGITS: string = "0123456789";
let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
function index_of(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[(i) < 0 ? s.length + (i) : i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function is_digit(ch: string): boolean {
  return (index_of(DIGITS, ch) >= 0);
}
function to_lower(ch: string): string {
  let idx: number = index_of(UPPER, ch);
  if ((idx >= 0)) {
    return LOWER.slice(idx, (idx + 1));
  }
  return ch;
}
function pad_left(s: string, width: number): string {
  let res: string = s;
  while ((_len(res) < width)) {
    res = ("0" + res);
  }
  return res;
}
function alphanum_key(s: string): string[] {
  let key: string[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    if (is_digit(s[(i) < 0 ? s.length + (i) : i])) {
      let num: string = "";
      while (((i < _len(s)) && is_digit(s[(i) < 0 ? s.length + (i) : i]))) {
        num = (num + s[(i) < 0 ? s.length + (i) : i]);
        i = (i + 1);
      }
      let len_str = pad_left(_str(_len(num)), 3);
      key.push((("#" + len_str) + num));
    } else {
      let seg: string = "";
      while ((i < _len(s))) {
        if (is_digit(s[(i) < 0 ? s.length + (i) : i])) {
          break
        }
        seg = (seg + to_lower(s[(i) < 0 ? s.length + (i) : i]));
        i = (i + 1);
      }
      key.push(seg);
    }
  }
  return key;
}
function compare_keys(a: string[], b: string[]): number {
  let i: number = 0;
  while (((i < _len(a)) && (i < _len(b)))) {
    if ((a[(i) < 0 ? a.length + (i) : i] < b[(i) < 0 ? b.length + (i) : i])) {
      return -1;
    }
    if ((a[(i) < 0 ? a.length + (i) : i] > b[(i) < 0 ? b.length + (i) : i])) {
      return 1;
    }
    i = (i + 1);
  }
  if ((_len(a) < _len(b))) {
    return -1;
  }
  if ((_len(a) > _len(b))) {
    return 1;
  }
  return 0;
}
function natural_sort(arr: string[]): string[] {
  let res: string[] = [];
  let keys: string[][] = [];
  let k: number = 0;
  while ((k < _len(arr))) {
    res.push(arr[(k) < 0 ? arr.length + (k) : k]);
    keys.push(alphanum_key(arr[(k) < 0 ? arr.length + (k) : k]));
    k = (k + 1);
  }
  let i: number = 1;
  while ((i < _len(res))) {
    let current: string = res[(i) < 0 ? res.length + (i) : i];
    let current_key = keys[(i) < 0 ? keys.length + (i) : i];
    let j: number = (i - 1);
    while (((j >= 0) && (compare_keys(keys[(j) < 0 ? keys.length + (j) : j], current_key) > 0))) {
      res[((j + 1)) < 0 ? res.length + ((j + 1)) : (j + 1)] = res[(j) < 0 ? res.length + (j) : j];
      keys[((j + 1)) < 0 ? keys.length + ((j + 1)) : (j + 1)] = keys[(j) < 0 ? keys.length + (j) : j];
      j = (j - 1);
    }
    res[((j + 1)) < 0 ? res.length + ((j + 1)) : (j + 1)] = current;
    keys[((j + 1)) < 0 ? keys.length + ((j + 1)) : (j + 1)] = current_key;
    i = (i + 1);
  }
  return res;
}
let example1: string[] = ["2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"];
let example2: string[] = ["Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(natural_sort(example1))));
  console.log(_str(_str(natural_sort(example2))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

