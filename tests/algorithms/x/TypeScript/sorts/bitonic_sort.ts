// Generated by Mochi v0.10.59 on 2025-08-07 08:55:08 GMT+7

function set_at_int(xs: number[], idx: number, value: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i == idx)) {
      res.push(value);
    } else {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function comp_and_swap(arr: number[], i: number, j: number, dir: number): number[] {
  let res: number[] = arr;
  let xi: number = arr[(i) < 0 ? arr.length + (i) : i];
  let xj: number = arr[(j) < 0 ? arr.length + (j) : j];
  if ((((dir == 1) && (xi > xj)) || ((dir == 0) && (xi < xj)))) {
    res = set_at_int(res, i, xj);
    res = set_at_int(res, j, xi);
  }
  return res;
}
function bitonic_merge(arr: number[], low: number, length: number, dir: number): number[] {
  let res: number[] = arr;
  if ((length > 1)) {
    let mid: number = Math.trunc(length / 2);
    let k: number = low;
    while ((k < (low + mid))) {
      res = comp_and_swap(res, k, (k + mid), dir);
      k = (k + 1);
    }
    res = bitonic_merge(res, low, mid, dir);
    res = bitonic_merge(res, (low + mid), mid, dir);
  }
  return res;
}
function bitonic_sort(arr: number[], low: number, length: number, dir: number): number[] {
  let res: number[] = arr;
  if ((length > 1)) {
    let mid: number = Math.trunc(length / 2);
    res = bitonic_sort(res, low, mid, 1);
    res = bitonic_sort(res, (low + mid), mid, 0);
    res = bitonic_merge(res, low, length, dir);
  }
  return res;
}
function main() {
  let data: number[] = [12, 34, 92, -23, 0, -121, -167, 145];
  let asc: number[] = bitonic_sort(data, 0, _len(data), 1);
  console.log(_str(_str(asc)));
  let desc: number[] = bitonic_merge(asc, 0, _len(asc), 0);
  console.log(_str(_str(desc)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

