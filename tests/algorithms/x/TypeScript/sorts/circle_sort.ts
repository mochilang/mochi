// Generated by Mochi v0.10.59 on 2025-08-07 08:55:12 GMT+7

function circle_sort_util(collection: number[], low: number, high: number): boolean {
  let swapped: boolean = false;
  if ((low == high)) {
    return swapped;
  }
  let left: number = low;
  let right: number = high;
  while ((left < right)) {
    if ((collection[(left) < 0 ? collection.length + (left) : left] > collection[(right) < 0 ? collection.length + (right) : right])) {
      let tmp: number = collection[(left) < 0 ? collection.length + (left) : left];
      collection[(left) < 0 ? collection.length + (left) : left] = collection[(right) < 0 ? collection.length + (right) : right];
      collection[(right) < 0 ? collection.length + (right) : right] = tmp;
      swapped = true;
    }
    left = (left + 1);
    right = (right - 1);
  }
  if (((left == right) && (collection[(left) < 0 ? collection.length + (left) : left] > collection[(Math.trunc((right + 1))) < 0 ? collection.length + (Math.trunc((right + 1))) : Math.trunc((right + 1))]))) {
    let tmp2: number = collection[(left) < 0 ? collection.length + (left) : left];
    collection[(left) < 0 ? collection.length + (left) : left] = collection[(Math.trunc((right + 1))) < 0 ? collection.length + (Math.trunc((right + 1))) : Math.trunc((right + 1))];
    collection[((right + 1)) < 0 ? collection.length + ((right + 1)) : (right + 1)] = tmp2;
    swapped = true;
  }
  let mid: number = (low + Math.trunc((high - low) / 2));
  let left_swap: boolean = circle_sort_util(collection, low, mid);
  let right_swap: boolean = circle_sort_util(collection, (mid + 1), high);
  if (((swapped || left_swap) || right_swap)) {
    return true;
  } else {
    return false;
  }
}
function circle_sort(collection: number[]): number[] {
  if ((_len(collection) < 2)) {
    return collection;
  }
  let is_not_sorted: boolean = true;
  while (is_not_sorted) {
    is_not_sorted = circle_sort_util(collection, 0, (_len(collection) - 1));
  }
  return collection;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(circle_sort([0, 5, 3, 2, 2]))));
  console.log(_str(_str(circle_sort([]))));
  console.log(_str(_str(circle_sort([-2, 5, 0, -45]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

