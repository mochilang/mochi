// Generated by Mochi v0.10.59 on 2025-08-07 08:55:39 GMT+7

function quick_sort_3partition(arr: number[], left: number, right: number): number[] {
  if ((right <= left)) {
    return arr;
  }
  let a: number = left;
  let i: number = left;
  let b: number = right;
  let pivot: number = arr[(left) < 0 ? arr.length + (left) : left];
  while ((i <= b)) {
    if ((arr[(i) < 0 ? arr.length + (i) : i] < pivot)) {
      let temp: number = arr[(a) < 0 ? arr.length + (a) : a];
      arr[(a) < 0 ? arr.length + (a) : a] = arr[(i) < 0 ? arr.length + (i) : i];
      arr[(i) < 0 ? arr.length + (i) : i] = temp;
      a = (a + 1);
      i = (i + 1);
    } else {
      if ((arr[(i) < 0 ? arr.length + (i) : i] > pivot)) {
        let temp: number = arr[(b) < 0 ? arr.length + (b) : b];
        arr[(b) < 0 ? arr.length + (b) : b] = arr[(i) < 0 ? arr.length + (i) : i];
        arr[(i) < 0 ? arr.length + (i) : i] = temp;
        b = (b - 1);
      } else {
        i = (i + 1);
      }
    }
  }
  arr = quick_sort_3partition(arr, left, (a - 1));
  arr = quick_sort_3partition(arr, (b + 1), right);
  return arr;
}
function quick_sort_lomuto_partition(arr: number[], left: number, right: number): number[] {
  if ((left < right)) {
    let pivot_index: number = lomuto_partition(arr, left, right);
    arr = quick_sort_lomuto_partition(arr, left, (pivot_index - 1));
    arr = quick_sort_lomuto_partition(arr, (pivot_index + 1), right);
  }
  return arr;
}
function lomuto_partition(arr: number[], left: number, right: number): number {
  let pivot: number = arr[(right) < 0 ? arr.length + (right) : right];
  let store_index: number = left;
  let i: number = left;
  while ((i < right)) {
    if ((arr[(i) < 0 ? arr.length + (i) : i] < pivot)) {
      let temp: number = arr[(store_index) < 0 ? arr.length + (store_index) : store_index];
      arr[(store_index) < 0 ? arr.length + (store_index) : store_index] = arr[(i) < 0 ? arr.length + (i) : i];
      arr[(i) < 0 ? arr.length + (i) : i] = temp;
      store_index = (store_index + 1);
    }
    i = (i + 1);
  }
  let temp: number = arr[(right) < 0 ? arr.length + (right) : right];
  arr[(right) < 0 ? arr.length + (right) : right] = arr[(store_index) < 0 ? arr.length + (store_index) : store_index];
  arr[(store_index) < 0 ? arr.length + (store_index) : store_index] = temp;
  return store_index;
}
function three_way_radix_quicksort(arr: number[]): number[] {
  if ((_len(arr) <= 1)) {
    return arr;
  }
  let pivot: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
  let less: number[] = [];
  let equal: number[] = [];
  let greater: number[] = [];
  let i: number = 0;
  while ((i < _len(arr))) {
    let val: number = arr[(i) < 0 ? arr.length + (i) : i];
    if ((val < pivot)) {
      less.push(val);
    } else {
      if ((val > pivot)) {
        greater.push(val);
      } else {
        equal.push(val);
      }
    }
    i = (i + 1);
  }
  let sorted_less: number[] = three_way_radix_quicksort(less);
  let sorted_greater: number[] = three_way_radix_quicksort(greater);
  let result: any[] = concat(sorted_less, equal);
  result = concat(result, sorted_greater);
  return result;
}
let array2: number[] = [9, 0, 2, 6];
let array3: number[] = [];
let nums1: number[] = [0, 5, 3, 1, 2];
let nums2: number[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let array1: number[]
let nums3: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
array1 = [5, -1, -1, 5, 5, 24, 0]
  array1 = quick_sort_3partition(array1, 0, (_len(array1) - 1));
  console.log(_str(_str(array1)));
  array2 = quick_sort_3partition(array2, 0, (_len(array2) - 1));
  console.log(_str(_str(array2)));
  array3 = quick_sort_3partition(array3, 0, (_len(array3) - 1));
  console.log(_str(_str(array3)));
  nums1 = quick_sort_lomuto_partition(nums1, 0, (_len(nums1) - 1));
  console.log(_str(_str(nums1)));
  nums2 = quick_sort_lomuto_partition(nums2, 0, (_len(nums2) - 1));
  console.log(_str(_str(nums2)));
nums3 = [-2, 5, 0, -4]
  nums3 = quick_sort_lomuto_partition(nums3, 0, (_len(nums3) - 1));
  console.log(_str(_str(nums3)));
  console.log(_str(_str(three_way_radix_quicksort([]))));
  console.log(_str(_str(three_way_radix_quicksort([1]))));
  console.log(_str(_str(three_way_radix_quicksort([-5, -2, 1, -2, 0, 1]))));
  console.log(_str(_str(three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

