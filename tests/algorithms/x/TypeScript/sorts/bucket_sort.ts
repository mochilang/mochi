// Generated by Mochi v0.10.59 on 2025-08-07 08:55:11 GMT+7

function int_to_float(x: number): number {
  return (x * 1.0);
}
function floor_int(x: number): number {
  let i: number = 0;
  while ((int_to_float((i + 1)) <= x)) {
    i = (i + 1);
  }
  return i;
}
function set_at_float(xs: number[], idx: number, value: number): number[] {
  let i: number = 0;
  let res: number[] = [];
  while ((i < _len(xs))) {
    if ((i == idx)) {
      res.push(value);
    } else {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function set_at_list_float(xs: number[][], idx: number, value: number[]): number[][] {
  let i: number = 0;
  let res: number[][] = [];
  while ((i < _len(xs))) {
    if ((i == idx)) {
      res.push(value);
    } else {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function sort_float(xs: number[]): number[] {
  let res: number[] = xs;
  let i: number = 1;
  while ((i < _len(res))) {
    let key: number = res[(i) < 0 ? res.length + (i) : i];
    let j: number = (i - 1);
    while (((j >= 0) && (res[(j) < 0 ? res.length + (j) : j] > key))) {
      res = set_at_float(res, (j + 1), res[(j) < 0 ? res.length + (j) : j]);
      j = (j - 1);
    }
    res = set_at_float(res, (j + 1), key);
    i = (i + 1);
  }
  return res;
}
function bucket_sort_with_count(xs: number[], bucket_count: number): number[] {
  if (((_len(xs) == 0) || (bucket_count <= 0))) {
    return [];
  }
  let min_value: number = xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)];
  let max_value: number = xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] < min_value)) {
      min_value = xs[(i) < 0 ? xs.length + (i) : i];
    }
    if ((xs[(i) < 0 ? xs.length + (i) : i] > max_value)) {
      max_value = xs[(i) < 0 ? xs.length + (i) : i];
    }
    i = (i + 1);
  }
  if ((max_value == min_value)) {
    return xs;
  }
  let bucket_size: number = ((max_value - min_value) / int_to_float(bucket_count));
  let buckets: number[][] = [];
  i = 0;
  while ((i < bucket_count)) {
    buckets.push([]);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(xs))) {
    let val: number = xs[(i) < 0 ? xs.length + (i) : i];
    let idx: number = floor_int(((val - min_value) / bucket_size));
    if ((idx < 0)) {
      idx = 0;
    }
    if ((idx >= bucket_count)) {
      idx = (bucket_count - 1);
    }
    let bucket: number[] = buckets[(idx) < 0 ? buckets.length + (idx) : idx];
    bucket.push(val);
    buckets = set_at_list_float(buckets, idx, bucket);
    i = (i + 1);
  }
  let result: number[] = [];
  i = 0;
  while ((i < _len(buckets))) {
    let sorted_bucket: number[] = sort_float(buckets[(i) < 0 ? buckets.length + (i) : i]);
    let j: number = 0;
    while ((j < _len(sorted_bucket))) {
      result.push(sorted_bucket[(j) < 0 ? sorted_bucket.length + (j) : j]);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return result;
}
function bucket_sort(xs: number[]): number[] {
  return bucket_sort_with_count(xs, 10);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(bucket_sort([-1.0, 2.0, -5.0, 0.0]))));
  console.log(_str(_str(bucket_sort([9.0, 8.0, 7.0, 6.0, -12.0]))));
  console.log(_str(_str(bucket_sort([0.4, 1.2, 0.1, 0.2, -0.9]))));
  console.log(_str(_str(bucket_sort([]))));
  console.log(_str(_str(bucket_sort([-10000000000.0, 10000000000.0]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

