// Generated by Mochi v0.10.59 on 2025-08-07 08:55:18 GMT+7

function dutch_national_flag_sort(seq: number[]): number[] {
  let a: number[] = seq;
  let low: number = 0;
  let mid: number = 0;
  let high: number = (_len(a) - 1);
  while ((mid <= high)) {
    let v: number = a[(mid) < 0 ? a.length + (mid) : mid];
    if ((v == 0)) {
      let tmp: number = a[(low) < 0 ? a.length + (low) : low];
      a[(low) < 0 ? a.length + (low) : low] = v;
      a[(mid) < 0 ? a.length + (mid) : mid] = tmp;
      low = (low + 1);
      mid = (mid + 1);
    } else {
      if ((v == 1)) {
        mid = (mid + 1);
      } else {
        if ((v == 2)) {
          let tmp2: number = a[(high) < 0 ? a.length + (high) : high];
          a[(high) < 0 ? a.length + (high) : high] = v;
          a[(mid) < 0 ? a.length + (mid) : mid] = tmp2;
          high = (high - 1);
        } else {
          _panic("The elements inside the sequence must contains only (0, 1, 2) values");
        }
      }
    }
  }
  return a;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (dutch_national_flag_sort([])).join(' ') + "]"));
  console.log(_str("[" + (dutch_national_flag_sort([0])).join(' ') + "]"));
  console.log(_str("[" + (dutch_national_flag_sort([2, 1, 0, 0, 1, 2])).join(' ') + "]"));
  console.log(_str("[" + (dutch_national_flag_sort([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1])).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

