// Generated by Mochi v0.10.59 on 2025-08-07 08:55:37 GMT+7

function pigeonhole_sort(arr: number[]): number[] {
  if ((_len(arr) == 0)) {
    return arr;
  }
  let min_val: number = Math.trunc((() => { const _arr = arr; return _arr.length === 0 ? 0 : Math.min(..._arr); })());
  let max_val: number = Math.trunc((() => { const _arr = arr; return _arr.length === 0 ? 0 : Math.max(..._arr); })());
  let size: number = ((max_val - min_val) + 1);
  let holes: number[] = [];
  let i: number = 0;
  while ((i < size)) {
    holes.push(0);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(arr))) {
    let x: number = arr[(i) < 0 ? arr.length + (i) : i];
    let index: number = (x - min_val);
    holes[(index) < 0 ? holes.length + (index) : index] = (holes[(index) < 0 ? holes.length + (index) : index] + 1);
    i = (i + 1);
  }
  let sorted_index: number = 0;
  let count: number = 0;
  while ((count < size)) {
    while ((holes[(count) < 0 ? holes.length + (count) : count] > 0)) {
      arr[(sorted_index) < 0 ? arr.length + (sorted_index) : sorted_index] = (count + min_val);
      holes[(count) < 0 ? holes.length + (count) : count] = (holes[(count) < 0 ? holes.length + (count) : count] - 1);
      sorted_index = (sorted_index + 1);
    }
    count = (count + 1);
  }
  return arr;
}
let example: number[] = [8, 3, 2, 7, 4, 6, 8];
let output: string = "Sorted order is:";
let j: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = pigeonhole_sort(example)
  while ((j < _len(result))) {
    output = ((output + " ") + _str(result[(j) < 0 ? result.length + (j) : j]));
    j = (j + 1);
  }
  console.log(_str(output));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

