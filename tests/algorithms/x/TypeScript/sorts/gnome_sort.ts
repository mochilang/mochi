// Generated by Mochi v0.10.59 on 2025-08-07 08:55:21 GMT+7

function gnome_sort(lst: number[]): number[] {
  if ((_len(lst) <= 1)) {
    return lst;
  }
  let i: number = 1;
  while ((i < _len(lst))) {
    if ((lst[(Math.trunc((i - 1))) < 0 ? lst.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))] <= lst[(i) < 0 ? lst.length + (i) : i])) {
      i = (i + 1);
    } else {
      let tmp: number = lst[(Math.trunc((i - 1))) < 0 ? lst.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))];
      lst[((i - 1)) < 0 ? lst.length + ((i - 1)) : (i - 1)] = lst[(i) < 0 ? lst.length + (i) : i];
      lst[(i) < 0 ? lst.length + (i) : i] = tmp;
      i = (i - 1);
      if ((i == 0)) {
        i = 1;
      }
    }
  }
  return lst;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (gnome_sort([0, 5, 3, 2, 2])).join(' ') + "]"));
  console.log(_str("[" + (gnome_sort([])).join(' ') + "]"));
  console.log(_str("[" + (gnome_sort([-2, -5, -45])).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

