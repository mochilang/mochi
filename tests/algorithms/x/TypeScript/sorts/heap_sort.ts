// Generated by Mochi v0.10.71 on 2025-08-24 09:02:49 GMT+7

function heapify(arr: number[], index: number, heap_size: number) {
  let largest: number = index;
  let left_index: bigint = ((2 * index) + 1);
  let right_index: bigint = ((2 * index) + 2);
  if (((left_index < heap_size) && (arr[(()=>{const _mochi_idx = left_index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]))) {
    largest = left_index;
  }
  if (((right_index < heap_size) && (arr[(()=>{const _mochi_idx = right_index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]))) {
    largest = right_index;
  }
  if ((largest !== index)) {
    let temp: number = arr[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    arr[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    arr[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = temp;
    heapify(arr, largest, heap_size);
  }
}
function heap_sort(arr: number[]): number[] {
  let n: number = _len(arr);
  let i: bigint = (Math.trunc(n / 2) - 1);
  while ((i >= 0)) {
    heapify(arr, i, n);
    i = (i - 1);
  }
  i = (n - 1);
  while ((i > 0)) {
    let temp: number = arr[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    arr[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = temp;
    heapify(arr, 0, i);
    i = (i - 1);
  }
  return arr;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let data: number[]
let result: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
data = [3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4]
result = heap_sort(data)
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(result)));
  if ((_str(result) !== _str([-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123]))) {
    _panic("Assertion error");
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

