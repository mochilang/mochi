// Generated by Mochi v0.10.59 on 2025-08-07 08:55:22 GMT+7

function heapify(arr: number[], index: number, heap_size: number) {
  let largest: number = index;
  let left_index: number = ((2 * index) + 1);
  let right_index: number = ((2 * index) + 2);
  if (((left_index < heap_size) && (arr[(left_index) < 0 ? arr.length + (left_index) : left_index] > arr[(largest) < 0 ? arr.length + (largest) : largest]))) {
    largest = left_index;
  }
  if (((right_index < heap_size) && (arr[(right_index) < 0 ? arr.length + (right_index) : right_index] > arr[(largest) < 0 ? arr.length + (largest) : largest]))) {
    largest = right_index;
  }
  if ((largest != index)) {
    let temp: number = arr[(largest) < 0 ? arr.length + (largest) : largest];
    arr[(largest) < 0 ? arr.length + (largest) : largest] = arr[(index) < 0 ? arr.length + (index) : index];
    arr[(index) < 0 ? arr.length + (index) : index] = temp;
    heapify(arr, largest, heap_size);
  }
}
function heap_sort(arr: number[]): number[] {
  let n: number = _len(arr);
  let i: number = (Math.trunc(n / 2) - 1);
  while ((i >= 0)) {
    heapify(arr, i, n);
    i = (i - 1);
  }
  i = (n - 1);
  while ((i > 0)) {
    let temp: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
    arr[(0) < 0 ? arr.length + (0) : 0] = arr[(i) < 0 ? arr.length + (i) : i];
    arr[(i) < 0 ? arr.length + (i) : i] = temp;
    heapify(arr, 0, i);
    i = (i - 1);
  }
  return arr;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let data: number[]
let result: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
data = [3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4]
result = heap_sort(data)
  console.log(_str("[" + (result).join(' ') + "]"));
  if ((_str(result) != _str([-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123]))) {
    _panic("Assertion error");
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

