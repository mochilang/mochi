// Generated by Mochi v0.10.59 on 2025-08-07 08:55:54 GMT+7

function swap(xs: number[], i: number, j: number): number[] {
  let res: number[] = [];
  let k: number = 0;
  while ((k < _len(xs))) {
    if ((k == i)) {
      res.push(xs[(j) < 0 ? xs.length + (j) : j]);
    } else {
      if ((k == j)) {
        res.push(xs[(i) < 0 ? xs.length + (i) : i]);
      } else {
        res.push(xs[(k) < 0 ? xs.length + (k) : k]);
      }
    }
    k = (k + 1);
  }
  return res;
}
function wiggle_sort(nums: number[]): number[] {
  let i: number = 0;
  let res: number[] = nums;
  while ((i < _len(res))) {
    let j: number = ((i == 0) ? (_len(res) - 1) : (i - 1));
    let prev: number = res[(j) < 0 ? res.length + (j) : j];
    let curr: number = res[(i) < 0 ? res.length + (i) : i];
    if ((((i % 2) == 1) == (prev > curr))) {
      res = swap(res, j, i);
    }
    i = (i + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(wiggle_sort([3.0, 5.0, 2.0, 1.0, 6.0, 4.0]))));
  console.log(_str(_str(wiggle_sort([0.0, 5.0, 3.0, 2.0, 2.0]))));
  console.log(_str(_str(wiggle_sort([]))));
  console.log(_str(_str(wiggle_sort([-2.0, -5.0, -45.0]))));
  console.log(_str(_str(wiggle_sort([-2.1, -5.68, -45.11]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

