// Generated by Mochi v0.10.59 on 2025-08-07 08:55:40 GMT+7

let RADIX: number = 10;
function make_buckets(): number[][] {
  let buckets: number[][] = [];
  let i: number = 0;
  while ((i < RADIX)) {
    buckets.push([]);
    i = (i + 1);
  }
  return buckets;
}
function max_value(xs: number[]): number {
  let max_val: number = xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] > max_val)) {
      max_val = xs[(i) < 0 ? xs.length + (i) : i];
    }
    i = (i + 1);
  }
  return max_val;
}
function radix_sort(list_of_ints: number[]): number[] {
  let placement: number = 1;
  let max_digit: number = max_value(list_of_ints);
  while ((placement <= max_digit)) {
    let buckets: number[][] = make_buckets();
    let i: number = 0;
    while ((i < _len(list_of_ints))) {
      let value: number = list_of_ints[(i) < 0 ? list_of_ints.length + (i) : i];
      let tmp: number = (Math.trunc(value / placement) % RADIX);
      buckets[(tmp) < 0 ? buckets.length + (tmp) : tmp] = [...buckets[(tmp) < 0 ? buckets.length + (tmp) : tmp], value];
      i = (i + 1);
    }
    let a: number = 0;
    let b: number = 0;
    while ((b < RADIX)) {
      let bucket: number[] = buckets[(b) < 0 ? buckets.length + (b) : b];
      let j: number = 0;
      while ((j < _len(bucket))) {
        list_of_ints[(a) < 0 ? list_of_ints.length + (a) : a] = bucket[(j) < 0 ? bucket.length + (j) : j];
        a = (a + 1);
        j = (j + 1);
      }
      b = (b + 1);
    }
    placement = (placement * RADIX);
  }
  return list_of_ints;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(radix_sort([0, 5, 3, 2, 2]))));
  console.log(_str(_str(radix_sort([1, 100, 10, 1000]))));
  console.log(_str(_str(radix_sort([15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

