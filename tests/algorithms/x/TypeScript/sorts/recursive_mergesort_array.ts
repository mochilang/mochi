// Generated by Mochi v0.10.59 on 2025-08-07 08:55:42 GMT+7

function subarray(xs: number[], start: number, end: number): number[] {
  let result: number[] = [];
  let k: number = start;
  while ((k < end)) {
    result.push(xs[(k) < 0 ? xs.length + (k) : k]);
    k = (k + 1);
  }
  return result;
}
function merge(arr: number[]): number[] {
  if ((_len(arr) > 1)) {
    let middle_length: number = Math.trunc(_len(arr) / 2);
    let left_array: number[] = subarray(arr, 0, middle_length);
    let right_array: number[] = subarray(arr, middle_length, _len(arr));
    let left_size: number = _len(left_array);
    let right_size: number = _len(right_array);
    merge(left_array);
    merge(right_array);
    let left_index: number = 0;
    let right_index: number = 0;
    let index: number = 0;
    while (((left_index < left_size) && (right_index < right_size))) {
      if ((left_array[(left_index) < 0 ? left_array.length + (left_index) : left_index] < right_array[(right_index) < 0 ? right_array.length + (right_index) : right_index])) {
        arr[(index) < 0 ? arr.length + (index) : index] = left_array[(left_index) < 0 ? left_array.length + (left_index) : left_index];
        left_index = (left_index + 1);
      } else {
        arr[(index) < 0 ? arr.length + (index) : index] = right_array[(right_index) < 0 ? right_array.length + (right_index) : right_index];
        right_index = (right_index + 1);
      }
      index = (index + 1);
    }
    while ((left_index < left_size)) {
      arr[(index) < 0 ? arr.length + (index) : index] = left_array[(left_index) < 0 ? left_array.length + (left_index) : left_index];
      left_index = (left_index + 1);
      index = (index + 1);
    }
    while ((right_index < right_size)) {
      arr[(index) < 0 ? arr.length + (index) : index] = right_array[(right_index) < 0 ? right_array.length + (right_index) : right_index];
      right_index = (right_index + 1);
      index = (index + 1);
    }
  }
  return arr;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(merge([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))));
  console.log(_str(_str(merge([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))));
  console.log(_str(_str(merge([10, 22, 1, 2, 3, 9, 15, 23]))));
  console.log(_str(_str(merge([100]))));
  console.log(_str(_str(merge([]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

