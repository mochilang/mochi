// Generated by Mochi v0.10.59 on 2025-08-07 08:55:49 GMT+7

function merge(xs: number[], ys: number[], reverse: boolean): number[] {
  let result: number[] = [];
  let i: number = 0;
  let j: number = 0;
  while (((i < _len(xs)) && (j < _len(ys)))) {
    if (reverse) {
      if ((xs[(i) < 0 ? xs.length + (i) : i] > ys[(j) < 0 ? ys.length + (j) : j])) {
        result.push(xs[(i) < 0 ? xs.length + (i) : i]);
        i = (i + 1);
      } else {
        result.push(ys[(j) < 0 ? ys.length + (j) : j]);
        j = (j + 1);
      }
    } else {
      if ((xs[(i) < 0 ? xs.length + (i) : i] < ys[(j) < 0 ? ys.length + (j) : j])) {
        result.push(xs[(i) < 0 ? xs.length + (i) : i]);
        i = (i + 1);
      } else {
        result.push(ys[(j) < 0 ? ys.length + (j) : j]);
        j = (j + 1);
      }
    }
  }
  while ((i < _len(xs))) {
    result.push(xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  while ((j < _len(ys))) {
    result.push(ys[(j) < 0 ? ys.length + (j) : j]);
    j = (j + 1);
  }
  return result;
}
function strand_sort_rec(arr: number[], reverse: boolean, solution: number[]): number[] {
  if ((_len(arr) == 0)) {
    return solution;
  }
  let sublist: number[] = [];
  let remaining: number[] = [];
  sublist.push(arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)]);
  let last: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
  let k: number = 1;
  while ((k < _len(arr))) {
    let item: number = arr[(k) < 0 ? arr.length + (k) : k];
    if (reverse) {
      if ((item < last)) {
        sublist.push(item);
        last = item;
      } else {
        remaining.push(item);
      }
    } else {
      if ((item > last)) {
        sublist.push(item);
        last = item;
      } else {
        remaining.push(item);
      }
    }
    k = (k + 1);
  }
  solution = merge(solution, sublist, reverse);
  return strand_sort_rec(remaining, reverse, solution);
}
function strand_sort(arr: number[], reverse: boolean): number[] {
  return strand_sort_rec(arr, reverse, []);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(strand_sort([4, 3, 5, 1, 2], false))));
  console.log(_str(_str(strand_sort([4, 3, 5, 1, 2], true))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

