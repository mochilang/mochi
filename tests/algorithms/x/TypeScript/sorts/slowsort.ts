// Generated by Mochi v0.10.59 on 2025-08-07 08:55:47 GMT+7

function swap(seq: number[], i: number, j: number) {
  let temp: number = seq[(i) < 0 ? seq.length + (i) : i];
  seq[(i) < 0 ? seq.length + (i) : i] = seq[(j) < 0 ? seq.length + (j) : j];
  seq[(j) < 0 ? seq.length + (j) : j] = temp;
}
function slowsort_recursive(seq: number[], start: number, end_index: number) {
  if ((start >= end_index)) {
    return;
  }
  let mid: number = Math.trunc((start + end_index) / 2);
  slowsort_recursive(seq, start, mid);
  slowsort_recursive(seq, (mid + 1), end_index);
  if ((seq[(end_index) < 0 ? seq.length + (end_index) : end_index] < seq[(mid) < 0 ? seq.length + (mid) : mid])) {
    swap(seq, end_index, mid);
  }
  slowsort_recursive(seq, start, (end_index - 1));
}
function slow_sort(seq: number[]): number[] {
  if ((_len(seq) > 0)) {
    slowsort_recursive(seq, 0, (_len(seq) - 1));
  }
  return seq;
}
let seq1: number[] = [1, 6, 2, 5, 3, 4, 4, 5];
let seq2: number[] = [];
let seq3: number[] = [2];
let seq4: number[] = [1, 2, 3, 4];
let seq5: number[] = [4, 3, 2, 1];
let seq6: number[] = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
let seq7: number[] = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
let seq8: number[] = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(slow_sort(seq1))));
  console.log(_str(_str(slow_sort(seq2))));
  console.log(_str(_str(slow_sort(seq3))));
  console.log(_str(_str(slow_sort(seq4))));
  console.log(_str(_str(slow_sort(seq5))));
  slowsort_recursive(seq6, 2, 7);
  console.log(_str(_str(seq6)));
  slowsort_recursive(seq7, 0, 4);
  console.log(_str(_str(seq7)));
  slowsort_recursive(seq8, 5, (_len(seq8) - 1));
  console.log(_str(_str(seq8)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

