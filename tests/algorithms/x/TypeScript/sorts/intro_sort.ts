// Generated by Mochi v0.10.59 on 2025-08-07 08:55:24 GMT+7

function insertion_sort(a: number[], start: number, end_: number): number[] {
  let arr: number[] = a;
  let i: number = start;
  while ((i < end_)) {
    let key: number = arr[(i) < 0 ? arr.length + (i) : i];
    let j: number = i;
    while (((j > start) && (arr[(Math.trunc((j - 1))) < 0 ? arr.length + (Math.trunc((j - 1))) : Math.trunc((j - 1))] > key))) {
      arr[(j) < 0 ? arr.length + (j) : j] = arr[(Math.trunc((j - 1))) < 0 ? arr.length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
      j = (j - 1);
    }
    arr[(j) < 0 ? arr.length + (j) : j] = key;
    i = (i + 1);
  }
  return arr;
}
function heapify(a: number[], index: number, heap_size: number): number[] {
  let arr: number[] = a;
  let largest: number = index;
  let left: number = ((2 * index) + 1);
  let right: number = ((2 * index) + 2);
  if (((left < heap_size) && (arr[(left) < 0 ? arr.length + (left) : left] > arr[(largest) < 0 ? arr.length + (largest) : largest]))) {
    largest = left;
  }
  if (((right < heap_size) && (arr[(right) < 0 ? arr.length + (right) : right] > arr[(largest) < 0 ? arr.length + (largest) : largest]))) {
    largest = right;
  }
  if ((largest != index)) {
    let temp: number = arr[(index) < 0 ? arr.length + (index) : index];
    arr[(index) < 0 ? arr.length + (index) : index] = arr[(largest) < 0 ? arr.length + (largest) : largest];
    arr[(largest) < 0 ? arr.length + (largest) : largest] = temp;
    arr = heapify(arr, largest, heap_size);
  }
  return arr;
}
function heap_sort(a: number[]): number[] {
  let arr: number[] = a;
  let n: number = _len(arr);
  if ((n <= 1)) {
    return arr;
  }
  let i: number = Math.trunc(n / 2);
  while (true) {
    arr = heapify(arr, i, n);
    if ((i == 0)) {
      break
    }
    i = (i - 1);
  }
  i = (n - 1);
  while ((i > 0)) {
    let temp: number = arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)];
    arr[(0) < 0 ? arr.length + (0) : 0] = arr[(i) < 0 ? arr.length + (i) : i];
    arr[(i) < 0 ? arr.length + (i) : i] = temp;
    arr = heapify(arr, 0, i);
    i = (i - 1);
  }
  return arr;
}
function median_of_3(arr: number[], first: number, middle: number, last: number): number {
  let a = arr[(first) < 0 ? arr.length + (first) : first];
  let b: number = arr[(middle) < 0 ? arr.length + (middle) : middle];
  let c: number = arr[(last) < 0 ? arr.length + (last) : last];
  if ((((a > b) && (a < c)) || ((a < b) && (a > c)))) {
    return a;
  } else {
    if ((((b > a) && (b < c)) || ((b < a) && (b > c)))) {
      return b;
    } else {
      return c;
    }
  }
}
function partition(arr: number[], low: number, high: number, pivot: number): number {
  let i: number = low;
  let j: number = high;
  while (true) {
    while ((arr[(i) < 0 ? arr.length + (i) : i] < pivot)) {
      i = (i + 1);
    }
    j = (j - 1);
    while ((pivot < arr[(j) < 0 ? arr.length + (j) : j])) {
      j = (j - 1);
    }
    if ((i >= j)) {
      return i;
    }
    let temp: number = arr[(i) < 0 ? arr.length + (i) : i];
    arr[(i) < 0 ? arr.length + (i) : i] = arr[(j) < 0 ? arr.length + (j) : j];
    arr[(j) < 0 ? arr.length + (j) : j] = temp;
    i = (i + 1);
  }
}
function int_log2(n: number): number {
  let v: number = n;
  let r: number = 0;
  while ((v > 1)) {
    v = Math.trunc(v / 2);
    r = (r + 1);
  }
  return r;
}
function intro_sort(arr: number[], start: number, end_: number, size_threshold: number, max_depth: number): number[] {
  let array: number[] = arr;
  let s: number = start;
  let e: number = end_;
  let depth: number = max_depth;
  while (((e - s) > size_threshold)) {
    if ((depth == 0)) {
      return heap_sort(array);
    }
    depth = (depth - 1);
    let pivot: number = median_of_3(array, s, ((s + Math.trunc((e - s) / 2)) + 1), (e - 1));
    let p: number = partition(array, s, e, pivot);
    array = intro_sort(array, p, e, size_threshold, depth);
    e = p;
  }
  let res: number[] = insertion_sort(array, s, e);
  let _: number = _len(res);
  return res;
}
function intro_sort_main(arr: number[]) {
  if ((_len(arr) == 0)) {
    console.log(_str("[" + (arr).join(' ') + "]"));
    return;
  }
  let max_depth: number = (2 * int_log2(_len(arr)));
  let sorted: number[] = intro_sort(arr, 0, _len(arr), 16, max_depth);
  console.log(_str("[" + (sorted).join(' ') + "]"));
}
let example1: number[] = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let example2: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  intro_sort_main(example1);
example2 = [21, 15, 11, 45, -2, -11, 46]
  intro_sort_main(example2);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

