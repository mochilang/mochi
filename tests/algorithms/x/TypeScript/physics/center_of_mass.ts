// Generated by Mochi v0.10.63 on 2025-08-11 14:53:42 GMT+7

export interface Particle { x: number; y: number; z: number; mass: number }
export interface Coord3D { x: number; y: number; z: number }
function round2(x: number): number {
  let scaled: number = (x * 100.0);
  let rounded: number = Math.trunc((scaled + 0.5));
  return (rounded / 100.0);
}
function center_of_mass(ps: Particle[]): Coord3D {
  if ((_len(ps) == 0)) {
    _panic("No particles provided");
  }
  let i: number = 0;
  let total_mass: number = 0.0;
  while ((i < _len(ps))) {
    let p: Particle = ps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ps.length + _mochi_idx : _mochi_idx;})()];
    if ((p.mass <= 0.0)) {
      _panic("Mass of all particles must be greater than 0");
    }
    total_mass = (total_mass + p.mass);
    i = (i + 1);
  }
  let sum_x: number = 0.0;
  let sum_y: number = 0.0;
  let sum_z: number = 0.0;
  i = 0;
  while ((i < _len(ps))) {
    let p: Particle = ps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ps.length + _mochi_idx : _mochi_idx;})()];
    sum_x = (sum_x + (p.x * p.mass));
    sum_y = (sum_y + (p.y * p.mass));
    sum_z = (sum_z + (p.z * p.mass));
    i = (i + 1);
  }
  let cm_x: number = round2((sum_x / total_mass));
  let cm_y: number = round2((sum_y / total_mass));
  let cm_z: number = round2((sum_z / total_mass));
  return {"x": cm_x, "y": cm_y, "z": cm_z};
}
function coord_to_string(c: Coord3D): string {
  return (((((("Coord3D(x=" + _str(c.x)) + ", y=") + _str(c.y)) + ", z=") + _str(c.z)) + ")");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r1: Coord3D
let r2: Coord3D
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = center_of_mass([{"x": 1.5, "y": 4.0, "z": 3.4, "mass": 4.0}, {"x": 5.0, "y": 6.8, "z": 7.0, "mass": 8.1}, {"x": 9.4, "y": 10.1, "z": 11.6, "mass": 12.0}])
  console.log(_str(coord_to_string(r1)));
r2 = center_of_mass([{"x": 1.0, "y": 2.0, "z": 3.0, "mass": 4.0}, {"x": 5.0, "y": 6.0, "z": 7.0, "mass": 8.0}, {"x": 9.0, "y": 10.0, "z": 11.0, "mass": 12.0}])
  console.log(_str(coord_to_string(r2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

