// Generated by Mochi v0.10.59 on 2025-08-07 08:18:16 GMT+7

let c: number = 299792458.0;
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function beta(velocity: number): number {
  if ((velocity > c)) {
    _panic("Speed must not exceed light speed 299,792,458 [m/s]!");
  }
  if ((velocity < 1.0)) {
    _panic("Speed must be greater than or equal to 1!");
  }
  return (velocity / c);
}
function gamma(velocity: number): number {
  let b: number = beta(velocity);
  return (1.0 / sqrtApprox((1.0 - (b * b))));
}
function transformation_matrix(velocity: number): number[][] {
  let g: number = gamma(velocity);
  let b: number = beta(velocity);
  return [[g, (-g * b), 0.0, 0.0], [(-g * b), g, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]];
}
function mat_vec_mul(mat: number[][], vec: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < 4)) {
    let row: number[] = mat[(i) < 0 ? mat.length + (i) : i];
    let value: number = ((((row[(Math.trunc(0)) < 0 ? row.length + (Math.trunc(0)) : Math.trunc(0)] * vec[(Math.trunc(0)) < 0 ? vec.length + (Math.trunc(0)) : Math.trunc(0)]) + (row[(Math.trunc(1)) < 0 ? row.length + (Math.trunc(1)) : Math.trunc(1)] * vec[(Math.trunc(1)) < 0 ? vec.length + (Math.trunc(1)) : Math.trunc(1)])) + (row[(Math.trunc(2)) < 0 ? row.length + (Math.trunc(2)) : Math.trunc(2)] * vec[(Math.trunc(2)) < 0 ? vec.length + (Math.trunc(2)) : Math.trunc(2)])) + (row[(Math.trunc(3)) < 0 ? row.length + (Math.trunc(3)) : Math.trunc(3)] * vec[(Math.trunc(3)) < 0 ? vec.length + (Math.trunc(3)) : Math.trunc(3)]));
    res.push(value);
    i = (i + 1);
  }
  return res;
}
function transform(velocity: number, event: number[]): number[] {
  let g: number = gamma(velocity);
  let b: number = beta(velocity);
  let ct: number = (event[(Math.trunc(0)) < 0 ? event.length + (Math.trunc(0)) : Math.trunc(0)] * c);
  let x: number = event[(Math.trunc(1)) < 0 ? event.length + (Math.trunc(1)) : Math.trunc(1)];
  return [((g * ct) - ((g * b) * x)), (((-g * b) * ct) + (g * x)), event[(Math.trunc(2)) < 0 ? event.length + (Math.trunc(2)) : Math.trunc(2)], event[(Math.trunc(3)) < 0 ? event.length + (Math.trunc(3)) : Math.trunc(3)]];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let v: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(beta(c))));
  console.log(_str(_str(beta(199792458.0))));
  console.log(_str(_str(beta(100000.0))));
  console.log(_str(_str(gamma(4.0))));
  console.log(_str(_str(gamma(100000.0))));
  console.log(_str(_str(gamma(30000000.0))));
  console.log(_str(_str(transformation_matrix(29979245.0))));
v = transform(29979245.0, [1.0, 2.0, 3.0, 4.0])
  console.log(_str(_str(v)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

