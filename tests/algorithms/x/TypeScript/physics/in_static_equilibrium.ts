// Generated by Mochi v0.10.69 on 2025-08-19 16:45:15 GMT+7

let PI: number = 3.141592653589793;
let TWO_PI: number = 6.283185307179586;
function _mod(x: number, m: number): number {
  return (x - (Math.trunc((x / m)) * m));
}
function sin_approx(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y3: number = (y2 * y);
  let y5: number = (y3 * y2);
  let y7: number = (y5 * y2);
  return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0));
}
function cos_approx(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y4: number = (y2 * y2);
  let y6: number = (y4 * y2);
  return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0));
}
function polar_force(magnitude: number, angle: number, radian_mode: boolean): number[] {
  let theta: number = (radian_mode ? angle : ((angle * PI) / 180.0));
  return [(magnitude * cos_approx(theta)), (magnitude * sin_approx(theta))];
}
function abs_float(x: number): number {
  if ((x < 0.0)) {
    return -x;
  } else {
    return x;
  }
}
function in_static_equilibrium(forces: number[][], location: number[][], eps: number): boolean {
  let sum_moments: number = 0.0;
  let i: number = 0;
  let n: number = _len(forces);
  while ((i < n)) {
    let r: number[] = location[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? location.length + _mochi_idx : _mochi_idx;})()];
    let f: number[] = forces[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? forces.length + _mochi_idx : _mochi_idx;})()];
    let moment: number = ((r[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()] * f[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()]) - (r[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()] * f[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()]));
    sum_moments = (sum_moments + moment);
    i = (i + 1);
  }
  return (abs_float(sum_moments) < eps);
}
let location1: number[][] = [[1.0, 0.0], [10.0, 0.0]];
let location2: number[][] = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]];
let location3: number[][] = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]];
let location4: number[][] = [[0.0, 0.0], [6.0, 0.0], [10.0, 0.0], [12.0, 0.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let forces1: number[][]
let forces2: number[][]
let forces3: number[][]
let forces4: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
forces1 = [[1.0, 1.0], [-1.0, 2.0]]
  console.log(_str(in_static_equilibrium(forces1, location1, 0.1)));
forces2 = [polar_force(718.4, 150.0, false), polar_force(879.54, 45.0, false), polar_force(100.0, -90.0, false)]
  console.log(_str(in_static_equilibrium(forces2, location2, 0.1)));
forces3 = [polar_force((30.0 * 9.81), 15.0, false), polar_force(215.0, 135.0, false), polar_force(264.0, 60.0, false)]
  console.log(_str(in_static_equilibrium(forces3, location3, 0.1)));
forces4 = [[0.0, -2000.0], [0.0, -1200.0], [0.0, 15600.0], [0.0, -12400.0]]
  console.log(_str(in_static_equilibrium(forces4, location4, 0.1)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

