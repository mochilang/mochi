// Generated by Mochi v0.10.69 on 2025-08-19 16:45:25 GMT+7

function pow10(n: number): number {
  let p: number = 1.0;
  if ((n >= 0)) {
    let i: number = 0;
    while ((i < n)) {
      p = (p * 10.0);
      i = (i + 1);
    }
  } else {
    let i: number = 0;
    while ((i > n)) {
      p = (p / 10.0);
      i = (i - 1);
    }
  }
  return p;
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  let f: number = i;
  if ((f > x)) {
    return (i - 1);
  }
  return f;
}
function format_scientific_3(x: number): string {
  if ((x === 0.0)) {
    return "0.000e+00";
  }
  let sign: string = "";
  let num: number = x;
  if ((num < 0.0)) {
    sign = "-";
    num = -num;
  }
  let exp: number = 0;
  while ((num >= 10.0)) {
    num = (num / 10.0);
    exp = (exp + 1);
  }
  while ((num < 1.0)) {
    num = (num * 10.0);
    exp = (exp - 1);
  }
  let temp = Math.floor(((num * 1000.0) + 0.5));
  let scaled: number = Math.trunc(temp);
  if ((scaled === 10000)) {
    scaled = 1000;
    exp = (exp + 1);
  }
  let int_part: number = Math.trunc(scaled / 1000);
  let frac_part: bigint = (scaled % 1000);
  let frac_str: string = _str(frac_part);
  while ((_len(frac_str) < 3)) {
    frac_str = ("0" + frac_str);
  }
  let mantissa: string = ((_str(int_part) + ".") + frac_str);
  let exp_sign: string = "+";
  let exp_abs: number = exp;
  if ((exp < 0)) {
    exp_sign = "-";
    exp_abs = -exp;
  }
  let exp_str: string = _str(exp_abs);
  if ((exp_abs < 10)) {
    exp_str = ("0" + exp_str);
  }
  return ((((sign + mantissa) + "e") + exp_sign) + exp_str);
}
function orbital_transfer_work(mass_central: number, mass_object: number, r_initial: number, r_final: number): string {
  let G: number = (6.6743 * pow10(-11));
  if (((r_initial <= 0.0) || (r_final <= 0.0))) {
    _panic("Orbital radii must be greater than zero.");
  }
  let work: number = ((((G * mass_central) * mass_object) / 2.0) * ((1.0 / r_initial) - (1.0 / r_final)));
  return format_scientific_3(work);
}
function test_orbital_transfer_work() {
  if ((orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6))) !== "2.811e+09")) {
    _panic("case1 failed");
  }
  if ((orbital_transfer_work((5.972 * pow10(24)), 500.0, (7.0 * pow10(6)), (6.371 * pow10(6))) !== "-1.405e+09")) {
    _panic("case2 failed");
  }
  if ((orbital_transfer_work((1.989 * pow10(30)), 1000.0, (1.5 * pow10(11)), (2.28 * pow10(11))) !== "1.514e+11")) {
    _panic("case3 failed");
  }
}
function main() {
  test_orbital_transfer_work();
  console.log(_str(orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

