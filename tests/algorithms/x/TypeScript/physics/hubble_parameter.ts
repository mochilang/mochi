// Generated by Mochi v0.10.69 on 2025-08-19 16:45:13 GMT+7

function pow(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function sqrt_approx(x: number): number {
  if ((x === 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function hubble_parameter(hubble_constant: number, radiation_density: number, matter_density: number, dark_energy: number, redshift: number): number {
  let parameters: number[] = [redshift, radiation_density, matter_density, dark_energy];
  let i: number = 0;
  while ((i < _len(parameters))) {
    if ((parameters[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parameters.length + _mochi_idx : _mochi_idx;})()] < 0.0)) {
      _panic("All input parameters must be positive");
    }
    i = (i + 1);
  }
  i = 1;
  while ((i < 4)) {
    if ((parameters[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parameters.length + _mochi_idx : _mochi_idx;})()] > 1.0)) {
      _panic("Relative densities cannot be greater than one");
    }
    i = (i + 1);
  }
  let curvature: number = (1.0 - ((matter_density + radiation_density) + dark_energy));
  let zp1: number = (redshift + 1.0);
  let e2: number = ((((radiation_density * pow(zp1, 4)) + (matter_density * pow(zp1, 3))) + (curvature * pow(zp1, 2))) + dark_energy);
  return (hubble_constant * sqrt_approx(e2));
}
function test_hubble_parameter() {
  let h: number = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0);
  if (((h < 68.2999) || (h > 68.3001))) {
    _panic("hubble_parameter test failed");
  }
}
function main() {
  test_hubble_parameter();
  console.log(_str(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

