// Generated by Mochi v0.10.64 on 2025-08-12 16:11:59 GMT+7

function pow10(n: number): number {
  let p: number = 1.0;
  let k: number = 0;
  if ((n >= 0)) {
    while ((k < n)) {
      p = (p * 10.0);
      k = (k + 1);
    }
  } else {
    let m: number = -n;
    while ((k < m)) {
      p = (p / 10.0);
      k = (k + 1);
    }
  }
  return p;
}
function sqrt_newton(n: number): number {
  if ((n === 0.0)) {
    return 0.0;
  }
  let x: number = n;
  let j: number = 0;
  while ((j < 20)) {
    x = ((x + (n / x)) / 2.0);
    j = (j + 1);
  }
  return x;
}
function round3(x: number): number {
  let y: number = ((x * 1000.0) + 0.5);
  let yi: number = Math.trunc(y);
  if ((yi > y)) {
    yi = (yi - 1);
  }
  return (yi / 1000.0);
}
function escape_velocity(mass: number, radius: number): number {
  if ((radius === 0.0)) {
    _panic("Radius cannot be zero.");
  }
  let G: number = (6.6743 * pow10(-11));
  let velocity: number = sqrt_newton((((2.0 * G) * mass) / radius));
  return round3(velocity);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(escape_velocity((5.972 * pow10(24)), (6.371 * pow10(6)))));
  console.log(_str(escape_velocity((7.348 * pow10(22)), (1.737 * pow10(6)))));
  console.log(_str(escape_velocity((1.898 * pow10(27)), (6.9911 * pow10(7)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

