// Generated by Mochi v0.10.63 on 2025-08-11 14:53:47 GMT+7

function doppler_effect(org_freq: number, wave_vel: number, obs_vel: number, src_vel: number): number {
  if ((wave_vel == src_vel)) {
    _panic("division by zero implies vs=v and observer in front of the source");
  }
  let doppler_freq: number = ((org_freq * (wave_vel + obs_vel)) / (wave_vel - src_vel));
  if ((doppler_freq <= 0.0)) {
    _panic("non-positive frequency implies vs>v or v0>v (in the opposite direction)");
  }
  return doppler_freq;
}
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function almost_equal(a: number, b: number, tol: number): boolean {
  return (absf((a - b)) <= tol);
}
function test_doppler_effect() {
  if (!almost_equal(doppler_effect(100.0, 330.0, 10.0, 0.0), 103.03030303030303, 1e-07)) {
    _panic("test 1 failed");
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, -10.0, 0.0), 96.96969696969697, 1e-07)) {
    _panic("test 2 failed");
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, 0.0, 10.0), 103.125, 1e-07)) {
    _panic("test 3 failed");
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, 0.0, -10.0), 97.05882352941177, 1e-07)) {
    _panic("test 4 failed");
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, 10.0, 10.0), 106.25, 1e-07)) {
    _panic("test 5 failed");
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, -10.0, -10.0), 94.11764705882354, 1e-07)) {
    _panic("test 6 failed");
  }
}
function main() {
  test_doppler_effect();
  console.log(_str(doppler_effect(100.0, 330.0, 10.0, 0.0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

