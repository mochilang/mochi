// Generated by Mochi v0.10.64 on 2025-08-12 10:15:28 GMT+7

function exp_approx(x: number): number {
  let y: number = x;
  let is_neg: boolean = false;
  if ((x < 0.0)) {
    is_neg = true;
    y = -x;
  }
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 30)) {
    term = ((term * y) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  if (is_neg) {
    return (1.0 / sum);
  }
  return sum;
}
function ln_series(x: number): number {
  let t: number = ((x - 1.0) / (x + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let n: number = 1;
  while ((n <= 19)) {
    sum = (sum + (term / n));
    term = ((term * t) * t);
    n = (n + 2);
  }
  return (2.0 * sum);
}
function ln(x: number): number {
  let y: number = x;
  let k: number = 0;
  while ((y >= 10.0)) {
    y = (y / 10.0);
    k = (k + 1);
  }
  while ((y < 1.0)) {
    y = (y * 10.0);
    k = (k - 1);
  }
  return (ln_series(y) + (k * ln_series(10.0)));
}
function powf(base: number, exponent: number): number {
  return exp_approx((exponent * ln(base)));
}
function rainfall_intensity(coefficient_k: number, coefficient_a: number, coefficient_b: number, coefficient_c: number, return_period: number, duration: number): number {
  if ((coefficient_k <= 0.0)) {
    _panic("All parameters must be positive.");
  }
  if ((coefficient_a <= 0.0)) {
    _panic("All parameters must be positive.");
  }
  if ((coefficient_b <= 0.0)) {
    _panic("All parameters must be positive.");
  }
  if ((coefficient_c <= 0.0)) {
    _panic("All parameters must be positive.");
  }
  if ((return_period <= 0.0)) {
    _panic("All parameters must be positive.");
  }
  if ((duration <= 0.0)) {
    _panic("All parameters must be positive.");
  }
  let numerator: number = (coefficient_k * powf(return_period, coefficient_a));
  let denominator: number = powf((duration + coefficient_b), coefficient_c);
  return (numerator / denominator);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r1: number
let r2: number
let r3: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 60.0)
  console.log(_str(r1));
r2 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 30.0)
  console.log(_str(r2));
r3 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 5.0, 60.0)
  console.log(_str(r3));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

