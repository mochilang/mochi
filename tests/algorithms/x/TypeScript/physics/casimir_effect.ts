// Generated by Mochi v0.10.69 on 2025-08-22 13:11:22 GMT+7

let PI: number = 3.141592653589793;
let REDUCED_PLANCK_CONSTANT: number = 1.054571817e-34;
let SPEED_OF_LIGHT: number = 300000000.0;
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 100)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function casimir_force(force: number, area: number, distance: number): Record<string, number> {
  let zero_count: number = 0;
  if ((force === 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((area === 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((distance === 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((zero_count !== 1)) {
    _panic("One and only one argument must be 0");
  }
  if ((force < 0.0)) {
    _panic("Magnitude of force can not be negative");
  }
  if ((distance < 0.0)) {
    _panic("Distance can not be negative");
  }
  if ((area < 0.0)) {
    _panic("Area can not be negative");
  }
  if ((force === 0.0)) {
    let num = ((((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI) * area);
    let den: number = ((((240.0 * distance) * distance) * distance) * distance);
    let f = (num / den);
    return {force: f};
  }
  if ((area === 0.0)) {
    let num = (((((240.0 * force) * distance) * distance) * distance) * distance);
    let den: number = (((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI);
    let a = (num / den);
    return {area: a};
  }
  let num = ((((REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT) * PI) * PI) * area);
  let den: number = (240.0 * force);
  let inner = (num / den);
  let d: number = sqrtApprox(sqrtApprox(inner));
  return {distance: d};
}
function main() {
  console.log(_str(casimir_force(0.0, 4.0, 0.03)));
  console.log(_str(casimir_force(2.635e-10, 0.0023, 0.0)));
  console.log(_str(casimir_force(2.737e-18, 0.0, 0.0023746)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

