// Generated by Mochi v0.10.64 on 2025-08-12 16:33:33 GMT+7

function to_float(x: number): number {
  return (x * 1.0);
}
function round6(x: number): number {
  let factor: number = 1000000.0;
  return (Number(Math.trunc(((x * factor) + 0.5))) / factor);
}
function sqrtApprox(x: number): number {
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function validate(values: number[]): boolean {
  if ((_len(values) === 0)) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(values))) {
    if ((values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()] <= 0.0)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function effusion_ratio(m1: number, m2: number): number {
  if (!validate([m1, m2])) {
    console.log(_str("ValueError: Molar mass values must greater than 0."));
    return 0.0;
  }
  return round6(sqrtApprox((m2 / m1)));
}
function first_effusion_rate(rate: number, m1: number, m2: number): number {
  if (!validate([rate, m1, m2])) {
    console.log(_str("ValueError: Molar mass and effusion rate values must greater than 0."));
    return 0.0;
  }
  return round6((rate * sqrtApprox((m2 / m1))));
}
function second_effusion_rate(rate: number, m1: number, m2: number): number {
  if (!validate([rate, m1, m2])) {
    console.log(_str("ValueError: Molar mass and effusion rate values must greater than 0."));
    return 0.0;
  }
  return round6((rate / sqrtApprox((m2 / m1))));
}
function first_molar_mass(mass: number, r1: number, r2: number): number {
  if (!validate([mass, r1, r2])) {
    console.log(_str("ValueError: Molar mass and effusion rate values must greater than 0."));
    return 0.0;
  }
  let ratio: number = (r1 / r2);
  return round6((mass / (ratio * ratio)));
}
function second_molar_mass(mass: number, r1: number, r2: number): number {
  if (!validate([mass, r1, r2])) {
    console.log(_str("ValueError: Molar mass and effusion rate values must greater than 0."));
    return 0.0;
  }
  let ratio: number = (r1 / r2);
  return round6(((ratio * ratio) / mass));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(effusion_ratio(2.016, 4.002)));
  console.log(_str(first_effusion_rate(1.0, 2.016, 4.002)));
  console.log(_str(second_effusion_rate(1.0, 2.016, 4.002)));
  console.log(_str(first_molar_mass(2.0, 1.408943, 0.709752)));
  console.log(_str(second_molar_mass(2.0, 1.408943, 0.709752)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

