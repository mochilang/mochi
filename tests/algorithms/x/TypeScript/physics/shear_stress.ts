// Generated by Mochi v0.10.59 on 2025-08-07 08:18:30 GMT+7

export interface Result { name: string; value: number }
function shear_stress(stress: number, tangential_force: number, area: number): Result {
  let zeros: number = 0;
  if ((stress == 0.0)) {
    zeros = (zeros + 1);
  }
  if ((tangential_force == 0.0)) {
    zeros = (zeros + 1);
  }
  if ((area == 0.0)) {
    zeros = (zeros + 1);
  }
  if ((zeros != 1)) {
    _panic("You cannot supply more or less than 2 values");
  } else {
    if ((stress < 0.0)) {
      _panic("Stress cannot be negative");
    } else {
      if ((tangential_force < 0.0)) {
        _panic("Tangential Force cannot be negative");
      } else {
        if ((area < 0.0)) {
          _panic("Area cannot be negative");
        } else {
          if ((stress == 0.0)) {
            return {"name": "stress", "value": (tangential_force / area)};
          } else {
            if ((tangential_force == 0.0)) {
              return {"name": "tangential_force", "value": (stress * area)};
            } else {
              return {"name": "area", "value": (tangential_force / stress)};
            }
          }
        }
      }
    }
  }
}
function str_result(r: Result): string {
  return (((("Result(name='" + r.name) + "', value=") + _str(r.value)) + ")");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r1: Result
let r2: Result
let r3: Result
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = shear_stress(25.0, 100.0, 0.0)
  console.log(_str(str_result(r1)));
r2 = shear_stress(0.0, 1600.0, 200.0)
  console.log(_str(str_result(r2)));
r3 = shear_stress(1000.0, 0.0, 1200.0)
  console.log(_str(str_result(r3)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

