// Generated by Mochi v0.10.69 on 2025-08-22 13:11:39 GMT+7

export interface Body { position_x: number; position_y: number; velocity_x: number; velocity_y: number; mass: number }
function make_body(px: number, py: number, vx: number, vy: number, mass: number): Body {
  return {position_x: px, position_y: py, velocity_x: vx, velocity_y: vy, mass};
}
function update_velocity(body: Body, force_x: number, force_y: number, delta_time: number): Body {
  body.velocity_x = (body.velocity_x + (force_x * delta_time));
  body.velocity_y = (body.velocity_y + (force_y * delta_time));
  return body;
}
function update_position(body: Body, delta_time: number): Body {
  body.position_x = (body.position_x + (body.velocity_x * delta_time));
  body.position_y = (body.position_y + (body.velocity_y * delta_time));
  return body;
}
export interface BodySystem { bodies: Body[]; gravitation_constant: number; time_factor: number; softening_factor: number }
function make_body_system(bodies: Body[], g: number, tf: number, sf: number): BodySystem {
  return {bodies, gravitation_constant: g, time_factor: tf, softening_factor: sf};
}
function sqrtApprox(x: number): number {
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function update_system(system: BodySystem, delta_time: number): BodySystem {
  let bodies: Body[] = system.bodies;
  let i: number = 0;
  while ((i < _len(bodies))) {
    let body1: Body = bodies[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bodies.length + _mochi_idx : _mochi_idx;})()];
    let force_x: number = 0.0;
    let force_y: number = 0.0;
    let j: number = 0;
    while ((j < _len(bodies))) {
      if ((i !== j)) {
        let body2: Body = bodies[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? bodies.length + _mochi_idx : _mochi_idx;})()];
        let dif_x: number = (body2.position_x - body1.position_x);
        let dif_y: number = (body2.position_y - body1.position_y);
        let distance_sq: number = (((dif_x * dif_x) + (dif_y * dif_y)) + system.softening_factor);
        let distance: number = sqrtApprox(distance_sq);
        let denom = ((distance * distance) * distance);
        force_x = (force_x + (((system.gravitation_constant * body2.mass) * dif_x) / denom));
        force_y = (force_y + (((system.gravitation_constant * body2.mass) * dif_y) / denom));
      }
      j = (j + 1);
    }
    body1 = update_velocity(body1, force_x, force_y, (delta_time * system.time_factor));
    bodies[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bodies.length + _mochi_idx : _mochi_idx;})()] = body1;
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(bodies))) {
    let body: Body = bodies[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bodies.length + _mochi_idx : _mochi_idx;})()];
    body = update_position(body, (delta_time * system.time_factor));
    bodies[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bodies.length + _mochi_idx : _mochi_idx;})()] = body;
    i = (i + 1);
  }
  system.bodies = bodies;
  return system;
}
function main() {
  let b1: Body = make_body(0.0, 0.0, 0.0, 0.0, 1.0);
  let b2: Body = make_body(10.0, 0.0, 0.0, 0.0, 1.0);
  let sys1: BodySystem = make_body_system([b1, b2], 1.0, 1.0, 0.0);
  sys1 = update_system(sys1, 1.0);
  let b1_after: Body = sys1.bodies[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? sys1.bodies.length + _mochi_idx : _mochi_idx;})()];
  let pos1x: number = b1_after.position_x;
  let pos1y: number = b1_after.position_y;
  console.log(JSON.stringify({x: pos1x, y: pos1y}, null, 2));
  let vel1x: number = b1_after.velocity_x;
  let vel1y: number = b1_after.velocity_y;
  console.log(JSON.stringify({vx: vel1x, vy: vel1y}, null, 2));
  let b3: Body = make_body(-10.0, 0.0, 0.0, 0.0, 1.0);
  let b4: Body = make_body(10.0, 0.0, 0.0, 0.0, 4.0);
  let sys2: BodySystem = make_body_system([b3, b4], 1.0, 10.0, 0.0);
  sys2 = update_system(sys2, 1.0);
  let b2_after: Body = sys2.bodies[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? sys2.bodies.length + _mochi_idx : _mochi_idx;})()];
  let pos2x: number = b2_after.position_x;
  let pos2y: number = b2_after.position_y;
  console.log(JSON.stringify({x: pos2x, y: pos2y}, null, 2));
  let vel2x: number = b2_after.velocity_x;
  let vel2y: number = b2_after.velocity_y;
  console.log(JSON.stringify({vx: vel2x, vy: vel2y}, null, 2));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

