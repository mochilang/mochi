// Generated by Mochi v0.10.64 on 2025-08-12 16:11:51 GMT+7

let G: number = 6.6743e-11;
let C: number = 299792458.0;
let PI: number = 3.141592653589793;
function pow10(n: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 10.0);
    i = (i + 1);
  }
  return result;
}
function sqrt(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function capture_radii(target_body_radius: number, target_body_mass: number, projectile_velocity: number): number {
  if ((target_body_mass < 0.0)) {
    _panic("Mass cannot be less than 0");
  }
  if ((target_body_radius < 0.0)) {
    _panic("Radius cannot be less than 0");
  }
  if ((projectile_velocity > C)) {
    _panic("Cannot go beyond speed of light");
  }
  let escape_velocity_squared: number = (((2.0 * G) * target_body_mass) / target_body_radius);
  let denom = (projectile_velocity * projectile_velocity);
  let capture_radius = (target_body_radius * sqrt((1.0 + (escape_velocity_squared / denom))));
  return capture_radius;
}
function capture_area(capture_radius: number): number {
  if ((capture_radius < 0.0)) {
    _panic("Cannot have a capture radius less than 0");
  }
  let sigma: number = ((PI * capture_radius) * capture_radius);
  return sigma;
}
function run_tests() {
  let r: number = capture_radii((6.957 * pow10(8)), (1.99 * pow10(30)), 25000.0);
  if ((abs((r - (1.720959069143714 * pow10(10)))) > 1.0)) {
    _panic("capture_radii failed");
  }
  let a: number = capture_area(r);
  if ((abs((a - (9.304455331801812 * pow10(20)))) > 1.0)) {
    _panic("capture_area failed");
  }
}
function main() {
  run_tests();
  let r: number = capture_radii((6.957 * pow10(8)), (1.99 * pow10(30)), 25000.0);
  console.log(_str(r));
  console.log(_str(capture_area(r)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

