// Generated by Mochi v0.10.59 on 2025-08-07 08:18:21 GMT+7

let GRAVITATIONAL_CONSTANT: number = 6.6743e-11;
export interface Result { kind: string; value: number }
function sqrtApprox(x: number): number {
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function gravitational_law(force: number, mass_1: number, mass_2: number, distance: number): Result {
  let zero_count: number = 0;
  if ((force == 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((mass_1 == 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((mass_2 == 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((distance == 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((zero_count != 1)) {
    _panic("One and only one argument must be 0");
  }
  if ((force < 0.0)) {
    _panic("Gravitational force can not be negative");
  }
  if ((distance < 0.0)) {
    _panic("Distance can not be negative");
  }
  if ((mass_1 < 0.0)) {
    _panic("Mass can not be negative");
  }
  if ((mass_2 < 0.0)) {
    _panic("Mass can not be negative");
  }
  let product_of_mass: number = (mass_1 * mass_2);
  if ((force == 0.0)) {
    let f: number = ((GRAVITATIONAL_CONSTANT * product_of_mass) / (distance * distance));
    return {"kind": "force", "value": f};
  }
  if ((mass_1 == 0.0)) {
    let m1: number = ((force * (distance * distance)) / (GRAVITATIONAL_CONSTANT * mass_2));
    return {"kind": "mass_1", "value": m1};
  }
  if ((mass_2 == 0.0)) {
    let m2: number = ((force * (distance * distance)) / (GRAVITATIONAL_CONSTANT * mass_1));
    return {"kind": "mass_2", "value": m2};
  }
  let d: number = sqrtApprox(((GRAVITATIONAL_CONSTANT * product_of_mass) / force));
  return {"kind": "distance", "value": d};
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r1: Result
let r2: Result
let r3: Result
let r4: Result
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = gravitational_law(0.0, 5.0, 10.0, 20.0)
r2 = gravitational_law(7367.382, 0.0, 74.0, 3048.0)
r3 = gravitational_law(100.0, 5.0, 0.0, 3.0)
r4 = gravitational_law(100.0, 5.0, 10.0, 0.0)
  console.log(_str(((r1.kind + " ") + _str(r1.value))));
  console.log(_str(((r2.kind + " ") + _str(r2.value))));
  console.log(_str(((r3.kind + " ") + _str(r3.value))));
  console.log(_str(((r4.kind + " ") + _str(r4.value))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

