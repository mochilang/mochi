// Generated by Mochi v0.10.63 on 2025-08-11 14:53:51 GMT+7

let PI: number = 3.141592653589793;
let TWO_PI: number = 6.283185307179586;
let g: number = 9.80665;
function _mod(x: number, m: number): number {
  return (x - (Math.trunc((x / m)) * m));
}
function sin(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y3: number = (y2 * y);
  let y5: number = (y3 * y2);
  let y7: number = (y5 * y2);
  return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0));
}
function deg_to_rad(deg: number): number {
  return ((deg * PI) / 180.0);
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 10.0);
    i = (i + 1);
  }
  return result;
}
function round(x: number, n: number): number {
  let m: number = pow10(n);
  let y: number = Math.floor(((x * m) + 0.5));
  return (y / m);
}
function check_args(init_velocity: number, angle: number) {
  if (((angle > 90.0) || (angle < 1.0))) {
    _panic("Invalid angle. Range is 1-90 degrees.");
  }
  if ((init_velocity < 0.0)) {
    _panic("Invalid velocity. Should be a positive number.");
  }
}
function horizontal_distance(init_velocity: number, angle: number): number {
  check_args(init_velocity, angle);
  let radians: number = deg_to_rad((2.0 * angle));
  return round((((init_velocity * init_velocity) * sin(radians)) / g), 2);
}
function max_height(init_velocity: number, angle: number): number {
  check_args(init_velocity, angle);
  let radians: number = deg_to_rad(angle);
  let s: number = sin(radians);
  return round(((((init_velocity * init_velocity) * s) * s) / (2.0 * g)), 2);
}
function total_time(init_velocity: number, angle: number): number {
  check_args(init_velocity, angle);
  let radians: number = deg_to_rad(angle);
  return round((((2.0 * init_velocity) * sin(radians)) / g), 2);
}
let v0: number = 25.0;
let angle: number = 20.0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(horizontal_distance(v0, angle)));
  console.log(_str(max_height(v0, angle)));
  console.log(_str(total_time(v0, angle)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

