// Generated by Mochi v0.10.59 on 2025-08-07 00:01:48 GMT+7

export interface Graph { vertex: Record<number, number[]>; size: number }
function add_edge(g: Graph, from_vertex: number, to_vertex: number): Graph {
  let v: Record<number, number[]> = g.vertex;
  if ((from_vertex in v)) {
    let lst: number[] = v[(from_vertex) < 0 ? v.length + (from_vertex) : from_vertex];
    lst.push(to_vertex);
    v[(from_vertex) < 0 ? v.length + (from_vertex) : from_vertex] = lst;
  } else {
    v[(from_vertex) < 0 ? v.length + (from_vertex) : from_vertex] = [to_vertex];
  }
  g.vertex = v;
  if (((from_vertex + 1) > g.size)) {
    g.size = (from_vertex + 1);
  }
  if (((to_vertex + 1) > g.size)) {
    g.size = (to_vertex + 1);
  }
  return g;
}
function list_to_string(lst: number[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(lst))) {
    res = (res + _str(lst[(i) < 0 ? lst.length + (i) : i]));
    if ((i < (_len(lst) - 1))) {
      res = (res + " ");
    }
    i = (i + 1);
  }
  return res;
}
function list_to_arrow(lst: number[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(lst))) {
    res = (res + _str(lst[(i) < 0 ? lst.length + (i) : i]));
    if ((i < (_len(lst) - 1))) {
      res = (res + " -> ");
    }
    i = (i + 1);
  }
  return res;
}
function print_graph(g: Graph) {
  console.log(_str(_str(g.vertex)));
  let i: number = 0;
  while ((i < g.size)) {
    let edges: number[] = [];
    if ((i in g.vertex)) {
      edges = g.vertex[(i) < 0 ? g.vertex.length + (i) : i];
    }
    let line: string = ((_str(i) + "  ->  ") + list_to_arrow(edges));
    console.log(_str(line));
    i = (i + 1);
  }
}
function dfs_recursive(g: Graph, start_vertex: number, visited: boolean[], order: number[]): number[] {
  visited[(start_vertex) < 0 ? visited.length + (start_vertex) : start_vertex] = true;
  order.push(start_vertex);
  if ((start_vertex in g.vertex)) {
    let neighbors: number[] = g.vertex[(start_vertex) < 0 ? g.vertex.length + (start_vertex) : start_vertex];
    let i: number = 0;
    while ((i < _len(neighbors))) {
      let nb: number = neighbors[(i) < 0 ? neighbors.length + (i) : i];
      if (!visited[(nb) < 0 ? visited.length + (nb) : nb]) {
        order = dfs_recursive(g, nb, visited, order);
      }
      i = (i + 1);
    }
  }
  return order;
}
function dfs(g: Graph): number[] {
  let n: number = g.size;
  let visited: boolean[] = [];
  let i: number = 0;
  while ((i < n)) {
    visited.push(false);
    i = (i + 1);
  }
  let order: number[] = [];
  i = 0;
  while ((i < n)) {
    if (!visited[(i) < 0 ? visited.length + (i) : i]) {
      order = dfs_recursive(g, i, visited, order);
    }
    i = (i + 1);
  }
  return order;
}
let g: Graph = {"vertex": {}, "size": 0};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  g = add_edge(g, 0, 1);
  g = add_edge(g, 0, 2);
  g = add_edge(g, 1, 2);
  g = add_edge(g, 2, 0);
  g = add_edge(g, 2, 3);
  g = add_edge(g, 3, 3);
  print_graph(g);
  console.log(_str("DFS:"));
  console.log(_str(list_to_string(dfs(g))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

