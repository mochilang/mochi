// Generated by Mochi v0.10.61 on 2025-08-08 17:35:51 GMT+7

export interface DfsResult { id: number; bridges: number[][] }
function dfs(graph: Record<number, number[]>, at: number, parent: number, visited: boolean[], ids: number[], low: number[], id: number, bridges: number[][]): DfsResult {
  visited[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
  ids[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? ids.length + _mochi_idx : _mochi_idx;})()] = id;
  low[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()] = id;
  let current_id: number = (id + 1);
  let res_bridges: number[][] = bridges;
  for (const to in graph[at]) {
    if ((to == parent)) {
      continue
    } else {
      if (!visited[(()=>{const _mochi_idx = to; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()]) {
        let result: DfsResult = dfs(graph, to, at, visited, ids, low, current_id, res_bridges);
        current_id = result.id;
        res_bridges = result.bridges;
        if ((low[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()] > low[(()=>{const _mochi_idx = to; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()])) {
          low[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()] = low[(()=>{const _mochi_idx = to; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()];
        }
        if ((ids[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? ids.length + _mochi_idx : _mochi_idx;})()] < low[(()=>{const _mochi_idx = to; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()])) {
          let edge: number[] = ((at < to) ? [at, to] : [to, at]);
          res_bridges.push(edge);
        }
      } else {
        if ((low[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()] > ids[(()=>{const _mochi_idx = to; return _mochi_idx < 0 ? ids.length + _mochi_idx : _mochi_idx;})()])) {
          low[(()=>{const _mochi_idx = at; return _mochi_idx < 0 ? low.length + _mochi_idx : _mochi_idx;})()] = ids[(()=>{const _mochi_idx = to; return _mochi_idx < 0 ? ids.length + _mochi_idx : _mochi_idx;})()];
        }
      }
    }
  }
  return {"id": current_id, "bridges": res_bridges};
}
function compute_bridges(graph: Record<number, number[]>): number[][] {
  let n: number = _len(graph);
  let visited: boolean[] = [];
  let ids: number[] = [];
  let low: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    visited.push(false);
    ids.push(0);
    low.push(0);
    i = (i + 1);
  }
  let bridges: number[][] = [];
  let id: number = 0;
  i = 0;
  while ((i < n)) {
    if (!visited[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()]) {
      let result: DfsResult = dfs(graph, i, -1, visited, ids, low, id, bridges);
      id = result.id;
      bridges = result.bridges;
    }
    i = (i + 1);
  }
  return bridges;
}
function get_demo_graph(index: number): Record<number, number[]> {
  if ((index == 0)) {
    return {[0]: [1, 2], [1]: [0, 2], [2]: [0, 1, 3, 5], [3]: [2, 4], [4]: [3], [5]: [2, 6, 8], [6]: [5, 7], [7]: [6, 8], [8]: [5, 7]};
  }
  if ((index == 1)) {
    return {[0]: [6], [1]: [9], [2]: [4, 5], [3]: [4], [4]: [2, 3], [5]: [2], [6]: [0, 7], [7]: [6], [8]: [], [9]: [1]};
  }
  if ((index == 2)) {
    return {[0]: [4], [1]: [6], [2]: [], [3]: [5, 6, 7], [4]: [0, 6], [5]: [3, 8, 9], [6]: [1, 3, 4, 7], [7]: [3, 6, 8, 9], [8]: [5, 7], [9]: [5, 7]};
  }
  return {[0]: [1, 3], [1]: [0, 2, 4], [2]: [1, 3, 4], [3]: [0, 2, 4], [4]: [1, 2, 3]};
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (compute_bridges(get_demo_graph(0))).join(' ') + "]"));
  console.log(_str("[" + (compute_bridges(get_demo_graph(1))).join(' ') + "]"));
  console.log(_str("[" + (compute_bridges(get_demo_graph(2))).join(' ') + "]"));
  console.log(_str("[" + (compute_bridges(get_demo_graph(3))).join(' ') + "]"));
  console.log(_str("[" + (compute_bridges({})).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

