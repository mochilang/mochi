// Generated by Mochi v0.10.61 on 2025-08-08 19:16:08 GMT+7

export interface Graph1 { A: string[]; B: string[]; C: string[]; D: string[]; E: string[]; F: string[]; G: string[] }
export interface Graph { graph: Record<string, string[]>; parent: Record<string, string>; source: string }
function newGraph(g: Record<string, string[]>, s: string): Graph {
  return {"graph": g, "parent": {}, "source": s};
}
function breath_first_search(g: Graph): Graph {
  let parent: Record<string, string> = g.parent;
  parent[(()=>{const _mochi_idx = g.source; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = g.source;
  let queue: string[] = [g.source];
  let idx: number = 0;
  while ((idx < _len(queue))) {
    let vertex: string = queue[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()];
    for (const adj of g.graph[vertex]) {
      if (!(adj in parent)) {
        parent[(()=>{const _mochi_idx = adj; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = vertex;
        queue.push(adj);
      }
    }
    idx = (idx + 1);
  }
  g.parent = parent;
  return g;
}
function shortest_path(g: Graph, target: string): string {
  if ((target == g.source)) {
    return g.source;
  }
  if (!(target in g.parent)) {
    return ((("No path from vertex: " + g.source) + " to vertex: ") + target);
  }
  let p: string = g.parent[target];
  return ((shortest_path(g, p) + "->") + target);
}
let graph: Graph1 = {"A": ["B", "C", "E"], "B": ["A", "D", "E"], "C": ["A", "F", "G"], "D": ["B"], "E": ["A", "B", "D"], "F": ["C"], "G": ["C"]};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let g: any
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
g = newGraph(graph, "G")
  g = breath_first_search(g);
  console.log(_str(shortest_path(g, "D")));
  console.log(_str(shortest_path(g, "G")));
  console.log(_str(shortest_path(g, "Foo")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

