// Generated by Mochi v0.10.63 on 2025-08-12 08:43:47 GMT+7

export interface Neighbor { node: number; cost: number }
export interface EdgePair { u: number; v: number }
function prims_algorithm(adjacency: Record<number, Neighbor[]>): EdgePair[] {
  let visited: Record<number, boolean> = {};
  visited[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
  let mst: EdgePair[] = [];
  let count: number = 1;
  let total: number = 0;
  for (const k in adjacency) {
    total = (total + 1);
  }
  while ((count < total)) {
    let best_u: number = 0;
    let best_v: number = 0;
    let best_cost: number = 2147483647;
    for (const u_str in adjacency) {
      let u: number = Math.trunc(u_str);
      if (visited[u]) {
        for (const n of adjacency[u]) {
          if ((!visited[Math.trunc(n.node)] && (n.cost < best_cost))) {
            best_cost = n.cost;
            best_u = u;
            best_v = n.node;
          }
        }
      }
    }
    visited[(()=>{const _mochi_idx = best_v; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
    mst.push({"u": best_u, "v": best_v});
    count = (count + 1);
  }
  return mst;
}
function test_prim_successful_result(): boolean {
  let edges: number[][] = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]];
  let adjacency: Record<number, Neighbor[]> = {};
  for (const e of edges) {
    let u: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let v: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let w: number = e[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    if (!(u in adjacency)) {
      adjacency[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? adjacency.length + _mochi_idx : _mochi_idx;})()] = [];
    }
    if (!(v in adjacency)) {
      adjacency[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? adjacency.length + _mochi_idx : _mochi_idx;})()] = [];
    }
    adjacency[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? adjacency.length + _mochi_idx : _mochi_idx;})()] = [...adjacency[u], {"node": v, "cost": w}];
    adjacency[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? adjacency.length + _mochi_idx : _mochi_idx;})()] = [...adjacency[v], {"node": u, "cost": w}];
  }
  let result: EdgePair[] = prims_algorithm(adjacency);
  let seen: Record<string, boolean> = {};
  for (const e of result) {
    let key1: string = ((_str(e.u) + ",") + _str(e.v));
    let key2: string = ((_str(e.v) + ",") + _str(e.u));
    seen[(()=>{const _mochi_idx = key1; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
    seen[(()=>{const _mochi_idx = key2; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
  }
  let expected: number[][] = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]];
  for (const ans of expected) {
    let key: string = ((_str(ans[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ans.length + _mochi_idx : _mochi_idx;})()]) + ",") + _str(ans[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? ans.length + _mochi_idx : _mochi_idx;})()]));
    if (!seen[key]) {
      return false;
    }
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(test_prim_successful_result()));
  console.log("");
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

