// Generated by Mochi v0.10.66 on 2025-08-15 10:29:19 GMT+7

function sort_edges(edges: number[][]): number[][] {
  let es: number[][] = edges;
  let i: number = 0;
  while ((i < _len(es))) {
    let j: number = 0;
    while ((j < ((_len(es) - i) - 1))) {
      if ((es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number[] = es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
        es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()] = es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
        es[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return es;
}
function find(parent: number[], x: number): number {
  let r: number = x;
  while ((parent[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] !== r)) {
    r = parent[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()];
  }
  return r;
}
function kruskal(n: number, edges: number[][]): number[][] {
  let parent: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    parent.push(i);
    i = (i + 1);
  }
  let sorted: number[][] = sort_edges(edges);
  let mst: number[][] = [];
  let e: number = 0;
  while ((e < _len(sorted))) {
    if ((_len(mst) === (n - 1))) {
      break
    }
    let edge: number[] = sorted[(()=>{const _mochi_idx = e; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()];
    e = (e + 1);
    let u: number = edge[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? edge.length + _mochi_idx : _mochi_idx;})()];
    let v: number = edge[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? edge.length + _mochi_idx : _mochi_idx;})()];
    let w: number = edge[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? edge.length + _mochi_idx : _mochi_idx;})()];
    let ru: number = find(parent, u);
    let rv: number = find(parent, v);
    if ((ru !== rv)) {
      parent[(()=>{const _mochi_idx = ru; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = rv;
      mst.push([u, v, w]);
    }
  }
  return mst;
}
function edges_equal(a: number[][], b: number[][]): boolean {
  if ((_len(a) !== _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    let e1: number[] = a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
    let e2: number[] = b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()];
    if ((((e1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e1.length + _mochi_idx : _mochi_idx;})()] !== e2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e2.length + _mochi_idx : _mochi_idx;})()]) || (e1[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e1.length + _mochi_idx : _mochi_idx;})()] !== e2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e2.length + _mochi_idx : _mochi_idx;})()])) || (e1[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? e1.length + _mochi_idx : _mochi_idx;})()] !== e2[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? e2.length + _mochi_idx : _mochi_idx;})()]))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function main() {
  let num_nodes: number = 9;
  let edges: number[][] = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]];
  let expected: number[][] = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]];
  let result: number[][] = kruskal(num_nodes, edges);
  let sorted_result: number[][] = sort_edges(result);
  let sorted_expected: number[][] = sort_edges(expected);
  console.log(_str(sorted_result));
  if (edges_equal(sorted_expected, sorted_result)) {
    console.log("");
  } else {
    _stdout_write("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

