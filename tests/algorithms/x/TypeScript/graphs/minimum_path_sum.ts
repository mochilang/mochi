// Generated by Mochi v0.10.66 on 2025-08-15 10:28:59 GMT+7

function fill_row(current_row: number[], row_above: number[]): number[] {
  current_row[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] = (current_row[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] + row_above[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? row_above.length + _mochi_idx : _mochi_idx;})()]);
  let cell_n: number = 1;
  while ((cell_n < _len(current_row))) {
    let left: number = current_row[(()=>{const _mochi_idx = Math.trunc((cell_n - 1)); return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()];
    let up: number = row_above[(()=>{const _mochi_idx = cell_n; return _mochi_idx < 0 ? row_above.length + _mochi_idx : _mochi_idx;})()];
    if ((left < up)) {
      current_row[(()=>{const _mochi_idx = cell_n; return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] = (current_row[(()=>{const _mochi_idx = cell_n; return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] + left);
    } else {
      current_row[(()=>{const _mochi_idx = cell_n; return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] = (current_row[(()=>{const _mochi_idx = cell_n; return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] + up);
    }
    cell_n = (cell_n + 1);
  }
  return current_row;
}
function min_path_sum(grid: number[][]): number {
  if (((_len(grid) === 0) || (_len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]) === 0))) {
    _panic("The grid does not contain the appropriate information");
  }
  let cell_n: number = 1;
  while ((cell_n < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) {
    grid[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = cell_n; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = cell_n; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((cell_n - 1)); return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    cell_n = (cell_n + 1);
  }
  let row_above: number[] = grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()];
  let row_n: number = 1;
  while ((row_n < _len(grid))) {
    let current_row: number[] = grid[(()=>{const _mochi_idx = row_n; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()];
    grid[(()=>{const _mochi_idx = row_n; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()] = fill_row(current_row, row_above);
    row_above = grid[(()=>{const _mochi_idx = row_n; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()];
    row_n = (row_n + 1);
  }
  return grid[(()=>{const _mochi_idx = Math.trunc((_len(grid) - 1)); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((_len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]) - 1)); return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = Math.trunc((_len(grid) - 1)); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
let grid1: number[][] = [[1, 3, 1], [1, 5, 1], [4, 2, 1]];
let grid2: number[][] = [[1, 0, 5, 6, 7], [8, 9, 0, 4, 2], [4, 4, 4, 5, 1], [9, 6, 3, 1, 0], [8, 4, 3, 2, 7]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(min_path_sum(grid1)));
  console.log(_str(min_path_sum(grid2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

