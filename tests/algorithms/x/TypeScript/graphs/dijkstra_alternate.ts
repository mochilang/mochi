// Generated by Mochi v0.10.66 on 2025-08-15 10:28:22 GMT+7

function minimum_distance(distances: number[], visited: boolean[]): number {
  let minimum: number = 10000000;
  let min_index: number = 0;
  let vertex: number = 0;
  while ((vertex < _len(distances))) {
    if (((distances[(()=>{const _mochi_idx = vertex; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()] < minimum) && (visited[(()=>{const _mochi_idx = vertex; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] === false))) {
      minimum = distances[(()=>{const _mochi_idx = vertex; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()];
      min_index = vertex;
    }
    vertex = (vertex + 1);
  }
  return min_index;
}
function dijkstra(graph: number[][], source: number): number[] {
  let vertices: number = _len(graph);
  let distances: number[] = [];
  let i: number = 0;
  while ((i < vertices)) {
    distances.push(10000000);
    i = (i + 1);
  }
  distances[(()=>{const _mochi_idx = source; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()] = 0;
  let visited: boolean[] = [];
  i = 0;
  while ((i < vertices)) {
    visited.push(false);
    i = (i + 1);
  }
  let count: number = 0;
  while ((count < vertices)) {
    let u: number = minimum_distance(distances, visited);
    visited[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
    let v: number = 0;
    while ((v < vertices)) {
      if ((((graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > 0) && (visited[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] === false)) && (distances[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()] > (distances[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()] + graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])))) {
        distances[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()] = (distances[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()] + graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      }
      v = (v + 1);
    }
    count = (count + 1);
  }
  return distances;
}
function print_solution(distances: number[]) {
  console.log(_str("Vertex \t Distance from Source"));
  let v: number = 0;
  while ((v < _len(distances))) {
    console.log(_str(((_str(v) + "\t\t") + _str(distances[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()]))));
    v = (v + 1);
  }
}
let graph: number[][] = [[0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let distances: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
distances = dijkstra(graph, 0)
  print_solution(distances);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

