// Generated by Mochi v0.10.59 on 2025-08-07 00:02:31 GMT+7

export interface Edge { u: number; v: number; w: number }
export interface UF { parent: number[]; rank: number[] }
export interface FindRes { root: number; uf: UF }
function uf_make(n: number): UF {
  let p: number[] = [];
  let r: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    p.push(i);
    r.push(0);
    i = (i + 1);
  }
  return {"parent": p, "rank": r};
}
function uf_find(uf: UF, x: number): FindRes {
  let p: number[] = uf.parent;
  if ((p[(x) < 0 ? p.length + (x) : x] != x)) {
    let res: FindRes = uf_find({"parent": p, "rank": uf.rank}, p[(x) < 0 ? p.length + (x) : x]);
    p = res.uf.parent;
    p[(x) < 0 ? p.length + (x) : x] = res.root;
    return {"root": res.root, "uf": {"parent": p, "rank": res.uf.rank}};
  }
  return {"root": x, uf};
}
function uf_union(uf: UF, x: number, y: number): UF {
  let fr1: FindRes = uf_find(uf, x);
  let uf1: UF = fr1.uf;
  let root1: number = fr1.root;
  let fr2: FindRes = uf_find(uf1, y);
  uf1 = fr2.uf;
  let root2: number = fr2.root;
  if ((root1 == root2)) {
    return uf1;
  }
  let p: number[] = uf1.parent;
  let r: number[] = uf1.rank;
  if ((r[(root1) < 0 ? r.length + (root1) : root1] > r[(root2) < 0 ? r.length + (root2) : root2])) {
    p[(root2) < 0 ? p.length + (root2) : root2] = root1;
  } else {
    if ((r[(root1) < 0 ? r.length + (root1) : root1] < r[(root2) < 0 ? r.length + (root2) : root2])) {
      p[(root1) < 0 ? p.length + (root1) : root1] = root2;
    } else {
      p[(root2) < 0 ? p.length + (root2) : root2] = root1;
      r[(root1) < 0 ? r.length + (root1) : root1] = (r[(root1) < 0 ? r.length + (root1) : root1] + 1);
    }
  }
  return {"parent": p, "rank": r};
}
function boruvka(n: number, edges: Edge[]): Edge[] {
  let uf: UF = uf_make(n);
  let num_components: number = n;
  let mst: Edge[] = [];
  while ((num_components > 1)) {
    let cheap: number[] = [];
    let i: number = 0;
    while ((i < n)) {
      cheap.push((0 - 1));
      i = (i + 1);
    }
    let idx: number = 0;
    while ((idx < _len(edges))) {
      let e: Edge = edges[(idx) < 0 ? edges.length + (idx) : idx];
      let fr1: FindRes = uf_find(uf, e.u);
      uf = fr1.uf;
      let set1: number = fr1.root;
      let fr2: FindRes = uf_find(uf, e.v);
      uf = fr2.uf;
      let set2: number = fr2.root;
      if ((set1 != set2)) {
        if (((cheap[(set1) < 0 ? cheap.length + (set1) : set1] == (0 - 1)) || (edges[(Math.trunc(cheap[(set1) < 0 ? cheap.length + (set1) : set1])) < 0 ? edges.length + (Math.trunc(cheap[(set1) < 0 ? cheap.length + (set1) : set1])) : Math.trunc(cheap[(set1) < 0 ? cheap.length + (set1) : set1])].w > e.w))) {
          cheap[(set1) < 0 ? cheap.length + (set1) : set1] = idx;
        }
        if (((cheap[(set2) < 0 ? cheap.length + (set2) : set2] == (0 - 1)) || (edges[(Math.trunc(cheap[(set2) < 0 ? cheap.length + (set2) : set2])) < 0 ? edges.length + (Math.trunc(cheap[(set2) < 0 ? cheap.length + (set2) : set2])) : Math.trunc(cheap[(set2) < 0 ? cheap.length + (set2) : set2])].w > e.w))) {
          cheap[(set2) < 0 ? cheap.length + (set2) : set2] = idx;
        }
      }
      idx = (idx + 1);
    }
    let v: number = 0;
    while ((v < n)) {
      let idxe: number = cheap[(v) < 0 ? cheap.length + (v) : v];
      if ((idxe != (0 - 1))) {
        let e: Edge = edges[(idxe) < 0 ? edges.length + (idxe) : idxe];
        let fr1: FindRes = uf_find(uf, e.u);
        uf = fr1.uf;
        let set1: number = fr1.root;
        let fr2: FindRes = uf_find(uf, e.v);
        uf = fr2.uf;
        let set2: number = fr2.root;
        if ((set1 != set2)) {
          mst.push(e);
          uf = uf_union(uf, set1, set2);
          num_components = (num_components - 1);
        }
      }
      v = (v + 1);
    }
  }
  return mst;
}
function main() {
  let edges: Edge[] = [{"u": 0, "v": 1, "w": 1}, {"u": 0, "v": 2, "w": 2}, {"u": 2, "v": 3, "w": 3}];
  let mst: Edge[] = boruvka(4, edges);
  for (const e of mst) {
    console.log(_str(((((_str(e.u) + " - ") + _str(e.v)) + " : ") + _str(e.w))));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

