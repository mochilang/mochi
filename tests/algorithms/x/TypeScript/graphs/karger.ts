// Generated by Mochi v0.10.59 on 2025-08-07 00:02:23 GMT+7

export interface TEST_GRAPH { "1": string[]; "2": string[]; "3": string[]; "4": string[]; "5": string[]; "6": string[]; "7": string[]; "8": string[]; "9": string[]; "10": string[] }
let seed: number = 1;
function rand_int(n: number): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return (seed % n);
}
function contains(list: string[], value: string): boolean {
  let i: number = 0;
  while ((i < _len(list))) {
    if ((list[(i) < 0 ? list.length + (i) : i] == value)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function remove_all(list: string[], value: string): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(list))) {
    if ((list[(i) < 0 ? list.length + (i) : i] != value)) {
      res.push(list[(i) < 0 ? list.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
export interface Pair { a: string; b: string }
function partition_graph(graph: Record<string, string[]>): Pair[] {
  let contracted: Record<string, string[]> = {};
  for (const node of _keys(graph)) {
    contracted[(node) < 0 ? contracted.length + (node) : node] = [node];
  }
  let graph_copy: Record<string, string[]> = {};
  for (const node of _keys(graph)) {
    let lst: string[] = [];
    let neigh: string[] = graph[(node) < 0 ? graph.length + (node) : node];
    let i: number = 0;
    while ((i < _len(neigh))) {
      lst.push(neigh[(i) < 0 ? neigh.length + (i) : i]);
      i = (i + 1);
    }
    graph_copy[(node) < 0 ? graph_copy.length + (node) : node] = lst;
  }
  let nodes: string[] = _keys(graph_copy);
  while ((_len(nodes) > 2)) {
    let u: string = nodes[(Math.trunc(rand_int(_len(nodes)))) < 0 ? nodes.length + (Math.trunc(rand_int(_len(nodes)))) : Math.trunc(rand_int(_len(nodes)))];
    let u_neighbors: string[] = graph_copy[(u) < 0 ? graph_copy.length + (u) : u];
    let v: string = u_neighbors[(Math.trunc(rand_int(_len(u_neighbors)))) < 0 ? u_neighbors.length + (Math.trunc(rand_int(_len(u_neighbors)))) : Math.trunc(rand_int(_len(u_neighbors)))];
    let uv: string = (u + v);
    let uv_neighbors: string[] = [];
    let i: number = 0;
    while ((i < _len(graph_copy[(u) < 0 ? graph_copy.length + (u) : u]))) {
      let n: string = graph_copy[(u) < 0 ? graph_copy.length + (u) : u][(i) < 0 ? graph_copy[(u) < 0 ? graph_copy.length + (u) : u].length + (i) : i];
      if ((((n != u) && (n != v)) && (contains(uv_neighbors, n) == false))) {
        uv_neighbors.push(n);
      }
      i = (i + 1);
    }
    i = 0;
    while ((i < _len(graph_copy[(v) < 0 ? graph_copy.length + (v) : v]))) {
      let n: string = graph_copy[(v) < 0 ? graph_copy.length + (v) : v][(i) < 0 ? graph_copy[(v) < 0 ? graph_copy.length + (v) : v].length + (i) : i];
      if ((((n != u) && (n != v)) && (contains(uv_neighbors, n) == false))) {
        uv_neighbors.push(n);
      }
      i = (i + 1);
    }
    graph_copy[(uv) < 0 ? graph_copy.length + (uv) : uv] = uv_neighbors;
    let k: number = 0;
    while ((k < _len(uv_neighbors))) {
      let nb: string = uv_neighbors[(k) < 0 ? uv_neighbors.length + (k) : k];
      graph_copy[(nb) < 0 ? graph_copy.length + (nb) : nb] = [...graph_copy[(nb) < 0 ? graph_copy.length + (nb) : nb], uv];
      graph_copy[(nb) < 0 ? graph_copy.length + (nb) : nb] = remove_all(graph_copy[(nb) < 0 ? graph_copy.length + (nb) : nb], u);
      graph_copy[(nb) < 0 ? graph_copy.length + (nb) : nb] = remove_all(graph_copy[(nb) < 0 ? graph_copy.length + (nb) : nb], v);
      k = (k + 1);
    }
    let group: string[] = [];
    i = 0;
    while ((i < _len(contracted[(u) < 0 ? contracted.length + (u) : u]))) {
      group.push(contracted[(u) < 0 ? contracted.length + (u) : u][(i) < 0 ? contracted[(u) < 0 ? contracted.length + (u) : u].length + (i) : i]);
      i = (i + 1);
    }
    i = 0;
    while ((i < _len(contracted[(v) < 0 ? contracted.length + (v) : v]))) {
      let val: string = contracted[(v) < 0 ? contracted.length + (v) : v][(i) < 0 ? contracted[(v) < 0 ? contracted.length + (v) : v].length + (i) : i];
      if ((contains(group, val) == false)) {
        group.push(val);
      }
      i = (i + 1);
    }
    contracted[(uv) < 0 ? contracted.length + (uv) : uv] = group;
    nodes = remove_all(nodes, u);
    nodes = remove_all(nodes, v);
    nodes.push(uv);
  }
  let groups: string[][] = [];
  let j: number = 0;
  while ((j < _len(nodes))) {
    let n: string = nodes[(j) < 0 ? nodes.length + (j) : j];
    groups.push(contracted[(n) < 0 ? contracted.length + (n) : n]);
    j = (j + 1);
  }
  let groupA: string[] = groups[(Math.trunc(0)) < 0 ? groups.length + (Math.trunc(0)) : Math.trunc(0)];
  let groupB: string[] = groups[(Math.trunc(1)) < 0 ? groups.length + (Math.trunc(1)) : Math.trunc(1)];
  let cut: Pair[] = [];
  j = 0;
  while ((j < _len(groupA))) {
    let node: string = groupA[(j) < 0 ? groupA.length + (j) : j];
    let neigh: string[] = graph[(node) < 0 ? graph.length + (node) : node];
    let l: number = 0;
    while ((l < _len(neigh))) {
      let nb: string = neigh[(l) < 0 ? neigh.length + (l) : l];
      if (contains(groupB, nb)) {
        cut.push({"a": node, "b": nb});
      }
      l = (l + 1);
    }
    j = (j + 1);
  }
  return cut;
}
function cut_to_string(cut: Pair[]): string {
  let s: string = "{";
  let i: number = 0;
  while ((i < _len(cut))) {
    let p: Pair = cut[(i) < 0 ? cut.length + (i) : i];
    s = (((((s + "(") + p.a) + ", ") + p.b) + ")");
    if ((i < (_len(cut) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "}");
  return s;
}
let TEST_GRAPH: TEST_GRAPH = {"1": ["2", "3", "4", "5"], "2": ["1", "3", "4", "5"], "3": ["1", "2", "4", "5", "10"], "4": ["1", "2", "3", "5", "6"], "5": ["1", "2", "3", "4", "7"], "6": ["7", "8", "9", "10", "4"], "7": ["6", "8", "9", "10", "5"], "8": ["6", "7", "9", "10"], "9": ["6", "7", "8", "10"], "10": ["6", "7", "8", "9", "3"]};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _keys(obj: any): any[] {
  return Object.keys(obj);
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: Pair[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = partition_graph(TEST_GRAPH)
  console.log(_str(cut_to_string(result)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

