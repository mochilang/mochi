// Generated by Mochi v0.10.66 on 2025-08-15 10:28:20 GMT+7

export interface Edge { node: number; weight: number }
function make_int_list(n: number, value: number): number[] {
  let lst: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    lst.push(value);
    i = (i + 1);
  }
  return lst;
}
function make_bool_list(n: number): boolean[] {
  let lst: boolean[] = [];
  let i: number = 0;
  while ((i < n)) {
    lst.push(false);
    i = (i + 1);
  }
  return lst;
}
function dijkstra(graph: Edge[][], src: number): number[] {
  let n: number = _len(graph);
  let dist: number[] = make_int_list(n, 1000000000);
  let visited: boolean[] = make_bool_list(n);
  dist[(()=>{const _mochi_idx = src; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = 0;
  let count: number = 0;
  while ((count < n)) {
    let u: number = -1;
    let min_dist: number = 1000000000;
    let i: number = 0;
    while ((i < n)) {
      if ((!visited[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] && (dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] < min_dist))) {
        min_dist = dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()];
        u = i;
      }
      i = (i + 1);
    }
    if ((u < 0)) {
      break
    }
    visited[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
    let j: number = 0;
    while ((j < _len(graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]))) {
      let e: Edge = graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let v: number = e.node;
      let w: number = e.weight;
      if (!visited[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()]) {
        let new_dist: number = (dist[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] + w);
        if ((new_dist < dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()])) {
          dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = new_dist;
        }
      }
      j = (j + 1);
    }
    count = (count + 1);
  }
  return dist;
}
let graph: Edge[][] = [[{node: 1, weight: 10}, {node: 3, weight: 5}], [{node: 2, weight: 1}, {node: 3, weight: 2}], [{node: 4, weight: 4}], [{node: 1, weight: 3}, {node: 2, weight: 9}, {node: 4, weight: 2}], [{node: 0, weight: 7}, {node: 2, weight: 6}]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let dist: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
dist = dijkstra(graph, 0)
  console.log(_str(dist[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()]));
  console.log(_str(dist[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()]));
  console.log(_str(dist[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()]));
  console.log(_str(dist[(()=>{const _mochi_idx = Math.trunc(3); return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()]));
  console.log(_str(dist[(()=>{const _mochi_idx = Math.trunc(4); return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()]));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

