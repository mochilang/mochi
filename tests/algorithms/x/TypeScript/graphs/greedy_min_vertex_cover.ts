// Generated by Mochi v0.10.59 on 2025-08-07 00:02:19 GMT+7

function remove_value(lst: number[], val: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(lst))) {
    if ((lst[(i) < 0 ? lst.length + (i) : i] != val)) {
      res.push(lst[(i) < 0 ? lst.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function greedy_min_vertex_cover(graph: Record<number, number[]>): number[] {
  let g: Record<number, number[]> = graph;
  let cover: number[] = [];
  while (true) {
    let max_v: number = 0;
    let max_deg: number = 0;
    for (const v in g) {
      let key: number = Math.trunc(v);
      let deg: number = _len(g[(key) < 0 ? g.length + (key) : key]);
      if ((deg > max_deg)) {
        max_deg = deg;
        max_v = key;
      }
    }
    if ((max_deg == 0)) {
      break
    }
    cover.push(max_v);
    let neighbors: number[] = g[(max_v) < 0 ? g.length + (max_v) : max_v];
    let i: number = 0;
    while ((i < _len(neighbors))) {
      let n: number = neighbors[(i) < 0 ? neighbors.length + (i) : i];
      g[(n) < 0 ? g.length + (n) : n] = remove_value(g[(n) < 0 ? g.length + (n) : n], max_v);
      i = (i + 1);
    }
    g[(max_v) < 0 ? g.length + (max_v) : max_v] = [];
  }
  return cover;
}
let graph: Record<number, number[]> = {[0]: [1, 3], [1]: [0, 3], [2]: [0, 3, 4], [3]: [0, 1, 2], [4]: [2, 3]};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (greedy_min_vertex_cover(graph)).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

