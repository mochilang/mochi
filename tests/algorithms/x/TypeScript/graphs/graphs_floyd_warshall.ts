// Generated by Mochi v0.10.66 on 2025-08-15 10:28:44 GMT+7

let INF: number = 1000000000.0;
function floyd_warshall(graph: number[][]): number[][] {
  let v: number = _len(graph);
  let dist: number[][] = [];
  let i: number = 0;
  while ((i < v)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < v)) {
      row.push(graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    dist.push(row);
    i = (i + 1);
  }
  let k: number = 0;
  while ((k < v)) {
    i = 0;
    while ((i < v)) {
      let j: number = 0;
      while ((j < v)) {
        if ((((dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] < INF) && (dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] < INF)) && ((dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) < dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))) {
          dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    k = (k + 1);
  }
  return dist;
}
function print_dist(dist: number[][]) {
  console.log(_str("\nThe shortest path matrix using Floyd Warshall algorithm\n"));
  let i: number = 0;
  while ((i < _len(dist))) {
    let j: number = 0;
    let line: string = "";
    while ((j < _len(dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()]))) {
      if ((dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] >= (INF / 2.0))) {
        line = (line + "INF\t");
      } else {
        line = ((line + _str(Math.trunc(dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))) + "\t");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let graph: number[][]
let result: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
graph = [[0.0, 5.0, INF, 10.0], [INF, 0.0, 3.0, INF], [INF, INF, 0.0, 1.0], [INF, INF, INF, 0.0]]
result = floyd_warshall(graph)
  print_dist(result);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

