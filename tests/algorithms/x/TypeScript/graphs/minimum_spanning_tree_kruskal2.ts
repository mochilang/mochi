// Generated by Mochi v0.10.59 on 2025-08-07 00:02:35 GMT+7

export interface Edge { u: number; v: number; w: number }
export interface Graph { edges: Edge[]; num_nodes: number }
export interface DS { parent: number[]; rank: number[] }
export interface FindResult { ds: DS; root: number }
function new_graph(): Graph {
  return {"edges": [], "num_nodes": 0};
}
function add_edge(g: Graph, u: number, v: number, w: number): Graph {
  let es: Edge[] = g.edges;
  es.push({u, v, w});
  let n: number = g.num_nodes;
  if ((u > n)) {
    n = u;
  }
  if ((v > n)) {
    n = v;
  }
  return {"edges": es, "num_nodes": n};
}
function make_ds(n: number): DS {
  let parent: number[] = [];
  let rank: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    parent.push(i);
    rank.push(0);
    i = (i + 1);
  }
  return {parent, rank};
}
function find_set(ds: DS, x: number): FindResult {
  if ((ds.parent[(x) < 0 ? ds.parent.length + (x) : x] == x)) {
    return {ds, "root": x};
  }
  let res: FindResult = find_set(ds, ds.parent[(x) < 0 ? ds.parent.length + (x) : x]);
  let p: number[] = res.ds.parent;
  p[(x) < 0 ? p.length + (x) : x] = res.root;
  return {"ds": {"parent": p, "rank": res.ds.rank}, "root": res.root};
}
function union_set(ds: DS, x: number, y: number): DS {
  let fx: FindResult = find_set(ds, x);
  let ds1: DS = fx.ds;
  let x_root: number = fx.root;
  let fy: FindResult = find_set(ds1, y);
  let ds2: DS = fy.ds;
  let y_root: number = fy.root;
  if ((x_root == y_root)) {
    return ds2;
  }
  let p: number[] = ds2.parent;
  let r: number[] = ds2.rank;
  if ((r[(x_root) < 0 ? r.length + (x_root) : x_root] > r[(y_root) < 0 ? r.length + (y_root) : y_root])) {
    p[(y_root) < 0 ? p.length + (y_root) : y_root] = x_root;
  } else {
    p[(x_root) < 0 ? p.length + (x_root) : x_root] = y_root;
    if ((r[(x_root) < 0 ? r.length + (x_root) : x_root] == r[(y_root) < 0 ? r.length + (y_root) : y_root])) {
      r[(y_root) < 0 ? r.length + (y_root) : y_root] = (r[(y_root) < 0 ? r.length + (y_root) : y_root] + 1);
    }
  }
  return {"parent": p, "rank": r};
}
function sort_edges(edges: Edge[]): Edge[] {
  let arr: Edge[] = edges;
  let i: number = 1;
  while ((i < _len(arr))) {
    let key: Edge = arr[(i) < 0 ? arr.length + (i) : i];
    let j: number = (i - 1);
    while ((j >= 0)) {
      let temp: Edge = arr[(j) < 0 ? arr.length + (j) : j];
      if (((temp.w > key.w) || ((temp.w == key.w) && ((temp.u > key.u) || ((temp.u == key.u) && (temp.v > key.v)))))) {
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = temp;
        j = (j - 1);
      } else {
        break
      }
    }
    arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = key;
    i = (i + 1);
  }
  return arr;
}
function kruskal(g: Graph): Graph {
  let edges: Edge[] = sort_edges(g.edges);
  let ds: DS = make_ds(g.num_nodes);
  let mst_edges: Edge[] = [];
  let i: number = 0;
  let added: number = 0;
  while (((added < (g.num_nodes - 1)) && (i < _len(edges)))) {
    let e: Edge = edges[(i) < 0 ? edges.length + (i) : i];
    i = (i + 1);
    let fu: FindResult = find_set(ds, e.u);
    ds = fu.ds;
    let ru: number = fu.root;
    let fv: FindResult = find_set(ds, e.v);
    ds = fv.ds;
    let rv: number = fv.root;
    if ((ru != rv)) {
      mst_edges.push(e);
      added = (added + 1);
      ds = union_set(ds, ru, rv);
    }
  }
  return {"edges": mst_edges, "num_nodes": g.num_nodes};
}
function print_mst(g: Graph) {
  let es: Edge[] = sort_edges(g.edges);
  for (const e of es) {
    console.log(_str(((((_str(e.u) + "-") + _str(e.v)) + ":") + _str(e.w))));
  }
}
function main() {
  let g: Graph = new_graph();
  g = add_edge(g, 1, 2, 1);
  g = add_edge(g, 2, 3, 2);
  g = add_edge(g, 3, 4, 1);
  g = add_edge(g, 3, 5, 100);
  g = add_edge(g, 4, 5, 5);
  let mst: Graph = kruskal(g);
  print_mst(mst);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

