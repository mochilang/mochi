// Generated by Mochi v0.10.66 on 2025-08-15 10:28:43 GMT+7

export interface GraphAdjacencyList { adj_list: Record<string, string[]>; directed: boolean }
function make_graph(directed: boolean): GraphAdjacencyList {
  let m: Record<string, string[]> = {};
  return {adj_list: m, directed};
}
function contains_vertex(m: Record<string, string[]>, v: string): boolean {
  return (v in m);
}
function add_edge(g: GraphAdjacencyList, s: string, d: string): GraphAdjacencyList {
  let adj: Record<string, string[]> = g.adj_list;
  if (!g.directed) {
    if ((contains_vertex(adj, s) && contains_vertex(adj, d))) {
      adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[s], d];
      adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[d], s];
    } else {
      if (contains_vertex(adj, s)) {
        adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[s], d];
        adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [s];
      } else {
        if (contains_vertex(adj, d)) {
          adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[d], s];
          adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [d];
        } else {
          adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [d];
          adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [s];
        }
      }
    }
  } else {
    if ((contains_vertex(adj, s) && contains_vertex(adj, d))) {
      adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[s], d];
    } else {
      if (contains_vertex(adj, s)) {
        adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[s], d];
        adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [];
      } else {
        if (contains_vertex(adj, d)) {
          adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [d];
        } else {
          adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [d];
          adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [];
        }
      }
    }
  }
  g.adj_list = adj;
  return g;
}
function graph_to_string(g: GraphAdjacencyList): string {
  return _str(g.adj_list);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let d_graph: GraphAdjacencyList
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
d_graph = make_graph(true)
  d_graph = add_edge(d_graph, _str(0), _str(1));
  console.log(_str(graph_to_string(d_graph)));
  d_graph = add_edge(d_graph, _str(1), _str(2));
  d_graph = add_edge(d_graph, _str(1), _str(4));
  d_graph = add_edge(d_graph, _str(1), _str(5));
  console.log(_str(graph_to_string(d_graph)));
  d_graph = add_edge(d_graph, _str(2), _str(0));
  d_graph = add_edge(d_graph, _str(2), _str(6));
  d_graph = add_edge(d_graph, _str(2), _str(7));
  console.log(_str(graph_to_string(d_graph)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

