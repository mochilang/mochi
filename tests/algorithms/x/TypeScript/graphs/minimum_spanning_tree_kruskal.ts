// Generated by Mochi v0.10.66 on 2025-08-15 10:29:02 GMT+7

function sort_edges(edges: number[][]): number[][] {
  let es: number[][] = edges;
  let i: number = 0;
  while ((i < _len(es))) {
    let j: number = 0;
    while ((j < ((_len(es) - i) - 1))) {
      if ((es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        let temp: number[] = es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
        es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()] = es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
        es[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()] = temp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return es;
}
function find_parent(parent: number[], i: number): number {
  if ((parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] !== i)) {
    parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = find_parent(parent, parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()]);
  }
  return parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()];
}
function kruskal(num_nodes: number, edges: number[][]): number[][] {
  let es: number[][] = sort_edges(edges);
  let parent: number[] = [];
  let i: number = 0;
  while ((i < num_nodes)) {
    parent.push(i);
    i = (i + 1);
  }
  let mst: number[][] = [];
  let idx: number = 0;
  while ((idx < _len(es))) {
    let e: number[] = es[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
    let pa: number = find_parent(parent, e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()]);
    let pb: number = find_parent(parent, e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()]);
    if ((pa !== pb)) {
      mst.push(e);
      parent[(()=>{const _mochi_idx = pa; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = pb;
    }
    idx = (idx + 1);
  }
  return mst;
}
function edges_to_string(es: number[][]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(es))) {
    let e: number[] = es[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
    s = (((((((s + "(") + _str(e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()])) + ", ") + _str(e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()])) + ", ") + _str(e[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()])) + ")");
    if ((i < (_len(es) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
let edges1: number[][] = [[0, 1, 3], [1, 2, 5], [2, 3, 1]];
let edges2: number[][] = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2]];
let edges3: number[][] = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2], [2, 1, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(edges_to_string(kruskal(4, edges1))));
  console.log(_str(edges_to_string(kruskal(4, edges2))));
  console.log(_str(edges_to_string(kruskal(4, edges3))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

