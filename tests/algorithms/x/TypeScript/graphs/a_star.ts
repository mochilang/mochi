// Generated by Mochi v0.10.65 on 2025-08-14 10:03:48 GMT+7

export interface SearchResult { path: number[][]; action: number[][] }
function iabs(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
function search(grid: number[][], init: number[], goal: number[], cost: number, heuristic: number[][]): SearchResult {
  let closed: number[][] = [];
  let r: number = 0;
  while ((r < _len(grid))) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push(0);
      c = (c + 1);
    }
    closed.push(row);
    r = (r + 1);
  }
  closed[(()=>{const _mochi_idx = init[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? init.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? closed.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = init[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? init.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? closed[(()=>{const _mochi_idx = init[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? init.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? closed.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
  let action: number[][] = [];
  r = 0;
  while ((r < _len(grid))) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push(0);
      c = (c + 1);
    }
    action.push(row);
    r = (r + 1);
  }
  let x: number = init[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? init.length + _mochi_idx : _mochi_idx;})()];
  let y: number = init[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? init.length + _mochi_idx : _mochi_idx;})()];
  let g: number = 0;
  let f: number = (g + heuristic[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? heuristic.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? heuristic[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? heuristic.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
  let cell: number[][] = [[f, g, x, y]];
  let found: boolean = false;
  let resign: boolean = false;
  while ((!found && !resign)) {
    if ((_len(cell) === 0)) {
      _panic("Algorithm is unable to find solution");
    } else {
      let best_i: number = 0;
      let best_f: number = cell[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? cell[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let i: number = 1;
      while ((i < _len(cell))) {
        if ((cell[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? cell[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] < best_f)) {
          best_f = cell[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? cell[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
          best_i = i;
        }
        i = (i + 1);
      }
      let next_cell: number[] = cell[(()=>{const _mochi_idx = best_i; return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()];
      let new_cell: number[][] = [];
      i = 0;
      while ((i < _len(cell))) {
        if ((i !== best_i)) {
          new_cell.push(cell[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cell.length + _mochi_idx : _mochi_idx;})()]);
        }
        i = (i + 1);
      }
      cell = new_cell;
      x = next_cell[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? next_cell.length + _mochi_idx : _mochi_idx;})()];
      y = next_cell[(()=>{const _mochi_idx = Math.trunc(3); return _mochi_idx < 0 ? next_cell.length + _mochi_idx : _mochi_idx;})()];
      g = next_cell[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? next_cell.length + _mochi_idx : _mochi_idx;})()];
      if (((x === goal[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? goal.length + _mochi_idx : _mochi_idx;})()]) && (y === goal[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? goal.length + _mochi_idx : _mochi_idx;})()]))) {
        found = true;
      } else {
        let d: number = 0;
        while ((d < _len(DIRECTIONS))) {
          let x2: number = (x + DIRECTIONS[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? DIRECTIONS[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
          let y2: number = (y + DIRECTIONS[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? DIRECTIONS[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
          if (((((((x2 >= 0) && (x2 < _len(grid))) && (y2 >= 0)) && (y2 < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) && (closed[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? closed.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y2; return _mochi_idx < 0 ? closed[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? closed.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 0)) && (grid[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y2; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 0))) {
            let g2: number = (g + cost);
            let f2: number = (g2 + heuristic[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? heuristic.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y2; return _mochi_idx < 0 ? heuristic[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? heuristic.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
            cell.push([f2, g2, x2, y2]);
            closed[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? closed.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y2; return _mochi_idx < 0 ? closed[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? closed.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
            action[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? action.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y2; return _mochi_idx < 0 ? action[(()=>{const _mochi_idx = x2; return _mochi_idx < 0 ? action.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = d;
          }
          d = (d + 1);
        }
      }
    }
  }
  let invpath: number[][] = [];
  x = goal[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? goal.length + _mochi_idx : _mochi_idx;})()];
  y = goal[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? goal.length + _mochi_idx : _mochi_idx;})()];
  invpath.push([x, y]);
  while (((x !== init[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? init.length + _mochi_idx : _mochi_idx;})()]) || (y !== init[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? init.length + _mochi_idx : _mochi_idx;})()]))) {
    let dir: number = action[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? action.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? action[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? action.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let x2: number = (x - DIRECTIONS[(()=>{const _mochi_idx = dir; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? DIRECTIONS[(()=>{const _mochi_idx = dir; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    let y2: number = (y - DIRECTIONS[(()=>{const _mochi_idx = dir; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? DIRECTIONS[(()=>{const _mochi_idx = dir; return _mochi_idx < 0 ? DIRECTIONS.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    x = x2;
    y = y2;
    invpath.push([x, y]);
  }
  let path: number[][] = [];
  let idx: number = (_len(invpath) - 1);
  while ((idx >= 0)) {
    path.push(invpath[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? invpath.length + _mochi_idx : _mochi_idx;})()]);
    idx = (idx - 1);
  }
  return {path, action};
}
function main() {
  let grid: number[][] = [[0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0]];
  let init: number[] = [0, 0];
  let goal: number[] = [(_len(grid) - 1), (_len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]) - 1)];
  let cost: number = 1;
  let heuristic: number[][] = [];
  let i: number = 0;
  while ((i < _len(grid))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) {
      let h: number = (iabs((i - goal[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? goal.length + _mochi_idx : _mochi_idx;})()])) + iabs((j - goal[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? goal.length + _mochi_idx : _mochi_idx;})()])));
      if ((grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 1)) {
        row.push(99);
      } else {
        row.push(h);
      }
      j = (j + 1);
    }
    heuristic.push(row);
    i = (i + 1);
  }
  let result: SearchResult = search(grid, init, goal, cost, heuristic);
  console.log(_str("ACTION MAP"));
  let rr: number = 0;
  while ((rr < _len(result.action))) {
    console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(result.action[(()=>{const _mochi_idx = rr; return _mochi_idx < 0 ? result.action.length + _mochi_idx : _mochi_idx;})()])));
    rr = (rr + 1);
  }
  let p: number = 0;
  while ((p < _len(result.path))) {
    console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(result.path[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? result.path.length + _mochi_idx : _mochi_idx;})()])));
    p = (p + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let DIRECTIONS: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
DIRECTIONS = [[-1, 0], [0, -1], [1, 0], [0, 1]]
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

