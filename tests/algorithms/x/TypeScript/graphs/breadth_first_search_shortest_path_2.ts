// Generated by Mochi v0.10.59 on 2025-08-07 00:01:37 GMT+7

export interface Demo_graph { A: string[]; B: string[]; C: string[]; D: string[]; E: string[]; F: string[]; G: string[] }
function contains(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function contains_key(m: Record<string, string[]>, key: string): boolean {
  for (const k in m) {
    if ((k == key)) {
      return true;
    }
  }
  return false;
}
function bfs_shortest_path(graph: Record<string, string[]>, start: string, goal: string): string[] {
  let explored: string[] = [];
  let queue: string[][] = [[start]];
  if ((start == goal)) {
    return [start];
  }
  while ((_len(queue) > 0)) {
    let path: string[] = queue[(Math.trunc(0)) < 0 ? queue.length + (Math.trunc(0)) : Math.trunc(0)];
    queue = queue.slice(1, _len(queue));
    let node: string = path[(Math.trunc((_len(path) - 1))) < 0 ? path.length + (Math.trunc((_len(path) - 1))) : Math.trunc((_len(path) - 1))];
    if (!contains(explored, node)) {
      let neighbours: string[] = graph[(node) < 0 ? graph.length + (node) : node];
      let i: number = 0;
      while ((i < _len(neighbours))) {
        let neighbour: string = neighbours[(i) < 0 ? neighbours.length + (i) : i];
        let new_path: string[] = path;
        new_path.push(neighbour);
        queue.push(new_path);
        if ((neighbour == goal)) {
          return new_path;
        }
        i = (i + 1);
      }
      explored.push(node);
    }
  }
  return [];
}
function bfs_shortest_path_distance(graph: Record<string, string[]>, start: string, target: string): number {
  if (((contains_key(graph, start) == false) || (contains_key(graph, target) == false))) {
    return -1;
  }
  if ((start == target)) {
    return 0;
  }
  let queue: string[] = [start];
  let visited: string[] = [start];
  let dist: Record<string, number> = {};
  dist[(start) < 0 ? dist.length + (start) : start] = 0;
  dist[(target) < 0 ? dist.length + (target) : target] = -1;
  while ((_len(queue) > 0)) {
    let node: string = queue[(Math.trunc(0)) < 0 ? queue.length + (Math.trunc(0)) : Math.trunc(0)];
    queue = queue.slice(1, _len(queue));
    if ((node == target)) {
      if (((dist[(target) < 0 ? dist.length + (target) : target] == -1) || (dist[(node) < 0 ? dist.length + (node) : node] < dist[(target) < 0 ? dist.length + (target) : target]))) {
        dist[(target) < 0 ? dist.length + (target) : target] = dist[(node) < 0 ? dist.length + (node) : node];
      }
    }
    let adj: string[] = graph[(node) < 0 ? graph.length + (node) : node];
    let i: number = 0;
    while ((i < _len(adj))) {
      let next: string = adj[(i) < 0 ? adj.length + (i) : i];
      if (!contains(visited, next)) {
        visited.push(next);
        queue.push(next);
        dist[(next) < 0 ? dist.length + (next) : next] = (dist[(node) < 0 ? dist.length + (node) : node] + 1);
      }
      i = (i + 1);
    }
  }
  return dist[(target) < 0 ? dist.length + (target) : target];
}
let demo_graph: Demo_graph = {"A": ["B", "C", "E"], "B": ["A", "D", "E"], "C": ["A", "F", "G"], "D": ["B"], "E": ["A", "B", "D"], "F": ["C"], "G": ["C"]};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

