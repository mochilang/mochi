// Generated by Mochi v0.10.65 on 2025-08-14 17:22:28 GMT+7

export interface Visited { start: boolean }
export interface Visited_f { start: string[] }
export interface Visited_b { goal: string[] }
let grid: number[][] = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]];
function key(y: number, x: number): string {
  return ((_str(y) + ",") + _str(x));
}
function parse_int(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    value = ((value * 10) + Math.trunc(c));
    i = (i + 1);
  }
  return value;
}
function parse_key(k: string): number[] {
  let idx: number = 0;
  while (((idx < _len(k)) && ((k).substring(idx, (idx + 1)) !== ","))) {
    idx = (idx + 1);
  }
  let y: number = parse_int((k).substring(0, idx));
  let x: number = parse_int((k).substring((idx + 1), _len(k)));
  return [y, x];
}
export interface Node { pos: string; path: string[] }
function neighbors(pos: string): string[] {
  let coords: number[] = parse_key(pos);
  let y: number = coords[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coords.length + _mochi_idx : _mochi_idx;})()];
  let x: number = coords[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? coords.length + _mochi_idx : _mochi_idx;})()];
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(delta))) {
    let ny: number = (y + delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    let nx: number = (x + delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    if (((((ny >= 0) && (ny < _len(grid))) && (nx >= 0)) && (nx < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()])))) {
      if ((grid[(()=>{const _mochi_idx = ny; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = nx; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = ny; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 0)) {
        res.push(key(ny, nx));
      }
    }
    i = (i + 1);
  }
  return res;
}
function reverse_list(lst: string[]): string[] {
  let res: string[] = [];
  let i: number = (_len(lst) - 1);
  while ((i >= 0)) {
    res.push(lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  return res;
}
function bfs(start: string, goal: string): string[] {
  let queue: Node[] = [];
  queue.push({pos: start, path: [start]});
  let head: number = 0;
  let visited: Visited = {start: true};
  while ((head < _len(queue))) {
    let node: Node = queue[(()=>{const _mochi_idx = head; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()];
    head = (head + 1);
    if ((node.pos === goal)) {
      return node.path;
    }
    let neigh: string[] = neighbors(node.pos);
    let i: number = 0;
    while ((i < _len(neigh))) {
      let npos: string = neigh[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? neigh.length + _mochi_idx : _mochi_idx;})()];
      if (!(npos in visited)) {
        visited[(()=>{const _mochi_idx = npos; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
        let new_path: any[] = [...node.path, npos];
        queue.push({pos: npos, path: new_path});
      }
      i = (i + 1);
    }
  }
  return [];
}
function bidirectional_bfs(start: string, goal: string): string[] {
  let queue_f: Node[] = [];
  let queue_b: Node[] = [];
  queue_f.push({pos: start, path: [start]});
  queue_b.push({pos: goal, path: [goal]});
  let head_f: number = 0;
  let head_b: number = 0;
  let visited_f: Visited_f = {start: [start]};
  let visited_b: Visited_b = {goal: [goal]};
  while (((head_f < _len(queue_f)) && (head_b < _len(queue_b)))) {
    let node_f: Node = queue_f[(()=>{const _mochi_idx = head_f; return _mochi_idx < 0 ? queue_f.length + _mochi_idx : _mochi_idx;})()];
    head_f = (head_f + 1);
    let neigh_f: string[] = neighbors(node_f.pos);
    let i: number = 0;
    while ((i < _len(neigh_f))) {
      let npos: string = neigh_f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? neigh_f.length + _mochi_idx : _mochi_idx;})()];
      if (!(npos in visited_f)) {
        let new_path: any[] = [...node_f.path, npos];
        visited_f[(()=>{const _mochi_idx = npos; return _mochi_idx < 0 ? visited_f.length + _mochi_idx : _mochi_idx;})()] = new_path;
        if ((npos in visited_b)) {
          let rev = reverse_list(visited_b[npos]);
          let j: number = 1;
          while ((j < _len(rev))) {
            new_path.push(rev[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rev.length + _mochi_idx : _mochi_idx;})()]);
            j = (j + 1);
          }
          return new_path;
        }
        queue_f.push({pos: npos, path: new_path});
      }
      i = (i + 1);
    }
    let node_b: Node = queue_b[(()=>{const _mochi_idx = head_b; return _mochi_idx < 0 ? queue_b.length + _mochi_idx : _mochi_idx;})()];
    head_b = (head_b + 1);
    let neigh_b: string[] = neighbors(node_b.pos);
    let j: number = 0;
    while ((j < _len(neigh_b))) {
      let nposb: string = neigh_b[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? neigh_b.length + _mochi_idx : _mochi_idx;})()];
      if (!(nposb in visited_b)) {
        let new_path_b: any[] = [...node_b.path, nposb];
        visited_b[(()=>{const _mochi_idx = nposb; return _mochi_idx < 0 ? visited_b.length + _mochi_idx : _mochi_idx;})()] = new_path_b;
        if ((nposb in visited_f)) {
          let path_f = visited_f[nposb];
          new_path_b = reverse_list(new_path_b);
          let t: number = 1;
          while ((t < _len(new_path_b))) {
            path_f.push(new_path_b[(()=>{const _mochi_idx = t; return _mochi_idx < 0 ? new_path_b.length + _mochi_idx : _mochi_idx;})()]);
            t = (t + 1);
          }
          return path_f;
        }
        queue_b.push({pos: nposb, path: new_path_b});
      }
      j = (j + 1);
    }
  }
  return [start];
}
function path_to_string(path: string[]): string {
  if ((_len(path) === 0)) {
    return "[]";
  }
  let first: number[] = parse_key(path[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()]);
  let s = (((("[(" + _str(first[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? first.length + _mochi_idx : _mochi_idx;})()])) + ", ") + _str(first[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? first.length + _mochi_idx : _mochi_idx;})()])) + ")");
  let i: number = 1;
  while ((i < _len(path))) {
    let c: number[] = parse_key(path[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()]);
    s = (((((s + ", (") + _str(c[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()])) + ", ") + _str(c[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()])) + ")");
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let delta: number[][]
let start: string
let goal: string
let path1: string[]
let path2: string[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
delta = [[-1, 0], [0, -1], [1, 0], [0, 1]]
start = key(0, 0)
goal = key((_len(grid) - 1), (_len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]) - 1))
path1 = bfs(start, goal)
  console.log(_str(path_to_string(path1)));
path2 = bidirectional_bfs(start, goal)
  console.log(_str(path_to_string(path2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

