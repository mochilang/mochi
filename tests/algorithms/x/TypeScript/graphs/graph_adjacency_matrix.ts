// Generated by Mochi v0.10.66 on 2025-08-15 10:28:41 GMT+7

export interface Graph { directed: boolean; vertex_to_index: Record<number, number>; adj_matrix: number[][] }
function make_graph(vertices: number[], edges: number[][], directed: boolean): Graph {
  let g: Graph = {directed, vertex_to_index: {}, adj_matrix: []};
  let i: number = 0;
  while ((i < _len(vertices))) {
    add_vertex(g, vertices[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vertices.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < _len(edges))) {
    let e: number[] = edges[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()];
    add_edge(g, e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()], e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  return g;
}
function contains_vertex(g: Graph, v: number): boolean {
  return (v in g.vertex_to_index);
}
function add_vertex(g: Graph, v: number) {
  if (contains_vertex(g, v)) {
    _panic("vertex already exists");
  }
  let matrix: number[][] = g.adj_matrix;
  let i: number = 0;
  while ((i < _len(matrix))) {
    matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].push(0);
    i = (i + 1);
  }
  let row: number[] = [];
  let j: number = 0;
  while ((j < (_len(matrix) + 1))) {
    row.push(0);
    j = (j + 1);
  }
  matrix.push(row);
  g.adj_matrix = matrix;
  let idx_map: Record<number, number> = g.vertex_to_index;
  idx_map[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = (_len(matrix) - 1);
  g.vertex_to_index = idx_map;
}
function remove_key(m: Record<number, number>, k: number): Record<number, number> {
  let out: Record<number, number> = {};
  for (const key in m) {
    if ((key !== k)) {
      out[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? out.length + _mochi_idx : _mochi_idx;})()] = m[key];
    }
  }
  return out;
}
function decrement_indices(m: Record<number, number>, start: number): Record<number, number> {
  let out: Record<number, number> = {};
  for (const key in m) {
    let idx: number = m[key];
    if ((idx > start)) {
      out[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? out.length + _mochi_idx : _mochi_idx;})()] = (idx - 1);
    } else {
      out[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? out.length + _mochi_idx : _mochi_idx;})()] = idx;
    }
  }
  return out;
}
function remove_vertex(g: Graph, v: number) {
  if (!contains_vertex(g, v)) {
    _panic("vertex does not exist");
  }
  let idx: number = g.vertex_to_index[v];
  let new_matrix: number[][] = [];
  let i: number = 0;
  while ((i < _len(g.adj_matrix))) {
    if ((i !== idx)) {
      let row: number[] = g.adj_matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? g.adj_matrix.length + _mochi_idx : _mochi_idx;})()];
      let new_row: number[] = [];
      let j: number = 0;
      while ((j < _len(row))) {
        if ((j !== idx)) {
          new_row.push(row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()]);
        }
        j = (j + 1);
      }
      new_matrix.push(new_row);
    }
    i = (i + 1);
  }
  g.adj_matrix = new_matrix;
  let m: Record<number, number> = remove_key(g.vertex_to_index, v);
  g.vertex_to_index = decrement_indices(m, idx);
}
function add_edge(g: Graph, u: number, v: number) {
  if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
    _panic("missing vertex");
  }
  let i: number = g.vertex_to_index[u];
  let j: number = g.vertex_to_index[v];
  let matrix: number[][] = g.adj_matrix;
  matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
  if (!g.directed) {
    matrix[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
  }
  g.adj_matrix = matrix;
}
function remove_edge(g: Graph, u: number, v: number) {
  if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
    _panic("missing vertex");
  }
  let i: number = g.vertex_to_index[u];
  let j: number = g.vertex_to_index[v];
  let matrix: number[][] = g.adj_matrix;
  matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
  if (!g.directed) {
    matrix[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
  }
  g.adj_matrix = matrix;
}
function contains_edge(g: Graph, u: number, v: number): boolean {
  if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
    _panic("missing vertex");
  }
  let i: number = g.vertex_to_index[u];
  let j: number = g.vertex_to_index[v];
  let matrix: number[][] = g.adj_matrix;
  return (matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 1);
}
function clear_graph(g: Graph) {
  g.vertex_to_index = {};
  g.adj_matrix = [];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let g: Graph
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
g = make_graph([1, 2, 3], [[1, 2], [2, 3]], false)
  console.log(_str(g.adj_matrix));
  console.log(_str(contains_edge(g, 1, 2)));
  console.log(_str(contains_edge(g, 2, 1)));
  remove_edge(g, 1, 2);
  console.log(_str(contains_edge(g, 1, 2)));
  remove_vertex(g, 2);
  console.log(_str(g.adj_matrix));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

