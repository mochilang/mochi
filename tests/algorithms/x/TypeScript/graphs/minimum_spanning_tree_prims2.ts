// Generated by Mochi v0.10.59 on 2025-08-07 00:02:38 GMT+7

export interface QueueNode { node: string; weight: number }
export interface MSTResult { dist: Record<string, number>; parent: Record<string, string> }
function prims_algo(graph: Record<string, Record<string, number>>): MSTResult {
  let INF: number = 2147483647;
  let dist: Record<string, number> = {};
  let parent: Record<string, string> = {};
  let queue: QueueNode[] = [];
  for (const node in graph) {
    dist[(node) < 0 ? dist.length + (node) : node] = INF;
    parent[(node) < 0 ? parent.length + (node) : node] = "";
    queue.push({node, "weight": INF});
  }
  if ((_len(queue) == 0)) {
    return {dist, parent};
  }
  let min_idx: number = 0;
  let i: number = 1;
  while ((i < _len(queue))) {
    if ((queue[(i) < 0 ? queue.length + (i) : i].weight < queue[(min_idx) < 0 ? queue.length + (min_idx) : min_idx].weight)) {
      min_idx = i;
    }
    i = (i + 1);
  }
  let start_node: QueueNode = queue[(min_idx) < 0 ? queue.length + (min_idx) : min_idx];
  let start: string = start_node.node;
  let new_q: QueueNode[] = [];
  let j: number = 0;
  while ((j < _len(queue))) {
    if ((j != min_idx)) {
      new_q.push(queue[(j) < 0 ? queue.length + (j) : j]);
    }
    j = (j + 1);
  }
  queue = new_q;
  dist[(start) < 0 ? dist.length + (start) : start] = 0;
  for (const neighbour in graph[(start) < 0 ? graph.length + (start) : start]) {
    let w: number = graph[(start) < 0 ? graph.length + (start) : start][(neighbour) < 0 ? graph[(start) < 0 ? graph.length + (start) : start].length + (neighbour) : neighbour];
    if ((dist[(neighbour) < 0 ? dist.length + (neighbour) : neighbour] > (dist[(start) < 0 ? dist.length + (start) : start] + w))) {
      dist[(neighbour) < 0 ? dist.length + (neighbour) : neighbour] = (dist[(start) < 0 ? dist.length + (start) : start] + w);
      parent[(neighbour) < 0 ? parent.length + (neighbour) : neighbour] = start;
      let k: number = 0;
      while ((k < _len(queue))) {
        if ((queue[(k) < 0 ? queue.length + (k) : k].node == neighbour)) {
          queue[(k) < 0 ? queue.length + (k) : k].weight = dist[(neighbour) < 0 ? dist.length + (neighbour) : neighbour];
          break
        }
        k = (k + 1);
      }
    }
  }
  while ((_len(queue) > 0)) {
    let best_idx: number = 0;
    let p: number = 1;
    while ((p < _len(queue))) {
      if ((queue[(p) < 0 ? queue.length + (p) : p].weight < queue[(best_idx) < 0 ? queue.length + (best_idx) : best_idx].weight)) {
        best_idx = p;
      }
      p = (p + 1);
    }
    let node_entry: QueueNode = queue[(best_idx) < 0 ? queue.length + (best_idx) : best_idx];
    let node: string = node_entry.node;
    let tmp: QueueNode[] = [];
    let q: number = 0;
    while ((q < _len(queue))) {
      if ((q != best_idx)) {
        tmp.push(queue[(q) < 0 ? queue.length + (q) : q]);
      }
      q = (q + 1);
    }
    queue = tmp;
    for (const neighbour in graph[(node) < 0 ? graph.length + (node) : node]) {
      let w: number = graph[(node) < 0 ? graph.length + (node) : node][(neighbour) < 0 ? graph[(node) < 0 ? graph.length + (node) : node].length + (neighbour) : neighbour];
      if ((dist[(neighbour) < 0 ? dist.length + (neighbour) : neighbour] > (dist[(node) < 0 ? dist.length + (node) : node] + w))) {
        dist[(neighbour) < 0 ? dist.length + (neighbour) : neighbour] = (dist[(node) < 0 ? dist.length + (node) : node] + w);
        parent[(neighbour) < 0 ? parent.length + (neighbour) : neighbour] = node;
        let r: number = 0;
        while ((r < _len(queue))) {
          if ((queue[(r) < 0 ? queue.length + (r) : r].node == neighbour)) {
            queue[(r) < 0 ? queue.length + (r) : r].weight = dist[(neighbour) < 0 ? dist.length + (neighbour) : neighbour];
            break
          }
          r = (r + 1);
        }
      }
    }
  }
  return {dist, parent};
}
function iabs(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
let graph: Record<string, Record<string, number>> = {};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let res: MSTResult
let dist: Record<string, number>
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  graph.a = {"b": 3, "c": 15};
  graph.b = {"a": 3, "c": 10, "d": 100};
  graph.c = {"a": 15, "b": 10, "d": 5};
  graph.d = {"b": 100, "c": 5};
res = prims_algo(graph)
dist = res.dist
  console.log(_str(_str(iabs((dist.a - dist.b)))));
  console.log(_str(_str(iabs((dist.d - dist.b)))));
  console.log(_str(_str(iabs((dist.a - dist.c)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

