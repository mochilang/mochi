// Generated by Mochi v0.10.66 on 2025-08-15 10:29:07 GMT+7

export interface QueueNode { node: string; weight: number }
export interface MSTResult { dist: Record<string, number>; parent: Record<string, string> }
function prims_algo(graph: Record<string, Record<string, number>>): MSTResult {
  let INF: number = 2147483647;
  let dist: Record<string, number> = {};
  let parent: Record<string, string> = {};
  let queue: QueueNode[] = [];
  for (const node in graph) {
    dist[(()=>{const _mochi_idx = node; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = INF;
    parent[(()=>{const _mochi_idx = node; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = "";
    queue.push({node, weight: INF});
  }
  if ((_len(queue) === 0)) {
    return {dist, parent};
  }
  let min_idx: number = 0;
  let i: number = 1;
  while ((i < _len(queue))) {
    if ((queue[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].weight < queue[(()=>{const _mochi_idx = min_idx; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].weight)) {
      min_idx = i;
    }
    i = (i + 1);
  }
  let start_node: QueueNode = queue[(()=>{const _mochi_idx = min_idx; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()];
  let start: string = start_node.node;
  let new_q: QueueNode[] = [];
  let j: number = 0;
  while ((j < _len(queue))) {
    if ((j !== min_idx)) {
      new_q.push(queue[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()]);
    }
    j = (j + 1);
  }
  queue = new_q;
  dist[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = 0;
  for (const neighbour in graph[start]) {
    let w: number = graph[start][neighbour];
    if ((dist[neighbour] > (dist[start] + w))) {
      dist[(()=>{const _mochi_idx = neighbour; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = (dist[start] + w);
      parent[(()=>{const _mochi_idx = neighbour; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = start;
      let k: number = 0;
      while ((k < _len(queue))) {
        if (_equal(queue[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].node, neighbour)) {
          queue[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].weight = dist[neighbour];
          break
        }
        k = (k + 1);
      }
    }
  }
  while ((_len(queue) > 0)) {
    let best_idx: number = 0;
    let p: number = 1;
    while ((p < _len(queue))) {
      if ((queue[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].weight < queue[(()=>{const _mochi_idx = best_idx; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].weight)) {
        best_idx = p;
      }
      p = (p + 1);
    }
    let node_entry: QueueNode = queue[(()=>{const _mochi_idx = best_idx; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()];
    let node: string = node_entry.node;
    let tmp: QueueNode[] = [];
    let q: number = 0;
    while ((q < _len(queue))) {
      if ((q !== best_idx)) {
        tmp.push(queue[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()]);
      }
      q = (q + 1);
    }
    queue = tmp;
    for (const neighbour in graph[node]) {
      let w: number = graph[node][neighbour];
      if ((dist[neighbour] > (dist[node] + w))) {
        dist[(()=>{const _mochi_idx = neighbour; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = (dist[node] + w);
        parent[(()=>{const _mochi_idx = neighbour; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = node;
        let r: number = 0;
        while ((r < _len(queue))) {
          if (_equal(queue[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].node, neighbour)) {
            queue[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()].weight = dist[neighbour];
            break
          }
          r = (r + 1);
        }
      }
    }
  }
  return {dist, parent};
}
function iabs(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
let graph: Record<string, Record<string, number>> = {};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === 'number' && typeof b === 'number') {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}
let res: MSTResult
let dist: Record<string, number>
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  graph.a = {b: 3, c: 15};
  graph.b = {a: 3, c: 10, d: 100};
  graph.c = {a: 15, b: 10, d: 5};
  graph.d = {b: 100, c: 5};
res = prims_algo(graph)
dist = res.dist
  console.log(_str(iabs((dist.a - dist.b))));
  console.log(_str(iabs((dist.d - dist.b))));
  console.log(_str(iabs((dist.a - dist.c))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

