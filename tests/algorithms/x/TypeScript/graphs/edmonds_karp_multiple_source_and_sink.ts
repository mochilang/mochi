// Generated by Mochi v0.10.59 on 2025-08-06 23:28:26 GMT+7

function push_relabel_max_flow(graph: number[][], sources: number[], sinks: number[]): number {
  if (((_len(sources) == 0) || (_len(sinks) == 0))) {
    return 0;
  }
  let g: number[][] = graph;
  let source_index: number = sources[(Math.trunc(0)) < 0 ? sources.length + (Math.trunc(0)) : Math.trunc(0)];
  let sink_index: number = sinks[(Math.trunc(0)) < 0 ? sinks.length + (Math.trunc(0)) : Math.trunc(0)];
  if (((_len(sources) > 1) || (_len(sinks) > 1))) {
    let max_input_flow: number = 0;
    let i: number = 0;
    while ((i < _len(sources))) {
      let j: number = 0;
      while ((j < _len(g[(Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])) < 0 ? g.length + (Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])) : Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])]))) {
        max_input_flow = (max_input_flow + g[(Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])) < 0 ? g.length + (Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])) : Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])][(j) < 0 ? g[(Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])) < 0 ? g.length + (Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])) : Math.trunc(sources[(i) < 0 ? sources.length + (i) : i])].length + (j) : j]);
        j = (j + 1);
      }
      i = (i + 1);
    }
    let size: number = (_len(g) + 1);
    let new_graph: number[][] = [];
    let zero_row: number[] = [];
    let j: number = 0;
    while ((j < size)) {
      zero_row.push(0);
      j = (j + 1);
    }
    new_graph.push(zero_row);
    let r: number = 0;
    while ((r < _len(g))) {
      let row: number[] = [0];
      let c: number = 0;
      while ((c < _len(g[(r) < 0 ? g.length + (r) : r]))) {
        row.push(g[(r) < 0 ? g.length + (r) : r][(c) < 0 ? g[(r) < 0 ? g.length + (r) : r].length + (c) : c]);
        c = (c + 1);
      }
      new_graph.push(row);
      r = (r + 1);
    }
    g = new_graph;
    i = 0;
    while ((i < _len(sources))) {
      g[(Math.trunc(0)) < 0 ? g.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc((sources[(i) < 0 ? sources.length + (i) : i] + 1))) < 0 ? g[(Math.trunc(0)) < 0 ? g.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc((sources[(i) < 0 ? sources.length + (i) : i] + 1))) : Math.trunc((sources[(i) < 0 ? sources.length + (i) : i] + 1))] = max_input_flow;
      i = (i + 1);
    }
    source_index = 0;
    size = (_len(g) + 1);
    new_graph = [];
    r = 0;
    while ((r < _len(g))) {
      let row2: number[] = g[(r) < 0 ? g.length + (r) : r];
      row2.push(0);
      new_graph.push(row2);
      r = (r + 1);
    }
    let last_row: number[] = [];
    j = 0;
    while ((j < size)) {
      last_row.push(0);
      j = (j + 1);
    }
    new_graph.push(last_row);
    g = new_graph;
    i = 0;
    while ((i < _len(sinks))) {
      g[(Math.trunc((sinks[(i) < 0 ? sinks.length + (i) : i] + 1))) < 0 ? g.length + (Math.trunc((sinks[(i) < 0 ? sinks.length + (i) : i] + 1))) : Math.trunc((sinks[(i) < 0 ? sinks.length + (i) : i] + 1))][(Math.trunc((size - 1))) < 0 ? g[(Math.trunc((sinks[(i) < 0 ? sinks.length + (i) : i] + 1))) < 0 ? g.length + (Math.trunc((sinks[(i) < 0 ? sinks.length + (i) : i] + 1))) : Math.trunc((sinks[(i) < 0 ? sinks.length + (i) : i] + 1))].length + (Math.trunc((size - 1))) : Math.trunc((size - 1))] = max_input_flow;
      i = (i + 1);
    }
    sink_index = (size - 1);
  }
  let n: number = _len(g);
  let preflow: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(0);
      j = (j + 1);
    }
    preflow.push(row);
    i = (i + 1);
  }
  let heights: number[] = [];
  i = 0;
  while ((i < n)) {
    heights.push(0);
    i = (i + 1);
  }
  let excesses: number[] = [];
  i = 0;
  while ((i < n)) {
    excesses.push(0);
    i = (i + 1);
  }
  heights[(source_index) < 0 ? heights.length + (source_index) : source_index] = n;
  i = 0;
  while ((i < n)) {
    let bandwidth: number = g[(source_index) < 0 ? g.length + (source_index) : source_index][(i) < 0 ? g[(source_index) < 0 ? g.length + (source_index) : source_index].length + (i) : i];
    preflow[(source_index) < 0 ? preflow.length + (source_index) : source_index][(i) < 0 ? preflow[(source_index) < 0 ? preflow.length + (source_index) : source_index].length + (i) : i] = (preflow[(source_index) < 0 ? preflow.length + (source_index) : source_index][(i) < 0 ? preflow[(source_index) < 0 ? preflow.length + (source_index) : source_index].length + (i) : i] + bandwidth);
    preflow[(i) < 0 ? preflow.length + (i) : i][(source_index) < 0 ? preflow[(i) < 0 ? preflow.length + (i) : i].length + (source_index) : source_index] = (preflow[(i) < 0 ? preflow.length + (i) : i][(source_index) < 0 ? preflow[(i) < 0 ? preflow.length + (i) : i].length + (source_index) : source_index] - bandwidth);
    excesses[(i) < 0 ? excesses.length + (i) : i] = (excesses[(i) < 0 ? excesses.length + (i) : i] + bandwidth);
    i = (i + 1);
  }
  let vertices_list: number[] = [];
  i = 0;
  while ((i < n)) {
    if (((i != source_index) && (i != sink_index))) {
      vertices_list.push(i);
    }
    i = (i + 1);
  }
  let idx: number = 0;
  while ((idx < _len(vertices_list))) {
    let v: number = vertices_list[(idx) < 0 ? vertices_list.length + (idx) : idx];
    let prev_height: number = heights[(v) < 0 ? heights.length + (v) : v];
    while ((excesses[(v) < 0 ? excesses.length + (v) : v] > 0)) {
      let nb: number = 0;
      while ((nb < n)) {
        if ((((g[(v) < 0 ? g.length + (v) : v][(nb) < 0 ? g[(v) < 0 ? g.length + (v) : v].length + (nb) : nb] - preflow[(v) < 0 ? preflow.length + (v) : v][(nb) < 0 ? preflow[(v) < 0 ? preflow.length + (v) : v].length + (nb) : nb]) > 0) && (heights[(v) < 0 ? heights.length + (v) : v] > heights[(nb) < 0 ? heights.length + (nb) : nb]))) {
          let delta: number = excesses[(v) < 0 ? excesses.length + (v) : v];
          let capacity: number = (g[(v) < 0 ? g.length + (v) : v][(nb) < 0 ? g[(v) < 0 ? g.length + (v) : v].length + (nb) : nb] - preflow[(v) < 0 ? preflow.length + (v) : v][(nb) < 0 ? preflow[(v) < 0 ? preflow.length + (v) : v].length + (nb) : nb]);
          if ((delta > capacity)) {
            delta = capacity;
          }
          preflow[(v) < 0 ? preflow.length + (v) : v][(nb) < 0 ? preflow[(v) < 0 ? preflow.length + (v) : v].length + (nb) : nb] = (preflow[(v) < 0 ? preflow.length + (v) : v][(nb) < 0 ? preflow[(v) < 0 ? preflow.length + (v) : v].length + (nb) : nb] + delta);
          preflow[(nb) < 0 ? preflow.length + (nb) : nb][(v) < 0 ? preflow[(nb) < 0 ? preflow.length + (nb) : nb].length + (v) : v] = (preflow[(nb) < 0 ? preflow.length + (nb) : nb][(v) < 0 ? preflow[(nb) < 0 ? preflow.length + (nb) : nb].length + (v) : v] - delta);
          excesses[(v) < 0 ? excesses.length + (v) : v] = (excesses[(v) < 0 ? excesses.length + (v) : v] - delta);
          excesses[(nb) < 0 ? excesses.length + (nb) : nb] = (excesses[(nb) < 0 ? excesses.length + (nb) : nb] + delta);
        }
        nb = (nb + 1);
      }
      let min_height: number = -1;
      nb = 0;
      while ((nb < n)) {
        if (((g[(v) < 0 ? g.length + (v) : v][(nb) < 0 ? g[(v) < 0 ? g.length + (v) : v].length + (nb) : nb] - preflow[(v) < 0 ? preflow.length + (v) : v][(nb) < 0 ? preflow[(v) < 0 ? preflow.length + (v) : v].length + (nb) : nb]) > 0)) {
          if (((min_height == -1) || (heights[(nb) < 0 ? heights.length + (nb) : nb] < min_height))) {
            min_height = heights[(nb) < 0 ? heights.length + (nb) : nb];
          }
        }
        nb = (nb + 1);
      }
      if ((min_height != -1)) {
        heights[(v) < 0 ? heights.length + (v) : v] = (min_height + 1);
      } else {
        break
      }
    }
    if ((heights[(v) < 0 ? heights.length + (v) : v] > prev_height)) {
      let vertex: number = vertices_list[(idx) < 0 ? vertices_list.length + (idx) : idx];
      let j: number = idx;
      while ((j > 0)) {
        vertices_list[(j) < 0 ? vertices_list.length + (j) : j] = vertices_list[(Math.trunc((j - 1))) < 0 ? vertices_list.length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
        j = (j - 1);
      }
      vertices_list[(Math.trunc(0)) < 0 ? vertices_list.length + (Math.trunc(0)) : Math.trunc(0)] = vertex;
      idx = 0;
    } else {
      idx = (idx + 1);
    }
  }
  let flow: number = 0;
  i = 0;
  while ((i < n)) {
    flow = (flow + preflow[(source_index) < 0 ? preflow.length + (source_index) : source_index][(i) < 0 ? preflow[(source_index) < 0 ? preflow.length + (source_index) : source_index].length + (i) : i]);
    i = (i + 1);
  }
  if ((flow < 0)) {
    flow = -flow;
  }
  return flow;
}
let graph: number[][] = [[0, 7, 0, 0], [0, 0, 6, 0], [0, 0, 0, 8], [9, 0, 0, 0]];
let sources: number[] = [0];
let sinks: number[] = [3];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = push_relabel_max_flow(graph, sources, sinks)
  console.log(_str(("maximum flow is " + _str(result))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

