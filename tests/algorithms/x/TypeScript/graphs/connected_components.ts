// Generated by Mochi v0.10.61 on 2025-08-08 19:16:11 GMT+7

let test_graph_1: Record<number, number[]> = {[0]: [1, 2], [1]: [0, 3], [2]: [0], [3]: [1], [4]: [5, 6], [5]: [4, 6], [6]: [4, 5]};
let test_graph_2: Record<number, number[]> = {[0]: [1, 2, 3], [1]: [0, 3], [2]: [0], [3]: [0, 1], [4]: [], [5]: []};
function dfs(graph: Record<number, number[]>, vert: number, visited: boolean[]): number[] {
  visited[(()=>{const _mochi_idx = vert; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
  let connected_verts: number[] = [];
  for (const neighbour of graph[vert]) {
    if (!visited[(()=>{const _mochi_idx = neighbour; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()]) {
      connected_verts = concat(connected_verts, dfs(graph, neighbour, visited));
    }
  }
  return concat([vert], connected_verts);
}
function connected_components(graph: Record<number, number[]>): number[][] {
  let graph_size: number = _len(graph);
  let visited: boolean[] = [];
  for (let _ = 0; _ < graph_size; _++) {
    visited.push(false);
  }
  let components_list: number[][] = [];
  for (let i = 0; i < graph_size; i++) {
    if (!visited[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()]) {
      let component: number[] = dfs(graph, i, visited);
      components_list.push(component);
    }
  }
  return components_list;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(connected_components(test_graph_1))));
  console.log(_str(_str(connected_components(test_graph_2))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

