// Generated by Mochi v0.10.66 on 2025-08-15 10:28:49 GMT+7

function longest_distance(graph: number[][]): number {
  let n: number = _len(graph);
  let indegree: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    indegree.push(0);
    i = (i + 1);
  }
  let long_dist: number[] = [];
  let j: number = 0;
  while ((j < n)) {
    long_dist.push(1);
    j = (j + 1);
  }
  let u: number = 0;
  while ((u < n)) {
    for (const v of graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]) {
      indegree[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] = (indegree[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] + 1);
    }
    u = (u + 1);
  }
  let queue: number[] = [];
  let head: number = 0;
  let k: number = 0;
  while ((k < n)) {
    if ((indegree[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] === 0)) {
      queue.push(k);
    }
    k = (k + 1);
  }
  while ((head < _len(queue))) {
    let vertex: number = queue[(()=>{const _mochi_idx = head; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()];
    head = (head + 1);
    for (const x of graph[(()=>{const _mochi_idx = vertex; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]) {
      indegree[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] = (indegree[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] - 1);
      let new_dist: number = (long_dist[(()=>{const _mochi_idx = vertex; return _mochi_idx < 0 ? long_dist.length + _mochi_idx : _mochi_idx;})()] + 1);
      if ((new_dist > long_dist[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? long_dist.length + _mochi_idx : _mochi_idx;})()])) {
        long_dist[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? long_dist.length + _mochi_idx : _mochi_idx;})()] = new_dist;
      }
      if ((indegree[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] === 0)) {
        queue.push(x);
      }
    }
  }
  let max_len: number = long_dist[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? long_dist.length + _mochi_idx : _mochi_idx;})()];
  let m: number = 1;
  while ((m < n)) {
    if ((long_dist[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? long_dist.length + _mochi_idx : _mochi_idx;})()] > max_len)) {
      max_len = long_dist[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? long_dist.length + _mochi_idx : _mochi_idx;})()];
    }
    m = (m + 1);
  }
  return max_len;
}
let graph: number[][] = [[2, 3, 4], [2, 7], [5], [5, 7], [7], [6], [7], []];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(longest_distance(graph)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

