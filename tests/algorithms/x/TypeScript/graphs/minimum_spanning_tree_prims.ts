// Generated by Mochi v0.10.66 on 2025-08-15 10:29:05 GMT+7

export interface Edge { to: number; weight: number }
export interface Pair { u: number; v: number }
let INF: number = 1000000000;
function pairs_to_string(edges: Pair[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(edges))) {
    let e: Pair = edges[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()];
    s = (((((s + "(") + _str(e.u)) + ", ") + _str(e.v)) + ")");
    if ((i < (_len(edges) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
function prim_mst(graph: Edge[][]): Pair[] {
  let n: number = _len(graph);
  let visited: boolean[] = [];
  let dist: number[] = [];
  let parent: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    visited.push(false);
    dist.push(INF);
    parent.push(-1);
    i = (i + 1);
  }
  dist[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = 0;
  let result: Pair[] = [];
  let count: number = 0;
  while ((count < n)) {
    let min_val: number = INF;
    let u: number = 0;
    let v: number = 0;
    while ((v < n)) {
      if (((visited[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] === false) && (dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] < min_val))) {
        min_val = dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()];
        u = v;
      }
      v = (v + 1);
    }
    if ((min_val === INF)) {
      break
    }
    visited[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
    if ((u !== 0)) {
      result.push({u: parent[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()], v: u});
    }
    for (const e of graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]) {
      if (((visited[(()=>{const _mochi_idx = Math.trunc(e.to); return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] === false) && (e.weight < dist[(()=>{const _mochi_idx = Math.trunc(e.to); return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()]))) {
        dist[(()=>{const _mochi_idx = e.to; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = e.weight;
        parent[(()=>{const _mochi_idx = e.to; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = u;
      }
    }
    count = (count + 1);
  }
  return result;
}
let adjacency_list: Edge[][] = [[{to: 1, weight: 1}, {to: 3, weight: 3}], [{to: 0, weight: 1}, {to: 2, weight: 6}, {to: 3, weight: 5}, {to: 4, weight: 1}], [{to: 1, weight: 6}, {to: 4, weight: 5}, {to: 5, weight: 2}], [{to: 0, weight: 3}, {to: 1, weight: 5}, {to: 4, weight: 1}], [{to: 1, weight: 1}, {to: 2, weight: 5}, {to: 3, weight: 1}, {to: 5, weight: 4}], [{to: 2, weight: 2}, {to: 4, weight: 4}]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let mst_edges: Pair[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
mst_edges = prim_mst(adjacency_list)
  console.log(_str(pairs_to_string(mst_edges)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

