// Generated by Mochi v0.10.66 on 2025-08-15 10:28:57 GMT+7

function contains(xs: number[], v: number): boolean {
  for (const x of xs) {
    if ((x === v)) {
      return true;
    }
  }
  return false;
}
function get_edges(graph: Record<number, number[]>): number[][] {
  let n: number = _len(graph);
  let edges: number[][] = [];
  for (let i = 0; i < n; i++) {
    for (const j of graph[i]) {
      edges.push([i, j]);
    }
  }
  return edges;
}
function matching_min_vertex_cover(graph: Record<number, number[]>): number[] {
  let chosen: number[] = [];
  let edges: number[][] = get_edges(graph);
  while ((_len(edges) > 0)) {
    let idx: number = (_len(edges) - 1);
    let e: number[] = edges[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()];
    edges = edges.slice(0, idx);
    let u: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let v: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    if (!contains(chosen, u)) {
      chosen.push(u);
    }
    if (!contains(chosen, v)) {
      chosen.push(v);
    }
    let filtered: number[][] = [];
    for (const edge of edges) {
      let a: number = edge[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? edge.length + _mochi_idx : _mochi_idx;})()];
      let b: number = edge[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? edge.length + _mochi_idx : _mochi_idx;})()];
      if (((((a !== u) && (b !== u)) && (a !== v)) && (b !== v))) {
        filtered.push(edge);
      }
    }
    edges = filtered;
  }
  return chosen;
}
let graph: Record<number, number[]> = {[0]: [1, 3], [1]: [0, 3], [2]: [0, 3, 4], [3]: [0, 1, 2], [4]: [2, 3]};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let cover: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
cover = matching_min_vertex_cover(graph)
  console.log(_str(cover));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

