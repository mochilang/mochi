// Generated by Mochi v0.10.65 on 2025-08-14 10:03:51 GMT+7

function dfs(g: Record<number, number[]>, s: number) {
  let visited: Record<number, boolean> = {};
  let stack: number[] = [];
  visited[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
  stack.push(s);
  console.log(_str(s));
  while ((_len(stack) > 0)) {
    let u: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
    let found: boolean = false;
    for (const v of g[u]) {
      if (!(v in visited)) {
        visited[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
        stack.push(v);
        console.log(_str(v));
        found = true;
        break
      }
    }
    if (!found) {
      stack = stack.slice(0, (_len(stack) - 1));
    }
  }
}
function bfs(g: Record<number, number[]>, s: number) {
  let visited: Record<number, boolean> = {};
  let q: number[] = [];
  visited[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
  q.push(s);
  console.log(_str(s));
  while ((_len(q) > 0)) {
    let u: number = q[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()];
    q = q.slice(1, _len(q));
    for (const v of g[u]) {
      if (!(v in visited)) {
        visited[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
        q.push(v);
        console.log(_str(v));
      }
    }
  }
}
function sort_ints(a: number[]): number[] {
  let arr: number[] = a;
  let i: number = 0;
  while ((i < _len(arr))) {
    let j: number = 0;
    while ((j < ((_len(arr) - i) - 1))) {
      if ((arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function dijkstra(g: Record<number, number[][]>, s: number) {
  let dist: Record<number, number> = {};
  dist[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = 0;
  let path: Record<number, number> = {};
  path[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()] = 0;
  let known: number[] = [];
  let keys: number[] = [s];
  while ((_len(known) < _len(keys))) {
    let mini: number = 100000;
    let u: number = -1;
    let i: number = 0;
    while ((i < _len(keys))) {
      let k = keys[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? keys.length + _mochi_idx : _mochi_idx;})()];
      let d: number = dist[k];
      if ((!known.includes(k) && (d < mini))) {
        mini = d;
        u = k;
      }
      i = (i + 1);
    }
    known.push(u);
    for (const e of g[u]) {
      let v: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      let w: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      if (!keys.includes(v)) {
        keys.push(v);
      }
      let alt: number = (dist[u] + w);
      let cur: number = ((v in dist) ? dist[v] : 100000);
      if ((!known.includes(v) && (alt < cur))) {
        dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = alt;
        path[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()] = u;
      }
    }
  }
  let ordered = sort_ints(keys);
  let idx: number = 0;
  while ((idx < _len(ordered))) {
    let k = ordered[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? ordered.length + _mochi_idx : _mochi_idx;})()];
    if ((k !== s)) {
      console.log(_str(dist[k]));
    }
    idx = (idx + 1);
  }
}
function topo(g: Record<number, number[]>, n: number) {
  let ind: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    ind.push(0);
    i = (i + 1);
  }
  let node: number = 1;
  while ((node <= n)) {
    for (const v of g[node]) {
      ind[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? ind.length + _mochi_idx : _mochi_idx;})()] = (ind[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? ind.length + _mochi_idx : _mochi_idx;})()] + 1);
    }
    node = (node + 1);
  }
  let q: number[] = [];
  let j: number = 1;
  while ((j <= n)) {
    if ((ind[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ind.length + _mochi_idx : _mochi_idx;})()] === 0)) {
      q.push(j);
    }
    j = (j + 1);
  }
  while ((_len(q) > 0)) {
    let v: number = q[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()];
    q = q.slice(1, _len(q));
    console.log(_str(v));
    for (const w of g[v]) {
      ind[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? ind.length + _mochi_idx : _mochi_idx;})()] = (ind[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? ind.length + _mochi_idx : _mochi_idx;})()] - 1);
      if ((ind[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? ind.length + _mochi_idx : _mochi_idx;})()] === 0)) {
        q.push(w);
      }
    }
  }
}
function floyd(a: number[][]) {
  let n: number = _len(a);
  let dist: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    dist.push(row);
    i = (i + 1);
  }
  let k: number = 0;
  while ((k < n)) {
    let ii: number = 0;
    while ((ii < n)) {
      let jj: number = 0;
      while ((jj < n)) {
        if ((dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = jj; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > (dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = jj; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))) {
          dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = jj; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = jj; return _mochi_idx < 0 ? dist[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        }
        jj = (jj + 1);
      }
      ii = (ii + 1);
    }
    k = (k + 1);
  }
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(dist)));
}
function prim(g: Record<number, number[][]>, s: number, n: number): number {
  let dist: Record<number, number> = {};
  dist[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = 0;
  let known: number[] = [];
  let keys: number[] = [s];
  let total: number = 0;
  while ((_len(known) < n)) {
    let mini: number = 100000;
    let u: number = -1;
    let i: number = 0;
    while ((i < _len(keys))) {
      let k = keys[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? keys.length + _mochi_idx : _mochi_idx;})()];
      let d: number = dist[k];
      if ((!known.includes(k) && (d < mini))) {
        mini = d;
        u = k;
      }
      i = (i + 1);
    }
    known.push(u);
    total = (total + mini);
    for (const e of g[u]) {
      let v: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      let w: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      if (!keys.includes(v)) {
        keys.push(v);
      }
      let cur: number = ((v in dist) ? dist[v] : 100000);
      if ((!known.includes(v) && (w < cur))) {
        dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = w;
      }
    }
  }
  return total;
}
function sort_edges(edges: number[][]): number[][] {
  let es: number[][] = edges;
  let i: number = 0;
  while ((i < _len(es))) {
    let j: number = 0;
    while ((j < ((_len(es) - i) - 1))) {
      if ((es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number[] = es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
        es[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()] = es[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
        es[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return es;
}
function find_parent(parent: number[], x: number): number {
  let r: number = x;
  while ((parent[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] !== r)) {
    r = parent[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()];
  }
  return r;
}
function union_parent(parent: number[], a: number, b: number) {
  parent[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = b;
}
function kruskal(edges: number[][], n: number): number {
  let es: number[][] = sort_edges(edges);
  let parent: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    parent.push(i);
    i = (i + 1);
  }
  let total: number = 0;
  let count: number = 0;
  let idx: number = 0;
  while (((count < (n - 1)) && (idx < _len(es)))) {
    let e: number[] = es[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? es.length + _mochi_idx : _mochi_idx;})()];
    idx = (idx + 1);
    let u: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let v: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let w: number = e[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let ru: number = find_parent(parent, u);
    let rv: number = find_parent(parent, v);
    if ((ru !== rv)) {
      union_parent(parent, ru, rv);
      total = (total + w);
      count = (count + 1);
    }
  }
  return total;
}
function find_isolated_nodes(g: Record<number, number[]>, nodes: number[]): number[] {
  let isolated: number[] = [];
  for (const node of nodes) {
    if ((_len(g[node]) === 0)) {
      isolated.push(node);
    }
  }
  return isolated;
}
let g_dfs: Record<number, number[]> = {[1]: [2, 3], [2]: [4, 5], [3]: [], [4]: [], [5]: []};
let g_bfs: Record<number, number[]> = {[1]: [2, 3], [2]: [4, 5], [3]: [6, 7], [4]: [], [5]: [8], [6]: [], [7]: [], [8]: []};
let g_weighted: Record<number, number[][]> = {[1]: [[2, 7], [3, 9], [6, 14]], [2]: [[1, 7], [3, 10], [4, 15]], [3]: [[1, 9], [2, 10], [4, 11], [6, 2]], [4]: [[2, 15], [3, 11], [5, 6]], [5]: [[4, 6], [6, 9]], [6]: [[1, 14], [3, 2], [5, 9]]};
let g_topo: Record<number, number[]> = {[1]: [2, 3], [2]: [4], [3]: [4], [4]: []};
let matrix: number[][] = [[0, 5, 9, 100000], [100000, 0, 2, 8], [100000, 100000, 0, 7], [4, 100000, 100000, 0]];
let g_prim: Record<number, number[][]> = {[1]: [[2, 1], [3, 3]], [2]: [[1, 1], [3, 1], [4, 6]], [3]: [[1, 3], [2, 1], [4, 2]], [4]: [[2, 6], [3, 2]]};
let edges_kruskal: number[][] = [[1, 2, 1], [2, 3, 2], [1, 3, 2], [3, 4, 1]];
let g_iso: Record<number, number[]> = {[1]: [2, 3], [2]: [1, 3], [3]: [1, 2], [4]: []};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let iso: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  dfs(g_dfs, 1);
  bfs(g_bfs, 1);
  dijkstra(g_weighted, 1);
  topo(g_topo, 4);
  floyd(matrix);
  console.log(_str(prim(g_prim, 1, 4)));
  console.log(_str(kruskal(edges_kruskal, 4)));
iso = find_isolated_nodes(g_iso, [1, 2, 3, 4])
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(iso)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

