// Generated by Mochi v0.10.66 on 2025-08-15 10:28:46 GMT+7

export interface Pos { y: number; x: number }
export interface Node { pos_x: number; pos_y: number; goal_x: number; goal_y: number; g_cost: number; f_cost: number; path: Pos[] }
function abs(x: number): number {
  if ((x < 0)) {
    return (0 - x);
  }
  return x;
}
function manhattan(x1: number, y1: number, x2: number, y2: number): number {
  return (abs((x1 - x2)) + abs((y1 - y2)));
}
function clone_path(p: Pos[]): Pos[] {
  let res: Pos[] = [];
  let i: number = 0;
  while ((i < _len(p))) {
    res.push(p[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function make_node(pos_x: number, pos_y: number, goal_x: number, goal_y: number, g_cost: number, path: Pos[]): Node {
  let f: number = manhattan(pos_x, pos_y, goal_x, goal_y);
  return {pos_x, pos_y, goal_x, goal_y, g_cost, f_cost: f, path};
}
function node_equal(a: Node, b: Node): boolean {
  return ((a.pos_x === b.pos_x) && (a.pos_y === b.pos_y));
}
function contains(nodes: Node[], node: Node): boolean {
  let i: number = 0;
  while ((i < _len(nodes))) {
    if (node_equal(nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()], node)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function sort_nodes(nodes: Node[]): Node[] {
  let arr: Node[] = nodes;
  let i: number = 1;
  while ((i < _len(arr))) {
    let key_node: Node = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    let j: number = (i - 1);
    while ((j >= 0)) {
      let temp: Node = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
      if ((temp.f_cost > key_node.f_cost)) {
        arr[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = temp;
        j = (j - 1);
      } else {
        break
      }
    }
    arr[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = key_node;
    i = (i + 1);
  }
  return arr;
}
function get_successors(grid: number[][], parent: Node, target: Pos): Node[] {
  let res: Node[] = [];
  let i: number = 0;
  while ((i < _len(delta))) {
    let d: Pos = delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()];
    let pos_x: number = (parent.pos_x + d.x);
    let pos_y: number = (parent.pos_y + d.y);
    if ((((((pos_x >= 0) && (pos_x < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) && (pos_y >= 0)) && (pos_y < _len(grid))) && (grid[(()=>{const _mochi_idx = pos_y; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = pos_x; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = pos_y; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 0))) {
      let new_path: Pos[] = clone_path(parent.path);
      new_path.push({y: pos_y, x: pos_x});
      res.push(make_node(pos_x, pos_y, target.x, target.y, (parent.g_cost + 1), new_path));
    }
    i = (i + 1);
  }
  return res;
}
function greedy_best_first(grid: number[][], init: Pos, goal: Pos): Pos[] {
  let start_path: Pos[] = [init];
  let start: Node = make_node(init.x, init.y, goal.x, goal.y, 0, start_path);
  let open_nodes: Node[] = [start];
  let closed_nodes: Node[] = [];
  while ((_len(open_nodes) > 0)) {
    open_nodes = sort_nodes(open_nodes);
    let current: Node = open_nodes[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? open_nodes.length + _mochi_idx : _mochi_idx;})()];
    let new_open: Node[] = [];
    let idx: number = 1;
    while ((idx < _len(open_nodes))) {
      new_open.push(open_nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? open_nodes.length + _mochi_idx : _mochi_idx;})()]);
      idx = (idx + 1);
    }
    open_nodes = new_open;
    if (((current.pos_x === goal.x) && (current.pos_y === goal.y))) {
      return current.path;
    }
    closed_nodes.push(current);
    let successors: Node[] = get_successors(grid, current, goal);
    let i: number = 0;
    while ((i < _len(successors))) {
      let child: Node = successors[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? successors.length + _mochi_idx : _mochi_idx;})()];
      if ((!contains(closed_nodes, child) && !contains(open_nodes, child))) {
        open_nodes.push(child);
      }
      i = (i + 1);
    }
  }
  let r: Pos[] = [init];
  return r;
}
let TEST_GRIDS: number[][][] = [[[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]], [[0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0]]];
function print_grid(grid: number[][]) {
  let i: number = 0;
  while ((i < _len(grid))) {
    console.log(_str(grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
}
function main() {
  let idx: number = 0;
  while ((idx < _len(TEST_GRIDS))) {
    console.log(_str((("==grid-" + _str((idx + 1))) + "==")));
    let grid: number[][] = TEST_GRIDS[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? TEST_GRIDS.length + _mochi_idx : _mochi_idx;})()];
    let init: Pos = {y: 0, x: 0};
    let goal: Pos = {y: (_len(grid) - 1), x: (_len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]) - 1)};
    print_grid(grid);
    console.log(_str("------"));
    let path: Pos[] = greedy_best_first(grid, init, goal);
    let j: number = 0;
    while ((j < _len(path))) {
      let p: Pos = path[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()];
      grid[(()=>{const _mochi_idx = p.y; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p.x; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = p.y; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 2;
      j = (j + 1);
    }
    print_grid(grid);
    idx = (idx + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let delta: Pos[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
delta = [{y: -1, x: 0}, {y: 0, x: -1}, {y: 1, x: 0}, {y: 0, x: 1}]
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

