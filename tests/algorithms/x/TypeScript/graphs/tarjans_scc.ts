// Generated by Mochi v0.10.66 on 2025-08-15 10:29:18 GMT+7

function tarjan(g: number[][]): number[][] {
  let n: number = _len(g);
  let stack: number[] = [];
  let on_stack: boolean[] = [];
  let index_of: number[] = [];
  let lowlink_of: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    on_stack.push(false);
    index_of.push((0 - 1));
    lowlink_of.push((0 - 1));
    i = (i + 1);
  }
  let components: number[][] = [];
  function strong_connect(v: number, index: number): number {
    index_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? index_of.length + _mochi_idx : _mochi_idx;})()] = index;
    lowlink_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()] = index;
    let current_index: number = (index + 1);
    stack.push(v);
    on_stack[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? on_stack.length + _mochi_idx : _mochi_idx;})()] = true;
    for (const w of g[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? g.length + _mochi_idx : _mochi_idx;})()]) {
      if ((index_of[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? index_of.length + _mochi_idx : _mochi_idx;})()] === (0 - 1))) {
        current_index = strong_connect(w, current_index);
        if ((lowlink_of[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()] < lowlink_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()])) {
          lowlink_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()] = lowlink_of[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()];
        }
      } else {
        if (on_stack[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? on_stack.length + _mochi_idx : _mochi_idx;})()]) {
          if ((lowlink_of[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()] < lowlink_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()])) {
            lowlink_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()] = lowlink_of[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()];
          }
        }
      }
    }
    if ((lowlink_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? lowlink_of.length + _mochi_idx : _mochi_idx;})()] === index_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? index_of.length + _mochi_idx : _mochi_idx;})()])) {
      let component: number[] = [];
      let w: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
      stack = stack.slice(0, (_len(stack) - 1));
      on_stack[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? on_stack.length + _mochi_idx : _mochi_idx;})()] = false;
      component.push(w);
      while ((w !== v)) {
        w = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
        stack = stack.slice(0, (_len(stack) - 1));
        on_stack[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? on_stack.length + _mochi_idx : _mochi_idx;})()] = false;
        component.push(w);
      }
      components.push(component);
    }
    return current_index;
  }
  let v: number = 0;
  while ((v < n)) {
    if ((index_of[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? index_of.length + _mochi_idx : _mochi_idx;})()] === (0 - 1))) {
      strong_connect(v, 0);
    }
    v = (v + 1);
  }
  return components;
}
function create_graph(n: number, edges: number[][]): number[][] {
  let g: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    g.push([]);
    i = (i + 1);
  }
  for (const e of edges) {
    let u: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let v: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    g[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? g.length + _mochi_idx : _mochi_idx;})()].push(v);
  }
  return g;
}
function main() {
  let n_vertices: number = 7;
  let source: number[] = [0, 0, 1, 2, 3, 3, 4, 4, 6];
  let target: number[] = [1, 3, 2, 0, 1, 4, 5, 6, 5];
  let edges: number[][] = [];
  let i: number = 0;
  while ((i < _len(source))) {
    edges.push([source[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? source.length + _mochi_idx : _mochi_idx;})()], target[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? target.length + _mochi_idx : _mochi_idx;})()]]);
    i = (i + 1);
  }
  let g: number[][] = create_graph(n_vertices, edges);
  console.log(_str(tarjan(g)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

