// Generated by Mochi v0.10.59 on 2025-08-07 00:01:56 GMT+7

export interface Point { x: number; y: number }
export interface Result { distance: number; path: Point[] }
function key(p: Point): string {
  return ((_str(p.x) + ",") + _str(p.y));
}
function path_to_string(path: Point[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(path))) {
    let pt: Point = path[(i) < 0 ? path.length + (i) : i];
    s = (((((s + "(") + _str(pt.x)) + ", ") + _str(pt.y)) + ")");
    if ((i < (_len(path) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function dijkstra(grid: number[][], source: Point, destination: Point, allow_diagonal: boolean): Result {
  let rows: number = _len(grid);
  let cols: number = _len(grid[(Math.trunc(0)) < 0 ? grid.length + (Math.trunc(0)) : Math.trunc(0)]);
  let dx: number[] = [-1, 1, 0, 0];
  let dy: number[] = [0, 0, -1, 1];
  if (allow_diagonal) {
    dx = concat(dx, [-1, -1, 1, 1]);
    dy = concat(dy, [-1, 1, -1, 1]);
  }
  let INF: number = 1000000000000.0;
  let queue: Point[] = [source];
  let front: number = 0;
  let dist_map: Record<string, number> = {[key(source)]: 0.0};
  let prev: Record<string, Point> = {};
  while ((front < _len(queue))) {
    let current: Point = queue[(front) < 0 ? queue.length + (front) : front];
    front = (front + 1);
    let cur_key: string = key(current);
    if (((current.x == destination.x) && (current.y == destination.y))) {
      break
    }
    let i: number = 0;
    while ((i < _len(dx))) {
      let nx: number = (current.x + dx[(i) < 0 ? dx.length + (i) : i]);
      let ny: number = (current.y + dy[(i) < 0 ? dy.length + (i) : i]);
      if (((((nx >= 0) && (nx < rows)) && (ny >= 0)) && (ny < cols))) {
        if ((grid[(nx) < 0 ? grid.length + (nx) : nx][(ny) < 0 ? grid[(nx) < 0 ? grid.length + (nx) : nx].length + (ny) : ny] == 1)) {
          let n_key: string = ((_str(nx) + ",") + _str(ny));
          if (!(n_key in dist_map)) {
            dist_map[(n_key) < 0 ? dist_map.length + (n_key) : n_key] = (dist_map[(cur_key) < 0 ? dist_map.length + (cur_key) : cur_key] + 1.0);
            prev[(n_key) < 0 ? prev.length + (n_key) : n_key] = current;
            queue.push({"x": nx, "y": ny});
          }
        }
      }
      i = (i + 1);
    }
  }
  let dest_key: string = key(destination);
  if ((dest_key in dist_map)) {
    let path_rev: Point[] = [destination];
    let step_key: string = dest_key;
    let step_pt: Point = destination;
    while ((step_key != key(source))) {
      step_pt = prev[(step_key) < 0 ? prev.length + (step_key) : step_key];
      step_key = key(step_pt);
      path_rev.push(step_pt);
    }
    let path: Point[] = [];
    let k: number = (_len(path_rev) - 1);
    while ((k >= 0)) {
      path.push(path_rev[(k) < 0 ? path_rev.length + (k) : k]);
      k = (k - 1);
    }
    return {"distance": dist_map[(dest_key) < 0 ? dist_map.length + (dest_key) : dest_key], path};
  }
  return {"distance": INF, "path": []};
}
function print_result(res: Result) {
  console.log(_str(((_str(res.distance) + ", ") + path_to_string(res.path))));
}
let grid1: number[][] = [[1, 1, 1], [0, 1, 0], [0, 1, 1]];
let grid2: number[][] = [[1, 1, 1], [0, 0, 1], [0, 1, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_result(dijkstra(grid1, {"x": 0, "y": 0}, {"x": 2, "y": 2}, false));
  print_result(dijkstra(grid1, {"x": 0, "y": 0}, {"x": 2, "y": 2}, true));
  print_result(dijkstra(grid2, {"x": 0, "y": 0}, {"x": 2, "y": 2}, false));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

