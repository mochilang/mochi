// Generated by Mochi v0.10.59 on 2025-08-07 00:02:41 GMT+7

export interface Node { name: string; inbound: string[]; outbound: string[] }
function node_to_string(n: Node): string {
  return (((((("<node=" + n.name) + " inbound=") + n.inbound) + " outbound=") + n.outbound) + ">");
}
function page_rank(nodes: Node[], limit: number, d: number): Record<string, number> {
  let ranks: Record<string, number> = {};
  for (const n of nodes) {
    ranks[(n.name) < 0 ? ranks.length + (n.name) : n.name] = 1.0;
  }
  let outbounds: Record<string, number> = {};
  for (const n of nodes) {
    outbounds[(n.name) < 0 ? outbounds.length + (n.name) : n.name] = (1.0 * _len(n.outbound));
  }
  let i: number = 0;
  while ((i < limit)) {
    console.log(_str((("======= Iteration " + _str((i + 1))) + " =======")));
    for (const n of nodes) {
      let sum_val: number = 0.0;
      for (const ib of n.inbound) {
        sum_val = (sum_val + (ranks[(ib) < 0 ? ranks.length + (ib) : ib] / outbounds[(ib) < 0 ? outbounds.length + (ib) : ib]));
      }
      ranks[(n.name) < 0 ? ranks.length + (n.name) : n.name] = ((1.0 - d) + (d * sum_val));
    }
    console.log(_str(ranks));
    i = (i + 1);
  }
  return ranks;
}
let names: string[] = ["A", "B", "C"];
let graph: number[][] = [[0, 1, 1], [0, 0, 1], [1, 0, 0]];
let nodes: Node[] = [];
let ri: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (const name of names) {
    nodes.push({name, "inbound": [], "outbound": []});
  }
  while ((ri < _len(graph))) {
    let row: number[] = graph[(ri) < 0 ? graph.length + (ri) : ri];
    let ci: number = 0;
    while ((ci < _len(row))) {
      if ((row[(ci) < 0 ? row.length + (ci) : ci] == 1)) {
        let n_in: Node = nodes[(ci) < 0 ? nodes.length + (ci) : ci];
        n_in.inbound = [...n_in.inbound, names[(ri) < 0 ? names.length + (ri) : ri]];
        nodes[(ci) < 0 ? nodes.length + (ci) : ci] = n_in;
        let n_out: Node = nodes[(ri) < 0 ? nodes.length + (ri) : ri];
        n_out.outbound = [...n_out.outbound, names[(ci) < 0 ? names.length + (ci) : ci]];
        nodes[(ri) < 0 ? nodes.length + (ri) : ri] = n_out;
      }
      ci = (ci + 1);
    }
    ri = (ri + 1);
  }
  console.log(_str("======= Nodes ======="));
  for (const n of nodes) {
    console.log(_str(n));
  }
  page_rank(nodes, 3, 0.85);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

