// Generated by Mochi v0.10.61 on 2025-08-08 17:35:03 GMT+7

export interface G { A: { B: number; C: number }; B: { A: number; D: number; E: number; F: number }; C: { A: number; F: number }; D: { B: number }; E: { B: number; F: number }; F: { C: number; E: number } }
export interface G2 { B: { C: number }; C: { D: number }; D: { F: number }; E: { B: number; F: number }; F: Record<any, any> }
export interface G3 { B: { C: number }; C: { D: number }; D: { F: number }; E: { B: number; G: number }; F: Record<any, any>; G: { F: number } }
export interface NodeCost { node: string; cost: number }
let G: G = {"A": {"B": 2, "C": 5}, "B": {"A": 2, "D": 3, "E": 1, "F": 1}, "C": {"A": 5, "F": 3}, "D": {"B": 3}, "E": {"B": 4, "F": 3}, "F": {"C": 3, "E": 3}};
let heap: NodeCost[] = [{"node": "E", "cost": 0}];
let visited: Record<string, boolean> = {};
let G2: G2 = {"B": {"C": 1}, "C": {"D": 1}, "D": {"F": 1}, "E": {"B": 1, "F": 3}, "F": {}};
let heap2: NodeCost[] = [{"node": "E", "cost": 0}];
let visited2: Record<string, boolean> = {};
let G3: G3 = {"B": {"C": 1}, "C": {"D": 1}, "D": {"F": 1}, "E": {"B": 1, "G": 2}, "F": {}, "G": {"F": 1}};
let heap3: NodeCost[] = [{"node": "E", "cost": 0}];
let visited3: Record<string, boolean> = {};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number
let result2: number
let result3: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = -1
  while ((_len(heap) > 0)) {
    let best_idx: number = 0;
    let i: number = 1;
    while ((i < _len(heap))) {
      if ((heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].cost < heap[(()=>{const _mochi_idx = best_idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].cost)) {
        best_idx = i;
      }
      i = (i + 1);
    }
    let best: NodeCost = heap[(()=>{const _mochi_idx = best_idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
    let new_heap: NodeCost[] = [];
    let j: number = 0;
    while ((j < _len(heap))) {
      if ((j != best_idx)) {
        new_heap.push(heap[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()]);
      }
      j = (j + 1);
    }
    heap = new_heap;
    let u: string = best.node;
    let cost: number = best.cost;
    if ((u in visited)) {
      continue
    }
    visited[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
    if ((u == "C")) {
      result = cost;
      break
    }
    for (const v in G[u]) {
      if ((v in visited)) {
        continue
      }
      let next_cost = (cost + G[u][v]);
      heap.push({"node": v, "cost": next_cost});
    }
  }
  console.log(_str(result));
result2 = -1
  while ((_len(heap2) > 0)) {
    let best2_idx: number = 0;
    let i2: number = 1;
    while ((i2 < _len(heap2))) {
      if ((heap2[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? heap2.length + _mochi_idx : _mochi_idx;})()].cost < heap2[(()=>{const _mochi_idx = best2_idx; return _mochi_idx < 0 ? heap2.length + _mochi_idx : _mochi_idx;})()].cost)) {
        best2_idx = i2;
      }
      i2 = (i2 + 1);
    }
    let best2: NodeCost = heap2[(()=>{const _mochi_idx = best2_idx; return _mochi_idx < 0 ? heap2.length + _mochi_idx : _mochi_idx;})()];
    let new_heap2: NodeCost[] = [];
    let j2: number = 0;
    while ((j2 < _len(heap2))) {
      if ((j2 != best2_idx)) {
        new_heap2.push(heap2[(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? heap2.length + _mochi_idx : _mochi_idx;})()]);
      }
      j2 = (j2 + 1);
    }
    heap2 = new_heap2;
    let u2: string = best2.node;
    let cost2: number = best2.cost;
    if ((u2 in visited2)) {
      continue
    }
    visited2[(()=>{const _mochi_idx = u2; return _mochi_idx < 0 ? visited2.length + _mochi_idx : _mochi_idx;})()] = true;
    if ((u2 == "F")) {
      result2 = cost2;
      break
    }
    for (const v2 in G2[u2]) {
      if ((v2 in visited2)) {
        continue
      }
      let next_cost2 = (cost2 + G2[u2][v2]);
      heap2.push({"node": v2, "cost": next_cost2});
    }
  }
  console.log(_str(result2));
result3 = -1
  while ((_len(heap3) > 0)) {
    let best3_idx: number = 0;
    let i3: number = 1;
    while ((i3 < _len(heap3))) {
      if ((heap3[(()=>{const _mochi_idx = i3; return _mochi_idx < 0 ? heap3.length + _mochi_idx : _mochi_idx;})()].cost < heap3[(()=>{const _mochi_idx = best3_idx; return _mochi_idx < 0 ? heap3.length + _mochi_idx : _mochi_idx;})()].cost)) {
        best3_idx = i3;
      }
      i3 = (i3 + 1);
    }
    let best3: NodeCost = heap3[(()=>{const _mochi_idx = best3_idx; return _mochi_idx < 0 ? heap3.length + _mochi_idx : _mochi_idx;})()];
    let new_heap3: NodeCost[] = [];
    let j3: number = 0;
    while ((j3 < _len(heap3))) {
      if ((j3 != best3_idx)) {
        new_heap3.push(heap3[(()=>{const _mochi_idx = j3; return _mochi_idx < 0 ? heap3.length + _mochi_idx : _mochi_idx;})()]);
      }
      j3 = (j3 + 1);
    }
    heap3 = new_heap3;
    let u3: string = best3.node;
    let cost3: number = best3.cost;
    if ((u3 in visited3)) {
      continue
    }
    visited3[(()=>{const _mochi_idx = u3; return _mochi_idx < 0 ? visited3.length + _mochi_idx : _mochi_idx;})()] = true;
    if ((u3 == "F")) {
      result3 = cost3;
      break
    }
    for (const v3 in G3[u3]) {
      if ((v3 in visited3)) {
        continue
      }
      let next_cost3 = (cost3 + G3[u3][v3]);
      heap3.push({"node": v3, "cost": next_cost3});
    }
  }
  console.log(_str(result3));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

