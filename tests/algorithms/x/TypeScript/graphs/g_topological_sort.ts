// Generated by Mochi v0.10.59 on 2025-08-07 00:02:08 GMT+7

function depth_first_search(u: number, visited: boolean[], graph: number[][], stack: number[]): number[] {
  visited[(u) < 0 ? visited.length + (u) : u] = true;
  let i: number = 0;
  while ((i < _len(graph[(u) < 0 ? graph.length + (u) : u]))) {
    let v: number = graph[(u) < 0 ? graph.length + (u) : u][(i) < 0 ? graph[(u) < 0 ? graph.length + (u) : u].length + (i) : i];
    if (!visited[(v) < 0 ? visited.length + (v) : v]) {
      stack = depth_first_search(v, visited, graph, stack);
    }
    i = (i + 1);
  }
  stack.push(u);
  return stack;
}
function topological_sort(graph: number[][]): number[] {
  let visited: boolean[] = [];
  let i: number = 0;
  while ((i < _len(graph))) {
    visited.push(false);
    i = (i + 1);
  }
  let stack: number[] = [];
  i = 0;
  while ((i < _len(graph))) {
    if (!visited[(i) < 0 ? visited.length + (i) : i]) {
      stack = depth_first_search(i, visited, graph, stack);
    }
    i = (i + 1);
  }
  return stack;
}
function print_stack(stack: number[], clothes: Record<number, string>) {
  let order: number = 1;
  let s: number[] = stack;
  while ((_len(s) > 0)) {
    let idx: number = s[(Math.trunc((_len(s) - 1))) < 0 ? s.length + (Math.trunc((_len(s) - 1))) : Math.trunc((_len(s) - 1))];
    s = s.slice(0, (_len(s) - 1));
    console.log(_str(((_str(order) + " ") + clothes[(idx) < 0 ? clothes.length + (idx) : idx])));
    order = (order + 1);
  }
}
function format_list(xs: number[]): string {
  let res: string = "[";
  let i: number = 0;
  while ((i < _len(xs))) {
    res = (res + _str(xs[(i) < 0 ? xs.length + (i) : i]));
    if ((i < (_len(xs) - 1))) {
      res = (res + ", ");
    }
    i = (i + 1);
  }
  res = (res + "]");
  return res;
}
function main() {
  let clothes: Record<number, string> = {[0]: "underwear", [1]: "pants", [2]: "belt", [3]: "suit", [4]: "shoe", [5]: "socks", [6]: "shirt", [7]: "tie", [8]: "watch"};
  let graph: number[][] = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []];
  let stack: number[] = topological_sort(graph);
  console.log(_str(format_list(stack)));
  print_stack(stack, clothes);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

