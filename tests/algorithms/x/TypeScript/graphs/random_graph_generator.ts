// Generated by Mochi v0.10.59 on 2025-08-07 00:02:44 GMT+7

let seed: number = 1;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function random(): number {
  return ((1.0 * rand()) / 2147483648.0);
}
function complete_graph(vertices_number: number): Record<number, number[]> {
  let graph: Record<number, number[]> = {};
  let i: number = 0;
  while ((i < vertices_number)) {
    let neighbors: number[] = [];
    let j: number = 0;
    while ((j < vertices_number)) {
      if ((j != i)) {
        neighbors.push(j);
      }
      j = (j + 1);
    }
    graph[(i) < 0 ? graph.length + (i) : i] = neighbors;
    i = (i + 1);
  }
  return graph;
}
function random_graph(vertices_number: number, probability: number, directed: boolean): Record<number, number[]> {
  let graph: Record<number, number[]> = {};
  let i: number = 0;
  while ((i < vertices_number)) {
    graph[(i) < 0 ? graph.length + (i) : i] = [];
    i = (i + 1);
  }
  if ((probability >= 1.0)) {
    return complete_graph(vertices_number);
  }
  if ((probability <= 0.0)) {
    return graph;
  }
  i = 0;
  while ((i < vertices_number)) {
    let j: number = (i + 1);
    while ((j < vertices_number)) {
      if ((random() < probability)) {
        graph[(i) < 0 ? graph.length + (i) : i] = [...graph[(i) < 0 ? graph.length + (i) : i], j];
        if (!directed) {
          graph[(j) < 0 ? graph.length + (j) : j] = [...graph[(j) < 0 ? graph.length + (j) : j], i];
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return graph;
}
function main() {
  seed = 1;
  let g1: Record<number, number[]> = random_graph(4, 0.5, false);
  console.log(_str(g1));
  seed = 1;
  let g2: Record<number, number[]> = random_graph(4, 0.5, true);
  console.log(_str(g2));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

