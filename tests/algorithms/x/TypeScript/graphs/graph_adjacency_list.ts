// Generated by Mochi v0.10.66 on 2025-08-15 10:28:39 GMT+7

export interface Graph { adj: Record<string, string[]>; directed: boolean }
function create_graph(vertices: string[], edges: string[][], directed: boolean): Graph {
  let adj: Record<string, string[]> = {};
  for (const v of vertices) {
    adj[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [];
  }
  for (const e of edges) {
    let s: string = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    let d: string = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
    if (!(s in adj)) {
      adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [];
    }
    if (!(d in adj)) {
      adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [];
    }
    adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[s], d];
    if (!directed) {
      adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [...adj[d], s];
    }
  }
  return {adj, directed};
}
function add_vertex(graph: Graph, v: string): Graph {
  if ((v in graph.adj)) {
    _panic("vertex exists");
  }
  let adj: Record<string, string[]> = {};
  for (const k in graph.adj) {
    adj[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = graph.adj[k];
  }
  adj[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = [];
  return {adj, directed: graph.directed};
}
function remove_from_list(lst: string[], value: string): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(lst))) {
    if ((lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()] !== value)) {
      res.push(lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function remove_key(m: Record<string, string[]>, key: string): Record<string, string[]> {
  let res: Record<string, string[]> = {};
  for (const k in m) {
    if ((k !== key)) {
      res[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] = m[k];
    }
  }
  return res;
}
function add_edge(graph: Graph, s: string, d: string): Graph {
  if ((!(s in graph.adj) || !(d in graph.adj))) {
    _panic("vertex missing");
  }
  if (contains_edge(graph, s, d)) {
    _panic("edge exists");
  }
  let adj: Record<string, string[]> = {};
  for (const k in graph.adj) {
    adj[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = graph.adj[k];
  }
  let list_s: string[] = adj[s];
  list_s.push(d);
  adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = list_s;
  if (!graph.directed) {
    let list_d: string[] = adj[d];
    list_d.push(s);
    adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = list_d;
  }
  return {adj, directed: graph.directed};
}
function remove_edge(graph: Graph, s: string, d: string): Graph {
  if ((!(s in graph.adj) || !(d in graph.adj))) {
    _panic("vertex missing");
  }
  if (!contains_edge(graph, s, d)) {
    _panic("edge missing");
  }
  let adj: Record<string, string[]> = {};
  for (const k in graph.adj) {
    adj[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = graph.adj[k];
  }
  adj[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = remove_from_list(adj[s], d);
  if (!graph.directed) {
    adj[(()=>{const _mochi_idx = d; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = remove_from_list(adj[d], s);
  }
  return {adj, directed: graph.directed};
}
function remove_vertex(graph: Graph, v: string): Graph {
  if (!(v in graph.adj)) {
    _panic("vertex missing");
  }
  let adj: Record<string, string[]> = {};
  for (const k in graph.adj) {
    if ((k !== v)) {
      adj[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()] = remove_from_list(graph.adj[k], v);
    }
  }
  return {adj, directed: graph.directed};
}
function contains_vertex(graph: Graph, v: string): boolean {
  return (v in graph.adj);
}
function contains_edge(graph: Graph, s: string, d: string): boolean {
  if ((!(s in graph.adj) || !(d in graph.adj))) {
    _panic("vertex missing");
  }
  for (const x of graph.adj[s]) {
    if ((x === d)) {
      return true;
    }
  }
  return false;
}
function clear_graph(graph: Graph): Graph {
  return {adj: {}, directed: graph.directed};
}
function to_string(graph: Graph): string {
  return _str(graph.adj);
}
function main() {
  let vertices: string[] = ["1", "2", "3", "4"];
  let edges: string[][] = [["1", "2"], ["2", "3"], ["3", "4"]];
  let g: Graph = create_graph(vertices, edges, false);
  console.log(_str(to_string(g)));
  g = add_vertex(g, "5");
  g = add_edge(g, "4", "5");
  console.log(_str(contains_edge(g, "4", "5")));
  g = remove_edge(g, "1", "2");
  g = remove_vertex(g, "3");
  console.log(_str(to_string(g)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

