// Generated by Mochi v0.10.59 on 2025-08-07 00:01:57 GMT+7

let INF: number = 1000000000;
export interface Dinic { n: number; lvl: number[]; ptr: number[]; q: number[]; adj: number[][][] }
function pow2(k: number): number {
  let res: number = 1;
  let i: number = 0;
  while ((i < k)) {
    res = (res * 2);
    i = (i + 1);
  }
  return res;
}
function min2(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function new_dinic(n: number): Dinic {
  let lvl: number[] = [];
  let ptr: number[] = [];
  let q: number[] = [];
  let adj: number[][][] = [];
  let i: number = 0;
  while ((i < n)) {
    lvl.push(0);
    ptr.push(0);
    q.push(0);
    let edges: number[][] = [];
    adj.push(edges);
    i = (i + 1);
  }
  return {n, lvl, ptr, q, adj};
}
function add_edge(g: Dinic, a: number, b: number, c: number, rcap: number) {
  let adj: number[][][] = g.adj;
  let list_a: number[][] = adj[(a) < 0 ? adj.length + (a) : a];
  let list_b: number[][] = adj[(b) < 0 ? adj.length + (b) : b];
  let e1: number[] = [b, _len(list_b), c, 0];
  let e2: number[] = [a, _len(list_a), rcap, 0];
  list_a.push(e1);
  list_b.push(e2);
  adj[(a) < 0 ? adj.length + (a) : a] = list_a;
  adj[(b) < 0 ? adj.length + (b) : b] = list_b;
  g.adj = adj;
}
function dfs(g: Dinic, v: number, sink: number, flow: number): number {
  if (((v == sink) || (flow == 0))) {
    return flow;
  }
  let ptr: number[] = g.ptr;
  let i: number = ptr[(v) < 0 ? ptr.length + (v) : v];
  let adj_all: number[][][] = g.adj;
  let adj_v: number[][] = adj_all[(v) < 0 ? adj_all.length + (v) : v];
  while ((i < _len(adj_v))) {
    let e: number[] = adj_v[(i) < 0 ? adj_v.length + (i) : i];
    let to: number = e[(Math.trunc(0)) < 0 ? e.length + (Math.trunc(0)) : Math.trunc(0)];
    if ((g.lvl[(to) < 0 ? g.lvl.length + (to) : to] == (g.lvl[(v) < 0 ? g.lvl.length + (v) : v] + 1))) {
      let avail: number = (e[(Math.trunc(2)) < 0 ? e.length + (Math.trunc(2)) : Math.trunc(2)] - e[(Math.trunc(3)) < 0 ? e.length + (Math.trunc(3)) : Math.trunc(3)]);
      let pushed: number = dfs(g, to, sink, min2(flow, avail));
      if ((pushed > 0)) {
        e[(3) < 0 ? e.length + (3) : 3] = (e[(Math.trunc(3)) < 0 ? e.length + (Math.trunc(3)) : Math.trunc(3)] + pushed);
        adj_v[(i) < 0 ? adj_v.length + (i) : i] = e;
        let adj_to: number[][] = adj_all[(to) < 0 ? adj_all.length + (to) : to];
        let back: number[] = adj_to[(Math.trunc(e[(Math.trunc(1)) < 0 ? e.length + (Math.trunc(1)) : Math.trunc(1)])) < 0 ? adj_to.length + (Math.trunc(e[(Math.trunc(1)) < 0 ? e.length + (Math.trunc(1)) : Math.trunc(1)])) : Math.trunc(e[(Math.trunc(1)) < 0 ? e.length + (Math.trunc(1)) : Math.trunc(1)])];
        back[(3) < 0 ? back.length + (3) : 3] = (back[(Math.trunc(3)) < 0 ? back.length + (Math.trunc(3)) : Math.trunc(3)] - pushed);
        adj_to[(e[(Math.trunc(1)) < 0 ? e.length + (Math.trunc(1)) : Math.trunc(1)]) < 0 ? adj_to.length + (e[(Math.trunc(1)) < 0 ? e.length + (Math.trunc(1)) : Math.trunc(1)]) : e[(Math.trunc(1)) < 0 ? e.length + (Math.trunc(1)) : Math.trunc(1)]] = back;
        adj_all[(to) < 0 ? adj_all.length + (to) : to] = adj_to;
        adj_all[(v) < 0 ? adj_all.length + (v) : v] = adj_v;
        g.adj = adj_all;
        return pushed;
      }
    }
    i = (i + 1);
    ptr[(v) < 0 ? ptr.length + (v) : v] = i;
  }
  g.ptr = ptr;
  adj_all[(v) < 0 ? adj_all.length + (v) : v] = adj_v;
  g.adj = adj_all;
  return 0;
}
function max_flow(g: Dinic, source: number, sink: number): number {
  let flow: number = 0;
  let l: number = 0;
  while ((l < 31)) {
    let threshold: number = pow2((30 - l));
    while (true) {
      let lvl: number[] = [];
      let ptr: number[] = [];
      let i: number = 0;
      while ((i < g.n)) {
        lvl.push(0);
        ptr.push(0);
        i = (i + 1);
      }
      g.lvl = lvl;
      g.ptr = ptr;
      let qi: number = 0;
      let qe: number = 1;
      lvl[(source) < 0 ? lvl.length + (source) : source] = 1;
      g.lvl = lvl;
      let q: number[] = g.q;
      q[(0) < 0 ? q.length + (0) : 0] = source;
      while (((qi < qe) && (g.lvl[(sink) < 0 ? g.lvl.length + (sink) : sink] == 0))) {
        let v: number = q[(qi) < 0 ? q.length + (qi) : qi];
        qi = (qi + 1);
        let edges: number[][] = g.adj[(v) < 0 ? g.adj.length + (v) : v];
        let j: number = 0;
        while ((j < _len(edges))) {
          let e: number[] = edges[(j) < 0 ? edges.length + (j) : j];
          let to: number = e[(Math.trunc(0)) < 0 ? e.length + (Math.trunc(0)) : Math.trunc(0)];
          let residual: number = (e[(Math.trunc(2)) < 0 ? e.length + (Math.trunc(2)) : Math.trunc(2)] - e[(Math.trunc(3)) < 0 ? e.length + (Math.trunc(3)) : Math.trunc(3)]);
          let lvl_inner: number[] = g.lvl;
          if (((lvl_inner[(to) < 0 ? lvl_inner.length + (to) : to] == 0) && (residual >= threshold))) {
            q[(qe) < 0 ? q.length + (qe) : qe] = to;
            qe = (qe + 1);
            lvl_inner[(to) < 0 ? lvl_inner.length + (to) : to] = (lvl_inner[(v) < 0 ? lvl_inner.length + (v) : v] + 1);
            g.lvl = lvl_inner;
          }
          j = (j + 1);
        }
      }
      let p: number = dfs(g, source, sink, INF);
      while ((p > 0)) {
        flow = (flow + p);
        p = dfs(g, source, sink, INF);
      }
      if ((g.lvl[(sink) < 0 ? g.lvl.length + (sink) : sink] == 0)) {
        break
      }
    }
    l = (l + 1);
  }
  return flow;
}
let source: number = 0;
let sink: number = 9;
let v: number = 1;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let graph: Dinic
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
graph = new_dinic(10)
  while ((v < 5)) {
    add_edge(graph, source, v, 1, 0);
    v = (v + 1);
  }
  v = 5;
  while ((v < 9)) {
    add_edge(graph, v, sink, 1, 0);
    v = (v + 1);
  }
  v = 1;
  while ((v < 5)) {
    add_edge(graph, v, (v + 4), 1, 0);
    v = (v + 1);
  }
  console.log(_str(_str(max_flow(graph, source, sink))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

