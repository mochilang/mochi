// Generated by Mochi v0.10.66 on 2025-08-15 10:28:30 GMT+7

export interface CheckResult { status: number; odd_node: number }
function make_matrix(n: number): boolean[][] {
  let matrix: boolean[][] = [];
  let i: number = 0;
  while ((i <= n)) {
    let row: boolean[] = [];
    let j: number = 0;
    while ((j <= n)) {
      row.push(false);
      j = (j + 1);
    }
    matrix.push(row);
    i = (i + 1);
  }
  return matrix;
}
function dfs(u: number, graph: Record<number, number[]>, visited_edge: boolean[][], path: number[]): number[] {
  path.push(u);
  if ((u in graph)) {
    let neighbors: number[] = graph[u];
    let i: number = 0;
    while ((i < _len(neighbors))) {
      let v: number = neighbors[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? neighbors.length + _mochi_idx : _mochi_idx;})()];
      if ((visited_edge[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited_edge.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited_edge[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited_edge.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === false)) {
        visited_edge[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited_edge.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited_edge[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited_edge.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
        visited_edge[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited_edge.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visited_edge[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? visited_edge.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
        path = dfs(v, graph, visited_edge, path);
      }
      i = (i + 1);
    }
  }
  return path;
}
function check_circuit_or_path(graph: Record<number, number[]>, max_node: number): CheckResult {
  let odd_degree_nodes: number = 0;
  let odd_node: number = -1;
  let i: number = 0;
  while ((i < max_node)) {
    if ((i in graph)) {
      if (((_len(graph[i]) % 2) === 1)) {
        odd_degree_nodes = (odd_degree_nodes + 1);
        odd_node = i;
      }
    }
    i = (i + 1);
  }
  if ((odd_degree_nodes === 0)) {
    return {status: 1, odd_node};
  }
  if ((odd_degree_nodes === 2)) {
    return {status: 2, odd_node};
  }
  return {status: 3, odd_node};
}
function check_euler(graph: Record<number, number[]>, max_node: number) {
  let visited_edge: boolean[][] = make_matrix(max_node);
  let res: CheckResult = check_circuit_or_path(graph, max_node);
  if ((res.status === 3)) {
    console.log(_str("graph is not Eulerian"));
    console.log(_str("no path"));
    return;
  }
  let start_node: number = 1;
  if ((res.status === 2)) {
    start_node = res.odd_node;
    console.log(_str("graph has a Euler path"));
  }
  if ((res.status === 1)) {
    console.log(_str("graph has a Euler cycle"));
  }
  let path: number[] = dfs(start_node, graph, visited_edge, []);
  console.log(_str(path));
}
let g1: Record<number, number[]> = {[1]: [2, 3, 4], [2]: [1, 3], [3]: [1, 2], [4]: [1, 5], [5]: [4]};
let g2: Record<number, number[]> = {[1]: [2, 3, 4, 5], [2]: [1, 3], [3]: [1, 2], [4]: [1, 5], [5]: [1, 4]};
let g3: Record<number, number[]> = {[1]: [2, 3, 4], [2]: [1, 3, 4], [3]: [1, 2], [4]: [1, 2, 5], [5]: [4]};
let g4: Record<number, number[]> = {[1]: [2, 3], [2]: [1, 3], [3]: [1, 2]};
let g5: Record<number, number[]> = {[1]: [], [2]: []};
let max_node: number = 10;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  check_euler(g1, max_node);
  check_euler(g2, max_node);
  check_euler(g3, max_node);
  check_euler(g4, max_node);
  check_euler(g5, max_node);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

