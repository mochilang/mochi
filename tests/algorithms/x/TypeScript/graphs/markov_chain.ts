// Generated by Mochi v0.10.66 on 2025-08-15 10:28:56 GMT+7

export interface Transition { src: string; dst: string; prob: number }
let seed: number = 1;
function rand(): number {
  seed = Number((((BigInt(seed) * 1103515245n) + 12345n) % 2147483648n));
  return seed;
}
function random(): number {
  return ((1.0 * rand()) / 2147483648.0);
}
function get_nodes(trans: Transition[]): string[] {
  let seen: Record<string, boolean> = {};
  for (const t of trans) {
    seen[(()=>{const _mochi_idx = t.src; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
    seen[(()=>{const _mochi_idx = t.dst; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
  }
  let nodes: string[] = [];
  for (const k of _keys(seen)) {
    nodes.push(k);
  }
  return nodes;
}
function transition(current: string, trans: Transition[]): string {
  let current_probability: number = 0.0;
  let random_value: number = random();
  for (const t of trans) {
    if ((t.src === current)) {
      current_probability = (current_probability + t.prob);
      if ((current_probability > random_value)) {
        return t.dst;
      }
    }
  }
  return "";
}
function get_transitions(start: string, trans: Transition[], steps: number): Record<string, number> {
  let visited: Record<string, number> = {};
  for (const node of get_nodes(trans)) {
    let one: number = 1;
    visited[(()=>{const _mochi_idx = node; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = one;
  }
  let node: string = start;
  let i: number = 0;
  while ((i < steps)) {
    node = transition(node, trans);
    let count: number = visited[node];
    count = (count + 1);
    visited[(()=>{const _mochi_idx = node; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = count;
    i = (i + 1);
  }
  return visited;
}
function main() {
  let transitions: Transition[] = [{src: "a", dst: "a", prob: 0.9}, {src: "a", dst: "b", prob: 0.075}, {src: "a", dst: "c", prob: 0.025}, {src: "b", dst: "a", prob: 0.15}, {src: "b", dst: "b", prob: 0.8}, {src: "b", dst: "c", prob: 0.05}, {src: "c", dst: "a", prob: 0.25}, {src: "c", dst: "b", prob: 0.25}, {src: "c", dst: "c", prob: 0.5}];
  let result: Record<string, number> = get_transitions("a", transitions, 5000);
  console.log(_str(((((_str(result.a) + " ") + _str(result.b)) + " ") + _str(result.c))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _keys(obj: any): any[] {
  return Object.keys(obj);
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

