// Generated by Mochi v0.10.61 on 2025-08-08 17:38:17 GMT+7

function topological_sort(graph: Record<number, number[]>): number[] {
  let indegree: number[] = [];
  let i: number = 0;
  while ((i < _len(graph))) {
    indegree.push(0);
    i = (i + 1);
  }
  for (const edges of Object.values(graph)) {
    let j: number = 0;
    while ((j < _len(edges))) {
      let v: number = edges[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()];
      indegree[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] = (indegree[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] + 1);
      j = (j + 1);
    }
  }
  let queue: number[] = [];
  i = 0;
  while ((i < _len(indegree))) {
    if ((indegree[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] == 0)) {
      queue.push(i);
    }
    i = (i + 1);
  }
  let order: number[] = [];
  let head: number = 0;
  let processed: number = 0;
  while ((head < _len(queue))) {
    let v: number = queue[(()=>{const _mochi_idx = head; return _mochi_idx < 0 ? queue.length + _mochi_idx : _mochi_idx;})()];
    head = (head + 1);
    processed = (processed + 1);
    order.push(v);
    let neighbors: number[] = graph[v];
    let k: number = 0;
    while ((k < _len(neighbors))) {
      let nb: number = neighbors[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? neighbors.length + _mochi_idx : _mochi_idx;})()];
      indegree[(()=>{const _mochi_idx = nb; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] = (indegree[(()=>{const _mochi_idx = nb; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] - 1);
      if ((indegree[(()=>{const _mochi_idx = nb; return _mochi_idx < 0 ? indegree.length + _mochi_idx : _mochi_idx;})()] == 0)) {
        queue.push(nb);
      }
      k = (k + 1);
    }
  }
  if ((processed != _len(graph))) {
    return null;
  }
  return order;
}
function main() {
  let graph: Record<number, number[]> = {[0]: [1, 2], [1]: [3], [2]: [3], [3]: [4, 5], [4]: [], [5]: []};
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(topological_sort(graph))));
  let cyclic: Record<number, number[]> = {[0]: [1], [1]: [2], [2]: [0]};
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(topological_sort(cyclic))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

