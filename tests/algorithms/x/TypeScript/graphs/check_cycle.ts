// Generated by Mochi v0.10.59 on 2025-08-07 00:01:42 GMT+7

function depth_first_search(graph: number[][], vertex: number, visited: boolean[], rec_stk: boolean[]): boolean {
  visited[(vertex) < 0 ? visited.length + (vertex) : vertex] = true;
  rec_stk[(vertex) < 0 ? rec_stk.length + (vertex) : vertex] = true;
  for (const node of graph[(vertex) < 0 ? graph.length + (vertex) : vertex]) {
    if (!visited[(node) < 0 ? visited.length + (node) : node]) {
      if (depth_first_search(graph, node, visited, rec_stk)) {
        return true;
      }
    } else {
      if (rec_stk[(node) < 0 ? rec_stk.length + (node) : node]) {
        return true;
      }
    }
  }
  rec_stk[(vertex) < 0 ? rec_stk.length + (vertex) : vertex] = false;
  return false;
}
function check_cycle(graph: number[][]): boolean {
  let n: number = _len(graph);
  let visited: boolean[] = [];
  let rec_stk: boolean[] = [];
  let i: number = 0;
  while ((i < n)) {
    visited.push(false);
    rec_stk.push(false);
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    if (!visited[(i) < 0 ? visited.length + (i) : i]) {
      if (depth_first_search(graph, i, visited, rec_stk)) {
        return true;
      }
    }
    i = (i + 1);
  }
  return false;
}
function print_bool(b: boolean) {
  if (b) {
    console.log("");
  } else {
    _stdout_write("");
  }
}
let g1: any[][] = [[], [0, 3], [0, 4], [5], [5], []];
let g2: number[][] = [[1, 2], [2], [0, 3], [3]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_bool(check_cycle(g1));
  print_bool(check_cycle(g2));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

