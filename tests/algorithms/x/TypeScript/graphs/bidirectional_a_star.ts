// Generated by Mochi v0.10.61 on 2025-08-08 19:02:28 GMT+7

let HEURISTIC: number = 0;
let grid: number[][] = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]];
export interface Pos { y: number; x: number }
export interface Node { pos: Pos; g_cost: number; h_cost: number; f_cost: number; path: Pos[] }
function abs(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function heuristic(a: Pos, b: Pos): number {
  let dy: number = (a.y - b.y);
  let dx: number = (a.x - b.x);
  if ((HEURISTIC == 1)) {
    return (abs(dy) + abs(dx));
  }
  let dyf: number = dy;
  let dxf: number = dx;
  return sqrtApprox(((dyf * dyf) + (dxf * dxf)));
}
function pos_equal(a: Pos, b: Pos): boolean {
  return ((a.y == b.y) && (a.x == b.x));
}
function contains_pos(lst: Pos[], p: Pos): boolean {
  let i: number = 0;
  while ((i < _len(lst))) {
    if (pos_equal(lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()], p)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function open_index_of_pos(open: Node[], p: Pos): number {
  let i: number = 0;
  while ((i < _len(open))) {
    if (pos_equal(open[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()].pos, p)) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
function remove_node_at(nodes: Node[], idx: number): Node[] {
  let res: Node[] = [];
  let i: number = 0;
  while ((i < _len(nodes))) {
    if ((i != idx)) {
      res.push(nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function append_pos_list(path: Pos[], p: Pos): Pos[] {
  let res: Pos[] = [];
  let i: number = 0;
  while ((i < _len(path))) {
    res.push(path[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  res.push(p);
  return res;
}
function reverse_pos_list(lst: Pos[]): Pos[] {
  let res: Pos[] = [];
  let i: number = (_len(lst) - 1);
  while ((i >= 0)) {
    res.push(lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  return res;
}
function concat_pos_lists(a: Pos[], b: Pos[]): Pos[] {
  let res: Pos[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < _len(b))) {
    res.push(b[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  return res;
}
function get_successors(p: Pos): Pos[] {
  let res: Pos[] = [];
  let i: number = 0;
  while ((i < _len(delta))) {
    let nx: number = (p.x + delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    let ny: number = (p.y + delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? delta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? delta.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    if (((((nx >= 0) && (ny >= 0)) && (nx < _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]))) && (ny < _len(grid)))) {
      if ((grid[(()=>{const _mochi_idx = ny; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = nx; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = ny; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 0)) {
        res.push({"y": ny, "x": nx});
      }
    }
    i = (i + 1);
  }
  return res;
}
function find_lowest_f(open: Node[]): number {
  let best: number = 0;
  let i: number = 1;
  while ((i < _len(open))) {
    if ((open[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()].f_cost < open[(()=>{const _mochi_idx = best; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()].f_cost)) {
      best = i;
    }
    i = (i + 1);
  }
  return best;
}
function astar(start: Pos, goal: Pos): Pos[] {
  let h0: number = heuristic(start, goal);
  let open: Node[] = [{"pos": start, "g_cost": 0, "h_cost": h0, "f_cost": h0, "path": [start]}];
  let closed: Pos[] = [];
  while ((_len(open) > 0)) {
    let idx: number = find_lowest_f(open);
    let current: Node = open[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()];
    open = remove_node_at(open, idx);
    if (pos_equal(current.pos, goal)) {
      return current.path;
    }
    closed.push(current.pos);
    let succ: Pos[] = get_successors(current.pos);
    let i: number = 0;
    while ((i < _len(succ))) {
      let pos: Pos = succ[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? succ.length + _mochi_idx : _mochi_idx;})()];
      if (contains_pos(closed, pos)) {
        i = (i + 1);
        continue
      }
      let tentative_g: number = (current.g_cost + 1);
      let idx_open: number = open_index_of_pos(open, pos);
      if (((idx_open == (0 - 1)) || (tentative_g < open[(()=>{const _mochi_idx = idx_open; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()].g_cost))) {
        let new_path: Pos[] = append_pos_list(current.path, pos);
        let h: number = heuristic(pos, goal);
        let f: number = (tentative_g + h);
        if ((idx_open != (0 - 1))) {
          open = remove_node_at(open, idx_open);
        }
        open.push({pos, "g_cost": tentative_g, "h_cost": h, "f_cost": f, "path": new_path});
      }
      i = (i + 1);
    }
  }
  return [start];
}
function combine_paths(fwd: Node, bwd: Node): Pos[] {
  let bwd_copy: Pos[] = [];
  let i: number = 0;
  while ((i < (_len(bwd.path) - 1))) {
    bwd_copy.push(bwd.path[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bwd.path.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  bwd_copy = reverse_pos_list(bwd_copy);
  return concat_pos_lists(fwd.path, bwd_copy);
}
function bidirectional_astar(start: Pos, goal: Pos): Pos[] {
  let hf: number = heuristic(start, goal);
  let hb: number = heuristic(goal, start);
  let open_f: Node[] = [{"pos": start, "g_cost": 0, "h_cost": hf, "f_cost": hf, "path": [start]}];
  let open_b: Node[] = [{"pos": goal, "g_cost": 0, "h_cost": hb, "f_cost": hb, "path": [goal]}];
  let closed_f: Pos[] = [];
  let closed_b: Pos[] = [];
  while (((_len(open_f) > 0) && (_len(open_b) > 0))) {
    let idx_f: number = find_lowest_f(open_f);
    let current_f: Node = open_f[(()=>{const _mochi_idx = idx_f; return _mochi_idx < 0 ? open_f.length + _mochi_idx : _mochi_idx;})()];
    open_f = remove_node_at(open_f, idx_f);
    let idx_b: number = find_lowest_f(open_b);
    let current_b: Node = open_b[(()=>{const _mochi_idx = idx_b; return _mochi_idx < 0 ? open_b.length + _mochi_idx : _mochi_idx;})()];
    open_b = remove_node_at(open_b, idx_b);
    if (pos_equal(current_f.pos, current_b.pos)) {
      return combine_paths(current_f, current_b);
    }
    closed_f.push(current_f.pos);
    closed_b.push(current_b.pos);
    let succ_f: Pos[] = get_successors(current_f.pos);
    let i: number = 0;
    while ((i < _len(succ_f))) {
      let pos: Pos = succ_f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? succ_f.length + _mochi_idx : _mochi_idx;})()];
      if (contains_pos(closed_f, pos)) {
        i = (i + 1);
        continue
      }
      let tentative_g: number = (current_f.g_cost + 1);
      let h: number = heuristic(pos, current_b.pos);
      let f: number = (tentative_g + h);
      let idx_open: number = open_index_of_pos(open_f, pos);
      if (((idx_open == (0 - 1)) || (tentative_g < open_f[(()=>{const _mochi_idx = idx_open; return _mochi_idx < 0 ? open_f.length + _mochi_idx : _mochi_idx;})()].g_cost))) {
        let new_path: Pos[] = append_pos_list(current_f.path, pos);
        if ((idx_open != (0 - 1))) {
          open_f = remove_node_at(open_f, idx_open);
        }
        open_f.push({pos, "g_cost": tentative_g, "h_cost": h, "f_cost": f, "path": new_path});
      }
      i = (i + 1);
    }
    let succ_b: Pos[] = get_successors(current_b.pos);
    i = 0;
    while ((i < _len(succ_b))) {
      let pos: Pos = succ_b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? succ_b.length + _mochi_idx : _mochi_idx;})()];
      if (contains_pos(closed_b, pos)) {
        i = (i + 1);
        continue
      }
      let tentative_g: number = (current_b.g_cost + 1);
      let h: number = heuristic(pos, current_f.pos);
      let f: number = (tentative_g + h);
      let idx_open: number = open_index_of_pos(open_b, pos);
      if (((idx_open == (0 - 1)) || (tentative_g < open_b[(()=>{const _mochi_idx = idx_open; return _mochi_idx < 0 ? open_b.length + _mochi_idx : _mochi_idx;})()].g_cost))) {
        let new_path: Pos[] = append_pos_list(current_b.path, pos);
        if ((idx_open != (0 - 1))) {
          open_b = remove_node_at(open_b, idx_open);
        }
        open_b.push({pos, "g_cost": tentative_g, "h_cost": h, "f_cost": f, "path": new_path});
      }
      i = (i + 1);
    }
  }
  return [start];
}
function path_to_string(path: Pos[]): string {
  if ((_len(path) == 0)) {
    return "[]";
  }
  let s: string = (((("[(" + _str(path[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()].y)) + ", ") + _str(path[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()].x)) + ")");
  let i: number = 1;
  while ((i < _len(path))) {
    s = (((((s + ", (") + _str(path[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()].y)) + ", ") + _str(path[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()].x)) + ")");
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
let start: Pos = {"y": 0, "x": 0};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let delta: number[][]
let goal: Pos
let path1: Pos[]
let path2: Pos[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
delta = [[-1, 0], [0, -1], [1, 0], [0, 1]]
goal = {"y": (_len(grid) - 1), "x": (_len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]) - 1)}
path1 = astar(start, goal)
  console.log(_str(path_to_string(path1)));
path2 = bidirectional_astar(start, goal)
  console.log(_str(path_to_string(path2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

