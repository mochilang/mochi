// Generated by Mochi v0.10.59 on 2025-08-07 00:01:33 GMT+7

function add_edge(graph: Record<number, number[]>, _from: number, to: number) {
  if ((_from in graph)) {
    graph[(_from) < 0 ? graph.length + (_from) : _from] = [...graph[(_from) < 0 ? graph.length + (_from) : _from], to];
  } else {
    graph[(_from) < 0 ? graph.length + (_from) : _from] = [to];
  }
}
function print_graph(graph: Record<number, number[]>) {
  for (const v of _keys(graph)) {
    let adj: number[] = graph[(v) < 0 ? graph.length + (v) : v];
    let line: string = (_str(v) + "  :  ");
    let i: number = 0;
    while ((i < _len(adj))) {
      line = (line + _str(adj[(i) < 0 ? adj.length + (i) : i]));
      if ((i < (_len(adj) - 1))) {
        line = (line + " -> ");
      }
      i = (i + 1);
    }
    console.log(_str(line));
  }
}
function bfs(graph: Record<number, number[]>, start: number): number[] {
  let visited: Record<number, boolean> = {};
  let queue: number[] = [];
  let order: number[] = [];
  queue.push(start);
  visited[(start) < 0 ? visited.length + (start) : start] = true;
  let head: number = 0;
  while ((head < _len(queue))) {
    let vertex: number = queue[(head) < 0 ? queue.length + (head) : head];
    head = (head + 1);
    order.push(vertex);
    let neighbors: number[] = graph[(vertex) < 0 ? graph.length + (vertex) : vertex];
    let i: number = 0;
    while ((i < _len(neighbors))) {
      let neighbor: number = neighbors[(i) < 0 ? neighbors.length + (i) : i];
      if (!(neighbor in visited)) {
        visited[(neighbor) < 0 ? visited.length + (neighbor) : neighbor] = true;
        queue.push(neighbor);
      }
      i = (i + 1);
    }
  }
  return order;
}
let g: Record<number, number[]> = {};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _keys(obj: any): any[] {
  return Object.keys(obj);
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  add_edge(g, 0, 1);
  add_edge(g, 0, 2);
  add_edge(g, 1, 2);
  add_edge(g, 2, 0);
  add_edge(g, 2, 3);
  add_edge(g, 3, 3);
  print_graph(g);
  console.log(_str("[" + (bfs(g, 2)).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

