// Generated by Mochi v0.10.59 on 2025-08-07 00:01:47 GMT+7

export interface G { A: string[]; B: string[]; C: string[]; D: string[]; E: string[]; F: string[]; G: string[] }
function contains(lst: string[], v: string): boolean {
  let i: number = 0;
  while ((i < _len(lst))) {
    if ((lst[(i) < 0 ? lst.length + (i) : i] == v)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function depth_first_search(graph: Record<string, string[]>, start: string): string[] {
  let explored: string[] = [];
  let stack: string[] = [];
  stack.push(start);
  explored.push(start);
  while ((_len(stack) > 0)) {
    let idx: number = (_len(stack) - 1);
    let v: string = stack[(idx) < 0 ? stack.length + (idx) : idx];
    stack = stack.slice(0, idx);
    let neighbors: string[] = graph[(v) < 0 ? graph.length + (v) : v];
    let i: number = (_len(neighbors) - 1);
    while ((i >= 0)) {
      let adj: string = neighbors[(i) < 0 ? neighbors.length + (i) : i];
      if (!contains(explored, adj)) {
        explored.push(adj);
        stack.push(adj);
      }
      i = (i - 1);
    }
  }
  return explored;
}
let G: G = {"A": ["B", "C", "D"], "B": ["A", "D", "E"], "C": ["A", "F"], "D": ["B", "D"], "E": ["B", "F"], "F": ["C", "E", "G"], "G": ["F"]};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: string[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = depth_first_search(G, "A")
  console.log(_str("[" + (result).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

