// Generated by Mochi v0.10.66 on 2025-08-15 10:28:54 GMT+7

let seed: number = 123456789;
function rand(): number {
  seed = Number((((BigInt(seed) * 1103515245n) + 12345n) % 2147483648n));
  return seed;
}
function random(): number {
  return ((1.0 * rand()) / 2147483648.0);
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function absf(x: number): number {
  return ((x < 0.0) ? -x : x);
}
function dot(a: number[], b: number[]): number {
  let s: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    s = (s + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return s;
}
function vector_scale(v: number[], s: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(v))) {
    res.push((v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] * s));
    i = (i + 1);
  }
  return res;
}
function vector_sub(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function vector_add(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] + b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function zeros_matrix(r: number, c: number): number[][] {
  let m: number[][] = [];
  let i: number = 0;
  while ((i < r)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < c)) {
      row.push(0.0);
      j = (j + 1);
    }
    m.push(row);
    i = (i + 1);
  }
  return m;
}
export interface LanczosResult { t: number[][]; q: number[][] }
export interface EigenResult { values: number[]; vectors: number[][] }
function column(m: number[][], idx: number): number[] {
  let col: number[] = [];
  let i: number = 0;
  while ((i < _len(m))) {
    col.push(m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return col;
}
function validate_adjacency_list(graph: number[][]) {
  let i: number = 0;
  while ((i < _len(graph))) {
    let j: number = 0;
    while ((j < _len(graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]))) {
      let v: number = graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if (((v < 0) || (v >= _len(graph)))) {
        _panic("Invalid neighbor");
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
}
function multiply_matrix_vector(graph: number[][], vector: number[]): number[] {
  let n: number = _len(graph);
  if ((_len(vector) !== n)) {
    _panic("Vector length must match number of nodes");
  }
  let result: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    let sum: number = 0.0;
    let j: number = 0;
    while ((j < _len(graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]))) {
      let nb: number = graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      sum = (sum + vector[(()=>{const _mochi_idx = nb; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    result.push(sum);
    i = (i + 1);
  }
  return result;
}
function lanczos_iteration(graph: number[][], k: number): LanczosResult {
  let n: number = _len(graph);
  if (((k < 1) || (k > n))) {
    _panic("invalid number of eigenvectors");
  }
  let q: number[][] = zeros_matrix(n, k);
  let t: number[][] = zeros_matrix(k, k);
  let v: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    v.push(random());
    i = (i + 1);
  }
  let ss: number = 0.0;
  i = 0;
  while ((i < n)) {
    ss = (ss + (v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] * v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let vnorm: number = sqrtApprox(ss);
  i = 0;
  while ((i < n)) {
    q[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? q[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] / vnorm);
    i = (i + 1);
  }
  let beta: number = 0.0;
  let j: number = 0;
  while ((j < k)) {
    let w: number[] = multiply_matrix_vector(graph, column(q, j));
    if ((j > 0)) {
      w = vector_sub(w, vector_scale(column(q, (j - 1)), beta));
    }
    let alpha: number = dot(column(q, j), w);
    w = vector_sub(w, vector_scale(column(q, j), alpha));
    let ss2: number = 0.0;
    let p: number = 0;
    while ((p < n)) {
      ss2 = (ss2 + (w[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()] * w[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()]));
      p = (p + 1);
    }
    beta = sqrtApprox(ss2);
    t[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? t.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? t[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? t.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = alpha;
    if ((j < (k - 1))) {
      t[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? t.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? t[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? t.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = beta;
      t[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? t.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? t[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? t.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = beta;
      if ((beta > 1e-10)) {
        let wnorm: number[] = vector_scale(w, (1.0 / beta));
        let r: number = 0;
        while ((r < n)) {
          q[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? q[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = wnorm[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? wnorm.length + _mochi_idx : _mochi_idx;})()];
          r = (r + 1);
        }
      }
    }
    j = (j + 1);
  }
  return {t, q};
}
function jacobi_eigen(a_in: number[][], max_iter: number): EigenResult {
  let n: number = _len(a_in);
  let a: number[][] = a_in;
  let v: number[][] = zeros_matrix(n, n);
  let i: number = 0;
  while ((i < n)) {
    v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1.0;
    i = (i + 1);
  }
  let iter: number = 0;
  while ((iter < max_iter)) {
    let p: number = 0;
    let q: number = 1;
    let max: number = absf(a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    i = 0;
    while ((i < n)) {
      let j: number = (i + 1);
      while ((j < n)) {
        let val: number = absf(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        if ((val > max)) {
          max = val;
          p = i;
          q = j;
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    if ((max < 1e-08)) {
      break
    }
    let app: number = a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let aqq: number = a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let apq: number = a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let theta: number = ((aqq - app) / (2.0 * apq));
    let t: number = (1.0 / (absf(theta) + sqrtApprox(((theta * theta) + 1.0))));
    if ((theta < 0.0)) {
      t = -t;
    }
    let c: number = (1.0 / sqrtApprox((1.0 + (t * t))));
    let s: number = (t * c);
    let tau: number = (s / (1.0 + c));
    a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (app - (t * apq));
    a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (aqq + (t * apq));
    a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0.0;
    a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0.0;
    let k: number = 0;
    while ((k < n)) {
      if (((k !== p) && (k !== q))) {
        let akp: number = a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        let akq: number = a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (akp - (s * (akq + (tau * akp))));
        a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (akq + (s * (akp - (tau * akq))));
        a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      }
      k = (k + 1);
    }
    k = 0;
    while ((k < n)) {
      let vkp: number = v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let vkq: number = v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (vkp - (s * (vkq + (tau * vkp))));
      v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? v[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (vkq + (s * (vkp - (tau * vkq))));
      k = (k + 1);
    }
    iter = (iter + 1);
  }
  let eigenvalues: number[] = [];
  i = 0;
  while ((i < n)) {
    eigenvalues.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return {values: eigenvalues, vectors: v};
}
function matmul(a: number[][], b: number[][]): number[][] {
  let rows: number = _len(a);
  let cols: number = _len(b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
  let inner: number = _len(b);
  let m: number[][] = zeros_matrix(rows, cols);
  let i: number = 0;
  while ((i < rows)) {
    let j: number = 0;
    while ((j < cols)) {
      let s: number = 0.0;
      let k: number = 0;
      while ((k < inner)) {
        s = (s + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = s;
      j = (j + 1);
    }
    i = (i + 1);
  }
  return m;
}
function sort_eigenpairs(vals: number[], vecs: number[][]): EigenResult {
  let n: number = _len(vals);
  let values: number[] = vals;
  let vectors: number[][] = vecs;
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((values[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()] < values[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp = values[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()];
        values[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()] = values[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()];
        values[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()] = tmp;
        let r: number = 0;
        while ((r < _len(vectors))) {
          let tv: number = vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
          vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
          vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? vectors[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = tv;
          r = (r + 1);
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return {values, vectors};
}
function find_lanczos_eigenvectors(graph: number[][], k: number): EigenResult {
  validate_adjacency_list(graph);
  let res: LanczosResult = lanczos_iteration(graph, k);
  let eig: EigenResult = jacobi_eigen(res.t, 50);
  let sorted: EigenResult = sort_eigenpairs(eig.values, eig.vectors);
  let final_vectors: number[][] = matmul(res.q, sorted.vectors);
  return {values: sorted.values, vectors: final_vectors};
}
function list_to_string(arr: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(arr))) {
    s = (s + _str(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(arr) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
function matrix_to_string(m: number[][]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(m))) {
    s = (s + list_to_string(m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(m) - 1))) {
      s = (s + "; ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
let graph: number[][] = [[1, 2], [0, 2], [0, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let result: EigenResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = find_lanczos_eigenvectors(graph, 2)
  console.log(_str(list_to_string(result.values)));
  console.log(_str(matrix_to_string(result.vectors)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

