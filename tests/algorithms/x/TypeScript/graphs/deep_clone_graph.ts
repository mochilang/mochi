// Generated by Mochi v0.10.72 on 2025-08-25 08:47:39 GMT+7

export type Node = { tag: "Nil" } | { tag: "N"; value: number; neighbors: Node[] };
function deep_clone_graph(node: Node): Node {
  let clones: Record<number, Node> = {};
  function dfs(n: Node): Node {
    return ((n.tag === "Nil") ? {tag: "Nil"} : ((n.tag === "N") ? (() => {
  let v = n.value;
  let neigh = n.neighbors;
  let result: Node = {tag: "Nil"};
  if (Object.prototype.hasOwnProperty.call(clones, v)) {
    result = clones[v];
  } else {
    clones[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? clones.length + _mochi_idx : _mochi_idx;})()] = {tag: "N", value: v, neighbors: []};
    let cloned_neighbors: Node[] = [];
    for (const nb of neigh) {
      cloned_neighbors.push(dfs(nb));
    }
    let node_copy = {tag: "N", value: v, neighbors: cloned_neighbors};
    clones[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? clones.length + _mochi_idx : _mochi_idx;})()] = node_copy;
    result = node_copy;
  }
  return result;
})() : undefined));
  }
  return dfs(node);
}
function serialize(node: Node): string {
  let seen: Record<number, boolean> = {};
  let lines: string[] = [];
  function dfs(n: Node) {
    ((n.tag === "Nil") ? {} : ((n.tag === "N") ? (() => {
  let v = n.value;
  let neigh = n.neighbors;
  if (Object.prototype.hasOwnProperty.call(seen, v)) {
    return;
  }
  seen[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
  let vals: number[] = [];
  for (const nb of neigh) {
    ((nb.tag === "Nil") ? {} : ((nb.tag === "N") ? (() => {
  let val = nb.value;
  let _ = nb.neighbors;
  vals.push(val);
})() : undefined));
  }
  lines.push(((_str(v) + ":") + _str(vals)));
  for (const nb of neigh) {
    dfs(nb);
  }
})() : undefined));
  }
  dfs(node);
  return lines.join("\n");
}
function main() {
  let g4: Node = {tag: "N", value: 4, neighbors: []};
  let g3: Node = {tag: "N", value: 3, neighbors: [g4]};
  let g2: Node = {tag: "N", value: 2, neighbors: [g3]};
  let g1: Node = {tag: "N", value: 1, neighbors: [g2]};
  let clone: Node = deep_clone_graph(g1);
  console.log(_str(serialize(clone)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return x.map(_str).join(',');
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

