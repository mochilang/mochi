// Generated by Mochi v0.10.59 on 2025-08-07 00:01:34 GMT+7

export interface G { A: string[]; B: string[]; C: string[]; D: string[]; E: string[]; F: string[] }
function join(xs: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    s = (s + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return s;
}
function breadth_first_search(graph: Record<string, string[]>, start: string): string[] {
  let explored: Record<string, boolean> = {};
  explored[(start) < 0 ? explored.length + (start) : start] = true;
  let result: string[] = [start];
  let queue: string[] = [start];
  while ((_len(queue) > 0)) {
    let v: string = queue[(Math.trunc(0)) < 0 ? queue.length + (Math.trunc(0)) : Math.trunc(0)];
    queue = queue.slice(1, _len(queue));
    let children: string[] = graph[(v) < 0 ? graph.length + (v) : v];
    let i: number = 0;
    while ((i < _len(children))) {
      let w: string = children[(i) < 0 ? children.length + (i) : i];
      if (!(w in explored)) {
        explored[(w) < 0 ? explored.length + (w) : w] = true;
        result.push(w);
        queue.push(w);
      }
      i = (i + 1);
    }
  }
  return result;
}
function breadth_first_search_with_deque(graph: Record<string, string[]>, start: string): string[] {
  let visited: Record<string, boolean> = {};
  visited[(start) < 0 ? visited.length + (start) : start] = true;
  let result: string[] = [start];
  let queue: string[] = [start];
  let head: number = 0;
  while ((head < _len(queue))) {
    let v: string = queue[(head) < 0 ? queue.length + (head) : head];
    head = (head + 1);
    let children: string[] = graph[(v) < 0 ? graph.length + (v) : v];
    let i: number = 0;
    while ((i < _len(children))) {
      let child: string = children[(i) < 0 ? children.length + (i) : i];
      if (!(child in visited)) {
        visited[(child) < 0 ? visited.length + (child) : child] = true;
        result.push(child);
        queue.push(child);
      }
      i = (i + 1);
    }
  }
  return result;
}
let G: G = {"A": ["B", "C"], "B": ["A", "D", "E"], "C": ["A", "F"], "D": ["B"], "E": ["B", "F"], "F": ["C", "E"]};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(join(breadth_first_search(G, "A"))));
  console.log(_str(join(breadth_first_search_with_deque(G, "A"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

