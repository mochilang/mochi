// Generated by Mochi v0.10.66 on 2025-08-15 10:29:12 GMT+7

let INF: number = 1000000000;
function connect(graph: Record<number, number[][]>, a: number, b: number, w: number): Record<number, number[][]> {
  let u: number = (a - 1);
  let v: number = (b - 1);
  let g: Record<number, number[][]> = graph;
  g[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? g.length + _mochi_idx : _mochi_idx;})()] = [...g[u], [v, w]];
  g[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? g.length + _mochi_idx : _mochi_idx;})()] = [...g[v], [u, w]];
  return g;
}
function in_list(arr: number[], x: number): boolean {
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function prim(graph: Record<number, number[][]>, s: number, n: number): number[][] {
  let dist: Record<number, number> = {};
  let parent: Record<number, number> = {};
  dist[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = 0;
  parent[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = -1;
  let known: number[] = [];
  let keys: number[] = [s];
  while ((_len(known) < n)) {
    let mini: number = INF;
    let u: number = -1;
    let i: number = 0;
    while ((i < _len(keys))) {
      let k = keys[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? keys.length + _mochi_idx : _mochi_idx;})()];
      let d: number = dist[k];
      if ((!in_list(known, k) && (d < mini))) {
        mini = d;
        u = k;
      }
      i = (i + 1);
    }
    known.push(u);
    for (const e of graph[u]) {
      let v: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      let w: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      if (!in_list(keys, v)) {
        keys.push(v);
      }
      let cur: number = ((v in dist) ? dist[v] : INF);
      if ((!in_list(known, v) && (w < cur))) {
        dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = w;
        parent[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = u;
      }
    }
  }
  let edges: number[][] = [];
  let j: number = 0;
  while ((j < _len(keys))) {
    let v: number = keys[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? keys.length + _mochi_idx : _mochi_idx;})()];
    if ((v !== s)) {
      edges.push([(v + 1), (parent[v] + 1)]);
    }
    j = (j + 1);
  }
  return edges;
}
function sort_heap(h: number[], dist: Record<number, number>): number[] {
  let a: number[] = h;
  let i: number = 0;
  while ((i < _len(a))) {
    let j: number = 0;
    while ((j < ((_len(a) - i) - 1))) {
      let dj: number = ((a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] in dist) ? dist[Math.trunc(a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()])] : INF);
      let dj1: number = ((a[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] in dist) ? dist[Math.trunc(a[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()])] : INF);
      if ((dj > dj1)) {
        let t: number = a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
        a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] = a[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
        a[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] = t;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return a;
}
function prim_heap(graph: Record<number, number[][]>, s: number, n: number): number[][] {
  let dist: Record<number, number> = {};
  let parent: Record<number, number> = {};
  dist[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = 0;
  parent[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = -1;
  let h: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    h.push(i);
    i = (i + 1);
  }
  h = sort_heap(h, dist);
  let known: number[] = [];
  while ((_len(h) > 0)) {
    let u: number = h[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()];
    h = h.slice(1, _len(h));
    known.push(u);
    for (const e of graph[u]) {
      let v: number = e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      let w: number = e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()];
      let cur: number = ((v in dist) ? dist[v] : INF);
      if ((!in_list(known, v) && (w < cur))) {
        dist[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? dist.length + _mochi_idx : _mochi_idx;})()] = w;
        parent[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()] = u;
      }
    }
    h = sort_heap(h, dist);
  }
  let edges: number[][] = [];
  let j: number = 0;
  while ((j < n)) {
    if ((j !== s)) {
      edges.push([(j + 1), (parent[j] + 1)]);
    }
    j = (j + 1);
  }
  return edges;
}
function print_edges(edges: number[][]) {
  let i: number = 0;
  while ((i < _len(edges))) {
    let e: number[] = edges[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()];
    console.log(_str((((("(" + _str(e[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()])) + ", ") + _str(e[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? e.length + _mochi_idx : _mochi_idx;})()])) + ")")));
    i = (i + 1);
  }
}
function test_vector() {
  let x: number = 5;
  let G: Record<number, number[][]> = {};
  let i: number = 0;
  while ((i < x)) {
    G[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? G.length + _mochi_idx : _mochi_idx;})()] = [];
    i = (i + 1);
  }
  G = connect(G, 1, 2, 15);
  G = connect(G, 1, 3, 12);
  G = connect(G, 2, 4, 13);
  G = connect(G, 2, 5, 5);
  G = connect(G, 3, 2, 6);
  G = connect(G, 3, 4, 6);
  let mst: number[][] = prim(G, 0, x);
  print_edges(mst);
  let mst_heap: number[][] = prim_heap(G, 0, x);
  print_edges(mst_heap);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  test_vector();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

