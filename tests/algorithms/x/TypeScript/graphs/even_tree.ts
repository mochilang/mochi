// Generated by Mochi v0.10.66 on 2025-08-15 10:28:31 GMT+7

let tree: Record<number, number[]> = {};
function dfs(start: number, visited: Record<number, boolean>): number[] {
  let size: number = 1;
  let cuts: number = 0;
  visited[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()] = true;
  for (const v of tree[start]) {
    if (!(v in visited)) {
      let res: number[] = dfs(v, visited);
      size = (size + res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()]);
      cuts = (cuts + res[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()]);
    }
  }
  if (((size % 2) === 0)) {
    cuts = (cuts + 1);
  }
  return [size, cuts];
}
function even_tree(): number {
  let visited: Record<number, boolean> = {};
  let res: number[] = dfs(1, visited);
  return (res[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] - 1);
}
function main() {
  let edges: number[][] = [[2, 1], [3, 1], [4, 3], [5, 2], [6, 1], [7, 2], [8, 6], [9, 8], [10, 8]];
  let i: number = 0;
  while ((i < _len(edges))) {
    let u: number = edges[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? edges[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let v: number = edges[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? edges[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? edges.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    if (!(u in tree)) {
      tree[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()] = [];
    }
    if (!(v in tree)) {
      tree[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()] = [];
    }
    tree[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()] = [...tree[u], v];
    tree[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()] = [...tree[v], u];
    i = (i + 1);
  }
  console.log(_str(even_tree()));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

