// Generated by Mochi v0.10.66 on 2025-08-15 10:28:38 GMT+7

function index_of(xs: number[], x: number): number {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === x)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function remove_item(xs: number[], x: number): number[] {
  let res: number[] = [];
  let removed: boolean = false;
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((!removed && (xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === x))) {
      removed = true;
    } else {
      res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function stable_matching(donor_pref: number[][], recipient_pref: number[][]): number[] {
  if ((_len(donor_pref) !== _len(recipient_pref))) {
    _panic("unequal groups");
  }
  let n: number = _len(donor_pref);
  let unmatched: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    unmatched.push(i);
    i = (i + 1);
  }
  let donor_record: number[] = [];
  i = 0;
  while ((i < n)) {
    donor_record.push(-1);
    i = (i + 1);
  }
  let rec_record: number[] = [];
  i = 0;
  while ((i < n)) {
    rec_record.push(-1);
    i = (i + 1);
  }
  let num_donations: number[] = [];
  i = 0;
  while ((i < n)) {
    num_donations.push(0);
    i = (i + 1);
  }
  while ((_len(unmatched) > 0)) {
    let donor: number = unmatched[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? unmatched.length + _mochi_idx : _mochi_idx;})()];
    let donor_preference: number[] = donor_pref[(()=>{const _mochi_idx = donor; return _mochi_idx < 0 ? donor_pref.length + _mochi_idx : _mochi_idx;})()];
    let recipient: number = donor_preference[(()=>{const _mochi_idx = Math.trunc(num_donations[(()=>{const _mochi_idx = donor; return _mochi_idx < 0 ? num_donations.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? donor_preference.length + _mochi_idx : _mochi_idx;})()];
    num_donations[(()=>{const _mochi_idx = donor; return _mochi_idx < 0 ? num_donations.length + _mochi_idx : _mochi_idx;})()] = (num_donations[(()=>{const _mochi_idx = donor; return _mochi_idx < 0 ? num_donations.length + _mochi_idx : _mochi_idx;})()] + 1);
    let rec_preference: number[] = recipient_pref[(()=>{const _mochi_idx = recipient; return _mochi_idx < 0 ? recipient_pref.length + _mochi_idx : _mochi_idx;})()];
    let prev_donor: number = rec_record[(()=>{const _mochi_idx = recipient; return _mochi_idx < 0 ? rec_record.length + _mochi_idx : _mochi_idx;})()];
    if ((prev_donor !== (0 - 1))) {
      let prev_index: number = index_of(rec_preference, prev_donor);
      let new_index: number = index_of(rec_preference, donor);
      if ((prev_index > new_index)) {
        rec_record[(()=>{const _mochi_idx = recipient; return _mochi_idx < 0 ? rec_record.length + _mochi_idx : _mochi_idx;})()] = donor;
        donor_record[(()=>{const _mochi_idx = donor; return _mochi_idx < 0 ? donor_record.length + _mochi_idx : _mochi_idx;})()] = recipient;
        unmatched.push(prev_donor);
        unmatched = remove_item(unmatched, donor);
      }
    } else {
      rec_record[(()=>{const _mochi_idx = recipient; return _mochi_idx < 0 ? rec_record.length + _mochi_idx : _mochi_idx;})()] = donor;
      donor_record[(()=>{const _mochi_idx = donor; return _mochi_idx < 0 ? donor_record.length + _mochi_idx : _mochi_idx;})()] = recipient;
      unmatched = remove_item(unmatched, donor);
    }
  }
  return donor_record;
}
let donor_pref: number[][] = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]];
let recipient_pref: number[][] = [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(stable_matching(donor_pref, recipient_pref)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

