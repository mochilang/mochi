// Generated by Mochi v0.10.62 on 2025-08-09 10:36:50 GMT+7

export interface Edge { src: number; dst: number; weight: number }
let INF: number = 1000000000.0;
function list_to_string(arr: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(arr))) {
    s = (s + _str(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(arr) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
function check_negative_cycle(graph: Edge[], distance: number[], edge_count: number): boolean {
  let j: number = 0;
  while ((j < edge_count)) {
    let e: Edge = graph[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()];
    let u: number = e.src;
    let v: number = e.dst;
    let w: number = e.weight;
    if (((distance[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()] < INF) && ((distance[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()] + w) < distance[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()]))) {
      return true;
    }
    j = (j + 1);
  }
  return false;
}
function bellman_ford(graph: Edge[], vertex_count: number, edge_count: number, src: number): number[] {
  let distance: number[] = [];
  let i: number = 0;
  while ((i < vertex_count)) {
    distance.push(INF);
    i = (i + 1);
  }
  distance[(()=>{const _mochi_idx = src; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()] = 0.0;
  let k: number = 0;
  while ((k < (vertex_count - 1))) {
    let j: number = 0;
    while ((j < edge_count)) {
      let e: Edge = graph[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()];
      let u: number = e.src;
      let v: number = e.dst;
      let w: number = e.weight;
      if (((distance[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()] < INF) && ((distance[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()] + w) < distance[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()]))) {
        distance[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()] = (distance[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? distance.length + _mochi_idx : _mochi_idx;})()] + w);
      }
      j = (j + 1);
    }
    k = (k + 1);
  }
  if (check_negative_cycle(graph, distance, edge_count)) {
    _panic("Negative cycle found");
  }
  return distance;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let edges: Edge[]
let distances: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
edges = [{"src": 2, "dst": 1, "weight": -10}, {"src": 3, "dst": 2, "weight": 3}, {"src": 0, "dst": 3, "weight": 5}, {"src": 0, "dst": 1, "weight": 4}]
distances = bellman_ford(edges, 4, _len(edges), 0)
  console.log(_str(list_to_string(distances)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

