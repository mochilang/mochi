// Generated by Mochi v0.10.59 on 2025-08-07 00:02:47 GMT+7

function topology_sort(graph: number[][], vert: number, visited: boolean[]): number[] {
  visited[(vert) < 0 ? visited.length + (vert) : vert] = true;
  let order: number[] = [];
  for (const neighbour of graph[(vert) < 0 ? graph.length + (vert) : vert]) {
    if (!visited[(neighbour) < 0 ? visited.length + (neighbour) : neighbour]) {
      order = concat(order, topology_sort(graph, neighbour, visited));
    }
  }
  order.push(vert);
  return order;
}
function find_component(graph: number[][], vert: number, visited: boolean[]): number[] {
  visited[(vert) < 0 ? visited.length + (vert) : vert] = true;
  let comp: number[] = [vert];
  for (const neighbour of graph[(vert) < 0 ? graph.length + (vert) : vert]) {
    if (!visited[(neighbour) < 0 ? visited.length + (neighbour) : neighbour]) {
      comp = concat(comp, find_component(graph, neighbour, visited));
    }
  }
  return comp;
}
function strongly_connected_components(graph: number[][]): number[][] {
  let n: number = _len(graph);
  let visited: boolean[] = [];
  for (let _ = 0; _ < n; _++) {
    visited.push(false);
  }
  let reversed: number[][] = [];
  for (let _ = 0; _ < n; _++) {
    reversed.push([]);
  }
  for (let i = 0; i < n; i++) {
    for (const neighbour of graph[(i) < 0 ? graph.length + (i) : i]) {
      reversed[(neighbour) < 0 ? reversed.length + (neighbour) : neighbour] = [...reversed[(neighbour) < 0 ? reversed.length + (neighbour) : neighbour], i];
    }
  }
  let order: number[] = [];
  for (let i = 0; i < n; i++) {
    if (!visited[(i) < 0 ? visited.length + (i) : i]) {
      order = concat(order, topology_sort(graph, i, visited));
    }
  }
  visited = [];
  for (let _ = 0; _ < n; _++) {
    visited.push(false);
  }
  let components: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let v: number = order[(Math.trunc(((n - i) - 1))) < 0 ? order.length + (Math.trunc(((n - i) - 1))) : Math.trunc(((n - i) - 1))];
    if (!visited[(v) < 0 ? visited.length + (v) : v]) {
      let comp: number[] = find_component(reversed, v, visited);
      components.push(comp);
    }
    i = (i + 1);
  }
  return components;
}
function main() {
  let test_graph_1: number[][] = [[2, 3], [0], [1], [4], []];
  let test_graph_2: number[][] = [[1, 2, 3], [2], [0], [4], [5], [3]];
  console.log(_str(_str(strongly_connected_components(test_graph_1))));
  console.log(_str(_str(strongly_connected_components(test_graph_2))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

