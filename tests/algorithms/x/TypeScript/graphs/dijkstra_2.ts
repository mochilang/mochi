// Generated by Mochi v0.10.59 on 2025-08-07 00:01:51 GMT+7

let INF: number = 1000000000.0;
function print_dist(dist: number[]) {
  console.log(_str("Vertex Distance"));
  let i: number = 0;
  while ((i < _len(dist))) {
    if ((dist[(i) < 0 ? dist.length + (i) : i] >= INF)) {
      console.log(_str(i) + " " + _str("\tINF"));
    } else {
      console.log(_str(i) + " " + _str("\t") + " " + _str(Math.trunc(dist[(i) < 0 ? dist.length + (i) : i])));
    }
    i = (i + 1);
  }
}
function min_dist(mdist: number[], vset: boolean[]): number {
  let min_val: number = INF;
  let min_ind: number = -1;
  let i: number = 0;
  while ((i < _len(mdist))) {
    if ((!vset[(i) < 0 ? vset.length + (i) : i] && (mdist[(i) < 0 ? mdist.length + (i) : i] < min_val))) {
      min_val = mdist[(i) < 0 ? mdist.length + (i) : i];
      min_ind = i;
    }
    i = (i + 1);
  }
  return min_ind;
}
function dijkstra(graph: number[][], src: number): number[] {
  let v: number = _len(graph);
  let mdist: number[] = [];
  let vset: boolean[] = [];
  let i: number = 0;
  while ((i < v)) {
    mdist.push(INF);
    vset.push(false);
    i = (i + 1);
  }
  mdist[(src) < 0 ? mdist.length + (src) : src] = 0.0;
  let count: number = 0;
  while ((count < (v - 1))) {
    let u: number = min_dist(mdist, vset);
    vset[(u) < 0 ? vset.length + (u) : u] = true;
    let i: number = 0;
    while ((i < v)) {
      let alt: number = (mdist[(u) < 0 ? mdist.length + (u) : u] + graph[(u) < 0 ? graph.length + (u) : u][(i) < 0 ? graph[(u) < 0 ? graph.length + (u) : u].length + (i) : i]);
      if (((!vset[(i) < 0 ? vset.length + (i) : i] && (graph[(u) < 0 ? graph.length + (u) : u][(i) < 0 ? graph[(u) < 0 ? graph.length + (u) : u].length + (i) : i] < INF)) && (alt < mdist[(i) < 0 ? mdist.length + (i) : i]))) {
        mdist[(i) < 0 ? mdist.length + (i) : i] = alt;
      }
      i = (i + 1);
    }
    count = (count + 1);
  }
  return mdist;
}
function main() {
  let graph: number[][] = [[0.0, 10.0, INF, INF, 5.0], [INF, 0.0, 1.0, INF, 2.0], [INF, INF, 0.0, 4.0, INF], [INF, INF, 6.0, 0.0, INF], [INF, 3.0, 9.0, 2.0, 0.0]];
  let dist: number[] = dijkstra(graph, 0);
  print_dist(dist);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

