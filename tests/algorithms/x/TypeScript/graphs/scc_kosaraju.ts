// Generated by Mochi v0.10.63 on 2025-08-12 08:43:33 GMT+7

function dfs(u: number, graph: number[][], visit: boolean[], stack: number[]): number[] {
  if (visit[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visit.length + _mochi_idx : _mochi_idx;})()]) {
    return stack;
  }
  visit[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visit.length + _mochi_idx : _mochi_idx;})()] = true;
  for (const v of graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]) {
    stack = dfs(v, graph, visit, stack);
  }
  stack.push(u);
  return stack;
}
function dfs2(u: number, reversed_graph: number[][], visit: boolean[], component: number[]): number[] {
  if (visit[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visit.length + _mochi_idx : _mochi_idx;})()]) {
    return component;
  }
  visit[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? visit.length + _mochi_idx : _mochi_idx;})()] = true;
  component.push(u);
  for (const v of reversed_graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? reversed_graph.length + _mochi_idx : _mochi_idx;})()]) {
    component = dfs2(v, reversed_graph, visit, component);
  }
  return component;
}
function kosaraju(graph: number[][]): number[][] {
  let n: number = _len(graph);
  let reversed_graph: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    reversed_graph.push([]);
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    for (const v of graph[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()]) {
      reversed_graph[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? reversed_graph.length + _mochi_idx : _mochi_idx;})()].push(i);
    }
    i = (i + 1);
  }
  let visit: boolean[] = [];
  i = 0;
  while ((i < n)) {
    visit.push(false);
    i = (i + 1);
  }
  let stack: number[] = [];
  i = 0;
  while ((i < n)) {
    if ((visit[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? visit.length + _mochi_idx : _mochi_idx;})()] == false)) {
      stack = dfs(i, graph, visit, stack);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    visit[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? visit.length + _mochi_idx : _mochi_idx;})()] = false;
    i = (i + 1);
  }
  let scc: number[][] = [];
  let idx: number = (_len(stack) - 1);
  while ((idx >= 0)) {
    let node: number = stack[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
    if ((visit[(()=>{const _mochi_idx = node; return _mochi_idx < 0 ? visit.length + _mochi_idx : _mochi_idx;})()] == false)) {
      let component: number[] = [];
      component = dfs2(node, reversed_graph, visit, component);
      scc.push(component);
    }
    idx = (idx - 1);
  }
  return scc;
}
function main() {
  let graph: number[][] = [[1], [2], [0, 3], [4], []];
  let comps: number[][] = kosaraju(graph);
  let i: number = 0;
  while ((i < _len(comps))) {
    console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(comps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? comps.length + _mochi_idx : _mochi_idx;})()])));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

