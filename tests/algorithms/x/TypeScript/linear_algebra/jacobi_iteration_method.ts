// Generated by Mochi v0.10.63 on 2025-08-12 08:45:46 GMT+7

function absf(x: number): number {
  return ((x < 0.0) ? -x : x);
}
function strictly_diagonally_dominant(matrix: number[][]): boolean {
  let n: number = _len(matrix);
  let i: number = 0;
  while ((i < n)) {
    let sum: number = 0.0;
    let j: number = 0;
    while ((j < n)) {
      if ((i != j)) {
        sum = (sum + absf(matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      }
      j = (j + 1);
    }
    if ((absf(matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) <= sum)) {
      _panic("Coefficient matrix is not strictly diagonally dominant");
    }
    i = (i + 1);
  }
  return true;
}
function jacobi_iteration_method(coefficient: number[][], constant: number[], init_val: number[], iterations: number): number[] {
  let n: number = _len(coefficient);
  if ((n == 0)) {
    _panic("Coefficient matrix cannot be empty");
  }
  if ((_len(constant) != n)) {
    _panic("Constant vector length must equal number of rows in coefficient matrix");
  }
  if ((_len(init_val) != n)) {
    _panic("Initial values count must match matrix size");
  }
  let r: number = 0;
  while ((r < n)) {
    if ((_len(coefficient[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? coefficient.length + _mochi_idx : _mochi_idx;})()]) != n)) {
      _panic("Coefficient matrix must be square");
    }
    r = (r + 1);
  }
  if ((iterations <= 0)) {
    _panic("Iterations must be at least 1");
  }
  strictly_diagonally_dominant(coefficient);
  let x: number[] = init_val;
  let k: number = 0;
  while ((k < iterations)) {
    let new_x: number[] = [];
    let i: number = 0;
    while ((i < n)) {
      let sum: number = 0.0;
      let j: number = 0;
      while ((j < n)) {
        if ((i != j)) {
          sum = (sum + (coefficient[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coefficient.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? coefficient[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coefficient.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * x[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()]));
        }
        j = (j + 1);
      }
      let value = ((constant[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? constant.length + _mochi_idx : _mochi_idx;})()] - sum) / coefficient[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coefficient.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coefficient[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coefficient.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      new_x.push(value);
      i = (i + 1);
    }
    x = new_x;
    k = (k + 1);
  }
  return x;
}
let coefficient: number[][] = [[4.0, 1.0, 1.0], [1.0, 5.0, 2.0], [1.0, 2.0, 4.0]];
let iterations: number = 3;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let constant: number[]
let init_val: number[]
let result: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
constant = [2.0, -6.0, -4.0]
init_val = [0.5, -0.5, -0.5]
result = jacobi_iteration_method(coefficient, constant, init_val, iterations)
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(result)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

