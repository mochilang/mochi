// Generated by Mochi v0.10.63 on 2025-08-12 08:45:54 GMT+7

function invert_matrix(matrix: number[][]): number[][] {
  let n: number = _len(matrix);
  let aug: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    let k: number = 0;
    while ((k < n)) {
      if ((i == k)) {
        row.push(1.0);
      } else {
        row.push(0.0);
      }
      k = (k + 1);
    }
    aug.push(row);
    i = (i + 1);
  }
  let col: number = 0;
  while ((col < n)) {
    let pivot_row: number = col;
    let r: number = col;
    while ((r < n)) {
      if ((aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] != 0.0)) {
        pivot_row = r;
        break
      }
      r = (r + 1);
    }
    if ((aug[(()=>{const _mochi_idx = pivot_row; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = pivot_row; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 0.0)) {
      _panic("Matrix is not invertible");
    }
    if ((pivot_row != col)) {
      let temp: number[] = aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()];
      aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()] = aug[(()=>{const _mochi_idx = pivot_row; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()];
      aug[(()=>{const _mochi_idx = pivot_row; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()] = temp;
    }
    let pivot: number = aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let c: number = 0;
    while ((c < (2 * n))) {
      aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] / pivot);
      c = (c + 1);
    }
    let r2: number = 0;
    while ((r2 < n)) {
      if ((r2 != col)) {
        let factor: number = aug[(()=>{const _mochi_idx = r2; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r2; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        let c2: number = 0;
        while ((c2 < (2 * n))) {
          aug[(()=>{const _mochi_idx = r2; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c2; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r2; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (aug[(()=>{const _mochi_idx = r2; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c2; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r2; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - (factor * aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c2; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
          c2 = (c2 + 1);
        }
      }
      r2 = (r2 + 1);
    }
    col = (col + 1);
  }
  let inv: number[][] = [];
  let r3: number = 0;
  while ((r3 < n)) {
    let row: number[] = [];
    let c3: number = 0;
    while ((c3 < n)) {
      row.push(aug[(()=>{const _mochi_idx = r3; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((c3 + n)); return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r3; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      c3 = (c3 + 1);
    }
    inv.push(row);
    r3 = (r3 + 1);
  }
  return inv;
}
let mat: number[][] = [[4.0, 7.0], [2.0, 6.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("Original Matrix:"));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(mat)));
  console.log(_str("Inverted Matrix:"));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(invert_matrix(mat))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

