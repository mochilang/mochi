// Generated by Mochi v0.10.61 on 2025-08-08 15:57:46 GMT+7

function retroactive_resolution(coefficients: number[][], vector: number[][]): number[][] {
  let rows: number = _len(coefficients);
  let x: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let inner: number[] = [];
    inner.push(0.0);
    x.push(inner);
    i = (i + 1);
  }
  let r: number = (rows - 1);
  while ((r >= 0)) {
    let total: number = 0.0;
    let c: number = (r + 1);
    while ((c < rows)) {
      total = (total + (coefficients[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? coefficients.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? coefficients[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? coefficients.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * x[(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? x[(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      c = (c + 1);
    }
    x[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? x[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ((vector[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? vector[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - total) / coefficients[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? coefficients.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? coefficients[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? coefficients.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    r = (r - 1);
  }
  return x;
}
function gaussian_elimination(coefficients: number[][], vector: number[][]): number[][] {
  let rows: number = _len(coefficients);
  let columns: number = _len(coefficients[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coefficients.length + _mochi_idx : _mochi_idx;})()]);
  if ((rows != columns)) {
    return [];
  }
  let augmented: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < columns)) {
      row.push(coefficients[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coefficients.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? coefficients[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coefficients.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    row.push(vector[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? vector[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    augmented.push(row);
    i = (i + 1);
  }
  let row_idx: number = 0;
  while ((row_idx < (rows - 1))) {
    let pivot: number = augmented[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? augmented[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let col: number = (row_idx + 1);
    while ((col < rows)) {
      let factor: number = (augmented[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? augmented[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] / pivot);
      let k: number = row_idx;
      while ((k < (columns + 1))) {
        augmented[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? augmented[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (augmented[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? augmented[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - (factor * augmented[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? augmented[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      col = (col + 1);
    }
    row_idx = (row_idx + 1);
  }
  let coeffs: number[][] = [];
  let vec: number[][] = [];
  let r: number = 0;
  while ((r < rows)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < columns)) {
      row.push(augmented[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? augmented[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      c = (c + 1);
    }
    coeffs.push(row);
    vec.push([augmented[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = columns; return _mochi_idx < 0 ? augmented[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? augmented.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]]);
    r = (r + 1);
  }
  let x: number[][] = retroactive_resolution(coeffs, vec);
  return x;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (gaussian_elimination([[1.0, -4.0, -2.0], [5.0, 2.0, -2.0], [1.0, -1.0, 0.0]], [[-2.0], [-3.0], [4.0]])).join(' ') + "]"));
  console.log(_str("[" + (gaussian_elimination([[1.0, 2.0], [5.0, 2.0]], [[5.0], [5.0]])).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

