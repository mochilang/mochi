// Generated by Mochi v0.10.61 on 2025-08-08 15:58:07 GMT+7

export interface Complex { re: number; im: number }
function complex_conj(z: Complex): Complex {
  return {"re": z.re, "im": -z.im};
}
function complex_eq(a: Complex, b: Complex): boolean {
  return ((a.re == b.re) && (a.im == b.im));
}
function complex_add(a: Complex, b: Complex): Complex {
  return {"re": (a.re + b.re), "im": (a.im + b.im)};
}
function complex_mul(a: Complex, b: Complex): Complex {
  let real: number = ((a.re * b.re) - (a.im * b.im));
  let imag: number = ((a.re * b.im) + (a.im * b.re));
  return {"re": real, "im": imag};
}
function conj_vector(v: Complex[]): Complex[] {
  let res: Complex[] = [];
  let i: number = 0;
  while ((i < _len(v))) {
    res.push(complex_conj(v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function vec_mat_mul(v: Complex[], m: Complex[][]): Complex[] {
  let result: Complex[] = [];
  let col: number = 0;
  while ((col < _len(m[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()]))) {
    let sum: Complex = {"re": 0.0, "im": 0.0};
    let row: number = 0;
    while ((row < _len(v))) {
      sum = complex_add(sum, complex_mul(v[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()], m[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      row = (row + 1);
    }
    result.push(sum);
    col = (col + 1);
  }
  return result;
}
function dot(a: Complex[], b: Complex[]): Complex {
  let sum: Complex = {"re": 0.0, "im": 0.0};
  let i: number = 0;
  while ((i < _len(a))) {
    sum = complex_add(sum, complex_mul(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()], b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return sum;
}
function is_hermitian(m: Complex[][]): boolean {
  let i: number = 0;
  while ((i < _len(m))) {
    let j: number = 0;
    while ((j < _len(m))) {
      if (!complex_eq(m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], complex_conj(m[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))) {
        return false;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return true;
}
function rayleigh_quotient(a: Complex[][], v: Complex[]): number {
  let v_star: Complex[] = conj_vector(v);
  let v_star_dot: Complex[] = vec_mat_mul(v_star, a);
  let num = dot(v_star_dot, v);
  let den: Complex = dot(v_star, v);
  return (num.re / den.re);
}
let v: Complex[] = [{"re": 1.0, "im": 0.0}, {"re": 2.0, "im": 0.0}, {"re": 3.0, "im": 0.0}];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let a: Complex[][]
let b: Complex[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
a = [[{"re": 2.0, "im": 0.0}, {"re": 2.0, "im": 1.0}, {"re": 4.0, "im": 0.0}], [{"re": 2.0, "im": -1.0}, {"re": 3.0, "im": 0.0}, {"re": 0.0, "im": 1.0}], [{"re": 4.0, "im": 0.0}, {"re": 0.0, "im": -1.0}, {"re": 1.0, "im": 0.0}]]
  if (is_hermitian(a)) {
    let r1: number = rayleigh_quotient(a, v);
    console.log(_str(r1));
    console.log(_str("\n"));
  }
b = [[{"re": 1.0, "im": 0.0}, {"re": 2.0, "im": 0.0}, {"re": 4.0, "im": 0.0}], [{"re": 2.0, "im": 0.0}, {"re": 3.0, "im": 0.0}, {"re": -1.0, "im": 0.0}], [{"re": 4.0, "im": 0.0}, {"re": -1.0, "im": 0.0}, {"re": 1.0, "im": 0.0}]]
  if (is_hermitian(b)) {
    let r2: number = rayleigh_quotient(b, v);
    console.log(_str(r2));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

