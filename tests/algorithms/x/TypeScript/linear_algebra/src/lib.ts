// Generated by Mochi v0.10.59 on 2025-08-07 00:03:48 GMT+7

let PI: number = 3.141592653589793;
let seed: number = 123456789;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function random_int(a: number, b: number): number {
  let r: number = (rand() % ((b - a) + 1));
  return (a + r);
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function arcsin_taylor(x: number): number {
  let term: number = x;
  let sum: number = x;
  let n: number = 1;
  while ((n < 10)) {
    let num = ((((((2.0 * n) - 1.0) * ((2.0 * n) - 1.0)) * x) * x) * term);
    let den: number = ((2.0 * n) * ((2.0 * n) + 1.0));
    term = (num / den);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function acos_taylor(x: number): number {
  return ((PI / 2.0) - arcsin_taylor(x));
}
export interface Vector { components: number[] }
function vector_len(v: Vector): number {
  return _len(v.components);
}
function vector_to_string(v: Vector): string {
  let s: string = "(";
  let i: number = 0;
  while ((i < _len(v.components))) {
    s = (s + _str(v.components[(i) < 0 ? v.components.length + (i) : i]));
    if ((i < (_len(v.components) - 1))) {
      s = (s + ",");
    }
    i = (i + 1);
  }
  s = (s + ")");
  return s;
}
function vector_add(a: Vector, b: Vector): Vector {
  let size: number = vector_len(a);
  if ((size != vector_len(b))) {
    return {"components": []};
  }
  let res: number[] = [];
  let i: number = 0;
  while ((i < size)) {
    res.push((a.components[(i) < 0 ? a.components.length + (i) : i] + b.components[(i) < 0 ? b.components.length + (i) : i]));
    i = (i + 1);
  }
  return {"components": res};
}
function vector_sub(a: Vector, b: Vector): Vector {
  let size: number = vector_len(a);
  if ((size != vector_len(b))) {
    return {"components": []};
  }
  let res: number[] = [];
  let i: number = 0;
  while ((i < size)) {
    res.push((a.components[(i) < 0 ? a.components.length + (i) : i] - b.components[(i) < 0 ? b.components.length + (i) : i]));
    i = (i + 1);
  }
  return {"components": res};
}
function vector_eq(a: Vector, b: Vector): boolean {
  if ((vector_len(a) != vector_len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < vector_len(a))) {
    if ((a.components[(i) < 0 ? a.components.length + (i) : i] != b.components[(i) < 0 ? b.components.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function vector_mul_scalar(v: Vector, s: number): Vector {
  let res: number[] = [];
  let i: number = 0;
  while ((i < vector_len(v))) {
    res.push((v.components[(i) < 0 ? v.components.length + (i) : i] * s));
    i = (i + 1);
  }
  return {"components": res};
}
function vector_dot(a: Vector, b: Vector): number {
  let size: number = vector_len(a);
  if ((size != vector_len(b))) {
    return 0.0;
  }
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < size)) {
    sum = (sum + (a.components[(i) < 0 ? a.components.length + (i) : i] * b.components[(i) < 0 ? b.components.length + (i) : i]));
    i = (i + 1);
  }
  return sum;
}
function vector_copy(v: Vector): Vector {
  let res: number[] = [];
  let i: number = 0;
  while ((i < vector_len(v))) {
    res.push(v.components[(i) < 0 ? v.components.length + (i) : i]);
    i = (i + 1);
  }
  return {"components": res};
}
function vector_component(v: Vector, idx: number): number {
  return v.components[(idx) < 0 ? v.components.length + (idx) : idx];
}
function vector_change_component(v: Vector, pos: number, value: number): Vector {
  let comps: number[] = v.components;
  comps[(pos) < 0 ? comps.length + (pos) : pos] = value;
  return {"components": comps};
}
function vector_euclidean_length(v: Vector): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(v.components))) {
    sum = (sum + (v.components[(i) < 0 ? v.components.length + (i) : i] * v.components[(i) < 0 ? v.components.length + (i) : i]));
    i = (i + 1);
  }
  let result = sqrtApprox(sum);
  return result;
}
function vector_angle(a: Vector, b: Vector, deg: boolean): number {
  let num = vector_dot(a, b);
  let den: number = (vector_euclidean_length(a) * vector_euclidean_length(b));
  let ang = acos_taylor((num / den));
  if (deg) {
    ang = ((ang * 180.0) / PI);
  }
  return ang;
}
function zero_vector(d: number): Vector {
  let res: number[] = [];
  let i: number = 0;
  while ((i < d)) {
    res.push(0.0);
    i = (i + 1);
  }
  return {"components": res};
}
function unit_basis_vector(d: number, pos: number): Vector {
  let res: number[] = [];
  let i: number = 0;
  while ((i < d)) {
    if ((i == pos)) {
      res.push(1.0);
    } else {
      res.push(0.0);
    }
    i = (i + 1);
  }
  return {"components": res};
}
function axpy(s: number, x: Vector, y: Vector): Vector {
  return vector_add(vector_mul_scalar(x, s), y);
}
function random_vector(n: number, a: number, b: number): Vector {
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    res.push(random_int(a, b));
    i = (i + 1);
  }
  return {"components": res};
}
export interface Matrix { data: number[][]; width: number; height: number }
function matrix_to_string(m: Matrix): string {
  let ans: string = "";
  let i: number = 0;
  while ((i < m.height)) {
    ans = (ans + "|");
    let j: number = 0;
    while ((j < m.width)) {
      ans = (ans + _str(m.data[(i) < 0 ? m.data.length + (i) : i][(j) < 0 ? m.data[(i) < 0 ? m.data.length + (i) : i].length + (j) : j]));
      if ((j < (m.width - 1))) {
        ans = (ans + ",");
      }
      j = (j + 1);
    }
    ans = (ans + "|\n");
    i = (i + 1);
  }
  return ans;
}
function matrix_add(a: Matrix, b: Matrix): Matrix {
  if (((a.width != b.width) || (a.height != b.height))) {
    return {"data": [], "width": 0, "height": 0};
  }
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < a.height)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < a.width)) {
      row.push((a.data[(i) < 0 ? a.data.length + (i) : i][(j) < 0 ? a.data[(i) < 0 ? a.data.length + (i) : i].length + (j) : j] + b.data[(i) < 0 ? b.data.length + (i) : i][(j) < 0 ? b.data[(i) < 0 ? b.data.length + (i) : i].length + (j) : j]));
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return {"data": mat, "width": a.width, "height": a.height};
}
function matrix_sub(a: Matrix, b: Matrix): Matrix {
  if (((a.width != b.width) || (a.height != b.height))) {
    return {"data": [], "width": 0, "height": 0};
  }
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < a.height)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < a.width)) {
      row.push((a.data[(i) < 0 ? a.data.length + (i) : i][(j) < 0 ? a.data[(i) < 0 ? a.data.length + (i) : i].length + (j) : j] - b.data[(i) < 0 ? b.data.length + (i) : i][(j) < 0 ? b.data[(i) < 0 ? b.data.length + (i) : i].length + (j) : j]));
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return {"data": mat, "width": a.width, "height": a.height};
}
function matrix_mul_vector(m: Matrix, v: Vector): Vector {
  if ((_len(v.components) != m.width)) {
    return {"components": []};
  }
  let res: Vector = zero_vector(m.height);
  let i: number = 0;
  while ((i < m.height)) {
    let sum: number = 0.0;
    let j: number = 0;
    while ((j < m.width)) {
      sum = (sum + (m.data[(i) < 0 ? m.data.length + (i) : i][(j) < 0 ? m.data[(i) < 0 ? m.data.length + (i) : i].length + (j) : j] * v.components[(j) < 0 ? v.components.length + (j) : j]));
      j = (j + 1);
    }
    res = vector_change_component(res, i, sum);
    i = (i + 1);
  }
  return res;
}
function matrix_mul_scalar(m: Matrix, s: number): Matrix {
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < m.height)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < m.width)) {
      row.push((m.data[(i) < 0 ? m.data.length + (i) : i][(j) < 0 ? m.data[(i) < 0 ? m.data.length + (i) : i].length + (j) : j] * s));
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return {"data": mat, "width": m.width, "height": m.height};
}
function matrix_component(m: Matrix, x: number, y: number): number {
  return m.data[(x) < 0 ? m.data.length + (x) : x][(y) < 0 ? m.data[(x) < 0 ? m.data.length + (x) : x].length + (y) : y];
}
function matrix_change_component(m: Matrix, x: number, y: number, value: number): Matrix {
  let data: number[][] = m.data;
  data[(x) < 0 ? data.length + (x) : x][(y) < 0 ? data[(x) < 0 ? data.length + (x) : x].length + (y) : y] = value;
  return {data, "width": m.width, "height": m.height};
}
function matrix_minor(m: Matrix, x: number, y: number): number {
  if ((m.height != m.width)) {
    return 0.0;
  }
  let minor: number[][] = [];
  let i: number = 0;
  while ((i < m.height)) {
    if ((i != x)) {
      let row: number[] = [];
      let j: number = 0;
      while ((j < m.width)) {
        if ((j != y)) {
          row.push(m.data[(i) < 0 ? m.data.length + (i) : i][(j) < 0 ? m.data[(i) < 0 ? m.data.length + (i) : i].length + (j) : j]);
        }
        j = (j + 1);
      }
      minor.push(row);
    }
    i = (i + 1);
  }
  let sub: Matrix = {"data": minor, "width": (m.width - 1), "height": (m.height - 1)};
  return matrix_determinant(sub);
}
function matrix_cofactor(m: Matrix, x: number, y: number): number {
  let sign: number = ((((x + y) % 2) == 0) ? 1.0 : -1.0);
  return (sign * matrix_minor(m, x, y));
}
function matrix_determinant(m: Matrix): number {
  if ((m.height != m.width)) {
    return 0.0;
  }
  if ((m.height == 0)) {
    return 0.0;
  }
  if ((m.height == 1)) {
    return m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)];
  }
  if ((m.height == 2)) {
    return ((m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * m.data[(Math.trunc(1)) < 0 ? m.data.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? m.data[(Math.trunc(1)) < 0 ? m.data.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)]) - (m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * m.data[(Math.trunc(1)) < 0 ? m.data.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? m.data[(Math.trunc(1)) < 0 ? m.data.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)]));
  }
  let sum: number = 0.0;
  let y: number = 0;
  while ((y < m.width)) {
    sum = (sum + (m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)][(y) < 0 ? m.data[(Math.trunc(0)) < 0 ? m.data.length + (Math.trunc(0)) : Math.trunc(0)].length + (y) : y] * matrix_cofactor(m, 0, y)));
    y = (y + 1);
  }
  return sum;
}
function square_zero_matrix(n: number): Matrix {
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(0.0);
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return {"data": mat, "width": n, "height": n};
}
function random_matrix(w: number, h: number, a: number, b: number): Matrix {
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < h)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < w)) {
      row.push(random_int(a, b));
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return {"data": mat, "width": w, "height": h};
}
function main() {
  let v1: Vector = {"components": [1.0, 2.0, 3.0]};
  let v2: Vector = {"components": [4.0, 5.0, 6.0]};
  console.log(_str(vector_to_string(vector_add(v1, v2))));
  console.log(_str(_str(vector_dot(v1, v2))));
  console.log(_str(_str(vector_euclidean_length(v1))));
  let m: Matrix = {"data": [[1.0, 2.0], [3.0, 4.0]], "width": 2, "height": 2};
  console.log(_str(_str(matrix_determinant(m))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

