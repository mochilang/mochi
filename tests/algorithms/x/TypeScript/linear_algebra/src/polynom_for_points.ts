// Generated by Mochi v0.10.61 on 2025-08-08 15:58:01 GMT+7

function contains_int(xs: number[], x: number): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function split(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function pow_int_float(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function points_to_polynomial(coordinates: number[][]): string {
  if ((_len(coordinates) == 0)) {
    _panic("The program cannot work out a fitting polynomial.");
  }
  let i: number = 0;
  while ((i < _len(coordinates))) {
    if ((_len(coordinates[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()]) != 2)) {
      _panic("The program cannot work out a fitting polynomial.");
    }
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < _len(coordinates))) {
    let k: number = (j + 1);
    while ((k < _len(coordinates))) {
      if (((coordinates[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == coordinates[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) && (coordinates[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == coordinates[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))) {
        _panic("The program cannot work out a fitting polynomial.");
      }
      k = (k + 1);
    }
    j = (j + 1);
  }
  let set_x: number[] = [];
  i = 0;
  while ((i < _len(coordinates))) {
    let x_val: number = coordinates[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    if (!contains_int(set_x, x_val)) {
      set_x.push(x_val);
    }
    i = (i + 1);
  }
  if ((_len(set_x) == 1)) {
    return ("x=" + _str(coordinates[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
  }
  if ((_len(set_x) != _len(coordinates))) {
    _panic("The program cannot work out a fitting polynomial.");
  }
  let n: number = _len(coordinates);
  let matrix: number[][] = [];
  let row: number = 0;
  while ((row < n)) {
    let line: number[] = [];
    let col: number = 0;
    while ((col < n)) {
      let power: number = pow_int_float(coordinates[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], (n - (col + 1)));
      line.push(power);
      col = (col + 1);
    }
    matrix.push(line);
    row = (row + 1);
  }
  let vector: number[] = [];
  row = 0;
  while ((row < n)) {
    vector.push(coordinates[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? coordinates[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? coordinates.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    row = (row + 1);
  }
  let count: number = 0;
  while ((count < n)) {
    let _number: number = 0;
    while ((_number < n)) {
      if ((count != _number)) {
        let fraction = (matrix[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] / matrix[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        let cc: number = 0;
        while ((cc < n)) {
          matrix[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = cc; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (matrix[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = cc; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - (matrix[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = cc; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * fraction));
          cc = (cc + 1);
        }
        vector[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()] = (vector[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()] - (vector[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()] * fraction));
      }
      _number = (_number + 1);
    }
    count = (count + 1);
  }
  let solution: string[] = [];
  count = 0;
  while ((count < n)) {
    let value = (vector[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()] / matrix[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    solution.push(_str(value));
    count = (count + 1);
  }
  let solved: string = "f(x)=";
  count = 0;
  while ((count < n)) {
    let parts = split(solution[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? solution.length + _mochi_idx : _mochi_idx;})()], "e");
    let coeff = solution[(()=>{const _mochi_idx = count; return _mochi_idx < 0 ? solution.length + _mochi_idx : _mochi_idx;})()];
    if ((_len(parts) > 1)) {
      coeff = ((parts[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()] + "*10^") + parts[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()]);
    }
    solved = ((((solved + "x^") + _str((n - (count + 1)))) + "*") + coeff);
    if (((count + 1) != n)) {
      solved = (solved + "+");
    }
    count = (count + 1);
  }
  return solved;
}
function main() {
  console.log(_str(points_to_polynomial([[1, 0], [2, 0], [3, 0]])));
  console.log(_str(points_to_polynomial([[1, 1], [2, 1], [3, 1]])));
  console.log(_str(points_to_polynomial([[1, 1], [2, 4], [3, 9]])));
  console.log(_str(points_to_polynomial([[1, 3], [2, 6], [3, 11]])));
  console.log(_str(points_to_polynomial([[1, -3], [2, -6], [3, -11]])));
  console.log(_str(points_to_polynomial([[1, 1], [1, 2], [1, 3]])));
  console.log(_str(points_to_polynomial([[1, 5], [2, 2], [3, 9]])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

