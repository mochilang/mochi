// Generated by Mochi v0.10.59 on 2025-08-07 00:03:52 GMT+7

function rank_of_matrix(matrix: number[][]): number {
  let rows: number = _len(matrix);
  if ((rows == 0)) {
    return 0;
  }
  let columns: number = ((_len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]) > 0) ? _len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]) : 0);
  let rank: number = ((rows < columns) ? rows : columns);
  let row: number = 0;
  while ((row < rank)) {
    if ((matrix[(row) < 0 ? matrix.length + (row) : row][(row) < 0 ? matrix[(row) < 0 ? matrix.length + (row) : row].length + (row) : row] != 0.0)) {
      let col: number = (row + 1);
      while ((col < rows)) {
        let mult: number = (matrix[(col) < 0 ? matrix.length + (col) : col][(row) < 0 ? matrix[(col) < 0 ? matrix.length + (col) : col].length + (row) : row] / matrix[(row) < 0 ? matrix.length + (row) : row][(row) < 0 ? matrix[(row) < 0 ? matrix.length + (row) : row].length + (row) : row]);
        let i: number = row;
        while ((i < columns)) {
          matrix[(col) < 0 ? matrix.length + (col) : col][(i) < 0 ? matrix[(col) < 0 ? matrix.length + (col) : col].length + (i) : i] = (matrix[(col) < 0 ? matrix.length + (col) : col][(i) < 0 ? matrix[(col) < 0 ? matrix.length + (col) : col].length + (i) : i] - (mult * matrix[(row) < 0 ? matrix.length + (row) : row][(i) < 0 ? matrix[(row) < 0 ? matrix.length + (row) : row].length + (i) : i]));
          i = (i + 1);
        }
        col = (col + 1);
      }
    } else {
      let reduce: boolean = true;
      let i: number = (row + 1);
      while ((i < rows)) {
        if ((matrix[(i) < 0 ? matrix.length + (i) : i][(row) < 0 ? matrix[(i) < 0 ? matrix.length + (i) : i].length + (row) : row] != 0.0)) {
          let temp: number[] = matrix[(row) < 0 ? matrix.length + (row) : row];
          matrix[(row) < 0 ? matrix.length + (row) : row] = matrix[(i) < 0 ? matrix.length + (i) : i];
          matrix[(i) < 0 ? matrix.length + (i) : i] = temp;
          reduce = false;
          break
        }
        i = (i + 1);
      }
      if (reduce) {
        rank = (rank - 1);
        let j: number = 0;
        while ((j < rows)) {
          matrix[(j) < 0 ? matrix.length + (j) : j][(row) < 0 ? matrix[(j) < 0 ? matrix.length + (j) : j].length + (row) : row] = matrix[(j) < 0 ? matrix.length + (j) : j][(rank) < 0 ? matrix[(j) < 0 ? matrix.length + (j) : j].length + (rank) : rank];
          j = (j + 1);
        }
      }
      row = (row - 1);
    }
    row = (row + 1);
  }
  return rank;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

