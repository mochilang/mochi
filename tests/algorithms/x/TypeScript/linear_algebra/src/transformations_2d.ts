// Generated by Mochi v0.10.61 on 2025-08-08 15:58:14 GMT+7

let PI: number = 3.141592653589793;
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function modf(x: number, m: number): number {
  return (x - (Math.floor((x / m)) * m));
}
function sin_taylor(angle: number): number {
  let x: number = modf(angle, (2.0 * PI));
  if ((x > PI)) {
    x = (x - (2.0 * PI));
  }
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = (k1 + 1.0);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_taylor(angle: number): number {
  let x: number = modf(angle, (2.0 * PI));
  if ((x > PI)) {
    x = (x - (2.0 * PI));
  }
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function matrix_to_string(m: number[][]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(m))) {
    let row: number[] = m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()];
    s = (s + "[");
    let j: number = 0;
    while ((j < _len(row))) {
      s = (s + _str(row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()]));
      if ((j < (_len(row) - 1))) {
        s = (s + ", ");
      }
      j = (j + 1);
    }
    s = (s + "]");
    if ((i < (_len(m) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function scaling(f: number): number[][] {
  return [[f, 0.0], [0.0, f]];
}
function rotation(angle: number): number[][] {
  let c: number = cos_taylor(angle);
  let s: number = sin_taylor(angle);
  return [[c, -s], [s, c]];
}
function projection(angle: number): number[][] {
  let c: number = cos_taylor(angle);
  let s: number = sin_taylor(angle);
  let cs: number = (c * s);
  return [[(c * c), cs], [cs, (s * s)]];
}
function reflection(angle: number): number[][] {
  let c: number = cos_taylor(angle);
  let s: number = sin_taylor(angle);
  let cs: number = (c * s);
  return [[((2.0 * c) - 1.0), (2.0 * cs)], [(2.0 * cs), ((2.0 * s) - 1.0)]];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("    scaling(5) = " + matrix_to_string(scaling(5.0)))));
  console.log(_str(("  rotation(45) = " + matrix_to_string(rotation(45.0)))));
  console.log(_str(("projection(45) = " + matrix_to_string(projection(45.0)))));
  console.log(_str(("reflection(45) = " + matrix_to_string(reflection(45.0)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

