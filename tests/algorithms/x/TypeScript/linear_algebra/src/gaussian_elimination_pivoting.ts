// Generated by Mochi v0.10.63 on 2025-08-12 08:46:02 GMT+7

function panic(msg: string) {
  console.log(_str(msg));
}
function abs_float(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function copy_matrix(src: number[][]): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(src))) {
    let row_src: number[] = src[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? src.length + _mochi_idx : _mochi_idx;})()];
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(row_src))) {
      row.push(row_src[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row_src.length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function solve_linear_system(matrix: number[][]): number[] {
  let ab: number[][] = copy_matrix(matrix);
  let num_rows: number = _len(ab);
  let num_cols: number = (_len(ab[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()]) - 1);
  if ((num_rows != num_cols)) {
    panic("Matrix is not square");
    return [];
  }
  let column_num: number = 0;
  while ((column_num < num_rows)) {
    let i: number = column_num;
    while ((i < num_cols)) {
      if ((abs_float(ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) > abs_float(ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))) {
        let temp: number[] = ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()];
        ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()] = ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()];
        ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()] = temp;
      }
      i = (i + 1);
    }
    if ((abs_float(ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) < 1e-08)) {
      panic("Matrix is singular");
      return [];
    }
    if ((column_num != 0)) {
      i = column_num;
      while ((i < num_rows)) {
        let factor: number = (ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((column_num - 1)); return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] / ab[(()=>{const _mochi_idx = Math.trunc((column_num - 1)); return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((column_num - 1)); return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = Math.trunc((column_num - 1)); return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        let j: number = 0;
        while ((j < _len(ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()]))) {
          ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - (factor * ab[(()=>{const _mochi_idx = Math.trunc((column_num - 1)); return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = Math.trunc((column_num - 1)); return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
          j = (j + 1);
        }
        i = (i + 1);
      }
    }
    column_num = (column_num + 1);
  }
  let x_lst: number[] = [];
  let t: number = 0;
  while ((t < num_rows)) {
    x_lst.push(0.0);
    t = (t + 1);
  }
  column_num = (num_rows - 1);
  while ((column_num >= 0)) {
    let x: number = (ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = num_cols; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] / ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    x_lst[(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? x_lst.length + _mochi_idx : _mochi_idx;})()] = x;
    let i: number = (column_num - 1);
    while ((i >= 0)) {
      ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = num_cols; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = num_cols; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - (ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column_num; return _mochi_idx < 0 ? ab[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ab.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * x));
      i = (i - 1);
    }
    column_num = (column_num - 1);
  }
  return x_lst;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let example_matrix: number[][]
let solution: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
example_matrix = [[5.0, -5.0, -3.0, 4.0, -11.0], [1.0, -4.0, 6.0, -4.0, -10.0], [-2.0, -5.0, 4.0, -5.0, -12.0], [-3.0, -3.0, 5.0, -5.0, 8.0]]
  console.log(_str("Matrix:"));
  console.log(_str(example_matrix));
solution = solve_linear_system(example_matrix)
  console.log(_str(solution));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

