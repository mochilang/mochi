// Generated by Mochi v0.10.61 on 2025-08-08 15:58:09 GMT+7

export interface OptionMatrix { value: number[][]; ok: boolean }
function identity(n: number): number[][] {
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      if ((i == j)) {
        row.push(1.0);
      } else {
        row.push(0.0);
      }
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return mat;
}
function transpose(mat: number[][]): number[][] {
  let rows: number = _len(mat);
  let cols: number = _len(mat[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[][] = [];
  let j: number = 0;
  while ((j < cols)) {
    let row: number[] = [];
    let i: number = 0;
    while ((i < rows)) {
      row.push(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      i = (i + 1);
    }
    res.push(row);
    j = (j + 1);
  }
  return res;
}
function matmul(a: number[][], b: number[][]): number[][] {
  let rows: number = _len(a);
  let cols: number = _len(b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
  let inner: number = _len(a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      let sum: number = 0.0;
      let k: number = 0;
      while ((k < inner)) {
        sum = (sum + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function mat_sub(a: number[][], b: number[][]): number[][] {
  let rows: number = _len(a);
  let cols: number = _len(a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      row.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function inverse(mat: number[][]): number[][] {
  let n: number = _len(mat);
  let id: number[][] = identity(n);
  let aug: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: any[] = concat(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()], id[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? id.length + _mochi_idx : _mochi_idx;})()]);
    aug.push(row);
    i = (i + 1);
  }
  let col: number = 0;
  while ((col < n)) {
    let pivot_row: number[] = aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()];
    let pivot: number = pivot_row[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? pivot_row.length + _mochi_idx : _mochi_idx;})()];
    if ((pivot == 0.0)) {
      _panic("matrix is singular");
    }
    let j: number = 0;
    while ((j < (2 * n))) {
      pivot_row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? pivot_row.length + _mochi_idx : _mochi_idx;})()] = (pivot_row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? pivot_row.length + _mochi_idx : _mochi_idx;})()] / pivot);
      j = (j + 1);
    }
    aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()] = pivot_row;
    let r: number = 0;
    while ((r < n)) {
      if ((r != col)) {
        let row_r: number[] = aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()];
        let factor: number = row_r[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? row_r.length + _mochi_idx : _mochi_idx;})()];
        j = 0;
        while ((j < (2 * n))) {
          row_r[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row_r.length + _mochi_idx : _mochi_idx;})()] = (row_r[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row_r.length + _mochi_idx : _mochi_idx;})()] - (factor * pivot_row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? pivot_row.length + _mochi_idx : _mochi_idx;})()]));
          j = (j + 1);
        }
        aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()] = row_r;
      }
      r = (r + 1);
    }
    col = (col + 1);
  }
  let inv: number[][] = [];
  let r: number = 0;
  while ((r < n)) {
    let row: number[] = [];
    let c: number = n;
    while ((c < (2 * n))) {
      row.push(aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      c = (c + 1);
    }
    inv.push(row);
    r = (r + 1);
  }
  return inv;
}
function schur_complement(mat_a: number[][], mat_b: number[][], mat_c: number[][], pseudo_inv: OptionMatrix): number[][] {
  let a_rows: number = _len(mat_a);
  let a_cols: number = _len(mat_a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat_a.length + _mochi_idx : _mochi_idx;})()]);
  if ((a_rows != a_cols)) {
    _panic("Matrix A must be square");
  }
  if ((a_rows != _len(mat_b))) {
    _panic("Expected the same number of rows for A and B");
  }
  if ((_len(mat_b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat_b.length + _mochi_idx : _mochi_idx;})()]) != _len(mat_c[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat_c.length + _mochi_idx : _mochi_idx;})()]))) {
    _panic("Expected the same number of columns for B and C");
  }
  let a_inv: number[][] = [];
  if (pseudo_inv.ok) {
    a_inv = pseudo_inv.value;
  } else {
    a_inv = inverse(mat_a);
  }
  let bt: number[][] = transpose(mat_b);
  let a_inv_b: number[][] = matmul(a_inv, mat_b);
  let bt_a_inv_b: number[][] = matmul(bt, a_inv_b);
  return mat_sub(mat_c, bt_a_inv_b);
}
function print_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    let row: number[] = mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()];
    while ((j < _len(row))) {
      line = (line + _str(row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()]));
      if (((j + 1) < _len(row))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
function main() {
  let a: number[][] = [[1.0, 2.0], [2.0, 1.0]];
  let b: number[][] = [[0.0, 3.0], [3.0, 0.0]];
  let c: number[][] = [[2.0, 1.0], [6.0, 3.0]];
  let none: OptionMatrix = {"value": [], "ok": false};
  let s: number[][] = schur_complement(a, b, c, none);
  print_matrix(s);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

