// Generated by Mochi v0.10.61 on 2025-08-08 15:58:03 GMT+7

export interface PowerResult { eigenvalue: number; eigenvector: number[] }
function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x == 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function dot(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    sum = (sum + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return sum;
}
function mat_vec_mult(mat: number[][], vec: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(mat))) {
    res.push(dot(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()], vec));
    i = (i + 1);
  }
  return res;
}
function norm(vec: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(vec))) {
    sum = (sum + (vec[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vec.length + _mochi_idx : _mochi_idx;})()] * vec[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vec.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let root = sqrtApprox(sum);
  return root;
}
function normalize(vec: number[]): number[] {
  let n: number = norm(vec);
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(vec))) {
    res.push((vec[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vec.length + _mochi_idx : _mochi_idx;})()] / n));
    i = (i + 1);
  }
  return res;
}
function power_iteration(matrix: number[][], vector: number[], error_tol: number, max_iterations: number): PowerResult {
  let v: number[] = normalize(vector);
  let lambda_prev: number = 0.0;
  let lambda: number = 0.0;
  let err: number = 1000000000000.0;
  let iterations: number = 0;
  while (((err > error_tol) && (iterations < max_iterations))) {
    let w: number[] = mat_vec_mult(matrix, v);
    v = normalize(w);
    let mv: number[] = mat_vec_mult(matrix, v);
    lambda = dot(v, mv);
    let denom = ((lambda != 0.0) ? abs(lambda) : 1.0);
    err = (abs((lambda - lambda_prev)) / denom);
    lambda_prev = lambda;
    iterations = (iterations + 1);
  }
  return {"eigenvalue": lambda, "eigenvector": v};
}
let input_matrix: number[][] = [[41.0, 4.0, 20.0], [4.0, 26.0, 30.0], [20.0, 30.0, 50.0]];
let vector: number[] = [41.0, 4.0, 20.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: PowerResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = power_iteration(input_matrix, vector, 1e-12, 100)
  console.log(_str(_str(result.eigenvalue)));
  console.log(_str(_str(result.eigenvector)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

