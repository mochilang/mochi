// Generated by Mochi v0.10.61 on 2025-08-08 15:57:54 GMT+7

function zeros(n: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    res.push(0.0);
    i = (i + 1);
  }
  return res;
}
function dot(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    sum = (sum + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return sum;
}
function mat_vec_mul(m: number[][], v: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(m))) {
    let s: number = 0.0;
    let j: number = 0;
    while ((j < _len(m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()]))) {
      s = (s + (m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    res.push(s);
    i = (i + 1);
  }
  return res;
}
function vec_add(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] + b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function vec_sub(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function scalar_mul(s: number, v: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(v))) {
    res.push((s * v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function norm(v: number[]): number {
  return sqrtApprox(dot(v, v));
}
function conjugate_gradient(A: number[][], b: number[], max_iterations: number, tol: number): number[] {
  let n: number = _len(b);
  let x: number[] = zeros(n);
  let r: number[] = vec_sub(b, mat_vec_mul(A, x));
  let p: number[] = r;
  let rs_old: number = dot(r, r);
  let i: number = 0;
  while ((i < max_iterations)) {
    let Ap: number[] = mat_vec_mul(A, p);
    let alpha: number = (rs_old / dot(p, Ap));
    x = vec_add(x, scalar_mul(alpha, p));
    r = vec_sub(r, scalar_mul(alpha, Ap));
    let rs_new: number = dot(r, r);
    if ((sqrtApprox(rs_new) < tol)) {
      break
    }
    let beta: number = (rs_new / rs_old);
    p = vec_add(r, scalar_mul(beta, p));
    rs_old = rs_new;
    i = (i + 1);
  }
  return x;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let A: number[][]
let b: number[]
let x: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
A = [[8.73256573, -5.02034289, -2.68709226], [-5.02034289, 3.78188322, 0.91980451], [-2.68709226, 0.91980451, 1.94746467]]
b = [-5.80872761, 3.23807431, 1.95381422]
x = conjugate_gradient(A, b, 1000, 1e-08)
  console.log(_str(_str(x[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()])));
  console.log(_str(_str(x[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()])));
  console.log(_str(_str(x[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

