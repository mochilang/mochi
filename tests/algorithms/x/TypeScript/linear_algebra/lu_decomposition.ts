// Generated by Mochi v0.10.63 on 2025-08-12 08:45:51 GMT+7

export interface LU { lower: number[][]; upper: number[][] }
function lu_decomposition(mat: number[][]): LU {
  let n: number = _len(mat);
  if ((n == 0)) {
    return {"lower": [], "upper": []};
  }
  let m: number = _len(mat[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]);
  if ((n != m)) {
    _panic("Matrix must be square");
  }
  let lower: number[][] = [];
  let upper: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let lrow: number[] = [];
    let urow: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      lrow.push(0.0);
      urow.push(0.0);
      j = (j + 1);
    }
    lower.push(lrow);
    upper.push(urow);
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    let j1: number = 0;
    while ((j1 < i)) {
      let total: number = 0.0;
      let k: number = 0;
      while ((k < i)) {
        total = (total + (lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * upper[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? upper[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      if ((upper[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? upper[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 0.0)) {
        _panic("No LU decomposition exists");
      }
      lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ((mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - total) / upper[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? upper[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j1 = (j1 + 1);
    }
    lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1.0;
    let j2: number = i;
    while ((j2 < n)) {
      let total2: number = 0.0;
      let k2: number = 0;
      while ((k2 < i)) {
        total2 = (total2 + (lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? lower[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lower.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * upper[(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? upper[(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k2 = (k2 + 1);
      }
      upper[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? upper[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? upper.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - total2);
      j2 = (j2 + 1);
    }
    i = (i + 1);
  }
  return {lower, upper};
}
function print_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
      line = (line + _str(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      if (((j + 1) < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let matrix: number[][]
let result: LU
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
matrix = [[2.0, -2.0, 1.0], [0.0, 1.0, 2.0], [5.0, 3.0, 1.0]]
result = lu_decomposition(matrix)
  print_matrix(result.lower);
  print_matrix(result.upper);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

