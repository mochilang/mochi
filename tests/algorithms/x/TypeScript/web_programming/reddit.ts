// Generated by Mochi v0.10.59 on 2025-08-07 09:52:58 GMT+7

export interface Post { title: string; url: string; selftext: string }
export interface Child { data: Post }
export interface ListingData { children: Child[] }
export interface Listing { data: ListingData }
function contains(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function join_with_comma(xs: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i > 0)) {
      s = (s + ", ");
    }
    s = (s + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return s;
}
let valid_terms: string[] = ["approved_at_utc", "approved_by", "author_flair_background_color", "author_flair_css_class", "author_flair_richtext", "author_flair_template_id", "author_fullname", "author_premium", "can_mod_post", "category", "clicked", "content_categories", "created_utc", "downs", "edited", "gilded", "gildings", "hidden", "hide_score", "is_created_from_ads_ui", "is_meta", "is_original_content", "is_reddit_media_domain", "is_video", "link_flair_css_class", "link_flair_richtext", "link_flair_text", "link_flair_text_color", "media_embed", "mod_reason_title", "name", "permalink", "pwls", "quarantine", "saved", "score", "secure_media", "secure_media_embed", "selftext", "subreddit", "subreddit_name_prefixed", "subreddit_type", "thumbnail", "title", "top_awarded_type", "total_awards_received", "ups", "upvote_ratio", "url", "user_reports"];
async function get_subreddit_data(subreddit: string, limit: number, age: string, wanted_data: string[]): Record<number, Record<string, string>> {
  let invalid: string[] = [];
  let i: number = 0;
  while ((i < _len(wanted_data))) {
    let term: string = wanted_data[(i) < 0 ? wanted_data.length + (i) : i];
    if (!contains(valid_terms, term)) {
      invalid.push(term);
    }
    i = (i + 1);
  }
  if ((_len(invalid) > 0)) {
    let msg: string = ("Invalid search term: " + join_with_comma(invalid));
    _panic(msg);
  }
  let resp: Listing = await _fetch("tests/github/TheAlgorithms/Mochi/web_programming/reddit_sample.json");
  let result: Record<number, Record<string, string>> = {};
  let idx: number = 0;
  while ((idx < limit)) {
    let post: Child = resp.data.children[(idx) < 0 ? resp.data.children.length + (idx) : idx].data;
    let post_map: Record<string, string> = {};
    if ((_len(wanted_data) == 0)) {
      post_map.title = post.title;
      post_map.url = post.url;
      post_map.selftext = post.selftext;
    } else {
      let j: number = 0;
      while ((j < _len(wanted_data))) {
        let field: string = wanted_data[(j) < 0 ? wanted_data.length + (j) : j];
        if ((field == "title")) {
          post_map.title = post.title;
        } else {
          if ((field == "url")) {
            post_map.url = post.url;
          } else {
            if ((field == "selftext")) {
              post_map.selftext = post.selftext;
            }
          }
        }
        j = (j + 1);
      }
    }
    result[(idx) < 0 ? result.length + (idx) : idx] = post_map;
    idx = (idx + 1);
  }
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
async function _fetch(url: string, opts?: any): Promise<any> {
  const init: RequestInit = { method: opts?.method ?? 'GET' };
  if (opts?.headers) init.headers = opts.headers;
  if (opts && 'body' in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(opts.query)) qs.set(k, String(v));
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  if (!/^https?:/.test(url)) {
    const root = new URL('../../../../..', import.meta.url).pathname;
    const path = url.startsWith('/') ? url : root + url;
    const text = await Deno.readTextFile(path);
    try { return JSON.parse(text); } catch { return text; }
  }
  const resp = await fetch(url, init);
  const text = await resp.text();
  try { return JSON.parse(text); } catch { return text; }
}
(async () => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(await get_subreddit_data("learnpython", 1, "new", ["title", "url", "selftext"])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

