// Generated by Mochi v0.10.59 on 2025-08-07 09:47:37 GMT+7

export interface CovidData { cases: number; deaths: number; recovered: number }
function parse_int(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == ",")) {
      i = (i + 1);
      continue
    }
    value = ((value * 10) + Math.trunc(ch));
    i = (i + 1);
  }
  return value;
}
function find(haystack: string, needle: string, start: number): number {
  let nlen: number = _len(needle);
  let i: number = start;
  while ((i <= (_len(haystack) - nlen))) {
    let j: number = 0;
    let matched: boolean = true;
    while ((j < nlen)) {
      if (((haystack).substring((i + j), ((i + j) + 1)) != (needle).substring(j, (j + 1)))) {
        matched = false;
        break
      }
      j = (j + 1);
    }
    if (matched) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
function extract_numbers(html: string): number[] {
  let nums: number[] = [];
  let pos: number = 0;
  let start_tag: string = "<span>";
  let end_tag: string = "</span>";
  while (true) {
    let s: number = find(html, start_tag, pos);
    if ((s == (0 - 1))) {
      break
    }
    let content_start: number = (s + _len(start_tag));
    let e: number = find(html, end_tag, content_start);
    if ((e == (0 - 1))) {
      break
    }
    let num_str: string = (html).substring(content_start, e);
    nums.push(parse_int(num_str));
    pos = (e + _len(end_tag));
  }
  return nums;
}
function covid_stats(html: string): CovidData {
  let nums: number[] = extract_numbers(html);
  return {"cases": nums[(Math.trunc(0)) < 0 ? nums.length + (Math.trunc(0)) : Math.trunc(0)], "deaths": nums[(Math.trunc(1)) < 0 ? nums.length + (Math.trunc(1)) : Math.trunc(1)], "recovered": nums[(Math.trunc(2)) < 0 ? nums.length + (Math.trunc(2)) : Math.trunc(2)]};
}
function main() {
  let sample_html: string = (("<div class=\"maincounter-number\"><span>123456</span></div>" + "<div class=\"maincounter-number\"><span>7890</span></div>") + "<div class=\"maincounter-number\"><span>101112</span></div>");
  let stats: CovidData = covid_stats(sample_html);
  console.log(_str(("Total COVID-19 cases in the world: " + _str(stats.cases))));
  console.log(_str(("Total deaths due to COVID-19 in the world: " + _str(stats.deaths))));
  console.log(_str(("Total COVID-19 patients recovered in the world: " + _str(stats.recovered))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

