// Generated by Mochi v0.10.59 on 2025-08-07 09:48:01 GMT+7

export interface Page { url: string; html: string }
function index_of(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[(i) < 0 ? s.length + (i) : i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function index_of_substring(s: string, sub: string): number {
  let n: number = _len(s);
  let m: number = _len(sub);
  if ((m == 0)) {
    return 0;
  }
  let i: number = 0;
  while ((i <= (n - m))) {
    let j: number = 0;
    let is_match: boolean = true;
    while ((j < m)) {
      if ((s[(Math.trunc((i + j))) < 0 ? s.length + (Math.trunc((i + j))) : Math.trunc((i + j))] != sub[(j) < 0 ? sub.length + (j) : j])) {
        is_match = false;
        break
      }
      j = (j + 1);
    }
    if (is_match) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let last: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[(i) < 0 ? s.length + (i) : i];
    if ((ch == sep)) {
      parts.push((s).substring(last, i));
      last = (i + 1);
    }
    if (((i + 1) == _len(s))) {
      parts.push((s).substring(last, (i + 1)));
    }
    i = (i + 1);
  }
  return parts;
}
function get_sub_domain_name(url: string): string {
  let proto_pos: number = index_of_substring(url, "://");
  let start: number = 0;
  if ((proto_pos >= 0)) {
    start = (proto_pos + 3);
  }
  let i: number = start;
  while ((i < _len(url))) {
    if ((url[(i) < 0 ? url.length + (i) : i] == "/")) {
      break
    }
    i = (i + 1);
  }
  return (url).substring(start, i);
}
function get_domain_name(url: string): string {
  let sub: string = get_sub_domain_name(url);
  let parts: string[] = split(sub, ".");
  if ((_len(parts) >= 2)) {
    return ((parts[(Math.trunc((_len(parts) - 2))) < 0 ? parts.length + (Math.trunc((_len(parts) - 2))) : Math.trunc((_len(parts) - 2))] + ".") + parts[(Math.trunc((_len(parts) - 1))) < 0 ? parts.length + (Math.trunc((_len(parts) - 1))) : Math.trunc((_len(parts) - 1))]);
  }
  return sub;
}
function is_alnum(ch: string): boolean {
  let chars: string = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  return (index_of(chars, ch) >= 0);
}
function contains(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function bubble_sort(xs: string[]): string[] {
  let arr: string[] = xs;
  let n: number = _len(arr);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while (((j + 1) < (n - i))) {
      if ((arr[(j) < 0 ? arr.length + (j) : j] > arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))])) {
        let tmp: string = arr[(j) < 0 ? arr.length + (j) : j];
        arr[(j) < 0 ? arr.length + (j) : j] = arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))];
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function extract_links(domain: string, html: string): string[] {
  let links: string[] = [];
  let pos: number = index_of_substring(html, "href=");
  while ((pos >= 0)) {
    let start_quote: number = index_of((html).substring((pos + 5), _len(html)), "\"");
    if ((start_quote < 0)) {
      break
    }
    let rest: number = (((pos + 5) + start_quote) + 1);
    let end_quote: number = index_of((html).substring(rest, _len(html)), "\"");
    if ((end_quote < 0)) {
      break
    }
    let link: string = (html).substring(rest, (rest + end_quote));
    if (!contains(links, link)) {
      let absolute: string = link;
      if (!((index_of_substring(link, "http://") == 0) || (index_of_substring(link, "https://") == 0))) {
        if ((index_of_substring(link, "/") == 0)) {
          absolute = (("https://" + domain) + link);
        } else {
          absolute = ((("https://" + domain) + "/") + link);
        }
      }
      links.push(absolute);
    }
    pos = index_of_substring((html).substring((rest + end_quote), _len(html)), "href=");
    if ((pos >= 0)) {
      pos = ((pos + rest) + end_quote);
    }
  }
  return links;
}
function extract_emails(domain: string, text: string): string[] {
  let emails: string[] = [];
  let i: number = 0;
  while ((i < _len(text))) {
    if ((text[(i) < 0 ? text.length + (i) : i] == "@")) {
      if (((text).substring((i + 1), ((i + 1) + _len(domain))) == domain)) {
        let j: number = (i - 1);
        while (((j >= 0) && is_alnum(text[(j) < 0 ? text.length + (j) : j]))) {
          j = (j - 1);
        }
        let local: string = (text).substring((j + 1), i);
        if ((_len(local) > 0)) {
          let email: string = ((local + "@") + domain);
          if (!contains(emails, email)) {
            emails.push(email);
          }
        }
      }
    }
    i = (i + 1);
  }
  return emails;
}
function find_page(pages: Page[], url: string): string {
  let i: number = 0;
  while ((i < _len(pages))) {
    let p: Page = pages[(i) < 0 ? pages.length + (i) : i];
    if ((p.url == url)) {
      return p.html;
    }
    i = (i + 1);
  }
  return "";
}
function emails_from_url(url: string, pages: Page[]): string[] {
  let domain: string = get_domain_name(url);
  let base_html: string = find_page(pages, url);
  let links: string[] = extract_links(domain, base_html);
  let found: string[] = [];
  let i: number = 0;
  while ((i < _len(links))) {
    let html: string = find_page(pages, links[(i) < 0 ? links.length + (i) : i]);
    let emails: string[] = extract_emails(domain, html);
    let j: number = 0;
    while ((j < _len(emails))) {
      if (!contains(found, emails[(j) < 0 ? emails.length + (j) : j])) {
        found.push(emails[(j) < 0 ? emails.length + (j) : j]);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  let sorted: string[] = bubble_sort(found);
  return sorted;
}
let pages: Page[] = [{"url": "https://example.com", "html": "<html><body><a href=\"/contact\">Contact</a></body></html>"}, {"url": "https://example.com/contact", "html": "<html>Contact us at info@example.com or support@example.com</html>"}];
let k: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let emails: string[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
emails = emails_from_url("https://example.com", pages)
  console.log(_str((_str(_len(emails)) + " emails found:")));
  while ((k < _len(emails))) {
    console.log(_str(emails[(k) < 0 ? emails.length + (k) : k]));
    k = (k + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

