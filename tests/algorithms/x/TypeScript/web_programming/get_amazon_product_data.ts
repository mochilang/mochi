// Generated by Mochi v0.10.59 on 2025-08-07 08:57:12 GMT+7

export interface Product { title: string; link: string; price: string; rating: string; mrp: string; discount: number }
function find_index(s: string, pat: string, start: number): number {
  let i: number = start;
  while ((i <= (_len(s) - _len(pat)))) {
    let j: number = 0;
    let ok: boolean = true;
    while ((j < _len(pat))) {
      if ((s[(Math.trunc((i + j))) < 0 ? s.length + (Math.trunc((i + j))) : Math.trunc((i + j))] != pat[(j) < 0 ? pat.length + (j) : j])) {
        ok = false;
        break
      }
      j = (j + 1);
    }
    if (ok) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function slice_between(s: string, start_pat: string, end_pat: string, _from: number): string {
  let a: number = find_index(s, start_pat, _from);
  if ((a < 0)) {
    return "";
  }
  let b: number = (a + _len(start_pat));
  let c: number = find_index(s, end_pat, b);
  if ((c < 0)) {
    return "";
  }
  return (s).substring(b, c);
}
function char_to_digit(c: string): number {
  if ((c == "0")) {
    return 0;
  }
  if ((c == "1")) {
    return 1;
  }
  if ((c == "2")) {
    return 2;
  }
  if ((c == "3")) {
    return 3;
  }
  if ((c == "4")) {
    return 4;
  }
  if ((c == "5")) {
    return 5;
  }
  if ((c == "6")) {
    return 6;
  }
  if ((c == "7")) {
    return 7;
  }
  if ((c == "8")) {
    return 8;
  }
  return 9;
}
function parse_int(txt: string): number {
  let n: number = 0;
  let i: number = 0;
  while ((i < _len(txt))) {
    let c: string = txt[(i) < 0 ? txt.length + (i) : i];
    if (((c >= "0") && (c <= "9"))) {
      n = ((n * 10) + char_to_digit(c));
    }
    i = (i + 1);
  }
  return n;
}
function parse_product(block: string): Product {
  let href: string = slice_between(block, "href=\"", "\"", 0);
  let link: string = ("https://www.amazon.in" + href);
  let title: string = slice_between(block, ">", "</a>", find_index(block, "<a", 0));
  let price: string = slice_between(block, "<span class=\"a-offscreen\">", "</span>", 0);
  let rating: string = slice_between(block, "<span class=\"a-icon-alt\">", "</span>", 0);
  if ((_len(rating) == 0)) {
    rating = "Not available";
  }
  let mrp: string = slice_between(block, "<span class=\"a-price a-text-price\">", "</span>", 0);
  let disc: number = 0.0;
  if (((_len(mrp) > 0) && (_len(price) > 0))) {
    let p: number = parse_int(price);
    let m: number = parse_int(mrp);
    if ((m > 0)) {
      disc = (((m - p) * 100) / m);
    }
  } else {
    mrp = "";
    disc = 0.0;
  }
  return {title, link, price, rating, mrp, "discount": disc};
}
function get_amazon_product_data(product: string): Product[] {
  let html: string = "<div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/sample_product\">Sample Product</a></h2><span class=\"a-offscreen\">₹900</span><span class=\"a-icon-alt\">4.3 out of 5 stars</span><span class=\"a-price a-text-price\">₹1000</span></div><div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/item2\">Another Product</a></h2><span class=\"a-offscreen\">₹500</span><span class=\"a-icon-alt\">3.8 out of 5 stars</span><span class=\"a-price a-text-price\">₹800</span></div>";
  let out: Product[] = [];
  let start: number = 0;
  while (true) {
    let div_start: number = find_index(html, "<div class=\"s-result-item\"", start);
    if ((div_start < 0)) {
      break
    }
    let div_end: number = find_index(html, "</div>", div_start);
    if ((div_end < 0)) {
      break
    }
    let block: string = (html).substring(div_start, div_end);
    out.push(parse_product(block));
    start = (div_end + _len("</div>"));
  }
  return out;
}
function main() {
  let products: Product[] = get_amazon_product_data("laptop");
  let i: number = 0;
  while ((i < _len(products))) {
    let p: Product = products[(i) < 0 ? products.length + (i) : i];
    console.log(_str(((((((((((p.title + " | ") + p.link) + " | ") + p.price) + " | ") + p.rating) + " | ") + p.mrp) + " | ") + _str(p.discount))));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

