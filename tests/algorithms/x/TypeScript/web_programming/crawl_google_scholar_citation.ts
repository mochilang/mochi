// Generated by Mochi v0.10.59 on 2025-08-07 09:47:40 GMT+7

export interface Params { title: string; journal: string; volume: string; pages: string; year: string; hl: string }
let DIGITS: string = "0123456789";
function is_digit(ch: string): boolean {
  let i: number = 0;
  while ((i < _len(DIGITS))) {
    if ((DIGITS[(i) < 0 ? DIGITS.length + (i) : i] == ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function find_substring(haystack: string, needle: string): number {
  let i: number = 0;
  while ((i <= (_len(haystack) - _len(needle)))) {
    let j: number = 0;
    while ((j < _len(needle))) {
      if ((haystack[(Math.trunc((i + j))) < 0 ? haystack.length + (Math.trunc((i + j))) : Math.trunc((i + j))] != needle[(j) < 0 ? needle.length + (j) : j])) {
        break
      }
      j = (j + 1);
    }
    if ((j == _len(needle))) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function extract_citation(html: string): string {
  let marker: string = "Cited by ";
  let idx: number = find_substring(html, marker);
  if ((idx < 0)) {
    return "";
  }
  let pos: number = (idx + _len(marker));
  let result: string = "";
  while ((pos < _len(html))) {
    let ch: string = html[(pos) < 0 ? html.length + (pos) : pos];
    if (!is_digit(ch)) {
      break
    }
    result = (result + ch);
    pos = (pos + 1);
  }
  return result;
}
function get_citation(base_url: string, params: Record<string, string>): string {
  let html: string = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>";
  return extract_citation(html);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
const __name__ = "__main__";
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  if ((__name__ == "__main__")) {
    let params: Params = {"title": "Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density", "journal": "Chem. Mater.", "volume": "30", "pages": "3979-3990", "year": "2018", "hl": "en"};
    console.log(_str(get_citation("https://scholar.google.com/scholar_lookup", params)));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

