// Generated by Mochi v0.10.73 on 2025-08-25 22:35:08 GMT+7

function find_from(s: string, pattern: string, start: number): number {
  let n: number = _len(s);
  let m: number = _len(pattern);
  let i: number = start;
  while ((i <= (n - m))) {
    if (((s).substring(i, (i + m)) === pattern)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function download_image(html: string): string {
  let tag: string = "<meta property=\"og:image\"";
  let idx_tag: number = find_from(html, tag, 0);
  if ((idx_tag === -1)) {
    return "No meta tag with property 'og:image' was found.";
  }
  let key: string = "content=\"";
  let idx_content: number = find_from(html, key, idx_tag);
  if ((idx_content === -1)) {
    return "Image URL not found in meta tag.";
  }
  let start: number = (idx_content + _len(key));
  let end: number = start;
  while (((end < _len(html)) && ((html).substring(end, (end + 1)) !== "\""))) {
    end = (end + 1);
  }
  if ((end >= _len(html))) {
    return "Image URL not found in meta tag.";
  }
  let image_url: string = (html).substring(start, end);
  return ("Image URL: " + image_url);
}
let sample_html: string = "<html><head><meta property=\"og:image\" content=\"https://example.com/pic.jpg\"/></head></html>";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return x.map(_str).join(',');
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(download_image(sample_html)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

