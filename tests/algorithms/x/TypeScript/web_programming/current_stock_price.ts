// Generated by Mochi v0.10.59 on 2025-08-07 09:47:44 GMT+7

export interface Pages { AAPL: string; AMZN: string; IBM: string; GOOG: string; MSFT: string; ORCL: string }
function find(text: string, pattern: string, start: number): number {
  let i: number = start;
  let limit: number = (_len(text) - _len(pattern));
  while ((i <= limit)) {
    if (((text).substring(i, (i + _len(pattern))) == pattern)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function stock_price(_symbol: string): string {
  let pages: Pages = {"AAPL": "<span data-testid=\"qsp-price\">228.43</span>", "AMZN": "<span data-testid=\"qsp-price\">201.85</span>", "IBM": "<span data-testid=\"qsp-price\">210.30</span>", "GOOG": "<span data-testid=\"qsp-price\">177.86</span>", "MSFT": "<span data-testid=\"qsp-price\">414.82</span>", "ORCL": "<span data-testid=\"qsp-price\">188.87</span>"};
  if ((_symbol in pages)) {
    let html = pages[(_symbol) < 0 ? pages.length + (_symbol) : _symbol];
    let marker: string = "<span data-testid=\"qsp-price\">";
    let start_idx: number = find(html, marker, 0);
    if ((start_idx != -1)) {
      let price_start: number = (start_idx + _len(marker));
      let end_idx: number = find(html, "</span>", price_start);
      if ((end_idx != -1)) {
        return (html).substring(price_start, end_idx);
      }
    }
  }
  return "No <fin-streamer> tag with the specified data-testid attribute found.";
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (const _symbol of ["AAPL", "AMZN", "IBM", "GOOG", "MSFT", "ORCL"]) {
    console.log(_str(((("Current " + _symbol) + " stock price is ") + stock_price(_symbol))));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

