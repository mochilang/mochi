// Generated by Mochi v0.10.59 on 2025-08-07 09:53:38 GMT+7

export interface Headers { "Content-Type": string }
async function send_slack_message(message_body: string, slack_url: string): string {
  let headers: Headers = {"Content-Type": "application/json"};
  let response: string = await _fetch(slack_url, {method: "POST", headers, body: {text: message_body}});
  if ((response != "ok")) {
    _panic(("Request to slack returned an error: " + response));
  }
  return response;
}
let url: string = "https://httpbin.org/post";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
async function _fetch(url: string, opts?: any): Promise<any> {
  const init: RequestInit = { method: opts?.method ?? 'GET' };
  if (opts?.headers) init.headers = opts.headers;
  if (opts && 'body' in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(opts.query)) qs.set(k, String(v));
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  if (!/^https?:/.test(url)) {
    const root = new URL('../../../../..', import.meta.url).pathname;
    const path = url.startsWith('/') ? url : root + url;
    const text = await Deno.readTextFile(path);
    try { return JSON.parse(text); } catch { return text; }
  }
  const resp = await fetch(url, init);
  const text = await resp.text();
  try { return JSON.parse(text); } catch { return text; }
}
(async () => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  await send_slack_message("Hello from Mochi", url);
  console.log(_str("Message sent"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

