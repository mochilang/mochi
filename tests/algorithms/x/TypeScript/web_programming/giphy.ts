// Generated by Mochi v0.10.59 on 2025-08-07 09:54:39 GMT+7

export interface Gif { url: string }
function format_query(q: string): string {
  let result: string = "";
  let i: number = 0;
  while ((i < _len(q))) {
    let ch: string = q.slice(i, (i + 1));
    if ((ch == " ")) {
      result = (result + "+");
    } else {
      result = (result + ch);
    }
    i = (i + 1);
  }
  return result;
}
function join(xs: string[], sep: string): string {
  if ((_len(xs) == 0)) {
    return "";
  }
  let out: string = xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(xs))) {
    out = ((out + sep) + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return out;
}
function get_gifs(query: string): string[] {
  let formatted: string = format_query(query);
  let gifs: Gif[] = JSON.parse(Deno.readTextFileSync(new URL('../../../../..', import.meta.url).pathname + "tests/github/TheAlgorithms/Mochi/web_programming/giphy.json"));
  let urls: string[] = [];
  for (const g of gifs) {
    urls.push(g.url);
  }
  return urls;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(join(get_gifs("space ship"), "\n")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

