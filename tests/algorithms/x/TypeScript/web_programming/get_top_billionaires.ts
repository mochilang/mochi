// Generated by Mochi v0.10.59 on 2025-08-07 08:57:15 GMT+7

export interface Entry { Name: string; Source: string; Country: string; Gender: string; "Worth ($)": string; Age: string }
let LIMIT: number = 10;
let TODAY_MS: number = 1705017600000.0;
export interface Person { finalWorth: number; personName: string; source: string; countryOfCitizenship: string; gender: string; birthDate: number }
export interface PersonsWrapper { personsLists: Person[]; count: number }
export interface Response { personList: PersonsWrapper }
function round1(value: number): number {
  if ((value >= 0.0)) {
    let scaled: number = Math.trunc(((value * 10.0) + 0.5));
    return (scaled / 10.0);
  }
  let scaled: number = Math.trunc(((value * 10.0) - 0.5));
  return (scaled / 10.0);
}
function years_old(birth_ms: number, today_ms: number): number {
  let ms_per_year: number = 31557600000.0;
  return Math.trunc(((today_ms - birth_ms) / ms_per_year));
}
async function get_forbes_real_time_billionaires(): Record<string, string>[] {
  let response: Response = await _fetch(API_URL);
  let out: Record<string, string>[] = [];
  for (const person of response.personList.personsLists) {
    let worth_billion: number = round1((person.finalWorth / 1000.0));
    let age_years: number = years_old(person.birthDate, TODAY_MS);
    let entry: Entry = {"Name": person.personName, "Source": person.source, "Country": person.countryOfCitizenship, "Gender": person.gender, "Worth ($)": (_str(worth_billion) + " Billion"), "Age": _str(age_years)};
    out.push(entry);
  }
  return out;
}
async function display_billionaires(list: Record<string, string>[]) {
  for (const b of list) {
    console.log(_str(((((((((((b.Name + " | ") + b.Source) + " | ") + b.Country) + " | ") + b.Gender) + " | ") + b[("Worth ($)") < 0 ? b.length + ("Worth ($)") : "Worth ($)"]) + " | ") + b.Age)));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
async function _fetch(url: string, opts?: any): Promise<any> {
  const init: RequestInit = { method: opts?.method ?? 'GET' };
  if (opts?.headers) init.headers = opts.headers;
  if (opts && 'body' in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(opts.query)) qs.set(k, String(v));
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  const resp = await fetch(url, init);
  const text = await resp.text();
  try { return JSON.parse(text); } catch { return text; }
}
let API_URL: string
(async () => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
API_URL = ("https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=" + _str(LIMIT))
  display_billionaires(get_forbes_real_time_billionaires());
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

