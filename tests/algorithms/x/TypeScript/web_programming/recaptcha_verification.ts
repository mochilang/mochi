// Generated by Mochi v0.10.59 on 2025-08-07 08:57:25 GMT+7

export interface Request { method: string; post: Record<string, string> }
function http_post(secret: string, client: string): Record<string, boolean> {
  let success: boolean = ((secret == "secretKey") && (client == "clientKey"));
  return {success};
}
function authenticate(username: string, password: string): boolean {
  return ((username == "user") && (password == "pass"));
}
function login(_user: string) {
}
function render(page: string): string {
  return ("render:" + page);
}
function redirect(url: string): string {
  return ("redirect:" + url);
}
function login_using_recaptcha(request: Request): string {
  let secret_key: string = "secretKey";
  if ((request.method != "POST")) {
    return render("login.html");
  }
  let username: string = request.post.username;
  let password: string = request.post.password;
  let client_key: string = request.post[("g-recaptcha-response") < 0 ? request.post.length + ("g-recaptcha-response") : "g-recaptcha-response"];
  let response: Record<string, boolean> = http_post(secret_key, client_key);
  if (response.success) {
    if (authenticate(username, password)) {
      login(username);
      return redirect("/your-webpage");
    }
  }
  return render("login.html");
}
let get_request: Request = {"method": "GET", "post": {}};
let ok_request: Request = {"method": "POST", "post": {"username": "user", "password": "pass", "g-recaptcha-response": "clientKey"}};
let bad_request: Request = {"method": "POST", "post": {"username": "user", "password": "wrong", "g-recaptcha-response": "clientKey"}};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(login_using_recaptcha(get_request)));
  console.log(_str(login_using_recaptcha(ok_request)));
  console.log(_str(login_using_recaptcha(bad_request)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

