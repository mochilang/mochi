// Generated by Mochi v0.10.59 on 2025-08-07 09:47:38 GMT+7

export interface Link { href: string; text: string }
function index_of_from(s: string, sub: string, start: number): number {
  let i: number = start;
  let max = (_len(s) - _len(sub));
  while ((i <= max)) {
    if ((s.slice(i, (i + _len(sub))) == sub)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function extract_links(html: string): Record<string, string>[] {
  let res: Record<string, string>[] = [];
  let i: number = 0;
  while (true) {
    let tag_start: number = index_of_from(html, "<a class=\"eZt8xd\"", i);
    if ((tag_start == -1)) {
      break
    }
    let href_start: number = index_of_from(html, "href=\"", tag_start);
    if ((href_start == -1)) {
      break
    }
    href_start = (href_start + _len("href=\""));
    let href_end: number = index_of_from(html, "\"", href_start);
    if ((href_end == -1)) {
      break
    }
    let href: string = html.slice(href_start, href_end);
    let text_start: number = (index_of_from(html, ">", href_end) + 1);
    let text_end: number = index_of_from(html, "</a>", text_start);
    if ((text_end == -1)) {
      break
    }
    let text: string = html.slice(text_start, text_end);
    let link: Link = {href, text};
    res.push(link);
    i = (text_end + _len("</a>"));
  }
  return res;
}
function main() {
  let html: string = (("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" + "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>") + "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>");
  let links: Record<string, string>[] = extract_links(html);
  console.log(_str(_str(_len(links))));
  let i: number = 0;
  while (((i < _len(links)) && (i < 5))) {
    let link: Record<string, string> = links[(i) < 0 ? links.length + (i) : i];
    let href: string = link.href;
    let text: string = link.text;
    if ((text == "Maps")) {
      console.log(_str(href));
    } else {
      console.log(_str(("https://google.com" + href)));
    }
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

