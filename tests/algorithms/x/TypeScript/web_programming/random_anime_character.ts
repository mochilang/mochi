// Generated by Mochi v0.10.59 on 2025-08-07 09:51:40 GMT+7

let seed: number = 123456789;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function random_int(a: number, b: number): number {
  return (a + (rand() % (b - a)));
}
export interface Character { title: string; description: string; image_file: string }
let characters: Character[] = [{"title": "Naruto Uzumaki", "description": "A spirited ninja of the Hidden Leaf Village.", "image_file": "naruto.png"}, {"title": "Sailor Moon", "description": "A magical girl who fights for love and justice.", "image_file": "sailor_moon.png"}, {"title": "Spike Spiegel", "description": "A bounty hunter with a laid-back attitude.", "image_file": "spike_spiegel.png"}];
function save_image(_name: string) {
}
function random_anime_character(): Character {
  let idx: number = random_int(0, _len(characters));
  let ch: Character = characters[(idx) < 0 ? characters.length + (idx) : idx];
  save_image(ch.image_file);
  return ch;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let c: Character
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
c = random_anime_character()
  console.log(_str(c.title));
  console.log(_str(""));
  console.log(_str(c.description));
  console.log(_str(""));
  console.log(_str(("Image saved : " + c.image_file)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

