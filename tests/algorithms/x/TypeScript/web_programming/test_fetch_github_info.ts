// Generated by Mochi v0.10.59 on 2025-08-07 08:57:30 GMT+7

let AUTHENTICATED_USER_ENDPOINT: string = "https://api.github.com/user";
export interface GitHubUser { login: string; id: number }
function get_header(hs: string[][], key: string): string {
  let i: number = 0;
  while ((i < _len(hs))) {
    let pair: string[] = hs[(i) < 0 ? hs.length + (i) : i];
    if ((pair[(Math.trunc(0)) < 0 ? pair.length + (Math.trunc(0)) : Math.trunc(0)] == key)) {
      return pair[(Math.trunc(1)) < 0 ? pair.length + (Math.trunc(1)) : Math.trunc(1)];
    }
    i = (i + 1);
  }
  return "";
}
function mock_response(url: string, headers: string[][]): GitHubUser {
  if ((url != AUTHENTICATED_USER_ENDPOINT)) {
    _panic("wrong url");
  }
  let auth: string = get_header(headers, "Authorization");
  if ((_len(auth) == 0)) {
    _panic("missing Authorization");
  }
  if ((auth.slice(0, 6) != "token ")) {
    _panic("bad token prefix");
  }
  let accept: string = get_header(headers, "Accept");
  if ((_len(accept) == 0)) {
    _panic("missing Accept");
  }
  return {"login": "test", "id": 1};
}
function fetch_github_info(auth_token: string): GitHubUser {
  let headers: string[][] = [["Authorization", ("token " + auth_token)], ["Accept", "application/vnd.github.v3+json"]];
  return mock_response(AUTHENTICATED_USER_ENDPOINT, headers);
}
function test_fetch_github_info() {
  let result: GitHubUser = fetch_github_info("token");
  if ((result.login != "test")) {
    _panic("login mismatch");
  }
  if ((result.id != 1)) {
    _panic("id mismatch");
  }
  console.log(_str(result.login));
  console.log(_str(_str(result.id)));
}
function main() {
  test_fetch_github_info();
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

