// Generated by Mochi v0.10.59 on 2025-08-07 09:47:46 GMT+7

export interface Params_openweathermap { q: string; appid: string }
export interface Params_weatherstack { query: string; access_key: string }
let OPENWEATHERMAP_API_KEY: string = "demo";
let WEATHERSTACK_API_KEY: string = "";
let OPENWEATHERMAP_URL_BASE: string = "https://api.openweathermap.org/data/2.5/weather";
let WEATHERSTACK_URL_BASE: string = "http://api.weatherstack.com/current";
function http_get(url: string, params: Record<string, string>): Record<string, string> {
  if (("q" in params)) {
    return {"location": params.q, "temperature": "20"};
  }
  return {"location": params.query, "temperature": "20"};
}
function current_weather(location: string): Record<string, Record<string, string>>[] {
  let weather_data: Record<string, Record<string, string>>[] = [];
  if ((OPENWEATHERMAP_API_KEY != "")) {
    let params_openweathermap: Params_openweathermap = {"q": location, "appid": OPENWEATHERMAP_API_KEY};
    let response_openweathermap = http_get(OPENWEATHERMAP_URL_BASE, params_openweathermap);
    weather_data.push({"OpenWeatherMap": response_openweathermap});
  }
  if ((WEATHERSTACK_API_KEY != "")) {
    let params_weatherstack: Params_weatherstack = {"query": location, "access_key": WEATHERSTACK_API_KEY};
    let response_weatherstack = http_get(WEATHERSTACK_URL_BASE, params_weatherstack);
    weather_data.push({"Weatherstack": response_weatherstack});
  }
  if ((_len(weather_data) == 0)) {
    _panic("No API keys provided or no valid data returned.");
  }
  return weather_data;
}
function main() {
  let data: Record<string, Record<string, string>>[] = current_weather("New York");
  console.log(_str(_str(data)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

