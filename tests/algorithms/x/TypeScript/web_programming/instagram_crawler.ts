// Generated by Mochi v0.10.59 on 2025-08-07 09:50:44 GMT+7

export interface EdgeCount { count: number }
export interface UserData { username: string; full_name: string; biography: string; business_email: string; external_url: string; edge_followed_by: EdgeCount; edge_follow: EdgeCount; edge_owner_to_timeline_media: EdgeCount; profile_pic_url_hd: string; is_verified: boolean; is_private: boolean }
function index_of(s: string, sub: string): number {
  let i: number = 0;
  while ((i <= (_len(s) - _len(sub)))) {
    if (((s).substring(i, (i + _len(sub))) == sub)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function parse_int(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    value = ((value * 10) + parseIntStr(s[(i) < 0 ? s.length + (i) : i], 10));
    i = (i + 1);
  }
  return value;
}
function extract_string(text: string, key: string): string {
  let pattern: string = (("\"" + key) + "\":\"");
  let start: number = (index_of(text, pattern) + _len(pattern));
  let end: number = start;
  while (((end < _len(text)) && ((text).substring(end, (end + 1)) != "\""))) {
    end = (end + 1);
  }
  return (text).substring(start, end);
}
function extract_int(text: string, key: string): number {
  let pattern: string = (("\"" + key) + "\":{\"count\":");
  let start: number = (index_of(text, pattern) + _len(pattern));
  let end: number = start;
  while ((end < _len(text))) {
    let ch: string = text[(end) < 0 ? text.length + (end) : end];
    if (((ch < "0") || (ch > "9"))) {
      break
    }
    end = (end + 1);
  }
  let digits: string = (text).substring(start, end);
  let num = parse_int(digits);
  return num;
}
function extract_bool(text: string, key: string): boolean {
  let pattern: string = (("\"" + key) + "\":");
  let start: number = (index_of(text, pattern) + _len(pattern));
  let val: string = (text).substring(start, (start + 5));
  let first = val[(Math.trunc(0)) < 0 ? val.length + (Math.trunc(0)) : Math.trunc(0)];
  if ((first == "t")) {
    return true;
  }
  return false;
}
function extract_user_profile(script: string): UserData {
  return {"username": extract_string(script, "username"), "full_name": extract_string(script, "full_name"), "biography": extract_string(script, "biography"), "business_email": extract_string(script, "business_email"), "external_url": extract_string(script, "external_url"), "edge_followed_by": {"count": extract_int(script, "edge_followed_by")}, "edge_follow": {"count": extract_int(script, "edge_follow")}, "edge_owner_to_timeline_media": {"count": extract_int(script, "edge_owner_to_timeline_media")}, "profile_pic_url_hd": extract_string(script, "profile_pic_url_hd"), "is_verified": extract_bool(script, "is_verified"), "is_private": extract_bool(script, "is_private")};
}
let sample_script: string = "{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let user: UserData
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
user = extract_user_profile(sample_script)
  console.log(_str(((((user.full_name + " (") + user.username) + ") is ") + user.biography)));
  console.log(_str(("number_of_posts = " + _str(user.edge_owner_to_timeline_media.count))));
  console.log(_str(("number_of_followers = " + _str(user.edge_followed_by.count))));
  console.log(_str(("number_of_followings = " + _str(user.edge_follow.count))));
  console.log(_str(("email = " + user.business_email)));
  console.log(_str(("website = " + user.external_url)));
  console.log(_str(("profile_picture_url = " + user.profile_pic_url_hd)));
  console.log(_str(("is_verified = " + _str(user.is_verified))));
  console.log(_str(("is_private = " + _str(user.is_private))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

