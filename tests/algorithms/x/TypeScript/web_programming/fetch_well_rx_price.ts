// Generated by Mochi v0.10.59 on 2025-08-07 09:49:44 GMT+7

let SAMPLE_HTML: string = "<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>";
function find_substring(s: string, sub: string, _from: number): number {
  let i: number = _from;
  while ((i <= (_len(s) - _len(sub)))) {
    let j: number = 0;
    while (((j < _len(sub)) && ((s).substring((i + j), ((i + j) + 1)) == (sub).substring(j, (j + 1))))) {
      j = (j + 1);
    }
    if ((j == _len(sub))) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function fetch_pharmacy_and_price_list(drug_name: string, zip_code: string): Record<string, string>[] {
  if (((drug_name == "") || (zip_code == ""))) {
    return null;
  }
  let results: Record<string, string>[] = [];
  let pos: number = 0;
  let block_tag: string = "<div class=\"grid-x pharmCard\">";
  let name_tag: string = "<p class=\"list-title\">";
  let price_tag: string = "<span class=\"price price-large\">";
  while (true) {
    let div_idx: number = find_substring(SAMPLE_HTML, block_tag, pos);
    if ((div_idx < 0)) {
      break
    }
    let name_start: number = find_substring(SAMPLE_HTML, name_tag, div_idx);
    if ((name_start < 0)) {
      break
    }
    name_start = (name_start + _len(name_tag));
    let name_end: number = find_substring(SAMPLE_HTML, "</p>", name_start);
    if ((name_end < 0)) {
      break
    }
    let name: string = (SAMPLE_HTML).substring(name_start, name_end);
    let price_start: number = find_substring(SAMPLE_HTML, price_tag, name_end);
    if ((price_start < 0)) {
      break
    }
    price_start = (price_start + _len(price_tag));
    let price_end: number = find_substring(SAMPLE_HTML, "</span>", price_start);
    if ((price_end < 0)) {
      break
    }
    let price: string = (SAMPLE_HTML).substring(price_start, price_end);
    results.push({"pharmacy_name": name, price});
    pos = price_end;
  }
  return results;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let pharmacy_price_list: Record<string, string>[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
pharmacy_price_list = fetch_pharmacy_and_price_list("aspirin", "30303")
  if ((pharmacy_price_list != null)) {
    let i: number = 0;
    while ((i < _len(pharmacy_price_list))) {
      let entry: Record<string, string> = pharmacy_price_list[(i) < 0 ? pharmacy_price_list.length + (i) : i];
      console.log(_str(((("Pharmacy: " + entry.pharmacy_name) + " Price: ") + entry.price)));
      i = (i + 1);
    }
  } else {
    console.log(_str("No results found"));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

