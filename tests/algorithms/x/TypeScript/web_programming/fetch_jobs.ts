// Generated by Mochi v0.10.59 on 2025-08-07 09:48:08 GMT+7

export interface Job { title: string; company: string }
let SAMPLE_HTML: string = "<div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">Android Developer</a><span class=\"company\">ABC Corp</span></div><div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">iOS Engineer</a><span class=\"company\">XYZ Ltd</span></div>";
function indexOf(s: string, sub: string, start: number): number {
  let n: number = _len(s);
  let m: number = _len(sub);
  let i: number = start;
  while ((i <= (n - m))) {
    let j: number = 0;
    let ok: boolean = true;
    while ((j < m)) {
      if (((s).substring((i + j), ((i + j) + 1)) != (sub).substring(j, (j + 1)))) {
        ok = false;
        break
      }
      j = (j + 1);
    }
    if (ok) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
function splitBy(s: string, sep: string): string[] {
  let res: string[] = [];
  let start: number = 0;
  let sepLen: number = _len(sep);
  let idx = s.indexOf(sep, 0);
  while ((idx != (0 - 1))) {
    res.push((s).substring(start, idx));
    start = (idx + sepLen);
    idx = s.indexOf(sep, start);
  }
  res.push((s).substring(start, _len(s)));
  return res;
}
function between(s: string, startTag: string, endTag: string): string {
  let startIdx = s.indexOf(startTag, 0);
  if ((startIdx == (0 - 1))) {
    return "";
  }
  startIdx = (startIdx + _len(startTag));
  let endIdx = s.indexOf(endTag, startIdx);
  if ((endIdx == (0 - 1))) {
    return "";
  }
  return (s).substring(startIdx, endIdx);
}
function intToString(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let num: number = n;
  let digits: string = "";
  while ((num > 0)) {
    let d = (num % 10);
    digits = (("0123456789").substring(d, (d + 1)) + digits);
    num = Math.trunc(num / 10);
  }
  return digits;
}
function fetch_jobs(location: string): Job[] {
  let blocks: string[] = splitBy(SAMPLE_HTML, "data-tn-component=\"organicJob\"");
  let jobs: Job[] = [];
  let i: number = 1;
  while ((i < _len(blocks))) {
    let block: string = blocks[(i) < 0 ? blocks.length + (i) : i];
    let title: string = between(block, "data-tn-element=\"jobTitle\">", "</a>");
    let company: string = between(block, "class=\"company\">", "</span>");
    jobs.push({title, company});
    i = (i + 1);
  }
  return jobs;
}
function main() {
  let jobs: Job[] = fetch_jobs("Bangalore");
  let i: number = 0;
  while ((i < _len(jobs))) {
    let j: Job = jobs[(i) < 0 ? jobs.length + (i) : i];
    let idx: number = (i + 1);
    console.log(_str(((((("Job " + intToString(idx)) + " is ") + j.title) + " at ") + j.company)));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

