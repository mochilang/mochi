// Generated by Mochi v0.10.59 on 2025-08-07 08:57:23 GMT+7

function index_of_substr(s: string, pat: string): number {
  if ((_len(pat) == 0)) {
    return 0;
  }
  let i: number = 0;
  while ((i <= (_len(s) - _len(pat)))) {
    let j: number = 0;
    while ((j < _len(pat))) {
      if ((s[(Math.trunc((i + j))) < 0 ? s.length + (Math.trunc((i + j))) : Math.trunc((i + j))] != pat[(j) < 0 ? pat.length + (j) : j])) {
        break
      }
      j = (j + 1);
    }
    if ((j == _len(pat))) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function first_link(html: string): string {
  let a_idx: number = index_of_substr(html, "<a");
  if ((a_idx < 0)) {
    return "";
  }
  let href_pat: string = "href=\"";
  let href_idx_rel: number = index_of_substr(html.slice(a_idx), href_pat);
  if ((href_idx_rel < 0)) {
    return "";
  }
  let start: number = ((a_idx + href_idx_rel) + _len(href_pat));
  let end: number = start;
  while ((end < _len(html))) {
    if ((html[(end) < 0 ? html.length + (end) : end] == "\"")) {
      break
    }
    end = (end + 1);
  }
  return html.slice(start, end);
}
let query_words: string[] = ["mochi", "language"];
let query: string = "";
let i: number = 0;
let sample_html: string = ("<div><a href=\"https://example.com\">Example</a></div>" + "<div><a href=\"https://another.com\">Another</a></div>");
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let url: string
let link: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i < _len(query_words))) {
    if ((i > 0)) {
      query = (query + "%20");
    }
    query = (query + query_words[(i) < 0 ? query_words.length + (i) : i]);
    i = (i + 1);
  }
url = (("https://www.google.com/search?q=" + query) + "&num=100")
  console.log(_str("Googling....."));
link = first_link(sample_html)
  if ((_len(link) > 0)) {
    console.log(_str(link));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

