// Generated by Mochi v0.10.59 on 2025-08-07 09:51:30 GMT+7

export interface ApodData { url: string; title: string }
export interface ArchiveItemData { description: string }
export interface ArchiveItem { data: ArchiveItemData[] }
export interface ArchiveCollection { items: ArchiveItem[] }
export interface ArchiveResult { collection: ArchiveCollection }
async function get_apod_data(api_key: string): ApodData {
  let data: ApodData = await _fetch("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY");
  return data;
}
async function save_apod(api_key: string): ApodData {
  let apod: ApodData = await get_apod_data(api_key);
  return apod;
}
async function get_archive_data(query: string): ArchiveResult {
  let data: ArchiveResult = await _fetch("https://images-api.nasa.gov/search?q=apollo%202011");
  return data;
}
async function main() {
  let apod: ApodData = await save_apod("DEMO_KEY");
  console.log(_str(apod.title));
  let archive: ArchiveResult = await get_archive_data("apollo 2011");
  let items: ArchiveItem[] = archive.collection.items;
  let first_item = items[(0) < 0 ? items.length + (0) : 0];
  let first_data = first_item.data[(0) < 0 ? first_item.data.length + (0) : 0];
  console.log(_str(first_data.description));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
async function _fetch(url: string, opts?: any): Promise<any> {
  const init: RequestInit = { method: opts?.method ?? 'GET' };
  if (opts?.headers) init.headers = opts.headers;
  if (opts && 'body' in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(opts.query)) qs.set(k, String(v));
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  const resp = await fetch(url, init);
  const text = await resp.text();
  try { return JSON.parse(text); } catch { return text; }
}
(async () => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  await main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

