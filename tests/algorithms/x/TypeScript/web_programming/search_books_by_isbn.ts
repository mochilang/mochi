// Generated by Mochi v0.10.59 on 2025-08-07 08:57:27 GMT+7

export interface AuthorRef { key: string }
export interface BookData { title: string; publish_date: string; authors: AuthorRef[]; number_of_pages: number; isbn_10: string[]; isbn_13: string[] }
export interface AuthorData { name: string }
export interface BookSummary { title: string; publish_date: string; authors: string; number_of_pages: number; isbn_10: string; isbn_13: string }
function join(xs: string[], sep: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return res;
}
function count_char(s: string, ch: string): number {
  let cnt: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      cnt = (cnt + 1);
    }
    i = (i + 1);
  }
  return cnt;
}
function strip(s: string): string {
  let start: number = 0;
  let end: number = _len(s);
  while (((start < end) && ((s).substring(start, (start + 1)) == " "))) {
    start = (start + 1);
  }
  while (((end > start) && ((s).substring((end - 1), end) == " "))) {
    end = (end - 1);
  }
  return s.slice(start, end);
}
function trim_slashes(s: string): string {
  let start: number = 0;
  let end: number = _len(s);
  while (((start < end) && ((s).substring(start, (start + 1)) == "/"))) {
    start = (start + 1);
  }
  while (((end > start) && ((s).substring((end - 1), end) == "/"))) {
    end = (end - 1);
  }
  return s.slice(start, end);
}
function normalize_olid(olid: string): string {
  let stripped: string = strip(olid);
  let cleaned: string = trim_slashes(stripped);
  if ((count_char(cleaned, "/") != 1)) {
    _panic((olid + " is not a valid Open Library olid"));
  }
  return cleaned;
}
async function get_book_data(olid: string): BookData {
  let norm: string = normalize_olid(olid);
  let url: string = (("https://openlibrary.org/" + norm) + ".json");
  let data: BookData = await _fetch(url);
  return data;
}
async function get_author_data(olid: string): AuthorData {
  let norm: string = normalize_olid(olid);
  let url: string = (("https://openlibrary.org/" + norm) + ".json");
  let data: AuthorData = await _fetch(url);
  return data;
}
async function summarize_book(book: BookData): BookSummary {
  let names: string[] = [];
  let i: number = 0;
  while ((i < _len(book.authors))) {
    let ref: AuthorRef = book.authors[(i) < 0 ? book.authors.length + (i) : i];
    let auth: AuthorData = get_author_data(ref.key);
    names.push(auth.name);
    i = (i + 1);
  }
  return {"title": book.title, "publish_date": book.publish_date, "authors": join(names, ", "), "number_of_pages": book.number_of_pages, "isbn_10": join(book.isbn_10, ", "), "isbn_13": join(book.isbn_13, ", ")};
}
async function main() {
  let book: BookData = get_book_data("isbn/0140328726");
  let summary: BookSummary = summarize_book(book);
  console.log(_str(("Title: " + summary.title)));
  console.log(_str(("Publish date: " + summary.publish_date)));
  console.log(_str(("Authors: " + summary.authors)));
  console.log(_str(("Number of pages: " + _str(summary.number_of_pages))));
  console.log(_str(("ISBN (10): " + summary.isbn_10)));
  console.log(_str(("ISBN (13): " + summary.isbn_13)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
async function _fetch(url: string, opts?: any): Promise<any> {
  const init: RequestInit = { method: opts?.method ?? 'GET' };
  if (opts?.headers) init.headers = opts.headers;
  if (opts && 'body' in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(opts.query)) qs.set(k, String(v));
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  const resp = await fetch(url, init);
  const text = await resp.text();
  try { return JSON.parse(text); } catch { return text; }
}
(async () => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

