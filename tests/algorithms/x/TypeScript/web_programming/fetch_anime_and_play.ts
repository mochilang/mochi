// Generated by Mochi v0.10.59 on 2025-08-07 09:48:02 GMT+7

export interface ANIME_DB { title: string; url: string }
export interface EPISODE_DB { "/anime/kimetsu-no-yaiba": { title: string; url: string }[]; "/anime/naruto": { title: string; url: string }[] }
export interface EPISODE_EMBED { "/watch/kimetsu-no-yaiba/1": string; "/watch/kimetsu-no-yaiba/2": string; "/watch/naruto/1": string }
let BASE_URL: string = "https://ww7.gogoanime2.org";
function contains_str(s: string, sub: string): boolean {
  if ((_len(sub) == 0)) {
    return true;
  }
  let i: number = 0;
  while (((i + _len(sub)) <= _len(s))) {
    if (((s).substring(i, (i + _len(sub))) == sub)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
let ANIME_DB: ANIME_DB[] = [{"title": "Demon Slayer", "url": "/anime/kimetsu-no-yaiba"}, {"title": "Naruto", "url": "/anime/naruto"}];
function search_scraper(anime_name: string): Record<string, string>[] {
  let term: string = anime_name.toLowerCase();
  let res: Record<string, string>[] = [];
  let i: number = 0;
  while ((i < _len(ANIME_DB))) {
    let item: ANIME_DB = ANIME_DB[(i) < 0 ? ANIME_DB.length + (i) : i];
    if (contains_str(item.title.toLowerCase(), term)) {
      res.push(item);
    }
    i = (i + 1);
  }
  return res;
}
let EPISODE_DB: EPISODE_DB = {"/anime/kimetsu-no-yaiba": [{"title": "Episode 1", "url": "/watch/kimetsu-no-yaiba/1"}, {"title": "Episode 2", "url": "/watch/kimetsu-no-yaiba/2"}], "/anime/naruto": [{"title": "Episode 1", "url": "/watch/naruto/1"}]};
function search_anime_episode_list(endpoint: string): Record<string, string>[] {
  if ((endpoint in EPISODE_DB)) {
    return EPISODE_DB[(endpoint) < 0 ? EPISODE_DB.length + (endpoint) : endpoint];
  }
  let empty: Record<string, string>[] = [];
  return empty;
}
let EPISODE_EMBED: EPISODE_EMBED = {"/watch/kimetsu-no-yaiba/1": "/embed/kimetsu-no-yaiba/1", "/watch/kimetsu-no-yaiba/2": "/embed/kimetsu-no-yaiba/2", "/watch/naruto/1": "/embed/naruto/1"};
function to_playlist(embed: string): string {
  return (("/playlist/" + embed.slice(7)) + ".m3u8");
}
function get_anime_episode(endpoint: string): string[] {
  if ((endpoint in EPISODE_EMBED)) {
    let embed = EPISODE_EMBED[(endpoint) < 0 ? EPISODE_EMBED.length + (endpoint) : endpoint];
    let play: string = (BASE_URL + embed);
    let download: string = (BASE_URL + to_playlist(embed));
    return [play, download];
  }
  let empty: string[] = [];
  return empty;
}
function main() {
  let animes: Record<string, string>[] = search_scraper("demon");
  console.log(_str("[" + (animes).join(' ') + "]"));
  let episodes: Record<string, string>[] = search_anime_episode_list("/anime/kimetsu-no-yaiba");
  console.log(_str("[" + (episodes).join(' ') + "]"));
  let links: string[] = get_anime_episode("/watch/kimetsu-no-yaiba/1");
  console.log(_str("[" + (links).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

