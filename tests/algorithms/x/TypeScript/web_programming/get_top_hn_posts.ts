// Generated by Mochi v0.10.59 on 2025-08-07 09:50:24 GMT+7

export interface Story { title: string; url: string }
async function get_hackernews_story(story_id: number): Story {
  let url: string = (("https://hacker-news.firebaseio.com/v0/item/" + _str(story_id)) + ".json?print=pretty");
  let story: Story = await _fetch(url);
  if ((story.url == "")) {
    story.url = ("https://news.ycombinator.com/item?id=" + _str(story_id));
  }
  return story;
}
async function hackernews_top_stories(max_stories: number): Story[] {
  let url: string = "https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty";
  let ids: number[] = await _fetch(url);
  ids = ids.slice(0, max_stories);
  let stories: Story[] = [];
  let i: number = 0;
  while ((i < _len(ids))) {
    stories.push(await get_hackernews_story(ids[(i) < 0 ? ids.length + (i) : i]));
    i = (i + 1);
  }
  return stories;
}
async function hackernews_top_stories_as_markdown(max_stories: number): string {
  let stories: Story[] = await hackernews_top_stories(max_stories);
  let output: string = "";
  let i: number = 0;
  while ((i < _len(stories))) {
    let s: Story = stories[(i) < 0 ? stories.length + (i) : i];
    let line: string = (((("* [" + s.title) + "](") + s.url) + ")");
    if ((i == 0)) {
      output = line;
    } else {
      output = ((output + "\n") + line);
    }
    i = (i + 1);
  }
  return output;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
async function _fetch(url: string, opts?: any): Promise<any> {
  const init: RequestInit = { method: opts?.method ?? 'GET' };
  if (opts?.headers) init.headers = opts.headers;
  if (opts && 'body' in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(opts.query)) qs.set(k, String(v));
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  const resp = await fetch(url, init);
  const text = await resp.text();
  try { return JSON.parse(text); } catch { return text; }
}
(async () => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(await hackernews_top_stories_as_markdown(5)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

