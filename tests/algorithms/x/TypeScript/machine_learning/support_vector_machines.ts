// Generated by Mochi v0.10.63 on 2025-08-11 18:39:48 GMT+7

export interface SVC { weights: number[]; bias: number; lr: number; lambda: number; epochs: number }
function dot(a: number[], b: number[]): number {
  let s: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    s = (s + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return s;
}
function new_svc(lr: number, lambda: number, epochs: number): SVC {
  return {"weights": [], "bias": 0.0, lr, lambda, epochs};
}
function fit(model: SVC, xs: number[][], ys: number[]): SVC {
  let n_features: number = _len(xs[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
  let w: number[] = [];
  let i: number = 0;
  while ((i < n_features)) {
    w.push(0.0);
    i = (i + 1);
  }
  let b: number = 0.0;
  let epoch: number = 0;
  while ((epoch < model.epochs)) {
    let j: number = 0;
    while ((j < _len(xs))) {
      let x: number[] = xs[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
      let y: number = ys[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()];
      let prod: number = (dot(w, x) + b);
      if (((y * prod) < 1.0)) {
        let k: number = 0;
        while ((k < _len(w))) {
          w[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()] = (w[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()] + (model.lr * ((y * x[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()]) - ((2.0 * model.lambda) * w[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()]))));
          k = (k + 1);
        }
        b = (b + (model.lr * y));
      } else {
        let k: number = 0;
        while ((k < _len(w))) {
          w[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()] = (w[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()] - (model.lr * ((2.0 * model.lambda) * w[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w.length + _mochi_idx : _mochi_idx;})()])));
          k = (k + 1);
        }
      }
      j = (j + 1);
    }
    epoch = (epoch + 1);
  }
  return {"weights": w, "bias": b, "lr": model.lr, "lambda": model.lambda, "epochs": model.epochs};
}
function predict(model: SVC, x: number[]): number {
  let s: number = (dot(model.weights, x) + model.bias);
  if ((s >= 0.0)) {
    return 1;
  } else {
    return -1;
  }
}
let xs: number[][] = [[0.0, 1.0], [0.0, 2.0], [1.0, 1.0], [1.0, 2.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let ys: number[]
let base: SVC
let model: SVC
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
ys = [1, 1, -1, -1]
base = new_svc(0.01, 0.01, 1000)
model = fit(base, xs, ys)
  console.log(_str(predict(model, [0.0, 1.0])));
  console.log(_str(predict(model, [1.0, 1.0])));
  console.log(_str(predict(model, [2.0, 2.0])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

