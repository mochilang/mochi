// Generated by Mochi v0.10.63 on 2025-08-11 18:38:19 GMT+7

function dot(x: number[], y: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(x))) {
    sum = (sum + (x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()] * y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return sum;
}
function run_steep_gradient_descent(data_x: number[][], data_y: number[], len_data: number, alpha: number, theta: number[]): number[] {
  let gradients: number[] = [];
  let j: number = 0;
  while ((j < _len(theta))) {
    gradients.push(0.0);
    j = (j + 1);
  }
  let i: number = 0;
  while ((i < len_data)) {
    let prediction: number = dot(theta, data_x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data_x.length + _mochi_idx : _mochi_idx;})()]);
    let error: number = (prediction - data_y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data_y.length + _mochi_idx : _mochi_idx;})()]);
    let k: number = 0;
    while ((k < _len(theta))) {
      gradients[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? gradients.length + _mochi_idx : _mochi_idx;})()] = (gradients[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? gradients.length + _mochi_idx : _mochi_idx;})()] + (error * data_x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data_x.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? data_x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data_x.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      k = (k + 1);
    }
    i = (i + 1);
  }
  let t: number[] = [];
  let g: number = 0;
  while ((g < _len(theta))) {
    t.push((theta[(()=>{const _mochi_idx = g; return _mochi_idx < 0 ? theta.length + _mochi_idx : _mochi_idx;})()] - ((alpha / len_data) * gradients[(()=>{const _mochi_idx = g; return _mochi_idx < 0 ? gradients.length + _mochi_idx : _mochi_idx;})()])));
    g = (g + 1);
  }
  return t;
}
function sum_of_square_error(data_x: number[][], data_y: number[], len_data: number, theta: number[]): number {
  let total: number = 0.0;
  let i: number = 0;
  while ((i < len_data)) {
    let prediction: number = dot(theta, data_x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data_x.length + _mochi_idx : _mochi_idx;})()]);
    let diff: number = (prediction - data_y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data_y.length + _mochi_idx : _mochi_idx;})()]);
    total = (total + (diff * diff));
    i = (i + 1);
  }
  return (total / (2.0 * len_data));
}
function run_linear_regression(data_x: number[][], data_y: number[]): number[] {
  let iterations: number = 10;
  let alpha: number = 0.01;
  let no_features: number = _len(data_x[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? data_x.length + _mochi_idx : _mochi_idx;})()]);
  let len_data: number = _len(data_x);
  let theta: number[] = [];
  let i: number = 0;
  while ((i < no_features)) {
    theta.push(0.0);
    i = (i + 1);
  }
  let iter: number = 0;
  while ((iter < iterations)) {
    theta = run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta);
    let error: number = sum_of_square_error(data_x, data_y, len_data, theta);
    console.log(_str(((("At Iteration " + _str((iter + 1))) + " - Error is ") + _str(error))));
    iter = (iter + 1);
  }
  return theta;
}
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  } else {
    return x;
  }
}
function mean_absolute_error(predicted_y: number[], original_y: number[]): number {
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(predicted_y))) {
    let diff: number = absf((predicted_y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? predicted_y.length + _mochi_idx : _mochi_idx;})()] - original_y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? original_y.length + _mochi_idx : _mochi_idx;})()]));
    total = (total + diff);
    i = (i + 1);
  }
  return (total / _len(predicted_y));
}
let data_x: number[][] = [[1.0, 1.0], [1.0, 2.0], [1.0, 3.0]];
let data_y: number[] = [1.0, 2.0, 3.0];
let i: number = 0;
let original_y: number[] = [2.5, 0.0, 2.0, 8.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let theta: number[]
let predicted_y: number[]
let mae: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
theta = run_linear_regression(data_x, data_y)
  console.log(_str("Resultant Feature vector :"));
  while ((i < _len(theta))) {
    console.log(_str(_str(theta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? theta.length + _mochi_idx : _mochi_idx;})()])));
    i = (i + 1);
  }
predicted_y = [3.0, -0.5, 2.0, 7.0]
mae = mean_absolute_error(predicted_y, original_y)
  console.log(_str(("Mean Absolute Error : " + _str(mae))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

