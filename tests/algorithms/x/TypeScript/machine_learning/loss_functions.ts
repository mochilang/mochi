// Generated by Mochi v0.10.67 on 2025-08-16 19:55:01 GMT+7

function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function maxf(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}
function minf(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function clip(x: number, lo: number, hi: number): number {
  return maxf(lo, minf(x, hi));
}
function to_float(x: number): number {
  return (x * 1.0);
}
function powf(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  let n: number = Math.trunc(exp);
  while ((i < n)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function ln(x: number): number {
  if ((x <= 0.0)) {
    _panic("ln domain error");
  }
  let y: number = ((x - 1.0) / (x + 1.0));
  let y2: number = (y * y);
  let term: number = y;
  let sum: number = 0.0;
  let k: number = 0;
  while ((k < 10)) {
    let denom = Number(((2 * k) + 1));
    sum = (sum + (term / denom));
    term = (term * y2);
    k = (k + 1);
  }
  return (2.0 * sum);
}
function exp(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 20)) {
    term = ((term * x) / Number(n));
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function mean(v: number[]): number {
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(v))) {
    total = (total + v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return (total / Number(_len(v)));
}
function binary_cross_entropy(y_true: number[], y_pred: number[], epsilon: number): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same length.");
  }
  let losses: number[] = [];
  let i: number = 0;
  while ((i < _len(y_true))) {
    let yt: number = y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()];
    let yp: number = clip(y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()], epsilon, (1.0 - epsilon));
    let loss: number = -((yt * ln(yp)) + ((1.0 - yt) * ln((1.0 - yp))));
    losses.push(loss);
    i = (i + 1);
  }
  return mean(losses);
}
function binary_focal_cross_entropy(y_true: number[], y_pred: number[], gamma: number, alpha: number, epsilon: number): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same length.");
  }
  let losses: number[] = [];
  let i: number = 0;
  while ((i < _len(y_true))) {
    let yt: number = y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()];
    let yp: number = clip(y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()], epsilon, (1.0 - epsilon));
    let term1: number = (((alpha * powf((1.0 - yp), gamma)) * yt) * ln(yp));
    let term2: number = ((((1.0 - alpha) * powf(yp, gamma)) * (1.0 - yt)) * ln((1.0 - yp)));
    losses.push(-(term1 + term2));
    i = (i + 1);
  }
  return mean(losses);
}
function categorical_cross_entropy(y_true: number[][], y_pred: number[][], epsilon: number): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same shape.");
  }
  let rows: number = _len(y_true);
  let total: number = 0.0;
  let i: number = 0;
  while ((i < rows)) {
    if ((_len(y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]) !== _len(y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]))) {
      _panic("Input arrays must have the same shape.");
    }
    let sum_true: number = 0.0;
    let sum_pred: number = 0.0;
    let j: number = 0;
    while ((j < _len(y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]))) {
      let yt: number = y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let yp: number = y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if (((yt !== 0.0) && (yt !== 1.0))) {
        _panic("y_true must be one-hot encoded.");
      }
      sum_true = (sum_true + yt);
      sum_pred = (sum_pred + yp);
      j = (j + 1);
    }
    if ((sum_true !== 1.0)) {
      _panic("y_true must be one-hot encoded.");
    }
    if ((absf((sum_pred - 1.0)) > epsilon)) {
      _panic("Predicted probabilities must sum to approximately 1.");
    }
    j = 0;
    while ((j < _len(y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]))) {
      let yp: number = clip(y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], epsilon, 1.0);
      total = (total - (y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * ln(yp)));
      j = (j + 1);
    }
    i = (i + 1);
  }
  return total;
}
function categorical_focal_cross_entropy(y_true: number[][], y_pred: number[][], alpha: number[], gamma: number, epsilon: number): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Shape of y_true and y_pred must be the same.");
  }
  let rows: number = _len(y_true);
  let cols: number = _len(y_true[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]);
  let a: number[] = alpha;
  if ((_len(a) === 0)) {
    let tmp: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      tmp.push(1.0);
      j = (j + 1);
    }
    a = tmp;
  }
  if ((_len(a) !== cols)) {
    _panic("Length of alpha must match the number of classes.");
  }
  let total: number = 0.0;
  let i: number = 0;
  while ((i < rows)) {
    if (((_len(y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]) !== cols) || (_len(y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]) !== cols))) {
      _panic("Shape of y_true and y_pred must be the same.");
    }
    let sum_true: number = 0.0;
    let sum_pred: number = 0.0;
    let j: number = 0;
    while ((j < cols)) {
      let yt: number = y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let yp: number = y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if (((yt !== 0.0) && (yt !== 1.0))) {
        _panic("y_true must be one-hot encoded.");
      }
      sum_true = (sum_true + yt);
      sum_pred = (sum_pred + yp);
      j = (j + 1);
    }
    if ((sum_true !== 1.0)) {
      _panic("y_true must be one-hot encoded.");
    }
    if ((absf((sum_pred - 1.0)) > epsilon)) {
      _panic("Predicted probabilities must sum to approximately 1.");
    }
    let row_loss: number = 0.0;
    j = 0;
    while ((j < cols)) {
      let yp: number = clip(y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], epsilon, 1.0);
      row_loss = (row_loss + (((a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * powf((1.0 - yp), gamma)) * y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) * ln(yp)));
      j = (j + 1);
    }
    total = (total - row_loss);
    i = (i + 1);
  }
  return (total / Number(rows));
}
function hinge_loss(y_true: number[], y_pred: number[]): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Length of predicted and actual array must be same.");
  }
  let losses: number[] = [];
  let i: number = 0;
  while ((i < _len(y_true))) {
    let yt: number = y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()];
    if (((yt !== -1.0) && (yt !== 1.0))) {
      _panic("y_true can have values -1 or 1 only.");
    }
    let pred: number = y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()];
    let l: number = maxf(0.0, (1.0 - (yt * pred)));
    losses.push(l);
    i = (i + 1);
  }
  return mean(losses);
}
function huber_loss(y_true: number[], y_pred: number[], delta: number): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same length.");
  }
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    let diff: number = (y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()] - y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]);
    let adiff: number = absf(diff);
    if ((adiff <= delta)) {
      total = (total + ((0.5 * diff) * diff));
    } else {
      total = (total + (delta * (adiff - (0.5 * delta))));
    }
    i = (i + 1);
  }
  return (total / Number(_len(y_true)));
}
function mean_squared_error(y_true: number[], y_pred: number[]): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same length.");
  }
  let losses: number[] = [];
  let i: number = 0;
  while ((i < _len(y_true))) {
    let diff: number = (y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()] - y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]);
    losses.push((diff * diff));
    i = (i + 1);
  }
  return mean(losses);
}
function mean_absolute_error(y_true: number[], y_pred: number[]): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same length.");
  }
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    total = (total + absf((y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()] - y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()])));
    i = (i + 1);
  }
  return (total / Number(_len(y_true)));
}
function mean_squared_logarithmic_error(y_true: number[], y_pred: number[]): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same length.");
  }
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    let a: number = ln((1.0 + y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]));
    let b: number = ln((1.0 + y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]));
    let diff: number = (a - b);
    total = (total + (diff * diff));
    i = (i + 1);
  }
  return (total / Number(_len(y_true)));
}
function mean_absolute_percentage_error(y_true: number[], y_pred: number[], epsilon: number): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("The length of the two arrays should be the same.");
  }
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    let yt: number = y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()];
    if ((yt === 0.0)) {
      yt = epsilon;
    }
    total = (total + absf(((yt - y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]) / yt)));
    i = (i + 1);
  }
  return (total / Number(_len(y_true)));
}
function perplexity_loss(y_true: number[][], y_pred: number[][][], epsilon: number): number {
  let batch: number = _len(y_true);
  if ((batch !== _len(y_pred))) {
    _panic("Batch size of y_true and y_pred must be equal.");
  }
  let sentence_len: number = _len(y_true[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]);
  if ((sentence_len !== _len(y_pred[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]))) {
    _panic("Sentence length of y_true and y_pred must be equal.");
  }
  let vocab_size: number = _len(y_pred[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
  let b: number = 0;
  let total_perp: number = 0.0;
  while ((b < batch)) {
    if (((_len(y_true[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()]) !== sentence_len) || (_len(y_pred[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]) !== sentence_len))) {
      _panic("Sentence length of y_true and y_pred must be equal.");
    }
    let sum_log: number = 0.0;
    let j: number = 0;
    while ((j < sentence_len)) {
      let label: number = y_true[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_true[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if ((label >= vocab_size)) {
        _panic("Label value must not be greater than vocabulary size.");
      }
      let prob: number = clip(y_pred[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = label; return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? y_pred[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], epsilon, 1.0);
      sum_log = (sum_log + ln(prob));
      j = (j + 1);
    }
    let mean_log: number = (sum_log / Number(sentence_len));
    let perp: number = exp(-mean_log);
    total_perp = (total_perp + perp);
    b = (b + 1);
  }
  return (total_perp / Number(batch));
}
function smooth_l1_loss(y_true: number[], y_pred: number[], beta: number): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("The length of the two arrays should be the same.");
  }
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    let diff: number = absf((y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()] - y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]));
    if ((diff < beta)) {
      total = (total + (((0.5 * diff) * diff) / beta));
    } else {
      total = ((total + diff) - (0.5 * beta));
    }
    i = (i + 1);
  }
  return (total / Number(_len(y_true)));
}
function kullback_leibler_divergence(y_true: number[], y_pred: number[]): number {
  if ((_len(y_true) !== _len(y_pred))) {
    _panic("Input arrays must have the same length.");
  }
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    total = (total + (y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()] * ln((y_true[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_true.length + _mochi_idx : _mochi_idx;})()] / y_pred[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_pred.length + _mochi_idx : _mochi_idx;})()]))));
    i = (i + 1);
  }
  return total;
}
function main() {
  let y_true_bc: number[] = [0.0, 1.0, 1.0, 0.0, 1.0];
  let y_pred_bc: number[] = [0.2, 0.7, 0.9, 0.3, 0.8];
  console.log(_str(binary_cross_entropy(y_true_bc, y_pred_bc, 1e-15)));
  console.log(_str(binary_focal_cross_entropy(y_true_bc, y_pred_bc, 2.0, 0.25, 1e-15)));
  let y_true_cce: number[][] = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]];
  let y_pred_cce: number[][] = [[0.9, 0.1, 0.0], [0.2, 0.7, 0.1], [0.0, 0.1, 0.9]];
  console.log(_str(categorical_cross_entropy(y_true_cce, y_pred_cce, 1e-15)));
  let alpha: number[] = [0.6, 0.2, 0.7];
  console.log(_str(categorical_focal_cross_entropy(y_true_cce, y_pred_cce, alpha, 2.0, 1e-15)));
  let y_true_hinge: number[] = [-1.0, 1.0, 1.0, -1.0, 1.0];
  let y_pred_hinge: number[] = [-4.0, -0.3, 0.7, 5.0, 10.0];
  console.log(_str(hinge_loss(y_true_hinge, y_pred_hinge)));
  let y_true_huber: number[] = [0.9, 10.0, 2.0, 1.0, 5.2];
  let y_pred_huber: number[] = [0.8, 2.1, 2.9, 4.2, 5.2];
  console.log(_str(huber_loss(y_true_huber, y_pred_huber, 1.0)));
  console.log(_str(mean_squared_error(y_true_huber, y_pred_huber)));
  console.log(_str(mean_absolute_error(y_true_huber, y_pred_huber)));
  console.log(_str(mean_squared_logarithmic_error(y_true_huber, y_pred_huber)));
  let y_true_mape: number[] = [10.0, 20.0, 30.0, 40.0];
  let y_pred_mape: number[] = [12.0, 18.0, 33.0, 45.0];
  console.log(_str(mean_absolute_percentage_error(y_true_mape, y_pred_mape, 1e-15)));
  let y_true_perp: number[][] = [[1, 4], [2, 3]];
  let y_pred_perp: number[][][] = [[[0.28, 0.19, 0.21, 0.15, 0.17], [0.24, 0.19, 0.09, 0.18, 0.3]], [[0.03, 0.26, 0.21, 0.18, 0.32], [0.28, 0.1, 0.33, 0.15, 0.14]]];
  console.log(_str(perplexity_loss(y_true_perp, y_pred_perp, 1e-07)));
  let y_true_smooth: number[] = [3.0, 5.0, 2.0, 7.0];
  let y_pred_smooth: number[] = [2.9, 4.8, 2.1, 7.2];
  console.log(_str(smooth_l1_loss(y_true_smooth, y_pred_smooth, 1.0)));
  let y_true_kl: number[] = [0.2, 0.3, 0.5];
  let y_pred_kl: number[] = [0.3, 0.3, 0.4];
  console.log(_str(kullback_leibler_divergence(y_true_kl, y_pred_kl)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

