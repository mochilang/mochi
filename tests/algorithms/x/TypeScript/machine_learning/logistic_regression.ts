// Generated by Mochi v0.10.63 on 2025-08-11 18:38:57 GMT+7

function expApprox(x: number): number {
  let y: number = x;
  let is_neg: boolean = false;
  if ((x < 0.0)) {
    is_neg = true;
    y = -x;
  }
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 30)) {
    term = ((term * y) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  if (is_neg) {
    return (1.0 / sum);
  }
  return sum;
}
function sigmoid(z: number): number {
  return (1.0 / (1.0 + expApprox(-z)));
}
function dot(a: number[], b: number[]): number {
  let s: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    s = (s + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return s;
}
function zeros(n: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    res.push(0.0);
    i = (i + 1);
  }
  return res;
}
function logistic_reg(alpha: number, x: number[][], y: number[], iterations: number): number[] {
  let m: number = _len(x);
  let n: number = _len(x[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()]);
  let theta: number[] = zeros(n);
  let iter: number = 0;
  while ((iter < iterations)) {
    let grad: number[] = zeros(n);
    let i: number = 0;
    while ((i < m)) {
      let z: number = dot(x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()], theta);
      let h: number = sigmoid(z);
      let k: number = 0;
      while ((k < n)) {
        grad[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? grad.length + _mochi_idx : _mochi_idx;})()] = (grad[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? grad.length + _mochi_idx : _mochi_idx;})()] + ((h - y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()]) * x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      i = (i + 1);
    }
    let k2: number = 0;
    while ((k2 < n)) {
      theta[(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? theta.length + _mochi_idx : _mochi_idx;})()] = (theta[(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? theta.length + _mochi_idx : _mochi_idx;})()] - ((alpha * grad[(()=>{const _mochi_idx = k2; return _mochi_idx < 0 ? grad.length + _mochi_idx : _mochi_idx;})()]) / m));
      k2 = (k2 + 1);
    }
    iter = (iter + 1);
  }
  return theta;
}
let x: number[][] = [[0.5, 1.5], [1.0, 1.0], [1.5, 0.5], [3.0, 3.5], [3.5, 3.0], [4.0, 4.0]];
let y: number[] = [0.0, 0.0, 0.0, 1.0, 1.0, 1.0];
let alpha: number = 0.1;
let iterations: number = 1000;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let theta: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
theta = logistic_reg(alpha, x, y, iterations)
  for (let i = 0; i < _len(theta); i++) {
    console.log(_str(theta[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? theta.length + _mochi_idx : _mochi_idx;})()]));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

