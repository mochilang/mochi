// Generated by Mochi v0.10.59 on 2025-08-07 00:16:25 GMT+7

let PI: number = 3.141592653589793;
let TWO_PI: number = 6.283185307179586;
let seed: number = 1;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function random(): number {
  return (rand() / 2147483648.0);
}
function _mod(x: number, m: number): number {
  return (x - (Math.trunc((x / m)) * m));
}
function cos(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y4: number = (y2 * y2);
  let y6: number = (y4 * y2);
  return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0));
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function ln(x: number): number {
  let t: number = ((x - 1.0) / (x + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let n: number = 1;
  while ((n <= 19)) {
    sum = (sum + (term / n));
    term = ((term * t) * t);
    n = (n + 2);
  }
  return (2.0 * sum);
}
function gaussian_distribution(mean: number, std_dev: number, instance_count: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < instance_count)) {
    let u1: number = random();
    let u2: number = random();
    let r: number = sqrtApprox((-2.0 * ln(u1)));
    let theta: number = (TWO_PI * u2);
    let z: number = (r * cos(theta));
    res.push((mean + (z * std_dev)));
    i = (i + 1);
  }
  return res;
}
function y_generator(class_count: number, instance_count: number[]): number[] {
  let res: number[] = [];
  let k: number = 0;
  while ((k < class_count)) {
    let i: number = 0;
    while ((i < instance_count[(k) < 0 ? instance_count.length + (k) : k])) {
      res.push(k);
      i = (i + 1);
    }
    k = (k + 1);
  }
  return res;
}
function calculate_mean(instance_count: number, items: number[]): number {
  let total: number = 0.0;
  let i: number = 0;
  while ((i < instance_count)) {
    total = (total + items[(i) < 0 ? items.length + (i) : i]);
    i = (i + 1);
  }
  return (total / instance_count);
}
function calculate_probabilities(instance_count: number, total_count: number): number {
  return (instance_count / total_count);
}
function calculate_variance(items: number[][], means: number[], total_count: number): number {
  let squared_diff: number[] = [];
  let i: number = 0;
  while ((i < _len(items))) {
    let j: number = 0;
    while ((j < _len(items[(i) < 0 ? items.length + (i) : i]))) {
      let diff: number = (items[(i) < 0 ? items.length + (i) : i][(j) < 0 ? items[(i) < 0 ? items.length + (i) : i].length + (j) : j] - means[(i) < 0 ? means.length + (i) : i]);
      squared_diff.push((diff * diff));
      j = (j + 1);
    }
    i = (i + 1);
  }
  let sum_sq: number = 0.0;
  let k: number = 0;
  while ((k < _len(squared_diff))) {
    sum_sq = (sum_sq + squared_diff[(k) < 0 ? squared_diff.length + (k) : k]);
    k = (k + 1);
  }
  let n_classes: number = _len(means);
  return ((1.0 / (total_count - n_classes)) * sum_sq);
}
function predict_y_values(x_items: number[][], means: number[], variance: number, probabilities: number[]): number[] {
  let results: number[] = [];
  let i: number = 0;
  while ((i < _len(x_items))) {
    let j: number = 0;
    while ((j < _len(x_items[(i) < 0 ? x_items.length + (i) : i]))) {
      let temp: number[] = [];
      let k: number = 0;
      while ((k < _len(x_items))) {
        let discr: number = (((x_items[(i) < 0 ? x_items.length + (i) : i][(j) < 0 ? x_items[(i) < 0 ? x_items.length + (i) : i].length + (j) : j] * (means[(k) < 0 ? means.length + (k) : k] / variance)) - ((means[(k) < 0 ? means.length + (k) : k] * means[(k) < 0 ? means.length + (k) : k]) / (2.0 * variance))) + ln(probabilities[(k) < 0 ? probabilities.length + (k) : k]));
        temp.push(discr);
        k = (k + 1);
      }
      let max_idx: number = 0;
      let max_val: number = temp[(Math.trunc(0)) < 0 ? temp.length + (Math.trunc(0)) : Math.trunc(0)];
      let t: number = 1;
      while ((t < _len(temp))) {
        if ((temp[(t) < 0 ? temp.length + (t) : t] > max_val)) {
          max_val = temp[(t) < 0 ? temp.length + (t) : t];
          max_idx = t;
        }
        t = (t + 1);
      }
      results.push(max_idx);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return results;
}
function accuracy(actual_y: number[], predicted_y: number[]): number {
  let correct: number = 0;
  let i: number = 0;
  while ((i < _len(actual_y))) {
    if ((actual_y[(i) < 0 ? actual_y.length + (i) : i] == predicted_y[(i) < 0 ? predicted_y.length + (i) : i])) {
      correct = (correct + 1);
    }
    i = (i + 1);
  }
  return ((correct / _len(actual_y)) * 100.0);
}
function main() {
  seed = 1;
  let counts: number[] = [20, 20, 20];
  let means: number[] = [5.0, 10.0, 15.0];
  let std_dev: number = 1.0;
  let x: number[][] = [];
  let i: number = 0;
  while ((i < _len(counts))) {
    x.push(gaussian_distribution(means[(i) < 0 ? means.length + (i) : i], std_dev, counts[(i) < 0 ? counts.length + (i) : i]));
    i = (i + 1);
  }
  let y: number[] = y_generator(_len(counts), counts);
  let actual_means: number[] = [];
  i = 0;
  while ((i < _len(counts))) {
    actual_means.push(calculate_mean(counts[(i) < 0 ? counts.length + (i) : i], x[(i) < 0 ? x.length + (i) : i]));
    i = (i + 1);
  }
  let total_count: number = 0;
  i = 0;
  while ((i < _len(counts))) {
    total_count = (total_count + counts[(i) < 0 ? counts.length + (i) : i]);
    i = (i + 1);
  }
  let probabilities: number[] = [];
  i = 0;
  while ((i < _len(counts))) {
    probabilities.push(calculate_probabilities(counts[(i) < 0 ? counts.length + (i) : i], total_count));
    i = (i + 1);
  }
  let variance: number = calculate_variance(x, actual_means, total_count);
  let predicted: number[] = predict_y_values(x, actual_means, variance, probabilities);
  console.log(_str("[" + (predicted).join(' ') + "]"));
  console.log(_str(accuracy(y, predicted)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

