// Generated by Mochi v0.10.67 on 2025-08-16 19:54:56 GMT+7

export interface Stump { feature: number; threshold: number; left: number; right: number }
function exp_approx(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function signf(x: number): number {
  if ((x >= 0.0)) {
    return 1.0;
  }
  return -1.0;
}
function gradient(target: number[], preds: number[]): number[] {
  let n: number = _len(target);
  let residuals: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    let t: number = target[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? target.length + _mochi_idx : _mochi_idx;})()];
    let y: number = preds[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? preds.length + _mochi_idx : _mochi_idx;})()];
    let exp_val: number = exp_approx((t * y));
    let res: number = (-t / (1.0 + exp_val));
    residuals.push(res);
    i = (i + 1);
  }
  return residuals;
}
function predict_raw(models: Stump[], features: number[][], learning_rate: number): number[] {
  let n: number = _len(features);
  let preds: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    preds.push(0.0);
    i = (i + 1);
  }
  let m: number = 0;
  while ((m < _len(models))) {
    let stump: Stump = models[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? models.length + _mochi_idx : _mochi_idx;})()];
    i = 0;
    while ((i < n)) {
      let value: number = features[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(stump.feature); return _mochi_idx < 0 ? features[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if ((value <= stump.threshold)) {
        preds[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? preds.length + _mochi_idx : _mochi_idx;})()] = (preds[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? preds.length + _mochi_idx : _mochi_idx;})()] + (learning_rate * stump.left));
      } else {
        preds[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? preds.length + _mochi_idx : _mochi_idx;})()] = (preds[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? preds.length + _mochi_idx : _mochi_idx;})()] + (learning_rate * stump.right));
      }
      i = (i + 1);
    }
    m = (m + 1);
  }
  return preds;
}
function predict(models: Stump[], features: number[][], learning_rate: number): number[] {
  let raw: number[] = predict_raw(models, features, learning_rate);
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(raw))) {
    result.push(signf(raw[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? raw.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return result;
}
function train_stump(features: number[][], residuals: number[]): Stump {
  let n_samples: number = _len(features);
  let n_features: number = _len(features[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()]);
  let best_feature: number = 0;
  let best_threshold: number = 0.0;
  let best_error: number = 1000000000.0;
  let best_left: number = 0.0;
  let best_right: number = 0.0;
  let j: number = 0;
  while ((j < n_features)) {
    let t_index: number = 0;
    while ((t_index < n_samples)) {
      let t: number = features[(()=>{const _mochi_idx = t_index; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? features[(()=>{const _mochi_idx = t_index; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let sum_left: number = 0.0;
      let count_left: number = 0;
      let sum_right: number = 0.0;
      let count_right: number = 0;
      let i: number = 0;
      while ((i < n_samples)) {
        if ((features[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? features[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] <= t)) {
          sum_left = (sum_left + residuals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? residuals.length + _mochi_idx : _mochi_idx;})()]);
          count_left = (count_left + 1);
        } else {
          sum_right = (sum_right + residuals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? residuals.length + _mochi_idx : _mochi_idx;})()]);
          count_right = (count_right + 1);
        }
        i = (i + 1);
      }
      let left_val: number = 0.0;
      if ((count_left !== 0)) {
        left_val = (sum_left / count_left);
      }
      let right_val: number = 0.0;
      if ((count_right !== 0)) {
        right_val = (sum_right / count_right);
      }
      let error: number = 0.0;
      i = 0;
      while ((i < n_samples)) {
        let pred: number = ((features[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? features[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? features.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] <= t) ? left_val : right_val);
        let diff: number = (residuals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? residuals.length + _mochi_idx : _mochi_idx;})()] - pred);
        error = (error + (diff * diff));
        i = (i + 1);
      }
      if ((error < best_error)) {
        best_error = error;
        best_feature = j;
        best_threshold = t;
        best_left = left_val;
        best_right = right_val;
      }
      t_index = (t_index + 1);
    }
    j = (j + 1);
  }
  return {feature: best_feature, threshold: best_threshold, left: best_left, right: best_right};
}
function fit(n_estimators: number, learning_rate: number, features: number[][], target: number[]): Stump[] {
  let models: Stump[] = [];
  let m: number = 0;
  while ((m < n_estimators)) {
    let preds: number[] = predict_raw(models, features, learning_rate);
    let grad: number[] = gradient(target, preds);
    let residuals: number[] = [];
    let i: number = 0;
    while ((i < _len(grad))) {
      residuals.push(-grad[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grad.length + _mochi_idx : _mochi_idx;})()]);
      i = (i + 1);
    }
    let stump: Stump = train_stump(features, residuals);
    models.push(stump);
    m = (m + 1);
  }
  return models;
}
function accuracy(preds: number[], target: number[]): number {
  let n: number = _len(target);
  let correct: number = 0;
  let i: number = 0;
  while ((i < n)) {
    if ((preds[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? preds.length + _mochi_idx : _mochi_idx;})()] === target[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? target.length + _mochi_idx : _mochi_idx;})()])) {
      correct = (correct + 1);
    }
    i = (i + 1);
  }
  return (correct / n);
}
let features: number[][] = [[1.0], [2.0], [3.0], [4.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let target: number[]
let models: Stump[]
let predictions: number[]
let acc: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
target = [-1.0, -1.0, 1.0, 1.0]
models = fit(5, 0.5, features, target)
predictions = predict(models, features, 0.5)
acc = accuracy(predictions, target)
  console.log(_str(("Accuracy: " + _str(acc))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

