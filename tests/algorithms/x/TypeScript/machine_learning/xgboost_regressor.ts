// Generated by Mochi v0.10.59 on 2025-08-07 00:16:41 GMT+7

export interface Dataset { data: number[][]; target: number[] }
export interface Tree { threshold: number; left_value: number; right_value: number }
function data_handling(dataset: Dataset): Dataset {
  return dataset;
}
function xgboost(features: number[][], target: number[], test_features: number[][]): number[] {
  let learning_rate: number = 0.5;
  let n_estimators: number = 3;
  let trees: Tree[] = [];
  let predictions: number[] = [];
  let i: number = 0;
  while ((i < _len(target))) {
    predictions.push(0.0);
    i = (i + 1);
  }
  let est: number = 0;
  while ((est < n_estimators)) {
    let residuals: number[] = [];
    let j: number = 0;
    while ((j < _len(target))) {
      residuals.push((target[(j) < 0 ? target.length + (j) : j] - predictions[(j) < 0 ? predictions.length + (j) : j]));
      j = (j + 1);
    }
    let sum_feat: number = 0.0;
    j = 0;
    while ((j < _len(features))) {
      sum_feat = (sum_feat + features[(j) < 0 ? features.length + (j) : j][(Math.trunc(0)) < 0 ? features[(j) < 0 ? features.length + (j) : j].length + (Math.trunc(0)) : Math.trunc(0)]);
      j = (j + 1);
    }
    let threshold: number = (sum_feat / _len(features));
    let left_sum: number = 0.0;
    let left_count: number = 0;
    let right_sum: number = 0.0;
    let right_count: number = 0;
    j = 0;
    while ((j < _len(features))) {
      if ((features[(j) < 0 ? features.length + (j) : j][(Math.trunc(0)) < 0 ? features[(j) < 0 ? features.length + (j) : j].length + (Math.trunc(0)) : Math.trunc(0)] <= threshold)) {
        left_sum = (left_sum + residuals[(j) < 0 ? residuals.length + (j) : j]);
        left_count = (left_count + 1);
      } else {
        right_sum = (right_sum + residuals[(j) < 0 ? residuals.length + (j) : j]);
        right_count = (right_count + 1);
      }
      j = (j + 1);
    }
    let left_value: number = 0.0;
    if ((left_count > 0)) {
      left_value = (left_sum / left_count);
    }
    let right_value: number = 0.0;
    if ((right_count > 0)) {
      right_value = (right_sum / right_count);
    }
    j = 0;
    while ((j < _len(features))) {
      if ((features[(j) < 0 ? features.length + (j) : j][(Math.trunc(0)) < 0 ? features[(j) < 0 ? features.length + (j) : j].length + (Math.trunc(0)) : Math.trunc(0)] <= threshold)) {
        predictions[(j) < 0 ? predictions.length + (j) : j] = (predictions[(j) < 0 ? predictions.length + (j) : j] + (learning_rate * left_value));
      } else {
        predictions[(j) < 0 ? predictions.length + (j) : j] = (predictions[(j) < 0 ? predictions.length + (j) : j] + (learning_rate * right_value));
      }
      j = (j + 1);
    }
    trees.push({threshold, left_value, right_value});
    est = (est + 1);
  }
  let preds: number[] = [];
  let t: number = 0;
  while ((t < _len(test_features))) {
    let pred: number = 0.0;
    let k: number = 0;
    while ((k < _len(trees))) {
      if ((test_features[(t) < 0 ? test_features.length + (t) : t][(Math.trunc(0)) < 0 ? test_features[(t) < 0 ? test_features.length + (t) : t].length + (Math.trunc(0)) : Math.trunc(0)] <= trees[(k) < 0 ? trees.length + (k) : k].threshold)) {
        pred = (pred + (learning_rate * trees[(k) < 0 ? trees.length + (k) : k].left_value));
      } else {
        pred = (pred + (learning_rate * trees[(k) < 0 ? trees.length + (k) : k].right_value));
      }
      k = (k + 1);
    }
    preds.push(pred);
    t = (t + 1);
  }
  return preds;
}
function mean_absolute_error(y_true: number[], y_pred: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    let diff: number = (y_true[(i) < 0 ? y_true.length + (i) : i] - y_pred[(i) < 0 ? y_pred.length + (i) : i]);
    if ((diff < 0.0)) {
      diff = -diff;
    }
    sum = (sum + diff);
    i = (i + 1);
  }
  return (sum / _len(y_true));
}
function mean_squared_error(y_true: number[], y_pred: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(y_true))) {
    let diff: number = (y_true[(i) < 0 ? y_true.length + (i) : i] - y_pred[(i) < 0 ? y_pred.length + (i) : i]);
    sum = (sum + (diff * diff));
    i = (i + 1);
  }
  return (sum / _len(y_true));
}
function main() {
  let california: Dataset = {"data": [[1.0], [2.0], [3.0], [4.0]], "target": [2.0, 3.0, 4.0, 5.0]};
  let ds: Dataset = data_handling(california);
  let x_train: number[][] = ds.data;
  let y_train: number[] = ds.target;
  let x_test: number[][] = [[1.5], [3.5]];
  let y_test: number[] = [2.5, 4.5];
  let predictions: number[] = xgboost(x_train, y_train, x_test);
  console.log(_str("Predictions:"));
  console.log(_str("[" + (predictions).join(' ') + "]"));
  console.log(_str("Mean Absolute Error:"));
  console.log(_str(mean_absolute_error(y_test, predictions)));
  console.log(_str("Mean Square Error:"));
  console.log(_str(mean_squared_error(y_test, predictions)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

