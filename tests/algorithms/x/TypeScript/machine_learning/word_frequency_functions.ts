// Generated by Mochi v0.10.59 on 2025-08-07 00:16:39 GMT+7

let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let PUNCT: string = "!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~";
function to_lowercase(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(i) < 0 ? s.length + (i) : i];
    let j: number = 0;
    let found: boolean = false;
    while ((j < _len(UPPER))) {
      if ((c == UPPER[(j) < 0 ? UPPER.length + (j) : j])) {
        res = (res + LOWER[(j) < 0 ? LOWER.length + (j) : j]);
        found = true;
        break
      }
      j = (j + 1);
    }
    if (!found) {
      res = (res + c);
    }
    i = (i + 1);
  }
  return res;
}
function is_punct(c: string): boolean {
  let i: number = 0;
  while ((i < _len(PUNCT))) {
    if ((c == PUNCT[(i) < 0 ? PUNCT.length + (i) : i])) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function clean_text(text: string, keep_newlines: boolean): string {
  let lower = to_lowercase(text);
  let res: string = "";
  let i: number = 0;
  while ((i < _len(lower))) {
    let ch = lower[(i) < 0 ? lower.length + (i) : i];
    if (is_punct(ch)) {
    } else {
      if ((ch == "\n")) {
        if (keep_newlines) {
          res = (res + "\n");
        }
      } else {
        res = (res + ch);
      }
    }
    i = (i + 1);
  }
  return res;
}
function split(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[(i) < 0 ? s.length + (i) : i];
    if ((ch == sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function contains(s: string, sub: string): boolean {
  let n: number = _len(s);
  let m: number = _len(sub);
  if ((m == 0)) {
    return true;
  }
  let i: number = 0;
  while ((i <= (n - m))) {
    let j: number = 0;
    let is_match: boolean = true;
    while ((j < m)) {
      if ((s[(Math.trunc((i + j))) < 0 ? s.length + (Math.trunc((i + j))) : Math.trunc((i + j))] != sub[(j) < 0 ? sub.length + (j) : j])) {
        is_match = false;
        break
      }
      j = (j + 1);
    }
    if (is_match) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function round3(x: number): number {
  return (floor(((x * 1000.0) + 0.5)) / 1000.0);
}
function ln(x: number): number {
  let t: number = ((x - 1.0) / (x + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let k: number = 1;
  while ((k <= 99)) {
    sum = (sum + (term / k));
    term = ((term * t) * t);
    k = (k + 2);
  }
  return (2.0 * sum);
}
function log10(x: number): number {
  return (ln(x) / ln(10.0));
}
function term_frequency(term: string, document: string): number {
  let clean: string = clean_text(document, false);
  let tokens: string[] = clean.split(" ");
  let t: string = to_lowercase(term);
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(tokens))) {
    if (((tokens[(i) < 0 ? tokens.length + (i) : i] != "") && (tokens[(i) < 0 ? tokens.length + (i) : i] == t))) {
      count = (count + 1);
    }
    i = (i + 1);
  }
  return count;
}
function document_frequency(term: string, corpus: string): number[] {
  let clean: string = clean_text(corpus, true);
  let docs: string[] = clean.split("\n");
  let t: string = to_lowercase(term);
  let matches: number = 0;
  let i: number = 0;
  while ((i < _len(docs))) {
    if (contains(docs[(i) < 0 ? docs.length + (i) : i], t)) {
      matches = (matches + 1);
    }
    i = (i + 1);
  }
  return [matches, _len(docs)];
}
function inverse_document_frequency(df: number, n: number, smoothing: boolean): number {
  if (smoothing) {
    if ((n == 0)) {
      _panic("log10(0) is undefined.");
    }
    let ratio: number = (n / (1.0 + df));
    let l: number = log10(ratio);
    let result: number = round3((1.0 + l));
    console.log(_str(result));
    return result;
  }
  if ((df == 0)) {
    _panic("df must be > 0");
  }
  if ((n == 0)) {
    _panic("log10(0) is undefined.");
  }
  let ratio: number = (n / df);
  let l: number = log10(ratio);
  let result: number = round3(l);
  console.log(_str(result));
  return result;
}
function tf_idf(tf: number, idf: number): number {
  let prod: number = (tf * idf);
  let result: number = round3(prod);
  console.log(_str(result));
  return result;
}
let corpus: string = "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus.";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let idf_val: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(term_frequency("to", "To be, or not to be")));
  console.log(_str(_str(document_frequency("first", corpus))));
idf_val = inverse_document_frequency(1, 3, false)
  tf_idf(2, idf_val);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

