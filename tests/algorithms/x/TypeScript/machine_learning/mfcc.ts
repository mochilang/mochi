// Generated by Mochi v0.10.59 on 2025-08-07 00:16:30 GMT+7

let PI: number = 3.141592653589793;
function sinApprox(x: number): number {
  let term: number = x;
  let sum: number = x;
  let n: number = 1;
  while ((n <= 10)) {
    let denom = ((2 * n) * ((2 * n) + 1));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function cosApprox(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n <= 10)) {
    let denom = (((2 * n) - 1) * (2 * n));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function expApprox(x: number): number {
  let sum: number = 1.0;
  let term: number = 1.0;
  let n: number = 1;
  while ((n < 10)) {
    term = ((term * x) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function ln(x: number): number {
  let t: number = ((x - 1.0) / (x + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let n: number = 1;
  while ((n <= 19)) {
    sum = (sum + (term / n));
    term = ((term * t) * t);
    n = (n + 2);
  }
  return (2.0 * sum);
}
function log10(x: number): number {
  return (ln(x) / ln(10.0));
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function normalize(audio: number[]): number[] {
  let max_val: number = 0.0;
  let i: number = 0;
  while ((i < _len(audio))) {
    let v: number = absf(audio[(i) < 0 ? audio.length + (i) : i]);
    if ((v > max_val)) {
      max_val = v;
    }
    i = (i + 1);
  }
  let res: number[] = [];
  i = 0;
  while ((i < _len(audio))) {
    res.push((audio[(i) < 0 ? audio.length + (i) : i] / max_val));
    i = (i + 1);
  }
  return res;
}
function dft(frame: number[], bins: number): number[] {
  let N: number = _len(frame);
  let spec: number[] = [];
  let k: number = 0;
  while ((k < bins)) {
    let real: number = 0.0;
    let imag: number = 0.0;
    let n: number = 0;
    while ((n < N)) {
      let angle: number = ((((-2.0 * PI) * k) * n) / N);
      real = (real + (frame[(n) < 0 ? frame.length + (n) : n] * cosApprox(angle)));
      imag = (imag + (frame[(n) < 0 ? frame.length + (n) : n] * sinApprox(angle)));
      n = (n + 1);
    }
    spec.push(((real * real) + (imag * imag)));
    k = (k + 1);
  }
  return spec;
}
function triangular_filters(bins: number, spectrum_size: number): number[][] {
  let filters: number[][] = [];
  let b: number = 0;
  while ((b < bins)) {
    let center: number = Math.trunc(((b + 1) * spectrum_size) / (bins + 1));
    let filt: number[] = [];
    let i: number = 0;
    while ((i < spectrum_size)) {
      let v: number = 0.0;
      if ((i <= center)) {
        v = (i / center);
      } else {
        v = ((spectrum_size - i) / (spectrum_size - center));
      }
      filt.push(v);
      i = (i + 1);
    }
    filters.push(filt);
    b = (b + 1);
  }
  return filters;
}
function dot(mat: number[][], vec: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(mat))) {
    let sum: number = 0.0;
    let j: number = 0;
    while ((j < _len(vec))) {
      sum = (sum + (mat[(i) < 0 ? mat.length + (i) : i][(j) < 0 ? mat[(i) < 0 ? mat.length + (i) : i].length + (j) : j] * vec[(j) < 0 ? vec.length + (j) : j]));
      j = (j + 1);
    }
    res.push(sum);
    i = (i + 1);
  }
  return res;
}
function discrete_cosine_transform(dct_filter_num: number, filter_num: number): number[][] {
  let basis: number[][] = [];
  let i: number = 0;
  while ((i < dct_filter_num)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < filter_num)) {
      if ((i == 0)) {
        row.push((1.0 / sqrtApprox(filter_num)));
      } else {
        let angle: number = (((((2 * j) + 1) * i) * PI) / (2.0 * filter_num));
        row.push((cosApprox(angle) * sqrtApprox((2.0 / filter_num))));
      }
      j = (j + 1);
    }
    basis.push(row);
    i = (i + 1);
  }
  return basis;
}
function mfcc(audio: number[], bins: number, dct_num: number): number[] {
  let norm: number[] = normalize(audio);
  let spec: number[] = dft(norm, (bins + 2));
  let filters: number[][] = triangular_filters(bins, _len(spec));
  let energies: number[] = dot(filters, spec);
  let logfb: number[] = [];
  let i: number = 0;
  while ((i < _len(energies))) {
    logfb.push((10.0 * log10((energies[(i) < 0 ? energies.length + (i) : i] + 1e-10))));
    i = (i + 1);
  }
  let dct_basis: number[][] = discrete_cosine_transform(dct_num, bins);
  let res: number[] = dot(dct_basis, logfb);
  if ((_len(res) == 0)) {
    res = [0.0, 0.0, 0.0];
  }
  return res;
}
let sample_rate: number = 8000;
let size: number = 16;
let audio: number[] = [];
let n: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let coeffs: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((n < size)) {
    let t: number = (n / sample_rate);
    audio.push(sinApprox((((2.0 * PI) * 440.0) * t)));
    n = (n + 1);
  }
coeffs = mfcc(audio, 5, 3)
  for (const c of coeffs) {
    console.log(_str(c));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

