// Generated by Mochi v0.10.59 on 2025-08-07 00:16:31 GMT+7

function exp_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1.0;
  while ((i < 20.0)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1.0);
  }
  return sum;
}
function sigmoid(x: number): number {
  return (1.0 / (1.0 + exp_taylor(-x)));
}
let X: number[][] = [[0.0, 0.0], [1.0, 1.0], [1.0, 0.0], [0.0, 1.0]];
let Y: number[] = [0.0, 1.0, 0.0, 0.0];
let test_data: number[][] = [[0.0, 0.0], [0.0, 1.0], [1.0, 1.0]];
let b1: number[] = [0.0, 0.0];
let b2: number = 0.0;
function train(epochs: number, lr: number) {
  let e: number = 0;
  while ((e < epochs)) {
    let i: number = 0;
    while ((i < _len(X))) {
      let x0: number = X[(i) < 0 ? X.length + (i) : i][(Math.trunc(0)) < 0 ? X[(i) < 0 ? X.length + (i) : i].length + (Math.trunc(0)) : Math.trunc(0)];
      let x1: number = X[(i) < 0 ? X.length + (i) : i][(Math.trunc(1)) < 0 ? X[(i) < 0 ? X.length + (i) : i].length + (Math.trunc(1)) : Math.trunc(1)];
      let target: number = Y[(i) < 0 ? Y.length + (i) : i];
      let z1: number = (((w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * x0) + (w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)] * x1)) + b1[(Math.trunc(0)) < 0 ? b1.length + (Math.trunc(0)) : Math.trunc(0)]);
      let z2: number = (((w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * x0) + (w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)] * x1)) + b1[(Math.trunc(1)) < 0 ? b1.length + (Math.trunc(1)) : Math.trunc(1)]);
      let h1: number = sigmoid(z1);
      let h2: number = sigmoid(z2);
      let z3: number = (((w2[(Math.trunc(0)) < 0 ? w2.length + (Math.trunc(0)) : Math.trunc(0)] * h1) + (w2[(Math.trunc(1)) < 0 ? w2.length + (Math.trunc(1)) : Math.trunc(1)] * h2)) + b2);
      let out: number = sigmoid(z3);
      let error: number = (out - target);
      let d1: number = (((h1 * (1.0 - h1)) * w2[(Math.trunc(0)) < 0 ? w2.length + (Math.trunc(0)) : Math.trunc(0)]) * error);
      let d2: number = (((h2 * (1.0 - h2)) * w2[(Math.trunc(1)) < 0 ? w2.length + (Math.trunc(1)) : Math.trunc(1)]) * error);
      w2[(0) < 0 ? w2.length + (0) : 0] = (w2[(Math.trunc(0)) < 0 ? w2.length + (Math.trunc(0)) : Math.trunc(0)] - ((lr * error) * h1));
      w2[(1) < 0 ? w2.length + (1) : 1] = (w2[(Math.trunc(1)) < 0 ? w2.length + (Math.trunc(1)) : Math.trunc(1)] - ((lr * error) * h2));
      b2 = (b2 - (lr * error));
      w1[(0) < 0 ? w1.length + (0) : 0][(0) < 0 ? w1[(0) < 0 ? w1.length + (0) : 0].length + (0) : 0] = (w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] - ((lr * d1) * x0));
      w1[(1) < 0 ? w1.length + (1) : 1][(0) < 0 ? w1[(1) < 0 ? w1.length + (1) : 1].length + (0) : 0] = (w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)] - ((lr * d1) * x1));
      b1[(0) < 0 ? b1.length + (0) : 0] = (b1[(Math.trunc(0)) < 0 ? b1.length + (Math.trunc(0)) : Math.trunc(0)] - (lr * d1));
      w1[(0) < 0 ? w1.length + (0) : 0][(1) < 0 ? w1[(0) < 0 ? w1.length + (0) : 0].length + (1) : 1] = (w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] - ((lr * d2) * x0));
      w1[(1) < 0 ? w1.length + (1) : 1][(1) < 0 ? w1[(1) < 0 ? w1.length + (1) : 1].length + (1) : 1] = (w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)] - ((lr * d2) * x1));
      b1[(1) < 0 ? b1.length + (1) : 1] = (b1[(Math.trunc(1)) < 0 ? b1.length + (Math.trunc(1)) : Math.trunc(1)] - (lr * d2));
      i = (i + 1);
    }
    e = (e + 1);
  }
}
function predict(samples: number[][]): number[] {
  let preds: number[] = [];
  let i: number = 0;
  while ((i < _len(samples))) {
    let x0: number = samples[(i) < 0 ? samples.length + (i) : i][(Math.trunc(0)) < 0 ? samples[(i) < 0 ? samples.length + (i) : i].length + (Math.trunc(0)) : Math.trunc(0)];
    let x1: number = samples[(i) < 0 ? samples.length + (i) : i][(Math.trunc(1)) < 0 ? samples[(i) < 0 ? samples.length + (i) : i].length + (Math.trunc(1)) : Math.trunc(1)];
    let z1: number = (((w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * x0) + (w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)] * x1)) + b1[(Math.trunc(0)) < 0 ? b1.length + (Math.trunc(0)) : Math.trunc(0)]);
    let z2: number = (((w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? w1[(Math.trunc(0)) < 0 ? w1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * x0) + (w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? w1[(Math.trunc(1)) < 0 ? w1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)] * x1)) + b1[(Math.trunc(1)) < 0 ? b1.length + (Math.trunc(1)) : Math.trunc(1)]);
    let h1: number = sigmoid(z1);
    let h2: number = sigmoid(z2);
    let z3: number = (((w2[(Math.trunc(0)) < 0 ? w2.length + (Math.trunc(0)) : Math.trunc(0)] * h1) + (w2[(Math.trunc(1)) < 0 ? w2.length + (Math.trunc(1)) : Math.trunc(1)] * h2)) + b2);
    let out: number = sigmoid(z3);
    let label: number = 0;
    if ((out >= 0.5)) {
      label = 1;
    }
    preds.push(label);
    i = (i + 1);
  }
  return preds;
}
function wrapper(y: number[]): number[] {
  return y;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let w1: number[][]
let w2: number[]
let preds: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
w1 = [[0.5, -0.5], [0.5, 0.5]]
w2 = [0.5, -0.5]
  train(4000, 0.5);
preds = wrapper(predict(test_data))
  console.log(_str(_str(preds)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

