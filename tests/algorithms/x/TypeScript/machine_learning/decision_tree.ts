// Generated by Mochi v0.10.61 on 2025-08-08 16:01:11 GMT+7

export type Tree = { tag: "Leaf"; prediction: number } | { tag: "Branch"; decision_boundary: number; left: Tree; right: Tree };
let PI: number = 3.141592653589793;
let TWO_PI: number = 6.283185307179586;
function _mod(x: number, m: number): number {
  return (x - (Math.trunc((x / m)) * m));
}
function sin(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y3: number = (y2 * y);
  let y5: number = (y3 * y2);
  let y7: number = (y5 * y2);
  return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0));
}
let seed: number = 123456789;
function rand(): number {
  seed = Number((((1103515245n * BigInt(seed)) + 12345n) % 2147483648n));
  return (seed / 2147483648.0);
}
function mean(vals: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(vals))) {
    sum = (sum + vals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return (sum / _len(vals));
}
function mean_squared_error(labels: number[], prediction: number): number {
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(labels))) {
    let diff: number = (labels[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] - prediction);
    total = (total + (diff * diff));
    i = (i + 1);
  }
  return (total / _len(labels));
}
function train_tree(x: number[], y: number[], depth: number, min_leaf_size: number): Tree {
  if ((_len(x) < (2 * min_leaf_size))) {
    return {"tag": "Leaf", "prediction": mean(y)};
  }
  if ((depth == 1)) {
    return {"tag": "Leaf", "prediction": mean(y)};
  }
  let best_split: number = 0;
  let min_error: number = (mean_squared_error(x, mean(y)) * 2.0);
  let i: number = 0;
  while ((i < _len(x))) {
    if ((_len(x.slice(0, i)) < min_leaf_size)) {
      i = i;
    } else {
      if ((_len(x.slice(i)) < min_leaf_size)) {
        i = i;
      } else {
        let err_left: number = mean_squared_error(x.slice(0, i), mean(y.slice(0, i)));
        let err_right: number = mean_squared_error(x.slice(i), mean(y.slice(i)));
        let err: number = (err_left + err_right);
        if ((err < min_error)) {
          best_split = i;
          min_error = err;
        }
      }
    }
    i = (i + 1);
  }
  if ((best_split != 0)) {
    let left_x: number[] = x.slice(0, best_split);
    let left_y: number[] = y.slice(0, best_split);
    let right_x: number[] = x.slice(best_split);
    let right_y: number[] = y.slice(best_split);
    let boundary: number = x[(()=>{const _mochi_idx = best_split; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()];
    let left_tree: Tree = train_tree(left_x, left_y, (depth - 1), min_leaf_size);
    let right_tree: Tree = train_tree(right_x, right_y, (depth - 1), min_leaf_size);
    return {"tag": "Branch", "decision_boundary": boundary, "left": left_tree, "right": right_tree};
  }
  return {"tag": "Leaf", "prediction": mean(y)};
}
function predict(tree: Tree, value: number): number {
  return ((tree.tag === "Leaf") ? tree.prediction : ((tree.tag === "Branch") ? ((value >= tree.decision_boundary) ? predict(tree.right, value) : predict(tree.left, value)) : undefined));
}
function main() {
  let x: number[] = [];
  let v: number = -1.0;
  while ((v < 1.0)) {
    x.push(v);
    v = (v + 0.005);
  }
  let y: number[] = [];
  let i: number = 0;
  while ((i < _len(x))) {
    y.push(sin(x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let tree: Tree = train_tree(x, y, 10, 10);
  let test_cases: number[] = [];
  i = 0;
  while ((i < 10)) {
    test_cases.push(((rand() * 2.0) - 1.0));
    i = (i + 1);
  }
  let predictions: number[] = [];
  i = 0;
  while ((i < _len(test_cases))) {
    predictions.push(predict(tree, test_cases[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? test_cases.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let sum_err: number = 0.0;
  i = 0;
  while ((i < _len(test_cases))) {
    let diff: number = (predictions[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? predictions.length + _mochi_idx : _mochi_idx;})()] - test_cases[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? test_cases.length + _mochi_idx : _mochi_idx;})()]);
    sum_err = (sum_err + (diff * diff));
    i = (i + 1);
  }
  let avg_error: number = (sum_err / _len(test_cases));
  console.log(_str(("Test values: " + _str(test_cases))));
  console.log(_str(("Predictions: " + _str(predictions))));
  console.log(_str(("Average error: " + _str(avg_error))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

