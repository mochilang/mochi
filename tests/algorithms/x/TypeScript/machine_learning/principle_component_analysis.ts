// Generated by Mochi v0.10.59 on 2025-08-07 00:16:33 GMT+7

export interface PCAResult { transformed: number[][]; variance_ratio: number[] }
function sqrt(x: number): number {
  let guess: number = ((x > 1.0) ? (x / 2.0) : 1.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = (0.5 * (guess + (x / guess)));
    i = (i + 1);
  }
  return guess;
}
function mean(xs: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(xs))) {
    sum = (sum + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return (sum / _len(xs));
}
function standardize(data: number[][]): number[][] {
  let n_samples: number = _len(data);
  let n_features: number = _len(data[(Math.trunc(0)) < 0 ? data.length + (Math.trunc(0)) : Math.trunc(0)]);
  let means: number[] = [];
  let stds: number[] = [];
  let j: number = 0;
  while ((j < n_features)) {
    let column: number[] = [];
    let i: number = 0;
    while ((i < n_samples)) {
      column.push(data[(i) < 0 ? data.length + (i) : i][(j) < 0 ? data[(i) < 0 ? data.length + (i) : i].length + (j) : j]);
      i = (i + 1);
    }
    let m: number = mean(column);
    means.push(m);
    let variance: number = 0.0;
    let k: number = 0;
    while ((k < n_samples)) {
      let diff: number = (column[(k) < 0 ? column.length + (k) : k] - m);
      variance = (variance + (diff * diff));
      k = (k + 1);
    }
    stds.push(sqrt((variance / (n_samples - 1))));
    j = (j + 1);
  }
  let standardized: number[][] = [];
  let r: number = 0;
  while ((r < n_samples)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < n_features)) {
      row.push(((data[(r) < 0 ? data.length + (r) : r][(c) < 0 ? data[(r) < 0 ? data.length + (r) : r].length + (c) : c] - means[(c) < 0 ? means.length + (c) : c]) / stds[(c) < 0 ? stds.length + (c) : c]));
      c = (c + 1);
    }
    standardized.push(row);
    r = (r + 1);
  }
  return standardized;
}
function covariance_matrix(data: number[][]): number[][] {
  let n_samples: number = _len(data);
  let n_features: number = _len(data[(Math.trunc(0)) < 0 ? data.length + (Math.trunc(0)) : Math.trunc(0)]);
  let cov: number[][] = [];
  let i: number = 0;
  while ((i < n_features)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n_features)) {
      let sum: number = 0.0;
      let k: number = 0;
      while ((k < n_samples)) {
        sum = (sum + (data[(k) < 0 ? data.length + (k) : k][(i) < 0 ? data[(k) < 0 ? data.length + (k) : k].length + (i) : i] * data[(k) < 0 ? data.length + (k) : k][(j) < 0 ? data[(k) < 0 ? data.length + (k) : k].length + (j) : j]));
        k = (k + 1);
      }
      row.push((sum / (n_samples - 1)));
      j = (j + 1);
    }
    cov.push(row);
    i = (i + 1);
  }
  return cov;
}
function normalize(vec: number[]): number[] {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(vec))) {
    sum = (sum + (vec[(i) < 0 ? vec.length + (i) : i] * vec[(i) < 0 ? vec.length + (i) : i]));
    i = (i + 1);
  }
  let n = sqrt(sum);
  let res: number[] = [];
  let j: number = 0;
  while ((j < _len(vec))) {
    res.push((vec[(j) < 0 ? vec.length + (j) : j] / n));
    j = (j + 1);
  }
  return res;
}
export interface Eigen { values: number[]; vectors: number[][] }
function eigen_decomposition_2x2(matrix: number[][]): Eigen {
  let a: number = matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)];
  let b: number = matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)];
  let c: number = matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)];
  let diff: number = (a - c);
  let discriminant: number = sqrt(((diff * diff) + ((4.0 * b) * b)));
  let lambda1: number = (((a + c) + discriminant) / 2.0);
  let lambda2: number = (((a + c) - discriminant) / 2.0);
  let v1: number[] = [];
  let v2: number[] = [];
  if ((b != 0.0)) {
    v1 = normalize([(lambda1 - c), b]);
    v2 = normalize([(lambda2 - c), b]);
  } else {
    v1 = [1.0, 0.0];
    v2 = [0.0, 1.0];
  }
  let eigenvalues: number[] = [lambda1, lambda2];
  let eigenvectors: number[][] = [v1, v2];
  if ((eigenvalues[(Math.trunc(0)) < 0 ? eigenvalues.length + (Math.trunc(0)) : Math.trunc(0)] < eigenvalues[(Math.trunc(1)) < 0 ? eigenvalues.length + (Math.trunc(1)) : Math.trunc(1)])) {
    let tmp_val: number = eigenvalues[(Math.trunc(0)) < 0 ? eigenvalues.length + (Math.trunc(0)) : Math.trunc(0)];
    eigenvalues[(0) < 0 ? eigenvalues.length + (0) : 0] = eigenvalues[(Math.trunc(1)) < 0 ? eigenvalues.length + (Math.trunc(1)) : Math.trunc(1)];
    eigenvalues[(1) < 0 ? eigenvalues.length + (1) : 1] = tmp_val;
    let tmp_vec: number[] = eigenvectors[(Math.trunc(0)) < 0 ? eigenvectors.length + (Math.trunc(0)) : Math.trunc(0)];
    eigenvectors[(0) < 0 ? eigenvectors.length + (0) : 0] = eigenvectors[(Math.trunc(1)) < 0 ? eigenvectors.length + (Math.trunc(1)) : Math.trunc(1)];
    eigenvectors[(1) < 0 ? eigenvectors.length + (1) : 1] = tmp_vec;
  }
  return {"values": eigenvalues, "vectors": eigenvectors};
}
function transpose(matrix: number[][]): number[][] {
  let rows: number = _len(matrix);
  let cols: number = _len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]);
  let trans: number[][] = [];
  let i: number = 0;
  while ((i < cols)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < rows)) {
      row.push(matrix[(j) < 0 ? matrix.length + (j) : j][(i) < 0 ? matrix[(j) < 0 ? matrix.length + (j) : j].length + (i) : i]);
      j = (j + 1);
    }
    trans.push(row);
    i = (i + 1);
  }
  return trans;
}
function matrix_multiply(a: number[][], b: number[][]): number[][] {
  let rows_a: number = _len(a);
  let cols_a: number = _len(a[(Math.trunc(0)) < 0 ? a.length + (Math.trunc(0)) : Math.trunc(0)]);
  let rows_b: number = _len(b);
  let cols_b: number = _len(b[(Math.trunc(0)) < 0 ? b.length + (Math.trunc(0)) : Math.trunc(0)]);
  if ((cols_a != rows_b)) {
    _panic("Incompatible matrices");
  }
  let result: number[][] = [];
  let i: number = 0;
  while ((i < rows_a)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols_b)) {
      let sum: number = 0.0;
      let k: number = 0;
      while ((k < cols_a)) {
        sum = (sum + (a[(i) < 0 ? a.length + (i) : i][(k) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (k) : k] * b[(k) < 0 ? b.length + (k) : k][(j) < 0 ? b[(k) < 0 ? b.length + (k) : k].length + (j) : j]));
        k = (k + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function apply_pca(data: number[][], n_components: number): PCAResult {
  let standardized: number[][] = standardize(data);
  let cov: number[][] = covariance_matrix(standardized);
  let eig: Eigen = eigen_decomposition_2x2(cov);
  let eigenvalues: number[] = eig.values;
  let eigenvectors: number[][] = eig.vectors;
  let components: number[][] = transpose(eigenvectors);
  let transformed: number[][] = matrix_multiply(standardized, components);
  let total: number = (eigenvalues[(Math.trunc(0)) < 0 ? eigenvalues.length + (Math.trunc(0)) : Math.trunc(0)] + eigenvalues[(Math.trunc(1)) < 0 ? eigenvalues.length + (Math.trunc(1)) : Math.trunc(1)]);
  let ratios: number[] = [];
  let i: number = 0;
  while ((i < n_components)) {
    ratios.push((eigenvalues[(i) < 0 ? eigenvalues.length + (i) : i] / total));
    i = (i + 1);
  }
  return {transformed, "variance_ratio": ratios};
}
let data: number[][] = [[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2.0, 1.6], [1.0, 1.1], [1.5, 1.6], [1.1, 0.9]];
let idx: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let result: PCAResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = apply_pca(data, 2)
  console.log(_str("Transformed Data (first 5 rows):"));
  while ((idx < 5)) {
    console.log(_str("[" + (result.transformed[(idx) < 0 ? result.transformed.length + (idx) : idx]).join(' ') + "]"));
    idx = (idx + 1);
  }
  console.log(_str("Explained Variance Ratio:"));
  console.log(_str("[" + (result.variance_ratio).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

