// Generated by Mochi v0.10.59 on 2025-08-07 00:04:05 GMT+7

export interface Dual { value: number; deriv: number }
function dual(v: number, d: number): Dual {
  return {"value": v, "deriv": d};
}
function pow_float(base: number, exp: number): number {
  let res: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    res = (res * base);
    i = (i + 1);
  }
  return res;
}
function add(a: Dual, b: Dual): Dual {
  return {"value": (a.value + b.value), "deriv": (a.deriv + b.deriv)};
}
function sub(a: Dual, b: Dual): Dual {
  return {"value": (a.value - b.value), "deriv": (a.deriv - b.deriv)};
}
function mul(a: Dual, b: Dual): Dual {
  return {"value": (a.value * b.value), "deriv": ((a.deriv * b.value) + (b.deriv * a.value))};
}
function div(a: Dual, b: Dual): Dual {
  return {"value": (a.value / b.value), "deriv": (((a.deriv * b.value) - (b.deriv * a.value)) / (b.value * b.value))};
}
function power(a: Dual, p: number): Dual {
  return {"value": pow_float(a.value, p), "deriv": (((1.0 * p) * pow_float(a.value, (p - 1))) * a.deriv)};
}
function main() {
  let a: Dual = dual(2.0, 1.0);
  let b: Dual = dual(1.0, 0.0);
  let c: Dual = add(a, b);
  let d: Dual = mul(a, b);
  let e: Dual = div(c, d);
  console.log(_str(_str(e.deriv)));
  let x: Dual = dual(2.0, 1.0);
  let y: Dual = power(x, 3);
  console.log(_str(_str(y.deriv)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

