// Generated by Mochi v0.10.59 on 2025-08-07 00:16:35 GMT+7

function get_winner(weights: number[][], sample: number[]): number {
  let d0: number = 0.0;
  let d1: number = 0.0;
  for (let i = 0; i < _len(sample); i++) {
    let diff0: number = (sample[(i) < 0 ? sample.length + (i) : i] - weights[(Math.trunc(0)) < 0 ? weights.length + (Math.trunc(0)) : Math.trunc(0)][(i) < 0 ? weights[(Math.trunc(0)) < 0 ? weights.length + (Math.trunc(0)) : Math.trunc(0)].length + (i) : i]);
    let diff1: number = (sample[(i) < 0 ? sample.length + (i) : i] - weights[(Math.trunc(1)) < 0 ? weights.length + (Math.trunc(1)) : Math.trunc(1)][(i) < 0 ? weights[(Math.trunc(1)) < 0 ? weights.length + (Math.trunc(1)) : Math.trunc(1)].length + (i) : i]);
    d0 = (d0 + (diff0 * diff0));
    d1 = (d1 + (diff1 * diff1));
    return ((d0 > d1) ? 0 : 1);
  }
  return 0;
}
function update(weights: number[][], sample: number[], j: number, alpha: number): number[][] {
  for (let i = 0; i < _len(weights); i++) {
    weights[(j) < 0 ? weights.length + (j) : j][(i) < 0 ? weights[(j) < 0 ? weights.length + (j) : j].length + (i) : i] = (weights[(j) < 0 ? weights.length + (j) : j][(i) < 0 ? weights[(j) < 0 ? weights.length + (j) : j].length + (i) : i] + (alpha * (sample[(i) < 0 ? sample.length + (i) : i] - weights[(j) < 0 ? weights.length + (j) : j][(i) < 0 ? weights[(j) < 0 ? weights.length + (j) : j].length + (i) : i])));
  }
  return weights;
}
function list_to_string(xs: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(xs))) {
    s = (s + _str(xs[(i) < 0 ? xs.length + (i) : i]));
    if ((i < (_len(xs) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function matrix_to_string(m: number[][]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(m))) {
    s = (s + list_to_string(m[(i) < 0 ? m.length + (i) : i]));
    if ((i < (_len(m) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function main() {
  let training_samples: number[][] = [[1, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]];
  let weights: number[][] = [[0.2, 0.6, 0.5, 0.9], [0.8, 0.4, 0.7, 0.3]];
  let epochs: number = 3;
  let alpha: number = 0.5;
  for (let _ = 0; _ < epochs; _++) {
    for (let j = 0; j < _len(training_samples); j++) {
      let sample: number[] = training_samples[(j) < 0 ? training_samples.length + (j) : j];
      let winner: number = get_winner(weights, sample);
      weights = update(weights, sample, winner, alpha);
    }
  }
  let sample: number[] = [0, 0, 0, 1];
  let winner: number = get_winner(weights, sample);
  console.log(_str(("Clusters that the test sample belongs to : " + _str(winner))));
  console.log(_str(("Weights that have been trained : " + matrix_to_string(weights))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

