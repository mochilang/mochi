// Generated by Mochi v0.10.59 on 2025-08-07 00:16:32 GMT+7

function design_matrix(xs: number[], degree: number): number[][] {
  let i: number = 0;
  let matrix: number[][] = [];
  while ((i < _len(xs))) {
    let row: number[] = [];
    let j: number = 0;
    let pow: number = 1.0;
    while ((j <= degree)) {
      row.push(pow);
      pow = (pow * xs[(i) < 0 ? xs.length + (i) : i]);
      j = (j + 1);
    }
    matrix.push(row);
    i = (i + 1);
  }
  return matrix;
}
function transpose(matrix: number[][]): number[][] {
  let rows: number = _len(matrix);
  let cols: number = _len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]);
  let j: number = 0;
  let result: number[][] = [];
  while ((j < cols)) {
    let row: number[] = [];
    let i: number = 0;
    while ((i < rows)) {
      row.push(matrix[(i) < 0 ? matrix.length + (i) : i][(j) < 0 ? matrix[(i) < 0 ? matrix.length + (i) : i].length + (j) : j]);
      i = (i + 1);
    }
    result.push(row);
    j = (j + 1);
  }
  return result;
}
function matmul(A: number[][], B: number[][]): number[][] {
  let n: number = _len(A);
  let m: number = _len(A[(Math.trunc(0)) < 0 ? A.length + (Math.trunc(0)) : Math.trunc(0)]);
  let p: number = _len(B[(Math.trunc(0)) < 0 ? B.length + (Math.trunc(0)) : Math.trunc(0)]);
  let i: number = 0;
  let result: number[][] = [];
  while ((i < n)) {
    let row: number[] = [];
    let k: number = 0;
    while ((k < p)) {
      let sum: number = 0.0;
      let j: number = 0;
      while ((j < m)) {
        sum = (sum + (A[(i) < 0 ? A.length + (i) : i][(j) < 0 ? A[(i) < 0 ? A.length + (i) : i].length + (j) : j] * B[(j) < 0 ? B.length + (j) : j][(k) < 0 ? B[(j) < 0 ? B.length + (j) : j].length + (k) : k]));
        j = (j + 1);
      }
      row.push(sum);
      k = (k + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function matvec_mul(A: number[][], v: number[]): number[] {
  let n: number = _len(A);
  let m: number = _len(A[(Math.trunc(0)) < 0 ? A.length + (Math.trunc(0)) : Math.trunc(0)]);
  let i: number = 0;
  let result: number[] = [];
  while ((i < n)) {
    let sum: number = 0.0;
    let j: number = 0;
    while ((j < m)) {
      sum = (sum + (A[(i) < 0 ? A.length + (i) : i][(j) < 0 ? A[(i) < 0 ? A.length + (i) : i].length + (j) : j] * v[(j) < 0 ? v.length + (j) : j]));
      j = (j + 1);
    }
    result.push(sum);
    i = (i + 1);
  }
  return result;
}
function gaussian_elimination(A: number[][], b: number[]): number[] {
  let n: number = _len(A);
  let M: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    M.push([...A[(i) < 0 ? A.length + (i) : i], b[(i) < 0 ? b.length + (i) : i]]);
    i = (i + 1);
  }
  let k: number = 0;
  while ((k < n)) {
    let j: number = (k + 1);
    while ((j < n)) {
      let factor: number = (M[(j) < 0 ? M.length + (j) : j][(k) < 0 ? M[(j) < 0 ? M.length + (j) : j].length + (k) : k] / M[(k) < 0 ? M.length + (k) : k][(k) < 0 ? M[(k) < 0 ? M.length + (k) : k].length + (k) : k]);
      let rowj: number[] = M[(j) < 0 ? M.length + (j) : j];
      let rowk: number[] = M[(k) < 0 ? M.length + (k) : k];
      let l: number = k;
      while ((l <= n)) {
        rowj[(l) < 0 ? rowj.length + (l) : l] = (rowj[(l) < 0 ? rowj.length + (l) : l] - (factor * rowk[(l) < 0 ? rowk.length + (l) : l]));
        l = (l + 1);
      }
      M[(j) < 0 ? M.length + (j) : j] = rowj;
      j = (j + 1);
    }
    k = (k + 1);
  }
  let x: number[] = [];
  let t: number = 0;
  while ((t < n)) {
    x.push(0.0);
    t = (t + 1);
  }
  let i2: number = (n - 1);
  while ((i2 >= 0)) {
    let sum: number = M[(i2) < 0 ? M.length + (i2) : i2][(n) < 0 ? M[(i2) < 0 ? M.length + (i2) : i2].length + (n) : n];
    let j2: number = (i2 + 1);
    while ((j2 < n)) {
      sum = (sum - (M[(i2) < 0 ? M.length + (i2) : i2][(j2) < 0 ? M[(i2) < 0 ? M.length + (i2) : i2].length + (j2) : j2] * x[(j2) < 0 ? x.length + (j2) : j2]));
      j2 = (j2 + 1);
    }
    x[(i2) < 0 ? x.length + (i2) : i2] = (sum / M[(i2) < 0 ? M.length + (i2) : i2][(i2) < 0 ? M[(i2) < 0 ? M.length + (i2) : i2].length + (i2) : i2]);
    i2 = (i2 - 1);
  }
  return x;
}
function predict(xs: number[], coeffs: number[]): number[] {
  let i: number = 0;
  let result: number[] = [];
  while ((i < _len(xs))) {
    let x: number = xs[(i) < 0 ? xs.length + (i) : i];
    let j: number = 0;
    let pow: number = 1.0;
    let sum: number = 0.0;
    while ((j < _len(coeffs))) {
      sum = (sum + (coeffs[(j) < 0 ? coeffs.length + (j) : j] * pow));
      pow = (pow * x);
      j = (j + 1);
    }
    result.push(sum);
    i = (i + 1);
  }
  return result;
}
let xs: number[] = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
let ys: number[] = [];
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let X: number[][]
let Xt: number[][]
let XtX: number[][]
let Xty: number[]
let coeffs: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i < _len(xs))) {
    let x: number = xs[(i) < 0 ? xs.length + (i) : i];
    ys.push((((((x * x) * x) - ((2.0 * x) * x)) + (3.0 * x)) - 5.0));
    i = (i + 1);
  }
X = design_matrix(xs, 3)
Xt = transpose(X)
XtX = matmul(Xt, X)
Xty = matvec_mul(Xt, ys)
coeffs = gaussian_elimination(XtX, Xty)
  console.log(_str(_str(coeffs)));
  console.log(_str(_str(predict([-1.0], coeffs))));
  console.log(_str(_str(predict([-2.0], coeffs))));
  console.log(_str(_str(predict([6.0], coeffs))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

