// Generated by Mochi v0.10.63 on 2025-08-11 18:39:37 GMT+7

function dot(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    sum = (sum + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return sum;
}
function maxf(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}
function minf(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function absf(x: number): number {
  if ((x >= 0.0)) {
    return x;
  }
  return (0.0 - x);
}
function predict_raw(samples: number[][], labels: number[], alphas: number[], b: number, x: number[]): number {
  let res: number = 0.0;
  let i: number = 0;
  while ((i < _len(samples))) {
    res = (res + ((alphas[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] * labels[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()]) * dot(samples[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], x)));
    i = (i + 1);
  }
  return (res + b);
}
function smo_train(samples: number[][], labels: number[], c: number, tol: number, max_passes: number): number[][] {
  let m: number = _len(samples);
  let alphas: number[] = [];
  let i: number = 0;
  while ((i < m)) {
    alphas.push(0.0);
    i = (i + 1);
  }
  let b: number = 0.0;
  let passes: number = 0;
  while ((passes < max_passes)) {
    let num_changed: number = 0;
    let i1: number = 0;
    while ((i1 < m)) {
      let Ei: number = (predict_raw(samples, labels, alphas, b, samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()]) - labels[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()]);
      if (((((labels[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * Ei) < (0.0 - tol)) && (alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] < c)) || (((labels[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * Ei) > tol) && (alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] > 0.0)))) {
        let i2: number = ((i1 + 1) % m);
        let Ej: number = (predict_raw(samples, labels, alphas, b, samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()]) - labels[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()]);
        let alpha1_old: number = alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()];
        let alpha2_old: number = alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()];
        let L: number = 0.0;
        let H: number = 0.0;
        if ((labels[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] != labels[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()])) {
          L = maxf(0.0, (alpha2_old - alpha1_old));
          H = minf(c, ((c + alpha2_old) - alpha1_old));
        } else {
          L = maxf(0.0, ((alpha2_old + alpha1_old) - c));
          H = minf(c, (alpha2_old + alpha1_old));
        }
        if ((L == H)) {
          i1 = (i1 + 1);
          continue
        }
        let eta: number = (((2.0 * dot(samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()])) - dot(samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()])) - dot(samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()]));
        if ((eta >= 0.0)) {
          i1 = (i1 + 1);
          continue
        }
        alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] = (alpha2_old - ((labels[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * (Ei - Ej)) / eta));
        if ((alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] > H)) {
          alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] = H;
        }
        if ((alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] < L)) {
          alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] = L;
        }
        if ((absf((alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] - alpha2_old)) < 1e-05)) {
          i1 = (i1 + 1);
          continue
        }
        alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] = (alpha1_old + ((labels[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * labels[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()]) * (alpha2_old - alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()])));
        let b1: number = (((b - Ei) - ((labels[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * (alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] - alpha1_old)) * dot(samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()]))) - ((labels[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * (alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] - alpha2_old)) * dot(samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()])));
        let b2: number = (((b - Ej) - ((labels[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * (alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] - alpha1_old)) * dot(samples[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()]))) - ((labels[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? labels.length + _mochi_idx : _mochi_idx;})()] * (alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] - alpha2_old)) * dot(samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()], samples[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()])));
        if (((alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] > 0.0) && (alphas[(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] < c))) {
          b = b1;
        } else {
          if (((alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] > 0.0) && (alphas[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? alphas.length + _mochi_idx : _mochi_idx;})()] < c))) {
            b = b2;
          } else {
            b = ((b1 + b2) / 2.0);
          }
        }
        num_changed = (num_changed + 1);
      }
      i1 = (i1 + 1);
    }
    if ((num_changed == 0)) {
      passes = (passes + 1);
    } else {
      passes = 0;
    }
  }
  return [alphas, [b]];
}
function predict(samples: number[][], labels: number[], model: number[][], x: number[]): number {
  let alphas: number[] = model[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? model.length + _mochi_idx : _mochi_idx;})()];
  let b: number = model[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? model.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? model[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? model.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let val: number = predict_raw(samples, labels, alphas, b, x);
  if ((val >= 0.0)) {
    return 1.0;
  }
  return -1.0;
}
let samples: number[][] = [[2.0, 2.0], [1.5, 1.5], [0.0, 0.0], [0.5, 0.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let labels: number[]
let model: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
labels = [1.0, 1.0, -1.0, -1.0]
model = smo_train(samples, labels, 1.0, 0.001, 10)
  console.log(_str(predict(samples, labels, model, [1.5, 1.0])));
  console.log(_str(predict(samples, labels, model, [0.2, 0.1])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

