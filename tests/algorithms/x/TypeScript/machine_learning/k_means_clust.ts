// Generated by Mochi v0.10.59 on 2025-08-07 00:16:23 GMT+7

export interface KMeansResult { centroids: number[][]; assignments: number[]; heterogeneity: number[] }
function distance_sq(a: number[], b: number[]): number {
  let sum: number = 0.0;
  for (let i = 0; i < _len(a); i++) {
    let diff: number = (a[(i) < 0 ? a.length + (i) : i] - b[(i) < 0 ? b.length + (i) : i]);
    sum = (sum + (diff * diff));
  }
  return sum;
}
function assign_clusters(data: number[][], centroids: number[][]): number[] {
  let assignments: number[] = [];
  for (let i = 0; i < _len(data); i++) {
    let best_idx: number = 0;
    let best: number = distance_sq(data[(i) < 0 ? data.length + (i) : i], centroids[(Math.trunc(0)) < 0 ? centroids.length + (Math.trunc(0)) : Math.trunc(0)]);
    for (let j = 1; j < _len(centroids); j++) {
      let dist: number = distance_sq(data[(i) < 0 ? data.length + (i) : i], centroids[(j) < 0 ? centroids.length + (j) : j]);
      if ((dist < best)) {
        best = dist;
        best_idx = j;
      }
    }
    assignments.push(best_idx);
  }
  return assignments;
}
function revise_centroids(data: number[][], k: number, assignment: number[]): number[][] {
  let dim: number = _len(data[(Math.trunc(0)) < 0 ? data.length + (Math.trunc(0)) : Math.trunc(0)]);
  let sums: number[][] = [];
  let counts: number[] = [];
  for (let i = 0; i < k; i++) {
    let row: number[] = [];
    for (let j = 0; j < dim; j++) {
      row.push(0.0);
    }
    sums.push(row);
    counts.push(0);
  }
  for (let i = 0; i < _len(data); i++) {
    let c: number = assignment[(i) < 0 ? assignment.length + (i) : i];
    counts[(c) < 0 ? counts.length + (c) : c] = (counts[(c) < 0 ? counts.length + (c) : c] + 1);
    for (let j = 0; j < dim; j++) {
      sums[(c) < 0 ? sums.length + (c) : c][(j) < 0 ? sums[(c) < 0 ? sums.length + (c) : c].length + (j) : j] = (sums[(c) < 0 ? sums.length + (c) : c][(j) < 0 ? sums[(c) < 0 ? sums.length + (c) : c].length + (j) : j] + data[(i) < 0 ? data.length + (i) : i][(j) < 0 ? data[(i) < 0 ? data.length + (i) : i].length + (j) : j]);
    }
  }
  let centroids: number[][] = [];
  for (let i = 0; i < k; i++) {
    let row: number[] = [];
    if ((counts[(i) < 0 ? counts.length + (i) : i] > 0)) {
      for (let j = 0; j < dim; j++) {
        row.push((sums[(i) < 0 ? sums.length + (i) : i][(j) < 0 ? sums[(i) < 0 ? sums.length + (i) : i].length + (j) : j] / counts[(i) < 0 ? counts.length + (i) : i]));
      }
    } else {
      for (let j = 0; j < dim; j++) {
        row.push(0.0);
      }
    }
    centroids.push(row);
  }
  return centroids;
}
function compute_heterogeneity(data: number[][], centroids: number[][], assignment: number[]): number {
  let total: number = 0.0;
  for (let i = 0; i < _len(data); i++) {
    let c: number = assignment[(i) < 0 ? assignment.length + (i) : i];
    total = (total + distance_sq(data[(i) < 0 ? data.length + (i) : i], centroids[(c) < 0 ? centroids.length + (c) : c]));
  }
  return total;
}
function lists_equal(a: number[], b: number[]): boolean {
  if ((_len(a) != _len(b))) {
    return false;
  }
  for (let i = 0; i < _len(a); i++) {
    if ((a[(i) < 0 ? a.length + (i) : i] != b[(i) < 0 ? b.length + (i) : i])) {
      return false;
    }
  }
  return true;
}
function kmeans(data: number[][], k: number, initial_centroids: number[][], max_iter: number): KMeansResult {
  let centroids: number[][] = initial_centroids;
  let assignment: number[] = [];
  let prev: number[] = [];
  let heterogeneity: number[] = [];
  let iter: number = 0;
  while ((iter < max_iter)) {
    assignment = assign_clusters(data, centroids);
    centroids = revise_centroids(data, k, assignment);
    let h: number = compute_heterogeneity(data, centroids, assignment);
    heterogeneity.push(h);
    if (((iter > 0) && lists_equal(prev, assignment))) {
      break
    }
    prev = assignment;
    iter = (iter + 1);
  }
  return {centroids, "assignments": assignment, heterogeneity};
}
let data: number[][] = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]];
let k: number = 3;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let initial_centroids: number[][]
let result: KMeansResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
initial_centroids = [data[(Math.trunc(0)) < 0 ? data.length + (Math.trunc(0)) : Math.trunc(0)], data[(Math.trunc(2)) < 0 ? data.length + (Math.trunc(2)) : Math.trunc(2)], data[(Math.trunc(5)) < 0 ? data.length + (Math.trunc(5)) : Math.trunc(5)]]
result = kmeans(data, k, initial_centroids, 10)
  console.log(_str(_str(result.centroids)));
  console.log(_str(_str(result.assignments)));
  console.log(_str(_str(result.heterogeneity)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

