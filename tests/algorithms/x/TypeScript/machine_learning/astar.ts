// Generated by Mochi v0.10.61 on 2025-08-08 15:58:21 GMT+7

export interface Point { x: number; y: number }
export interface Node { pos: Point; parent: Point; g: number; h: number; f: number }
function get_neighbours(p: Point, x_limit: number, y_limit: number): Point[] {
  let deltas: Point[] = [{"x": (0 - 1), "y": (0 - 1)}, {"x": (0 - 1), "y": 0}, {"x": (0 - 1), "y": 1}, {"x": 0, "y": (0 - 1)}, {"x": 0, "y": 1}, {"x": 1, "y": (0 - 1)}, {"x": 1, "y": 0}, {"x": 1, "y": 1}];
  let neighbours: Point[] = [];
  for (const d of deltas) {
    let nx: number = (p.x + d.x);
    let ny: number = (p.y + d.y);
    if (((((0 <= nx) && (nx < x_limit)) && (0 <= ny)) && (ny < y_limit))) {
      neighbours.push({"x": nx, "y": ny});
    }
  }
  return neighbours;
}
function contains(nodes: Node[], p: Point): boolean {
  for (const n of nodes) {
    if (((n.pos.x == p.x) && (n.pos.y == p.y))) {
      return true;
    }
  }
  return false;
}
function get_node(nodes: Node[], p: Point): Node {
  for (const n of nodes) {
    if (((n.pos.x == p.x) && (n.pos.y == p.y))) {
      return n;
    }
  }
  return {"pos": p, "parent": {"x": (0 - 1), "y": (0 - 1)}, "g": 0, "h": 0, "f": 0};
}
function astar(x_limit: number, y_limit: number, start: Point, goal: Point): Point[] {
  let open: Node[] = [];
  let closed: Node[] = [];
  open.push({"pos": start, "parent": {"x": (0 - 1), "y": (0 - 1)}, "g": 0, "h": 0, "f": 0});
  let current: Node = open[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()];
  while ((_len(open) > 0)) {
    let min_index: number = 0;
    let i: number = 1;
    while ((i < _len(open))) {
      if ((open[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()].f < open[(()=>{const _mochi_idx = min_index; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()].f)) {
        min_index = i;
      }
      i = (i + 1);
    }
    current = open[(()=>{const _mochi_idx = min_index; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()];
    let new_open: Node[] = [];
    let j: number = 0;
    while ((j < _len(open))) {
      if ((j != min_index)) {
        new_open.push(open[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? open.length + _mochi_idx : _mochi_idx;})()]);
      }
      j = (j + 1);
    }
    open = new_open;
    closed.push(current);
    if (((current.pos.x == goal.x) && (current.pos.y == goal.y))) {
      break
    }
    let neighbours: Point[] = get_neighbours(current.pos, x_limit, y_limit);
    for (const np of neighbours) {
      if (contains(closed, np)) {
        continue
      }
      let g: number = (current.g + 1);
      let dx: number = (goal.x - np.x);
      let dy: number = (goal.y - np.y);
      let h: number = ((dx * dx) + (dy * dy));
      let f: number = (g + h);
      let skip: boolean = false;
      for (const node of open) {
        if ((((node.pos.x == np.x) && (node.pos.y == np.y)) && (node.f < f))) {
          skip = true;
        }
      }
      if (skip) {
        continue
      }
      open.push({"pos": np, "parent": current.pos, g, h, f});
    }
  }
  let path: Point[] = [];
  path.push(current.pos);
  while (!((current.parent.x == (0 - 1)) && (current.parent.y == (0 - 1)))) {
    current = get_node(closed, current.parent);
    path.push(current.pos);
  }
  let rev: Point[] = [];
  let k: number = (_len(path) - 1);
  while ((k >= 0)) {
    rev.push(path[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()]);
    k = (k - 1);
  }
  return rev;
}
function create_world(x_limit: number, y_limit: number): number[][] {
  let world: number[][] = [];
  let i: number = 0;
  while ((i < x_limit)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < y_limit)) {
      row.push(0);
      j = (j + 1);
    }
    world.push(row);
    i = (i + 1);
  }
  return world;
}
function mark_path(world: number[][], path: Point[]) {
  for (const p of path) {
    world[(()=>{const _mochi_idx = p.x; return _mochi_idx < 0 ? world.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p.y; return _mochi_idx < 0 ? world[(()=>{const _mochi_idx = p.x; return _mochi_idx < 0 ? world.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
  }
}
function print_world(world: number[][]) {
  for (const row of world) {
    console.log(_str(_str(row)));
  }
}
let world_x: number = 5;
let world_y: number = 5;
let start: Point = {"x": 0, "y": 0};
let goal: Point = {"x": 4, "y": 4};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let path: Point[]
let world: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
path = astar(world_x, world_y, start, goal)
  console.log(_str((((((((("path from (" + _str(start.x)) + ", ") + _str(start.y)) + ") to (") + _str(goal.x)) + ", ") + _str(goal.y)) + ")")));
world = create_world(world_x, world_y)
  mark_path(world, path);
  print_world(world);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

