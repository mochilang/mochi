// Generated by Mochi v0.10.63 on 2025-08-11 18:38:11 GMT+7

export interface PointLabel { point: number[]; label: number }
export interface KNN { data: PointLabel[]; labels: string[] }
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function make_knn(train_data: number[][], train_target: number[], class_labels: string[]): KNN {
  let items: PointLabel[] = [];
  let i: number = 0;
  while ((i < _len(train_data))) {
    let pl: PointLabel = {"point": train_data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? train_data.length + _mochi_idx : _mochi_idx;})()], "label": train_target[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? train_target.length + _mochi_idx : _mochi_idx;})()]};
    items.push(pl);
    i = (i + 1);
  }
  return {"data": items, "labels": class_labels};
}
function euclidean_distance(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    let diff: number = (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    sum = (sum + (diff * diff));
    i = (i + 1);
  }
  return sqrtApprox(sum);
}
export interface DistLabel { dist: number; label: number }
function classify(knn: KNN, pred_point: number[], k: number): string {
  let distances: DistLabel[] = [];
  let i: number = 0;
  while ((i < _len(knn.data))) {
    let d = euclidean_distance(knn.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? knn.data.length + _mochi_idx : _mochi_idx;})()].point, pred_point);
    distances.push({"dist": d, "label": knn.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? knn.data.length + _mochi_idx : _mochi_idx;})()].label});
    i = (i + 1);
  }
  let votes: number[] = [];
  let count: number = 0;
  while ((count < k)) {
    let min_index: number = 0;
    let j: number = 1;
    while ((j < _len(distances))) {
      if ((distances[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()].dist < distances[(()=>{const _mochi_idx = min_index; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()].dist)) {
        min_index = j;
      }
      j = (j + 1);
    }
    votes.push(distances[(()=>{const _mochi_idx = min_index; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()].label);
    distances[(()=>{const _mochi_idx = min_index; return _mochi_idx < 0 ? distances.length + _mochi_idx : _mochi_idx;})()].dist = 1000000000000000000.0;
    count = (count + 1);
  }
  let tally: number[] = [];
  let t: number = 0;
  while ((t < _len(knn.labels))) {
    tally.push(0);
    t = (t + 1);
  }
  let v: number = 0;
  while ((v < _len(votes))) {
    let lbl: number = votes[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? votes.length + _mochi_idx : _mochi_idx;})()];
    tally[(()=>{const _mochi_idx = lbl; return _mochi_idx < 0 ? tally.length + _mochi_idx : _mochi_idx;})()] = (tally[(()=>{const _mochi_idx = lbl; return _mochi_idx < 0 ? tally.length + _mochi_idx : _mochi_idx;})()] + 1);
    v = (v + 1);
  }
  let max_idx: number = 0;
  let m: number = 1;
  while ((m < _len(tally))) {
    if ((tally[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? tally.length + _mochi_idx : _mochi_idx;})()] > tally[(()=>{const _mochi_idx = max_idx; return _mochi_idx < 0 ? tally.length + _mochi_idx : _mochi_idx;})()])) {
      max_idx = m;
    }
    m = (m + 1);
  }
  return knn.labels[(()=>{const _mochi_idx = max_idx; return _mochi_idx < 0 ? knn.labels.length + _mochi_idx : _mochi_idx;})()];
}
let train_X: number[][] = [[0.0, 0.0], [1.0, 0.0], [0.0, 1.0], [0.5, 0.5], [3.0, 3.0], [2.0, 3.0], [3.0, 2.0]];
let train_y: number[] = [0, 0, 0, 0, 1, 1, 1];
let classes: string[] = ["A", "B"];
let point: number[] = [1.2, 1.2];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let knn: KNN
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
knn = make_knn(train_X, train_y, classes)
  console.log(_str(classify(knn, point, 5)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

