// Generated by Mochi v0.10.63 on 2025-08-11 18:39:42 GMT+7

export interface Neighbor { vector: number[]; distance: number }
function sqrt(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function euclidean(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    let diff: number = (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    sum = (sum + (diff * diff));
    i = (i + 1);
  }
  let res = sqrt(sum);
  return res;
}
function similarity_search(dataset: number[][], value_array: number[][]): Neighbor[] {
  let dim: number = _len(dataset[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dataset.length + _mochi_idx : _mochi_idx;})()]);
  if ((dim != _len(value_array[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? value_array.length + _mochi_idx : _mochi_idx;})()]))) {
    return [];
  }
  let result: Neighbor[] = [];
  let i: number = 0;
  while ((i < _len(value_array))) {
    let value: number[] = value_array[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? value_array.length + _mochi_idx : _mochi_idx;})()];
    let dist: number = euclidean(value, dataset[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dataset.length + _mochi_idx : _mochi_idx;})()]);
    let vec: number[] = dataset[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dataset.length + _mochi_idx : _mochi_idx;})()];
    let j: number = 1;
    while ((j < _len(dataset))) {
      let d: number = euclidean(value, dataset[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dataset.length + _mochi_idx : _mochi_idx;})()]);
      if ((d < dist)) {
        dist = d;
        vec = dataset[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dataset.length + _mochi_idx : _mochi_idx;})()];
      }
      j = (j + 1);
    }
    let nb: Neighbor = {"vector": vec, "distance": dist};
    result.push(nb);
    i = (i + 1);
  }
  return result;
}
function cosine_similarity(a: number[], b: number[]): number {
  let dot: number = 0.0;
  let norm_a: number = 0.0;
  let norm_b: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    dot = (dot + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    norm_a = (norm_a + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]));
    norm_b = (norm_b + (b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  if (((norm_a == 0.0) || (norm_b == 0.0))) {
    return 0.0;
  }
  return (dot / (sqrt(norm_a) * sqrt(norm_b)));
}
let dataset: number[][] = [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]];
let value_array: number[][] = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]];
let k: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let neighbors: Neighbor[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
neighbors = similarity_search(dataset, value_array)
  while ((k < _len(neighbors))) {
    let n: Neighbor = neighbors[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? neighbors.length + _mochi_idx : _mochi_idx;})()];
    console.log(_str((((("[" + _str(n.vector)) + ", ") + _str(n.distance)) + "]")));
    k = (k + 1);
  }
  console.log(_str(_str(cosine_similarity([1.0, 2.0], [6.0, 32.0]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

