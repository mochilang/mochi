// Generated by Mochi v0.10.59 on 2025-08-07 00:04:02 GMT+7

export interface Itemset { items: string[]; support: number }
function load_data(): string[][] {
  return [["milk"], ["milk", "butter"], ["milk", "bread"], ["milk", "bread", "chips"]];
}
function contains_string(xs: string[], s: string): boolean {
  for (const v of xs) {
    if ((v == s)) {
      return true;
    }
  }
  return false;
}
function is_subset(candidate: string[], transaction: string[]): boolean {
  for (const it of candidate) {
    if (!contains_string(transaction, it)) {
      return false;
    }
  }
  return true;
}
function lists_equal(a: string[], b: string[]): boolean {
  if ((_len(a) != _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    if ((a[(i) < 0 ? a.length + (i) : i] != b[(i) < 0 ? b.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function contains_list(itemset: string[][], item: string[]): boolean {
  for (const l of itemset) {
    if (lists_equal(l, item)) {
      return true;
    }
  }
  return false;
}
function count_list(itemset: string[][], item: string[]): number {
  let c: number = 0;
  for (const l of itemset) {
    if (lists_equal(l, item)) {
      c = (c + 1);
    }
  }
  return c;
}
function slice_list(xs: string[][], start: number): string[][] {
  let res: string[][] = [];
  let i: number = start;
  while ((i < _len(xs))) {
    res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return res;
}
function combinations_lists(xs: string[][], k: number): string[][][] {
  let result: string[][][] = [];
  if ((k == 0)) {
    result.push([]);
    return result;
  }
  let i: number = 0;
  while ((i < _len(xs))) {
    let head: string[] = xs[(i) < 0 ? xs.length + (i) : i];
    let tail: string[][] = slice_list(xs, (i + 1));
    let tail_combos: string[][][] = combinations_lists(tail, (k - 1));
    for (const combo of tail_combos) {
      let new_combo: string[][] = [];
      new_combo.push(head);
      for (const c of combo) {
        new_combo.push(c);
      }
      result.push(new_combo);
    }
    i = (i + 1);
  }
  return result;
}
function prune(itemset: string[][], candidates: string[][][], length: number): string[][][] {
  let pruned: string[][][] = [];
  for (const candidate of candidates) {
    let is_subsequence: boolean = true;
    for (const item of candidate) {
      if ((!contains_list(itemset, item) || (count_list(itemset, item) < (length - 1)))) {
        is_subsequence = false;
        break
      }
    }
    if (is_subsequence) {
      pruned.push(candidate);
    }
  }
  return pruned;
}
function sort_strings(xs: string[]): string[] {
  let res: string[] = [];
  for (const s of xs) {
    res.push(s);
  }
  let i: number = 0;
  while ((i < _len(res))) {
    let j: number = (i + 1);
    while ((j < _len(res))) {
      if ((res[(j) < 0 ? res.length + (j) : j] < res[(i) < 0 ? res.length + (i) : i])) {
        let tmp: string = res[(i) < 0 ? res.length + (i) : i];
        res[(i) < 0 ? res.length + (i) : i] = res[(j) < 0 ? res.length + (j) : j];
        res[(j) < 0 ? res.length + (j) : j] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return res;
}
function itemset_to_string(xs: string[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i > 0)) {
      s = (s + ", ");
    }
    s = (((s + "'") + xs[(i) < 0 ? xs.length + (i) : i]) + "'");
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function apriori(data: string[][], min_support: number): Itemset[] {
  let itemset: string[][] = [];
  for (const transaction of data) {
    let t: string[] = [];
    for (const v of transaction) {
      t.push(v);
    }
    itemset.push(t);
  }
  let frequent: Itemset[] = [];
  let length: number = 1;
  while ((_len(itemset) > 0)) {
    let counts: number[] = [];
    let idx: number = 0;
    while ((idx < _len(itemset))) {
      counts.push(0);
      idx = (idx + 1);
    }
    for (const transaction of data) {
      let j: number = 0;
      while ((j < _len(itemset))) {
        let candidate: string[] = itemset[(j) < 0 ? itemset.length + (j) : j];
        if (is_subset(candidate, transaction)) {
          counts[(j) < 0 ? counts.length + (j) : j] = (counts[(j) < 0 ? counts.length + (j) : j] + 1);
        }
        j = (j + 1);
      }
    }
    let new_itemset: string[][] = [];
    let k: number = 0;
    while ((k < _len(itemset))) {
      if ((counts[(k) < 0 ? counts.length + (k) : k] >= min_support)) {
        new_itemset.push(itemset[(k) < 0 ? itemset.length + (k) : k]);
      }
      k = (k + 1);
    }
    itemset = new_itemset;
    let m: number = 0;
    while ((m < _len(itemset))) {
      let sorted_item: string[] = sort_strings(itemset[(m) < 0 ? itemset.length + (m) : m]);
      frequent.push({"items": sorted_item, "support": counts[(m) < 0 ? counts.length + (m) : m]});
      m = (m + 1);
    }
    length = (length + 1);
    let combos: string[][][] = combinations_lists(itemset, length);
    itemset = prune(itemset, combos, length);
  }
  return frequent;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let frequent_itemsets: Itemset[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
frequent_itemsets = apriori(load_data(), 2)
  for (const fi of frequent_itemsets) {
    console.log(_str(((itemset_to_string(fi.items) + ": ") + _str(fi.support))));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

