// Generated by Mochi v0.10.61 on 2025-08-08 15:58:25 GMT+7

function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 10.0);
    i = (i + 1);
  }
  return result;
}
function round(x: number, n: number): number {
  let m: number = pow10(n);
  let y: number = Math.floor(((x * m) + 0.5));
  return (y / m);
}
function sqrtApprox(x: number): number {
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function mean(data: number[]): number {
  let total: number = 0.0;
  let i: number = 0;
  let n: number = _len(data);
  while ((i < n)) {
    total = (total + data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return (total / n);
}
function stdev(data: number[]): number {
  let n: number = _len(data);
  if ((n <= 1)) {
    _panic("data length must be > 1");
  }
  let m: number = mean(data);
  let sum_sq: number = 0.0;
  let i: number = 0;
  while ((i < n)) {
    let diff: number = (data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] - m);
    sum_sq = (sum_sq + (diff * diff));
    i = (i + 1);
  }
  return sqrtApprox((sum_sq / (n - 1)));
}
function normalization(data: number[], ndigits: number): number[] {
  let x_min: number = (() => { const _arr = data; return _arr.length === 0 ? 0 : Math.min(..._arr); })();
  let x_max: number = (() => { const _arr = data; return _arr.length === 0 ? 0 : Math.max(..._arr); })();
  let denom = (x_max - x_min);
  let result: number[] = [];
  let i: number = 0;
  let n: number = _len(data);
  while ((i < n)) {
    let norm = ((data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] - x_min) / denom);
    result.push(round(norm, ndigits));
    i = (i + 1);
  }
  return result;
}
function standardization(data: number[], ndigits: number): number[] {
  let mu: number = mean(data);
  let sigma: number = stdev(data);
  let result: number[] = [];
  let i: number = 0;
  let n: number = _len(data);
  while ((i < n)) {
    let z: number = ((data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] - mu) / sigma);
    result.push(round(z, ndigits));
    i = (i + 1);
  }
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(normalization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3))));
  console.log(_str(_str(normalization([5.0, 10.0, 15.0, 20.0, 25.0], 3))));
  console.log(_str(_str(standardization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3))));
  console.log(_str(_str(standardization([5.0, 10.0, 15.0, 20.0, 25.0], 3))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

