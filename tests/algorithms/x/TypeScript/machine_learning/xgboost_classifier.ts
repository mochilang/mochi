// Generated by Mochi v0.10.59 on 2025-08-07 00:16:40 GMT+7

export interface Stump { feature: number; threshold: number; left: number; right: number }
function mean(xs: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(xs))) {
    sum = (sum + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return (sum / (_len(xs) * 1.0));
}
function stump_predict(s: Stump, x: number[]): number {
  if ((x[(Math.trunc(s.feature)) < 0 ? x.length + (Math.trunc(s.feature)) : Math.trunc(s.feature)] < s.threshold)) {
    return s.left;
  }
  return s.right;
}
function train_stump(features: number[][], residuals: number[]): Stump {
  let best_feature: number = 0;
  let best_threshold: number = 0.0;
  let best_error: number = 1000000000.0;
  let best_left: number = 0.0;
  let best_right: number = 0.0;
  let num_features: number = _len(features[(Math.trunc(0)) < 0 ? features.length + (Math.trunc(0)) : Math.trunc(0)]);
  let f: number = 0;
  while ((f < num_features)) {
    let i: number = 0;
    while ((i < _len(features))) {
      let threshold: number = features[(i) < 0 ? features.length + (i) : i][(f) < 0 ? features[(i) < 0 ? features.length + (i) : i].length + (f) : f];
      let left: number[] = [];
      let right: number[] = [];
      let j: number = 0;
      while ((j < _len(features))) {
        if ((features[(j) < 0 ? features.length + (j) : j][(f) < 0 ? features[(j) < 0 ? features.length + (j) : j].length + (f) : f] < threshold)) {
          left = concat(left, [residuals[(j) < 0 ? residuals.length + (j) : j]]);
        } else {
          right = concat(right, [residuals[(j) < 0 ? residuals.length + (j) : j]]);
        }
        j = (j + 1);
      }
      if (((_len(left) != 0) && (_len(right) != 0))) {
        let left_mean: number = mean(left);
        let right_mean: number = mean(right);
        let err: number = 0.0;
        j = 0;
        while ((j < _len(features))) {
          let pred: number = ((features[(j) < 0 ? features.length + (j) : j][(f) < 0 ? features[(j) < 0 ? features.length + (j) : j].length + (f) : f] < threshold) ? left_mean : right_mean);
          let diff: number = (residuals[(j) < 0 ? residuals.length + (j) : j] - pred);
          err = (err + (diff * diff));
          j = (j + 1);
        }
        if ((err < best_error)) {
          best_error = err;
          best_feature = f;
          best_threshold = threshold;
          best_left = left_mean;
          best_right = right_mean;
        }
      }
      i = (i + 1);
    }
    f = (f + 1);
  }
  return {"feature": best_feature, "threshold": best_threshold, "left": best_left, "right": best_right};
}
function boost(features: number[][], targets: number[], rounds: number): Stump[] {
  let model: Stump[] = [];
  let preds: number[] = [];
  let i: number = 0;
  while ((i < _len(targets))) {
    preds = concat(preds, [0.0]);
    i = (i + 1);
  }
  let r: number = 0;
  while ((r < rounds)) {
    let residuals: number[] = [];
    let j: number = 0;
    while ((j < _len(targets))) {
      residuals = concat(residuals, [(targets[(j) < 0 ? targets.length + (j) : j] - preds[(j) < 0 ? preds.length + (j) : j])]);
      j = (j + 1);
    }
    let stump: Stump = train_stump(features, residuals);
    model = concat(model, [stump]);
    j = 0;
    while ((j < _len(preds))) {
      preds[(j) < 0 ? preds.length + (j) : j] = (preds[(j) < 0 ? preds.length + (j) : j] + stump_predict(stump, features[(j) < 0 ? features.length + (j) : j]));
      j = (j + 1);
    }
    r = (r + 1);
  }
  return model;
}
function predict(model: Stump[], x: number[]): number {
  let score: number = 0.0;
  let i: number = 0;
  while ((i < _len(model))) {
    let s: Stump = model[(i) < 0 ? model.length + (i) : i];
    if ((x[(Math.trunc(s.feature)) < 0 ? x.length + (Math.trunc(s.feature)) : Math.trunc(s.feature)] < s.threshold)) {
      score = (score + s.left);
    } else {
      score = (score + s.right);
    }
    i = (i + 1);
  }
  return score;
}
function main() {
  let features: number[][] = [[5.1, 3.5], [4.9, 3.0], [6.2, 3.4], [5.9, 3.0]];
  let targets: number[] = [0, 0, 1, 1];
  let model: Stump[] = boost(features, targets, 3);
  let out: string = "";
  let i: number = 0;
  while ((i < _len(features))) {
    let s: number = predict(model, features[(i) < 0 ? features.length + (i) : i]);
    let label: number = ((s >= 0.5) ? 1 : 0);
    if ((i == 0)) {
      out = _str(label);
    } else {
      out = ((out + " ") + _str(label));
    }
    i = (i + 1);
  }
  console.log(_str(out));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

