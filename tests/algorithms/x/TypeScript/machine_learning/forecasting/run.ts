// Generated by Mochi v0.10.59 on 2025-08-07 00:04:11 GMT+7

function int_to_float(x: number): number {
  return (x * 1.0);
}
function abs_float(x: number): number {
  if ((x < 0.0)) {
    return (0.0 - x);
  }
  return x;
}
function exp_approx(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    term = ((term * x) / int_to_float(i));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function floor_int(x: number): number {
  let i: number = 0;
  while ((int_to_float((i + 1)) <= x)) {
    i = (i + 1);
  }
  return i;
}
function dot(a: number[], b: number[]): number {
  let s: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    s = (s + (a[(i) < 0 ? a.length + (i) : i] * b[(i) < 0 ? b.length + (i) : i]));
    i = (i + 1);
  }
  return s;
}
function transpose(m: number[][]): number[][] {
  let rows: number = _len(m);
  let cols: number = _len(m[(Math.trunc(0)) < 0 ? m.length + (Math.trunc(0)) : Math.trunc(0)]);
  let res: number[][] = [];
  let j: number = 0;
  while ((j < cols)) {
    let row: number[] = [];
    let i: number = 0;
    while ((i < rows)) {
      row.push(m[(i) < 0 ? m.length + (i) : i][(j) < 0 ? m[(i) < 0 ? m.length + (i) : i].length + (j) : j]);
      i = (i + 1);
    }
    res.push(row);
    j = (j + 1);
  }
  return res;
}
function matmul(a: number[][], b: number[][]): number[][] {
  let n: number = _len(a);
  let m: number = _len(b[(Math.trunc(0)) < 0 ? b.length + (Math.trunc(0)) : Math.trunc(0)]);
  let p: number = _len(b);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < m)) {
      let s: number = 0.0;
      let k: number = 0;
      while ((k < p)) {
        s = (s + (a[(i) < 0 ? a.length + (i) : i][(k) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (k) : k] * b[(k) < 0 ? b.length + (k) : k][(j) < 0 ? b[(k) < 0 ? b.length + (k) : k].length + (j) : j]));
        k = (k + 1);
      }
      row.push(s);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function matvec(a: number[][], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push(dot(a[(i) < 0 ? a.length + (i) : i], b));
    i = (i + 1);
  }
  return res;
}
function identity(n: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(((i == j) ? 1.0 : 0.0));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function invert(mat: number[][]): number[][] {
  let n: number = _len(mat);
  let a: number[][] = mat;
  let inv: number[][] = identity(n);
  let i: number = 0;
  while ((i < n)) {
    let pivot: number = a[(i) < 0 ? a.length + (i) : i][(i) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (i) : i];
    let j: number = 0;
    while ((j < n)) {
      a[(i) < 0 ? a.length + (i) : i][(j) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (j) : j] = (a[(i) < 0 ? a.length + (i) : i][(j) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (j) : j] / pivot);
      inv[(i) < 0 ? inv.length + (i) : i][(j) < 0 ? inv[(i) < 0 ? inv.length + (i) : i].length + (j) : j] = (inv[(i) < 0 ? inv.length + (i) : i][(j) < 0 ? inv[(i) < 0 ? inv.length + (i) : i].length + (j) : j] / pivot);
      j = (j + 1);
    }
    let k: number = 0;
    while ((k < n)) {
      if ((k != i)) {
        let factor: number = a[(k) < 0 ? a.length + (k) : k][(i) < 0 ? a[(k) < 0 ? a.length + (k) : k].length + (i) : i];
        j = 0;
        while ((j < n)) {
          a[(k) < 0 ? a.length + (k) : k][(j) < 0 ? a[(k) < 0 ? a.length + (k) : k].length + (j) : j] = (a[(k) < 0 ? a.length + (k) : k][(j) < 0 ? a[(k) < 0 ? a.length + (k) : k].length + (j) : j] - (factor * a[(i) < 0 ? a.length + (i) : i][(j) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (j) : j]));
          inv[(k) < 0 ? inv.length + (k) : k][(j) < 0 ? inv[(k) < 0 ? inv.length + (k) : k].length + (j) : j] = (inv[(k) < 0 ? inv.length + (k) : k][(j) < 0 ? inv[(k) < 0 ? inv.length + (k) : k].length + (j) : j] - (factor * inv[(i) < 0 ? inv.length + (i) : i][(j) < 0 ? inv[(i) < 0 ? inv.length + (i) : i].length + (j) : j]));
          j = (j + 1);
        }
      }
      k = (k + 1);
    }
    i = (i + 1);
  }
  return inv;
}
function normal_equation(X: number[][], y: number[]): number[] {
  let Xt: number[][] = transpose(X);
  let XtX: number[][] = matmul(Xt, X);
  let XtX_inv: number[][] = invert(XtX);
  let Xty: number[] = matvec(Xt, y);
  return matvec(XtX_inv, Xty);
}
function linear_regression_prediction(train_dt: number[], train_usr: number[], train_mtch: number[], test_dt: number[], test_mtch: number[]): number {
  let X: number[][] = [];
  let i: number = 0;
  while ((i < _len(train_dt))) {
    X.push([1.0, train_dt[(i) < 0 ? train_dt.length + (i) : i], train_mtch[(i) < 0 ? train_mtch.length + (i) : i]]);
    i = (i + 1);
  }
  let beta: number[] = normal_equation(X, train_usr);
  return abs_float(((beta[(Math.trunc(0)) < 0 ? beta.length + (Math.trunc(0)) : Math.trunc(0)] + (test_dt[(Math.trunc(0)) < 0 ? test_dt.length + (Math.trunc(0)) : Math.trunc(0)] * beta[(Math.trunc(1)) < 0 ? beta.length + (Math.trunc(1)) : Math.trunc(1)])) + (test_mtch[(Math.trunc(0)) < 0 ? test_mtch.length + (Math.trunc(0)) : Math.trunc(0)] * beta[(Math.trunc(2)) < 0 ? beta.length + (Math.trunc(2)) : Math.trunc(2)])));
}
function sarimax_predictor(train_user: number[], train_match: number[], test_match: number[]): number {
  let n: number = _len(train_user);
  let X: number[][] = [];
  let y: number[] = [];
  let i: number = 1;
  while ((i < n)) {
    X.push([1.0, train_user[(Math.trunc((i - 1))) < 0 ? train_user.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))], train_match[(i) < 0 ? train_match.length + (i) : i]]);
    y.push(train_user[(i) < 0 ? train_user.length + (i) : i]);
    i = (i + 1);
  }
  let beta: number[] = normal_equation(X, y);
  return ((beta[(Math.trunc(0)) < 0 ? beta.length + (Math.trunc(0)) : Math.trunc(0)] + (beta[(Math.trunc(1)) < 0 ? beta.length + (Math.trunc(1)) : Math.trunc(1)] * train_user[(Math.trunc((n - 1))) < 0 ? train_user.length + (Math.trunc((n - 1))) : Math.trunc((n - 1))])) + (beta[(Math.trunc(2)) < 0 ? beta.length + (Math.trunc(2)) : Math.trunc(2)] * test_match[(Math.trunc(0)) < 0 ? test_match.length + (Math.trunc(0)) : Math.trunc(0)]));
}
function rbf_kernel(a: number[], b: number[], gamma: number): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    let diff: number = (a[(i) < 0 ? a.length + (i) : i] - b[(i) < 0 ? b.length + (i) : i]);
    sum = (sum + (diff * diff));
    i = (i + 1);
  }
  return exp_approx((-gamma * sum));
}
function support_vector_regressor(x_train: number[][], x_test: number[][], train_user: number[]): number {
  let gamma: number = 0.1;
  let weights: number[] = [];
  let i: number = 0;
  while ((i < _len(x_train))) {
    weights.push(rbf_kernel(x_train[(i) < 0 ? x_train.length + (i) : i], x_test[(Math.trunc(0)) < 0 ? x_test.length + (Math.trunc(0)) : Math.trunc(0)], gamma));
    i = (i + 1);
  }
  let num: number = 0.0;
  let den: number = 0.0;
  i = 0;
  while ((i < _len(train_user))) {
    num = (num + (weights[(i) < 0 ? weights.length + (i) : i] * train_user[(i) < 0 ? train_user.length + (i) : i]));
    den = (den + weights[(i) < 0 ? weights.length + (i) : i]);
    i = (i + 1);
  }
  return (num / den);
}
function set_at_float(xs: number[], idx: number, value: number): number[] {
  let i: number = 0;
  let res: number[] = [];
  while ((i < _len(xs))) {
    if ((i == idx)) {
      res.push(value);
    } else {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function sort_float(xs: number[]): number[] {
  let res: number[] = xs;
  let i: number = 1;
  while ((i < _len(res))) {
    let key: number = res[(i) < 0 ? res.length + (i) : i];
    let j: number = (i - 1);
    while (((j >= 0) && (res[(j) < 0 ? res.length + (j) : j] > key))) {
      res = set_at_float(res, (j + 1), res[(j) < 0 ? res.length + (j) : j]);
      j = (j - 1);
    }
    res = set_at_float(res, (j + 1), key);
    i = (i + 1);
  }
  return res;
}
function percentile(data: number[], q: number): number {
  let sorted: number[] = sort_float(data);
  let n: number = _len(sorted);
  let pos: number = ((q / 100.0) * int_to_float((n - 1)));
  let idx: number = floor_int(pos);
  let frac: number = (pos - int_to_float(idx));
  if (((idx + 1) < n)) {
    return ((sorted[(idx) < 0 ? sorted.length + (idx) : idx] * (1.0 - frac)) + (sorted[(Math.trunc((idx + 1))) < 0 ? sorted.length + (Math.trunc((idx + 1))) : Math.trunc((idx + 1))] * frac));
  }
  return sorted[(idx) < 0 ? sorted.length + (idx) : idx];
}
function interquartile_range_checker(train_user: number[]): number {
  let q1: number = percentile(train_user, 25.0);
  let q3: number = percentile(train_user, 75.0);
  let iqr: number = (q3 - q1);
  return (q1 - (iqr * 0.1));
}
function data_safety_checker(list_vote: number[], actual_result: number): boolean {
  let safe: number = 0;
  let not_safe: number = 0;
  let i: number = 0;
  while ((i < _len(list_vote))) {
    let v: number = list_vote[(i) < 0 ? list_vote.length + (i) : i];
    if ((v > actual_result)) {
      safe = (not_safe + 1);
    } else {
      if ((abs_float((abs_float(v) - abs_float(actual_result))) <= 0.1)) {
        safe = (safe + 1);
      } else {
        not_safe = (not_safe + 1);
      }
    }
    i = (i + 1);
  }
  return (safe > not_safe);
}
function main() {
  let vote: number[] = [linear_regression_prediction([2.0, 3.0, 4.0, 5.0], [5.0, 3.0, 4.0, 6.0], [3.0, 1.0, 2.0, 4.0], [2.0], [2.0]), sarimax_predictor([4.0, 2.0, 6.0, 8.0], [3.0, 1.0, 2.0, 4.0], [2.0]), support_vector_regressor([[5.0, 2.0], [1.0, 5.0], [6.0, 2.0]], [[3.0, 2.0]], [2.0, 1.0, 4.0])];
  console.log(_str(vote[(Math.trunc(0)) < 0 ? vote.length + (Math.trunc(0)) : Math.trunc(0)]));
  console.log(_str(vote[(Math.trunc(1)) < 0 ? vote.length + (Math.trunc(1)) : Math.trunc(1)]));
  console.log(_str(vote[(Math.trunc(2)) < 0 ? vote.length + (Math.trunc(2)) : Math.trunc(2)]));
  console.log(_str(data_safety_checker(vote, 5.0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

