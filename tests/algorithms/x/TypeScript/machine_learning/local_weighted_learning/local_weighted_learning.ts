// Generated by Mochi v0.10.63 on 2025-08-11 18:38:54 GMT+7

function expApprox(x: number): number {
  if ((x < 0.0)) {
    return (1.0 / expApprox(-x));
  }
  if ((x > 1.0)) {
    let half: number = expApprox((x / 2.0));
    return (half * half);
  }
  let sum: number = 1.0;
  let term: number = 1.0;
  let n: number = 1;
  while ((n < 20)) {
    term = ((term * x) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function transpose(mat: number[][]): number[][] {
  let rows: number = _len(mat);
  let cols: number = _len(mat[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < cols)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < rows)) {
      row.push(mat[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function matMul(a: number[][], b: number[][]): number[][] {
  let a_rows: number = _len(a);
  let a_cols: number = _len(a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
  let b_cols: number = _len(b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < a_rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < b_cols)) {
      let sum: number = 0.0;
      let k: number = 0;
      while ((k < a_cols)) {
        sum = (sum + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function matInv(mat: number[][]): number[][] {
  let n: number = _len(mat);
  let aug: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    j = 0;
    while ((j < n)) {
      if ((i == j)) {
        row.push(1.0);
      } else {
        row.push(0.0);
      }
      j = (j + 1);
    }
    aug.push(row);
    i = (i + 1);
  }
  let col: number = 0;
  while ((col < n)) {
    let pivot: number = aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    if ((pivot == 0.0)) {
      _panic("Matrix is singular");
    }
    let j: number = 0;
    while ((j < (2 * n))) {
      aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] / pivot);
      j = (j + 1);
    }
    let r: number = 0;
    while ((r < n)) {
      if ((r != col)) {
        let factor: number = aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        j = 0;
        while ((j < (2 * n))) {
          aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - (factor * aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
          j = (j + 1);
        }
      }
      r = (r + 1);
    }
    col = (col + 1);
  }
  let inv: number[][] = [];
  i = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(aug[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + n)); return _mochi_idx < 0 ? aug[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? aug.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    inv.push(row);
    i = (i + 1);
  }
  return inv;
}
function weight_matrix(point: number[], x_train: number[][], tau: number): number[][] {
  let m: number = _len(x_train);
  let weights: number[][] = [];
  let i: number = 0;
  while ((i < m)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < m)) {
      if ((i == j)) {
        row.push(1.0);
      } else {
        row.push(0.0);
      }
      j = (j + 1);
    }
    weights.push(row);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < m)) {
    let diff_sq: number = 0.0;
    let k: number = 0;
    while ((k < _len(point))) {
      let diff: number = (point[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? point.length + _mochi_idx : _mochi_idx;})()] - x_train[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? x_train.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? x_train[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? x_train.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      diff_sq = (diff_sq + (diff * diff));
      k = (k + 1);
    }
    weights[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? weights.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? weights[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? weights.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = expApprox((-diff_sq / ((2.0 * tau) * tau)));
    j = (j + 1);
  }
  return weights;
}
function local_weight(point: number[], x_train: number[][], y_train: number[], tau: number): number[][] {
  let w: number[][] = weight_matrix(point, x_train, tau);
  let x_t: number[][] = transpose(x_train);
  let x_t_w: number[][] = matMul(x_t, w);
  let x_t_w_x: number[][] = matMul(x_t_w, x_train);
  let inv_part: number[][] = matInv(x_t_w_x);
  let y_col: number[][] = [];
  let i: number = 0;
  while ((i < _len(y_train))) {
    y_col.push([y_train[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_train.length + _mochi_idx : _mochi_idx;})()]]);
    i = (i + 1);
  }
  let x_t_w_y: number[][] = matMul(x_t_w, y_col);
  return matMul(inv_part, x_t_w_y);
}
function local_weight_regression(x_train: number[][], y_train: number[], tau: number): number[] {
  let m: number = _len(x_train);
  let preds: number[] = [];
  let i: number = 0;
  while ((i < m)) {
    let theta: number[][] = local_weight(x_train[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x_train.length + _mochi_idx : _mochi_idx;})()], x_train, y_train, tau);
    let weights_vec: number[] = [];
    let k: number = 0;
    while ((k < _len(theta))) {
      weights_vec.push(theta[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? theta.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? theta[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? theta.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      k = (k + 1);
    }
    let pred: number = 0.0;
    let j: number = 0;
    while ((j < _len(x_train[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x_train.length + _mochi_idx : _mochi_idx;})()]))) {
      pred = (pred + (x_train[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x_train.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? x_train[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x_train.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * weights_vec[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? weights_vec.length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    preds.push(pred);
    i = (i + 1);
  }
  return preds;
}
let x_train: number[][] = [[16.99, 10.34], [21.01, 23.68], [24.59, 25.69]];
let y_train: number[] = [1.01, 1.66, 3.5];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _panic(msg: any): never { throw new Error(String(msg)); }
let preds: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
preds = local_weight_regression(x_train, y_train, 0.6)
  console.log(JSON.stringify(preds, null, 2));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

