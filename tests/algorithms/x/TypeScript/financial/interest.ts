// Generated by Mochi v0.10.65 on 2025-08-14 10:03:27 GMT+7

function panic(msg: string) {
  console.log(_str(msg));
}
function powf(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < Math.trunc(exp))) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function simple_interest(principal: number, daily_rate: number, days: number): number {
  if ((days <= 0.0)) {
    panic("days_between_payments must be > 0");
    return 0.0;
  }
  if ((daily_rate < 0.0)) {
    panic("daily_interest_rate must be >= 0");
    return 0.0;
  }
  if ((principal <= 0.0)) {
    panic("principal must be > 0");
    return 0.0;
  }
  return ((principal * daily_rate) * days);
}
function compound_interest(principal: number, nominal_rate: number, periods: number): number {
  if ((periods <= 0.0)) {
    panic("number_of_compounding_periods must be > 0");
    return 0.0;
  }
  if ((nominal_rate < 0.0)) {
    panic("nominal_annual_interest_rate_percentage must be >= 0");
    return 0.0;
  }
  if ((principal <= 0.0)) {
    panic("principal must be > 0");
    return 0.0;
  }
  return (principal * (powf((1.0 + nominal_rate), periods) - 1.0));
}
function apr_interest(principal: number, apr: number, years: number): number {
  if ((years <= 0.0)) {
    panic("number_of_years must be > 0");
    return 0.0;
  }
  if ((apr < 0.0)) {
    panic("nominal_annual_percentage_rate must be >= 0");
    return 0.0;
  }
  if ((principal <= 0.0)) {
    panic("principal must be > 0");
    return 0.0;
  }
  return compound_interest(principal, (apr / 365.0), (years * 365.0));
}
function main() {
  console.log(_str(simple_interest(18000.0, 0.06, 3.0)));
  console.log(_str(simple_interest(0.5, 0.06, 3.0)));
  console.log(_str(simple_interest(18000.0, 0.01, 10.0)));
  console.log(_str(compound_interest(10000.0, 0.05, 3.0)));
  console.log(_str(compound_interest(10000.0, 0.05, 1.0)));
  console.log(_str(apr_interest(10000.0, 0.05, 3.0)));
  console.log(_str(apr_interest(10000.0, 0.05, 1.0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

