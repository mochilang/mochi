// Generated by Mochi v0.10.62 on 2025-08-09 10:36:20 GMT+7

export interface SMAValue { value: number; ok: boolean }
function simple_moving_average(data: number[], window_size: number): SMAValue[] {
  if ((window_size < 1)) {
    _panic("Window size must be a positive integer");
  }
  let result: SMAValue[] = [];
  let window_sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(data))) {
    window_sum = (window_sum + data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()]);
    if ((i >= window_size)) {
      window_sum = (window_sum - data[(()=>{const _mochi_idx = Math.trunc((i - window_size)); return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()]);
    }
    if ((i >= (window_size - 1))) {
      let avg = (window_sum / window_size);
      result.push({"value": avg, "ok": true});
    } else {
      result.push({"value": 0.0, "ok": false});
    }
    i = (i + 1);
  }
  return result;
}
let data: number[] = [10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0];
let window_size: number = 3;
let idx: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let sma_values: SMAValue[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
sma_values = simple_moving_average(data, window_size)
  while ((idx < _len(sma_values))) {
    let item: SMAValue = sma_values[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? sma_values.length + _mochi_idx : _mochi_idx;})()];
    if (item.ok) {
      console.log(_str(((("Day " + _str((idx + 1))) + ": ") + _str(item.value))));
    } else {
      console.log(_str((("Day " + _str((idx + 1))) + ": Not enough data for SMA")));
    }
    idx = (idx + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

