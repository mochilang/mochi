// Generated by Mochi v0.10.59 on 2025-08-06 22:14:18 GMT+7

function exponential_moving_average(stock_prices: number[], window_size: number): number[] {
  if ((window_size <= 0)) {
    _panic("window_size must be > 0");
  }
  let alpha: number = (2.0 / (1.0 + window_size));
  let moving_average: number = 0.0;
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(stock_prices))) {
    let price: number = stock_prices[(i) < 0 ? stock_prices.length + (i) : i];
    if ((i <= window_size)) {
      if ((i == 0)) {
        moving_average = price;
      } else {
        moving_average = ((moving_average + price) * 0.5);
      }
    } else {
      moving_average = ((alpha * price) + ((1.0 - alpha) * moving_average));
    }
    result.push(moving_average);
    i = (i + 1);
  }
  return result;
}
let stock_prices: number[] = [2.0, 5.0, 3.0, 8.2, 6.0, 9.0, 10.0];
let window_size: number = 3;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let result: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = exponential_moving_average(stock_prices, window_size)
  console.log(_str(_str(result)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

