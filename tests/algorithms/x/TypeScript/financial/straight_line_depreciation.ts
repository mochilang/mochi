// Generated by Mochi v0.10.62 on 2025-08-09 10:36:21 GMT+7

function straight_line_depreciation(useful_years: number, purchase_value: number, residual_value: number): number[] {
  if ((useful_years < 1)) {
    _panic("Useful years cannot be less than 1");
  }
  if ((purchase_value < 0.0)) {
    _panic("Purchase value cannot be less than zero");
  }
  if ((purchase_value < residual_value)) {
    _panic("Purchase value cannot be less than residual value");
  }
  let depreciable_cost: number = (purchase_value - residual_value);
  let annual_expense: number = (depreciable_cost / (1.0 * useful_years));
  let expenses: number[] = [];
  let accumulated: number = 0.0;
  let period: number = 0;
  while ((period < useful_years)) {
    if ((period != (useful_years - 1))) {
      accumulated = (accumulated + annual_expense);
      expenses.push(annual_expense);
    } else {
      let end_year_expense: number = (depreciable_cost - accumulated);
      expenses.push(end_year_expense);
    }
    period = (period + 1);
  }
  return expenses;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(straight_line_depreciation(10, 1100.0, 100.0))));
  console.log(_str(_str(straight_line_depreciation(6, 1250.0, 50.0))));
  console.log(_str(_str(straight_line_depreciation(4, 1001.0, 0.0))));
  console.log(_str(_str(straight_line_depreciation(11, 380.0, 50.0))));
  console.log(_str(_str(straight_line_depreciation(1, 4985.0, 100.0))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

