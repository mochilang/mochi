// Generated by Mochi v0.10.65 on 2025-08-14 10:03:28 GMT+7

function powf(base: number, exponent: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exponent)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function round2(value: number): number {
  if ((value >= 0.0)) {
    let scaled: number = Math.trunc(((value * 100.0) + 0.5));
    return (scaled / 100.0);
  }
  let scaled: number = Math.trunc(((value * 100.0) - 0.5));
  return (scaled / 100.0);
}
function present_value(discount_rate: number, cash_flows: number[]): number {
  if ((discount_rate < 0.0)) {
    _panic("Discount rate cannot be negative");
  }
  if ((_len(cash_flows) === 0)) {
    _panic("Cash flows list cannot be empty");
  }
  let pv: number = 0.0;
  let i: number = 0;
  let factor: number = (1.0 + discount_rate);
  while ((i < _len(cash_flows))) {
    let cf: number = cash_flows[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cash_flows.length + _mochi_idx : _mochi_idx;})()];
    pv = (pv + (cf / powf(factor, i)));
    i = (i + 1);
  }
  return round2(pv);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(present_value(0.13, [10.0, 20.7, -293.0, 297.0])));
  console.log(_str(present_value(0.07, [-109129.39, 30923.23, 15098.93, 29734.0, 39.0])));
  console.log(_str(present_value(0.07, [109129.39, 30923.23, 15098.93, 29734.0, 39.0])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

