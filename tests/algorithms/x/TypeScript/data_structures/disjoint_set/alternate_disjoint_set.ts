// Generated by Mochi v0.10.60 on 2025-08-08 10:44:52 GMT+7

export interface DisjointSet { set_counts: number[]; max_set: number; ranks: number[]; parents: number[] }
function max_list(xs: number[]): number {
  let m: number = xs[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
  let i: number = 1;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] > m)) {
      m = xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return m;
}
function disjoint_set_new(set_counts: number[]): DisjointSet {
  let max_set: number = max_list(set_counts);
  let num_sets: number = _len(set_counts);
  let ranks: number[] = [];
  let parents: number[] = [];
  let i: number = 0;
  while ((i < num_sets)) {
    ranks.push(1);
    parents.push(i);
    i = (i + 1);
  }
  return {set_counts, max_set, ranks, parents};
}
function get_parent(ds: DisjointSet, idx: number): number {
  if ((ds.parents[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? ds.parents.length + _mochi_idx : _mochi_idx;})()] == idx)) {
    return idx;
  }
  let parents: number[] = ds.parents;
  parents[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? parents.length + _mochi_idx : _mochi_idx;})()] = get_parent(ds, parents[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? parents.length + _mochi_idx : _mochi_idx;})()]);
  ds.parents = parents;
  return ds.parents[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? ds.parents.length + _mochi_idx : _mochi_idx;})()];
}
function merge(ds: DisjointSet, src: number, dst: number): boolean {
  let src_parent: number = get_parent(ds, src);
  let dst_parent: number = get_parent(ds, dst);
  if ((src_parent == dst_parent)) {
    return false;
  }
  if ((ds.ranks[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? ds.ranks.length + _mochi_idx : _mochi_idx;})()] >= ds.ranks[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? ds.ranks.length + _mochi_idx : _mochi_idx;})()])) {
    let counts: number[] = ds.set_counts;
    counts[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = (counts[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] + counts[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()]);
    counts[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = 0;
    ds.set_counts = counts;
    let parents: number[] = ds.parents;
    parents[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? parents.length + _mochi_idx : _mochi_idx;})()] = dst_parent;
    ds.parents = parents;
    if ((ds.ranks[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? ds.ranks.length + _mochi_idx : _mochi_idx;})()] == ds.ranks[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? ds.ranks.length + _mochi_idx : _mochi_idx;})()])) {
      let ranks: number[] = ds.ranks;
      ranks[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] = (ranks[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] + 1);
      ds.ranks = ranks;
    }
    let joined: number = ds.set_counts[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? ds.set_counts.length + _mochi_idx : _mochi_idx;})()];
    if ((joined > ds.max_set)) {
      ds.max_set = joined;
    }
  } else {
    let counts: number[] = ds.set_counts;
    counts[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = (counts[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] + counts[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()]);
    counts[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = 0;
    ds.set_counts = counts;
    let parents: number[] = ds.parents;
    parents[(()=>{const _mochi_idx = dst_parent; return _mochi_idx < 0 ? parents.length + _mochi_idx : _mochi_idx;})()] = src_parent;
    ds.parents = parents;
    let joined: number = ds.set_counts[(()=>{const _mochi_idx = src_parent; return _mochi_idx < 0 ? ds.set_counts.length + _mochi_idx : _mochi_idx;})()];
    if ((joined > ds.max_set)) {
      ds.max_set = joined;
    }
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let ds: DisjointSet
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
ds = disjoint_set_new([1, 1, 1])
  console.log(_str(merge(ds, 1, 2)));
  console.log(_str(merge(ds, 0, 2)));
  console.log(_str(merge(ds, 0, 1)));
  console.log(_str(get_parent(ds, 0)));
  console.log(_str(get_parent(ds, 1)));
  console.log(_str(ds.max_set));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

