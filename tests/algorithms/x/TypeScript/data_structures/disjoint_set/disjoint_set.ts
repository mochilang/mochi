// Generated by Mochi v0.10.60 on 2025-08-08 10:44:52 GMT+7

export interface DS { parent: number[]; rank: number[] }
export interface FindResult { ds: DS; root: number }
function make_set(ds: DS, x: number): DS {
  let p: number[] = ds.parent;
  let r: number[] = ds.rank;
  p[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()] = x;
  r[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()] = 0;
  return {"parent": p, "rank": r};
}
function find_set(ds: DS, x: number): FindResult {
  if ((ds.parent[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? ds.parent.length + _mochi_idx : _mochi_idx;})()] == x)) {
    return {ds, "root": x};
  }
  let res: FindResult = find_set(ds, ds.parent[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? ds.parent.length + _mochi_idx : _mochi_idx;})()]);
  let p: number[] = res.ds.parent;
  p[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()] = res.root;
  return {"ds": {"parent": p, "rank": res.ds.rank}, "root": res.root};
}
function union_set(ds: DS, x: number, y: number): DS {
  let fx: FindResult = find_set(ds, x);
  let ds1: DS = fx.ds;
  let x_root: number = fx.root;
  let fy: FindResult = find_set(ds1, y);
  let ds2: DS = fy.ds;
  let y_root: number = fy.root;
  if ((x_root == y_root)) {
    return ds2;
  }
  let p: number[] = ds2.parent;
  let r: number[] = ds2.rank;
  if ((r[(()=>{const _mochi_idx = x_root; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()] > r[(()=>{const _mochi_idx = y_root; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()])) {
    p[(()=>{const _mochi_idx = y_root; return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()] = x_root;
  } else {
    p[(()=>{const _mochi_idx = x_root; return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()] = y_root;
    if ((r[(()=>{const _mochi_idx = x_root; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()] == r[(()=>{const _mochi_idx = y_root; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()])) {
      r[(()=>{const _mochi_idx = y_root; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()] = (r[(()=>{const _mochi_idx = y_root; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()] + 1);
    }
  }
  return {"parent": p, "rank": r};
}
function same_python_set(a: number, b: number): boolean {
  if (((a < 3) && (b < 3))) {
    return true;
  }
  if (((((a >= 3) && (a < 6)) && (b >= 3)) && (b < 6))) {
    return true;
  }
  return false;
}
let ds: DS = {"parent": [], "rank": []};
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i < 6)) {
    ds.parent.push(0);
    ds.rank.push(0);
    ds = make_set(ds, i);
    i = (i + 1);
  }
  ds = union_set(ds, 0, 1);
  ds = union_set(ds, 1, 2);
  ds = union_set(ds, 3, 4);
  ds = union_set(ds, 3, 5);
  i = 0;
  while ((i < 6)) {
    let j: number = 0;
    while ((j < 6)) {
      let res_i: FindResult = find_set(ds, i);
      ds = res_i.ds;
      let root_i: number = res_i.root;
      let res_j: FindResult = find_set(ds, j);
      ds = res_j.ds;
      let root_j: number = res_j.root;
      let same: boolean = same_python_set(i, j);
      let root_same: boolean = (root_i == root_j);
      if (same) {
        if (!root_same) {
          _panic("nodes should be in same set");
        }
      } else {
        if (root_same) {
          _panic("nodes should be in different sets");
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < 6)) {
    let res: FindResult = find_set(ds, i);
    ds = res.ds;
    console.log(_str(_str(res.root)));
    i = (i + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

