// Generated by Mochi v0.10.60 on 2025-08-08 10:49:02 GMT+7

export interface KDNode { point: number[]; left: number; right: number }
export interface SearchResult { point: number[]; distance: number; nodes_visited: number }
function square_distance(a: number[], b: number[]): number {
  let i: number = 0;
  let total: number = 0.0;
  while ((i < _len(a))) {
    let diff: number = (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    total = (total + (diff * diff));
    i = (i + 1);
  }
  return total;
}
function search(nodes: KDNode[], index: number, query_point: number[], depth: number, best: SearchResult): SearchResult {
  if ((index == -1)) {
    return best;
  }
  let result: SearchResult = best;
  result.nodes_visited = (result.nodes_visited + 1);
  let node: KDNode = nodes[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  let current_point: number[] = node.point;
  let current_dist: number = square_distance(query_point, current_point);
  if (((_len(result.point) == 0) || (current_dist < result.distance))) {
    result.point = current_point;
    result.distance = current_dist;
  }
  let k: number = _len(query_point);
  let axis: number = (depth % k);
  let nearer: number = node.left;
  let further: number = node.right;
  if ((query_point[(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? query_point.length + _mochi_idx : _mochi_idx;})()] > current_point[(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? current_point.length + _mochi_idx : _mochi_idx;})()])) {
    nearer = node.right;
    further = node.left;
  }
  result = search(nodes, nearer, query_point, (depth + 1), result);
  let diff: number = (query_point[(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? query_point.length + _mochi_idx : _mochi_idx;})()] - current_point[(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? current_point.length + _mochi_idx : _mochi_idx;})()]);
  if (((diff * diff) < result.distance)) {
    result = search(nodes, further, query_point, (depth + 1), result);
  }
  return result;
}
function nearest_neighbour_search(nodes: KDNode[], root: number, query_point: number[]): SearchResult {
  let initial: SearchResult = {"point": [], "distance": 1000000000000000019884624838656.0, "nodes_visited": 0};
  return search(nodes, root, query_point, 0, initial);
}
let queries: number[][] = [[9.0, 2.0], [12.0, 15.0], [1.0, 3.0]];
let q: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let nodes: KDNode[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
nodes = [{"point": [9.0, 1.0], "left": 1, "right": 4}, {"point": [2.0, 7.0], "left": 2, "right": 3}, {"point": [3.0, 6.0], "left": -1, "right": -1}, {"point": [6.0, 12.0], "left": -1, "right": -1}, {"point": [17.0, 15.0], "left": 5, "right": 6}, {"point": [13.0, 15.0], "left": -1, "right": -1}, {"point": [10.0, 19.0], "left": -1, "right": -1}]
  while ((q < _len(queries))) {
    let res: SearchResult = nearest_neighbour_search(nodes, 0, queries[(()=>{const _mochi_idx = q; return _mochi_idx < 0 ? queries.length + _mochi_idx : _mochi_idx;})()]);
    console.log(_str((((((_str(res.point) + " ") + _str(res.distance)) + " ") + _str(res.nodes_visited)) + "\n")));
    q = (q + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

