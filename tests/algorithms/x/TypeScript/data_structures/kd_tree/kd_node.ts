// Generated by Mochi v0.10.60 on 2025-08-08 10:49:01 GMT+7

export interface KDNode { point: number[]; left: number; right: number }
function make_kd_node(point: number[], left: number, right: number): KDNode {
  return {point, left, right};
}
let nodes: KDNode[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let root: KDNode
let left_child: KDNode
let right_child: KDNode
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  nodes.push(make_kd_node([2.0, 3.0], 1, 2));
  nodes.push(make_kd_node([1.0, 5.0], -1, -1));
  nodes.push(make_kd_node([4.0, 2.0], -1, -1));
root = nodes[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()]
left_child = nodes[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()]
right_child = nodes[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()]
  console.log(_str(_str(root.point)));
  console.log(_str(_str(root.left)));
  console.log(_str(_str(root.right)));
  console.log(_str(_str(left_child.point)));
  console.log(_str(_str(right_child.point)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

