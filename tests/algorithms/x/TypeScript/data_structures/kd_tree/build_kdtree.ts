// Generated by Mochi v0.10.60 on 2025-08-08 10:48:47 GMT+7

export interface KDNode { point: number[]; left: number; right: number }
let tree: KDNode[] = [];
function sort_points(points: number[][], axis: number): number[][] {
  let arr: number[][] = points;
  let i: number = 0;
  while ((i < _len(arr))) {
    let j: number = 0;
    while ((j < (_len(arr) - 1))) {
      if ((arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number[] = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function build_kdtree(points: number[][], depth: number): number {
  if ((_len(points) == 0)) {
    return (0 - 1);
  }
  let k: number = _len(points[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()]);
  let axis: number = (depth % k);
  let sorted: number[][] = sort_points(points, axis);
  let median_idx: number = Math.trunc(_len(sorted) / 2);
  let left_points: number[][] = sorted.slice(0, median_idx);
  let right_points: number[][] = sorted.slice((median_idx + 1), _len(sorted));
  let idx: number = _len(tree);
  tree.push({"point": sorted[(()=>{const _mochi_idx = median_idx; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()], "left": (0 - 1), "right": (0 - 1)});
  let left_idx: number = build_kdtree(left_points, (depth + 1));
  let right_idx: number = build_kdtree(right_points, (depth + 1));
  let node: KDNode = tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()];
  node.left = left_idx;
  node.right = right_idx;
  tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()] = node;
  return idx;
}
let pts: number[][] = [[2.0, 3.0], [5.0, 4.0], [9.0, 6.0], [4.0, 7.0], [8.0, 1.0], [7.0, 2.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let root: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
root = build_kdtree(pts, 0)
  console.log(_str(_str(tree)));
  console.log(_str(root));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

