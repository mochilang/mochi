// Generated by Mochi v0.10.61 on 2025-08-08 16:35:48 GMT+7

export interface Node { point: number[]; left: number; right: number }
export interface BuildResult { index: number; nodes: Node[] }
let seed: number = 1;
function rand(): number {
  seed = Number((((BigInt(seed) * 1103515245n) + 12345n) % 2147483648n));
  return seed;
}
function random(): number {
  return ((1.0 * rand()) / 2147483648.0);
}
function hypercube_points(num_points: number, cube_size: number, num_dimensions: number): number[][] {
  let pts: number[][] = [];
  let i: number = 0;
  while ((i < num_points)) {
    let p: number[] = [];
    let j: number = 0;
    while ((j < num_dimensions)) {
      p.push((cube_size * random()));
      j = (j + 1);
    }
    pts.push(p);
    i = (i + 1);
  }
  return pts;
}
function sort_points(points: number[][], axis: number): number[][] {
  let n: number = _len(points);
  let i: number = 1;
  while ((i < n)) {
    let key: number[] = points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()];
    let j: number = (i - 1);
    while (((j >= 0) && (points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > key[(()=>{const _mochi_idx = axis; return _mochi_idx < 0 ? key.length + _mochi_idx : _mochi_idx;})()]))) {
      points[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()] = points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()];
      j = (j - 1);
    }
    points[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()] = key;
    i = (i + 1);
  }
  return points;
}
function sublist(arr: number[][], start: number, end: number): number[][] {
  let res: number[][] = [];
  let i: number = start;
  while ((i < end)) {
    res.push(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function shift_nodes(nodes: Node[], offset: number): Node[] {
  let i: number = 0;
  while ((i < _len(nodes))) {
    if ((nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left != (0 - 1))) {
      nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left = (nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left + offset);
    }
    if ((nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].right != (0 - 1))) {
      nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].right = (nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].right + offset);
    }
    i = (i + 1);
  }
  return nodes;
}
function build_kdtree(points: number[][], depth: number): BuildResult {
  if ((_len(points) == 0)) {
    return {"index": (0 - 1), "nodes": []};
  }
  let k: number = _len(points[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()]);
  let axis: number = (depth % k);
  points = sort_points(points, axis);
  let median: number = Math.floor(_len(points) / 2);
  let left_points: number[][] = sublist(points, 0, median);
  let right_points: number[][] = sublist(points, (median + 1), _len(points));
  let left_res: BuildResult = build_kdtree(left_points, (depth + 1));
  let right_res: BuildResult = build_kdtree(right_points, (depth + 1));
  let offset: number = (_len(left_res.nodes) + 1);
  let shifted_right: Node[] = shift_nodes(right_res.nodes, offset);
  let nodes: Node[] = left_res.nodes;
  let left_index: number = left_res.index;
  let right_index: number = ((right_res.index == (0 - 1)) ? (0 - 1) : (right_res.index + offset));
  nodes.push({"point": points[(()=>{const _mochi_idx = median; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()], "left": left_index, "right": right_index});
  nodes = concat(nodes, shifted_right);
  let root_index: number = _len(left_res.nodes);
  return {"index": root_index, nodes};
}
function square_distance(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    let diff: number = (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    sum = (sum + (diff * diff));
    i = (i + 1);
  }
  return sum;
}
export interface SearchResult { point: number[]; dist: number; visited: number }
function nearest_neighbour_search(tree: Node[], root: number, query_point: number[]): SearchResult {
  let nearest_point: number[] = [];
  let nearest_dist: number = 0.0;
  let visited: number = 0;
  let i: number = 0;
  while ((i < _len(tree))) {
    let node: Node = tree[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()];
    let dist: number = square_distance(query_point, node.point);
    visited = (visited + 1);
    if (((visited == 1) || (dist < nearest_dist))) {
      nearest_point = node.point;
      nearest_dist = dist;
    }
    i = (i + 1);
  }
  return {"point": nearest_point, "dist": nearest_dist, visited};
}
function list_to_string(arr: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(arr))) {
    s = (s + _str(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(arr) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
function main() {
  let num_points: number = 5000;
  let cube_size: number = 10.0;
  let num_dimensions: number = 10;
  let pts: number[][] = hypercube_points(num_points, cube_size, num_dimensions);
  let build: BuildResult = build_kdtree(pts, 0);
  let root: number = build.index;
  let tree: Node[] = build.nodes;
  let query: number[] = [];
  let i: number = 0;
  while ((i < num_dimensions)) {
    query.push(random());
    i = (i + 1);
  }
  let res: SearchResult = nearest_neighbour_search(tree, root, query);
  console.log(_str(("Query point: " + list_to_string(query))));
  console.log(_str(("Nearest point: " + list_to_string(res.point))));
  console.log(_str(("Distance: " + _str(res.dist))));
  console.log(_str(("Nodes visited: " + _str(res.visited))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

