// Generated by Mochi v0.10.61 on 2025-08-08 16:35:58 GMT+7

let INF: number = 1000000000.0;
let seed: number = 1;
function rand_float(): number {
  seed = Number((((BigInt(seed) * 1103515245n) + 12345n) % 2147483648n));
  return (seed / 2147483648.0);
}
function hypercube_points(num_points: number, cube_size: number, num_dimensions: number): number[][] {
  let pts: number[][] = [];
  let i: number = 0;
  while ((i < num_points)) {
    let p: number[] = [];
    let j: number = 0;
    while ((j < num_dimensions)) {
      let v: number = (cube_size * rand_float());
      p.push(v);
      j = (j + 1);
    }
    pts.push(p);
    i = (i + 1);
  }
  return pts;
}
function build_kdtree(points: number[][], depth: number): number[][] {
  return points;
}
function distance_sq(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    let d: number = (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    sum = (sum + (d * d));
    i = (i + 1);
  }
  return sum;
}
function nearest_neighbour_search(points: number[][], query: number[]): Record<string, number> {
  if ((_len(points) == 0)) {
    return {"index": -1.0, "dist": INF, "visited": 0.0};
  }
  let nearest_idx: number = 0;
  let nearest_dist: number = INF;
  let visited: number = 0;
  let i: number = 0;
  while ((i < _len(points))) {
    let d: number = distance_sq(query, points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()]);
    visited = (visited + 1);
    if ((d < nearest_dist)) {
      nearest_dist = d;
      nearest_idx = i;
    }
    i = (i + 1);
  }
  return {"index": nearest_idx, "dist": nearest_dist, visited};
}
function test_build_cases() {
  let empty_pts: number[][] = [];
  let tree0: number[][] = build_kdtree(empty_pts, 0);
  if ((_len(tree0) == 0)) {
    console.log(_str("case1 true"));
  } else {
    console.log(_str("case1 false"));
  }
  let pts1: number[][] = hypercube_points(10, 10.0, 2);
  let tree1: number[][] = build_kdtree(pts1, 2);
  if (((_len(tree1) > 0) && (_len(tree1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? tree1.length + _mochi_idx : _mochi_idx;})()]) == 2))) {
    console.log(_str("case2 true"));
  } else {
    console.log(_str("case2 false"));
  }
  let pts2: number[][] = hypercube_points(10, 10.0, 3);
  let tree2: number[][] = build_kdtree(pts2, -2);
  if (((_len(tree2) > 0) && (_len(tree2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? tree2.length + _mochi_idx : _mochi_idx;})()]) == 3))) {
    console.log(_str("case3 true"));
  } else {
    console.log(_str("case3 false"));
  }
}
function test_search() {
  let pts: number[][] = hypercube_points(10, 10.0, 2);
  let tree: number[][] = build_kdtree(pts, 0);
  let qp: number[] = hypercube_points(1, 10.0, 2)[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? hypercube_points(1, 10.0, 2).length + _mochi_idx : _mochi_idx;})()];
  let res: Record<string, number> = nearest_neighbour_search(tree, qp);
  if ((((res.index != -1.0) && (res.dist >= 0.0)) && (res.visited > 0.0))) {
    console.log(_str("search true"));
  } else {
    console.log(_str("search false"));
  }
}
function test_edge() {
  let empty_pts: number[][] = [];
  let tree: number[][] = build_kdtree(empty_pts, 0);
  let query: number[] = [0.0, 0.0];
  let res: Record<string, number> = nearest_neighbour_search(tree, query);
  if ((((res.index == -1.0) && (res.dist > 100000000.0)) && (res.visited == 0.0))) {
    console.log(_str("edge true"));
  } else {
    console.log(_str("edge false"));
  }
}
function main() {
  seed = 1;
  test_build_cases();
  test_search();
  test_edge();
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

