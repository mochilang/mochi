// Generated by Mochi v0.10.61 on 2025-08-08 16:36:10 GMT+7

export interface Node { data: number; next: number }
let NIL: number = (0 - 1);
let nodes: Node[] = [];
function make_linked_list(elements: number[]): number {
  if ((_len(elements) == 0)) {
    _panic("The Elements List is empty");
  }
  nodes = [];
  nodes.push({"data": elements[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? elements.length + _mochi_idx : _mochi_idx;})()], "next": NIL});
  let head: number = 0;
  let current: number = head;
  let i: number = 1;
  while ((i < _len(elements))) {
    nodes.push({"data": elements[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? elements.length + _mochi_idx : _mochi_idx;})()], "next": NIL});
    nodes[(()=>{const _mochi_idx = current; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].next = (_len(nodes) - 1);
    current = (_len(nodes) - 1);
    i = (i + 1);
  }
  return head;
}
function node_to_string(head: number): string {
  let s: string = "";
  let index: number = head;
  while ((index != NIL)) {
    let node: Node = nodes[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    s = (((s + "<") + _str(node.data)) + "> ---> ");
    index = node.next;
  }
  s = (s + "<END>");
  return s;
}
function main() {
  let list_data: number[] = [1, 3, 5, 32, 44, 12, 43];
  console.log(_str(("List: " + _str(list_data))));
  console.log(_str("Creating Linked List from List."));
  let head: number = make_linked_list(list_data);
  console.log(_str("Linked List:"));
  console.log(_str(node_to_string(head)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

