// Generated by Mochi v0.10.60 on 2025-08-08 10:49:08 GMT+7

export interface LinkedList { next: number[]; head: number }
let NULL: number = (0 - 1);
function empty_list(): LinkedList {
  return {"next": [], "head": NULL};
}
function add_node(list: LinkedList, value: number): LinkedList {
  let nexts: number[] = list.next;
  let new_index: number = _len(nexts);
  nexts.push(NULL);
  if ((list.head == NULL)) {
    return {"next": nexts, "head": new_index};
  }
  let last: number = list.head;
  while ((nexts[(()=>{const _mochi_idx = last; return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()] != NULL)) {
    last = nexts[(()=>{const _mochi_idx = last; return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()];
  }
  let new_nexts: number[] = [];
  let i: number = 0;
  while ((i < _len(nexts))) {
    if ((i == last)) {
      new_nexts.push(new_index);
    } else {
      new_nexts.push(nexts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return {"next": new_nexts, "head": list.head};
}
function set_next(list: LinkedList, index: number, next_index: number): LinkedList {
  let nexts: number[] = list.next;
  let new_nexts: number[] = [];
  let i: number = 0;
  while ((i < _len(nexts))) {
    if ((i == index)) {
      new_nexts.push(next_index);
    } else {
      new_nexts.push(nexts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return {"next": new_nexts, "head": list.head};
}
function detect_cycle(list: LinkedList): boolean {
  if ((list.head == NULL)) {
    return false;
  }
  let nexts: number[] = list.next;
  let slow: number = list.head;
  let fast: number = list.head;
  while (((fast != NULL) && (nexts[(()=>{const _mochi_idx = fast; return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()] != NULL))) {
    slow = nexts[(()=>{const _mochi_idx = slow; return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()];
    fast = nexts[(()=>{const _mochi_idx = Math.trunc(nexts[(()=>{const _mochi_idx = fast; return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nexts.length + _mochi_idx : _mochi_idx;})()];
    if ((slow == fast)) {
      return true;
    }
  }
  return false;
}
function main() {
  let ll: LinkedList = empty_list();
  ll = add_node(ll, 1);
  ll = add_node(ll, 2);
  ll = add_node(ll, 3);
  ll = add_node(ll, 4);
  ll = set_next(ll, 3, 1);
  console.log(_str(detect_cycle(ll)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

