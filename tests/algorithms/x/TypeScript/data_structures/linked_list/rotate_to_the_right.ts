// Generated by Mochi v0.10.59 on 2025-08-06 21:31:13 GMT+7

function list_to_string(xs: number[]): string {
  if ((_len(xs) == 0)) {
    return "";
  }
  let s: string = _str(xs[Math.trunc(0)]);
  let i: number = 1;
  while ((i < _len(xs))) {
    s = ((s + "->") + _str(xs[i]));
    i = (i + 1);
  }
  return s;
}
function insert_node(xs: number[], data: number): number[] {
  return [...xs, data];
}
function rotate_to_the_right(xs: number[], places: number): number[] {
  if ((_len(xs) == 0)) {
    _panic("The linked list is empty.");
  }
  let n: number = _len(xs);
  let k: number = (places % n);
  if ((k == 0)) {
    return xs;
  }
  let split = (n - k);
  let res: number[] = [];
  let i = split;
  while ((i < n)) {
    res.push(xs[i]);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < split)) {
    res.push(xs[j]);
    j = (j + 1);
  }
  return res;
}
function main() {
  let head: number[] = [];
  head = insert_node(head, 5);
  head = insert_node(head, 1);
  head = insert_node(head, 2);
  head = insert_node(head, 4);
  head = insert_node(head, 3);
  console.log(_str(("Original list: " + list_to_string(head))));
  let places: number = 3;
  let new_head: number[] = rotate_to_the_right(head, places);
  console.log(_str(((("After " + _str(places)) + " iterations: ") + list_to_string(new_head))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

