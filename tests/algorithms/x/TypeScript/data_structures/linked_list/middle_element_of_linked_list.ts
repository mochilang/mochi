// Generated by Mochi v0.10.59 on 2025-08-06 21:31:08 GMT+7

export interface List { data: number[] }
function empty_list(): List {
  return {"data": []};
}
function push(lst: List, value: number): List {
  let res: number[] = [value];
  let i: number = 0;
  while ((i < _len(lst.data))) {
    res.push(lst.data[i]);
    i = (i + 1);
  }
  return {"data": res};
}
function middle_element(lst: List): number {
  let n: number = _len(lst.data);
  if ((n == 0)) {
    console.log(_str("No element found."));
    return 0;
  }
  let slow: number = 0;
  let fast: number = 0;
  while (((fast + 1) < n)) {
    fast = (fast + 2);
    slow = (slow + 1);
  }
  return lst.data[slow];
}
function main() {
  let lst: List = empty_list();
  middle_element(lst);
  lst = push(lst, 5);
  console.log(_str(5));
  lst = push(lst, 6);
  console.log(_str(6));
  lst = push(lst, 8);
  console.log(_str(8));
  lst = push(lst, 8);
  console.log(_str(8));
  lst = push(lst, 10);
  console.log(_str(10));
  lst = push(lst, 12);
  console.log(_str(12));
  lst = push(lst, 17);
  console.log(_str(17));
  lst = push(lst, 7);
  console.log(_str(7));
  lst = push(lst, 3);
  console.log(_str(3));
  lst = push(lst, 20);
  console.log(_str(20));
  lst = push(lst, -20);
  console.log(_str(-20));
  console.log(_str(middle_element(lst)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

