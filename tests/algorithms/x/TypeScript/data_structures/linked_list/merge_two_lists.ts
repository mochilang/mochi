// Generated by Mochi v0.10.59 on 2025-08-06 21:31:07 GMT+7

export interface SortedLinkedList { values: number[] }
function sort_list(nums: number[]): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < _len(nums))) {
    arr.push(nums[i]);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < _len(arr))) {
    let k: number = (j + 1);
    while ((k < _len(arr))) {
      if ((arr[k] < arr[j])) {
        let tmp: number = arr[j];
        arr[j] = arr[k];
        arr[k] = tmp;
      }
      k = (k + 1);
    }
    j = (j + 1);
  }
  return arr;
}
function make_sorted_linked_list(ints: number[]): SortedLinkedList {
  return {"values": sort_list(ints)};
}
function len_sll(sll: SortedLinkedList): number {
  return _len(sll.values);
}
function str_sll(sll: SortedLinkedList): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(sll.values))) {
    res = (res + _str(sll.values[i]));
    if (((i + 1) < _len(sll.values))) {
      res = (res + " -> ");
    }
    i = (i + 1);
  }
  return res;
}
function merge_lists(a: SortedLinkedList, b: SortedLinkedList): SortedLinkedList {
  let combined: number[] = [];
  let i: number = 0;
  while ((i < _len(a.values))) {
    combined.push(a.values[i]);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(b.values))) {
    combined.push(b.values[i]);
    i = (i + 1);
  }
  return make_sorted_linked_list(combined);
}
function main() {
  let test_data_odd: number[] = [3, 9, -11, 0, 7, 5, 1, -1];
  let test_data_even: number[] = [4, 6, 2, 0, 8, 10, 3, -2];
  let sll_one: SortedLinkedList = make_sorted_linked_list(test_data_odd);
  let sll_two: SortedLinkedList = make_sorted_linked_list(test_data_even);
  let merged: SortedLinkedList = merge_lists(sll_one, sll_two);
  console.log(_str(_str(len_sll(merged))));
  console.log(_str(str_sll(merged)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

