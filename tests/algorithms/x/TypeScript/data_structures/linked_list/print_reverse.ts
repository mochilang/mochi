// Generated by Mochi v0.10.59 on 2025-08-06 21:31:10 GMT+7

export interface LinkedList { data: number[] }
function empty_list(): LinkedList {
  return {"data": []};
}
function append_value(list: LinkedList, value: number): LinkedList {
  let d: number[] = list.data;
  d.push(value);
  return {"data": d};
}
function extend_list(list: LinkedList, items: number[]): LinkedList {
  let result: LinkedList = list;
  let i: number = 0;
  while ((i < _len(items))) {
    result = append_value(result, items[i]);
    i = (i + 1);
  }
  return result;
}
function to_string(list: LinkedList): string {
  if ((_len(list.data) == 0)) {
    return "";
  }
  let s: string = _str(list.data[Math.trunc(0)]);
  let i: number = 1;
  while ((i < _len(list.data))) {
    s = ((s + " -> ") + _str(list.data[i]));
    i = (i + 1);
  }
  return s;
}
function make_linked_list(items: number[]): LinkedList {
  if ((_len(items) == 0)) {
    _panic("The Elements List is empty");
  }
  let ll: LinkedList = empty_list();
  ll = extend_list(ll, items);
  return ll;
}
function in_reverse(list: LinkedList): string {
  if ((_len(list.data) == 0)) {
    return "";
  }
  let i: number = (_len(list.data) - 1);
  let s: string = _str(list.data[i]);
  i = (i - 1);
  while ((i >= 0)) {
    s = ((s + " <- ") + _str(list.data[i]));
    i = (i - 1);
  }
  return s;
}
function main() {
  let linked_list: LinkedList = make_linked_list([14, 52, 14, 12, 43]);
  console.log(_str(("Linked List:  " + to_string(linked_list))));
  console.log(_str(("Reverse List: " + in_reverse(linked_list))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

