// Generated by Mochi v0.10.60 on 2025-08-08 10:49:06 GMT+7

export interface DoublyLinkedList { data: number[] }
function empty_list(): DoublyLinkedList {
  return {"data": []};
}
function length(list: DoublyLinkedList): number {
  return _len(list.data);
}
function is_empty(list: DoublyLinkedList): boolean {
  return (_len(list.data) == 0);
}
function to_string(list: DoublyLinkedList): string {
  if ((_len(list.data) == 0)) {
    return "";
  }
  let s: string = _str(list.data[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]);
  let i: number = 1;
  while ((i < _len(list.data))) {
    s = ((s + "->") + _str(list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return s;
}
function insert_nth(list: DoublyLinkedList, index: number, value: number): DoublyLinkedList {
  if (((index < 0) || (index > _len(list.data)))) {
    _panic("index out of range");
  }
  let res: number[] = [];
  let i: number = 0;
  while ((i < index)) {
    res.push(list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  res.push(value);
  while ((i < _len(list.data))) {
    res.push(list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return {"data": res};
}
function insert_head(list: DoublyLinkedList, value: number): DoublyLinkedList {
  return insert_nth(list, 0, value);
}
function insert_tail(list: DoublyLinkedList, value: number): DoublyLinkedList {
  return insert_nth(list, _len(list.data), value);
}
export interface DeleteResult { list: DoublyLinkedList; value: number }
function delete_nth(list: DoublyLinkedList, index: number): DeleteResult {
  if (((index < 0) || (index >= _len(list.data)))) {
    _panic("index out of range");
  }
  let res: number[] = [];
  let i: number = 0;
  let removed: number = 0;
  while ((i < _len(list.data))) {
    if ((i == index)) {
      removed = list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()];
    } else {
      res.push(list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return {"list": {"data": res}, "value": removed};
}
function delete_head(list: DoublyLinkedList): DeleteResult {
  return delete_nth(list, 0);
}
function delete_tail(list: DoublyLinkedList): DeleteResult {
  return delete_nth(list, (_len(list.data) - 1));
}
function delete_value(list: DoublyLinkedList, value: number): DeleteResult {
  let idx: number = 0;
  let found: boolean = false;
  while ((idx < _len(list.data))) {
    if ((list.data[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()] == value)) {
      found = true;
      break
    }
    idx = (idx + 1);
  }
  if (!found) {
    _panic("value not found");
  }
  return delete_nth(list, idx);
}
function main() {
  let dll: DoublyLinkedList = empty_list();
  dll = insert_tail(dll, 1);
  dll = insert_tail(dll, 2);
  dll = insert_tail(dll, 3);
  console.log(_str(to_string(dll)));
  dll = insert_head(dll, 0);
  console.log(_str(to_string(dll)));
  dll = insert_nth(dll, 2, 9);
  console.log(_str(to_string(dll)));
  let res: DeleteResult = delete_nth(dll, 2);
  dll = res.list;
  console.log(_str(res.value));
  console.log(_str(to_string(dll)));
  res = delete_tail(dll);
  dll = res.list;
  console.log(_str(res.value));
  console.log(_str(to_string(dll)));
  res = delete_value(dll, 1);
  dll = res.list;
  console.log(_str(res.value));
  console.log(_str(to_string(dll)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

