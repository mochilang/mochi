// Generated by Mochi v0.10.61 on 2025-08-08 16:36:27 GMT+7

let NIL: number = (0 - 1);
let MAX_LEVEL: number = 6;
let P: number = 0.5;
let seed: number = 1;
function random(): number {
  seed = (((seed * 13) + 7) % 100);
  return (seed / 100.0);
}
function random_level(): number {
  let lvl: number = 1;
  while (((random() < P) && (lvl < MAX_LEVEL))) {
    lvl = (lvl + 1);
  }
  return lvl;
}
function empty_forward(): number[] {
  let f: number[] = [];
  let i: number = 0;
  while ((i < MAX_LEVEL)) {
    f.push(NIL);
    i = (i + 1);
  }
  return f;
}
let node_keys: number[] = [];
let node_vals: number[] = [];
let node_forwards: number[][] = [];
let level: number = 1;
function init() {
  node_keys = [-1];
  node_vals = [0];
  node_forwards = [empty_forward()];
  level = 1;
}
function insert(key: number, value: number) {
  let update: number[] = [];
  let i: number = 0;
  while ((i < MAX_LEVEL)) {
    update.push(0);
    i = (i + 1);
  }
  let x: number = 0;
  i = (level - 1);
  while ((i >= 0)) {
    while (((node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] != NIL) && (node_keys[(()=>{const _mochi_idx = Math.trunc(node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? node_keys.length + _mochi_idx : _mochi_idx;})()] < key))) {
      x = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    }
    update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()] = x;
    i = (i - 1);
  }
  x = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  if (((x != NIL) && (node_keys[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_keys.length + _mochi_idx : _mochi_idx;})()] == key))) {
    node_vals[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_vals.length + _mochi_idx : _mochi_idx;})()] = value;
    return;
  }
  let lvl: number = random_level();
  if ((lvl > level)) {
    let j: number = level;
    while ((j < lvl)) {
      update[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()] = 0;
      j = (j + 1);
    }
    level = lvl;
  }
  node_keys.push(key);
  node_vals.push(value);
  let forwards: number[] = empty_forward();
  let idx: number = (_len(node_keys) - 1);
  i = 0;
  while ((i < lvl)) {
    forwards[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? forwards.length + _mochi_idx : _mochi_idx;})()] = node_forwards[(()=>{const _mochi_idx = Math.trunc(update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = Math.trunc(update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    node_forwards[(()=>{const _mochi_idx = update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = idx;
    i = (i + 1);
  }
  node_forwards.push(forwards);
}
function find(key: number): number {
  let x: number = 0;
  let i: number = (level - 1);
  while ((i >= 0)) {
    while (((node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] != NIL) && (node_keys[(()=>{const _mochi_idx = Math.trunc(node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? node_keys.length + _mochi_idx : _mochi_idx;})()] < key))) {
      x = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i - 1);
  }
  x = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  if (((x != NIL) && (node_keys[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_keys.length + _mochi_idx : _mochi_idx;})()] == key))) {
    return node_vals[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_vals.length + _mochi_idx : _mochi_idx;})()];
  }
  return -1;
}
function _delete(key: number) {
  let update: number[] = [];
  let i: number = 0;
  while ((i < MAX_LEVEL)) {
    update.push(0);
    i = (i + 1);
  }
  let x: number = 0;
  i = (level - 1);
  while ((i >= 0)) {
    while (((node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] != NIL) && (node_keys[(()=>{const _mochi_idx = Math.trunc(node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? node_keys.length + _mochi_idx : _mochi_idx;})()] < key))) {
      x = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    }
    update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()] = x;
    i = (i - 1);
  }
  x = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  if (((x == NIL) || (node_keys[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_keys.length + _mochi_idx : _mochi_idx;})()] != key))) {
    return;
  }
  i = 0;
  while ((i < level)) {
    if ((node_forwards[(()=>{const _mochi_idx = Math.trunc(update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = Math.trunc(update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == x)) {
      node_forwards[(()=>{const _mochi_idx = update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = update[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? update.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  while (((level > 1) && (node_forwards[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((level - 1)); return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == NIL))) {
    level = (level - 1);
  }
}
function to_string(): string {
  let s: string = "";
  let x: number = node_forwards[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  while ((x != NIL)) {
    if ((s != "")) {
      s = (s + " -> ");
    }
    s = (((s + _str(node_keys[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_keys.length + _mochi_idx : _mochi_idx;})()])) + ":") + _str(node_vals[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_vals.length + _mochi_idx : _mochi_idx;})()]));
    x = node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node_forwards[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? node_forwards.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  }
  return s;
}
function main() {
  init();
  insert(2, 2);
  insert(4, 4);
  insert(6, 4);
  insert(4, 5);
  insert(8, 4);
  insert(9, 4);
  _delete(4);
  console.log(_str(to_string()));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

