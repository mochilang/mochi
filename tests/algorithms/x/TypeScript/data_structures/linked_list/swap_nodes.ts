// Generated by Mochi v0.10.61 on 2025-08-08 16:36:29 GMT+7

export interface LinkedList { data: number[] }
function empty_list(): LinkedList {
  return {"data": []};
}
function push(list: LinkedList, value: number): LinkedList {
  let res: number[] = [value];
  res = concat(res, list.data);
  return {"data": res};
}
function swap_nodes(list: LinkedList, v1: number, v2: number): LinkedList {
  if ((v1 == v2)) {
    return list;
  }
  let idx1: number = (0 - 1);
  let idx2: number = (0 - 1);
  let i: number = 0;
  while ((i < _len(list.data))) {
    if (((list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()] == v1) && (idx1 == (0 - 1)))) {
      idx1 = i;
    }
    if (((list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()] == v2) && (idx2 == (0 - 1)))) {
      idx2 = i;
    }
    i = (i + 1);
  }
  if (((idx1 == (0 - 1)) || (idx2 == (0 - 1)))) {
    return list;
  }
  let res: number[] = list.data;
  let temp: number = res[(()=>{const _mochi_idx = idx1; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
  res[(()=>{const _mochi_idx = idx1; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] = res[(()=>{const _mochi_idx = idx2; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
  res[(()=>{const _mochi_idx = idx2; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] = temp;
  return {"data": res};
}
function to_string(list: LinkedList): string {
  return _str(list.data);
}
function main() {
  let ll: LinkedList = empty_list();
  let i: number = 5;
  while ((i > 0)) {
    ll = push(ll, i);
    i = (i - 1);
  }
  console.log(_str(("Original Linked List: " + to_string(ll))));
  ll = swap_nodes(ll, 1, 4);
  console.log(_str(("Modified Linked List: " + to_string(ll))));
  console.log(_str("After swapping the nodes whose data is 1 and 4."));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

