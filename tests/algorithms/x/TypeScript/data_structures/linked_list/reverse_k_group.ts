// Generated by Mochi v0.10.61 on 2025-08-08 16:36:22 GMT+7

export interface LinkedList { data: number[] }
function to_string(list: LinkedList): string {
  if ((_len(list.data) == 0)) {
    return "";
  }
  let s: string = _str(list.data[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]);
  let i: number = 1;
  while ((i < _len(list.data))) {
    s = ((s + " -> ") + _str(list.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return s;
}
function reverse_k_nodes(list: LinkedList, k: number): LinkedList {
  if ((k <= 1)) {
    return list;
  }
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(list.data))) {
    let j: number = 0;
    let group: number[] = [];
    while (((j < k) && ((i + j) < _len(list.data)))) {
      group.push(list.data[(()=>{const _mochi_idx = Math.trunc((i + j)); return _mochi_idx < 0 ? list.data.length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    if ((_len(group) == k)) {
      let g: number = (k - 1);
      while ((g >= 0)) {
        res.push(group[(()=>{const _mochi_idx = g; return _mochi_idx < 0 ? group.length + _mochi_idx : _mochi_idx;})()]);
        g = (g - 1);
      }
    } else {
      let g: number = 0;
      while ((g < _len(group))) {
        res.push(group[(()=>{const _mochi_idx = g; return _mochi_idx < 0 ? group.length + _mochi_idx : _mochi_idx;})()]);
        g = (g + 1);
      }
    }
    i = (i + k);
  }
  return {"data": res};
}
function main() {
  let ll: LinkedList = {"data": [1, 2, 3, 4, 5]};
  console.log(_str(("Original Linked List: " + to_string(ll))));
  let k: number = 2;
  ll = reverse_k_nodes(ll, k);
  console.log(_str(((("After reversing groups of size " + _str(k)) + ": ") + to_string(ll))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

