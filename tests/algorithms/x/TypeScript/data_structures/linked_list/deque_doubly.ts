// Generated by Mochi v0.10.60 on 2025-08-08 10:49:05 GMT+7

export interface Node { data: string; prev: number; next: number }
export interface LinkedDeque { nodes: Node[]; header: number; trailer: number; size: number }
function new_deque(): LinkedDeque {
  let nodes: Node[] = [];
  nodes.push({"data": "", "prev": -1, "next": 1});
  nodes.push({"data": "", "prev": 0, "next": -1});
  return {nodes, "header": 0, "trailer": 1, "size": 0};
}
function is_empty(d: LinkedDeque): boolean {
  return (d.size == 0);
}
function front(d: LinkedDeque): string {
  if (is_empty(d)) {
    _panic("List is empty");
  }
  let head: Node = d.nodes[(()=>{const _mochi_idx = Math.trunc(d.header); return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  let idx: number = head.next;
  let node: Node = d.nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  return node.data;
}
function back(d: LinkedDeque): string {
  if (is_empty(d)) {
    _panic("List is empty");
  }
  let tail: Node = d.nodes[(()=>{const _mochi_idx = Math.trunc(d.trailer); return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  let idx: number = tail.prev;
  let node: Node = d.nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  return node.data;
}
function insert(d: LinkedDeque, pred: number, value: string, succ: number): LinkedDeque {
  let nodes: Node[] = d.nodes;
  let new_idx: number = _len(nodes);
  nodes.push({"data": value, "prev": pred, "next": succ});
  let pred_node: Node = nodes[(()=>{const _mochi_idx = pred; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  pred_node.next = new_idx;
  nodes[(()=>{const _mochi_idx = pred; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = pred_node;
  let succ_node: Node = nodes[(()=>{const _mochi_idx = succ; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  succ_node.prev = new_idx;
  nodes[(()=>{const _mochi_idx = succ; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = succ_node;
  d.nodes = nodes;
  d.size = (d.size + 1);
  return d;
}
export interface DeleteResult { deque: LinkedDeque; value: string }
function _delete(d: LinkedDeque, idx: number): DeleteResult {
  let nodes: Node[] = d.nodes;
  let node: Node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  let pred: number = node.prev;
  let succ: number = node.next;
  let pred_node: Node = nodes[(()=>{const _mochi_idx = pred; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  pred_node.next = succ;
  nodes[(()=>{const _mochi_idx = pred; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = pred_node;
  let succ_node: Node = nodes[(()=>{const _mochi_idx = succ; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  succ_node.prev = pred;
  nodes[(()=>{const _mochi_idx = succ; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = succ_node;
  let val: string = node.data;
  d.nodes = nodes;
  d.size = (d.size - 1);
  return {"deque": d, "value": val};
}
function add_first(d: LinkedDeque, value: string): LinkedDeque {
  let head: Node = d.nodes[(()=>{const _mochi_idx = Math.trunc(d.header); return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  let succ: number = head.next;
  return insert(d, d.header, value, succ);
}
function add_last(d: LinkedDeque, value: string): LinkedDeque {
  let tail: Node = d.nodes[(()=>{const _mochi_idx = Math.trunc(d.trailer); return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  let pred: number = tail.prev;
  return insert(d, pred, value, d.trailer);
}
function remove_first(d: LinkedDeque): DeleteResult {
  if (is_empty(d)) {
    _panic("remove_first from empty list");
  }
  let head: Node = d.nodes[(()=>{const _mochi_idx = Math.trunc(d.header); return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  let idx: number = head.next;
  return _delete(d, idx);
}
function remove_last(d: LinkedDeque): DeleteResult {
  if (is_empty(d)) {
    _panic("remove_first from empty list");
  }
  let tail: Node = d.nodes[(()=>{const _mochi_idx = Math.trunc(d.trailer); return _mochi_idx < 0 ? d.nodes.length + _mochi_idx : _mochi_idx;})()];
  let idx: number = tail.prev;
  return _delete(d, idx);
}
function main() {
  let d: LinkedDeque = new_deque();
  d = add_first(d, "A");
  console.log(_str(front(d)));
  d = add_last(d, "B");
  console.log(_str(back(d)));
  let r: DeleteResult = remove_first(d);
  d = r.deque;
  console.log(_str(r.value));
  r = remove_last(d);
  d = r.deque;
  console.log(_str(r.value));
  console.log(_str(_str(is_empty(d))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

