// Generated by Mochi v0.10.59 on 2025-08-06 21:31:28 GMT+7

export interface Node { data: string; next: number }
export interface LinkedQueue { nodes: Node[]; front: number; rear: number }
function new_queue(): LinkedQueue {
  return {"nodes": [], "front": (0 - 1), "rear": (0 - 1)};
}
function is_empty(q: LinkedQueue): boolean {
  return (q.front == (0 - 1));
}
function put(q: LinkedQueue, item: string) {
  let node: Node = {"data": item, "next": (0 - 1)};
  q.nodes = [...q.nodes, node];
  let idx: number = (_len(q.nodes) - 1);
  if ((q.front == (0 - 1))) {
    q.front = idx;
    q.rear = idx;
  } else {
    let nodes: Node[] = q.nodes;
    nodes[q.rear].next = idx;
    q.nodes = nodes;
    q.rear = idx;
  }
}
function _get(q: LinkedQueue): string {
  if (is_empty(q)) {
    _panic("dequeue from empty queue");
  }
  let idx: number = q.front;
  let node: Node = q.nodes[idx];
  q.front = node.next;
  if ((q.front == (0 - 1))) {
    q.rear = (0 - 1);
  }
  return node.data;
}
function length(q: LinkedQueue): number {
  let count: number = 0;
  let idx: number = q.front;
  while ((idx != (0 - 1))) {
    count = (count + 1);
    idx = q.nodes[idx].next;
  }
  return count;
}
function to_string(q: LinkedQueue): string {
  let res: string = "";
  let idx: number = q.front;
  let first: boolean = true;
  while ((idx != (0 - 1))) {
    let node: Node = q.nodes[idx];
    if (first) {
      res = node.data;
      first = false;
    } else {
      res = ((res + " <- ") + node.data);
    }
    idx = node.next;
  }
  return res;
}
function clear(q: LinkedQueue) {
  q.nodes = [];
  q.front = (0 - 1);
  q.rear = (0 - 1);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let queue: LinkedQueue
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
queue = new_queue()
  console.log(_str(_str(is_empty(queue))));
  put(queue, "5");
  put(queue, "9");
  put(queue, "python");
  console.log(_str(_str(is_empty(queue))));
  console.log(_str(_get(queue)));
  put(queue, "algorithms");
  console.log(_str(_get(queue)));
  console.log(_str(_get(queue)));
  console.log(_str(_get(queue)));
  console.log(_str(_str(is_empty(queue))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

