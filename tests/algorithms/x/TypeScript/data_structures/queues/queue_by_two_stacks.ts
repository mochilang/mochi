// Generated by Mochi v0.10.61 on 2025-08-08 16:36:43 GMT+7

export interface Queue { stack1: number[]; stack2: number[] }
export interface GetResult { queue: Queue; value: number }
function new_queue(items: number[]): Queue {
  return {"stack1": items, "stack2": []};
}
function len_queue(q: Queue): number {
  return (_len(q.stack1) + _len(q.stack2));
}
function str_queue(q: Queue): string {
  let items: number[] = [];
  let i: number = (_len(q.stack2) - 1);
  while ((i >= 0)) {
    items.push(q.stack2[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? q.stack2.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  let j: number = 0;
  while ((j < _len(q.stack1))) {
    items.push(q.stack1[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? q.stack1.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  let s: string = "Queue((";
  let k: number = 0;
  while ((k < _len(items))) {
    s = (s + _str(items[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? items.length + _mochi_idx : _mochi_idx;})()]));
    if ((k < (_len(items) - 1))) {
      s = (s + ", ");
    }
    k = (k + 1);
  }
  s = (s + "))");
  return s;
}
function put(q: Queue, item: number): Queue {
  let s1: number[] = q.stack1;
  s1.push(item);
  return {"stack1": s1, "stack2": q.stack2};
}
function _get(q: Queue): GetResult {
  let s1: number[] = q.stack1;
  let s2: number[] = q.stack2;
  if ((_len(s2) == 0)) {
    while ((_len(s1) > 0)) {
      let idx: number = (_len(s1) - 1);
      let v: number = s1[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? s1.length + _mochi_idx : _mochi_idx;})()];
      let new_s1: number[] = [];
      let i: number = 0;
      while ((i < idx)) {
        new_s1.push(s1[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s1.length + _mochi_idx : _mochi_idx;})()]);
        i = (i + 1);
      }
      s1 = new_s1;
      s2.push(v);
    }
  }
  if ((_len(s2) == 0)) {
    _panic("Queue is empty");
  }
  let idx2: number = (_len(s2) - 1);
  let value: number = s2[(()=>{const _mochi_idx = idx2; return _mochi_idx < 0 ? s2.length + _mochi_idx : _mochi_idx;})()];
  let new_s2: number[] = [];
  let j: number = 0;
  while ((j < idx2)) {
    new_s2.push(s2[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? s2.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  s2 = new_s2;
  return {"queue": {"stack1": s1, "stack2": s2}, value};
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let q: Queue
let r1: GetResult
let r2: GetResult
let r3: GetResult
let r4: GetResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
q = new_queue([10, 20, 30])
r1 = _get(q)
  q = r1.queue;
  console.log(_str(r1.value));
  q = put(q, 40);
r2 = _get(q)
  q = r2.queue;
  console.log(_str(r2.value));
r3 = _get(q)
  q = r3.queue;
  console.log(_str(r3.value));
  console.log(_str(len_queue(q)));
r4 = _get(q)
  q = r4.queue;
  console.log(_str(r4.value));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

