// Generated by Mochi v0.10.61 on 2025-08-08 16:36:31 GMT+7

export interface CircularQueue { data: number[]; front: number; rear: number; size: number; capacity: number }
function create_queue(capacity: number): CircularQueue {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < capacity)) {
    arr.push(0);
    i = (i + 1);
  }
  return {"data": arr, "front": 0, "rear": 0, "size": 0, capacity};
}
function length(q: CircularQueue): number {
  return q.size;
}
function is_empty(q: CircularQueue): boolean {
  return (q.size == 0);
}
function front(q: CircularQueue): number {
  if (is_empty(q)) {
    return 0;
  }
  return q.data[(()=>{const _mochi_idx = Math.trunc(q.front); return _mochi_idx < 0 ? q.data.length + _mochi_idx : _mochi_idx;})()];
}
function enqueue(q: CircularQueue, value: number): CircularQueue {
  if ((q.size >= q.capacity)) {
    _panic("QUEUE IS FULL");
  }
  let arr: number[] = q.data;
  arr[(()=>{const _mochi_idx = q.rear; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = value;
  q.data = arr;
  q.rear = ((q.rear + 1) % q.capacity);
  q.size = (q.size + 1);
  return q;
}
export interface DequeueResult { queue: CircularQueue; value: number }
function dequeue(q: CircularQueue): DequeueResult {
  if ((q.size == 0)) {
    _panic("UNDERFLOW");
  }
  let value: number = q.data[(()=>{const _mochi_idx = Math.trunc(q.front); return _mochi_idx < 0 ? q.data.length + _mochi_idx : _mochi_idx;})()];
  let arr2: number[] = q.data;
  arr2[(()=>{const _mochi_idx = q.front; return _mochi_idx < 0 ? arr2.length + _mochi_idx : _mochi_idx;})()] = 0;
  q.data = arr2;
  q.front = ((q.front + 1) % q.capacity);
  q.size = (q.size - 1);
  return {"queue": q, value};
}
function main() {
  let q: CircularQueue = create_queue(5);
  console.log(_str(is_empty(q)));
  q = enqueue(q, 10);
  console.log(_str(is_empty(q)));
  q = enqueue(q, 20);
  q = enqueue(q, 30);
  console.log(_str(front(q)));
  let r: DequeueResult = dequeue(q);
  q = r.queue;
  console.log(_str(r.value));
  console.log(_str(front(q)));
  console.log(_str(length(q)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

