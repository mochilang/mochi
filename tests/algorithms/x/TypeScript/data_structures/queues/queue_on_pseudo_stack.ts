// Generated by Mochi v0.10.61 on 2025-08-08 16:36:45 GMT+7

export interface Queue { stack: number[]; length: number }
function empty_queue(): Queue {
  return {"stack": [], "length": 0};
}
function put(q: Queue, item: number): Queue {
  let s: any[] = [...q.stack, item];
  return {"stack": s, "length": (q.length + 1)};
}
function drop_first(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 1;
  while ((i < _len(xs))) {
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function drop_last(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < (_len(xs) - 1))) {
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function rotate(q: Queue, rotation: number): Queue {
  let s: number[] = q.stack;
  let i: number = 0;
  while (((i < rotation) && (_len(s) > 0))) {
    let temp: number = s[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    s = drop_first(s);
    s.push(temp);
    i = (i + 1);
  }
  return {"stack": s, "length": q.length};
}
export interface GetResult { queue: Queue; value: number }
function _get(q: Queue): GetResult {
  if ((q.length == 0)) {
    _panic("queue empty");
  }
  let q1: Queue = rotate(q, 1);
  let v: number = q1.stack[(()=>{const _mochi_idx = Math.trunc((q1.length - 1)); return _mochi_idx < 0 ? q1.stack.length + _mochi_idx : _mochi_idx;})()];
  let s: number[] = drop_last(q1.stack);
  let q2: Queue = {"stack": s, "length": q1.length};
  q2 = rotate(q2, (q2.length - 1));
  q2 = {"stack": q2.stack, "length": (q2.length - 1)};
  return {"queue": q2, "value": v};
}
export interface FrontResult { queue: Queue; value: number }
function front(q: Queue): FrontResult {
  let r: GetResult = _get(q);
  let q2: Queue = put(r.queue, r.value);
  q2 = rotate(q2, (q2.length - 1));
  return {"queue": q2, "value": r.value};
}
function size(q: Queue): number {
  return q.length;
}
function to_string(q: Queue): string {
  let s: string = "<";
  if ((q.length > 0)) {
    s = (s + _str(q.stack[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? q.stack.length + _mochi_idx : _mochi_idx;})()]));
    let i: number = 1;
    while ((i < q.length)) {
      s = ((s + ", ") + _str(q.stack[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? q.stack.length + _mochi_idx : _mochi_idx;})()]));
      i = (i + 1);
    }
  }
  s = (s + ">");
  return s;
}
function main() {
  let q: Queue = empty_queue();
  q = put(q, 1);
  q = put(q, 2);
  q = put(q, 3);
  console.log(_str(to_string(q)));
  let g: GetResult = _get(q);
  q = g.queue;
  console.log(_str(g.value));
  console.log(_str(to_string(q)));
  let f: FrontResult = front(q);
  q = f.queue;
  console.log(_str(f.value));
  console.log(_str(to_string(q)));
  console.log(_str(size(q)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

