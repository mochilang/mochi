// Generated by Mochi v0.10.61 on 2025-08-08 16:36:35 GMT+7

export interface Deque { data: number[] }
function empty_deque(): Deque {
  return {"data": []};
}
function push_back(dq: Deque, value: number): Deque {
  return {"data": [...dq.data, value]};
}
function push_front(dq: Deque, value: number): Deque {
  let res: number[] = [value];
  let i: number = 0;
  while ((i < _len(dq.data))) {
    res.push(dq.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return {"data": res};
}
function extend_back(dq: Deque, values: number[]): Deque {
  let res: number[] = dq.data;
  let i: number = 0;
  while ((i < _len(values))) {
    res.push(values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return {"data": res};
}
function extend_front(dq: Deque, values: number[]): Deque {
  let res: number[] = [];
  let i = (_len(values) - 1);
  while ((i >= 0)) {
    res.push(values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  let j: number = 0;
  while ((j < _len(dq.data))) {
    res.push(dq.data[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  return {"data": res};
}
export interface PopResult { deque: Deque; value: number }
function pop_back(dq: Deque): PopResult {
  if ((_len(dq.data) == 0)) {
    _panic("pop from empty deque");
  }
  let res: number[] = [];
  let i: number = 0;
  while ((i < (_len(dq.data) - 1))) {
    res.push(dq.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return {"deque": {"data": res}, "value": dq.data[(()=>{const _mochi_idx = Math.trunc((_len(dq.data) - 1)); return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]};
}
function pop_front(dq: Deque): PopResult {
  if ((_len(dq.data) == 0)) {
    _panic("popleft from empty deque");
  }
  let res: number[] = [];
  let i: number = 1;
  while ((i < _len(dq.data))) {
    res.push(dq.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return {"deque": {"data": res}, "value": dq.data[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]};
}
function is_empty(dq: Deque): boolean {
  return (_len(dq.data) == 0);
}
function length(dq: Deque): number {
  return _len(dq.data);
}
function to_string(dq: Deque): string {
  if ((_len(dq.data) == 0)) {
    return "[]";
  }
  let s: string = ("[" + _str(dq.data[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]));
  let i: number = 1;
  while ((i < _len(dq.data))) {
    s = ((s + ", ") + _str(dq.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dq.data.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return (s + "]");
}
function main() {
  let dq: Deque = empty_deque();
  dq = push_back(dq, 2);
  dq = push_front(dq, 1);
  dq = extend_back(dq, [3, 4]);
  dq = extend_front(dq, [0]);
  console.log(_str(to_string(dq)));
  let r: PopResult = pop_back(dq);
  dq = r.deque;
  console.log(_str(r.value));
  r = pop_front(dq);
  dq = r.deque;
  console.log(_str(r.value));
  console.log(_str(to_string(dq)));
  console.log(_str(is_empty(empty_deque())));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

