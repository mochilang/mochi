// Generated by Mochi v0.10.59 on 2025-08-06 21:31:24 GMT+7

export interface CircularQueue { data: string[]; next: number[]; prev: number[]; front: number; rear: number }
export interface DequeueResult { queue: CircularQueue; value: string }
function create_queue(capacity: number): CircularQueue {
  let data: string[] = [];
  let next: number[] = [];
  let prev: number[] = [];
  let i: number = 0;
  while ((i < capacity)) {
    data.push("");
    next.push(((i + 1) % capacity));
    prev.push((((i - 1) + capacity) % capacity));
    i = (i + 1);
  }
  return {data, next, prev, "front": 0, "rear": 0};
}
function is_empty(q: CircularQueue): boolean {
  return ((q.front == q.rear) && (q.data[Math.trunc(q.front)] == ""));
}
function check_can_perform(q: CircularQueue) {
  if (is_empty(q)) {
    _panic("Empty Queue");
  }
}
function check_is_full(q: CircularQueue) {
  if ((q.next[Math.trunc(q.rear)] == q.front)) {
    _panic("Full Queue");
  }
}
function peek(q: CircularQueue): string {
  check_can_perform(q);
  return q.data[Math.trunc(q.front)];
}
function enqueue(q: CircularQueue, value: string): CircularQueue {
  check_is_full(q);
  if (!is_empty(q)) {
    q.rear = q.next[Math.trunc(q.rear)];
  }
  let data: string[] = q.data;
  data[q.rear] = value;
  q.data = data;
  return q;
}
function dequeue(q: CircularQueue): DequeueResult {
  check_can_perform(q);
  let data: string[] = q.data;
  let val: string = data[Math.trunc(q.front)];
  data[q.front] = "";
  q.data = data;
  if ((q.front != q.rear)) {
    q.front = q.next[Math.trunc(q.front)];
  }
  return {"queue": q, "value": val};
}
function main() {
  let q: CircularQueue = create_queue(3);
  console.log(_str(_str(is_empty(q))));
  q = enqueue(q, "a");
  q = enqueue(q, "b");
  console.log(_str(peek(q)));
  let res: DequeueResult = dequeue(q);
  q = res.queue;
  console.log(_str(res.value));
  res = dequeue(q);
  q = res.queue;
  console.log(_str(res.value));
  console.log(_str(_str(is_empty(q))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

