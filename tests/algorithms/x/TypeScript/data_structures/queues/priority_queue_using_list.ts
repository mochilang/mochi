// Generated by Mochi v0.10.59 on 2025-08-06 21:31:30 GMT+7

function panic(msg: string) {
  console.log(_str(msg));
}
export interface FixedPriorityQueue { queues: number[][] }
function fpq_new(): FixedPriorityQueue {
  return {"queues": [[], [], []]};
}
function fpq_enqueue(fpq: FixedPriorityQueue, priority: number, data: number): FixedPriorityQueue {
  if (((priority < 0) || (priority >= _len(fpq.queues)))) {
    panic("Valid priorities are 0, 1, and 2");
    return fpq;
  }
  if ((_len(fpq.queues[priority]) >= 100)) {
    panic("Maximum queue size is 100");
    return fpq;
  }
  let qs: number[][] = fpq.queues;
  qs[priority] = [...qs[priority], data];
  fpq.queues = qs;
  return fpq;
}
export interface FPQDequeueResult { queue: FixedPriorityQueue; value: number }
function fpq_dequeue(fpq: FixedPriorityQueue): FPQDequeueResult {
  let qs: number[][] = fpq.queues;
  let i: number = 0;
  while ((i < _len(qs))) {
    let q: number[] = qs[i];
    if ((_len(q) > 0)) {
      let val: number = q[Math.trunc(0)];
      let new_q: number[] = [];
      let j: number = 1;
      while ((j < _len(q))) {
        new_q.push(q[j]);
        j = (j + 1);
      }
      qs[i] = new_q;
      fpq.queues = qs;
      return {"queue": fpq, "value": val};
    }
    i = (i + 1);
  }
  panic("All queues are empty");
  return {"queue": fpq, "value": 0};
}
function fpq_to_string(fpq: FixedPriorityQueue): string {
  let lines: string[] = [];
  let i: number = 0;
  while ((i < _len(fpq.queues))) {
    let q_str: string = "[";
    let q: number[] = fpq.queues[i];
    let j: number = 0;
    while ((j < _len(q))) {
      if ((j > 0)) {
        q_str = (q_str + ", ");
      }
      q_str = (q_str + _str(q[j]));
      j = (j + 1);
    }
    q_str = (q_str + "]");
    lines.push(((("Priority " + _str(i)) + ": ") + q_str));
    i = (i + 1);
  }
  let res: string = "";
  i = 0;
  while ((i < _len(lines))) {
    if ((i > 0)) {
      res = (res + "\n");
    }
    res = (res + lines[i]);
    i = (i + 1);
  }
  return res;
}
export interface ElementPriorityQueue { queue: number[] }
function epq_new(): ElementPriorityQueue {
  return {"queue": []};
}
function epq_enqueue(epq: ElementPriorityQueue, data: number): ElementPriorityQueue {
  if ((_len(epq.queue) >= 100)) {
    panic("Maximum queue size is 100");
    return epq;
  }
  epq.queue = [...epq.queue, data];
  return epq;
}
export interface EPQDequeueResult { queue: ElementPriorityQueue; value: number }
function epq_dequeue(epq: ElementPriorityQueue): EPQDequeueResult {
  if ((_len(epq.queue) == 0)) {
    panic("The queue is empty");
    return {"queue": epq, "value": 0};
  }
  let min_val: number = epq.queue[Math.trunc(0)];
  let idx: number = 0;
  let i: number = 1;
  while ((i < _len(epq.queue))) {
    let v: number = epq.queue[i];
    if ((v < min_val)) {
      min_val = v;
      idx = i;
    }
    i = (i + 1);
  }
  let new_q: number[] = [];
  i = 0;
  while ((i < _len(epq.queue))) {
    if ((i != idx)) {
      new_q.push(epq.queue[i]);
    }
    i = (i + 1);
  }
  epq.queue = new_q;
  return {"queue": epq, "value": min_val};
}
function epq_to_string(epq: ElementPriorityQueue): string {
  return _str(epq.queue);
}
function fixed_priority_queue() {
  let fpq: FixedPriorityQueue = fpq_new();
  fpq = fpq_enqueue(fpq, 0, 10);
  fpq = fpq_enqueue(fpq, 1, 70);
  fpq = fpq_enqueue(fpq, 0, 100);
  fpq = fpq_enqueue(fpq, 2, 1);
  fpq = fpq_enqueue(fpq, 2, 5);
  fpq = fpq_enqueue(fpq, 1, 7);
  fpq = fpq_enqueue(fpq, 2, 4);
  fpq = fpq_enqueue(fpq, 1, 64);
  fpq = fpq_enqueue(fpq, 0, 128);
  console.log(_str(fpq_to_string(fpq)));
  let res: FPQDequeueResult = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  console.log(_str(fpq_to_string(fpq)));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  console.log(_str(res.value));
}
function element_priority_queue() {
  let epq: ElementPriorityQueue = epq_new();
  epq = epq_enqueue(epq, 10);
  epq = epq_enqueue(epq, 70);
  epq = epq_enqueue(epq, 100);
  epq = epq_enqueue(epq, 1);
  epq = epq_enqueue(epq, 5);
  epq = epq_enqueue(epq, 7);
  epq = epq_enqueue(epq, 4);
  epq = epq_enqueue(epq, 64);
  epq = epq_enqueue(epq, 128);
  console.log(_str(epq_to_string(epq)));
  let res: EPQDequeueResult = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  console.log(_str(epq_to_string(epq)));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
  res = epq_dequeue(epq);
  epq = res.queue;
  console.log(_str(res.value));
}
function main() {
  fixed_priority_queue();
  element_priority_queue();
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

