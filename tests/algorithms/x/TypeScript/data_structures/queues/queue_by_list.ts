// Generated by Mochi v0.10.59 on 2025-08-06 21:31:31 GMT+7

export interface Queue { entries: number[] }
export interface GetResult { queue: Queue; value: number }
function new_queue(items: number[]): Queue {
  return {"entries": items};
}
function len_queue(q: Queue): number {
  return _len(q.entries);
}
function str_queue(q: Queue): string {
  let s: string = "Queue((";
  let i: number = 0;
  while ((i < _len(q.entries))) {
    s = (s + _str(q.entries[i]));
    if ((i < (_len(q.entries) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "))");
  return s;
}
function put(q: Queue, item: number): Queue {
  let e: number[] = q.entries;
  e.push(item);
  return {"entries": e};
}
function _get(q: Queue): GetResult {
  if ((_len(q.entries) == 0)) {
    _panic("Queue is empty");
  }
  let value: number = q.entries[Math.trunc(0)];
  let new_entries: number[] = [];
  let i: number = 1;
  while ((i < _len(q.entries))) {
    new_entries.push(q.entries[i]);
    i = (i + 1);
  }
  return {"queue": {"entries": new_entries}, value};
}
function rotate(q: Queue, rotation: number): Queue {
  let e: number[] = q.entries;
  let r: number = 0;
  while ((r < rotation)) {
    if ((_len(e) > 0)) {
      let first = e[Math.trunc(0)];
      let rest: number[] = [];
      let i: number = 1;
      while ((i < _len(e))) {
        rest.push(e[i]);
        i = (i + 1);
      }
      rest.push(first);
      e = rest;
    }
    r = (r + 1);
  }
  return {"entries": e};
}
function get_front(q: Queue): number {
  return q.entries[Math.trunc(0)];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let q: Queue
let res: GetResult
let front: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
q = new_queue([])
  console.log(_str(len_queue(q)));
  q = put(q, 10);
  q = put(q, 20);
  q = put(q, 30);
  q = put(q, 40);
  console.log(_str(str_queue(q)));
res = _get(q)
  q = res.queue;
  console.log(_str(res.value));
  console.log(_str(str_queue(q)));
  q = rotate(q, 2);
  console.log(_str(str_queue(q)));
front = get_front(q)
  console.log(_str(front));
  console.log(_str(str_queue(q)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

