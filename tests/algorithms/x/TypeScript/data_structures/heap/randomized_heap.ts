// Generated by Mochi v0.10.61 on 2025-08-08 16:35:44 GMT+7

export interface Node { value: number; left: number; right: number }
let NIL: number = (0 - 1);
let seed: number = 1;
function set_seed(s: number) {
  seed = s;
}
function randint(a: number, b: number): number {
  seed = Number((((BigInt(seed) * 1103515245n) + 12345n) % 2147483648n));
  return ((seed % ((b - a) + 1)) + a);
}
function rand_bool(): boolean {
  return (randint(0, 1) == 1);
}
let nodes: Record<string, number>[] = [];
function new_heap() {
  nodes = [];
  root = NIL;
}
function merge(r1: number, r2: number): number {
  if ((r1 == NIL)) {
    return r2;
  }
  if ((r2 == NIL)) {
    return r1;
  }
  if ((nodes[(()=>{const _mochi_idx = r1; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].value > nodes[(()=>{const _mochi_idx = r2; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].value)) {
    let tmp: number = r1;
    r1 = r2;
    r2 = tmp;
  }
  if (rand_bool()) {
    let tmp: number = nodes[(()=>{const _mochi_idx = r1; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left;
    nodes[(()=>{const _mochi_idx = r1; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left = nodes[(()=>{const _mochi_idx = r1; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].right;
    nodes[(()=>{const _mochi_idx = r1; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].right = tmp;
  }
  nodes[(()=>{const _mochi_idx = r1; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left = merge(nodes[(()=>{const _mochi_idx = r1; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left, r2);
  return r1;
}
function insert(value: number) {
  let node: Node = {value, "left": NIL, "right": NIL};
  nodes.push(node);
  let idx: number = (_len(nodes) - 1);
  root = merge(root, idx);
}
function top(): number {
  if ((root == NIL)) {
    return 0;
  }
  return nodes[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].value;
}
function pop(): number {
  let result: number = top();
  let l: number = nodes[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].left;
  let r: number = nodes[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].right;
  root = merge(l, r);
  return result;
}
function is_empty(): boolean {
  return (root == NIL);
}
function to_sorted_list(): number[] {
  let res: number[] = [];
  while (!is_empty()) {
    res.push(pop());
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let root: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
root = NIL
  set_seed(1);
  new_heap();
  insert(2);
  insert(3);
  insert(1);
  insert(5);
  insert(1);
  insert(7);
  console.log(_str("[" + (to_sorted_list()).join(' ') + "]"));
  new_heap();
  insert(1);
  insert(-1);
  insert(0);
  console.log(_str("[" + (to_sorted_list()).join(' ') + "]"));
  new_heap();
  insert(3);
  insert(1);
  insert(3);
  insert(7);
  console.log(_str(pop()));
  console.log(_str(pop()));
  console.log(_str(pop()));
  console.log(_str(pop()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

