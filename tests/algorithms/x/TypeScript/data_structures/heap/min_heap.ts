// Generated by Mochi v0.10.61 on 2025-08-08 16:35:43 GMT+7

export interface Node { name: string; val: number }
export interface MinHeap { heap: Node[]; idx_of_element: Record<string, number>; heap_dict: Record<string, number> }
function get_parent_idx(idx: number): number {
  return Math.floor((idx - 1) / 2);
}
function get_left_child_idx(idx: number): number {
  return ((idx * 2) + 1);
}
function get_right_child_idx(idx: number): number {
  return ((idx * 2) + 2);
}
function remove_key(m: Record<string, number>, k: string): Record<string, number> {
  let out: Record<string, number> = {};
  for (const key in m) {
    if ((key != k)) {
      out[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? out.length + _mochi_idx : _mochi_idx;})()] = m[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()];
    }
  }
  return out;
}
function slice_without_last(xs: Node[]): Node[] {
  let res: Node[] = [];
  let i: number = 0;
  while ((i < (_len(xs) - 1))) {
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function sift_down(mh: MinHeap, idx: number) {
  let heap: Node[] = mh.heap;
  let idx_map: Record<string, number> = mh.idx_of_element;
  let i: number = idx;
  while (true) {
    let left: number = get_left_child_idx(i);
    let right: number = get_right_child_idx(i);
    let smallest: number = i;
    if (((left < _len(heap)) && (heap[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val < heap[(()=>{const _mochi_idx = smallest; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val))) {
      smallest = left;
    }
    if (((right < _len(heap)) && (heap[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val < heap[(()=>{const _mochi_idx = smallest; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val))) {
      smallest = right;
    }
    if ((smallest != i)) {
      let tmp: Node = heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
      heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = heap[(()=>{const _mochi_idx = smallest; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
      heap[(()=>{const _mochi_idx = smallest; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = tmp;
      idx_map[(()=>{const _mochi_idx = heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = i;
      idx_map[(()=>{const _mochi_idx = heap[(()=>{const _mochi_idx = smallest; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = smallest;
      i = smallest;
    } else {
      break
    }
  }
  mh.heap = heap;
  mh.idx_of_element = idx_map;
}
function sift_up(mh: MinHeap, idx: number) {
  let heap: Node[] = mh.heap;
  let idx_map: Record<string, number> = mh.idx_of_element;
  let i: number = idx;
  let p: number = get_parent_idx(i);
  while (((p >= 0) && (heap[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val > heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val))) {
    let tmp: Node = heap[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
    heap[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
    heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = tmp;
    idx_map[(()=>{const _mochi_idx = heap[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = p;
    idx_map[(()=>{const _mochi_idx = heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = i;
    i = p;
    p = get_parent_idx(i);
  }
  mh.heap = heap;
  mh.idx_of_element = idx_map;
}
function new_min_heap(array: Node[]): MinHeap {
  let idx_map: Record<string, number> = {};
  let val_map: Record<string, number> = {};
  let heap: Node[] = array;
  let i: number = 0;
  while ((i < _len(array))) {
    let n: Node = array[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? array.length + _mochi_idx : _mochi_idx;})()];
    idx_map[(()=>{const _mochi_idx = n.name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = i;
    val_map[(()=>{const _mochi_idx = n.name; return _mochi_idx < 0 ? val_map.length + _mochi_idx : _mochi_idx;})()] = n.val;
    i = (i + 1);
  }
  let mh: MinHeap = {heap, "idx_of_element": idx_map, "heap_dict": val_map};
  let start: number = get_parent_idx((_len(array) - 1));
  while ((start >= 0)) {
    sift_down(mh, start);
    start = (start - 1);
  }
  return mh;
}
function peek(mh: MinHeap): Node {
  return mh.heap[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mh.heap.length + _mochi_idx : _mochi_idx;})()];
}
function remove_min(mh: MinHeap): Node {
  let heap: Node[] = mh.heap;
  let idx_map: Record<string, number> = mh.idx_of_element;
  let val_map: Record<string, number> = mh.heap_dict;
  let last_idx: number = (_len(heap) - 1);
  let top: Node = heap[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
  let last: Node = heap[(()=>{const _mochi_idx = last_idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
  heap[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = last;
  idx_map[(()=>{const _mochi_idx = last.name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = 0;
  heap = slice_without_last(heap);
  idx_map = remove_key(idx_map, top.name);
  val_map = remove_key(val_map, top.name);
  mh.heap = heap;
  mh.idx_of_element = idx_map;
  mh.heap_dict = val_map;
  if ((_len(heap) > 0)) {
    sift_down(mh, 0);
  }
  return top;
}
function insert(mh: MinHeap, node: Node) {
  let heap: Node[] = mh.heap;
  let idx_map: Record<string, number> = mh.idx_of_element;
  let val_map: Record<string, number> = mh.heap_dict;
  heap.push(node);
  let idx: number = (_len(heap) - 1);
  idx_map[(()=>{const _mochi_idx = node.name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()] = idx;
  val_map[(()=>{const _mochi_idx = node.name; return _mochi_idx < 0 ? val_map.length + _mochi_idx : _mochi_idx;})()] = node.val;
  mh.heap = heap;
  mh.idx_of_element = idx_map;
  mh.heap_dict = val_map;
  sift_up(mh, idx);
}
function is_empty(mh: MinHeap): boolean {
  return (_len(mh.heap) == 0);
}
function get_value(mh: MinHeap, key: string): number {
  return mh.heap_dict[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? mh.heap_dict.length + _mochi_idx : _mochi_idx;})()];
}
function decrease_key(mh: MinHeap, node: Node, new_value: number) {
  let heap: Node[] = mh.heap;
  let val_map: Record<string, number> = mh.heap_dict;
  let idx_map: Record<string, number> = mh.idx_of_element;
  let idx: number = idx_map[(()=>{const _mochi_idx = node.name; return _mochi_idx < 0 ? idx_map.length + _mochi_idx : _mochi_idx;})()];
  if (!(heap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val > new_value)) {
    _panic("newValue must be less than current value");
  }
  node.val = new_value;
  heap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()].val = new_value;
  val_map[(()=>{const _mochi_idx = node.name; return _mochi_idx < 0 ? val_map.length + _mochi_idx : _mochi_idx;})()] = new_value;
  mh.heap = heap;
  mh.heap_dict = val_map;
  sift_up(mh, idx);
}
function node_to_string(n: Node): string {
  return (((("Node(" + n.name) + ", ") + _str(n.val)) + ")");
}
let b: Node = {"name": "B", "val": 6};
let a: Node = {"name": "A", "val": 3};
let x: Node = {"name": "X", "val": 1};
let e: Node = {"name": "E", "val": 4};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r: Node
let my_min_heap: MinHeap
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r = {"name": "R", "val": -1}
my_min_heap = new_min_heap([r, b, a, x, e])
  console.log(_str("Min Heap - before decrease key"));
  for (const n of my_min_heap.heap) {
    console.log(_str(node_to_string(n)));
  }
  console.log(_str("Min Heap - After decrease key of node [B -> -17]"));
  decrease_key(my_min_heap, b, -17);
  for (const n of my_min_heap.heap) {
    console.log(_str(node_to_string(n)));
  }
  console.log(_str(_str(get_value(my_min_heap, "B"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

