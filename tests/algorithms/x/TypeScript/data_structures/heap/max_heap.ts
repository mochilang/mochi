// Generated by Mochi v0.10.61 on 2025-08-08 16:35:41 GMT+7

let heap: number[] = [0];
let size: number = 0;
function swap_up(i: number) {
  let temp: number = heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
  let idx: number = i;
  while ((Math.floor(idx / 2) > 0)) {
    if ((heap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] > heap[(()=>{const _mochi_idx = Math.trunc(Math.floor(idx / 2)); return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()])) {
      heap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = heap[(()=>{const _mochi_idx = Math.trunc(Math.floor(idx / 2)); return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
      heap[(()=>{const _mochi_idx = Math.floor(idx / 2); return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = temp;
    }
    idx = Math.floor(idx / 2);
  }
}
function insert(value: number) {
  heap.push(value);
  size = (size + 1);
  swap_up(size);
}
function swap_down(i: number) {
  let idx: number = i;
  while ((size >= (2 * idx))) {
    let bigger_child: number = ((((2 * idx) + 1) > size) ? (2 * idx) : ((heap[(()=>{const _mochi_idx = Math.trunc((2 * idx)); return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] > heap[(()=>{const _mochi_idx = Math.trunc(((2 * idx) + 1)); return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()]) ? (2 * idx) : ((2 * idx) + 1)));
    let temp: number = heap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
    if ((heap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] < heap[(()=>{const _mochi_idx = bigger_child; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()])) {
      heap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = heap[(()=>{const _mochi_idx = bigger_child; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
      heap[(()=>{const _mochi_idx = bigger_child; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = temp;
    }
    idx = bigger_child;
  }
}
function shrink() {
  let new_heap: number[] = [];
  let i: number = 0;
  while ((i <= size)) {
    new_heap.push(heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  heap = new_heap;
}
function pop(): number {
  let max_value: number = heap[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
  heap[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()] = heap[(()=>{const _mochi_idx = size; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
  size = (size - 1);
  shrink();
  swap_down(1);
  return max_value;
}
function get_list(): number[] {
  let out: number[] = [];
  let i: number = 1;
  while ((i <= size)) {
    out.push(heap[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return out;
}
function len(): number {
  return size;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  insert(6);
  insert(10);
  insert(15);
  insert(12);
  console.log(_str(pop()));
  console.log(_str(pop()));
  console.log(_str("[" + (get_list()).join(' ') + "]"));
  console.log(_str(len()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

