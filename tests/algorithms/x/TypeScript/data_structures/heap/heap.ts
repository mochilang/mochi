// Generated by Mochi v0.10.61 on 2025-08-08 16:35:27 GMT+7

function parent_index(child_idx: number): number {
  if ((child_idx > 0)) {
    return Math.floor((child_idx - 1) / 2);
  }
  return -1;
}
function left_child_idx(parent_idx: number): number {
  return ((2 * parent_idx) + 1);
}
function right_child_idx(parent_idx: number): number {
  return ((2 * parent_idx) + 2);
}
function max_heapify(h: number[], heap_size: number, index: number) {
  let largest: number = index;
  let left: number = left_child_idx(index);
  let right: number = right_child_idx(index);
  if (((left < heap_size) && (h[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] > h[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()]))) {
    largest = left;
  }
  if (((right < heap_size) && (h[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] > h[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()]))) {
    largest = right;
  }
  if ((largest != index)) {
    let temp: number = h[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()];
    h[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] = h[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()];
    h[(()=>{const _mochi_idx = largest; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] = temp;
    max_heapify(h, heap_size, largest);
  }
}
function build_max_heap(h: number[]): number {
  let heap_size: number = _len(h);
  let i: number = (Math.floor(heap_size / 2) - 1);
  while ((i >= 0)) {
    max_heapify(h, heap_size, i);
    i = (i - 1);
  }
  return heap_size;
}
function extract_max(h: number[], heap_size: number): number {
  let max_value: number = h[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()];
  h[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] = h[(()=>{const _mochi_idx = Math.trunc((heap_size - 1)); return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()];
  max_heapify(h, (heap_size - 1), 0);
  return max_value;
}
function insert(h: number[], heap_size: number, value: number): number {
  if ((heap_size < _len(h))) {
    h[(()=>{const _mochi_idx = heap_size; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] = value;
  } else {
    h.push(value);
  }
  heap_size = (heap_size + 1);
  let idx: number = Math.floor((heap_size - 1) / 2);
  while ((idx >= 0)) {
    max_heapify(h, heap_size, idx);
    idx = Math.floor((idx - 1) / 2);
  }
  return heap_size;
}
function heap_sort(h: number[], heap_size: number) {
  let size: number = heap_size;
  let j: number = (size - 1);
  while ((j > 0)) {
    let temp: number = h[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()];
    h[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] = h[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()];
    h[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()] = temp;
    size = (size - 1);
    max_heapify(h, size, 0);
    j = (j - 1);
  }
}
function heap_to_string(h: number[], heap_size: number): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < heap_size)) {
    s = (s + _str(h[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? h.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (heap_size - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
let heap: number[] = [103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let size: number
let m: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
size = build_max_heap(heap)
  console.log(_str(heap_to_string(heap, size)));
m = extract_max(heap, size)
  size = (size - 1);
  console.log(_str(_str(m)));
  console.log(_str(heap_to_string(heap, size)));
  size = insert(heap, size, 100.0);
  console.log(_str(heap_to_string(heap, size)));
  heap_sort(heap, size);
  console.log(_str(heap_to_string(heap, size)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

