// Generated by Mochi v0.10.60 on 2025-08-08 10:48:44 GMT+7

export interface Heap { arr: number[][]; pos_map: Record<number, number>; size: number; key: any }
function new_heap(key): Heap {
  return {"arr": [], "pos_map": {}, "size": 0, key};
}
function parent(i: number): number {
  if ((i > 0)) {
    return Math.trunc((i - 1) / 2);
  }
  return -1;
}
function left(i: number, size: number): number {
  let l: number = ((2 * i) + 1);
  if ((l < size)) {
    return l;
  }
  return -1;
}
function right(i: number, size: number): number {
  let r: number = ((2 * i) + 2);
  if ((r < size)) {
    return r;
  }
  return -1;
}
function swap(h: Heap, i: number, j: number) {
  let arr: number[][] = h.arr;
  let item_i: number = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let item_j: number = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let pm: Record<number, number> = h.pos_map;
  pm[(()=>{const _mochi_idx = item_i; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] = (j + 1);
  pm[(()=>{const _mochi_idx = item_j; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] = (i + 1);
  h.pos_map = pm;
  let tmp: number[] = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
  arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
  arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
  h.arr = arr;
}
function cmp(h: Heap, i: number, j: number): boolean {
  let arr: number[][] = h.arr;
  return (arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] < arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
}
function get_valid_parent(h: Heap, i: number): number {
  let vp: number = i;
  let l: number = left(i, h.size);
  if (((l != (0 - 1)) && (cmp(h, l, vp) == false))) {
    vp = l;
  }
  let r: number = right(i, h.size);
  if (((r != (0 - 1)) && (cmp(h, r, vp) == false))) {
    vp = r;
  }
  return vp;
}
function heapify_up(h: Heap, index: number) {
  let idx: number = index;
  let p: number = parent(idx);
  while (((p != (0 - 1)) && (cmp(h, idx, p) == false))) {
    swap(h, idx, p);
    idx = p;
    p = parent(p);
  }
}
function heapify_down(h: Heap, index: number) {
  let idx: number = index;
  let vp: number = get_valid_parent(h, idx);
  while ((vp != idx)) {
    swap(h, idx, vp);
    idx = vp;
    vp = get_valid_parent(h, idx);
  }
}
function update_item(h: Heap, item: number, item_value: number) {
  let pm: Record<number, number> = h.pos_map;
  if ((pm[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] == 0)) {
    return;
  }
  let index: number = (pm[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] - 1);
  let arr: number[][] = h.arr;
  arr[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = [item, h.key(item_value)];
  h.arr = arr;
  h.pos_map = pm;
  heapify_up(h, index);
  heapify_down(h, index);
}
function delete_item(h: Heap, item: number) {
  let pm: Record<number, number> = h.pos_map;
  if ((pm[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] == 0)) {
    return;
  }
  let index: number = (pm[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] - 1);
  pm[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] = 0;
  let arr: number[][] = h.arr;
  let last_index: number = (h.size - 1);
  if ((index != last_index)) {
    arr[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = last_index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    let moved: number = arr[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    pm[(()=>{const _mochi_idx = moved; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] = (index + 1);
  }
  h.size = (h.size - 1);
  h.arr = arr;
  h.pos_map = pm;
  if ((h.size > index)) {
    heapify_up(h, index);
    heapify_down(h, index);
  }
}
function insert_item(h: Heap, item: number, item_value: number) {
  let arr: number[][] = h.arr;
  let arr_len: number = _len(arr);
  if ((arr_len == h.size)) {
    arr.push([item, h.key(item_value)]);
  } else {
    arr[(()=>{const _mochi_idx = h.size; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = [item, h.key(item_value)];
  }
  let pm: Record<number, number> = h.pos_map;
  pm[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? pm.length + _mochi_idx : _mochi_idx;})()] = (h.size + 1);
  h.size = (h.size + 1);
  h.arr = arr;
  h.pos_map = pm;
  heapify_up(h, (h.size - 1));
}
function get_top(h: Heap): number[] {
  let arr: number[][] = h.arr;
  if ((h.size > 0)) {
    return arr[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
  }
  return [];
}
function extract_top(h: Heap): number[] {
  let top: number[] = get_top(h);
  if ((_len(top) > 0)) {
    delete_item(h, top[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? top.length + _mochi_idx : _mochi_idx;})()]);
  }
  return top;
}
function identity(x: number): number {
  return x;
}
function negate(x: number): number {
  return (0 - x);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let h: Heap
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
h = new_heap(identity)
  insert_item(h, 5, 34);
  insert_item(h, 6, 31);
  insert_item(h, 7, 37);
  console.log(_str(_str(get_top(h))));
  console.log(_str(_str(extract_top(h))));
  console.log(_str(_str(extract_top(h))));
  console.log(_str(_str(extract_top(h))));
  h = new_heap(negate);
  insert_item(h, 5, 34);
  insert_item(h, 6, 31);
  insert_item(h, 7, 37);
  console.log(_str(_str(get_top(h))));
  console.log(_str(_str(extract_top(h))));
  console.log(_str(_str(extract_top(h))));
  console.log(_str(_str(extract_top(h))));
  insert_item(h, 8, 45);
  insert_item(h, 9, 40);
  insert_item(h, 10, 50);
  console.log(_str(_str(get_top(h))));
  update_item(h, 10, 30);
  console.log(_str(_str(get_top(h))));
  delete_item(h, 10);
  console.log(_str(_str(get_top(h))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

