// Generated by Mochi v0.10.60 on 2025-08-08 10:45:01 GMT+7

export interface BinomialHeap { data: number[] }
export interface DeleteResult { heap: BinomialHeap; value: number }
function new_heap(): BinomialHeap {
  return {"data": []};
}
function swap(data: number[], i: number, j: number) {
  let tmp: number = data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()];
  data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] = data[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()];
  data[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] = tmp;
}
function sift_up(data: number[], idx: number) {
  let i: number = idx;
  while ((i > 0)) {
    let parent: number = Math.trunc((i - 1) / 2);
    if ((data[(()=>{const _mochi_idx = parent; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] <= data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()])) {
      break
    }
    swap(data, parent, i);
    i = parent;
  }
}
function sift_down(data: number[], idx: number) {
  let i: number = idx;
  let n: number = _len(data);
  while (true) {
    let left: number = ((2 * i) + 1);
    let right: number = (left + 1);
    let smallest: number = i;
    if (((left < n) && (data[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] < data[(()=>{const _mochi_idx = smallest; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()]))) {
      smallest = left;
    }
    if (((right < n) && (data[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()] < data[(()=>{const _mochi_idx = smallest; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()]))) {
      smallest = right;
    }
    if ((smallest == i)) {
      break
    }
    swap(data, i, smallest);
    i = smallest;
  }
}
function insert(heap: BinomialHeap, v: number): BinomialHeap {
  let d: number[] = heap.data;
  d.push(v);
  sift_up(d, (_len(d) - 1));
  return {"data": d};
}
function peek(heap: BinomialHeap): number {
  return heap.data[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? heap.data.length + _mochi_idx : _mochi_idx;})()];
}
function is_empty(heap: BinomialHeap): boolean {
  return (_len(heap.data) == 0);
}
function delete_min(heap: BinomialHeap): DeleteResult {
  let d: number[] = heap.data;
  let min = d[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? d.length + _mochi_idx : _mochi_idx;})()];
  d[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? d.length + _mochi_idx : _mochi_idx;})()] = d[(()=>{const _mochi_idx = Math.trunc((_len(d) - 1)); return _mochi_idx < 0 ? d.length + _mochi_idx : _mochi_idx;})()];
  d = d.slice(0, (_len(d) - 1));
  if ((_len(d) > 0)) {
    sift_down(d, 0);
  }
  return {"heap": {"data": d}, "value": min};
}
function main() {
  let h: BinomialHeap = new_heap();
  h = insert(h, 10);
  h = insert(h, 3);
  h = insert(h, 7);
  console.log(_str(_str(peek(h))));
  let d1: DeleteResult = delete_min(h);
  h = d1.heap;
  console.log(_str(_str(d1.value)));
  let d2: DeleteResult = delete_min(h);
  h = d2.heap;
  console.log(_str(_str(d2.value)));
  let d3: DeleteResult = delete_min(h);
  h = d3.heap;
  console.log(_str(_str(d3.value)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

