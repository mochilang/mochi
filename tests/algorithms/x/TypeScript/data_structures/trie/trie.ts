// Generated by Mochi v0.10.61 on 2025-08-08 17:04:28 GMT+7

export interface Node { children: Record<string, number>; is_leaf: boolean }
export interface Trie { nodes: Node[] }
function new_trie(): Trie {
  return {"nodes": [{"children": {}, "is_leaf": false}]};
}
function remove_key(m: Record<string, number>, k: string): Record<string, number> {
  let out: Record<string, number> = {};
  for (const key in m) {
    if ((key != k)) {
      out[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? out.length + _mochi_idx : _mochi_idx;})()] = m[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()];
    }
  }
  return out;
}
function insert(trie: Trie, word: string) {
  let nodes: Node[] = trie.nodes;
  let curr: number = 0;
  let i: number = 0;
  while ((i < _len(word))) {
    let ch: string = word[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? word.length + _mochi_idx : _mochi_idx;})()];
    let child_idx: number = -1;
    let children: Node = nodes[(()=>{const _mochi_idx = curr; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].children;
    if ((ch in children)) {
      child_idx = children[(()=>{const _mochi_idx = ch; return _mochi_idx < 0 ? children.length + _mochi_idx : _mochi_idx;})()];
    } else {
      let new_node: Node = {"children": {}, "is_leaf": false};
      nodes.push(new_node);
      child_idx = (_len(nodes) - 1);
      let new_children: Node = children;
      new_children[(()=>{const _mochi_idx = ch; return _mochi_idx < 0 ? new_children.length + _mochi_idx : _mochi_idx;})()] = child_idx;
      let node: Node = nodes[(()=>{const _mochi_idx = curr; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
      node.children = new_children;
      nodes[(()=>{const _mochi_idx = curr; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
    }
    curr = child_idx;
    i = (i + 1);
  }
  let node: Node = nodes[(()=>{const _mochi_idx = curr; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  node.is_leaf = true;
  nodes[(()=>{const _mochi_idx = curr; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
  trie.nodes = nodes;
}
function insert_many(trie: Trie, words: string[]) {
  for (const w of words) {
    insert(trie, w);
  }
}
function find(trie: Trie, word: string): boolean {
  let nodes: Node[] = trie.nodes;
  let curr: number = 0;
  let i: number = 0;
  while ((i < _len(word))) {
    let ch: string = word[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? word.length + _mochi_idx : _mochi_idx;})()];
    let children: Node = nodes[(()=>{const _mochi_idx = curr; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].children;
    if (!(ch in children)) {
      return false;
    }
    curr = children[(()=>{const _mochi_idx = ch; return _mochi_idx < 0 ? children.length + _mochi_idx : _mochi_idx;})()];
    i = (i + 1);
  }
  let node: Node = nodes[(()=>{const _mochi_idx = curr; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  return node.is_leaf;
}
function _delete(trie: Trie, word: string) {
  let nodes: Node[] = trie.nodes;
  function _delete(idx: number, pos: number): boolean {
    if ((pos == _len(word))) {
      let node: Node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
      if ((node.is_leaf == false)) {
        return false;
      }
      node.is_leaf = false;
      nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
      return (_len(node.children) == 0);
    }
    let node: Node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    let children: Record<string, number> = node.children;
    let ch: string = word[(()=>{const _mochi_idx = pos; return _mochi_idx < 0 ? word.length + _mochi_idx : _mochi_idx;})()];
    if (!(ch in children)) {
      return false;
    }
    let child_idx: number = children[(()=>{const _mochi_idx = ch; return _mochi_idx < 0 ? children.length + _mochi_idx : _mochi_idx;})()];
    let should_delete = _delete(child_idx, (pos + 1));
    node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    if (should_delete) {
      let new_children: Record<string, number> = remove_key(node.children, ch);
      node.children = new_children;
      nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
      return ((_len(new_children) == 0) && (node.is_leaf == false));
    }
    nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
    return false;
  }
  _delete(0, 0);
  trie.nodes = nodes;
}
function print_words(trie: Trie) {
  function dfs(idx: number, word: string) {
    let node: Node = trie.nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? trie.nodes.length + _mochi_idx : _mochi_idx;})()];
    if (node.is_leaf) {
      console.log(_str(word));
    }
    for (const key in node.children) {
      dfs(node.children[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? node.children.length + _mochi_idx : _mochi_idx;})()], (word + key));
    }
  }
  dfs(0, "");
}
function test_trie(): boolean {
  let words: string[] = ["banana", "bananas", "bandana", "band", "apple", "all", "beast"];
  let trie: Trie = new_trie();
  insert_many(trie, words);
  let ok: boolean = true;
  for (const w of words) {
    ok = (ok && find(trie, w));
  }
  ok = (ok && find(trie, "banana"));
  let t: boolean = find(trie, "bandanas");
  ok = (ok && (t == false));
  let t2: boolean = find(trie, "apps");
  ok = (ok && (t2 == false));
  ok = (ok && find(trie, "apple"));
  ok = (ok && find(trie, "all"));
  _delete(trie, "all");
  let t3: boolean = find(trie, "all");
  ok = (ok && (t3 == false));
  _delete(trie, "banana");
  let t4: boolean = find(trie, "banana");
  ok = (ok && (t4 == false));
  ok = (ok && find(trie, "bananas"));
  return ok;
}
function print_results(msg: string, passes: boolean) {
  if (passes) {
    console.log(_str((msg + " works!")));
  } else {
    console.log(_str((msg + " doesn't work :(")));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let trie: Trie
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
trie = new_trie()
  print_results("Testing trie functionality", test_trie());
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

