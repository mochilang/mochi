// Generated by Mochi v0.10.59 on 2025-08-06 20:40:39 GMT+7

function tail(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 1;
  while ((i < _len(xs))) {
    res.push(xs[i]);
    i = (i + 1);
  }
  return res;
}
function rotate_left(xs: number[]): number[] {
  if ((_len(xs) == 0)) {
    return xs;
  }
  let res: number[] = [];
  let i: number = 1;
  while ((i < _len(xs))) {
    res.push(xs[i]);
    i = (i + 1);
  }
  res.push(xs[Math.trunc(0)]);
  return res;
}
function permute_recursive(nums: number[]): number[][] {
  if ((_len(nums) == 0)) {
    let base: number[][] = [];
    return [...base, []];
  }
  let result: number[][] = [];
  let current: number[] = nums;
  let count: number = 0;
  while ((count < _len(nums))) {
    let n: number = current[Math.trunc(0)];
    let rest: number[] = tail(current);
    let perms: number[][] = permute_recursive(rest);
    let j: number = 0;
    while ((j < _len(perms))) {
      let perm: any[] = [...perms[j], n];
      result.push(perm);
      j = (j + 1);
    }
    current = rotate_left(current);
    count = (count + 1);
  }
  return result;
}
function swap(xs: number[], i: number, j: number): number[] {
  let res: number[] = [];
  let k: number = 0;
  while ((k < _len(xs))) {
    if ((k == i)) {
      res.push(xs[j]);
    } else {
      if ((k == j)) {
        res.push(xs[i]);
      } else {
        res.push(xs[k]);
      }
    }
    k = (k + 1);
  }
  return res;
}
function permute_backtrack_helper(nums: number[], start: number, output: number[][]): number[][] {
  if ((start == (_len(nums) - 1))) {
    return [...output, nums];
  }
  let i: number = start;
  let res: number[][] = output;
  while ((i < _len(nums))) {
    let swapped: number[] = swap(nums, start, i);
    res = permute_backtrack_helper(swapped, (start + 1), res);
    i = (i + 1);
  }
  return res;
}
function permute_backtrack(nums: number[]): number[][] {
  let output: number[][] = [];
  return permute_backtrack_helper(nums, 0, output);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(permute_recursive([1, 2, 3]))));
  console.log(_str(_str(permute_backtrack([1, 2, 3]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

