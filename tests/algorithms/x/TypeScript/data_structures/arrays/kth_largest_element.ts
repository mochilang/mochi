// Generated by Mochi v0.10.59 on 2025-08-06 20:40:32 GMT+7

function partition(arr: number[], low: number, high: number): number {
  let pivot: number = arr[high];
  let i: number = (low - 1);
  let j: number = low;
  while ((j < high)) {
    if ((arr[j] >= pivot)) {
      i = (i + 1);
      let tmp: number = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
    }
    j = (j + 1);
  }
  let k: number = (i + 1);
  let tmp: number = arr[k];
  arr[k] = arr[high];
  arr[high] = tmp;
  return k;
}
function kth_largest_element(arr: number[], position: number): number {
  if ((_len(arr) == 0)) {
    return -1;
  }
  if (((position < 1) || (position > _len(arr)))) {
    return -1;
  }
  let low: number = 0;
  let high: number = (_len(arr) - 1);
  while ((low <= high)) {
    if (((low > (_len(arr) - 1)) || (high < 0))) {
      return -1;
    }
    let pivot_index: number = partition(arr, low, high);
    if ((pivot_index == (position - 1))) {
      return arr[pivot_index];
    } else {
      if ((pivot_index > (position - 1))) {
        high = (pivot_index - 1);
      } else {
        low = (pivot_index + 1);
      }
    }
  }
  return -1;
}
let arr1: number[] = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];
let arr2: number[] = [2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(kth_largest_element(arr1, 3)));
  console.log(_str("\n"));
  console.log(_str(kth_largest_element(arr2, 1)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

