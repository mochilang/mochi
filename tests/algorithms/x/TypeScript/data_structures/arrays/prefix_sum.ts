// Generated by Mochi v0.10.59 on 2025-08-06 20:40:41 GMT+7

export interface PrefixSum { prefix_sum: number[] }
function make_prefix_sum(arr: number[]): PrefixSum {
  let prefix: number[] = [];
  let running: number = 0;
  let i: number = 0;
  while ((i < _len(arr))) {
    running = (running + arr[i]);
    prefix.push(running);
    i = (i + 1);
  }
  return {"prefix_sum": prefix};
}
function get_sum(ps: PrefixSum, start: number, end: number): number {
  let prefix: number[] = ps.prefix_sum;
  if ((_len(prefix) == 0)) {
    panic("The array is empty.");
  }
  if ((((start < 0) || (end >= _len(prefix))) || (start > end))) {
    panic("Invalid range specified.");
  }
  if ((start == 0)) {
    return prefix[end];
  }
  return (prefix[end] - prefix[Math.trunc((start - 1))]);
}
function contains_sum(ps: PrefixSum, target_sum: number): boolean {
  let prefix: number[] = ps.prefix_sum;
  let sums: number[] = [0];
  let i: number = 0;
  while ((i < _len(prefix))) {
    let sum_item: number = prefix[i];
    let j: number = 0;
    while ((j < _len(sums))) {
      if ((sums[j] == (sum_item - target_sum))) {
        return true;
      }
      j = (j + 1);
    }
    sums.push(sum_item);
    i = (i + 1);
  }
  return false;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
let ps: PrefixSum
let ps2: PrefixSum
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
ps = make_prefix_sum([1, 2, 3])
  console.log(_str(_str(get_sum(ps, 0, 2))));
  console.log(_str(_str(get_sum(ps, 1, 2))));
  console.log(_str(_str(get_sum(ps, 2, 2))));
  console.log(_str(_str(contains_sum(ps, 6))));
  console.log(_str(_str(contains_sum(ps, 5))));
  console.log(_str(_str(contains_sum(ps, 3))));
  console.log(_str(_str(contains_sum(ps, 4))));
  console.log(_str(_str(contains_sum(ps, 7))));
ps2 = make_prefix_sum([1, -2, 3])
  console.log(_str(_str(contains_sum(ps2, 2))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

