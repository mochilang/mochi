// Generated by Mochi v0.10.59 on 2025-08-06 20:40:34 GMT+7

function sortFloats(xs: number[]): number[] {
  let arr: number[] = xs;
  let i: number = 0;
  while ((i < _len(arr))) {
    let j: number = 0;
    while ((j < (_len(arr) - 1))) {
      if ((arr[j] > arr[Math.trunc((j + 1))])) {
        let t: number = arr[j];
        arr[j] = arr[Math.trunc((j + 1))];
        arr[(j + 1)] = t;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function find_median_sorted_arrays(nums1: number[], nums2: number[]): number {
  if (((_len(nums1) == 0) && (_len(nums2) == 0))) {
    panic("Both input arrays are empty.");
  }
  let merged: number[] = [];
  let i: number = 0;
  while ((i < _len(nums1))) {
    merged.push(nums1[i]);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < _len(nums2))) {
    merged.push(nums2[j]);
    j = (j + 1);
  }
  let sorted: number[] = sortFloats(merged);
  let total: number = _len(sorted);
  if (((total % 2) == 1)) {
    return sorted[Math.trunc(Math.trunc(total / 2))];
  }
  let middle1: number = sorted[Math.trunc((Math.trunc(total / 2) - 1))];
  let middle2: number = sorted[Math.trunc(Math.trunc(total / 2))];
  return ((middle1 + middle2) / 2.0);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(find_median_sorted_arrays([1.0, 3.0], [2.0])));
  console.log(_str(find_median_sorted_arrays([1.0, 2.0], [3.0, 4.0])));
  console.log(_str(find_median_sorted_arrays([0.0, 0.0], [0.0, 0.0])));
  console.log(_str(find_median_sorted_arrays([], [1.0])));
  console.log(_str(find_median_sorted_arrays([-1000.0], [1000.0])));
  console.log(_str(find_median_sorted_arrays([-1.1, -2.2], [-3.3, -4.4])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

