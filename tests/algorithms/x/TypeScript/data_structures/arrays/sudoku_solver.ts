// Generated by Mochi v0.10.59 on 2025-08-06 20:40:45 GMT+7

function string_to_grid(s: string): number[][] {
  let grid: number[][] = [];
  let i: number = 0;
  while ((i < 9)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < 9)) {
      let ch: string = (s).substring(((i * 9) + j), (((i * 9) + j) + 1));
      let val: number = 0;
      if (((ch != "0") && (ch != "."))) {
        val = Math.trunc(ch);
      }
      row.push(val);
      j = (j + 1);
    }
    grid.push(row);
    i = (i + 1);
  }
  return grid;
}
function print_grid(grid: number[][]) {
  for (let r = 0; r < 9; r++) {
    let line: string = "";
    for (let c = 0; c < 9; c++) {
      line = (line + _str(grid[r][c]));
      if ((c < 8)) {
        line = (line + " ");
      }
    }
    console.log(_str(line));
  }
}
function is_safe(grid: number[][], row: number, column: number, n: number): boolean {
  for (let i = 0; i < 9; i++) {
    if (((grid[row][i] == n) || (grid[i][column] == n))) {
      return false;
    }
  }
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if ((grid[Math.trunc(((row - (row % 3)) + i))][Math.trunc(((column - (column % 3)) + j))] == n)) {
        return false;
      }
    }
  }
  return true;
}
function find_empty(grid: number[][]): number[] {
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      if ((grid[i][j] == 0)) {
        return [i, j];
      }
    }
  }
  return [];
}
function solve(grid: number[][]): boolean {
  let loc: number[] = find_empty(grid);
  if ((_len(loc) == 0)) {
    return true;
  }
  let row: number = loc[Math.trunc(0)];
  let column: number = loc[Math.trunc(1)];
  for (let digit = 1; digit < 10; digit++) {
    if (is_safe(grid, row, column, digit)) {
      grid[row][column] = digit;
      if (solve(grid)) {
        return true;
      }
      grid[row][column] = 0;
    }
  }
  return false;
}
let puzzle: string = "003020600900305001001806400008102900700000008006708200002609500800203009005010300";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let grid: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
grid = string_to_grid(puzzle)
  console.log(_str("Original grid:"));
  print_grid(grid);
  if (solve(grid)) {
    console.log(_str("\nSolved grid:"));
    print_grid(grid);
  } else {
    console.log(_str("\nNo solution found"));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

