// Generated by Mochi v0.10.59 on 2025-08-06 20:40:29 GMT+7

function sort_triplet(a: number, b: number, c: number): number[] {
  let x: number = a;
  let y: number = b;
  let z: number = c;
  if ((x > y)) {
    let t: number = x;
    x = y;
    y = t;
  }
  if ((y > z)) {
    let t: number = y;
    y = z;
    z = t;
  }
  if ((x > y)) {
    let t: number = x;
    x = y;
    y = t;
  }
  return [x, y, z];
}
function contains_triplet(arr: number[][], target: number[]): boolean {
  for (let i = 0; i < _len(arr); i++) {
    let item: number[] = arr[i];
    let same: boolean = true;
    for (let j = 0; j < _len(target); j++) {
      if ((item[j] != target[j])) {
        same = false;
        break
      }
    }
    if (same) {
      return true;
    }
  }
  return false;
}
function contains_int(arr: number[], value: number): boolean {
  for (let i = 0; i < _len(arr); i++) {
    if ((arr[i] == value)) {
      return true;
    }
  }
  return false;
}
function find_triplets_with_0_sum(nums: number[]): number[][] {
  let n: number = _len(nums);
  let result: number[][] = [];
  for (let i = 0; i < n; i++) {
    for (let j = (i + 1); j < n; j++) {
      for (let k = (j + 1); k < n; k++) {
        let a: number = nums[i];
        let b: number = nums[j];
        let c: number = nums[k];
        if ((((a + b) + c) == 0)) {
          let trip: number[] = sort_triplet(a, b, c);
          if (!contains_triplet(result, trip)) {
            result.push(trip);
          }
        }
      }
    }
  }
  return result;
}
function find_triplets_with_0_sum_hashing(arr: number[]): number[][] {
  let target_sum: number = 0;
  let output: number[][] = [];
  for (let i = 0; i < _len(arr); i++) {
    let seen: number[] = [];
    let current_sum: number = (target_sum - arr[i]);
    for (let j = (i + 1); j < _len(arr); j++) {
      let other: number = arr[j];
      let required: number = (current_sum - other);
      if (contains_int(seen, required)) {
        let trip: number[] = sort_triplet(arr[i], other, required);
        if (!contains_triplet(output, trip)) {
          output.push(trip);
        }
      }
      seen.push(other);
    }
  }
  return output;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(find_triplets_with_0_sum([-1, 0, 1, 2, -1, -4]))));
  console.log(_str(_str(find_triplets_with_0_sum([]))));
  console.log(_str(_str(find_triplets_with_0_sum([0, 0, 0]))));
  console.log(_str(_str(find_triplets_with_0_sum([1, 2, 3, 0, -1, -2, -3]))));
  console.log(_str(_str(find_triplets_with_0_sum_hashing([-1, 0, 1, 2, -1, -4]))));
  console.log(_str(_str(find_triplets_with_0_sum_hashing([]))));
  console.log(_str(_str(find_triplets_with_0_sum_hashing([0, 0, 0]))));
  console.log(_str(_str(find_triplets_with_0_sum_hashing([1, 2, 3, 0, -1, -2, -3]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

