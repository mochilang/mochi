// Generated by Mochi v0.10.59 on 2025-08-06 20:40:44 GMT+7

function pow2(n: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 2);
    i = (i + 1);
  }
  return result;
}
function int_log2(n: number): number {
  let v: number = n;
  let res: number = 0;
  while ((v > 1)) {
    v = Math.trunc(v / 2);
    res = (res + 1);
  }
  return res;
}
function build_sparse_table(number_list: number[]): number[][] {
  if ((_len(number_list) == 0)) {
    panic("empty number list not allowed");
  }
  let length: number = _len(number_list);
  let row: number = (int_log2(length) + 1);
  let sparse_table: number[][] = [];
  let j: number = 0;
  while ((j < row)) {
    let inner: number[] = [];
    let i: number = 0;
    while ((i < length)) {
      inner.push(0);
      i = (i + 1);
    }
    sparse_table.push(inner);
    j = (j + 1);
  }
  let i: number = 0;
  while ((i < length)) {
    sparse_table[0][i] = number_list[i];
    i = (i + 1);
  }
  j = 1;
  while ((pow2(j) <= length)) {
    i = 0;
    while ((((i + pow2(j)) - 1) < length)) {
      let left: number = sparse_table[Math.trunc((j - 1))][Math.trunc((i + pow2((j - 1))))];
      let right: number = sparse_table[Math.trunc((j - 1))][i];
      if ((left < right)) {
        sparse_table[j][i] = left;
      } else {
        sparse_table[j][i] = right;
      }
      i = (i + 1);
    }
    j = (j + 1);
  }
  return sparse_table;
}
function query(sparse_table: number[][], left_bound: number, right_bound: number): number {
  if (((left_bound < 0) || (right_bound >= _len(sparse_table[Math.trunc(0)])))) {
    panic("list index out of range");
  }
  let interval: number = ((right_bound - left_bound) + 1);
  let j: number = int_log2(interval);
  let val1: number = sparse_table[j][Math.trunc(((right_bound - pow2(j)) + 1))];
  let val2: number = sparse_table[j][left_bound];
  if ((val1 < val2)) {
    return val1;
  }
  return val2;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
let st1: number[][]
let st2: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
st1 = build_sparse_table([8, 1, 0, 3, 4, 9, 3])
  console.log(_str(_str(st1)));
st2 = build_sparse_table([3, 1, 9])
  console.log(_str(_str(st2)));
  console.log(_str(_str(query(st1, 0, 4))));
  console.log(_str(_str(query(st1, 4, 6))));
  console.log(_str(_str(query(st2, 2, 2))));
  console.log(_str(_str(query(st2, 0, 1))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

