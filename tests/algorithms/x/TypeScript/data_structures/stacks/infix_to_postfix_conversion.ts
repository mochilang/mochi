// Generated by Mochi v0.10.59 on 2025-08-06 21:31:40 GMT+7

export interface PRECEDENCES { "+": number; "-": number; "*": number; "/": number; "^": number }
export interface ASSOCIATIVITIES { "+": string; "-": string; "*": string; "/": string; "^": string }
let PRECEDENCES: PRECEDENCES = {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3};
let ASSOCIATIVITIES: ASSOCIATIVITIES = {"+": "LR", "-": "LR", "*": "LR", "/": "LR", "^": "RL"};
function precedence(ch: string): number {
  if ((ch in PRECEDENCES)) {
    return PRECEDENCES[ch];
  }
  return -1;
}
function associativity(ch: string): string {
  if ((ch in ASSOCIATIVITIES)) {
    return ASSOCIATIVITIES[ch];
  }
  return "";
}
function balanced_parentheses(expr: string): boolean {
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(expr))) {
    let ch: string = (expr).substring(i, (i + 1));
    if ((ch == "(")) {
      count = (count + 1);
    }
    if ((ch == ")")) {
      count = (count - 1);
      if ((count < 0)) {
        return false;
      }
    }
    i = (i + 1);
  }
  return (count == 0);
}
function is_letter(ch: string): boolean {
  return ((("a" <= ch) && (ch <= "z")) || (("A" <= ch) && (ch <= "Z")));
}
function is_digit(ch: string): boolean {
  return (("0" <= ch) && (ch <= "9"));
}
function is_alnum(ch: string): boolean {
  return (is_letter(ch) || is_digit(ch));
}
function infix_to_postfix(expression: string): string {
  if ((balanced_parentheses(expression) == false)) {
    _panic("Mismatched parentheses");
  }
  let stack: string[] = [];
  let postfix: string[] = [];
  let i: number = 0;
  while ((i < _len(expression))) {
    let ch: string = (expression).substring(i, (i + 1));
    if (is_alnum(ch)) {
      postfix.push(ch);
    } else {
      if ((ch == "(")) {
        stack.push(ch);
      } else {
        if ((ch == ")")) {
          while (((_len(stack) > 0) && (stack[Math.trunc((_len(stack) - 1))] != "("))) {
            postfix.push(stack[Math.trunc((_len(stack) - 1))]);
            stack = stack.slice(0, (_len(stack) - 1));
          }
          if ((_len(stack) > 0)) {
            stack = stack.slice(0, (_len(stack) - 1));
          }
        } else {
          if ((ch == " ")) {
          } else {
            while (true) {
              if ((_len(stack) == 0)) {
                stack.push(ch);
                break
              }
              let cp: number = precedence(ch);
              let tp: number = precedence(stack[Math.trunc((_len(stack) - 1))]);
              if ((cp > tp)) {
                stack.push(ch);
                break
              }
              if ((cp < tp)) {
                postfix.push(stack[Math.trunc((_len(stack) - 1))]);
                stack = stack.slice(0, (_len(stack) - 1));
                continue
              }
              if ((associativity(ch) == "RL")) {
                stack.push(ch);
                break
              }
              postfix.push(stack[Math.trunc((_len(stack) - 1))]);
              stack = stack.slice(0, (_len(stack) - 1));
            }
          }
        }
      }
    }
    i = (i + 1);
  }
  while ((_len(stack) > 0)) {
    postfix.push(stack[Math.trunc((_len(stack) - 1))]);
    stack = stack.slice(0, (_len(stack) - 1));
  }
  let res: string = "";
  let j: number = 0;
  while ((j < _len(postfix))) {
    if ((j > 0)) {
      res = (res + " ");
    }
    res = (res + postfix[j]);
    j = (j + 1);
  }
  return res;
}
function main() {
  let expression: string = "a+b*(c^d-e)^(f+g*h)-i";
  console.log(_str(expression));
  console.log(_str(infix_to_postfix(expression)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

