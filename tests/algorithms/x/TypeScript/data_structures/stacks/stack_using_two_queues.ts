// Generated by Mochi v0.10.61 on 2025-08-08 17:04:15 GMT+7

export interface StackWithQueues { main_queue: number[]; temp_queue: number[] }
function make_stack(): StackWithQueues {
  return {"main_queue": [], "temp_queue": []};
}
function push(s: StackWithQueues, item: number) {
  s.temp_queue.push(item);
  while ((_len(s.main_queue) > 0)) {
    s.temp_queue.push(s.main_queue[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? s.main_queue.length + _mochi_idx : _mochi_idx;})()]);
    s.main_queue = s.main_queue.slice(1, _len(s.main_queue));
  }
  let new_main: number[] = s.temp_queue;
  s.temp_queue = s.main_queue;
  s.main_queue = new_main;
}
function pop(s: StackWithQueues): number {
  if ((_len(s.main_queue) == 0)) {
    _panic("pop from empty stack");
  }
  let item: number = s.main_queue[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? s.main_queue.length + _mochi_idx : _mochi_idx;})()];
  s.main_queue = s.main_queue.slice(1, _len(s.main_queue));
  return item;
}
function peek(s: StackWithQueues): number {
  if ((_len(s.main_queue) == 0)) {
    _panic("peek from empty stack");
  }
  return s.main_queue[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? s.main_queue.length + _mochi_idx : _mochi_idx;})()];
}
function is_empty(s: StackWithQueues): boolean {
  return (_len(s.main_queue) == 0);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let stack: StackWithQueues
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
stack = make_stack()
  push(stack, 1);
  push(stack, 2);
  push(stack, 3);
  console.log(_str(_str(peek(stack))));
  console.log(_str(_str(pop(stack))));
  console.log(_str(_str(peek(stack))));
  console.log(_str(_str(pop(stack))));
  console.log(_str(_str(pop(stack))));
  console.log(_str(_str(is_empty(stack))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

