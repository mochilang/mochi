// Generated by Mochi v0.10.61 on 2025-08-08 16:36:53 GMT+7

export interface PRIORITY { "^": number; "*": number; "/": number; "%": number; "+": number; "-": number }
let PRIORITY: PRIORITY = {"^": 3, "*": 2, "/": 2, "%": 2, "+": 1, "-": 1};
let LETTERS: string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
let DIGITS: string = "0123456789";
function is_alpha(ch: string): boolean {
  let i: number = 0;
  while ((i < _len(LETTERS))) {
    if ((LETTERS[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? LETTERS.length + _mochi_idx : _mochi_idx;})()] == ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function is_digit(ch: string): boolean {
  let i: number = 0;
  while ((i < _len(DIGITS))) {
    if ((DIGITS[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? DIGITS.length + _mochi_idx : _mochi_idx;})()] == ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function reverse_string(s: string): string {
  let out: string = "";
  let i: number = (_len(s) - 1);
  while ((i >= 0)) {
    out = (out + s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  return out;
}
function infix_to_postfix(infix: string): string {
  let stack: string[] = [];
  let post: string[] = [];
  let i: number = 0;
  while ((i < _len(infix))) {
    let x: string = infix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? infix.length + _mochi_idx : _mochi_idx;})()];
    if ((is_alpha(x) || is_digit(x))) {
      post.push(x);
    } else {
      if ((x == "(")) {
        stack.push(x);
      } else {
        if ((x == ")")) {
          if ((_len(stack) == 0)) {
            _panic("list index out of range");
          }
          while ((stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()] != "(")) {
            post.push(stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()]);
            stack = stack.slice(0, (_len(stack) - 1));
          }
          stack = stack.slice(0, (_len(stack) - 1));
        } else {
          if ((_len(stack) == 0)) {
            stack.push(x);
          } else {
            while ((((_len(stack) > 0) && (stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()] != "(")) && (PRIORITY[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? PRIORITY.length + _mochi_idx : _mochi_idx;})()] <= PRIORITY[(()=>{const _mochi_idx = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? PRIORITY.length + _mochi_idx : _mochi_idx;})()]))) {
              post.push(stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()]);
              stack = stack.slice(0, (_len(stack) - 1));
            }
            stack.push(x);
          }
        }
      }
    }
    i = (i + 1);
  }
  while ((_len(stack) > 0)) {
    if ((stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()] == "(")) {
      _panic("invalid expression");
    }
    post.push(stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()]);
    stack = stack.slice(0, (_len(stack) - 1));
  }
  let res: string = "";
  let j: number = 0;
  while ((j < _len(post))) {
    res = (res + post[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? post.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  return res;
}
function infix_to_prefix(infix: string): string {
  let reversed: string = "";
  let i: number = (_len(infix) - 1);
  while ((i >= 0)) {
    let ch: string = infix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? infix.length + _mochi_idx : _mochi_idx;})()];
    if ((ch == "(")) {
      reversed = (reversed + ")");
    } else {
      if ((ch == ")")) {
        reversed = (reversed + "(");
      } else {
        reversed = (reversed + ch);
      }
    }
    i = (i - 1);
  }
  let postfix: string = infix_to_postfix(reversed);
  let prefix: string = reverse_string(postfix);
  return prefix;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

