// Generated by Mochi v0.10.72 on 2025-08-25 00:09:54 GMT+7

function is_digit(ch: string): boolean {
  return ((((((((((ch === "0") || (ch === "1")) || (ch === "2")) || (ch === "3")) || (ch === "4")) || (ch === "5")) || (ch === "6")) || (ch === "7")) || (ch === "8")) || (ch === "9"));
}
function slice_without_last_int(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < (_len(xs) - 1))) {
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function slice_without_last_string(xs: string[]): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < (_len(xs) - 1))) {
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function dijkstras_two_stack_algorithm(equation: string): number {
  let operand_stack: number[] = [];
  let operator_stack: string[] = [];
  let idx: number = 0;
  while ((idx < _len(equation))) {
    let ch: string = (equation).substring(idx, (idx + 1));
    if (is_digit(ch)) {
      operand_stack.push(Math.trunc(ch));
    } else {
      if (((((ch === "+") || (ch === "-")) || (ch === "*")) || (ch === "/"))) {
        operator_stack.push(ch);
      } else {
        if ((ch === ")")) {
          let opr: string = operator_stack[(()=>{const _mochi_idx = Math.trunc((_len(operator_stack) - 1)); return _mochi_idx < 0 ? operator_stack.length + _mochi_idx : _mochi_idx;})()];
          operator_stack = slice_without_last_string(operator_stack);
          let num1: number = operand_stack[(()=>{const _mochi_idx = Math.trunc((_len(operand_stack) - 1)); return _mochi_idx < 0 ? operand_stack.length + _mochi_idx : _mochi_idx;})()];
          operand_stack = slice_without_last_int(operand_stack);
          let num2: number = operand_stack[(()=>{const _mochi_idx = Math.trunc((_len(operand_stack) - 1)); return _mochi_idx < 0 ? operand_stack.length + _mochi_idx : _mochi_idx;})()];
          operand_stack = slice_without_last_int(operand_stack);
          let total: bigint = ((opr === "+") ? (num2 + num1) : ((opr === "-") ? (num2 - num1) : ((opr === "*") ? (num2 * num1) : Math.trunc(num2 / num1))));
          operand_stack.push(total);
        }
      }
    }
    idx = (idx + 1);
  }
  return operand_stack[(()=>{const _mochi_idx = Math.trunc((_len(operand_stack) - 1)); return _mochi_idx < 0 ? operand_stack.length + _mochi_idx : _mochi_idx;})()];
}
let equation: string = "(5 + ((4 * 2) * (2 + 3)))";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return x.map(_str).join(',');
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(((equation + " = ") + _str(dijkstras_two_stack_algorithm(equation)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

