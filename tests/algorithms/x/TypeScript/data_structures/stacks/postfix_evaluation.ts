// Generated by Mochi v0.10.61 on 2025-08-08 17:04:10 GMT+7

function slice_without_last(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < (_len(xs) - 1))) {
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function parse_float(token: string): number {
  let sign: number = 1.0;
  let idx: number = 0;
  if ((_len(token) > 0)) {
    let first = (token).substring(0, 1);
    if ((first == "-")) {
      sign = -1.0;
      idx = 1;
    } else {
      if ((first == "+")) {
        idx = 1;
      }
    }
  }
  let int_part: number = 0;
  while (((idx < _len(token)) && ((token).substring(idx, (idx + 1)) != "."))) {
    int_part = ((int_part * 10) + Math.trunc((token).substring(idx, (idx + 1))));
    idx = (idx + 1);
  }
  let result: number = (1.0 * int_part);
  if (((idx < _len(token)) && ((token).substring(idx, (idx + 1)) == "."))) {
    idx = (idx + 1);
    let place: number = 0.1;
    while ((idx < _len(token))) {
      let digit: number = Math.trunc((token).substring(idx, (idx + 1)));
      result = (result + (place * (1.0 * digit)));
      place = (place / 10.0);
      idx = (idx + 1);
    }
  }
  return (sign * result);
}
function pow_float(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  let e: number = Math.trunc(exp);
  while ((i < e)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function apply_op(a: number, b: number, op: string): number {
  if ((op == "+")) {
    return (a + b);
  }
  if ((op == "-")) {
    return (a - b);
  }
  if ((op == "*")) {
    return (a * b);
  }
  if ((op == "/")) {
    return (a / b);
  }
  if ((op == "^")) {
    return pow_float(a, b);
  }
  return 0.0;
}
function evaluate(tokens: string[]): number {
  if ((_len(tokens) == 0)) {
    return 0.0;
  }
  let stack: number[] = [];
  for (const token of tokens) {
    if ((((((token == "+") || (token == "-")) || (token == "*")) || (token == "/")) || (token == "^"))) {
      if ((((token == "+") || (token == "-")) && (_len(stack) < 2))) {
        let b: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
        stack = slice_without_last(stack);
        if ((token == "-")) {
          stack.push((0.0 - b));
        } else {
          stack.push(b);
        }
      } else {
        let b: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
        stack = slice_without_last(stack);
        let a: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
        stack = slice_without_last(stack);
        let result: number = apply_op(a, b, token);
        stack.push(result);
      }
    } else {
      stack.push(parse_float(token));
    }
  }
  if ((_len(stack) != 1)) {
    _panic("Invalid postfix expression");
  }
  return stack[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(evaluate(["2", "1", "+", "3", "*"]))));
  console.log(_str(_str(evaluate(["4", "13", "5", "/", "+"]))));
  console.log(_str(_str(evaluate(["5", "6", "9", "*", "+"]))));
  console.log(_str(_str(evaluate(["2", "-", "3", "+"]))));
  console.log(_str(_str(evaluate([]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

