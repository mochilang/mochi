// Generated by Mochi v0.10.61 on 2025-08-08 16:37:27 GMT+7

function split_custom(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function tokenize(s: string): string[] {
  let parts: string[] = split_custom(s, " ");
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(parts))) {
    let p: string = parts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parts.length + _mochi_idx : _mochi_idx;})()];
    if ((p != "")) {
      res.push(p);
    }
    i = (i + 1);
  }
  return res;
}
function is_digit(ch: string): boolean {
  return ((ch >= "0") && (ch <= "9"));
}
function is_operand(token: string): boolean {
  if ((token == "")) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(token))) {
    let ch: string = (token).substring(i, (i + 1));
    if (!is_digit(ch)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function to_int(token: string): number {
  let res: number = 0;
  let i: number = 0;
  while ((i < _len(token))) {
    res = ((res * 10) + parseIntStr((token).substring(i, (i + 1)), 10));
    i = (i + 1);
  }
  return res;
}
function apply_op(op: string, a: number, b: number): number {
  if ((op == "+")) {
    return (a + b);
  }
  if ((op == "-")) {
    return (a - b);
  }
  if ((op == "*")) {
    return (a * b);
  }
  if ((op == "/")) {
    return (a / b);
  }
  return 0.0;
}
function evaluate(expression: string): number {
  let tokens: string[] = tokenize(expression);
  let stack: number[] = [];
  let i: number = (_len(tokens) - 1);
  while ((i >= 0)) {
    let token: string = tokens[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? tokens.length + _mochi_idx : _mochi_idx;})()];
    if ((token != "")) {
      if (is_operand(token)) {
        stack.push(to_int(token));
      } else {
        let o1: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
        let o2: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 2)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
        stack = stack.slice(0, (_len(stack) - 2));
        let res: number = apply_op(token, o1, o2);
        stack.push(res);
      }
    }
    i = (i - 1);
  }
  return stack[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
}
function eval_rec(tokens: string[], pos: number): number[] {
  let token: string = tokens[(()=>{const _mochi_idx = pos; return _mochi_idx < 0 ? tokens.length + _mochi_idx : _mochi_idx;})()];
  let next: number = (pos + 1);
  if (is_operand(token)) {
    return [to_int(token), next];
  }
  let left: number[] = eval_rec(tokens, next);
  let a: number = left[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? left.length + _mochi_idx : _mochi_idx;})()];
  let p1: number = Math.trunc(left[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? left.length + _mochi_idx : _mochi_idx;})()]);
  let right: number[] = eval_rec(tokens, p1);
  let b: number = right[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? right.length + _mochi_idx : _mochi_idx;})()];
  let p2: number = right[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? right.length + _mochi_idx : _mochi_idx;})()];
  return [apply_op(token, a, b), p2];
}
function evaluate_recursive(expression: string): number {
  let tokens: string[] = tokenize(expression);
  let res: number[] = eval_rec(tokens, 0);
  return res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
}
let test_expression: string = "+ 9 * 2 6";
let test_expression2: string = "/ * 10 2 + 4 1 ";
let test_expression3: string = "+ * 2 3 / 8 4";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(evaluate(test_expression))));
  console.log(_str(_str(evaluate(test_expression2))));
  console.log(_str(_str(evaluate_recursive(test_expression3))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

