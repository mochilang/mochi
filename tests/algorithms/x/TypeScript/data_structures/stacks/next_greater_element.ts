// Generated by Mochi v0.10.61 on 2025-08-08 17:04:09 GMT+7

function next_greatest_element_slow(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    let next: number = -1.0;
    let j: number = (i + 1);
    while ((j < _len(xs))) {
      if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] < xs[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()])) {
        next = xs[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
        break
      }
      j = (j + 1);
    }
    res.push(next);
    i = (i + 1);
  }
  return res;
}
function next_greatest_element_fast(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    let next: number = -1.0;
    let j: number = (i + 1);
    while ((j < _len(xs))) {
      let inner: number = xs[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
      if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] < inner)) {
        next = inner;
        break
      }
      j = (j + 1);
    }
    res.push(next);
    i = (i + 1);
  }
  return res;
}
function set_at_float(xs: number[], idx: number, value: number): number[] {
  let i: number = 0;
  let res: number[] = [];
  while ((i < _len(xs))) {
    if ((i == idx)) {
      res.push(value);
    } else {
      res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function next_greatest_element(xs: number[]): number[] {
  let res: number[] = [];
  let k: number = 0;
  while ((k < _len(xs))) {
    res.push(-1.0);
    k = (k + 1);
  }
  let stack: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    while (((_len(stack) > 0) && (xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] > xs[(()=>{const _mochi_idx = Math.trunc(stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]))) {
      let idx: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
      stack = stack.slice(0, (_len(stack) - 1));
      res = set_at_float(res, idx, xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    stack.push(i);
    i = (i + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let arr: number[]
let expected: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
arr = [-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0]
expected = [-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0]
  console.log(_str(_str(next_greatest_element_slow(arr))));
  console.log(_str(_str(next_greatest_element_fast(arr))));
  console.log(_str(_str(next_greatest_element(arr))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

