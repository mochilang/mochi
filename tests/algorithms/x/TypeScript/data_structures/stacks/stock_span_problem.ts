// Generated by Mochi v0.10.59 on 2025-08-06 21:31:58 GMT+7

function calculation_span(price: number[]): number[] {
  let n: number = _len(price);
  let st: number[] = [];
  let span: number[] = [];
  st.push(0);
  span.push(1);
  for (let i = 1; i < n; i++) {
    while (((_len(st) > 0) && (price[Math.trunc(st[Math.trunc((_len(st) - 1))])] <= price[i]))) {
      st = st.slice(0, (_len(st) - 1));
    }
    let s: number = ((_len(st) <= 0) ? (i + 1) : (i - st[Math.trunc((_len(st) - 1))]));
    span.push(s);
    st.push(i);
  }
  return span;
}
function print_array(arr: number[]) {
  for (let i = 0; i < _len(arr); i++) {
    console.log(_str(arr[i]));
  }
}
let price: number[] = [10, 4, 5, 90, 120, 80];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let spans: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
spans = calculation_span(price)
  print_array(spans);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

