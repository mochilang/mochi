// Generated by Mochi v0.10.61 on 2025-08-08 16:37:08 GMT+7

export interface Node { data: number; next: number; prev: number }
export interface Stack { nodes: Node[]; head: number }
function empty_stack(): Stack {
  return {"nodes": [], "head": (0 - 1)};
}
function push(stack: Stack, value: number): Stack {
  let nodes: Node[] = stack.nodes;
  let idx: number = _len(nodes);
  let new_node: Node = {"data": value, "next": stack.head, "prev": (0 - 1)};
  nodes.push(new_node);
  if ((stack.head != (0 - 1))) {
    let head_node: Node = nodes[(()=>{const _mochi_idx = Math.trunc(stack.head); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    head_node.prev = idx;
    nodes[(()=>{const _mochi_idx = stack.head; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = head_node;
  }
  return {nodes, "head": idx};
}
export interface PopResult { stack: Stack; value: number; ok: boolean }
function pop(stack: Stack): PopResult {
  if ((stack.head == (0 - 1))) {
    return {stack, "value": 0, "ok": false};
  }
  let nodes: Node[] = stack.nodes;
  let head_node: Node = nodes[(()=>{const _mochi_idx = Math.trunc(stack.head); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  let value: number = head_node.data;
  let next_idx: number = head_node.next;
  if ((next_idx != (0 - 1))) {
    let next_node: Node = nodes[(()=>{const _mochi_idx = next_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    next_node.prev = (0 - 1);
    nodes[(()=>{const _mochi_idx = next_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = next_node;
  }
  let new_stack: Stack = {nodes, "head": next_idx};
  return {"stack": new_stack, value, "ok": true};
}
export interface TopResult { value: number; ok: boolean }
function top(stack: Stack): TopResult {
  if ((stack.head == (0 - 1))) {
    return {"value": 0, "ok": false};
  }
  let node: Node = stack.nodes[(()=>{const _mochi_idx = Math.trunc(stack.head); return _mochi_idx < 0 ? stack.nodes.length + _mochi_idx : _mochi_idx;})()];
  return {"value": node.data, "ok": true};
}
function size(stack: Stack): number {
  let count: number = 0;
  let idx: number = stack.head;
  while ((idx != (0 - 1))) {
    count = (count + 1);
    let node: Node = stack.nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? stack.nodes.length + _mochi_idx : _mochi_idx;})()];
    idx = node.next;
  }
  return count;
}
function is_empty(stack: Stack): boolean {
  return (stack.head == (0 - 1));
}
function print_stack(stack: Stack) {
  console.log(_str("stack elements are:"));
  let idx: number = stack.head;
  let s: string = "";
  while ((idx != (0 - 1))) {
    let node: Node = stack.nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? stack.nodes.length + _mochi_idx : _mochi_idx;})()];
    s = ((s + _str(node.data)) + "->");
    idx = node.next;
  }
  if ((_len(s) > 0)) {
    console.log(_str(s));
  }
}
function main() {
  let stack: Stack = empty_stack();
  console.log(_str("Stack operations using Doubly LinkedList"));
  stack = push(stack, 4);
  stack = push(stack, 5);
  stack = push(stack, 6);
  stack = push(stack, 7);
  print_stack(stack);
  let t: TopResult = top(stack);
  if (t.ok) {
    console.log(_str(("Top element is " + _str(t.value))));
  } else {
    console.log(_str("Top element is None"));
  }
  console.log(_str(("Size of the stack is " + _str(size(stack)))));
  let p: PopResult = pop(stack);
  stack = p.stack;
  p = pop(stack);
  stack = p.stack;
  print_stack(stack);
  console.log(_str(("stack is empty: " + _str(is_empty(stack)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

