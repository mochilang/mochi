// Generated by Mochi v0.10.61 on 2025-08-08 16:37:10 GMT+7

export interface Node { value: string; next: number }
export interface Stack { nodes: Node[]; top: number }
function empty_stack(): Stack {
  return {"nodes": [], "top": -1};
}
function is_empty(stack: Stack): boolean {
  return (stack.top == -1);
}
function push(stack: Stack, item: string): Stack {
  let new_node: Node = {"value": item, "next": stack.top};
  let new_nodes: Node[] = stack.nodes;
  new_nodes.push(new_node);
  let new_top: number = (_len(new_nodes) - 1);
  return {"nodes": new_nodes, "top": new_top};
}
export interface PopResult { stack: Stack; value: string }
function pop(stack: Stack): PopResult {
  if ((stack.top == -1)) {
    _panic("pop from empty stack");
  }
  let node: Node = stack.nodes[(()=>{const _mochi_idx = Math.trunc(stack.top); return _mochi_idx < 0 ? stack.nodes.length + _mochi_idx : _mochi_idx;})()];
  let new_top: number = node.next;
  let new_stack: Stack = {"nodes": stack.nodes, "top": new_top};
  return {"stack": new_stack, "value": node.value};
}
function peek(stack: Stack): string {
  if ((stack.top == -1)) {
    _panic("peek from empty stack");
  }
  let node: Node = stack.nodes[(()=>{const _mochi_idx = Math.trunc(stack.top); return _mochi_idx < 0 ? stack.nodes.length + _mochi_idx : _mochi_idx;})()];
  return node.value;
}
function clear(stack: Stack): Stack {
  return {"nodes": [], "top": -1};
}
function main() {
  let stack: Stack = empty_stack();
  console.log(_str(is_empty(stack)));
  stack = push(stack, "5");
  stack = push(stack, "9");
  stack = push(stack, "python");
  console.log(_str(is_empty(stack)));
  let res: PopResult = pop(stack);
  stack = res.stack;
  console.log(_str(res.value));
  stack = push(stack, "algorithms");
  res = pop(stack);
  stack = res.stack;
  console.log(_str(res.value));
  res = pop(stack);
  stack = res.stack;
  console.log(_str(res.value));
  res = pop(stack);
  stack = res.stack;
  console.log(_str(res.value));
  console.log(_str(is_empty(stack)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

