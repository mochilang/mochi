// Generated by Mochi v0.10.60 on 2025-08-08 10:44:32 GMT+7

let node_data: number[] = [0];
let left_child: number[] = [0];
let right_child: number[] = [0];
function new_node(value: number): number {
  node_data.push(value);
  left_child.push(0);
  right_child.push(0);
  return (_len(node_data) - 1);
}
function build_tree(): number {
  let root: number = new_node(1);
  let n2: number = new_node(2);
  let n5: number = new_node(5);
  let n3: number = new_node(3);
  let n4: number = new_node(4);
  let n6: number = new_node(6);
  left_child[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? left_child.length + _mochi_idx : _mochi_idx;})()] = n2;
  right_child[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? right_child.length + _mochi_idx : _mochi_idx;})()] = n5;
  left_child[(()=>{const _mochi_idx = n2; return _mochi_idx < 0 ? left_child.length + _mochi_idx : _mochi_idx;})()] = n3;
  right_child[(()=>{const _mochi_idx = n2; return _mochi_idx < 0 ? right_child.length + _mochi_idx : _mochi_idx;})()] = n4;
  right_child[(()=>{const _mochi_idx = n5; return _mochi_idx < 0 ? right_child.length + _mochi_idx : _mochi_idx;})()] = n6;
  return root;
}
function flatten(root: number): number[] {
  if ((root == 0)) {
    return [];
  }
  let res: number[] = [node_data[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? node_data.length + _mochi_idx : _mochi_idx;})()]];
  let left_vals: number[] = flatten(left_child[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? left_child.length + _mochi_idx : _mochi_idx;})()]);
  let right_vals: number[] = flatten(right_child[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? right_child.length + _mochi_idx : _mochi_idx;})()]);
  let i: number = 0;
  while ((i < _len(left_vals))) {
    res.push(left_vals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? left_vals.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(right_vals))) {
    res.push(right_vals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? right_vals.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function display(values: number[]) {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(values))) {
    if ((i == 0)) {
      s = _str(values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()]);
    } else {
      s = ((s + " ") + _str(values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()]));
    }
    i = (i + 1);
  }
  console.log(_str(s));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let root: number
let vals: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("Flattened Linked List:"));
root = build_tree()
vals = flatten(root)
  display(vals);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

