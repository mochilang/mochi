// Generated by Mochi v0.10.60 on 2025-08-08 10:44:39 GMT+7

function zeros(n: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    res.push(0);
    i = (i + 1);
  }
  return res;
}
function update(arr: number[], idx: number, value: number) {
  arr[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = value;
}
function query(arr: number[], left: number, right: number): number {
  let result: number = 0;
  let i: number = left;
  while ((i < right)) {
    if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > result)) {
      result = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return result;
}
let arr: number[] = [0, 0, 0, 0, 0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(query(arr, 0, 5)));
  update(arr, 4, 100);
  console.log(_str(query(arr, 0, 5)));
  update(arr, 4, 0);
  update(arr, 2, 20);
  console.log(_str(query(arr, 0, 5)));
  update(arr, 4, 10);
  console.log(_str(query(arr, 2, 5)));
  console.log(_str(query(arr, 1, 5)));
  update(arr, 2, 0);
  console.log(_str(query(arr, 0, 5)));
  arr = zeros(10000);
  update(arr, 255, 30);
  console.log(_str(query(arr, 0, 10000)));
  arr = zeros(6);
  update(arr, 5, 1);
  console.log(_str(query(arr, 5, 6)));
  arr = zeros(6);
  update(arr, 0, 1000);
  console.log(_str(query(arr, 0, 1)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

