// Generated by Mochi v0.10.60 on 2025-08-08 10:44:35 GMT+7

let NONE: number = (0 - 1);
export interface Tree { data: number[]; left: number[]; right: number[] }
function inorder(tree: Tree, index: number): number[] {
  let res: number[] = [];
  if ((index == NONE)) {
    return res;
  }
  let left_idx: number = tree.left[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tree.left.length + _mochi_idx : _mochi_idx;})()];
  if ((left_idx != NONE)) {
    res = concat(res, inorder(tree, left_idx));
  }
  res.push(tree.data[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tree.data.length + _mochi_idx : _mochi_idx;})()]);
  let right_idx: number = tree.right[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tree.right.length + _mochi_idx : _mochi_idx;})()];
  if ((right_idx != NONE)) {
    res = concat(res, inorder(tree, right_idx));
  }
  return res;
}
function is_sorted(tree: Tree, index: number): boolean {
  if ((index == NONE)) {
    return true;
  }
  let left_idx: number = tree.left[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tree.left.length + _mochi_idx : _mochi_idx;})()];
  if ((left_idx != NONE)) {
    if ((tree.data[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tree.data.length + _mochi_idx : _mochi_idx;})()] < tree.data[(()=>{const _mochi_idx = left_idx; return _mochi_idx < 0 ? tree.data.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    if (!is_sorted(tree, left_idx)) {
      return false;
    }
  }
  let right_idx: number = tree.right[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tree.right.length + _mochi_idx : _mochi_idx;})()];
  if ((right_idx != NONE)) {
    if ((tree.data[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tree.data.length + _mochi_idx : _mochi_idx;})()] > tree.data[(()=>{const _mochi_idx = right_idx; return _mochi_idx < 0 ? tree.data.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    if (!is_sorted(tree, right_idx)) {
      return false;
    }
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let tree1: Tree
let tree2: Tree
let tree3: Tree
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
tree1 = {"data": [2.1, 2.0, 2.2], "left": [1, NONE, NONE], "right": [2, NONE, NONE]}
  console.log(_str(((("Tree " + _str(inorder(tree1, 0))) + " is sorted: ") + _str(is_sorted(tree1, 0)))));
tree2 = {"data": [2.1, 2.0, 2.0], "left": [1, NONE, NONE], "right": [2, NONE, NONE]}
  console.log(_str(((("Tree " + _str(inorder(tree2, 0))) + " is sorted: ") + _str(is_sorted(tree2, 0)))));
tree3 = {"data": [2.1, 2.0, 2.1], "left": [1, NONE, NONE], "right": [2, NONE, NONE]}
  console.log(_str(((("Tree " + _str(inorder(tree3, 0))) + " is sorted: ") + _str(is_sorted(tree3, 0)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

