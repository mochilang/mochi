// Generated by Mochi v0.10.60 on 2025-08-08 10:44:42 GMT+7

export interface Tree { values: number[]; left: number[]; right: number[]; root: number }
function mirror_node(left: number[], right: number[], idx: number) {
  if ((idx == -1)) {
    return;
  }
  let temp: number = left[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? left.length + _mochi_idx : _mochi_idx;})()];
  left[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? left.length + _mochi_idx : _mochi_idx;})()] = right[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? right.length + _mochi_idx : _mochi_idx;})()];
  right[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? right.length + _mochi_idx : _mochi_idx;})()] = temp;
  mirror_node(left, right, left[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? left.length + _mochi_idx : _mochi_idx;})()]);
  mirror_node(left, right, right[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? right.length + _mochi_idx : _mochi_idx;})()]);
}
function mirror(tree: Tree): Tree {
  mirror_node(tree.left, tree.right, tree.root);
  return tree;
}
function inorder(tree: Tree, idx: number): number[] {
  if ((idx == -1)) {
    return [];
  }
  let left_vals: number[] = inorder(tree, tree.left[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tree.left.length + _mochi_idx : _mochi_idx;})()]);
  let right_vals: number[] = inorder(tree, tree.right[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tree.right.length + _mochi_idx : _mochi_idx;})()]);
  return concat(concat(left_vals, [tree.values[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tree.values.length + _mochi_idx : _mochi_idx;})()]]), right_vals);
}
function make_tree_zero(): Tree {
  return {"values": [0], "left": [-1], "right": [-1], "root": 0};
}
function make_tree_seven(): Tree {
  return {"values": [1, 2, 3, 4, 5, 6, 7], "left": [1, 3, 5, -1, -1, -1, -1], "right": [2, 4, 6, -1, -1, -1, -1], "root": 0};
}
function make_tree_nine(): Tree {
  return {"values": [1, 2, 3, 4, 5, 6, 7, 8, 9], "left": [1, 3, -1, 6, -1, -1, -1, -1, -1], "right": [2, 4, 5, 7, 8, -1, -1, -1, -1], "root": 0};
}
function main() {
  let names: string[] = ["zero", "seven", "nine"];
  let trees: Tree[] = [make_tree_zero(), make_tree_seven(), make_tree_nine()];
  let i: number = 0;
  while ((i < _len(trees))) {
    let tree: Tree = trees[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? trees.length + _mochi_idx : _mochi_idx;})()];
    console.log(_str(((("      The " + names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? names.length + _mochi_idx : _mochi_idx;})()]) + " tree: ") + _str(inorder(tree, tree.root)))));
    let mirrored: Tree = mirror(tree);
    console.log(_str(((("Mirror of " + names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? names.length + _mochi_idx : _mochi_idx;})()]) + " tree: ") + _str(inorder(mirrored, mirrored.root)))));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

