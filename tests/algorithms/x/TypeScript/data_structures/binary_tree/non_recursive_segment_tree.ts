// Generated by Mochi v0.10.60 on 2025-08-08 10:44:43 GMT+7

function build(arr: number[], combine): number[] {
  let n: number = _len(arr);
  let st: number[] = [];
  let i: number = 0;
  while ((i < (2 * n))) {
    st.push(0);
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    st[(()=>{const _mochi_idx = (n + i); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    i = (i + 1);
  }
  i = (n - 1);
  while ((i > 0)) {
    st[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = combine(st[(()=>{const _mochi_idx = Math.trunc((i * 2)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()], st[(()=>{const _mochi_idx = Math.trunc(((i * 2) + 1)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  return st;
}
function update(st: number[], n: number, combine, p: number, v: number) {
  let idx: number = (p + n);
  st[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = v;
  while ((idx > 1)) {
    idx = Math.trunc(Math.trunc(idx / 2));
    st[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = combine(st[(()=>{const _mochi_idx = Math.trunc((idx * 2)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()], st[(()=>{const _mochi_idx = Math.trunc(((idx * 2) + 1)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()]);
  }
}
function query(st: number[], n: number, combine, left: number, right: number): number {
  let l: number = (left + n);
  let r: number = (right + n);
  let res: number = 0;
  let has: boolean = false;
  while ((l <= r)) {
    if (((l % 2) == 1)) {
      if (!has) {
        res = st[(()=>{const _mochi_idx = l; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()];
        has = true;
      } else {
        res = combine(res, st[(()=>{const _mochi_idx = l; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()]);
      }
      l = (l + 1);
    }
    if (((r % 2) == 0)) {
      if (!has) {
        res = st[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()];
        has = true;
      } else {
        res = combine(res, st[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()]);
      }
      r = (r - 1);
    }
    l = Math.trunc(Math.trunc(l / 2));
    r = Math.trunc(Math.trunc(r / 2));
  }
  return res;
}
function add(a: number, b: number): number {
  return (a + b);
}
function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  } else {
    return b;
  }
}
function max_int(a: number, b: number): number {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}
let arr1: number[] = [1, 2, 3];
let arr2: number[] = [3, 1, 2];
let arr3: number[] = [2, 3, 1];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let st1: number[]
let st2: number[]
let st3: number[]
let arr4: number[]
let n4: number
let st4: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
st1 = build(arr1, add)
  console.log(_str(_str(query(st1, _len(arr1), add, 0, 2))));
st2 = build(arr2, min_int)
  console.log(_str(_str(query(st2, _len(arr2), min_int, 0, 2))));
st3 = build(arr3, max_int)
  console.log(_str(_str(query(st3, _len(arr3), max_int, 0, 2))));
arr4 = [1, 5, 7, -1, 6]
n4 = _len(arr4)
st4 = build(arr4, add)
  update(st4, n4, add, 1, -1);
  update(st4, n4, add, 2, 3);
  console.log(_str(_str(query(st4, n4, add, 1, 2))));
  console.log(_str(_str(query(st4, n4, add, 1, 1))));
  update(st4, n4, add, 4, 1);
  console.log(_str(_str(query(st4, n4, add, 3, 4))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

