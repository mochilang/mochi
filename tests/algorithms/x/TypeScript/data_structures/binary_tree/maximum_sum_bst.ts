// Generated by Mochi v0.10.60 on 2025-08-08 10:44:40 GMT+7

export interface Node { val: number; left: number; right: number }
export interface Info { is_bst: boolean; min_val: number; max_val: number; total: number; best: number }
function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function max_int(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}
function solver(nodes: Node[], idx: number): Info {
  if ((idx == (0 - 1))) {
    return {"is_bst": true, "min_val": 2147483647, "max_val": -2147483648, "total": 0, "best": 0};
  }
  let node: Node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  let left_info: Info = solver(nodes, node.left);
  let right_info: Info = solver(nodes, node.right);
  let current_best: number = max_int(left_info.best, right_info.best);
  if ((((left_info.is_bst && right_info.is_bst) && (left_info.max_val < node.val)) && (node.val < right_info.min_val))) {
    let sum_val: number = ((left_info.total + right_info.total) + node.val);
    current_best = max_int(current_best, sum_val);
    return {"is_bst": true, "min_val": min_int(left_info.min_val, node.val), "max_val": max_int(right_info.max_val, node.val), "total": sum_val, "best": current_best};
  }
  return {"is_bst": false, "min_val": 0, "max_val": 0, "total": 0, "best": current_best};
}
function max_sum_bst(nodes: Node[], root: number): number {
  let info: Info = solver(nodes, root);
  return info.best;
}
function main() {
  let t1_nodes: Node[] = [{"val": 4, "left": 1, "right": (0 - 1)}, {"val": 3, "left": 2, "right": 3}, {"val": 1, "left": (0 - 1), "right": (0 - 1)}, {"val": 2, "left": (0 - 1), "right": (0 - 1)}];
  console.log(_str(max_sum_bst(t1_nodes, 0)));
  let t2_nodes: Node[] = [{"val": -4, "left": 1, "right": 2}, {"val": -2, "left": (0 - 1), "right": (0 - 1)}, {"val": -5, "left": (0 - 1), "right": (0 - 1)}];
  console.log(_str(max_sum_bst(t2_nodes, 0)));
  let t3_nodes: Node[] = [{"val": 1, "left": 1, "right": 2}, {"val": 4, "left": 3, "right": 4}, {"val": 3, "left": 5, "right": 6}, {"val": 2, "left": (0 - 1), "right": (0 - 1)}, {"val": 4, "left": (0 - 1), "right": (0 - 1)}, {"val": 2, "left": (0 - 1), "right": (0 - 1)}, {"val": 5, "left": 7, "right": 8}, {"val": 4, "left": (0 - 1), "right": (0 - 1)}, {"val": 6, "left": (0 - 1), "right": (0 - 1)}];
  console.log(_str(max_sum_bst(t3_nodes, 0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

