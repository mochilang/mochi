// Generated by Mochi v0.10.60 on 2025-08-08 10:44:34 GMT+7

export interface Node { data: number; left: number; right: number }
export interface TreeState { nodes: Node[]; root: number }
function new_node(state: TreeState, value: number): number {
  state.nodes.push({"data": value, "left": -1, "right": -1});
  return (_len(state.nodes) - 1);
}
function insert(state: TreeState, value: number) {
  if ((state.root == -1)) {
    state.root = new_node(state, value);
    return;
  }
  let current: number = state.root;
  let nodes: Node[] = state.nodes;
  while (true) {
    let node: Node = nodes[(()=>{const _mochi_idx = current; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    if ((value < node.data)) {
      if ((node.left == -1)) {
        node.left = new_node(state, value);
        nodes[(()=>{const _mochi_idx = current; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
        state.nodes = nodes;
        return;
      }
      current = node.left;
    } else {
      if ((node.right == -1)) {
        node.right = new_node(state, value);
        nodes[(()=>{const _mochi_idx = current; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
        state.nodes = nodes;
        return;
      }
      current = node.right;
    }
  }
}
function inorder(state: TreeState, idx: number): number[] {
  if ((idx == -1)) {
    return [];
  }
  let node: Node = state.nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? state.nodes.length + _mochi_idx : _mochi_idx;})()];
  let result: number[] = inorder(state, node.left);
  result.push(node.data);
  let right_part: number[] = inorder(state, node.right);
  let i: number = 0;
  while ((i < _len(right_part))) {
    result.push(right_part[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? right_part.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return result;
}
function make_tree(): TreeState {
  let state: TreeState = {"nodes": [], "root": -1};
  insert(state, 15);
  insert(state, 10);
  insert(state, 25);
  insert(state, 6);
  insert(state, 14);
  insert(state, 20);
  insert(state, 60);
  return state;
}
function main() {
  let state: TreeState = make_tree();
  console.log(_str("Printing values of binary search tree in Inorder Traversal."));
  console.log(_str("[" + (inorder(state, state.root)).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

