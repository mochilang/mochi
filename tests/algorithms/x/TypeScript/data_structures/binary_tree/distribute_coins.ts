// Generated by Mochi v0.10.59 on 2025-08-06 20:42:48 GMT+7

export interface TreeNode { data: number; left: number; right: number }
function count_nodes(nodes: TreeNode[], idx: number): number {
  if ((idx == 0)) {
    return 0;
  }
  let node: TreeNode = nodes[idx];
  return ((count_nodes(nodes, node.left) + count_nodes(nodes, node.right)) + 1);
}
function count_coins(nodes: TreeNode[], idx: number): number {
  if ((idx == 0)) {
    return 0;
  }
  let node: TreeNode = nodes[idx];
  return ((count_coins(nodes, node.left) + count_coins(nodes, node.right)) + node.data);
}
let total_moves: number = 0;
function iabs(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
function dfs(nodes: TreeNode[], idx: number): number {
  if ((idx == 0)) {
    return 0;
  }
  let node: TreeNode = nodes[idx];
  let left_excess: number = dfs(nodes, node.left);
  let right_excess: number = dfs(nodes, node.right);
  let abs_left: number = iabs(left_excess);
  let abs_right: number = iabs(right_excess);
  total_moves = ((total_moves + abs_left) + abs_right);
  return (((node.data + left_excess) + right_excess) - 1);
}
function distribute_coins(nodes: TreeNode[], root: number): number {
  if ((root == 0)) {
    return 0;
  }
  if ((count_nodes(nodes, root) != count_coins(nodes, root))) {
    panic("The nodes number should be same as the number of coins");
  }
  total_moves = 0;
  dfs(nodes, root);
  return total_moves;
}
function main() {
  let example1: TreeNode[] = [{"data": 0, "left": 0, "right": 0}, {"data": 3, "left": 2, "right": 3}, {"data": 0, "left": 0, "right": 0}, {"data": 0, "left": 0, "right": 0}];
  let example2: TreeNode[] = [{"data": 0, "left": 0, "right": 0}, {"data": 0, "left": 2, "right": 3}, {"data": 3, "left": 0, "right": 0}, {"data": 0, "left": 0, "right": 0}];
  let example3: TreeNode[] = [{"data": 0, "left": 0, "right": 0}, {"data": 0, "left": 2, "right": 3}, {"data": 0, "left": 0, "right": 0}, {"data": 3, "left": 0, "right": 0}];
  console.log(_str(distribute_coins(example1, 1)));
  console.log(_str(distribute_coins(example2, 1)));
  console.log(_str(distribute_coins(example3, 1)));
  console.log(_str(distribute_coins([{"data": 0, "left": 0, "right": 0}], 0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

