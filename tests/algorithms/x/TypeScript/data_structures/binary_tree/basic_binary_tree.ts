// Generated by Mochi v0.10.59 on 2025-08-06 20:42:36 GMT+7

export interface Node { data: number; left: number; right: number }
function inorder(nodes: Node[], index: number, acc: number[]): number[] {
  if ((index == (0 - 1))) {
    return acc;
  }
  let node: Node = nodes[index];
  let res: number[] = inorder(nodes, node.left, acc);
  res.push(node.data);
  res = inorder(nodes, node.right, res);
  return res;
}
function size(nodes: Node[], index: number): number {
  if ((index == (0 - 1))) {
    return 0;
  }
  let node: Node = nodes[index];
  return ((1 + size(nodes, node.left)) + size(nodes, node.right));
}
function depth(nodes: Node[], index: number): number {
  if ((index == (0 - 1))) {
    return 0;
  }
  let node: Node = nodes[index];
  let left_depth: number = depth(nodes, node.left);
  let right_depth: number = depth(nodes, node.right);
  if ((left_depth > right_depth)) {
    return (left_depth + 1);
  }
  return (right_depth + 1);
}
function is_full(nodes: Node[], index: number): boolean {
  if ((index == (0 - 1))) {
    return true;
  }
  let node: Node = nodes[index];
  if (((node.left == (0 - 1)) && (node.right == (0 - 1)))) {
    return true;
  }
  if (((node.left != (0 - 1)) && (node.right != (0 - 1)))) {
    return (is_full(nodes, node.left) && is_full(nodes, node.right));
  }
  return false;
}
function small_tree(): Node[] {
  let arr: Node[] = [];
  arr.push({"data": 2, "left": 1, "right": 2});
  arr.push({"data": 1, "left": (0 - 1), "right": (0 - 1)});
  arr.push({"data": 3, "left": (0 - 1), "right": (0 - 1)});
  return arr;
}
function medium_tree(): Node[] {
  let arr: Node[] = [];
  arr.push({"data": 4, "left": 1, "right": 4});
  arr.push({"data": 2, "left": 2, "right": 3});
  arr.push({"data": 1, "left": (0 - 1), "right": (0 - 1)});
  arr.push({"data": 3, "left": (0 - 1), "right": (0 - 1)});
  arr.push({"data": 5, "left": (0 - 1), "right": 5});
  arr.push({"data": 6, "left": (0 - 1), "right": 6});
  arr.push({"data": 7, "left": (0 - 1), "right": (0 - 1)});
  return arr;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let small: Node[]
let medium: Node[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
small = small_tree()
  console.log(_str(size(small, 0)));
  console.log(_str("[" + (inorder(small, 0, [])).join(' ') + "]"));
  console.log(_str(depth(small, 0)));
  console.log(_str(is_full(small, 0)));
medium = medium_tree()
  console.log(_str(size(medium, 0)));
  console.log(_str("[" + (inorder(medium, 0, [])).join(' ') + "]"));
  console.log(_str(depth(medium, 0)));
  console.log(_str(is_full(medium, 0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

