// Generated by Mochi v0.10.60 on 2025-08-08 10:44:38 GMT+7

function pow2(exp: number): number {
  let res: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    res = (res * 2);
    i = (i + 1);
  }
  return res;
}
function create_sparse(max_node: number, parent: number[][]): number[][] {
  let j: number = 1;
  while ((pow2(j) < max_node)) {
    let i: number = 1;
    while ((i <= max_node)) {
      parent[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = parent[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(parent[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      i = (i + 1);
    }
    j = (j + 1);
  }
  return parent;
}
function lowest_common_ancestor(u: number, v: number, level: number[], parent: number[][]): number {
  if ((level[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()] < level[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()])) {
    let temp: number = u;
    u = v;
    v = temp;
  }
  let i: number = 18;
  while ((i >= 0)) {
    if (((level[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()] - pow2(i)) >= level[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()])) {
      u = parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i - 1);
  }
  if ((u == v)) {
    return u;
  }
  i = 18;
  while ((i >= 0)) {
    let pu: number = parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let pv: number = parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    if (((pu != 0) && (pu != pv))) {
      u = pu;
      v = pv;
    }
    i = (i - 1);
  }
  return parent[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
function breadth_first_search(level: number[], parent: number[][], max_node: number, graph: Record<number, number[]>, root: number) {
  level[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()] = 0;
  let q: number[] = [];
  q.push(root);
  let head: number = 0;
  while ((head < _len(q))) {
    let u: number = q[(()=>{const _mochi_idx = head; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()];
    head = (head + 1);
    let adj: number[] = graph[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()];
    let j: number = 0;
    while ((j < _len(adj))) {
      let v: number = adj[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? adj.length + _mochi_idx : _mochi_idx;})()];
      if ((level[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()] == (0 - 1))) {
        level[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()] = (level[(()=>{const _mochi_idx = u; return _mochi_idx < 0 ? level.length + _mochi_idx : _mochi_idx;})()] + 1);
        parent[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? parent[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? parent.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = u;
        q.push(v);
      }
      j = (j + 1);
    }
  }
}
function main() {
  let max_node: number = 13;
  let parent: number[][] = [];
  let i: number = 0;
  while ((i < 20)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < (max_node + 10))) {
      row.push(0);
      j = (j + 1);
    }
    parent.push(row);
    i = (i + 1);
  }
  let level: number[] = [];
  i = 0;
  while ((i < (max_node + 10))) {
    level.push((0 - 1));
    i = (i + 1);
  }
  let graph: Record<number, number[]> = {};
  graph[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [2, 3, 4];
  graph[(()=>{const _mochi_idx = 2; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [5];
  graph[(()=>{const _mochi_idx = 3; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [6, 7];
  graph[(()=>{const _mochi_idx = 4; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [8];
  graph[(()=>{const _mochi_idx = 5; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [9, 10];
  graph[(()=>{const _mochi_idx = 6; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [11];
  graph[(()=>{const _mochi_idx = 7; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [];
  graph[(()=>{const _mochi_idx = 8; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [12, 13];
  graph[(()=>{const _mochi_idx = 9; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [];
  graph[(()=>{const _mochi_idx = 10; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [];
  graph[(()=>{const _mochi_idx = 11; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [];
  graph[(()=>{const _mochi_idx = 12; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [];
  graph[(()=>{const _mochi_idx = 13; return _mochi_idx < 0 ? graph.length + _mochi_idx : _mochi_idx;})()] = [];
  breadth_first_search(level, parent, max_node, graph, 1);
  parent = create_sparse(max_node, parent);
  console.log(_str(("LCA of node 1 and 3 is: " + _str(lowest_common_ancestor(1, 3, level, parent)))));
  console.log(_str(("LCA of node 5 and 6 is: " + _str(lowest_common_ancestor(5, 6, level, parent)))));
  console.log(_str(("LCA of node 7 and 11 is: " + _str(lowest_common_ancestor(7, 11, level, parent)))));
  console.log(_str(("LCA of node 6 and 7 is: " + _str(lowest_common_ancestor(6, 7, level, parent)))));
  console.log(_str(("LCA of node 4 and 12 is: " + _str(lowest_common_ancestor(4, 12, level, parent)))));
  console.log(_str(("LCA of node 8 and 8 is: " + _str(lowest_common_ancestor(8, 8, level, parent)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

