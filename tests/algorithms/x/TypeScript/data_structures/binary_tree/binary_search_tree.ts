// Generated by Mochi v0.10.59 on 2025-08-06 21:09:40 GMT+7

function create_node(value: number): any[] {
  return [value, null, null];
}
function insert(node: any[], value: number): any[] {
  if ((node == null)) {
    return create_node(value);
  }
  if ((value < node[Math.trunc(0)])) {
    node[1] = insert(node[Math.trunc(1)], value);
  } else {
    if ((value > node[Math.trunc(0)])) {
      node[2] = insert(node[Math.trunc(2)], value);
    }
  }
  return node;
}
function search(node: any[], value: number): boolean {
  if ((node == null)) {
    return false;
  }
  if ((value == node[Math.trunc(0)])) {
    return true;
  }
  if ((value < node[Math.trunc(0)])) {
    return search(node[Math.trunc(1)], value);
  }
  return search(node[Math.trunc(2)], value);
}
function inorder(node: any[], acc: number[]): number[] {
  if ((node == null)) {
    return acc;
  }
  let left_acc: number[] = inorder(node[Math.trunc(1)], acc);
  let with_node: any[] = [...left_acc, node[Math.trunc(0)]];
  return inorder(node[Math.trunc(2)], with_node);
}
function find_min(node: any[]): number {
  let current: any[] = node;
  while ((current[Math.trunc(1)] != null)) {
    current = current[Math.trunc(1)];
  }
  return current[Math.trunc(0)];
}
function find_max(node: any[]): number {
  let current: any[] = node;
  while ((current[Math.trunc(2)] != null)) {
    current = current[Math.trunc(2)];
  }
  return current[Math.trunc(0)];
}
function _delete(node: any[], value: number): any[] {
  if ((node == null)) {
    return null;
  }
  if ((value < node[Math.trunc(0)])) {
    node[1] = _delete(node[Math.trunc(1)], value);
  } else {
    if ((value > node[Math.trunc(0)])) {
      node[2] = _delete(node[Math.trunc(2)], value);
    } else {
      if ((node[Math.trunc(1)] == null)) {
        return node[Math.trunc(2)];
      }
      if ((node[Math.trunc(2)] == null)) {
        return node[Math.trunc(1)];
      }
      let min_val: number = find_min(node[Math.trunc(2)]);
      node[0] = min_val;
      node[2] = _delete(node[Math.trunc(2)], min_val);
    }
  }
  return node;
}
function main() {
  let root: any[] = null;
  let nums: number[] = [8, 3, 6, 1, 10, 14, 13, 4, 7];
  for (const v of nums) {
    root = insert(root, v);
  }
  console.log(_str(_str(inorder(root, []))));
  console.log(_str(search(root, 6)));
  console.log(_str(search(root, 20)));
  console.log(_str(find_min(root)));
  console.log(_str(find_max(root)));
  root = _delete(root, 6);
  console.log(_str(_str(inorder(root, []))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

