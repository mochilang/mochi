// Generated by Mochi v0.10.73 on 2025-08-25 22:35:28 GMT+7

function create_node(value: number): any[] {
  return [value, null, null];
}
function insert(node: any[], value: number): any[] {
  if (_equal(node, null)) {
    return create_node(value);
  }
  if ((value < node[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()])) {
    node[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] = insert(node[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], value);
  } else {
    if ((value > node[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()])) {
      node[(()=>{const _mochi_idx = 2; return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] = insert(node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], value);
    }
  }
  return node;
}
function search(node: any[], value: number): boolean {
  if (_equal(node, null)) {
    return false;
  }
  if ((value === node[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()])) {
    return true;
  }
  if ((value < node[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()])) {
    return search(node[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], value);
  }
  return search(node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], value);
}
function inorder(node: any[], acc: number[]): number[] {
  if (_equal(node, null)) {
    return acc;
  }
  let left_acc: number[] = inorder(node[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], acc);
  let with_node: any[] = [...left_acc, node[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()]];
  return inorder(node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], with_node);
}
function find_min(node: any[]): number {
  let current: any[] = node;
  while ((current[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()] !== null)) {
    current = current[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()];
  }
  return current[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()];
}
function find_max(node: any[]): number {
  let current: any[] = node;
  while ((current[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()] !== null)) {
    current = current[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()];
  }
  return current[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? current.length + _mochi_idx : _mochi_idx;})()];
}
function _delete(node: any[], value: number): any[] {
  if (_equal(node, null)) {
    return null;
  }
  if ((value < node[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()])) {
    node[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] = _delete(node[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], value);
  } else {
    if ((value > node[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()])) {
      node[(()=>{const _mochi_idx = 2; return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] = _delete(node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], value);
    } else {
      if ((node[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] === null)) {
        return node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()];
      }
      if ((node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] === null)) {
        return node[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()];
      }
      let min_val: number = find_min(node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()]);
      node[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] = min_val;
      node[(()=>{const _mochi_idx = 2; return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()] = _delete(node[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? node.length + _mochi_idx : _mochi_idx;})()], min_val);
    }
  }
  return node;
}
function main() {
  let root: any[] = null;
  let nums: number[] = [8, 3, 6, 1, 10, 14, 13, 4, 7];
  for (const v of nums) {
    root = insert(root, v);
  }
  console.log(_str(inorder(root, [])));
  console.log(_str(search(root, 6)));
  console.log(_str(search(root, 20)));
  console.log(_str(find_min(root)));
  console.log(_str(find_max(root)));
  root = _delete(root, 6);
  console.log(_str(inorder(root, [])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return x.map(_str).join(',');
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === 'number' && typeof b === 'number') {
    return Math.abs(a - b) < 1e-6;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

