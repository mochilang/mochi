// Generated by Mochi v0.10.60 on 2025-08-08 10:44:47 GMT+7

export interface Node { start: number; end: number; val: number; mid: number; left: number; right: number }
export interface BuildResult { nodes: Node[]; idx: number }
export interface SegmentTree { arr: number[]; op: number }
function combine(a: number, b: number, op: number): number {
  if ((op == 0)) {
    return (a + b);
  }
  if ((op == 1)) {
    if ((a > b)) {
      return a;
    }
    return b;
  }
  if ((a < b)) {
    return a;
  }
  return b;
}
function build_tree(nodes: Node[], arr: number[], start: number, end: number, op: number): BuildResult {
  if ((start == end)) {
    let node: Node = {start, end, "val": arr[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()], "mid": start, "left": -1, "right": -1};
    let new_nodes: any[] = [...nodes, node];
    return {"nodes": new_nodes, "idx": (_len(new_nodes) - 1)};
  }
  let mid: number = Math.trunc((start + end) / 2);
  let left_res: BuildResult = build_tree(nodes, arr, start, mid, op);
  let right_res: BuildResult = build_tree(left_res.nodes, arr, (mid + 1), end, op);
  let left_node: Node = right_res.nodes[(()=>{const _mochi_idx = Math.trunc(left_res.idx); return _mochi_idx < 0 ? right_res.nodes.length + _mochi_idx : _mochi_idx;})()];
  let right_node: Node = right_res.nodes[(()=>{const _mochi_idx = Math.trunc(right_res.idx); return _mochi_idx < 0 ? right_res.nodes.length + _mochi_idx : _mochi_idx;})()];
  let val: number = combine(left_node.val, right_node.val, op);
  let parent: Node = {start, end, val, mid, "left": left_res.idx, "right": right_res.idx};
  let new_nodes: any[] = [...right_res.nodes, parent];
  return {"nodes": new_nodes, "idx": (_len(new_nodes) - 1)};
}
function new_segment_tree(collection: number[], op: number): SegmentTree {
  return {"arr": collection, op};
}
function update(tree: SegmentTree, i: number, val: number): SegmentTree {
  let new_arr: number[] = [];
  let idx: number = 0;
  while ((idx < _len(tree.arr))) {
    if ((idx == i)) {
      new_arr.push(val);
    } else {
      new_arr.push(tree.arr[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tree.arr.length + _mochi_idx : _mochi_idx;})()]);
    }
    idx = (idx + 1);
  }
  return {"arr": new_arr, "op": tree.op};
}
function query_range(tree: SegmentTree, i: number, j: number): number {
  let result: number = tree.arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? tree.arr.length + _mochi_idx : _mochi_idx;})()];
  let idx: number = (i + 1);
  while ((idx <= j)) {
    result = combine(result, tree.arr[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tree.arr.length + _mochi_idx : _mochi_idx;})()], tree.op);
    idx = (idx + 1);
  }
  return result;
}
function traverse(tree: SegmentTree): Node[] {
  if ((_len(tree.arr) == 0)) {
    return [];
  }
  let res: BuildResult = build_tree([], tree.arr, 0, (_len(tree.arr) - 1), tree.op);
  return res.nodes;
}
function node_to_string(node: Node): string {
  return (((((("SegmentTreeNode(start=" + _str(node.start)) + ", end=") + _str(node.end)) + ", val=") + _str(node.val)) + ")");
}
function print_traverse(tree: SegmentTree) {
  let nodes: Node[] = traverse(tree);
  let i: number = 0;
  while ((i < _len(nodes))) {
    console.log(_str(node_to_string(nodes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()])));
    i = (i + 1);
  }
  console.log(_str(""));
}
let arr: number[] = [2, 1, 5, 3, 4];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (const op of [0, 1, 2]) {
    console.log(_str("**************************************************"));
    let tree: SegmentTree = new_segment_tree(arr, op);
    print_traverse(tree);
    tree = update(tree, 1, 5);
    print_traverse(tree);
    console.log(_str(query_range(tree, 3, 4)));
    console.log(_str(query_range(tree, 2, 2)));
    console.log(_str(query_range(tree, 1, 3)));
    console.log(_str(""));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

