// Generated by Mochi v0.10.60 on 2025-08-08 10:44:50 GMT+7

let NIL: number = (0 - 1);
let node_values: number[] = [];
let node_priors: number[] = [];
let node_lefts: number[] = [];
let node_rights: number[] = [];
let seed: number = 1;
function random(): number {
  seed = (((seed * 13) + 7) % 100);
  return (seed / 100.0);
}
function new_node(value: number): number {
  node_values.push(value);
  node_priors.push(random());
  node_lefts.push(NIL);
  node_rights.push(NIL);
  return (_len(node_values) - 1);
}
export interface SplitResult { left: number; right: number }
function split(root: number, value: number): SplitResult {
  if ((root == NIL)) {
    return {"left": NIL, "right": NIL};
  }
  if ((value < node_values[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? node_values.length + _mochi_idx : _mochi_idx;})()])) {
    let res = split(node_lefts[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? node_lefts.length + _mochi_idx : _mochi_idx;})()], value);
    node_lefts[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? node_lefts.length + _mochi_idx : _mochi_idx;})()] = res.right;
    return {"left": res.left, "right": root};
  }
  let res = split(node_rights[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? node_rights.length + _mochi_idx : _mochi_idx;})()], value);
  node_rights[(()=>{const _mochi_idx = root; return _mochi_idx < 0 ? node_rights.length + _mochi_idx : _mochi_idx;})()] = res.left;
  return {"left": root, "right": res.right};
}
function merge(left: number, right: number): number {
  if ((left == NIL)) {
    return right;
  }
  if ((right == NIL)) {
    return left;
  }
  if ((node_priors[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? node_priors.length + _mochi_idx : _mochi_idx;})()] < node_priors[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? node_priors.length + _mochi_idx : _mochi_idx;})()])) {
    node_rights[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? node_rights.length + _mochi_idx : _mochi_idx;})()] = merge(node_rights[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? node_rights.length + _mochi_idx : _mochi_idx;})()], right);
    return left;
  }
  node_lefts[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? node_lefts.length + _mochi_idx : _mochi_idx;})()] = merge(left, node_lefts[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? node_lefts.length + _mochi_idx : _mochi_idx;})()]);
  return right;
}
function insert(root: number, value: number): number {
  let node: number = new_node(value);
  let res = split(root, value);
  return merge(merge(res.left, node), res.right);
}
function erase(root: number, value: number): number {
  let res1 = split(root, (value - 1));
  let res2 = split(res1.right, value);
  return merge(res1.left, res2.right);
}
function inorder(i: number, acc: number[]): number[] {
  if ((i == NIL)) {
    return acc;
  }
  let left_acc: number[] = inorder(node_lefts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_lefts.length + _mochi_idx : _mochi_idx;})()], acc);
  let with_node: any[] = [...left_acc, node_values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_values.length + _mochi_idx : _mochi_idx;})()]];
  return inorder(node_rights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? node_rights.length + _mochi_idx : _mochi_idx;})()], with_node);
}
function main() {
  let root: number = NIL;
  root = insert(root, 1);
  console.log(_str(_str(inorder(root, []))));
  root = insert(root, 3);
  root = insert(root, 5);
  root = insert(root, 17);
  root = insert(root, 19);
  root = insert(root, 2);
  root = insert(root, 16);
  root = insert(root, 4);
  root = insert(root, 0);
  console.log(_str(_str(inorder(root, []))));
  root = insert(root, 4);
  root = insert(root, 4);
  root = insert(root, 4);
  console.log(_str(_str(inorder(root, []))));
  root = erase(root, 0);
  console.log(_str(_str(inorder(root, []))));
  root = erase(root, 4);
  console.log(_str(_str(inorder(root, []))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

