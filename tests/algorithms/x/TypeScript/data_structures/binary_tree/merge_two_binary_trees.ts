// Generated by Mochi v0.10.60 on 2025-08-08 10:44:41 GMT+7

export type Tree = { tag: "Leaf" } | { tag: "Node"; left: Tree; value: number; right: Tree };
function merge_two_binary_trees(t1: Tree, t2: Tree): Tree {
  return ((t1.tag === "Leaf") ? t2 : ((t1.tag === "Node") ? ((t2.tag === "Leaf") ? t1 : ((t2.tag === "Node") ? {"tag": "Node", "left": merge_two_binary_trees(t1.left, t2.left), "value": (t1.value + t2.value), "right": merge_two_binary_trees(t1.right, t2.right)} : undefined)) : undefined));
}
function is_leaf(t: Tree): boolean {
  return ((t.tag === "Leaf") ? true : (true ? false : undefined));
}
function get_left(t: Tree): Tree {
  return ((t.tag === "Node") ? t.left : (true ? {"tag": "Leaf"} : undefined));
}
function get_right(t: Tree): Tree {
  return ((t.tag === "Node") ? t.right : (true ? {"tag": "Leaf"} : undefined));
}
function get_value(t: Tree): number {
  return ((t.tag === "Node") ? t.value : (true ? 0 : undefined));
}
function print_preorder(t: Tree) {
  if (!is_leaf(t)) {
    let v: number = get_value(t);
    let l: Tree = get_left(t);
    let r: Tree = get_right(t);
    console.log(_str(v));
    print_preorder(l);
    print_preorder(r);
  }
}
let tree1: Tree = {"tag": "Node", "left": {"tag": "Node", "left": {"tag": "Node", "left": {"tag": "Leaf"}, "value": 4, "right": {"tag": "Leaf"}}, "value": 2, "right": {"tag": "Leaf"}}, "value": 1, "right": {"tag": "Node", "left": {"tag": "Leaf"}, "value": 3, "right": {"tag": "Leaf"}}};
let tree2: Tree = {"tag": "Node", "left": {"tag": "Node", "left": {"tag": "Leaf"}, "value": 4, "right": {"tag": "Node", "left": {"tag": "Leaf"}, "value": 9, "right": {"tag": "Leaf"}}}, "value": 2, "right": {"tag": "Node", "left": {"tag": "Leaf"}, "value": 6, "right": {"tag": "Node", "left": {"tag": "Leaf"}, "value": 5, "right": {"tag": "Leaf"}}}};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let merged_tree: Tree
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("Tree1 is:"));
  print_preorder(tree1);
  console.log(_str("Tree2 is:"));
  print_preorder(tree2);
merged_tree = merge_two_binary_trees(tree1, tree2)
  console.log(_str("Merged Tree is:"));
  print_preorder(merged_tree);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

