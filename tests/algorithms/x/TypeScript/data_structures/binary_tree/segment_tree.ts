// Generated by Mochi v0.10.60 on 2025-08-08 10:44:46 GMT+7

let A: number[] = [];
let N: number = 0;
let st: number[] = [];
function left_child(idx: number): number {
  return (idx * 2);
}
function right_child(idx: number): number {
  return ((idx * 2) + 1);
}
function build(idx: number, left: number, right: number) {
  if ((left == right)) {
    st[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = A[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? A.length + _mochi_idx : _mochi_idx;})()];
  } else {
    let mid: number = Math.trunc((left + right) / 2);
    build(left_child(idx), left, mid);
    build(right_child(idx), (mid + 1), right);
    let left_val: number = st[(()=>{const _mochi_idx = Math.trunc(left_child(idx)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()];
    let right_val: number = st[(()=>{const _mochi_idx = Math.trunc(right_child(idx)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()];
    st[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = ((left_val > right_val) ? left_val : right_val);
  }
}
function update_recursive(idx: number, left: number, right: number, a: number, b: number, val: number): boolean {
  if (((right < a) || (left > b))) {
    return true;
  }
  if ((left == right)) {
    st[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = val;
    return true;
  }
  let mid: number = Math.trunc((left + right) / 2);
  update_recursive(left_child(idx), left, mid, a, b, val);
  update_recursive(right_child(idx), (mid + 1), right, a, b, val);
  let left_val: number = st[(()=>{const _mochi_idx = Math.trunc(left_child(idx)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()];
  let right_val: number = st[(()=>{const _mochi_idx = Math.trunc(right_child(idx)); return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()];
  st[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()] = ((left_val > right_val) ? left_val : right_val);
  return true;
}
function update(a: number, b: number, val: number): boolean {
  return update_recursive(1, 0, (N - 1), (a - 1), (b - 1), val);
}
function query_recursive(idx: number, left: number, right: number, a: number, b: number): number {
  if (((right < a) || (left > b))) {
    return NEG_INF;
  }
  if (((left >= a) && (right <= b))) {
    return st[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? st.length + _mochi_idx : _mochi_idx;})()];
  }
  let mid: number = Math.trunc((left + right) / 2);
  let q1: number = query_recursive(left_child(idx), left, mid, a, b);
  let q2: number = query_recursive(right_child(idx), (mid + 1), right, a, b);
  return ((q1 > q2) ? q1 : q2);
}
function query(a: number, b: number): number {
  return query_recursive(1, 0, (N - 1), (a - 1), (b - 1));
}
function show_data() {
  let i: number = 0;
  let show_list: number[] = [];
  while ((i < N)) {
    show_list.push(query((i + 1), (i + 1)));
    i = (i + 1);
  }
  console.log(_str("[" + (show_list).join(' ') + "]"));
}
function main() {
  A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8];
  N = _len(A);
  let i: number = 0;
  while ((i < (4 * N))) {
    st.push(0);
    i = (i + 1);
  }
  if ((N > 0)) {
    build(1, 0, (N - 1));
  }
  console.log(_str(query(4, 6)));
  console.log(_str(query(7, 11)));
  console.log(_str(query(7, 12)));
  update(1, 3, 111);
  console.log(_str(query(1, 15)));
  update(7, 8, 235);
  show_data();
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let NEG_INF: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
NEG_INF = -1000000000
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

