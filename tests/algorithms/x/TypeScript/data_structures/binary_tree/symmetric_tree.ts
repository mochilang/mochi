// Generated by Mochi v0.10.60 on 2025-08-08 10:44:48 GMT+7

function make_symmetric_tree(): number[][] {
  return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [4, -1, -1], [3, -1, -1]];
}
function make_asymmetric_tree(): number[][] {
  return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [3, -1, -1], [4, -1, -1]];
}
function is_symmetric_tree(tree: number[][]): boolean {
  let stack: number[] = [tree[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? tree[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], tree[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? tree[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]];
  while ((_len(stack) >= 2)) {
    let left: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 2)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
    let right: number = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
    stack = stack.slice(0, (_len(stack) - 2));
    if (((left == -1) && (right == -1))) {
      continue
    }
    if (((left == -1) || (right == -1))) {
      return false;
    }
    let lnode: number[] = tree[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()];
    let rnode: number[] = tree[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? tree.length + _mochi_idx : _mochi_idx;})()];
    if ((lnode[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? lnode.length + _mochi_idx : _mochi_idx;})()] != rnode[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? rnode.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    stack.push(lnode[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? lnode.length + _mochi_idx : _mochi_idx;})()]);
    stack.push(rnode[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? rnode.length + _mochi_idx : _mochi_idx;})()]);
    stack.push(lnode[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? lnode.length + _mochi_idx : _mochi_idx;})()]);
    stack.push(rnode[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? rnode.length + _mochi_idx : _mochi_idx;})()]);
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let symmetric_tree: number[][]
let asymmetric_tree: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
symmetric_tree = make_symmetric_tree()
asymmetric_tree = make_asymmetric_tree()
  console.log(_str(_str(is_symmetric_tree(symmetric_tree))));
  console.log(_str(_str(is_symmetric_tree(asymmetric_tree))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

