// Generated by Mochi v0.10.60 on 2025-08-08 10:44:36 GMT+7

export interface Node { value: number; left: number; right: number }
function tree_sum(nodes: Node[], idx: number): number {
  if ((idx == -1)) {
    return 0;
  }
  let node: Node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  return ((node.value + tree_sum(nodes, node.left)) + tree_sum(nodes, node.right));
}
function is_sum_node(nodes: Node[], idx: number): boolean {
  let node: Node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  if (((node.left == -1) && (node.right == -1))) {
    return true;
  }
  let left_sum: number = tree_sum(nodes, node.left);
  let right_sum: number = tree_sum(nodes, node.right);
  if ((node.value != (left_sum + right_sum))) {
    return false;
  }
  let left_ok: boolean = true;
  if ((node.left != -1)) {
    left_ok = is_sum_node(nodes, node.left);
  }
  let right_ok: boolean = true;
  if ((node.right != -1)) {
    right_ok = is_sum_node(nodes, node.right);
  }
  return (left_ok && right_ok);
}
function build_a_tree(): Node[] {
  return [{"value": 11, "left": 1, "right": 2}, {"value": 2, "left": 3, "right": 4}, {"value": 29, "left": 5, "right": 6}, {"value": 1, "left": -1, "right": -1}, {"value": 7, "left": -1, "right": -1}, {"value": 15, "left": -1, "right": -1}, {"value": 40, "left": 7, "right": -1}, {"value": 35, "left": -1, "right": -1}];
}
function build_a_sum_tree(): Node[] {
  return [{"value": 26, "left": 1, "right": 2}, {"value": 10, "left": 3, "right": 4}, {"value": 3, "left": -1, "right": 5}, {"value": 4, "left": -1, "right": -1}, {"value": 6, "left": -1, "right": -1}, {"value": 3, "left": -1, "right": -1}];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

