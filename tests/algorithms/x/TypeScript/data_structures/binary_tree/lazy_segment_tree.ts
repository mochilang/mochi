// Generated by Mochi v0.10.60 on 2025-08-08 10:44:37 GMT+7

function init_int_array(n: number): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < ((4 * n) + 5))) {
    arr.push(0);
    i = (i + 1);
  }
  return arr;
}
function init_bool_array(n: number): boolean[] {
  let arr: boolean[] = [];
  let i: number = 0;
  while ((i < ((4 * n) + 5))) {
    arr.push(false);
    i = (i + 1);
  }
  return arr;
}
function left(idx: number): number {
  return (idx * 2);
}
function right(idx: number): number {
  return ((idx * 2) + 1);
}
function build(segment_tree: number[], idx: number, l: number, r: number, a: number[]) {
  if ((l == r)) {
    segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = a[(()=>{const _mochi_idx = Math.trunc((l - 1)); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
  } else {
    let mid: number = Math.trunc((l + r) / 2);
    build(segment_tree, left(idx), l, mid, a);
    build(segment_tree, right(idx), (mid + 1), r, a);
    let lv: number = segment_tree[(()=>{const _mochi_idx = Math.trunc(left(idx)); return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()];
    let rv: number = segment_tree[(()=>{const _mochi_idx = Math.trunc(right(idx)); return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()];
    if ((lv > rv)) {
      segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = lv;
    } else {
      segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = rv;
    }
  }
}
function update(segment_tree: number[], lazy: number[], flag: boolean[], idx: number, l: number, r: number, a: number, b: number, val: number) {
  if (flag[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()]) {
    segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = lazy[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()];
    flag[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = false;
    if ((l != r)) {
      lazy[(()=>{const _mochi_idx = left(idx); return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()] = lazy[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()];
      lazy[(()=>{const _mochi_idx = right(idx); return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()] = lazy[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()];
      flag[(()=>{const _mochi_idx = left(idx); return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = true;
      flag[(()=>{const _mochi_idx = right(idx); return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = true;
    }
  }
  if (((r < a) || (l > b))) {
    return;
  }
  if (((l >= a) && (r <= b))) {
    segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = val;
    if ((l != r)) {
      lazy[(()=>{const _mochi_idx = left(idx); return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()] = val;
      lazy[(()=>{const _mochi_idx = right(idx); return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()] = val;
      flag[(()=>{const _mochi_idx = left(idx); return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = true;
      flag[(()=>{const _mochi_idx = right(idx); return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = true;
    }
    return;
  }
  let mid: number = Math.trunc((l + r) / 2);
  update(segment_tree, lazy, flag, left(idx), l, mid, a, b, val);
  update(segment_tree, lazy, flag, right(idx), (mid + 1), r, a, b, val);
  let lv: number = segment_tree[(()=>{const _mochi_idx = Math.trunc(left(idx)); return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()];
  let rv: number = segment_tree[(()=>{const _mochi_idx = Math.trunc(right(idx)); return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()];
  if ((lv > rv)) {
    segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = lv;
  } else {
    segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = rv;
  }
}
function query(segment_tree: number[], lazy: number[], flag: boolean[], idx: number, l: number, r: number, a: number, b: number): number {
  if (flag[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()]) {
    segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()] = lazy[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()];
    flag[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = false;
    if ((l != r)) {
      lazy[(()=>{const _mochi_idx = left(idx); return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()] = lazy[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()];
      lazy[(()=>{const _mochi_idx = right(idx); return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()] = lazy[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? lazy.length + _mochi_idx : _mochi_idx;})()];
      flag[(()=>{const _mochi_idx = left(idx); return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = true;
      flag[(()=>{const _mochi_idx = right(idx); return _mochi_idx < 0 ? flag.length + _mochi_idx : _mochi_idx;})()] = true;
    }
  }
  if (((r < a) || (l > b))) {
    return NEG_INF;
  }
  if (((l >= a) && (r <= b))) {
    return segment_tree[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? segment_tree.length + _mochi_idx : _mochi_idx;})()];
  }
  let mid: number = Math.trunc((l + r) / 2);
  let q1: number = query(segment_tree, lazy, flag, left(idx), l, mid, a, b);
  let q2: number = query(segment_tree, lazy, flag, right(idx), (mid + 1), r, a, b);
  if ((q1 > q2)) {
    return q1;
  } else {
    return q2;
  }
}
function segtree_to_string(segment_tree: number[], lazy: number[], flag: boolean[], n: number): string {
  let res: string = "[";
  let i: number = 1;
  while ((i <= n)) {
    let v: number = query(segment_tree, lazy, flag, 1, 1, n, i, i);
    res = (res + _str(v));
    if ((i < n)) {
      res = (res + ", ");
    }
    i = (i + 1);
  }
  res = (res + "]");
  return res;
}
let n: number = 15;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let NEG_INF: number
let A: number[]
let segment_tree: number[]
let lazy: number[]
let flag: boolean[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
NEG_INF = -1000000000
A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]
segment_tree = init_int_array(n)
lazy = init_int_array(n)
flag = init_bool_array(n)
  build(segment_tree, 1, 1, n, A);
  console.log(_str(query(segment_tree, lazy, flag, 1, 1, n, 4, 6)));
  console.log(_str(query(segment_tree, lazy, flag, 1, 1, n, 7, 11)));
  console.log(_str(query(segment_tree, lazy, flag, 1, 1, n, 7, 12)));
  update(segment_tree, lazy, flag, 1, 1, n, 1, 3, 111);
  console.log(_str(query(segment_tree, lazy, flag, 1, 1, n, 1, 15)));
  update(segment_tree, lazy, flag, 1, 1, n, 7, 8, 235);
  console.log(_str(segtree_to_string(segment_tree, lazy, flag, n)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

