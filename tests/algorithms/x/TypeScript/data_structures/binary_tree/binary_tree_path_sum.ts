// Generated by Mochi v0.10.71 on 2025-08-24 15:47:50 GMT+7

export type Tree = { tag: "Empty" } | { tag: "Node"; left: Tree; value: number; right: Tree };
function dfs(node: Tree, target: number, current: number): number {
  return ((node.tag === "Empty") ? 0 : ((node.tag === "Node") ? (((_equal((current + node.value), target) ? 1 : 0) + dfs(node.left, target, (current + node.value))) + dfs(node.right, target, (current + node.value))) : undefined));
}
function path_sum(node: Tree, target: number): number {
  return ((node.tag === "Empty") ? 0 : ((node.tag === "Node") ? ((dfs(node, target, 0) + path_sum(node.left, target)) + path_sum(node.right, target)) : undefined));
}
function sample_tree_one(): Tree {
  return {tag: "Node", value: 10, left: {tag: "Node", value: 5, left: {tag: "Node", value: 3, left: {tag: "Node", value: 3, left: {tag: "Empty"}, right: {tag: "Empty"}}, right: {tag: "Node", value: -2, left: {tag: "Empty"}, right: {tag: "Empty"}}}, right: {tag: "Node", value: 2, left: {tag: "Empty"}, right: {tag: "Node", value: 1, left: {tag: "Empty"}, right: {tag: "Empty"}}}}, right: {tag: "Node", value: -3, left: {tag: "Empty"}, right: {tag: "Node", value: 11, left: {tag: "Empty"}, right: {tag: "Empty"}}}};
}
function sample_tree_two(): Tree {
  return {tag: "Node", value: 10, left: {tag: "Node", value: 5, left: {tag: "Node", value: 3, left: {tag: "Node", value: 3, left: {tag: "Empty"}, right: {tag: "Empty"}}, right: {tag: "Node", value: -2, left: {tag: "Empty"}, right: {tag: "Empty"}}}, right: {tag: "Node", value: 2, left: {tag: "Empty"}, right: {tag: "Node", value: 1, left: {tag: "Empty"}, right: {tag: "Empty"}}}}, right: {tag: "Node", value: -3, left: {tag: "Empty"}, right: {tag: "Node", value: 10, left: {tag: "Empty"}, right: {tag: "Empty"}}}};
}
function main() {
  let tree1: Tree = sample_tree_one();
  console.log(_str(path_sum(tree1, 8)));
  console.log(_str(path_sum(tree1, 7)));
  let tree2: Tree = sample_tree_two();
  console.log(_str(path_sum(tree2, 8)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === 'number' && typeof b === 'number') {
    return Math.abs(a - b) < 1e-6;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

