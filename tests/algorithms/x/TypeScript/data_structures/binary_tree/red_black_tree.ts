// Generated by Mochi v0.10.60 on 2025-08-08 10:44:45 GMT+7

let LABEL: number = 0;
let COLOR: number = 1;
let PARENT: number = 2;
let LEFT: number = 3;
let RIGHT: number = 4;
export interface RBTree { nodes: number[][]; root: number }
function make_tree(): RBTree {
  return {"nodes": [], "root": -1};
}
function rotate_left(t: RBTree, x: number): RBTree {
  let nodes: number[][] = t.nodes;
  let y: number = nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let yLeft: number = nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = yLeft;
  if ((yLeft != NEG_ONE)) {
    nodes[(()=>{const _mochi_idx = yLeft; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = yLeft; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = x;
  }
  let xParent: number = nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = xParent;
  if ((xParent == NEG_ONE)) {
    t.root = y;
  } else {
    if ((x == nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y;
    } else {
      nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y;
    }
  }
  nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = x;
  nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y;
  t.nodes = nodes;
  return t;
}
function rotate_right(t: RBTree, x: number): RBTree {
  let nodes: number[][] = t.nodes;
  let y: number = nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let yRight: number = nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = yRight;
  if ((yRight != NEG_ONE)) {
    nodes[(()=>{const _mochi_idx = yRight; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = yRight; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = x;
  }
  let xParent: number = nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = xParent;
  if ((xParent == NEG_ONE)) {
    t.root = y;
  } else {
    if ((x == nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y;
    } else {
      nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = xParent; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y;
    }
  }
  nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = x;
  nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y;
  t.nodes = nodes;
  return t;
}
function insert_fix(t: RBTree, z: number): RBTree {
  let nodes: number[][] = t.nodes;
  while (((z != t.root) && (nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1))) {
    if ((nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      let y: number = nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if (((y != NEG_ONE) && (nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1))) {
        nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
        nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
        let gp: number = nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
        z = gp;
      } else {
        if ((z == nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
          z = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
          t.nodes = nodes;
          t = rotate_left(t, z);
          nodes = t.nodes;
        }
        nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
        let gp: number = nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
        t.nodes = nodes;
        t = rotate_right(t, gp);
        nodes = t.nodes;
      }
    } else {
      let y: number = nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if (((y != NEG_ONE) && (nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1))) {
        nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
        nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
        let gp: number = nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
        z = gp;
      } else {
        if ((z == nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
          z = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
          t.nodes = nodes;
          t = rotate_right(t, z);
          nodes = t.nodes;
        }
        nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
        let gp: number = nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = Math.trunc(nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = z; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = gp; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
        t.nodes = nodes;
        t = rotate_left(t, gp);
        nodes = t.nodes;
      }
    }
  }
  nodes = t.nodes;
  nodes[(()=>{const _mochi_idx = t.root; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = COLOR; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = t.root; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
  t.nodes = nodes;
  return t;
}
function tree_insert(t: RBTree, v: number): RBTree {
  let nodes: number[][] = t.nodes;
  let node: number[] = [v, 1, -1, -1, -1];
  nodes.push(node);
  let idx: number = (_len(nodes) - 1);
  let y: number = NEG_ONE;
  let x: number = t.root;
  while ((x != NEG_ONE)) {
    y = x;
    if ((v < nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LABEL; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      x = nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    } else {
      x = nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    }
  }
  nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = PARENT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y;
  if ((y == NEG_ONE)) {
    t.root = idx;
  } else {
    if ((v < nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LABEL; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = idx;
    } else {
      nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? nodes[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = idx;
    }
  }
  t.nodes = nodes;
  t = insert_fix(t, idx);
  return t;
}
function inorder(t: RBTree, x: number, acc: number[]): number[] {
  if ((x == NEG_ONE)) {
    return acc;
  }
  acc = inorder(t, t.nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? t.nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LEFT; return _mochi_idx < 0 ? t.nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? t.nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], acc);
  acc.push(t.nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? t.nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = LABEL; return _mochi_idx < 0 ? t.nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? t.nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
  acc = inorder(t, t.nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? t.nodes.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = RIGHT; return _mochi_idx < 0 ? t.nodes[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? t.nodes.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], acc);
  return acc;
}
function main() {
  let t: RBTree = make_tree();
  let values = [10, 20, 30, 15, 25, 5, 1];
  let i: number = 0;
  while ((i < _len(values))) {
    t = tree_insert(t, values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let res: number[] = [];
  res = inorder(t, t.root, res);
  console.log(_str(_str(res)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let NEG_ONE: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
NEG_ONE = -1
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

