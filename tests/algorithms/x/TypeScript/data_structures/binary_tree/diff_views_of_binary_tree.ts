// Generated by Mochi v0.10.59 on 2025-08-06 20:42:46 GMT+7

export interface Tree { values: number[]; lefts: number[]; rights: number[]; root: number }
let NIL: number = (0 - 1);
function make_tree(): Tree {
  return {"values": [3, 9, 20, 15, 7], "lefts": [1, NIL, 3, NIL, NIL], "rights": [2, NIL, 4, NIL, NIL], "root": 0};
}
function index_of(xs: number[], x: number): number {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == x)) {
      return i;
    }
    i = (i + 1);
  }
  return NIL;
}
function sort_pairs(hds: number[], vals: number[]) {
  let i: number = 0;
  while ((i < _len(hds))) {
    let j: number = i;
    while (((j > 0) && (hds[Math.trunc((j - 1))] > hds[j]))) {
      let hd_tmp: number = hds[Math.trunc((j - 1))];
      hds[(j - 1)] = hds[j];
      hds[j] = hd_tmp;
      let val_tmp: number = vals[Math.trunc((j - 1))];
      vals[(j - 1)] = vals[j];
      vals[j] = val_tmp;
      j = (j - 1);
    }
    i = (i + 1);
  }
}
function right_view(t: Tree): number[] {
  let res: number[] = [];
  let queue: number[] = [t.root];
  while ((_len(queue) > 0)) {
    let size: number = _len(queue);
    let i: number = 0;
    while ((i < size)) {
      let idx: number = queue[i];
      if ((t.lefts[idx] != NIL)) {
        queue.push(t.lefts[idx]);
      }
      if ((t.rights[idx] != NIL)) {
        queue.push(t.rights[idx]);
      }
      i = (i + 1);
    }
    res.push(t.values[Math.trunc(queue[Math.trunc((size - 1))])]);
    queue = queue.slice(size, _len(queue));
  }
  return res;
}
function left_view(t: Tree): number[] {
  let res: number[] = [];
  let queue: number[] = [t.root];
  while ((_len(queue) > 0)) {
    let size: number = _len(queue);
    let i: number = 0;
    while ((i < size)) {
      let idx: number = queue[i];
      if ((t.lefts[idx] != NIL)) {
        queue.push(t.lefts[idx]);
      }
      if ((t.rights[idx] != NIL)) {
        queue.push(t.rights[idx]);
      }
      i = (i + 1);
    }
    res.push(t.values[Math.trunc(queue[Math.trunc(0)])]);
    queue = queue.slice(size, _len(queue));
  }
  return res;
}
export interface Pair { idx: number; hd: number }
function top_view(t: Tree): number[] {
  let hds: number[] = [];
  let vals: number[] = [];
  let queue_idx: number[] = [t.root];
  let queue_hd: number[] = [0];
  while ((_len(queue_idx) > 0)) {
    let idx: number = queue_idx[Math.trunc(0)];
    queue_idx = queue_idx.slice(1, _len(queue_idx));
    let hd: number = queue_hd[Math.trunc(0)];
    queue_hd = queue_hd.slice(1, _len(queue_hd));
    if ((index_of(hds, hd) == NIL)) {
      hds.push(hd);
      vals.push(t.values[idx]);
    }
    if ((t.lefts[idx] != NIL)) {
      queue_idx.push(t.lefts[idx]);
      queue_hd.push((hd - 1));
    }
    if ((t.rights[idx] != NIL)) {
      queue_idx.push(t.rights[idx]);
      queue_hd.push((hd + 1));
    }
  }
  sort_pairs(hds, vals);
  return vals;
}
function bottom_view(t: Tree): number[] {
  let hds: number[] = [];
  let vals: number[] = [];
  let queue_idx: number[] = [t.root];
  let queue_hd: number[] = [0];
  while ((_len(queue_idx) > 0)) {
    let idx: number = queue_idx[Math.trunc(0)];
    queue_idx = queue_idx.slice(1, _len(queue_idx));
    let hd: number = queue_hd[Math.trunc(0)];
    queue_hd = queue_hd.slice(1, _len(queue_hd));
    let pos: number = index_of(hds, hd);
    if ((pos == NIL)) {
      hds.push(hd);
      vals.push(t.values[idx]);
    } else {
      vals[pos] = t.values[idx];
    }
    if ((t.lefts[idx] != NIL)) {
      queue_idx.push(t.lefts[idx]);
      queue_hd.push((hd - 1));
    }
    if ((t.rights[idx] != NIL)) {
      queue_idx.push(t.rights[idx]);
      queue_hd.push((hd + 1));
    }
  }
  sort_pairs(hds, vals);
  return vals;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let tree: Tree
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
tree = make_tree()
  console.log(_str("[" + (right_view(tree)).join(' ') + "]"));
  console.log(_str("[" + (left_view(tree)).join(' ') + "]"));
  console.log(_str("[" + (top_view(tree)).join(' ') + "]"));
  console.log(_str("[" + (bottom_view(tree)).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

