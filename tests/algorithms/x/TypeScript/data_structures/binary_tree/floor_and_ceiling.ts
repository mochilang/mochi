// Generated by Mochi v0.10.60 on 2025-08-08 10:44:33 GMT+7

export interface Node { key: number; left: number; right: number }
function inorder(nodes: Node[], idx: number): number[] {
  if ((idx == -1)) {
    return [];
  }
  let node: Node = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  let result: number[] = inorder(nodes, node.left);
  result.push(node.key);
  result = concat(result, inorder(nodes, node.right));
  return result;
}
function floor_ceiling(nodes: Node[], idx: number, key: number): number[] {
  let floor_val = null;
  let ceiling_val = null;
  let current: number = idx;
  while ((current != -1)) {
    let node: Node = nodes[(()=>{const _mochi_idx = current; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    if ((node.key == key)) {
      floor_val = node.key;
      ceiling_val = node.key;
      break
    }
    if ((key < node.key)) {
      ceiling_val = node.key;
      current = node.left;
    } else {
      floor_val = node.key;
      current = node.right;
    }
  }
  return [floor_val, ceiling_val];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let tree: Node[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
tree = [{"key": 10, "left": 1, "right": 2}, {"key": 5, "left": 3, "right": 4}, {"key": 20, "left": 5, "right": 6}, {"key": 3, "left": -1, "right": -1}, {"key": 7, "left": -1, "right": -1}, {"key": 15, "left": -1, "right": -1}, {"key": 25, "left": -1, "right": -1}]
  console.log(_str(_str(inorder(tree, 0))));
  console.log(_str(_str(floor_ceiling(tree, 0, 8))));
  console.log(_str(_str(floor_ceiling(tree, 0, 14))));
  console.log(_str(_str(floor_ceiling(tree, 0, -1))));
  console.log(_str(_str(floor_ceiling(tree, 0, 30))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

