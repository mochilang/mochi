// Generated by Mochi v0.10.60 on 2025-08-08 10:44:48 GMT+7

export type TreeNode = { tag: "Empty" } | { tag: "Node"; left: TreeNode; value: number; right: TreeNode };
export interface BuildResult { node: TreeNode; next: number }
function digit(ch: string): number {
  let digits: string = "0123456789";
  let i: number = 0;
  while ((i < _len(digits))) {
    if (((digits).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return 0;
}
function to_int(s: string): number {
  let i: number = 0;
  let sign: number = 1;
  if (((_len(s) > 0) && ((s).substring(0, 1) == "-"))) {
    sign = -1;
    i = 1;
  }
  let num: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    num = ((num * 10) + digit(ch));
    i = (i + 1);
  }
  return (sign * num);
}
function split(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function serialize(node: TreeNode): string {
  return ((node.tag === "Empty") ? "null" : ((node.tag === "Node") ? ((((_str(node.value) + ",") + serialize(node.left)) + ",") + serialize(node.right)) : undefined));
}
function build(nodes: string[], idx: number): BuildResult {
  let value: string = nodes[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  if ((value == "null")) {
    return {"node": {"tag": "Empty"}, "next": (idx + 1)};
  }
  let left_res: BuildResult = build(nodes, (idx + 1));
  let right_res: BuildResult = build(nodes, left_res.next);
  let node: TreeNode = {"tag": "Node", "left": left_res.node, "value": to_int(value), "right": right_res.node};
  return {node, "next": right_res.next};
}
function deserialize(data: string): TreeNode {
  let nodes: string[] = split(data, ",");
  let res: BuildResult = build(nodes, 0);
  return res.node;
}
function five_tree(): TreeNode {
  let left_child: TreeNode = {"tag": "Node", "value": 2, "left": {"tag": "Empty"}, "right": {"tag": "Empty"}};
  let right_left: TreeNode = {"tag": "Node", "value": 4, "left": {"tag": "Empty"}, "right": {"tag": "Empty"}};
  let right_right: TreeNode = {"tag": "Node", "value": 5, "left": {"tag": "Empty"}, "right": {"tag": "Empty"}};
  let right_child: TreeNode = {"tag": "Node", "value": 3, "left": right_left, "right": right_right};
  return {"tag": "Node", "value": 1, "left": left_child, "right": right_child};
}
function main() {
  let root: TreeNode = five_tree();
  let serial: string = serialize(root);
  console.log(_str(serial));
  let rebuilt: TreeNode = deserialize(serial);
  let serial2: string = serialize(rebuilt);
  console.log(_str(serial2));
  console.log(_str((serial == serial2)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

