// Generated by Mochi v0.10.60 on 2025-08-08 10:44:44 GMT+7

function binomial_coefficient(n: number, k: number): number {
  let result: number = 1;
  let kk: number = k;
  if ((k > (n - k))) {
    kk = (n - k);
  }
  for (let i = 0; i < kk; i++) {
    result = (result * (n - i));
    result = Math.trunc(result / (i + 1));
  }
  return result;
}
function catalan_number(node_count: number): number {
  return Math.trunc(binomial_coefficient((2 * node_count), node_count) / (node_count + 1));
}
function factorial(n: number): number {
  if ((n < 0)) {
    console.log(_str("factorial() not defined for negative values"));
    return 0;
  }
  let result: number = 1;
  for (let i = 1; i < (n + 1); i++) {
    result = (result * i);
  }
  return result;
}
function binary_tree_count(node_count: number): number {
  return (catalan_number(node_count) * factorial(node_count));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let input_str: string
let node_count: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("Enter the number of nodes:"));
input_str = _input()
node_count = Math.trunc(input_str)
  if ((node_count <= 0)) {
    console.log(_str("We need some nodes to work with."));
  } else {
    let bst: number = catalan_number(node_count);
    let bt: number = binary_tree_count(node_count);
    console.log(_str("Given") + " " + _str(node_count) + " " + _str("nodes, there are") + " " + _str(bt) + " " + _str("binary trees and") + " " + _str(bst) + " " + _str("binary search trees."));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

