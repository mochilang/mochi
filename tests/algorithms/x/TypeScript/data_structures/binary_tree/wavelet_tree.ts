// Generated by Mochi v0.10.60 on 2025-08-08 10:44:50 GMT+7

export interface Node { minn: number; maxx: number; map_left: number[]; left: number; right: number }
let nodes: Node[] = [];
function make_list(length: number, value: number): number[] {
  let lst: number[] = [];
  let i: number = 0;
  while ((i < length)) {
    lst.push(value);
    i = (i + 1);
  }
  return lst;
}
function min_list(arr: number[]): number {
  let m: number = arr[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
  let i: number = 1;
  while ((i < _len(arr))) {
    if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < m)) {
      m = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return m;
}
function max_list(arr: number[]): number {
  let m: number = arr[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
  let i: number = 1;
  while ((i < _len(arr))) {
    if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > m)) {
      m = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return m;
}
function build_tree(arr: number[]): number {
  let n: Node = {"minn": min_list(arr), "maxx": max_list(arr), "map_left": make_list(_len(arr), 0), "left": -1, "right": -1};
  if ((n.minn == n.maxx)) {
    nodes.push(n);
    return (_len(nodes) - 1);
  }
  let pivot: number = Math.trunc((n.minn + n.maxx) / 2);
  let left_arr: number[] = [];
  let right_arr: number[] = [];
  let i: number = 0;
  while ((i < _len(arr))) {
    let num = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    if ((num <= pivot)) {
      left_arr.push(num);
    } else {
      right_arr.push(num);
    }
    let ml: number[] = n.map_left;
    ml[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ml.length + _mochi_idx : _mochi_idx;})()] = _len(left_arr);
    n.map_left = ml;
    i = (i + 1);
  }
  if ((_len(left_arr) > 0)) {
    n.left = build_tree(left_arr);
  }
  if ((_len(right_arr) > 0)) {
    n.right = build_tree(right_arr);
  }
  nodes.push(n);
  return (_len(nodes) - 1);
}
function rank_till_index(node_idx: number, num: number, index: number): number {
  if (((index < 0) || (node_idx < 0))) {
    return 0;
  }
  let node: Node = nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  if ((node.minn == node.maxx)) {
    if ((node.minn == num)) {
      return (index + 1);
    } else {
      return 0;
    }
  }
  let pivot: number = Math.trunc((node.minn + node.maxx) / 2);
  if ((num <= pivot)) {
    return rank_till_index(node.left, num, (node.map_left[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()] - 1));
  } else {
    return rank_till_index(node.right, num, (index - node.map_left[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()]));
  }
}
function rank(node_idx: number, num: number, start: number, end: number): number {
  if ((start > end)) {
    return 0;
  }
  let rank_till_end = rank_till_index(node_idx, num, end);
  let rank_before_start = rank_till_index(node_idx, num, (start - 1));
  return (rank_till_end - rank_before_start);
}
function quantile(node_idx: number, index: number, start: number, end: number): number {
  if ((((index > (end - start)) || (start > end)) || (node_idx < 0))) {
    return -1;
  }
  let node: Node = nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  if ((node.minn == node.maxx)) {
    return node.minn;
  }
  let left_start: number = ((start == 0) ? 0 : node.map_left[(()=>{const _mochi_idx = Math.trunc((start - 1)); return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()]);
  let num_left: number = (node.map_left[(()=>{const _mochi_idx = end; return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()] - left_start);
  if ((num_left > index)) {
    return quantile(node.left, index, left_start, (node.map_left[(()=>{const _mochi_idx = end; return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()] - 1));
  } else {
    return quantile(node.right, (index - num_left), (start - left_start), (end - node.map_left[(()=>{const _mochi_idx = end; return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()]));
  }
}
function range_counting(node_idx: number, start: number, end: number, start_num: number, end_num: number): number {
  if ((((start > end) || (node_idx < 0)) || (start_num > end_num))) {
    return 0;
  }
  let node: Node = nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  if (((node.minn > end_num) || (node.maxx < start_num))) {
    return 0;
  }
  if (((start_num <= node.minn) && (node.maxx <= end_num))) {
    return ((end - start) + 1);
  }
  let left: number = range_counting(node.left, ((start == 0) ? 0 : node.map_left[(()=>{const _mochi_idx = Math.trunc((start - 1)); return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()]), (node.map_left[(()=>{const _mochi_idx = end; return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()] - 1), start_num, end_num);
  let right: number = range_counting(node.right, (start - ((start == 0) ? 0 : node.map_left[(()=>{const _mochi_idx = Math.trunc((start - 1)); return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()])), (end - node.map_left[(()=>{const _mochi_idx = end; return _mochi_idx < 0 ? node.map_left.length + _mochi_idx : _mochi_idx;})()]), start_num, end_num);
  return (left + right);
}
let test_array: number[] = [2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let root: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
root = build_tree(test_array)
  console.log(_str(("rank_till_index 6 at 6 -> " + _str(rank_till_index(root, 6, 6)))));
  console.log(_str(("rank 6 in [3,13] -> " + _str(rank(root, 6, 3, 13)))));
  console.log(_str(("quantile index 2 in [2,5] -> " + _str(quantile(root, 2, 2, 5)))));
  console.log(_str(("range_counting [3,7] in [1,10] -> " + _str(range_counting(root, 1, 10, 3, 7)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

