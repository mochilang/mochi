// Generated by Mochi v0.10.59 on 2025-08-06 20:42:41 GMT+7

function binary_tree_mirror_dict(tree: Record<number, number[]>, root: number) {
  if (((root == 0) || !(root in tree))) {
    return;
  }
  let children: number[] = tree[root];
  let left: number = children[Math.trunc(0)];
  let right: number = children[Math.trunc(1)];
  tree[root] = [right, left];
  binary_tree_mirror_dict(tree, left);
  binary_tree_mirror_dict(tree, right);
}
function binary_tree_mirror(binary_tree: Record<number, number[]>, root: number): Record<number, number[]> {
  if ((_len(binary_tree) == 0)) {
    panic("binary tree cannot be empty");
  }
  if (!(root in binary_tree)) {
    panic((("root " + _str(root)) + " is not present in the binary_tree"));
  }
  let tree_copy: Record<number, number[]> = {};
  for (const k in binary_tree) {
    tree_copy[k] = binary_tree[k];
  }
  binary_tree_mirror_dict(tree_copy, root);
  return tree_copy;
}
function main() {
  let binary_tree: Record<number, number[]> = {[1]: [2, 3], [2]: [4, 5], [3]: [6, 7], [7]: [8, 9]};
  console.log(_str(("Binary tree: " + _str(binary_tree))));
  let mirrored: Record<number, number[]> = binary_tree_mirror(binary_tree, 1);
  console.log(_str(("Binary tree mirror: " + _str(mirrored))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

