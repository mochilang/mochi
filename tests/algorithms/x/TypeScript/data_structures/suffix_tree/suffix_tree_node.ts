// Generated by Mochi v0.10.59 on 2025-08-06 21:32:04 GMT+7

export interface SuffixTreeNode { children: Record<string, number>; is_end_of_string: boolean; start: number; end: number; suffix_link: number }
function new_suffix_tree_node(children: Record<string, number>, is_end_of_string: boolean, start: number, end: number, suffix_link: number): SuffixTreeNode {
  return {children, is_end_of_string, start, end, suffix_link};
}
function empty_suffix_tree_node(): SuffixTreeNode {
  return new_suffix_tree_node({}, false, (0 - 1), (0 - 1), (0 - 1));
}
function has_key(m: Record<string, number>, k: string): boolean {
  for (const key in m) {
    if ((key == k)) {
      return true;
    }
  }
  return false;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let root: SuffixTreeNode
let leaf: SuffixTreeNode
let nodes: SuffixTreeNode[]
let root_check: SuffixTreeNode
let leaf_check: SuffixTreeNode
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
root = new_suffix_tree_node({"a": 1}, false, (0 - 1), (0 - 1), (0 - 1))
leaf = new_suffix_tree_node({}, true, 0, 2, 0)
nodes = [root, leaf]
root_check = nodes[Math.trunc(0)]
leaf_check = nodes[Math.trunc(1)]
  console.log(_str(_str(has_key(root_check.children, "a"))));
  console.log(_str(_str(leaf_check.is_end_of_string)));
  console.log(_str(_str(leaf_check.start)));
  console.log(_str(_str(leaf_check.end)));
  console.log(_str(_str(leaf_check.suffix_link)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

