// Generated by Mochi v0.10.61 on 2025-08-08 17:04:22 GMT+7

export interface Node { children: Record<string, number>; is_end_of_string: boolean; start: number; end: number }
export interface SuffixTree { text: string; nodes: Node[] }
function new_node(): Node {
  return {"children": {}, "is_end_of_string": false, "start": -1, "end": -1};
}
function has_key(m: Record<string, number>, k: string): boolean {
  for (const key in m) {
    if ((key == k)) {
      return true;
    }
  }
  return false;
}
function add_suffix(tree: SuffixTree, suffix: string, index: number): SuffixTree {
  let nodes: Node[] = tree.nodes;
  let node_idx: number = 0;
  let j: number = 0;
  while ((j < _len(suffix))) {
    let ch: string = (suffix).substring(j, (j + 1));
    let node: Node = nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    let children: Record<string, number> = node.children;
    if (!has_key(children, ch)) {
      nodes.push(new_node());
      let new_idx: number = (_len(nodes) - 1);
      children[(()=>{const _mochi_idx = ch; return _mochi_idx < 0 ? children.length + _mochi_idx : _mochi_idx;})()] = new_idx;
    }
    node.children = children;
    nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
    node_idx = children[(()=>{const _mochi_idx = ch; return _mochi_idx < 0 ? children.length + _mochi_idx : _mochi_idx;})()];
    j = (j + 1);
  }
  let node: Node = nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
  node.is_end_of_string = true;
  node.start = index;
  node.end = ((index + _len(suffix)) - 1);
  nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()] = node;
  tree.nodes = nodes;
  return tree;
}
function build_suffix_tree(tree: SuffixTree): SuffixTree {
  let text: string = tree.text;
  let n: number = _len(text);
  let i: number = 0;
  let t: SuffixTree = tree;
  while ((i < n)) {
    let suffix: string = "";
    let k: number = i;
    while ((k < n)) {
      suffix = (suffix + (text).substring(k, (k + 1)));
      k = (k + 1);
    }
    t = add_suffix(t, suffix, i);
    i = (i + 1);
  }
  return t;
}
function new_suffix_tree(text: string): SuffixTree {
  let tree: SuffixTree = {text, "nodes": []};
  tree.nodes.push(new_node());
  tree = build_suffix_tree(tree);
  return tree;
}
function search(tree: SuffixTree, pattern: string): boolean {
  let node_idx: number = 0;
  let i: number = 0;
  let nodes: Node[] = tree.nodes;
  while ((i < _len(pattern))) {
    let ch: string = (pattern).substring(i, (i + 1));
    let node: Node = nodes[(()=>{const _mochi_idx = node_idx; return _mochi_idx < 0 ? nodes.length + _mochi_idx : _mochi_idx;})()];
    let children: Record<string, number> = node.children;
    if (!has_key(children, ch)) {
      return false;
    }
    node_idx = children[(()=>{const _mochi_idx = ch; return _mochi_idx < 0 ? children.length + _mochi_idx : _mochi_idx;})()];
    i = (i + 1);
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let st: SuffixTree
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
st = new_suffix_tree("bananas")
  console.log(_str(_str(search(st, "ana"))));
  console.log(_str(_str(search(st, "apple"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

