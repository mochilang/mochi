// Generated by Mochi v0.10.61 on 2025-08-08 17:04:25 GMT+7

export interface SuffixTree { text: string }
function suffix_tree_new(text: string): SuffixTree {
  return {text};
}
function suffix_tree_search(st: SuffixTree, pattern: string): boolean {
  if ((_len(pattern) == 0)) {
    return true;
  }
  let i: number = 0;
  let n: number = _len(st.text);
  let m: number = _len(pattern);
  while ((i <= (n - m))) {
    let j: number = 0;
    let found: boolean = true;
    while ((j < m)) {
      if ((st.text[(()=>{const _mochi_idx = Math.trunc((i + j)); return _mochi_idx < 0 ? st.text.length + _mochi_idx : _mochi_idx;})()] != pattern[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? pattern.length + _mochi_idx : _mochi_idx;})()])) {
        found = false;
        break
      }
      j = (j + 1);
    }
    if (found) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
let text: string = "banana";
let patterns_exist: string[] = ["ana", "ban", "na"];
let i: number = 0;
let patterns_none: string[] = ["xyz", "apple", "cat"];
let substrings: string[] = ["ban", "ana", "a", "na"];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let st: SuffixTree
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
st = suffix_tree_new(text)
  while ((i < _len(patterns_exist))) {
    console.log(_str(_str(suffix_tree_search(st, patterns_exist[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? patterns_exist.length + _mochi_idx : _mochi_idx;})()]))));
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(patterns_none))) {
    console.log(_str(_str(suffix_tree_search(st, patterns_none[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? patterns_none.length + _mochi_idx : _mochi_idx;})()]))));
    i = (i + 1);
  }
  console.log(_str(_str(suffix_tree_search(st, ""))));
  console.log(_str(_str(suffix_tree_search(st, text))));
  i = 0;
  while ((i < _len(substrings))) {
    console.log(_str(_str(suffix_tree_search(st, substrings[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? substrings.length + _mochi_idx : _mochi_idx;})()]))));
    i = (i + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

