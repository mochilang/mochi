// Generated by Mochi v0.10.60 on 2025-08-08 10:44:58 GMT+7

export interface HashTableWithLinkedList { size_table: number; charge_factor: number; values: number[][]; keys: Record<number, number[]> }
function make_table(size_table: number, charge_factor: number): HashTableWithLinkedList {
  let vals: number[][] = [];
  let i: number = 0;
  while ((i < size_table)) {
    vals.push([]);
    i = (i + 1);
  }
  return {size_table, charge_factor, "values": vals, "keys": {}};
}
function hash_function(ht: HashTableWithLinkedList, key: number): number {
  let res: number = (key % ht.size_table);
  if ((res < 0)) {
    res = (res + ht.size_table);
  }
  return res;
}
function prepend(lst: number[], value: number): number[] {
  let result: number[] = [value];
  let i: number = 0;
  while ((i < _len(lst))) {
    result.push(lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return result;
}
function set_value(ht: HashTableWithLinkedList, key: number, data: number) {
  let current: number[] = ht.values[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()];
  let updated: number[] = prepend(current, data);
  let vals: number[][] = ht.values;
  vals[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] = updated;
  ht.values = vals;
  let ks: Record<number, number[]> = ht.keys;
  ks[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? ks.length + _mochi_idx : _mochi_idx;})()] = updated;
  ht.keys = ks;
}
function count_empty(ht: HashTableWithLinkedList): number {
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(ht.values))) {
    if ((_len(ht.values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()]) == 0)) {
      count = (count + 1);
    }
    i = (i + 1);
  }
  return count;
}
function balanced_factor(ht: HashTableWithLinkedList): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(ht.values))) {
    total = (total + (ht.charge_factor - _len(ht.values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()])));
    i = (i + 1);
  }
  return ((total / ht.size_table) * ht.charge_factor);
}
function collision_resolution(ht: HashTableWithLinkedList, key: number): number {
  if (!((_len(ht.values[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()]) == ht.charge_factor) && (count_empty(ht) == 0))) {
    return key;
  }
  let new_key: number = ((key + 1) % ht.size_table);
  let steps: number = 0;
  while (((_len(ht.values[(()=>{const _mochi_idx = new_key; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()]) == ht.charge_factor) && (steps < (ht.size_table - 1)))) {
    new_key = ((new_key + 1) % ht.size_table);
    steps = (steps + 1);
  }
  if ((_len(ht.values[(()=>{const _mochi_idx = new_key; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()]) < ht.charge_factor)) {
    return new_key;
  }
  return -1;
}
function insert(ht: HashTableWithLinkedList, data: number) {
  let key: number = hash_function(ht, data);
  if (((_len(ht.values[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()]) == 0) || (_len(ht.values[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? ht.values.length + _mochi_idx : _mochi_idx;})()]) < ht.charge_factor))) {
    set_value(ht, key, data);
    return;
  }
  let dest: number = collision_resolution(ht, key);
  if ((dest >= 0)) {
    set_value(ht, dest, data);
  } else {
    console.log(_str("table full"));
  }
}
function main() {
  let ht: HashTableWithLinkedList = make_table(3, 2);
  insert(ht, 10);
  insert(ht, 20);
  insert(ht, 30);
  insert(ht, 40);
  insert(ht, 50);
  console.log(_str(_str(ht.values)));
  console.log(_str(_str(balanced_factor(ht))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

