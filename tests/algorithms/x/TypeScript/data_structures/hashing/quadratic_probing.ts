// Generated by Mochi v0.10.60 on 2025-08-08 10:44:59 GMT+7

export interface HashTable { size_table: number; values: number[]; lim_charge: number }
function create_hash_table(size: number): HashTable {
  let vals: number[] = [];
  let i: number = 0;
  while ((i < size)) {
    vals.push(null);
    i = (i + 1);
  }
  return {"size_table": size, "values": vals, "lim_charge": 0.75};
}
function hash_function(table: HashTable, key: number): number {
  return (key % table.size_table);
}
function balanced_factor(table: HashTable): number {
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(table.values))) {
    if ((table.values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? table.values.length + _mochi_idx : _mochi_idx;})()] != null)) {
      count = (count + 1);
    }
    i = (i + 1);
  }
  return (count / table.size_table);
}
function collision_resolution(table: HashTable, key: number): number {
  let i: number = 1;
  let new_key: number = hash_function(table, (key + (i * i)));
  while (((table.values[(()=>{const _mochi_idx = new_key; return _mochi_idx < 0 ? table.values.length + _mochi_idx : _mochi_idx;})()] != null) && (table.values[(()=>{const _mochi_idx = new_key; return _mochi_idx < 0 ? table.values.length + _mochi_idx : _mochi_idx;})()] != key))) {
    i = (i + 1);
    if ((balanced_factor(table) >= table.lim_charge)) {
      return table.size_table;
    }
    new_key = hash_function(table, (key + (i * i)));
  }
  return new_key;
}
function insert_data(table: HashTable, data: number) {
  let key: number = hash_function(table, data);
  let vals: number[] = table.values;
  if ((vals[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] == null)) {
    vals[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] = data;
  } else {
    if ((vals[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] == data)) {
      table.values = vals;
      return;
    } else {
      let new_key: number = collision_resolution(table, key);
      if (((new_key < _len(vals)) && (vals[(()=>{const _mochi_idx = new_key; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] == null))) {
        vals[(()=>{const _mochi_idx = new_key; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] = data;
      }
    }
  }
  table.values = vals;
}
function int_to_string(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let num: number = n;
  let neg: boolean = false;
  if ((num < 0)) {
    neg = true;
    num = -num;
  }
  let res: string = "";
  while ((num > 0)) {
    let digit = (num % 10);
    let ch = ("0123456789").substring(digit, (digit + 1));
    res = (ch + res);
    num = Math.trunc(num / 10);
  }
  if (neg) {
    res = ("-" + res);
  }
  return res;
}
function keys_to_string(table: HashTable): string {
  let result: string = "{";
  let first: boolean = true;
  let i: number = 0;
  while ((i < _len(table.values))) {
    let v: number = table.values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? table.values.length + _mochi_idx : _mochi_idx;})()];
    if ((v != null)) {
      if (!first) {
        result = (result + ", ");
      }
      result = (((result + int_to_string(i)) + ": ") + int_to_string(v));
      first = false;
    }
    i = (i + 1);
  }
  result = (result + "}");
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let qp: HashTable
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
qp = create_hash_table(8)
  insert_data(qp, 0);
  insert_data(qp, 999);
  insert_data(qp, 111);
  console.log(_str(keys_to_string(qp)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

