// Generated by Mochi v0.10.60 on 2025-08-08 10:45:00 GMT+7

export interface Entry { key: string; value: string }
export interface HashMap { entries: Entry[] }
export interface GetResult { found: boolean; value: string }
export interface DelResult { map: HashMap; ok: boolean }
function make_hash_map(): HashMap {
  return {"entries": []};
}
function hm_len(m: HashMap): number {
  return _len(m.entries);
}
function hm_set(m: HashMap, key: string, value: string): HashMap {
  let entries: Entry[] = m.entries;
  let updated: boolean = false;
  let new_entries: Entry[] = [];
  let i: number = 0;
  while ((i < _len(entries))) {
    let e: Entry = entries[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()];
    if ((e.key == key)) {
      new_entries.push({key, value});
      updated = true;
    } else {
      new_entries.push(e);
    }
    i = (i + 1);
  }
  if (!updated) {
    new_entries.push({key, value});
  }
  return {"entries": new_entries};
}
function hm_get(m: HashMap, key: string): GetResult {
  let i: number = 0;
  while ((i < _len(m.entries))) {
    let e: Entry = m.entries[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.entries.length + _mochi_idx : _mochi_idx;})()];
    if ((e.key == key)) {
      return {"found": true, "value": e.value};
    }
    i = (i + 1);
  }
  return {"found": false, "value": ""};
}
function hm_del(m: HashMap, key: string): DelResult {
  let entries: Entry[] = m.entries;
  let new_entries: Entry[] = [];
  let removed: boolean = false;
  let i: number = 0;
  while ((i < _len(entries))) {
    let e: Entry = entries[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()];
    if ((e.key == key)) {
      removed = true;
    } else {
      new_entries.push(e);
    }
    i = (i + 1);
  }
  if (removed) {
    return {"map": {"entries": new_entries}, "ok": true};
  }
  return {"map": m, "ok": false};
}
function test_add_items(): boolean {
  let h: HashMap = make_hash_map();
  h = hm_set(h, "key_a", "val_a");
  h = hm_set(h, "key_b", "val_b");
  let a: GetResult = hm_get(h, "key_a");
  let b: GetResult = hm_get(h, "key_b");
  return (((((hm_len(h) == 2) && a.found) && b.found) && (a.value == "val_a")) && (b.value == "val_b"));
}
function test_overwrite_items(): boolean {
  let h: HashMap = make_hash_map();
  h = hm_set(h, "key_a", "val_a");
  h = hm_set(h, "key_a", "val_b");
  let a: GetResult = hm_get(h, "key_a");
  return (((hm_len(h) == 1) && a.found) && (a.value == "val_b"));
}
function test_delete_items(): boolean {
  let h: HashMap = make_hash_map();
  h = hm_set(h, "key_a", "val_a");
  h = hm_set(h, "key_b", "val_b");
  let d1: DelResult = hm_del(h, "key_a");
  h = d1.map;
  let d2: DelResult = hm_del(h, "key_b");
  h = d2.map;
  h = hm_set(h, "key_a", "val_a");
  let d3: DelResult = hm_del(h, "key_a");
  h = d3.map;
  return (hm_len(h) == 0);
}
function test_access_absent_items(): boolean {
  let h: HashMap = make_hash_map();
  let g1: GetResult = hm_get(h, "key_a");
  let d1: DelResult = hm_del(h, "key_a");
  h = d1.map;
  h = hm_set(h, "key_a", "val_a");
  let d2: DelResult = hm_del(h, "key_a");
  h = d2.map;
  let d3: DelResult = hm_del(h, "key_a");
  h = d3.map;
  let g2: GetResult = hm_get(h, "key_a");
  return ((((((g1.found == false) && (d1.ok == false)) && d2.ok) && (d3.ok == false)) && (g2.found == false)) && (hm_len(h) == 0));
}
function test_add_with_resize_up(): boolean {
  let h: HashMap = make_hash_map();
  let i: number = 0;
  while ((i < 5)) {
    let s: string = _str(i);
    h = hm_set(h, s, s);
    i = (i + 1);
  }
  return (hm_len(h) == 5);
}
function test_add_with_resize_down(): boolean {
  let h: HashMap = make_hash_map();
  let i: number = 0;
  while ((i < 5)) {
    let s: string = _str(i);
    h = hm_set(h, s, s);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < 5)) {
    let s: string = _str(j);
    let d: DelResult = hm_del(h, s);
    h = d.map;
    j = (j + 1);
  }
  h = hm_set(h, "key_a", "val_b");
  let a: GetResult = hm_get(h, "key_a");
  return (((hm_len(h) == 1) && a.found) && (a.value == "val_b"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(test_add_items()));
  console.log(_str(test_overwrite_items()));
  console.log(_str(test_delete_items()));
  console.log(_str(test_access_absent_items()));
  console.log(_str(test_add_with_resize_up()));
  console.log(_str(test_add_with_resize_down()));
  console.log("");
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

