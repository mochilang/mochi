// Generated by Mochi v0.10.60 on 2025-08-08 10:44:54 GMT+7

let ascii: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
function ord(ch: string): number {
  let i: number = 0;
  while ((i < _len(ascii))) {
    if ((ascii.slice(i, (i + 1)) == ch)) {
      return (32 + i);
    }
    i = (i + 1);
  }
  return 0;
}
export interface Bloom { size: number; bits: number[] }
function new_bloom(size: number): Bloom {
  let bits: number[] = [];
  let i: number = 0;
  while ((i < size)) {
    bits.push(0);
    i = (i + 1);
  }
  return {size, bits};
}
function hash1(value: string, size: number): number {
  let h: number = 0;
  let i: number = 0;
  while ((i < _len(value))) {
    h = (((h * 31) + ord(value.slice(i, (i + 1)))) % size);
    i = (i + 1);
  }
  return h;
}
function hash2(value: string, size: number): number {
  let h: number = 0;
  let i: number = 0;
  while ((i < _len(value))) {
    h = (((h * 131) + ord(value.slice(i, (i + 1)))) % size);
    i = (i + 1);
  }
  return h;
}
function hash_positions(value: string, size: number): number[] {
  let h1: number = hash1(value, size);
  let h2: number = hash2(value, size);
  let res: number[] = [];
  res.push(h1);
  res.push(h2);
  return res;
}
function bloom_add(b: Bloom, value: string): Bloom {
  let pos: number[] = hash_positions(value, b.size);
  let bits: number[] = b.bits;
  let i: number = 0;
  while ((i < _len(pos))) {
    let idx: number = ((b.size - 1) - pos[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? pos.length + _mochi_idx : _mochi_idx;})()]);
    bits[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? bits.length + _mochi_idx : _mochi_idx;})()] = 1;
    i = (i + 1);
  }
  return {"size": b.size, bits};
}
function bloom_exists(b: Bloom, value: string): boolean {
  let pos: number[] = hash_positions(value, b.size);
  let i: number = 0;
  while ((i < _len(pos))) {
    let idx: number = ((b.size - 1) - pos[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? pos.length + _mochi_idx : _mochi_idx;})()]);
    if ((b.bits[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? b.bits.length + _mochi_idx : _mochi_idx;})()] != 1)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function bitstring(b: Bloom): string {
  let res: string = "";
  let i: number = 0;
  while ((i < b.size)) {
    res = (res + _str(b.bits[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.bits.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function format_hash(b: Bloom, value: string): string {
  let pos: number[] = hash_positions(value, b.size);
  let bits: number[] = [];
  let i: number = 0;
  while ((i < b.size)) {
    bits.push(0);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(pos))) {
    let idx: number = ((b.size - 1) - pos[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? pos.length + _mochi_idx : _mochi_idx;})()]);
    bits[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? bits.length + _mochi_idx : _mochi_idx;})()] = 1;
    i = (i + 1);
  }
  let res: string = "";
  i = 0;
  while ((i < b.size)) {
    res = (res + _str(bits[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bits.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function estimated_error_rate(b: Bloom): number {
  let ones: number = 0;
  let i: number = 0;
  while ((i < b.size)) {
    if ((b.bits[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.bits.length + _mochi_idx : _mochi_idx;})()] == 1)) {
      ones = (ones + 1);
    }
    i = (i + 1);
  }
  let frac: number = (ones / b.size);
  return (frac * frac);
}
function any_in(b: Bloom, items: string[]): boolean {
  let i: number = 0;
  while ((i < _len(items))) {
    if (bloom_exists(b, items[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? items.length + _mochi_idx : _mochi_idx;})()])) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function main() {
  let bloom: Bloom = new_bloom(8);
  console.log(_str(bitstring(bloom)));
  console.log(_str(bloom_exists(bloom, "Titanic")));
  bloom = bloom_add(bloom, "Titanic");
  console.log(_str(bitstring(bloom)));
  console.log(_str(bloom_exists(bloom, "Titanic")));
  bloom = bloom_add(bloom, "Avatar");
  console.log(_str(bloom_exists(bloom, "Avatar")));
  console.log(_str(format_hash(bloom, "Avatar")));
  console.log(_str(bitstring(bloom)));
  let not_present: string[] = ["The Godfather", "Interstellar", "Parasite", "Pulp Fiction"];
  let i: number = 0;
  while ((i < _len(not_present))) {
    let film: string = not_present[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? not_present.length + _mochi_idx : _mochi_idx;})()];
    console.log(_str(((film + ":") + format_hash(bloom, film))));
    i = (i + 1);
  }
  console.log(_str(any_in(bloom, not_present)));
  console.log(_str(bloom_exists(bloom, "Ratatouille")));
  console.log(_str(format_hash(bloom, "Ratatouille")));
  console.log(_str(_str(estimated_error_rate(bloom))));
  bloom = bloom_add(bloom, "The Godfather");
  console.log(_str(_str(estimated_error_rate(bloom))));
  console.log(_str(bitstring(bloom)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

