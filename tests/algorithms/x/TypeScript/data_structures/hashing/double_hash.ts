// Generated by Mochi v0.10.60 on 2025-08-08 10:44:55 GMT+7

function is_prime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  let i: number = 2;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function prev_prime(n: number): number {
  let p: number = (n - 1);
  while ((p >= 2)) {
    if (is_prime(p)) {
      return p;
    }
    p = (p - 1);
  }
  return 1;
}
function create_table(size: number): number[] {
  let vals: number[] = [];
  let i: number = 0;
  while ((i < size)) {
    vals.push(-1);
    i = (i + 1);
  }
  return vals;
}
function hash1(size: number, key: number): number {
  return (key % size);
}
function hash2(prime: number, key: number): number {
  return (prime - (key % prime));
}
function insert_double_hash(values: number[], size: number, prime: number, value: number): number[] {
  let vals = values;
  let idx: number = hash1(size, value);
  let step: number = hash2(prime, value);
  let count: number = 0;
  while (((vals[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] != -1) && (count < size))) {
    idx = ((idx + step) % size);
    count = (count + 1);
  }
  if ((vals[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] == -1)) {
    vals[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()] = value;
  }
  return vals;
}
function table_keys(values: number[]): Record<number, number> {
  let res: Record<number, number> = {};
  let i: number = 0;
  while ((i < _len(values))) {
    if ((values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()] != -1)) {
      res[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] = values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return res;
}
function run_example(size: number, data: number[]) {
  let prime: number = prev_prime(size);
  let table: number[] = create_table(size);
  let i: number = 0;
  while ((i < _len(data))) {
    table = insert_double_hash(table, size, prime, data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  console.log(_str(_str(table_keys(table))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  run_example(3, [10, 20, 30]);
  run_example(4, [10, 20, 30]);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

