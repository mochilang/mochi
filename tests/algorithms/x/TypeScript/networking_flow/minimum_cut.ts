// Generated by Mochi v0.10.59 on 2025-08-07 08:17:16 GMT+7

function bfs(graph: number[][], s: number, t: number, parent: number[]): boolean {
  let visited: boolean[] = [];
  let i: number = 0;
  while ((i < _len(graph))) {
    visited.push(false);
    i = (i + 1);
  }
  let queue: number[] = [s];
  let head: number = 0;
  visited[(s) < 0 ? visited.length + (s) : s] = true;
  while ((head < _len(queue))) {
    let u: number = queue[(head) < 0 ? queue.length + (head) : head];
    head = (head + 1);
    let ind: number = 0;
    while ((ind < _len(graph[(u) < 0 ? graph.length + (u) : u]))) {
      if (((visited[(ind) < 0 ? visited.length + (ind) : ind] == false) && (graph[(u) < 0 ? graph.length + (u) : u][(ind) < 0 ? graph[(u) < 0 ? graph.length + (u) : u].length + (ind) : ind] > 0))) {
        queue.push(ind);
        visited[(ind) < 0 ? visited.length + (ind) : ind] = true;
        parent[(ind) < 0 ? parent.length + (ind) : ind] = u;
      }
      ind = (ind + 1);
    }
  }
  return visited[(t) < 0 ? visited.length + (t) : t];
}
function mincut(graph: number[][], source: number, sink: number): number[][] {
  let g: number[][] = graph;
  let parent: number[] = [];
  let i: number = 0;
  while ((i < _len(g))) {
    parent.push(-1);
    i = (i + 1);
  }
  let temp: number[][] = [];
  i = 0;
  while ((i < _len(g))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(g[(i) < 0 ? g.length + (i) : i]))) {
      row.push(g[(i) < 0 ? g.length + (i) : i][(j) < 0 ? g[(i) < 0 ? g.length + (i) : i].length + (j) : j]);
      j = (j + 1);
    }
    temp.push(row);
    i = (i + 1);
  }
  while (bfs(g, source, sink, parent)) {
    let path_flow: number = 1000000000;
    let s: number = sink;
    while ((s != source)) {
      let p: number = parent[(s) < 0 ? parent.length + (s) : s];
      let cap: number = g[(p) < 0 ? g.length + (p) : p][(s) < 0 ? g[(p) < 0 ? g.length + (p) : p].length + (s) : s];
      if ((cap < path_flow)) {
        path_flow = cap;
      }
      s = p;
    }
    let v: number = sink;
    while ((v != source)) {
      let u: number = parent[(v) < 0 ? parent.length + (v) : v];
      g[(u) < 0 ? g.length + (u) : u][(v) < 0 ? g[(u) < 0 ? g.length + (u) : u].length + (v) : v] = (g[(u) < 0 ? g.length + (u) : u][(v) < 0 ? g[(u) < 0 ? g.length + (u) : u].length + (v) : v] - path_flow);
      g[(v) < 0 ? g.length + (v) : v][(u) < 0 ? g[(v) < 0 ? g.length + (v) : v].length + (u) : u] = (g[(v) < 0 ? g.length + (v) : v][(u) < 0 ? g[(v) < 0 ? g.length + (v) : v].length + (u) : u] + path_flow);
      v = u;
    }
  }
  let res: number[][] = [];
  i = 0;
  while ((i < _len(g))) {
    let j: number = 0;
    while ((j < _len(g[(Math.trunc(0)) < 0 ? g.length + (Math.trunc(0)) : Math.trunc(0)]))) {
      if (((g[(i) < 0 ? g.length + (i) : i][(j) < 0 ? g[(i) < 0 ? g.length + (i) : i].length + (j) : j] == 0) && (temp[(i) < 0 ? temp.length + (i) : i][(j) < 0 ? temp[(i) < 0 ? temp.length + (i) : i].length + (j) : j] > 0))) {
        res.push([i, j]);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return res;
}
let test_graph: number[][] = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = mincut(test_graph, 0, 5)
  console.log(_str(_str(result)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

