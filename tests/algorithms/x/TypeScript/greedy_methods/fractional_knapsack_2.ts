// Generated by Mochi v0.10.66 on 2025-08-15 10:29:27 GMT+7

export interface KnapsackResult { max_value: number; fractions: number[] }
function sort_by_ratio(index: number[], ratio: number[]): number[] {
  let i: number = 1;
  while ((i < _len(index))) {
    let key: number = index[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? index.length + _mochi_idx : _mochi_idx;})()];
    let key_ratio: number = ratio[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? ratio.length + _mochi_idx : _mochi_idx;})()];
    let j: number = (i - 1);
    while (((j >= 0) && (ratio[(()=>{const _mochi_idx = Math.trunc(index[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? index.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? ratio.length + _mochi_idx : _mochi_idx;})()] < key_ratio))) {
      index[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? index.length + _mochi_idx : _mochi_idx;})()] = index[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? index.length + _mochi_idx : _mochi_idx;})()];
      j = (j - 1);
    }
    index[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? index.length + _mochi_idx : _mochi_idx;})()] = key;
    i = (i + 1);
  }
  return index;
}
function fractional_knapsack(value: number[], weight: number[], capacity: number): KnapsackResult {
  let n: number = _len(value);
  let index: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    index.push(i);
    i = (i + 1);
  }
  let ratio: number[] = [];
  i = 0;
  while ((i < n)) {
    ratio.push((value[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? value.length + _mochi_idx : _mochi_idx;})()] / weight[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  index = sort_by_ratio(index, ratio);
  let fractions: number[] = [];
  i = 0;
  while ((i < n)) {
    fractions.push(0.0);
    i = (i + 1);
  }
  let max_value: number = 0.0;
  let idx: number = 0;
  while ((idx < _len(index))) {
    let item: number = index[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? index.length + _mochi_idx : _mochi_idx;})()];
    if ((weight[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()] <= capacity)) {
      fractions[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? fractions.length + _mochi_idx : _mochi_idx;})()] = 1.0;
      max_value = (max_value + value[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? value.length + _mochi_idx : _mochi_idx;})()]);
      capacity = (capacity - weight[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()]);
    } else {
      fractions[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? fractions.length + _mochi_idx : _mochi_idx;})()] = (capacity / weight[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()]);
      max_value = (max_value + ((value[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? value.length + _mochi_idx : _mochi_idx;})()] * capacity) / weight[(()=>{const _mochi_idx = item; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()]));
      break
    }
    idx = (idx + 1);
  }
  return {max_value, fractions};
}
let v: number[] = [1.0, 3.0, 5.0, 7.0, 9.0];
let w: number[] = [0.9, 0.7, 0.5, 0.3, 0.1];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(fractional_knapsack(v, w, 5.0)));
  console.log(_str(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0)));
  console.log(_str(fractional_knapsack([], [], 30.0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

