// Generated by Mochi v0.10.66 on 2025-08-15 10:29:28 GMT+7

export interface GasStation { gas_quantity: number; cost: number }
function get_gas_stations(gas_quantities: number[], costs: number[]): GasStation[] {
  let stations: GasStation[] = [];
  let i: number = 0;
  while ((i < _len(gas_quantities))) {
    stations.push({gas_quantity: gas_quantities[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gas_quantities.length + _mochi_idx : _mochi_idx;})()], cost: costs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? costs.length + _mochi_idx : _mochi_idx;})()]});
    i = (i + 1);
  }
  return stations;
}
function can_complete_journey(gas_stations: GasStation[]): number {
  let total_gas: number = 0;
  let total_cost: number = 0;
  let i: number = 0;
  while ((i < _len(gas_stations))) {
    total_gas = (total_gas + gas_stations[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gas_stations.length + _mochi_idx : _mochi_idx;})()].gas_quantity);
    total_cost = (total_cost + gas_stations[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gas_stations.length + _mochi_idx : _mochi_idx;})()].cost);
    i = (i + 1);
  }
  if ((total_gas < total_cost)) {
    return -1;
  }
  let start: number = 0;
  let net: number = 0;
  i = 0;
  while ((i < _len(gas_stations))) {
    let station: GasStation = gas_stations[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gas_stations.length + _mochi_idx : _mochi_idx;})()];
    net = ((net + station.gas_quantity) - station.cost);
    if ((net < 0)) {
      start = (i + 1);
      net = 0;
    }
    i = (i + 1);
  }
  return start;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let example1: GasStation[]
let example2: GasStation[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
example1 = get_gas_stations([1, 2, 3, 4, 5], [3, 4, 5, 1, 2])
  console.log(_str(can_complete_journey(example1)));
example2 = get_gas_stations([2, 3, 4], [3, 4, 3])
  console.log(_str(can_complete_journey(example2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

