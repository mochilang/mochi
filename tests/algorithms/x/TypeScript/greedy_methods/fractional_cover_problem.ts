// Generated by Mochi v0.10.63 on 2025-08-12 08:43:55 GMT+7

export interface Item { weight: number; value: number }
function ratio(item: Item): number {
  return (item.value / item.weight);
}
function fractional_cover(items: Item[], capacity: number): number {
  if ((capacity < 0)) {
    _panic("Capacity cannot be negative");
  }
  let total: number = 0.0;
  let remaining: number = capacity;
  let sorted: Item[] = (() => {
  const result = []
  for (const it of items) {
    result.push({k: -ratio(it), v: it})
  }
  result.sort((a, b) => a.k < b.k ? -1 : a.k > b.k ? 1 : 0)
  const out = result.map(r => r.v)
  return out
})();
  let idx: number = 0;
  while (((idx < _len(sorted)) && (remaining > 0))) {
    let item: Item = sorted[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()];
    let take: number = ((item.weight < remaining) ? item.weight : remaining);
    total = (total + (take * ratio(item)));
    remaining = (remaining - take);
    idx = (idx + 1);
  }
  return total;
}
let items1: Item[] = [{"weight": 10, "value": 60}, {"weight": 20, "value": 100}, {"weight": 30, "value": 120}];
let items2: Item[] = [{"weight": 20, "value": 100}, {"weight": 30, "value": 120}, {"weight": 10, "value": 60}];
let items3: Item[] = [];
let items4: Item[] = [{"weight": 10, "value": 60}];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(fractional_cover(items1, 50)));
  console.log(_str(fractional_cover(items2, 25)));
  console.log(_str(fractional_cover(items3, 50)));
  console.log(_str(fractional_cover(items4, 5)));
  console.log(_str(fractional_cover(items4, 1)));
  console.log(_str(fractional_cover(items4, 0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

