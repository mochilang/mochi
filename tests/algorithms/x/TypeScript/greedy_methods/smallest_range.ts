// Generated by Mochi v0.10.63 on 2025-08-12 08:44:25 GMT+7

export interface HeapItem { value: number; list_idx: number; elem_idx: number }
let INF: number = 1000000000;
function smallest_range(nums: number[][]): number[] {
  let heap: HeapItem[] = [];
  let current_max: number = -INF;
  let i: number = 0;
  while ((i < _len(nums))) {
    let first_val: number = nums[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? nums[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    heap.push({"value": first_val, "list_idx": i, "elem_idx": 0});
    if ((first_val > current_max)) {
      current_max = first_val;
    }
    i = (i + 1);
  }
  let best: number[] = [-INF, INF];
  while ((_len(heap) > 0)) {
    let min_idx: number = 0;
    let j: number = 1;
    while ((j < _len(heap))) {
      let hj: HeapItem = heap[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
      let hmin: HeapItem = heap[(()=>{const _mochi_idx = min_idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
      if ((hj.value < hmin.value)) {
        min_idx = j;
      }
      j = (j + 1);
    }
    let item: HeapItem = heap[(()=>{const _mochi_idx = min_idx; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()];
    let new_heap: HeapItem[] = [];
    let k: number = 0;
    while ((k < _len(heap))) {
      if ((k != min_idx)) {
        new_heap.push(heap[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? heap.length + _mochi_idx : _mochi_idx;})()]);
      }
      k = (k + 1);
    }
    heap = new_heap;
    let current_min: number = item.value;
    if (((current_max - current_min) < (best[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? best.length + _mochi_idx : _mochi_idx;})()] - best[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? best.length + _mochi_idx : _mochi_idx;})()]))) {
      best = [current_min, current_max];
    }
    if ((item.elem_idx == (_len(nums[(()=>{const _mochi_idx = Math.trunc(item.list_idx); return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()]) - 1))) {
      break
    }
    let next_val: number = nums[(()=>{const _mochi_idx = Math.trunc(item.list_idx); return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((item.elem_idx + 1)); return _mochi_idx < 0 ? nums[(()=>{const _mochi_idx = Math.trunc(item.list_idx); return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    heap.push({"value": next_val, "list_idx": item.list_idx, "elem_idx": (item.elem_idx + 1)});
    if ((next_val > current_max)) {
      current_max = next_val;
    }
  }
  return best;
}
function list_to_string(arr: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(arr))) {
    s = (s + _str(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(arr) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
function main() {
  let result1: number[] = smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]);
  console.log(_str(list_to_string(result1)));
  let result2: number[] = smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]]);
  console.log(_str(list_to_string(result2)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

