// Generated by Mochi v0.10.63 on 2025-08-12 08:44:22 GMT+7

function index_of_min(xs: number[]): number {
  let min_idx: number = 0;
  let i: number = 1;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] < xs[(()=>{const _mochi_idx = min_idx; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()])) {
      min_idx = i;
    }
    i = (i + 1);
  }
  return min_idx;
}
function remove_at(xs: number[], idx: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i != idx)) {
      res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function optimal_merge_pattern(files: number[]): number {
  let arr: number[] = files;
  let optimal_merge_cost: number = 0;
  while ((_len(arr) > 1)) {
    let temp: number = 0;
    let k: number = 0;
    while ((k < 2)) {
      let min_idx: number = index_of_min(arr);
      temp = (temp + arr[(()=>{const _mochi_idx = min_idx; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
      arr = remove_at(arr, min_idx);
      k = (k + 1);
    }
    arr.push(temp);
    optimal_merge_cost = (optimal_merge_cost + temp);
  }
  return optimal_merge_cost;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(optimal_merge_pattern([2, 3, 4])));
  console.log(_str(optimal_merge_pattern([5, 10, 20, 30, 30])));
  console.log(_str(optimal_merge_pattern([8, 8, 8, 8, 8])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

