// Generated by Mochi v0.10.59 on 2025-08-07 00:02:56 GMT+7

export interface Item { value: number; weight: number }
function sort_by_ratio_desc(arr: Item[]): Item[] {
  let i: number = 1;
  while ((i < _len(arr))) {
    let key: Item = arr[(i) < 0 ? arr.length + (i) : i];
    let j: number = (i - 1);
    while ((j >= 0)) {
      let current: Item = arr[(j) < 0 ? arr.length + (j) : j];
      if (((current.value / current.weight) < (key.value / key.weight))) {
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = current;
        j = (j - 1);
      } else {
        break
      }
    }
    arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = key;
    i = (i + 1);
  }
  return arr;
}
function sum_first(arr: number[], k: number): number {
  let s: number = 0.0;
  let i: number = 0;
  while (((i < k) && (i < _len(arr)))) {
    s = (s + arr[(i) < 0 ? arr.length + (i) : i]);
    i = (i + 1);
  }
  return s;
}
function frac_knapsack(vl: number[], wt: number[], w: number, n: number): number {
  let items: Item[] = [];
  let i: number = 0;
  while (((i < _len(vl)) && (i < _len(wt)))) {
    items.push({"value": vl[(i) < 0 ? vl.length + (i) : i], "weight": wt[(i) < 0 ? wt.length + (i) : i]});
    i = (i + 1);
  }
  items = sort_by_ratio_desc(items);
  let values: number[] = [];
  let weights: number[] = [];
  i = 0;
  while ((i < _len(items))) {
    let itm: Item = items[(i) < 0 ? items.length + (i) : i];
    values.push(itm.value);
    weights.push(itm.weight);
    i = (i + 1);
  }
  let acc: number[] = [];
  let total: number = 0.0;
  i = 0;
  while ((i < _len(weights))) {
    total = (total + weights[(i) < 0 ? weights.length + (i) : i]);
    acc.push(total);
    i = (i + 1);
  }
  let k: number = 0;
  while (((k < _len(acc)) && (w >= acc[(k) < 0 ? acc.length + (k) : k]))) {
    k = (k + 1);
  }
  if ((k == 0)) {
    return 0.0;
  }
  if ((k >= _len(values))) {
    return sum_first(values, _len(values));
  }
  if ((k != n)) {
    return (sum_first(values, k) + (((w - acc[(Math.trunc((k - 1))) < 0 ? acc.length + (Math.trunc((k - 1))) : Math.trunc((k - 1))]) * values[(k) < 0 ? values.length + (k) : k]) / weights[(k) < 0 ? weights.length + (k) : k]));
  }
  return sum_first(values, k);
}
let vl: number[] = [60.0, 100.0, 120.0];
let wt: number[] = [10.0, 20.0, 30.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = frac_knapsack(vl, wt, 50.0, 3)
  console.log(_str(_str(result)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

