// Generated by Mochi v0.10.59 on 2025-08-06 21:52:31 GMT+7

export interface Node { key: number; freq: number }
function sort_nodes(nodes: Node[]): Node[] {
  let arr: Node[] = nodes;
  let i: number = 1;
  while ((i < _len(arr))) {
    let key_node: Node = arr[(i) < 0 ? arr.length + (i) : i];
    let j: number = (i - 1);
    while ((j >= 0)) {
      let temp: Node = arr[(j) < 0 ? arr.length + (j) : j];
      if ((temp.key > key_node.key)) {
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = temp;
        j = (j - 1);
      } else {
        break
      }
    }
    arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = key_node;
    i = (i + 1);
  }
  return arr;
}
function print_node(n: Node) {
  console.log(_str((((("Node(key=" + _str(n.key)) + ", freq=") + _str(n.freq)) + ")")));
}
function print_binary_search_tree(root: number[][], keys: number[], i: number, j: number, parent: number, is_left: boolean) {
  if ((((i > j) || (i < 0)) || (j > (_len(root) - 1)))) {
    return;
  }
  let node: number = root[(i) < 0 ? root.length + (i) : i][(j) < 0 ? root[(i) < 0 ? root.length + (i) : i].length + (j) : j];
  if ((parent == -1)) {
    console.log(_str((_str(keys[(node) < 0 ? keys.length + (node) : node]) + " is the root of the binary search tree.")));
  } else {
    if (is_left) {
      console.log(_str((((_str(keys[(node) < 0 ? keys.length + (node) : node]) + " is the left child of key ") + _str(parent)) + ".")));
    } else {
      console.log(_str((((_str(keys[(node) < 0 ? keys.length + (node) : node]) + " is the right child of key ") + _str(parent)) + ".")));
    }
  }
  print_binary_search_tree(root, keys, i, (node - 1), keys[(node) < 0 ? keys.length + (node) : node], true);
  print_binary_search_tree(root, keys, (node + 1), j, keys[(node) < 0 ? keys.length + (node) : node], false);
}
function find_optimal_binary_search_tree(original_nodes: Node[]) {
  let nodes: Node[] = sort_nodes(original_nodes);
  let n: number = _len(nodes);
  let keys: number[] = [];
  let freqs: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    let node: Node = nodes[(i) < 0 ? nodes.length + (i) : i];
    keys.push(node.key);
    freqs.push(node.freq);
    i = (i + 1);
  }
  let dp: number[][] = [];
  let total: number[][] = [];
  let root: number[][] = [];
  i = 0;
  while ((i < n)) {
    let dp_row: number[] = [];
    let total_row: number[] = [];
    let root_row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      if ((i == j)) {
        dp_row.push(freqs[(i) < 0 ? freqs.length + (i) : i]);
        total_row.push(freqs[(i) < 0 ? freqs.length + (i) : i]);
        root_row.push(i);
      } else {
        dp_row.push(0);
        total_row.push(0);
        root_row.push(0);
      }
      j = (j + 1);
    }
    dp.push(dp_row);
    total.push(total_row);
    root.push(root_row);
    i = (i + 1);
  }
  let interval_length: number = 2;
  let INF: number = 2147483647;
  while ((interval_length <= n)) {
    i = 0;
    while ((i < ((n - interval_length) + 1))) {
      let j: number = ((i + interval_length) - 1);
      dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = INF;
      total[(i) < 0 ? total.length + (i) : i][(j) < 0 ? total[(i) < 0 ? total.length + (i) : i].length + (j) : j] = (total[(i) < 0 ? total.length + (i) : i][(Math.trunc((j - 1))) < 0 ? total[(i) < 0 ? total.length + (i) : i].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))] + freqs[(j) < 0 ? freqs.length + (j) : j]);
      let r: number = root[(i) < 0 ? root.length + (i) : i][(Math.trunc((j - 1))) < 0 ? root[(i) < 0 ? root.length + (i) : i].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
      while ((r <= root[(Math.trunc((i + 1))) < 0 ? root.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))][(j) < 0 ? root[(Math.trunc((i + 1))) < 0 ? root.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))].length + (j) : j])) {
        let left: number = ((r != i) ? dp[(i) < 0 ? dp.length + (i) : i][(Math.trunc((r - 1))) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (Math.trunc((r - 1))) : Math.trunc((r - 1))] : 0);
        let right: number = ((r != j) ? dp[(Math.trunc((r + 1))) < 0 ? dp.length + (Math.trunc((r + 1))) : Math.trunc((r + 1))][(j) < 0 ? dp[(Math.trunc((r + 1))) < 0 ? dp.length + (Math.trunc((r + 1))) : Math.trunc((r + 1))].length + (j) : j] : 0);
        let cost: number = ((left + total[(i) < 0 ? total.length + (i) : i][(j) < 0 ? total[(i) < 0 ? total.length + (i) : i].length + (j) : j]) + right);
        if ((dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] > cost)) {
          dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = cost;
          root[(i) < 0 ? root.length + (i) : i][(j) < 0 ? root[(i) < 0 ? root.length + (i) : i].length + (j) : j] = r;
        }
        r = (r + 1);
      }
      i = (i + 1);
    }
    interval_length = (interval_length + 1);
  }
  console.log(_str("Binary search tree nodes:"));
  i = 0;
  while ((i < n)) {
    print_node(nodes[(i) < 0 ? nodes.length + (i) : i]);
    i = (i + 1);
  }
  console.log(_str((("\nThe cost of optimal BST for given tree nodes is " + _str(dp[(Math.trunc(0)) < 0 ? dp.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc((n - 1))) < 0 ? dp[(Math.trunc(0)) < 0 ? dp.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc((n - 1))) : Math.trunc((n - 1))])) + ".")));
  print_binary_search_tree(root, keys, 0, (n - 1), -1, false);
}
function main() {
  let nodes: Node[] = [{"key": 12, "freq": 8}, {"key": 10, "freq": 34}, {"key": 20, "freq": 50}, {"key": 42, "freq": 3}, {"key": 25, "freq": 40}, {"key": 37, "freq": 30}];
  find_optimal_binary_search_tree(nodes);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

