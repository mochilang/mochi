// Generated by Mochi v0.10.64 on 2025-08-13 07:27:10 GMT+7

function make_list(len: number, value: number): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < len)) {
    arr.push(value);
    i = (i + 1);
  }
  return arr;
}
function trapped_rainwater(heights: number[]): number {
  if ((_len(heights) === 0)) {
    return 0;
  }
  let i: number = 0;
  while ((i < _len(heights))) {
    if ((heights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()] < 0)) {
      _panic("No height can be negative");
    }
    i = (i + 1);
  }
  let length: number = _len(heights);
  let left_max: number[] = make_list(length, 0);
  left_max[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? left_max.length + _mochi_idx : _mochi_idx;})()] = heights[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()];
  i = 1;
  while ((i < length)) {
    if ((heights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()] > left_max[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? left_max.length + _mochi_idx : _mochi_idx;})()])) {
      left_max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? left_max.length + _mochi_idx : _mochi_idx;})()] = heights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()];
    } else {
      left_max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? left_max.length + _mochi_idx : _mochi_idx;})()] = left_max[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? left_max.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  let right_max: number[] = make_list(length, 0);
  let last: number = (length - 1);
  right_max[(()=>{const _mochi_idx = last; return _mochi_idx < 0 ? right_max.length + _mochi_idx : _mochi_idx;})()] = heights[(()=>{const _mochi_idx = last; return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()];
  i = (last - 1);
  while ((i >= 0)) {
    if ((heights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()] > right_max[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? right_max.length + _mochi_idx : _mochi_idx;})()])) {
      right_max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? right_max.length + _mochi_idx : _mochi_idx;})()] = heights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()];
    } else {
      right_max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? right_max.length + _mochi_idx : _mochi_idx;})()] = right_max[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? right_max.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i - 1);
  }
  let total: number = 0;
  i = 0;
  while ((i < length)) {
    let left: number = left_max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? left_max.length + _mochi_idx : _mochi_idx;})()];
    let right: number = right_max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? right_max.length + _mochi_idx : _mochi_idx;})()];
    let smaller: number = ((left < right) ? left : right);
    total = (total + (smaller - heights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? heights.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return total;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(trapped_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])));
  console.log(_str(trapped_rainwater([7, 1, 5, 3, 6, 4])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

