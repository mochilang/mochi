// Generated by Mochi v0.10.64 on 2025-08-13 07:26:53 GMT+7

function find_min(numbers: number[]): number {
  let n: number = _len(numbers);
  let s: number = 0;
  let idx: number = 0;
  while ((idx < n)) {
    s = (s + numbers[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()]);
    idx = (idx + 1);
  }
  let dp: boolean[][] = [];
  let i: number = 0;
  while ((i <= n)) {
    let row: boolean[] = [];
    let j: number = 0;
    while ((j <= s)) {
      row.push(false);
      j = (j + 1);
    }
    dp.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i <= n)) {
    dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
    i = (i + 1);
  }
  let j: number = 1;
  while ((j <= s)) {
    dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = false;
    j = (j + 1);
  }
  i = 1;
  while ((i <= n)) {
    j = 1;
    while ((j <= s)) {
      dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if ((numbers[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()] <= j)) {
        if (dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - numbers[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()])); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
          dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  let diff: number = 0;
  j = Math.trunc(s / 2);
  while ((j >= 0)) {
    if (dp[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
      diff = (s - (2 * j));
      break
    }
    j = (j - 1);
  }
  return diff;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(find_min([1, 2, 3, 4, 5])));
  console.log(_str(find_min([5, 5, 5, 5, 5])));
  console.log(_str(find_min([5, 5, 5, 5])));
  console.log(_str(find_min([3])));
  console.log(_str(find_min([])));
  console.log(_str(find_min([1, 2, 3, 4])));
  console.log(_str(find_min([0, 0, 0, 0])));
  console.log(_str(find_min([-1, -5, 5, 1])));
  console.log(_str(find_min([9, 9, 9, 9, 9])));
  console.log(_str(find_min([1, 5, 10, 3])));
  console.log(_str(find_min([-1, 0, 1])));
  console.log(_str(find_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

