// Generated by Mochi v0.10.62 on 2025-08-09 16:03:36 GMT+7

function make_list(len: number, value: number): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < len)) {
    arr.push(value);
    i = (i + 1);
  }
  return arr;
}
function count_recursive(array: number[], target: number): number {
  if ((target < 0)) {
    return 0;
  }
  if ((target == 0)) {
    return 1;
  }
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(array))) {
    total = (total + count_recursive(array, (target - array[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? array.length + _mochi_idx : _mochi_idx;})()])));
    i = (i + 1);
  }
  return total;
}
function combination_sum_iv(array: number[], target: number): number {
  return count_recursive(array, target);
}
function count_dp(array: number[], target: number, dp: number[]): number {
  if ((target < 0)) {
    return 0;
  }
  if ((target == 0)) {
    return 1;
  }
  if ((dp[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()] > (0 - 1))) {
    return dp[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()];
  }
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(array))) {
    total = (total + count_dp(array, (target - array[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? array.length + _mochi_idx : _mochi_idx;})()]), dp));
    i = (i + 1);
  }
  dp[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()] = total;
  return total;
}
function combination_sum_iv_dp_array(array: number[], target: number): number {
  let dp: number[] = make_list((target + 1), -1);
  return count_dp(array, target, dp);
}
function combination_sum_iv_bottom_up(n: number, array: number[], target: number): number {
  let dp: number[] = make_list((target + 1), 0);
  dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()] = 1;
  let i: number = 1;
  while ((i <= target)) {
    let j: number = 0;
    while ((j < n)) {
      if (((i - array[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? array.length + _mochi_idx : _mochi_idx;})()]) >= 0)) {
        dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()] = (dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()] + dp[(()=>{const _mochi_idx = Math.trunc((i - array[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? array.length + _mochi_idx : _mochi_idx;})()])); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()]);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return dp[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(combination_sum_iv([1, 2, 5], 5))));
  console.log(_str(_str(combination_sum_iv_dp_array([1, 2, 5], 5))));
  console.log(_str(_str(combination_sum_iv_bottom_up(3, [1, 2, 5], 5))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

