// Generated by Mochi v0.10.64 on 2025-08-13 07:27:13 GMT+7

export interface Start_p { Healthy: number; Fever: number }
export interface Trans_p { Healthy: { Healthy: number; Fever: number }; Fever: { Healthy: number; Fever: number } }
export interface Emit_p { Healthy: { normal: number; cold: number; dizzy: number }; Fever: { normal: number; cold: number; dizzy: number } }
function key(state: string, obs: string): string {
  return ((state + "|") + obs);
}
function viterbi(observations: string[], states: string[], start_p: Record<string, number>, trans_p: Record<string, Record<string, number>>, emit_p: Record<string, Record<string, number>>): string[] {
  if (((_len(observations) === 0) || (_len(states) === 0))) {
    _panic("empty parameters");
  }
  let probs: Record<string, number> = {};
  let ptrs: Record<string, string> = {};
  let first_obs: string = observations[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? observations.length + _mochi_idx : _mochi_idx;})()];
  let i: number = 0;
  while ((i < _len(states))) {
    let state: string = states[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? states.length + _mochi_idx : _mochi_idx;})()];
    probs[(()=>{const _mochi_idx = key(state, first_obs); return _mochi_idx < 0 ? probs.length + _mochi_idx : _mochi_idx;})()] = (start_p[state] * emit_p[state][first_obs]);
    ptrs[(()=>{const _mochi_idx = key(state, first_obs); return _mochi_idx < 0 ? ptrs.length + _mochi_idx : _mochi_idx;})()] = "";
    i = (i + 1);
  }
  let t: number = 1;
  while ((t < _len(observations))) {
    let obs: string = observations[(()=>{const _mochi_idx = t; return _mochi_idx < 0 ? observations.length + _mochi_idx : _mochi_idx;})()];
    let j: number = 0;
    while ((j < _len(states))) {
      let state: string = states[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? states.length + _mochi_idx : _mochi_idx;})()];
      let max_prob: number = -1.0;
      let prev_state: string = "";
      let k: number = 0;
      while ((k < _len(states))) {
        let state0: string = states[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? states.length + _mochi_idx : _mochi_idx;})()];
        let obs0: string = observations[(()=>{const _mochi_idx = Math.trunc((t - 1)); return _mochi_idx < 0 ? observations.length + _mochi_idx : _mochi_idx;})()];
        let prob_prev: number = probs[key(state0, obs0)];
        let prob: number = ((prob_prev * trans_p[state0][state]) * emit_p[state][obs]);
        if ((prob > max_prob)) {
          max_prob = prob;
          prev_state = state0;
        }
        k = (k + 1);
      }
      probs[(()=>{const _mochi_idx = key(state, obs); return _mochi_idx < 0 ? probs.length + _mochi_idx : _mochi_idx;})()] = max_prob;
      ptrs[(()=>{const _mochi_idx = key(state, obs); return _mochi_idx < 0 ? ptrs.length + _mochi_idx : _mochi_idx;})()] = prev_state;
      j = (j + 1);
    }
    t = (t + 1);
  }
  let path: string[] = [];
  let n: number = 0;
  while ((n < _len(observations))) {
    path.push("");
    n = (n + 1);
  }
  let last_obs: string = observations[(()=>{const _mochi_idx = Math.trunc((_len(observations) - 1)); return _mochi_idx < 0 ? observations.length + _mochi_idx : _mochi_idx;})()];
  let max_final: number = -1.0;
  let last_state: string = "";
  let m: number = 0;
  while ((m < _len(states))) {
    let state: string = states[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? states.length + _mochi_idx : _mochi_idx;})()];
    let prob: number = probs[key(state, last_obs)];
    if ((prob > max_final)) {
      max_final = prob;
      last_state = state;
    }
    m = (m + 1);
  }
  let last_index: number = (_len(observations) - 1);
  path[(()=>{const _mochi_idx = last_index; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()] = last_state;
  let idx: number = last_index;
  while ((idx > 0)) {
    let obs: string = observations[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? observations.length + _mochi_idx : _mochi_idx;})()];
    let prev: string = ptrs[key(path[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()], obs)];
    path[(()=>{const _mochi_idx = (idx - 1); return _mochi_idx < 0 ? path.length + _mochi_idx : _mochi_idx;})()] = prev;
    idx = (idx - 1);
  }
  return path;
}
function join_words(words: string[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(words))) {
    if ((i > 0)) {
      res = (res + " ");
    }
    res = (res + words[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? words.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
let observations: string[] = ["normal", "cold", "dizzy"];
let states: string[] = ["Healthy", "Fever"];
let start_p: Start_p = {Healthy: 0.6, Fever: 0.4};
let trans_p: Trans_p = {Healthy: {Healthy: 0.7, Fever: 0.3}, Fever: {Healthy: 0.4, Fever: 0.6}};
let emit_p: Emit_p = {Healthy: {normal: 0.5, cold: 0.4, dizzy: 0.1}, Fever: {normal: 0.1, cold: 0.3, dizzy: 0.6}};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let result: string[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = viterbi(observations, states, start_p, trans_p, emit_p)
  console.log(_str(join_words(result)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

