// Generated by Mochi v0.10.64 on 2025-08-13 07:26:30 GMT+7

export interface KMeansResult { centroids: number[][]; assignments: number[] }
function distance_sq(a: number[], b: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(a))) {
    let diff: number = (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    sum = (sum + (diff * diff));
    i = (i + 1);
  }
  return sum;
}
function mean(vectors: number[][]): number[] {
  let dim: number = _len(vectors[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[] = [];
  let i: number = 0;
  while ((i < dim)) {
    let total: number = 0.0;
    let j: number = 0;
    while ((j < _len(vectors))) {
      total = (total + vectors[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vectors[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    res.push((total / _len(vectors)));
    i = (i + 1);
  }
  return res;
}
function k_means(vectors: number[][], k: number, iterations: number): KMeansResult {
  let centroids: number[][] = [];
  let i: number = 0;
  while ((i < k)) {
    centroids.push(vectors[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let assignments: number[] = [];
  let n: number = _len(vectors);
  i = 0;
  while ((i < n)) {
    assignments.push(0);
    i = (i + 1);
  }
  let it: number = 0;
  while ((it < iterations)) {
    let v: number = 0;
    while ((v < n)) {
      let best: number = 0;
      let bestDist: number = distance_sq(vectors[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()], centroids[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? centroids.length + _mochi_idx : _mochi_idx;})()]);
      let c: number = 1;
      while ((c < k)) {
        let d: number = distance_sq(vectors[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()], centroids[(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? centroids.length + _mochi_idx : _mochi_idx;})()]);
        if ((d < bestDist)) {
          bestDist = d;
          best = c;
        }
        c = (c + 1);
      }
      assignments[(()=>{const _mochi_idx = v; return _mochi_idx < 0 ? assignments.length + _mochi_idx : _mochi_idx;})()] = best;
      v = (v + 1);
    }
    let cIdx: number = 0;
    while ((cIdx < k)) {
      let cluster: number[][] = [];
      let v2: number = 0;
      while ((v2 < n)) {
        if ((assignments[(()=>{const _mochi_idx = v2; return _mochi_idx < 0 ? assignments.length + _mochi_idx : _mochi_idx;})()] === cIdx)) {
          cluster.push(vectors[(()=>{const _mochi_idx = v2; return _mochi_idx < 0 ? vectors.length + _mochi_idx : _mochi_idx;})()]);
        }
        v2 = (v2 + 1);
      }
      if ((_len(cluster) > 0)) {
        centroids[(()=>{const _mochi_idx = cIdx; return _mochi_idx < 0 ? centroids.length + _mochi_idx : _mochi_idx;})()] = mean(cluster);
      }
      cIdx = (cIdx + 1);
    }
    it = (it + 1);
  }
  return {centroids, assignments};
}
function main() {
  let vectors: number[][] = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]];
  let result: KMeansResult = k_means(vectors, 2, 5);
  console.log(_str(result.centroids));
  console.log(_str(result.assignments));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

