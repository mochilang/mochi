// Generated by Mochi v0.10.59 on 2025-08-06 21:51:44 GMT+7

function panic(msg: string) {
  console.log(_str(msg));
}
function catalan_numbers(upper_limit: number): number[] {
  if ((upper_limit < 0)) {
    panic("Limit for the Catalan sequence must be >= 0");
    return [];
  }
  let catalans: number[] = [1];
  let n: number = 1;
  while ((n <= upper_limit)) {
    let next_val: number = 0;
    let j: number = 0;
    while ((j < n)) {
      next_val = (next_val + (catalans[(j) < 0 ? catalans.length + (j) : j] * catalans[(Math.trunc(((n - j) - 1))) < 0 ? catalans.length + (Math.trunc(((n - j) - 1))) : Math.trunc(((n - j) - 1))]));
      j = (j + 1);
    }
    catalans.push(next_val);
    n = (n + 1);
  }
  return catalans;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(catalan_numbers(5))));
  console.log(_str(_str(catalan_numbers(2))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

