// Generated by Mochi v0.10.59 on 2025-08-06 21:52:27 GMT+7

function make_list(len: number, value: number): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < len)) {
    arr.push(value);
    i = (i + 1);
  }
  return arr;
}
function int_sqrt(n: number): number {
  let r: number = 0;
  while ((((r + 1) * (r + 1)) <= n)) {
    r = (r + 1);
  }
  return r;
}
function minimum_squares_to_represent_a_number(_number: number): number {
  if ((_number < 0)) {
    _panic("the value of input must not be a negative number");
  }
  if ((_number == 0)) {
    return 1;
  }
  let answers: number[] = make_list((_number + 1), -1);
  answers[(0) < 0 ? answers.length + (0) : 0] = 0;
  let i: number = 1;
  while ((i <= _number)) {
    let answer: number = i;
    let root: number = int_sqrt(i);
    let j: number = 1;
    while ((j <= root)) {
      let current_answer: number = (1 + answers[(Math.trunc((i - (j * j)))) < 0 ? answers.length + (Math.trunc((i - (j * j)))) : Math.trunc((i - (j * j)))]);
      if ((current_answer < answer)) {
        answer = current_answer;
      }
      j = (j + 1);
    }
    answers[(i) < 0 ? answers.length + (i) : i] = answer;
    i = (i + 1);
  }
  return answers[(_number) < 0 ? answers.length + (_number) : _number];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(minimum_squares_to_represent_a_number(25)));
  console.log(_str(minimum_squares_to_represent_a_number(21)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

