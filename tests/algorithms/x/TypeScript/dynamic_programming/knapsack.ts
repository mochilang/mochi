// Generated by Mochi v0.10.64 on 2025-08-13 07:26:32 GMT+7

let f: number[][] = [];
function max_int(a: number, b: number): number {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}
function init_f(n: number, w: number): number[][] {
  let table: number[][] = [];
  let i: number = 0;
  while ((i <= n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j <= w)) {
      if (((i === 0) || (j === 0))) {
        row.push(0);
      } else {
        row.push(-1);
      }
      j = (j + 1);
    }
    table.push(row);
    i = (i + 1);
  }
  return table;
}
function mf_knapsack(i: number, wt: number[], val: number[], j: number): number {
  if ((f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] < 0)) {
    if ((j < wt[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? wt.length + _mochi_idx : _mochi_idx;})()])) {
      f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = mf_knapsack((i - 1), wt, val, j);
    } else {
      let without_item: number = mf_knapsack((i - 1), wt, val, j);
      let with_item: number = (mf_knapsack((i - 1), wt, val, (j - wt[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? wt.length + _mochi_idx : _mochi_idx;})()])) + val[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? val.length + _mochi_idx : _mochi_idx;})()]);
      f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = max_int(without_item, with_item);
    }
  }
  return f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? f[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
function create_matrix(rows: number, cols: number): number[][] {
  let matrix: number[][] = [];
  let i: number = 0;
  while ((i <= rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j <= cols)) {
      row.push(0);
      j = (j + 1);
    }
    matrix.push(row);
    i = (i + 1);
  }
  return matrix;
}
function knapsack(w: number, wt: number[], val: number[], n: number): number[][] {
  let dp: number[][] = create_matrix(n, w);
  let i: number = 1;
  while ((i <= n)) {
    let w_: number = 1;
    while ((w_ <= w)) {
      if ((wt[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? wt.length + _mochi_idx : _mochi_idx;})()] <= w_)) {
        let include: number = (val[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? val.length + _mochi_idx : _mochi_idx;})()] + dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((w_ - wt[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? wt.length + _mochi_idx : _mochi_idx;})()])); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        let exclude: number = dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = w_; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = w_; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = max_int(include, exclude);
      } else {
        dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = w_; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = w_; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      }
      w_ = (w_ + 1);
    }
    i = (i + 1);
  }
  return dp;
}
function construct_solution(dp: number[][], wt: number[], i: number, j: number, optimal_set: number[]): number[] {
  if (((i > 0) && (j > 0))) {
    if ((dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      return construct_solution(dp, wt, (i - 1), j, optimal_set);
    } else {
      let with_prev: number[] = construct_solution(dp, wt, (i - 1), (j - wt[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? wt.length + _mochi_idx : _mochi_idx;})()]), optimal_set);
      return [...with_prev, i];
    }
  }
  return optimal_set;
}
export interface KnapsackResult { value: number; subset: number[] }
function knapsack_with_example_solution(w: number, wt: number[], val: number[]): KnapsackResult {
  let num_items: number = _len(wt);
  let dp_table: number[][] = knapsack(w, wt, val, num_items);
  let optimal_val: number = dp_table[(()=>{const _mochi_idx = num_items; return _mochi_idx < 0 ? dp_table.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? dp_table[(()=>{const _mochi_idx = num_items; return _mochi_idx < 0 ? dp_table.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let subset: number[] = construct_solution(dp_table, wt, num_items, w, []);
  return {value: optimal_val, subset};
}
function format_set(xs: number[]): string {
  let res: string = "{";
  let i: number = 0;
  while ((i < _len(xs))) {
    res = (res + _str(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]));
    if (((i + 1) < _len(xs))) {
      res = (res + ", ");
    }
    i = (i + 1);
  }
  res = (res + "}");
  return res;
}
let val_list: number[] = [3, 2, 4, 4];
let wt_list: number[] = [4, 3, 2, 3];
let n: number = 4;
let w_cap: number = 6;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let dp_table: number[][]
let optimal_solution: number
let example: KnapsackResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  f = init_f(n, w_cap);
dp_table = knapsack(w_cap, wt_list, val_list, n)
optimal_solution = dp_table[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp_table.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = w_cap; return _mochi_idx < 0 ? dp_table[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp_table.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]
  console.log(_str(optimal_solution));
  console.log(_str(mf_knapsack(n, wt_list, val_list, w_cap)));
example = knapsack_with_example_solution(w_cap, wt_list, val_list)
  console.log(_str(("optimal_value = " + _str(example.value))));
  console.log(_str(("An optimal subset corresponding to the optimal value " + format_set(example.subset))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

