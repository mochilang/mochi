// Generated by Mochi v0.10.59 on 2025-08-06 21:51:56 GMT+7

let INF: number = 1000000000;
export interface Graph { n: number; dp: number[][] }
function new_graph(n: number): Graph {
  let dp: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      if ((i == j)) {
        row.push(0);
      } else {
        row.push(INF);
      }
      j = (j + 1);
    }
    dp.push(row);
    i = (i + 1);
  }
  return {n, dp};
}
function add_edge(g: Graph, u: number, v: number, w: number) {
  let dp: number[][] = g.dp;
  let row: number[] = dp[(u) < 0 ? dp.length + (u) : u];
  row[(v) < 0 ? row.length + (v) : v] = w;
  dp[(u) < 0 ? dp.length + (u) : u] = row;
  g.dp = dp;
}
function floyd_warshall(g: Graph) {
  let dp: number[][] = g.dp;
  let k: number = 0;
  while ((k < g.n)) {
    let i: number = 0;
    while ((i < g.n)) {
      let j: number = 0;
      while ((j < g.n)) {
        let alt: number = (dp[(i) < 0 ? dp.length + (i) : i][(k) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (k) : k] + dp[(k) < 0 ? dp.length + (k) : k][(j) < 0 ? dp[(k) < 0 ? dp.length + (k) : k].length + (j) : j]);
        let row: number[] = dp[(i) < 0 ? dp.length + (i) : i];
        if ((alt < row[(j) < 0 ? row.length + (j) : j])) {
          row[(j) < 0 ? row.length + (j) : j] = alt;
          dp[(i) < 0 ? dp.length + (i) : i] = row;
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    k = (k + 1);
  }
  g.dp = dp;
}
function show_min(g: Graph, u: number, v: number): number {
  return g.dp[(u) < 0 ? g.dp.length + (u) : u][(v) < 0 ? g.dp[(u) < 0 ? g.dp.length + (u) : u].length + (v) : v];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let graph: Graph
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
graph = new_graph(5)
  add_edge(graph, 0, 2, 9);
  add_edge(graph, 0, 4, 10);
  add_edge(graph, 1, 3, 5);
  add_edge(graph, 2, 3, 7);
  add_edge(graph, 3, 0, 10);
  add_edge(graph, 3, 1, 2);
  add_edge(graph, 3, 2, 1);
  add_edge(graph, 3, 4, 6);
  add_edge(graph, 4, 1, 3);
  add_edge(graph, 4, 2, 4);
  add_edge(graph, 4, 3, 9);
  floyd_warshall(graph);
  console.log(_str(_str(show_min(graph, 1, 4))));
  console.log(_str(_str(show_min(graph, 0, 3))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

