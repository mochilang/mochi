// Generated by Mochi v0.10.64 on 2025-08-13 07:26:40 GMT+7

function ceil_index(v: number[], left: number, right: number, key: number): number {
  let l: number = left;
  let r: number = right;
  while (((r - l) > 1)) {
    let middle: number = Math.trunc((l + r) / 2);
    if ((v[(()=>{const _mochi_idx = middle; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] >= key)) {
      r = middle;
    } else {
      l = middle;
    }
  }
  return r;
}
function longest_increasing_subsequence_length(v: number[]): number {
  if ((_len(v) === 0)) {
    return 0;
  }
  let tail: number[] = [];
  let i: number = 0;
  while ((i < _len(v))) {
    tail.push(0);
    i = (i + 1);
  }
  let length: number = 1;
  tail[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? tail.length + _mochi_idx : _mochi_idx;})()] = v[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()];
  let j: number = 1;
  while ((j < _len(v))) {
    if ((v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] < tail[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? tail.length + _mochi_idx : _mochi_idx;})()])) {
      tail[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? tail.length + _mochi_idx : _mochi_idx;})()] = v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()];
    } else {
      if ((v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] > tail[(()=>{const _mochi_idx = Math.trunc((length - 1)); return _mochi_idx < 0 ? tail.length + _mochi_idx : _mochi_idx;})()])) {
        tail[(()=>{const _mochi_idx = length; return _mochi_idx < 0 ? tail.length + _mochi_idx : _mochi_idx;})()] = v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()];
        length = (length + 1);
      } else {
        let idx: number = ceil_index(tail, -1, (length - 1), v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]);
        tail[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? tail.length + _mochi_idx : _mochi_idx;})()] = v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()];
      }
    }
    j = (j + 1);
  }
  return length;
}
function main() {
  let example1: number[] = [2, 5, 3, 7, 11, 8, 10, 13, 6];
  let example2: number[] = [];
  let example3: number[] = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
  let example4: number[] = [5, 4, 3, 2, 1];
  console.log(_str(longest_increasing_subsequence_length(example1)));
  console.log(_str(longest_increasing_subsequence_length(example2)));
  console.log(_str(longest_increasing_subsequence_length(example3)));
  console.log(_str(longest_increasing_subsequence_length(example4)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

