// Generated by Mochi v0.10.59 on 2025-08-06 21:52:07 GMT+7

function longest_subsequence(xs: number[]): number[] {
  let n: number = _len(xs);
  if ((n <= 1)) {
    return xs;
  }
  let pivot: number = xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)];
  let is_found: boolean = false;
  let i: number = 1;
  let longest_subseq: number[] = [];
  while ((!is_found && (i < n))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] < pivot)) {
      is_found = true;
      let temp_array = xs.slice(i, n);
      temp_array = longest_subsequence(temp_array);
      if ((_len(temp_array) > _len(longest_subseq))) {
        longest_subseq = temp_array;
      }
    } else {
      i = (i + 1);
    }
  }
  let filtered: number[] = [];
  let j: number = 1;
  while ((j < n)) {
    if ((xs[(j) < 0 ? xs.length + (j) : j] >= pivot)) {
      filtered.push(xs[(j) < 0 ? xs.length + (j) : j]);
    }
    j = (j + 1);
  }
  let candidate: number[] = [];
  candidate.push(pivot);
  candidate = concat(candidate, longest_subsequence(filtered));
  if ((_len(candidate) > _len(longest_subseq))) {
    return candidate;
  } else {
    return longest_subseq;
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

