// Generated by Mochi v0.10.64 on 2025-08-13 07:26:52 GMT+7

function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function minimum_cost_path(matrix: number[][]): number {
  let rows: number = _len(matrix);
  let cols: number = _len(matrix[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()]);
  let j: number = 1;
  while ((j < cols)) {
    let row0: number[] = matrix[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()];
    row0[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row0.length + _mochi_idx : _mochi_idx;})()] = (row0[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row0.length + _mochi_idx : _mochi_idx;})()] + row0[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? row0.length + _mochi_idx : _mochi_idx;})()]);
    matrix[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()] = row0;
    j = (j + 1);
  }
  let i: number = 1;
  while ((i < rows)) {
    let row: number[] = matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()];
    row[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()] = (row[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()] + matrix[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()] = row;
    i = (i + 1);
  }
  i = 1;
  while ((i < rows)) {
    let row: number[] = matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()];
    j = 1;
    while ((j < cols)) {
      let up: number = matrix[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let left: number = row[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()];
      let best: number = min_int(up, left);
      row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()] = (row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()] + best);
      j = (j + 1);
    }
    matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()] = row;
    i = (i + 1);
  }
  return matrix[(()=>{const _mochi_idx = Math.trunc((rows - 1)); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((cols - 1)); return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = Math.trunc((rows - 1)); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
let m1: number[][] = [[2, 1], [3, 1], [4, 2]];
let m2: number[][] = [[2, 1, 4], [2, 1, 3], [3, 2, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(minimum_cost_path(m1)));
  console.log(_str(minimum_cost_path(m2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

