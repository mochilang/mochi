// Generated by Mochi v0.10.59 on 2025-08-06 21:52:13 GMT+7

let INF: number = 1000000000;
function matrix_chain_multiply(arr: number[]): number {
  if ((_len(arr) < 2)) {
    return 0;
  }
  let n: number = _len(arr);
  let dp: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(INF);
      j = (j + 1);
    }
    dp.push(row);
    i = (i + 1);
  }
  i = (n - 1);
  while ((i > 0)) {
    let j: number = i;
    while ((j < n)) {
      if ((i == j)) {
        dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = 0;
      } else {
        let k: number = i;
        while ((k < j)) {
          let cost: number = ((dp[(i) < 0 ? dp.length + (i) : i][(k) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (k) : k] + dp[(Math.trunc((k + 1))) < 0 ? dp.length + (Math.trunc((k + 1))) : Math.trunc((k + 1))][(j) < 0 ? dp[(Math.trunc((k + 1))) < 0 ? dp.length + (Math.trunc((k + 1))) : Math.trunc((k + 1))].length + (j) : j]) + ((arr[(Math.trunc((i - 1))) < 0 ? arr.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))] * arr[(k) < 0 ? arr.length + (k) : k]) * arr[(j) < 0 ? arr.length + (j) : j]));
          if ((cost < dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j])) {
            dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = cost;
          }
          k = (k + 1);
        }
      }
      j = (j + 1);
    }
    i = (i - 1);
  }
  return dp[(Math.trunc(1)) < 0 ? dp.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc((n - 1))) < 0 ? dp[(Math.trunc(1)) < 0 ? dp.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc((n - 1))) : Math.trunc((n - 1))];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

