// Generated by Mochi v0.10.59 on 2025-08-06 21:52:28 GMT+7

function make_list(len: number, value: number): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < len)) {
    arr.push(value);
    i = (i + 1);
  }
  return arr;
}
function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function min_steps_to_one(_number: number): number {
  if ((_number <= 0)) {
    return 0;
  }
  let table: number[] = make_list((_number + 1), (_number + 1));
  table[(1) < 0 ? table.length + (1) : 1] = 0;
  let i: number = 1;
  while ((i < _number)) {
    table[((i + 1)) < 0 ? table.length + ((i + 1)) : (i + 1)] = min_int(table[(Math.trunc((i + 1))) < 0 ? table.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))], (table[(i) < 0 ? table.length + (i) : i] + 1));
    if (((i * 2) <= _number)) {
      table[((i * 2)) < 0 ? table.length + ((i * 2)) : (i * 2)] = min_int(table[(Math.trunc((i * 2))) < 0 ? table.length + (Math.trunc((i * 2))) : Math.trunc((i * 2))], (table[(i) < 0 ? table.length + (i) : i] + 1));
    }
    if (((i * 3) <= _number)) {
      table[((i * 3)) < 0 ? table.length + ((i * 3)) : (i * 3)] = min_int(table[(Math.trunc((i * 3))) < 0 ? table.length + (Math.trunc((i * 3))) : Math.trunc((i * 3))], (table[(i) < 0 ? table.length + (i) : i] + 1));
    }
    i = (i + 1);
  }
  return table[(_number) < 0 ? table.length + (_number) : _number];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(min_steps_to_one(10))));
  console.log(_str(_str(min_steps_to_one(15))));
  console.log(_str(_str(min_steps_to_one(6))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

