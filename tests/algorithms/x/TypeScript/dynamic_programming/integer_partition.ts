// Generated by Mochi v0.10.59 on 2025-08-06 21:51:57 GMT+7

function partition(m: number): number {
  let memo: number[][] = [];
  let i: number = 0;
  while ((i < (m + 1))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < m)) {
      row.push(0);
      j = (j + 1);
    }
    memo.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i < (m + 1))) {
    memo[(i) < 0 ? memo.length + (i) : i][(0) < 0 ? memo[(i) < 0 ? memo.length + (i) : i].length + (0) : 0] = 1;
    i = (i + 1);
  }
  let n: number = 0;
  while ((n < (m + 1))) {
    let k: number = 1;
    while ((k < m)) {
      memo[(n) < 0 ? memo.length + (n) : n][(k) < 0 ? memo[(n) < 0 ? memo.length + (n) : n].length + (k) : k] = (memo[(n) < 0 ? memo.length + (n) : n][(k) < 0 ? memo[(n) < 0 ? memo.length + (n) : n].length + (k) : k] + memo[(n) < 0 ? memo.length + (n) : n][(Math.trunc((k - 1))) < 0 ? memo[(n) < 0 ? memo.length + (n) : n].length + (Math.trunc((k - 1))) : Math.trunc((k - 1))]);
      if (((n - k) > 0)) {
        memo[(n) < 0 ? memo.length + (n) : n][(k) < 0 ? memo[(n) < 0 ? memo.length + (n) : n].length + (k) : k] = (memo[(n) < 0 ? memo.length + (n) : n][(k) < 0 ? memo[(n) < 0 ? memo.length + (n) : n].length + (k) : k] + memo[(Math.trunc(((n - k) - 1))) < 0 ? memo.length + (Math.trunc(((n - k) - 1))) : Math.trunc(((n - k) - 1))][(k) < 0 ? memo[(Math.trunc(((n - k) - 1))) < 0 ? memo.length + (Math.trunc(((n - k) - 1))) : Math.trunc(((n - k) - 1))].length + (k) : k]);
      }
      k = (k + 1);
    }
    n = (n + 1);
  }
  return memo[(m) < 0 ? memo.length + (m) : m][(Math.trunc((m - 1))) < 0 ? memo[(m) < 0 ? memo.length + (m) : m].length + (Math.trunc((m - 1))) : Math.trunc((m - 1))];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(partition(5)));
  console.log(_str(partition(7)));
  console.log(_str(partition(100)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

