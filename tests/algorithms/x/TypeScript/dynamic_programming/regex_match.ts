// Generated by Mochi v0.10.64 on 2025-08-13 07:27:04 GMT+7

function recursive_match(text: string, pattern: string): boolean {
  if ((_len(pattern) === 0)) {
    return (_len(text) === 0);
  }
  if ((_len(text) === 0)) {
    if (((_len(pattern) >= 2) && ((pattern).substring((_len(pattern) - 1), _len(pattern)) === "*"))) {
      return recursive_match(text, (pattern).substring(0, (_len(pattern) - 2)));
    }
    return false;
  }
  let last_text: string = (text).substring((_len(text) - 1), _len(text));
  let last_pattern: string = (pattern).substring((_len(pattern) - 1), _len(pattern));
  if (((last_text === last_pattern) || (last_pattern === "."))) {
    return recursive_match((text).substring(0, (_len(text) - 1)), (pattern).substring(0, (_len(pattern) - 1)));
  }
  if ((last_pattern === "*")) {
    if (recursive_match((text).substring(0, (_len(text) - 1)), pattern)) {
      return true;
    }
    return recursive_match(text, (pattern).substring(0, (_len(pattern) - 2)));
  }
  return false;
}
function dp_match(text: string, pattern: string): boolean {
  let m: number = _len(text);
  let n: number = _len(pattern);
  let dp: boolean[][] = [];
  let i: number = 0;
  while ((i <= m)) {
    let row: boolean[] = [];
    let j: number = 0;
    while ((j <= n)) {
      row.push(false);
      j = (j + 1);
    }
    dp.push(row);
    i = (i + 1);
  }
  dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
  let j: number = 1;
  while ((j <= n)) {
    if ((((pattern).substring((j - 1), j) === "*") && (j >= 2))) {
      if (dp[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 2)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
        dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
      }
    }
    j = (j + 1);
  }
  i = 1;
  while ((i <= m)) {
    j = 1;
    while ((j <= n)) {
      let p_char: string = (pattern).substring((j - 1), j);
      let t_char: string = (text).substring((i - 1), i);
      if (((p_char === ".") || (p_char === t_char))) {
        if (dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
          dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
        }
      } else {
        if ((p_char === "*")) {
          if ((j >= 2)) {
            if (dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 2)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
              dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
            }
            let prev_p: string = (pattern).substring((j - 2), (j - 1));
            if (((prev_p === ".") || (prev_p === t_char))) {
              if (dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
                dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
              }
            }
          }
        } else {
          dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = false;
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return dp[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
function print_bool(b: boolean) {
  if (b) {
    console.log("");
  } else {
    _stdout_write("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_bool(recursive_match("abc", "a.c"));
  print_bool(recursive_match("abc", "af*.c"));
  print_bool(recursive_match("abc", "a.c*"));
  print_bool(recursive_match("abc", "a.c*d"));
  print_bool(recursive_match("aa", ".*"));
  print_bool(dp_match("abc", "a.c"));
  print_bool(dp_match("abc", "af*.c"));
  print_bool(dp_match("abc", "a.c*"));
  print_bool(dp_match("abc", "a.c*d"));
  print_bool(dp_match("aa", ".*"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

