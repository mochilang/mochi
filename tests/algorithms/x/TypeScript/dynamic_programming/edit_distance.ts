// Generated by Mochi v0.10.59 on 2025-08-06 21:51:48 GMT+7

function min3(a: number, b: number, c: number): number {
  let m: number = a;
  if ((b < m)) {
    m = b;
  }
  if ((c < m)) {
    m = c;
  }
  return m;
}
function helper_top_down(word1: string, word2: string, dp: number[][], i: number, j: number): number {
  if ((i < 0)) {
    return (j + 1);
  }
  if ((j < 0)) {
    return (i + 1);
  }
  if ((dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] != (0 - 1))) {
    return dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j];
  }
  if (((word1).substring(i, (i + 1)) == (word2).substring(j, (j + 1)))) {
    dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = helper_top_down(word1, word2, dp, (i - 1), (j - 1));
  } else {
    let insert: number = helper_top_down(word1, word2, dp, i, (j - 1));
    let _delete: number = helper_top_down(word1, word2, dp, (i - 1), j);
    let replace: number = helper_top_down(word1, word2, dp, (i - 1), (j - 1));
    dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = (1 + min3(insert, _delete, replace));
  }
  return dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j];
}
function min_dist_top_down(word1: string, word2: string): number {
  let m: number = _len(word1);
  let n: number = _len(word2);
  let dp: number[][] = [];
  for (let _ = 0; _ < m; _++) {
    let row: number[] = [];
    for (let _2 = 0; _2 < n; _2++) {
      row.push((0 - 1));
    }
    dp.push(row);
  }
  return helper_top_down(word1, word2, dp, (m - 1), (n - 1));
}
function min_dist_bottom_up(word1: string, word2: string): number {
  let m: number = _len(word1);
  let n: number = _len(word2);
  let dp: number[][] = [];
  for (let _ = 0; _ < (m + 1); _++) {
    let row: number[] = [];
    for (let _2 = 0; _2 < (n + 1); _2++) {
      row.push(0);
    }
    dp.push(row);
  }
  for (let i = 0; i < (m + 1); i++) {
    for (let j = 0; j < (n + 1); j++) {
      if ((i == 0)) {
        dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = j;
      } else {
        if ((j == 0)) {
          dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = i;
        } else {
          if (((word1).substring((i - 1), i) == (word2).substring((j - 1), j))) {
            dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(Math.trunc((j - 1))) < 0 ? dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
          } else {
            let insert: number = dp[(i) < 0 ? dp.length + (i) : i][(Math.trunc((j - 1))) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
            let _delete: number = dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(j) < 0 ? dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (j) : j];
            let replace: number = dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(Math.trunc((j - 1))) < 0 ? dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
            dp[(i) < 0 ? dp.length + (i) : i][(j) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j) : j] = (1 + min3(insert, _delete, replace));
          }
        }
      }
    }
  }
  return dp[(m) < 0 ? dp.length + (m) : m][(n) < 0 ? dp[(m) < 0 ? dp.length + (m) : m].length + (n) : n];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(min_dist_top_down("intention", "execution"))));
  console.log(_str(_str(min_dist_top_down("intention", ""))));
  console.log(_str(_str(min_dist_top_down("", ""))));
  console.log(_str(_str(min_dist_bottom_up("intention", "execution"))));
  console.log(_str(_str(min_dist_bottom_up("intention", ""))));
  console.log(_str(_str(min_dist_bottom_up("", ""))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

