// Generated by Mochi v0.10.64 on 2025-08-13 07:26:36 GMT+7

function longest_common_substring(text1: string, text2: string): string {
  if (((_len(text1) === 0) || (_len(text2) === 0))) {
    return "";
  }
  let m: number = _len(text1);
  let n: number = _len(text2);
  let dp: number[][] = [];
  let i: number = 0;
  while ((i < (m + 1))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < (n + 1))) {
      row.push(0);
      j = (j + 1);
    }
    dp.push(row);
    i = (i + 1);
  }
  let end_pos: number = 0;
  let max_len: number = 0;
  let ii: number = 1;
  while ((ii <= m)) {
    let jj: number = 1;
    while ((jj <= n)) {
      if (((text1).substring((ii - 1), ii) === (text2).substring((jj - 1), jj))) {
        dp[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = jj; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (1 + dp[(()=>{const _mochi_idx = Math.trunc((ii - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((jj - 1)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((ii - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        if ((dp[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = jj; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > max_len)) {
          max_len = dp[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = jj; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = ii; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
          end_pos = ii;
        }
      }
      jj = (jj + 1);
    }
    ii = (ii + 1);
  }
  return (text1).substring((end_pos - max_len), end_pos);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(longest_common_substring("abcdef", "xabded")));
  console.log(_str("\n"));
  console.log(_str(longest_common_substring("zxabcdezy", "yzabcdezx")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

