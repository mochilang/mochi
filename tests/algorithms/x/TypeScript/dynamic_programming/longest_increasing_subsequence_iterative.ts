// Generated by Mochi v0.10.59 on 2025-08-06 21:52:08 GMT+7

function copy_list(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return res;
}
function longest_subsequence(arr: number[]): number[] {
  let n: number = _len(arr);
  let lis: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let single: number[] = [];
    single.push(arr[(i) < 0 ? arr.length + (i) : i]);
    lis.push(single);
    i = (i + 1);
  }
  i = 1;
  while ((i < n)) {
    let prev: number = 0;
    while ((prev < i)) {
      if (((arr[(prev) < 0 ? arr.length + (prev) : prev] <= arr[(i) < 0 ? arr.length + (i) : i]) && ((_len(lis[(prev) < 0 ? lis.length + (prev) : prev]) + 1) > _len(lis[(i) < 0 ? lis.length + (i) : i])))) {
        let temp: number[] = copy_list(lis[(prev) < 0 ? lis.length + (prev) : prev]);
        let temp2: any[] = [...temp, arr[(i) < 0 ? arr.length + (i) : i]];
        lis[(i) < 0 ? lis.length + (i) : i] = temp2;
      }
      prev = (prev + 1);
    }
    i = (i + 1);
  }
  let result: number[] = [];
  i = 0;
  while ((i < n)) {
    if ((_len(lis[(i) < 0 ? lis.length + (i) : i]) > _len(result))) {
      result = lis[(i) < 0 ? lis.length + (i) : i];
    }
    i = (i + 1);
  }
  return result;
}
function main() {
  console.log(_str(_str(longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))));
  console.log(_str(_str(longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9]))));
  console.log(_str(_str(longest_subsequence([9, 8, 7, 6, 5, 7]))));
  console.log(_str(_str(longest_subsequence([28, 26, 12, 23, 35, 39]))));
  console.log(_str(_str(longest_subsequence([1, 1, 1]))));
  console.log(_str(_str(longest_subsequence([]))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

