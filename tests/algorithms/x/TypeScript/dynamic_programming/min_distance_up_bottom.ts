// Generated by Mochi v0.10.59 on 2025-08-06 21:52:20 GMT+7

function min3(a: number, b: number, c: number): number {
  let m: number = a;
  if ((b < m)) {
    m = b;
  }
  if ((c < m)) {
    m = c;
  }
  return m;
}
function helper(word1: string, word2: string, cache: number[][], i: number, j: number, len1: number, len2: number): number {
  if ((i >= len1)) {
    return (len2 - j);
  }
  if ((j >= len2)) {
    return (len1 - i);
  }
  if ((cache[(i) < 0 ? cache.length + (i) : i][(j) < 0 ? cache[(i) < 0 ? cache.length + (i) : i].length + (j) : j] != (0 - 1))) {
    return cache[(i) < 0 ? cache.length + (i) : i][(j) < 0 ? cache[(i) < 0 ? cache.length + (i) : i].length + (j) : j];
  }
  let diff: number = 0;
  if (((word1).substring(i, (i + 1)) != (word2).substring(j, (j + 1)))) {
    diff = 1;
  }
  let delete_cost: number = (1 + helper(word1, word2, cache, (i + 1), j, len1, len2));
  let insert_cost: number = (1 + helper(word1, word2, cache, i, (j + 1), len1, len2));
  let replace_cost: number = (diff + helper(word1, word2, cache, (i + 1), (j + 1), len1, len2));
  cache[(i) < 0 ? cache.length + (i) : i][(j) < 0 ? cache[(i) < 0 ? cache.length + (i) : i].length + (j) : j] = min3(delete_cost, insert_cost, replace_cost);
  return cache[(i) < 0 ? cache.length + (i) : i][(j) < 0 ? cache[(i) < 0 ? cache.length + (i) : i].length + (j) : j];
}
function min_distance_up_bottom(word1: string, word2: string): number {
  let len1: number = _len(word1);
  let len2: number = _len(word2);
  let cache: number[][] = [];
  for (let _ = 0; _ < len1; _++) {
    let row: number[] = [];
    for (let _2 = 0; _2 < len2; _2++) {
      row.push((0 - 1));
    }
    cache.push(row);
  }
  return helper(word1, word2, cache, 0, 0, len1, len2);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(min_distance_up_bottom("intention", "execution"))));
  console.log(_str(_str(min_distance_up_bottom("intention", ""))));
  console.log(_str(_str(min_distance_up_bottom("", ""))));
  console.log(_str(_str(min_distance_up_bottom("zooicoarchaeologist", "zoologist"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

