// Generated by Mochi v0.10.59 on 2025-08-06 21:51:53 GMT+7

export interface Fibonacci { sequence: number[] }
export interface FibGetResult { fib: Fibonacci; values: number[] }
function create_fibonacci(): Fibonacci {
  return {"sequence": [0, 1]};
}
function fib_get(f: Fibonacci, index: number): FibGetResult {
  let seq: number[] = f.sequence;
  while ((_len(seq) < index)) {
    let next: number = (seq[(Math.trunc((_len(seq) - 1))) < 0 ? seq.length + (Math.trunc((_len(seq) - 1))) : Math.trunc((_len(seq) - 1))] + seq[(Math.trunc((_len(seq) - 2))) < 0 ? seq.length + (Math.trunc((_len(seq) - 2))) : Math.trunc((_len(seq) - 2))]);
    seq.push(next);
  }
  f.sequence = seq;
  let result: number[] = [];
  let i: number = 0;
  while ((i < index)) {
    result.push(seq[(i) < 0 ? seq.length + (i) : i]);
    i = (i + 1);
  }
  return {"fib": f, "values": result};
}
function main() {
  let fib: Fibonacci = create_fibonacci();
  let res: FibGetResult = fib_get(fib, 10);
  fib = res.fib;
  console.log(_str(_str(res.values)));
  res = fib_get(fib, 5);
  fib = res.fib;
  console.log(_str(_str(res.values)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

