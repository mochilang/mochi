// Generated by Mochi v0.10.59 on 2025-08-06 21:52:40 GMT+7

function copy_list(src: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(src))) {
    result.push(src[(i) < 0 ? src.length + (i) : i]);
    i = (i + 1);
  }
  return result;
}
function subset_combinations(elements: number[], n: number): number[][] {
  let r: number = _len(elements);
  if ((n > r)) {
    return [];
  }
  let dp: number[][][] = [];
  let i: number = 0;
  while ((i <= r)) {
    dp.push([]);
    i = (i + 1);
  }
  dp[(0) < 0 ? dp.length + (0) : 0] = [...dp[(Math.trunc(0)) < 0 ? dp.length + (Math.trunc(0)) : Math.trunc(0)], []];
  i = 1;
  while ((i <= r)) {
    let j: number = i;
    while ((j > 0)) {
      let prevs: number[][] = dp[(Math.trunc((j - 1))) < 0 ? dp.length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
      let k: number = 0;
      while ((k < _len(prevs))) {
        let prev: number[] = prevs[(k) < 0 ? prevs.length + (k) : k];
        let comb: number[] = copy_list(prev);
        comb.push(elements[(Math.trunc((i - 1))) < 0 ? elements.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))]);
        dp[(j) < 0 ? dp.length + (j) : j] = [...dp[(j) < 0 ? dp.length + (j) : j], comb];
        k = (k + 1);
      }
      j = (j - 1);
    }
    i = (i + 1);
  }
  return dp[(n) < 0 ? dp.length + (n) : n];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(subset_combinations([10, 20, 30, 40], 2))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

