// Generated by Mochi v0.10.59 on 2025-08-06 21:52:34 GMT+7

export interface Query { left: number; right: number }
function prefix_sum(arr: number[], queries: Query[]): number[] {
  let dp: number[] = [];
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((i == 0)) {
      dp.push(arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)]);
    } else {
      dp.push((dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))] + arr[(i) < 0 ? arr.length + (i) : i]));
    }
    i = (i + 1);
  }
  let result: number[] = [];
  let j: number = 0;
  while ((j < _len(queries))) {
    let q: Query = queries[(j) < 0 ? queries.length + (j) : j];
    let sum: number = dp[(Math.trunc(q.right)) < 0 ? dp.length + (Math.trunc(q.right)) : Math.trunc(q.right)];
    if ((q.left > 0)) {
      sum = (sum - dp[(Math.trunc((q.left - 1))) < 0 ? dp.length + (Math.trunc((q.left - 1))) : Math.trunc((q.left - 1))]);
    }
    result.push(sum);
    j = (j + 1);
  }
  return result;
}
let arr1: number[] = [1, 4, 6, 2, 61, 12];
let queries1: Query[] = [{"left": 2, "right": 5}, {"left": 1, "right": 5}, {"left": 3, "right": 4}];
let arr2: number[] = [4, 2, 1, 6, 3];
let queries2: Query[] = [{"left": 3, "right": 4}, {"left": 1, "right": 3}, {"left": 0, "right": 2}];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(prefix_sum(arr1, queries1))));
  console.log(_str(_str(prefix_sum(arr2, queries2))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

