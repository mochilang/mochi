// Generated by Mochi v0.10.59 on 2025-08-06 21:52:37 GMT+7

function enforce_args(n: number, prices: number[]) {
  if ((n < 0)) {
    _panic("n must be non-negative");
  }
  if ((n > _len(prices))) {
    _panic("price list is shorter than n");
  }
}
function bottom_up_cut_rod(n: number, prices: number[]): number {
  enforce_args(n, prices);
  let max_rev: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    if ((i == 0)) {
      max_rev.push(0);
    } else {
      max_rev.push(-2147483648);
    }
    i = (i + 1);
  }
  let length: number = 1;
  while ((length <= n)) {
    let best: number = max_rev[(length) < 0 ? max_rev.length + (length) : length];
    let j: number = 1;
    while ((j <= length)) {
      let candidate: number = (prices[(Math.trunc((j - 1))) < 0 ? prices.length + (Math.trunc((j - 1))) : Math.trunc((j - 1))] + max_rev[(Math.trunc((length - j))) < 0 ? max_rev.length + (Math.trunc((length - j))) : Math.trunc((length - j))]);
      if ((candidate > best)) {
        best = candidate;
      }
      j = (j + 1);
    }
    max_rev[(length) < 0 ? max_rev.length + (length) : length] = best;
    length = (length + 1);
  }
  return max_rev[(n) < 0 ? max_rev.length + (n) : n];
}
let prices: number[] = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(bottom_up_cut_rod(4, prices)));
  console.log(_str(bottom_up_cut_rod(10, prices)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

