// Generated by Mochi v0.10.59 on 2025-08-06 21:52:30 GMT+7

function make_list(len: number, value: number): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < len)) {
    arr.push(value);
    i = (i + 1);
  }
  return arr;
}
function max_int(a: number, b: number): number {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}
function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  } else {
    return b;
  }
}
function min3(a: number, b: number, c: number): number {
  return min_int(min_int(a, b), c);
}
function minimum_tickets_cost(days: number[], costs: number[]): number {
  if ((_len(days) == 0)) {
    return 0;
  }
  let last_day: number = days[(Math.trunc((_len(days) - 1))) < 0 ? days.length + (Math.trunc((_len(days) - 1))) : Math.trunc((_len(days) - 1))];
  let dp: number[] = make_list((last_day + 1), 0);
  let day_index: number = 0;
  let d: number = 1;
  while ((d <= last_day)) {
    if (((day_index < _len(days)) && (d == days[(day_index) < 0 ? days.length + (day_index) : day_index]))) {
      let cost1: number = (dp[(Math.trunc((d - 1))) < 0 ? dp.length + (Math.trunc((d - 1))) : Math.trunc((d - 1))] + costs[(Math.trunc(0)) < 0 ? costs.length + (Math.trunc(0)) : Math.trunc(0)]);
      let cost7: number = (dp[(Math.trunc(max_int(0, (d - 7)))) < 0 ? dp.length + (Math.trunc(max_int(0, (d - 7)))) : Math.trunc(max_int(0, (d - 7)))] + costs[(Math.trunc(1)) < 0 ? costs.length + (Math.trunc(1)) : Math.trunc(1)]);
      let cost30: number = (dp[(Math.trunc(max_int(0, (d - 30)))) < 0 ? dp.length + (Math.trunc(max_int(0, (d - 30)))) : Math.trunc(max_int(0, (d - 30)))] + costs[(Math.trunc(2)) < 0 ? costs.length + (Math.trunc(2)) : Math.trunc(2)]);
      dp[(d) < 0 ? dp.length + (d) : d] = min3(cost1, cost7, cost30);
      day_index = (day_index + 1);
    } else {
      dp[(d) < 0 ? dp.length + (d) : d] = dp[(Math.trunc((d - 1))) < 0 ? dp.length + (Math.trunc((d - 1))) : Math.trunc((d - 1))];
    }
    d = (d + 1);
  }
  return dp[(last_day) < 0 ? dp.length + (last_day) : last_day];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(minimum_tickets_cost([1, 4, 6, 7, 8, 20], [2, 7, 15]))));
  console.log(_str(_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 7, 15]))));
  console.log(_str(_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 90, 150]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

