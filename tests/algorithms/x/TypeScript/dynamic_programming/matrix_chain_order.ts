// Generated by Mochi v0.10.64 on 2025-08-13 07:26:44 GMT+7

export interface MatrixChainResult { matrix: number[][]; solution: number[][] }
function make_2d(n: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(0);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function matrix_chain_order(arr: number[]): MatrixChainResult {
  let n: number = _len(arr);
  let m: number[][] = make_2d(n);
  let s: number[][] = make_2d(n);
  let chain_length: number = 2;
  while ((chain_length < n)) {
    let a: number = 1;
    while ((a < ((n - chain_length) + 1))) {
      let b: number = ((a + chain_length) - 1);
      m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1000000000;
      let c: number = a;
      while ((c < b)) {
        let cost: number = ((m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + m[(()=>{const _mochi_idx = Math.trunc((c + 1)); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = Math.trunc((c + 1)); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + ((arr[(()=>{const _mochi_idx = Math.trunc((a - 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] * arr[(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]) * arr[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]));
        if ((cost < m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
          m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = cost;
          s[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? s[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = c;
        }
        c = (c + 1);
      }
      a = (a + 1);
    }
    chain_length = (chain_length + 1);
  }
  return {matrix: m, solution: s};
}
function optimal_parenthesization(s: number[][], i: number, j: number): string {
  if ((i === j)) {
    return ("A" + _str(i));
  } else {
    let left: string = optimal_parenthesization(s, i, s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
    let right: string = optimal_parenthesization(s, (s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + 1), j);
    return (((("( " + left) + " ") + right) + " )");
  }
}
function main() {
  let arr: number[] = [30, 35, 15, 5, 10, 20, 25];
  let n: number = _len(arr);
  let res: MatrixChainResult = matrix_chain_order(arr);
  let m: number[][] = res.matrix;
  let s: number[][] = res.solution;
  console.log(_str(("No. of Operation required: " + _str(m[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((n - 1)); return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))));
  let seq: string = optimal_parenthesization(s, 1, (n - 1));
  console.log(_str(seq));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

