// Generated by Mochi v0.10.59 on 2025-08-06 21:52:47 GMT+7

function make_bool_list(n: number): boolean[] {
  let row: boolean[] = [];
  let i: number = 0;
  while ((i < n)) {
    row.push(false);
    i = (i + 1);
  }
  return row;
}
function make_bool_matrix(rows: number, cols: number): boolean[][] {
  let matrix: boolean[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    matrix.push(make_bool_list(cols));
    i = (i + 1);
  }
  return matrix;
}
function is_match(s: string, p: string): boolean {
  let n: number = _len(s);
  let m: number = _len(p);
  let dp: boolean[][] = make_bool_matrix((n + 1), (m + 1));
  dp[(0) < 0 ? dp.length + (0) : 0][(0) < 0 ? dp[(0) < 0 ? dp.length + (0) : 0].length + (0) : 0] = true;
  let j: number = 1;
  while ((j <= m)) {
    if ((p.slice((j - 1), j) == "*")) {
      dp[(0) < 0 ? dp.length + (0) : 0][(j) < 0 ? dp[(0) < 0 ? dp.length + (0) : 0].length + (j) : j] = dp[(Math.trunc(0)) < 0 ? dp.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc((j - 1))) < 0 ? dp[(Math.trunc(0)) < 0 ? dp.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))];
    }
    j = (j + 1);
  }
  let i: number = 1;
  while ((i <= n)) {
    let j2: number = 1;
    while ((j2 <= m)) {
      let pc: string = p.slice((j2 - 1), j2);
      let sc: string = s.slice((i - 1), i);
      if (((pc == sc) || (pc == "?"))) {
        dp[(i) < 0 ? dp.length + (i) : i][(j2) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j2) : j2] = dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(Math.trunc((j2 - 1))) < 0 ? dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (Math.trunc((j2 - 1))) : Math.trunc((j2 - 1))];
      } else {
        if ((pc == "*")) {
          if ((dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))][(j2) < 0 ? dp[(Math.trunc((i - 1))) < 0 ? dp.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))].length + (j2) : j2] || dp[(i) < 0 ? dp.length + (i) : i][(Math.trunc((j2 - 1))) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (Math.trunc((j2 - 1))) : Math.trunc((j2 - 1))])) {
            dp[(i) < 0 ? dp.length + (i) : i][(j2) < 0 ? dp[(i) < 0 ? dp.length + (i) : i].length + (j2) : j2] = true;
          }
        }
      }
      j2 = (j2 + 1);
    }
    i = (i + 1);
  }
  return dp[(n) < 0 ? dp.length + (n) : n][(m) < 0 ? dp[(n) < 0 ? dp.length + (n) : n].length + (m) : m];
}
function print_bool(b: boolean) {
  if (b) {
    console.log("");
  } else {
    _stdout_write("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_bool(is_match("abc", "a*c"));
  print_bool(is_match("abc", "a*d"));
  print_bool(is_match("baaabab", "*****ba*****ab"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

