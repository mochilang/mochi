// Generated by Mochi v0.10.62 on 2025-08-09 16:03:31 GMT+7

function allConstruct(target: string, wordBank: string[]): string[][] {
  let tableSize: number = (_len(target) + 1);
  let table: string[][][] = [];
  let idx: number = 0;
  while ((idx < tableSize)) {
    let empty: string[][] = [];
    table.push(empty);
    idx = (idx + 1);
  }
  let base: string[] = [];
  table[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()] = [base];
  let i: number = 0;
  while ((i < tableSize)) {
    if ((_len(table[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()]) != 0)) {
      let w: number = 0;
      while ((w < _len(wordBank))) {
        let word: string = wordBank[(()=>{const _mochi_idx = w; return _mochi_idx < 0 ? wordBank.length + _mochi_idx : _mochi_idx;})()];
        let wordLen: number = _len(word);
        if ((target.slice(i, (i + wordLen)) == word)) {
          let k: number = 0;
          while ((k < _len(table[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()]))) {
            let way: string[] = table[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? table[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
            let combination: string[] = [];
            let m: number = 0;
            while ((m < _len(way))) {
              combination.push(way[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? way.length + _mochi_idx : _mochi_idx;})()]);
              m = (m + 1);
            }
            combination.push(word);
            let nextIndex: number = (i + wordLen);
            table[(()=>{const _mochi_idx = nextIndex; return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()].push(combination);
            k = (k + 1);
          }
        }
        w = (w + 1);
      }
    }
    i = (i + 1);
  }
  return table[(()=>{const _mochi_idx = Math.trunc(_len(target)); return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(allConstruct("jwajalapa", ["jwa", "j", "w", "a", "la", "lapa"]))));
  console.log(_str(_str(allConstruct("rajamati", ["s", "raj", "amat", "raja", "ma", "i", "t"]))));
  console.log(_str(_str(allConstruct("hexagonosaurus", ["h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

