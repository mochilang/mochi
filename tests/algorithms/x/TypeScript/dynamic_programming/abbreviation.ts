// Generated by Mochi v0.10.62 on 2025-08-09 16:03:30 GMT+7

function index_of(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let idx = index_of(upper, ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = index_of(lower, ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  return 0;
}
function chr(n: number): string {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  if (((n >= 65) && (n < 91))) {
    return upper.slice((n - 65), (n - 64));
  }
  if (((n >= 97) && (n < 123))) {
    return lower.slice((n - 97), (n - 96));
  }
  return "?";
}
function to_upper_char(c: string): string {
  let code: number = ord(c);
  if (((code >= 97) && (code <= 122))) {
    return chr((code - 32));
  }
  return c;
}
function is_lower(c: string): boolean {
  let code: number = ord(c);
  return ((code >= 97) && (code <= 122));
}
function abbr(a: string, b: string): boolean {
  let n: number = _len(a);
  let m: number = _len(b);
  let dp: boolean[][] = [];
  let i: number = 0;
  while ((i <= n)) {
    let row: boolean[] = [];
    let j: number = 0;
    while ((j <= m)) {
      row.push(false);
      j = (j + 1);
    }
    dp.push(row);
    i = (i + 1);
  }
  dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
  i = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j <= m)) {
      if (dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) {
        if (((j < m) && (to_upper_char(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]) == b[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]))) {
          dp[(()=>{const _mochi_idx = (i + 1); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = (i + 1); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
        }
        if (is_lower(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()])) {
          dp[(()=>{const _mochi_idx = (i + 1); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = (i + 1); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return dp[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
function print_bool(b: boolean) {
  if (b) {
    console.log("");
  } else {
    _stdout_write("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_bool(abbr("daBcd", "ABC"));
  print_bool(abbr("dBcd", "ABC"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

