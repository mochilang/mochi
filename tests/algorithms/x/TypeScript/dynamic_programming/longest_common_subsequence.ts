// Generated by Mochi v0.10.64 on 2025-08-13 07:26:34 GMT+7

export interface LcsResult { length: number; sequence: string }
function zeros_matrix(rows: number, cols: number): number[][] {
  let matrix: number[][] = [];
  let i: number = 0;
  while ((i <= rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j <= cols)) {
      row.push(0);
      j = (j + 1);
    }
    matrix.push(row);
    i = (i + 1);
  }
  return matrix;
}
function longest_common_subsequence(x: string, y: string): LcsResult {
  let m: number = _len(x);
  let n: number = _len(y);
  let dp: number[][] = zeros_matrix(m, n);
  let i: number = 1;
  while ((i <= m)) {
    let j: number = 1;
    while ((j <= n)) {
      if ((x[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()] === y[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()])) {
        dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + 1);
      } else {
        if ((dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
          dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        } else {
          dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  let seq: string = "";
  let i2: number = m;
  let j2: number = n;
  while (((i2 > 0) && (j2 > 0))) {
    if ((x[(()=>{const _mochi_idx = Math.trunc((i2 - 1)); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()] === y[(()=>{const _mochi_idx = Math.trunc((j2 - 1)); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()])) {
      seq = (x[(()=>{const _mochi_idx = Math.trunc((i2 - 1)); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()] + seq);
      i2 = (i2 - 1);
      j2 = (j2 - 1);
    } else {
      if ((dp[(()=>{const _mochi_idx = Math.trunc((i2 - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = Math.trunc((i2 - 1)); return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] >= dp[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j2 - 1)); return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = i2; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        i2 = (i2 - 1);
      } else {
        j2 = (j2 - 1);
      }
    }
  }
  return {length: dp[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? dp[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? dp.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], sequence: seq};
}
let a: string = "AGGTAB";
let b: string = "GXTXAYB";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let res: LcsResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
res = longest_common_subsequence(a, b)
  console.log(_str(((("len = " + _str(res.length)) + ", sub-sequence = ") + res.sequence)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

