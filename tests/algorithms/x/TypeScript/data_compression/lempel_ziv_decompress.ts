// Generated by Mochi v0.10.59 on 2025-08-06 20:40:20 GMT+7

export interface Lexicon { "0": string; "1": string }
function list_contains(xs: string[], v: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == v)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function is_power_of_two(n: number): boolean {
  if ((n < 1)) {
    return false;
  }
  let x: number = n;
  while ((x > 1)) {
    if (((x % 2) != 0)) {
      return false;
    }
    x = Math.trunc(x / 2);
  }
  return true;
}
function bin_string(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let res: string = "";
  let x: number = n;
  while ((x > 0)) {
    let bit: number = (x % 2);
    res = (_str(bit) + res);
    x = Math.trunc(x / 2);
  }
  return res;
}
function decompress_data(data_bits: string): string {
  let lexicon: Lexicon = {"0": "0", "1": "1"};
  let keys: string[] = ["0", "1"];
  let result: string = "";
  let curr_string: string = "";
  let index: number = 2;
  let i: number = 0;
  while ((i < _len(data_bits))) {
    curr_string = (curr_string + (data_bits).substring(i, (i + 1)));
    if (!list_contains(keys, curr_string)) {
      i = (i + 1);
      continue
    }
    let last_match_id = lexicon[curr_string];
    result = (result + last_match_id);
    lexicon[curr_string] = (last_match_id + "0");
    if (is_power_of_two(index)) {
      let new_lex: Record<string, string> = {};
      let new_keys: string[] = [];
      let j: number = 0;
      while ((j < _len(keys))) {
        let curr_key = keys[j];
        new_lex[("0" + curr_key)] = lexicon[curr_key];
        new_keys.push(("0" + curr_key));
        j = (j + 1);
      }
      lexicon = new_lex;
      keys = new_keys;
    }
    let new_key: string = bin_string(index);
    lexicon[new_key] = (last_match_id + "1");
    keys.push(new_key);
    index = (index + 1);
    curr_string = "";
    i = (i + 1);
  }
  return result;
}
let sample: string = "1011001";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let decompressed: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
decompressed = decompress_data(sample)
  console.log(_str(decompressed));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

