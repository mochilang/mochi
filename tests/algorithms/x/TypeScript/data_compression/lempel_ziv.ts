// Generated by Mochi v0.10.59 on 2025-08-06 20:40:19 GMT+7

export interface Dict { "0": number; "1": number }
function to_binary(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let num: number = n;
  let res: string = "";
  while ((num > 0)) {
    let bit = (num % 2);
    res = (_str(bit) + res);
    num = Math.trunc(num / 2);
  }
  return res;
}
function contains_key_int(m: Record<string, number>, key: string): boolean {
  for (const k of _keys(m)) {
    if ((k == key)) {
      return true;
    }
  }
  return false;
}
function lzw_compress(bits: string): string {
  let dict: Dict = {"0": 0, "1": 1};
  let current: string = "";
  let result: string = "";
  let index: number = 2;
  let i: number = 0;
  while ((i < _len(bits))) {
    let ch: string = bits[i];
    let candidate: string = (current + ch);
    if (contains_key_int(dict, candidate)) {
      current = candidate;
    } else {
      result = (result + to_binary(dict[current]));
      dict[candidate] = index;
      index = (index + 1);
      current = ch;
    }
    i = (i + 1);
  }
  if ((current != "")) {
    result = (result + to_binary(dict[current]));
  }
  return result;
}
let data: string = "01001100100111";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _keys(obj: any): any[] {
  return Object.keys(obj);
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(lzw_compress(data)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

