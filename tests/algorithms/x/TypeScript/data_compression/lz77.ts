// Generated by Mochi v0.10.59 on 2025-08-06 20:40:22 GMT+7

export interface Token { offset: number; length: number; indicator: string }
function token_to_string(t: Token): string {
  return (((((("(" + _str(t.offset)) + ", ") + _str(t.length)) + ", ") + t.indicator) + ")");
}
function tokens_to_string(ts: Token[]): string {
  let res: string = "[";
  let i: number = 0;
  while ((i < _len(ts))) {
    res = (res + token_to_string(ts[i]));
    if ((i < (_len(ts) - 1))) {
      res = (res + ", ");
    }
    i = (i + 1);
  }
  return (res + "]");
}
function match_length_from_index(text: string, window: string, text_index: number, window_index: number): number {
  if (((text_index >= _len(text)) || (window_index >= _len(window)))) {
    return 0;
  }
  let tc: string = (text).substring(text_index, (text_index + 1));
  let wc: string = (window).substring(window_index, (window_index + 1));
  if ((tc != wc)) {
    return 0;
  }
  return (1 + match_length_from_index(text, (window + tc), (text_index + 1), (window_index + 1)));
}
function find_encoding_token(text: string, search_buffer: string): Token {
  if ((_len(text) == 0)) {
    panic("We need some text to work with.");
  }
  let length: number = 0;
  let offset: number = 0;
  if ((_len(search_buffer) == 0)) {
    return {offset, length, "indicator": (text).substring(0, 1)};
  }
  let i: number = 0;
  while ((i < _len(search_buffer))) {
    let ch: string = (search_buffer).substring(i, (i + 1));
    let found_offset: number = (_len(search_buffer) - i);
    if ((ch == (text).substring(0, 1))) {
      let found_length: number = match_length_from_index(text, search_buffer, 0, i);
      if ((found_length >= length)) {
        offset = found_offset;
        length = found_length;
      }
    }
    i = (i + 1);
  }
  return {offset, length, "indicator": (text).substring(length, (length + 1))};
}
function lz77_compress(text: string, window_size: number, lookahead: number): Token[] {
  let search_buffer_size: number = (window_size - lookahead);
  let output: Token[] = [];
  let search_buffer: string = "";
  let remaining: string = text;
  while ((_len(remaining) > 0)) {
    let token: Token = find_encoding_token(remaining, search_buffer);
    let add_len: number = (token.length + 1);
    search_buffer = (search_buffer + (remaining).substring(0, add_len));
    if ((_len(search_buffer) > search_buffer_size)) {
      search_buffer = (search_buffer).substring((_len(search_buffer) - search_buffer_size), _len(search_buffer));
    }
    remaining = (remaining).substring(add_len, _len(remaining));
    output.push(token);
  }
  return output;
}
function lz77_decompress(tokens: Token[]): string {
  let output: string = "";
  for (const t of tokens) {
    let i: number = 0;
    while ((i < t.length)) {
      output = (output + (output).substring((_len(output) - t.offset), ((_len(output) - t.offset) + 1)));
      i = (i + 1);
    }
    output = (output + t.indicator);
  }
  return output;
}
let tokens_example: Token[] = [{"offset": 0, "length": 0, "indicator": "c"}, {"offset": 0, "length": 0, "indicator": "a"}, {"offset": 0, "length": 0, "indicator": "b"}, {"offset": 0, "length": 0, "indicator": "r"}, {"offset": 3, "length": 1, "indicator": "c"}, {"offset": 2, "length": 1, "indicator": "d"}, {"offset": 7, "length": 4, "indicator": "r"}, {"offset": 3, "length": 5, "indicator": "d"}];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
let c1: Token[]
let c2: Token[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
c1 = lz77_compress("ababcbababaa", 13, 6)
  console.log(_str(tokens_to_string(c1)));
c2 = lz77_compress("aacaacabcabaaac", 13, 6)
  console.log(_str(tokens_to_string(c2)));
  console.log(_str(lz77_decompress(tokens_example)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

