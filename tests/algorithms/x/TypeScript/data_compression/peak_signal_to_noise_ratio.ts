// Generated by Mochi v0.10.59 on 2025-08-06 20:40:24 GMT+7

function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function ln(x: number): number {
  let t: number = ((x - 1.0) / (x + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let n: number = 1;
  while ((n <= 19)) {
    sum = (sum + (term / n));
    term = ((term * t) * t);
    n = (n + 2);
  }
  return (2.0 * sum);
}
function log10(x: number): number {
  return (ln(x) / ln(10.0));
}
function peak_signal_to_noise_ratio(original: number[][], contrast: number[][]): number {
  let mse: number = 0.0;
  let i: number = 0;
  while ((i < _len(original))) {
    let j: number = 0;
    while ((j < _len(original[i]))) {
      let diff: number = (original[i][j] - contrast[i][j]);
      mse = (mse + (diff * diff));
      j = (j + 1);
    }
    i = (i + 1);
  }
  let size: number = (_len(original) * _len(original[Math.trunc(0)]));
  mse = (mse / size);
  if ((mse == 0.0)) {
    return 100.0;
  }
  let PIXEL_MAX: number = 255.0;
  return (20.0 * log10((PIXEL_MAX / sqrtApprox(mse))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

