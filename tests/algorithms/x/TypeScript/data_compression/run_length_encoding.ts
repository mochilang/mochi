// Generated by Mochi v0.10.59 on 2025-08-06 20:40:26 GMT+7

function run_length_encode(text: string): string {
  if ((_len(text) == 0)) {
    return "";
  }
  let encoded: string = "";
  let count: number = 1;
  let i: number = 0;
  while ((i < _len(text))) {
    if ((((i + 1) < _len(text)) && (text[i] == text[Math.trunc((i + 1))]))) {
      count = (count + 1);
    } else {
      encoded = ((encoded + text[i]) + _str(count));
      count = 1;
    }
    i = (i + 1);
  }
  return encoded;
}
function run_length_decode(encoded: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(encoded))) {
    let ch: string = encoded[i];
    i = (i + 1);
    let num_str: string = "";
    while ((((i < _len(encoded)) && (encoded[i] >= "0")) && (encoded[i] <= "9"))) {
      num_str = (num_str + encoded[i]);
      i = (i + 1);
    }
    let count = Math.trunc(num_str);
    let j: number = 0;
    while ((j < count)) {
      res = (res + ch);
      j = (j + 1);
    }
  }
  return res;
}
let example1: string = "AAAABBBCCDAA";
let example2: string = "A";
let example3: string = "AAADDDDDDFFFCCCAAVVVV";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let encoded1: string
let encoded2: string
let encoded3: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
encoded1 = run_length_encode(example1)
  console.log(_str(encoded1));
  console.log(_str(run_length_decode(encoded1)));
encoded2 = run_length_encode(example2)
  console.log(_str(encoded2));
  console.log(_str(run_length_decode(encoded2)));
encoded3 = run_length_encode(example3)
  console.log(_str(encoded3));
  console.log(_str(run_length_decode(encoded3)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

