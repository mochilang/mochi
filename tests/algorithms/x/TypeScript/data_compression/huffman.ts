// Generated by Mochi v0.10.59 on 2025-08-06 20:40:17 GMT+7

export type Huffman = { tag: "Leaf"; symbol: string; freq: number } | { tag: "Node"; freq: number; left: Huffman; right: Huffman };
function get_freq(n: Huffman): number {
  return ((n.tag === "Leaf") ? n.freq : ((n.tag === "Node") ? n.freq : undefined));
}
function sort_nodes(nodes: Huffman[]): Huffman[] {
  let arr: Huffman[] = nodes;
  let i: number = 1;
  while ((i < _len(arr))) {
    let key: Huffman = arr[i];
    let j: number = (i - 1);
    while (((j >= 0) && (get_freq(arr[j]) > get_freq(key)))) {
      arr[(j + 1)] = arr[j];
      j = (j - 1);
    }
    arr[(j + 1)] = key;
    i = (i + 1);
  }
  return arr;
}
function rest(nodes: Huffman[]): Huffman[] {
  let res: Huffman[] = [];
  let i: number = 1;
  while ((i < _len(nodes))) {
    res.push(nodes[i]);
    i = (i + 1);
  }
  return res;
}
function count_freq(text: string): Huffman[] {
  let chars: string[] = [];
  let freqs: number[] = [];
  let i: number = 0;
  while ((i < _len(text))) {
    let c: string = (text).substring(i, (i + 1));
    let j: number = 0;
    let found: boolean = false;
    while ((j < _len(chars))) {
      if ((chars[j] == c)) {
        freqs[j] = (freqs[j] + 1);
        found = true;
        break
      }
      j = (j + 1);
    }
    if (!found) {
      chars.push(c);
      freqs.push(1);
    }
    i = (i + 1);
  }
  let leaves: Huffman[] = [];
  let k: number = 0;
  while ((k < _len(chars))) {
    leaves.push({"tag": "Leaf", "symbol": chars[k], "freq": freqs[k]});
    k = (k + 1);
  }
  return sort_nodes(leaves);
}
function build_tree(nodes: Huffman[]): Huffman {
  let arr: Huffman[] = nodes;
  while ((_len(arr) > 1)) {
    let left: Huffman = arr[Math.trunc(0)];
    arr = rest(arr);
    let right: Huffman = arr[Math.trunc(0)];
    arr = rest(arr);
    let node: Huffman = {"tag": "Node", "freq": (get_freq(left) + get_freq(right)), left, right};
    arr.push(node);
    arr = sort_nodes(arr);
  }
  return arr[Math.trunc(0)];
}
function concat_pairs(a: string[][], b: string[][]): string[][] {
  let res: string[][] = a;
  let i: number = 0;
  while ((i < _len(b))) {
    res.push(b[i]);
    i = (i + 1);
  }
  return res;
}
function collect_codes(tree: Huffman, prefix: string): string[][] {
  return ((tree.tag === "Leaf") ? [[tree.symbol, prefix]] : ((tree.tag === "Node") ? concat_pairs(collect_codes(tree.left, (prefix + "0")), collect_codes(tree.right, (prefix + "1"))) : undefined));
}
function find_code(pairs: string[][], ch: string): string {
  let i: number = 0;
  while ((i < _len(pairs))) {
    if ((pairs[i][Math.trunc(0)] == ch)) {
      return pairs[i][Math.trunc(1)];
    }
    i = (i + 1);
  }
  return "";
}
function huffman_encode(text: string): string {
  if ((text == "")) {
    return "";
  }
  let leaves: Huffman[] = count_freq(text);
  let tree: Huffman = build_tree(leaves);
  let codes: string[][] = collect_codes(tree, "");
  let encoded: string = "";
  let i: number = 0;
  while ((i < _len(text))) {
    let c: string = (text).substring(i, (i + 1));
    encoded = ((encoded + find_code(codes, c)) + " ");
    i = (i + 1);
  }
  return encoded;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(huffman_encode("beep boop beer!")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

