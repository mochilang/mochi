// Generated by Mochi v0.10.59 on 2025-08-06 20:40:15 GMT+7

export interface BWTResult { bwt_string: string; idx_original_string: number }
function all_rotations(s: string): string[] {
  let n: number = _len(s);
  let rotations: string[] = [];
  let i: number = 0;
  while ((i < n)) {
    let rotation: string = ((s).substring(i, n) + (s).substring(0, i));
    rotations.push(rotation);
    i = (i + 1);
  }
  return rotations;
}
function sort_strings(arr: string[]): string[] {
  let n: number = _len(arr);
  let i: number = 1;
  while ((i < n)) {
    let key: string = arr[i];
    let j: number = (i - 1);
    while (((j >= 0) && (arr[j] > key))) {
      arr[(j + 1)] = arr[j];
      j = (j - 1);
    }
    arr[(j + 1)] = key;
    i = (i + 1);
  }
  return arr;
}
function join_strings(arr: string[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(arr))) {
    res = (res + arr[i]);
    i = (i + 1);
  }
  return res;
}
function bwt_transform(s: string): BWTResult {
  if ((s == "")) {
    panic("input string must not be empty");
  }
  let rotations: string[] = all_rotations(s);
  rotations = sort_strings(rotations);
  let last_col: string[] = [];
  let i: number = 0;
  while ((i < _len(rotations))) {
    let word: string = rotations[i];
    last_col.push((word).substring((_len(word) - 1), _len(word)));
    i = (i + 1);
  }
  let bwt_string: string = join_strings(last_col);
  let idx: number = index_of(rotations, s);
  return {bwt_string, "idx_original_string": idx};
}
function index_of(arr: string[], target: string): number {
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((arr[i] == target)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function reverse_bwt(bwt_string: string, idx_original_string: number): string {
  if ((bwt_string == "")) {
    panic("bwt string must not be empty");
  }
  let n: number = _len(bwt_string);
  if (((idx_original_string < 0) || (idx_original_string >= n))) {
    panic("index out of range");
  }
  let ordered_rotations: string[] = [];
  let i: number = 0;
  while ((i < n)) {
    ordered_rotations.push("");
    i = (i + 1);
  }
  let iter: number = 0;
  while ((iter < n)) {
    let j: number = 0;
    while ((j < n)) {
      let ch: string = (bwt_string).substring(j, (j + 1));
      ordered_rotations[j] = (ch + ordered_rotations[j]);
      j = (j + 1);
    }
    ordered_rotations = sort_strings(ordered_rotations);
    iter = (iter + 1);
  }
  return ordered_rotations[idx_original_string];
}
let s: string = "^BANANA";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
let result: BWTResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = bwt_transform(s)
  console.log(_str(result.bwt_string));
  console.log(_str(result.idx_original_string));
  console.log(_str(reverse_bwt(result.bwt_string, result.idx_original_string)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

