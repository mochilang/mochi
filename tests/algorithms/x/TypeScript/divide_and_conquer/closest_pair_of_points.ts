// Generated by Mochi v0.10.60 on 2025-08-08 11:24:27 GMT+7

function abs(x: number): number {
  if ((x < 0.0)) {
    return (0.0 - x);
  }
  return x;
}
function sqrtApprox(x: number): number {
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function euclidean_distance_sqr(p1: number[], p2: number[]): number {
  let dx: number = (p1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? p1.length + _mochi_idx : _mochi_idx;})()] - p2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? p2.length + _mochi_idx : _mochi_idx;})()]);
  let dy: number = (p1[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? p1.length + _mochi_idx : _mochi_idx;})()] - p2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? p2.length + _mochi_idx : _mochi_idx;})()]);
  return ((dx * dx) + (dy * dy));
}
function column_based_sort(arr: number[][], column: number): number[][] {
  let points: number[][] = arr;
  let i: number = 0;
  while ((i < _len(points))) {
    let j: number = 0;
    while ((j < (_len(points) - 1))) {
      if ((points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column; return _mochi_idx < 0 ? points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > points[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column; return _mochi_idx < 0 ? points[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number[] = points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()];
        points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()] = points[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()];
        points[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return points;
}
function dis_between_closest_pair(points: number[][], count: number, min_dis: number): number {
  let i: number = 0;
  while ((i < (count - 1))) {
    let j: number = (i + 1);
    while ((j < count)) {
      let current: number = euclidean_distance_sqr(points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()], points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()]);
      if ((current < min_dis)) {
        min_dis = current;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return min_dis;
}
function dis_between_closest_in_strip(points: number[][], count: number, min_dis: number): number {
  let i_start: number = 0;
  if ((6 < (count - 1))) {
    i_start = 6;
  } else {
    i_start = (count - 1);
  }
  let i: number = i_start;
  while ((i < count)) {
    let j_start: number = 0;
    if (((i - 6) > 0)) {
      j_start = (i - 6);
    }
    let j: number = j_start;
    while ((j < i)) {
      let current: number = euclidean_distance_sqr(points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()], points[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? points.length + _mochi_idx : _mochi_idx;})()]);
      if ((current < min_dis)) {
        min_dis = current;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return min_dis;
}
function closest_pair_of_points_sqr(px: number[][], py: number[][], count: number): number {
  if ((count <= 3)) {
    return dis_between_closest_pair(px, count, 1000000000000000000.0);
  }
  let mid = Math.trunc(count / 2);
  let left: number = closest_pair_of_points_sqr(px, py.slice(0, mid), mid);
  let right = closest_pair_of_points_sqr(py, py.slice(mid, count), (count - mid));
  let best: number = left;
  if ((right < best)) {
    best = right;
  }
  let strip: number[][] = [];
  let i: number = 0;
  while ((i < _len(px))) {
    if ((abs((px[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? px.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? px[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? px.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - px[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? px.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? px[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? px.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) < best)) {
      strip.push(px[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? px.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  let strip_best: number = dis_between_closest_in_strip(strip, _len(strip), best);
  if ((strip_best < best)) {
    best = strip_best;
  }
  return best;
}
function closest_pair_of_points(points: number[][], count: number): number {
  let points_sorted_on_x: number[][] = column_based_sort(points, 0);
  let points_sorted_on_y: number[][] = column_based_sort(points, 1);
  let dist_sqr = closest_pair_of_points_sqr(points_sorted_on_x, points_sorted_on_y, count);
  return sqrtApprox(dist_sqr);
}
let points: number[][] = [[2.0, 3.0], [12.0, 30.0], [40.0, 50.0], [5.0, 1.0], [12.0, 10.0], [3.0, 4.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("Distance: " + _str(closest_pair_of_points(points, _len(points))))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

