// Generated by Mochi v0.10.61 on 2025-08-08 17:05:57 GMT+7

function copy_list(arr: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(arr))) {
    result.push(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return result;
}
function heaps(arr: number[]): number[][] {
  if ((_len(arr) <= 1)) {
    let single: number[][] = [];
    return [...single, copy_list(arr)];
  }
  let n: number = _len(arr);
  let c: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    c.push(0);
    i = (i + 1);
  }
  let res: number[][] = [];
  res.push(copy_list(arr));
  i = 0;
  while ((i < n)) {
    if ((c[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()] < i)) {
      if (((i % 2) == 0)) {
        let temp: number = arr[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = temp;
      } else {
        let temp: number = arr[(()=>{const _mochi_idx = Math.trunc(c[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()]); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = c[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = temp;
      }
      res.push(copy_list(arr));
      c[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()] = (c[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()] + 1);
      i = 0;
    } else {
      c[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.length + _mochi_idx : _mochi_idx;})()] = 0;
      i = (i + 1);
    }
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(heaps([1, 2, 3]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

