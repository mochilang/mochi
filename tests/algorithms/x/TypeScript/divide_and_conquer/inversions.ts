// Generated by Mochi v0.10.61 on 2025-08-08 17:05:58 GMT+7

export interface InvResult { arr: number[]; inv: number }
function slice_list(arr: number[], start: number, end: number): number[] {
  let res: number[] = [];
  let k: number = start;
  while ((k < end)) {
    res.push(arr[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
    k = (k + 1);
  }
  return res;
}
function count_inversions_bf(arr: number[]): number {
  let n: number = _len(arr);
  let inv: number = 0;
  let i: number = 0;
  while ((i < (n - 1))) {
    let j: number = (i + 1);
    while ((j < n)) {
      if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        inv = (inv + 1);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return inv;
}
function count_cross_inversions(p: number[], q: number[]): InvResult {
  let r: number[] = [];
  let i: number = 0;
  let j: number = 0;
  let inv: number = 0;
  while (((i < _len(p)) && (j < _len(q)))) {
    if ((p[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()] > q[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()])) {
      inv = (inv + (_len(p) - i));
      r.push(q[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    } else {
      r.push(p[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? p.length + _mochi_idx : _mochi_idx;})()]);
      i = (i + 1);
    }
  }
  if ((i < _len(p))) {
    r = concat(r, slice_list(p, i, _len(p)));
  } else {
    r = concat(r, slice_list(q, j, _len(q)));
  }
  return {"arr": r, inv};
}
function count_inversions_recursive(arr: number[]): InvResult {
  if ((_len(arr) <= 1)) {
    return {arr, "inv": 0};
  }
  let mid: number = Math.trunc(_len(arr) / 2);
  let p: number[] = slice_list(arr, 0, mid);
  let q: number[] = slice_list(arr, mid, _len(arr));
  let res_p: InvResult = count_inversions_recursive(p);
  let res_q: InvResult = count_inversions_recursive(q);
  let res_cross: InvResult = count_cross_inversions(res_p.arr, res_q.arr);
  let total: number = ((res_p.inv + res_q.inv) + res_cross.inv);
  return {"arr": res_cross.arr, "inv": total};
}
let arr_1: number[] = [10, 2, 1, 5, 5, 2, 11];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let nbf: number
let nrec: InvResult
let nbf2: number
let nrec2: InvResult
let nbf3: number
let nrec3: InvResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
nbf = count_inversions_bf(arr_1)
nrec = count_inversions_recursive(arr_1).inv
  console.log(_str("number of inversions = ") + " " + _str(nbf));
  arr_1 = [1, 2, 2, 5, 5, 10, 11];
nbf2 = count_inversions_bf(arr_1)
nrec2 = count_inversions_recursive(arr_1).inv
  console.log(_str("number of inversions = ") + " " + _str(nbf2));
  arr_1 = [];
nbf3 = count_inversions_bf(arr_1)
nrec3 = count_inversions_recursive(arr_1).inv
  console.log(_str("number of inversions = ") + " " + _str(nbf3));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

