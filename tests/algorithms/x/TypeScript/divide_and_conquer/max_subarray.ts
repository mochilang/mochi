// Generated by Mochi v0.10.61 on 2025-08-08 17:06:03 GMT+7

export interface Result { start: number; end: number; sum: number }
function max_cross_sum(arr: number[], low: number, mid: number, high: number): Result {
  let left_sum: number = -1000000000000000000.0;
  let max_left: number = -1;
  let sum: number = 0.0;
  let i: number = mid;
  while ((i >= low)) {
    sum = (sum + arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
    if ((sum > left_sum)) {
      left_sum = sum;
      max_left = i;
    }
    i = (i - 1);
  }
  let right_sum: number = -1000000000000000000.0;
  let max_right: number = -1;
  sum = 0.0;
  i = (mid + 1);
  while ((i <= high)) {
    sum = (sum + arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
    if ((sum > right_sum)) {
      right_sum = sum;
      max_right = i;
    }
    i = (i + 1);
  }
  return {"start": max_left, "end": max_right, "sum": (left_sum + right_sum)};
}
function max_subarray(arr: number[], low: number, high: number): Result {
  if ((_len(arr) == 0)) {
    return {"start": -1, "end": -1, "sum": 0.0};
  }
  if ((low == high)) {
    return {"start": low, "end": high, "sum": arr[(()=>{const _mochi_idx = low; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]};
  }
  let mid: number = Math.trunc((low + high) / 2);
  let left: Result = max_subarray(arr, low, mid);
  let right: Result = max_subarray(arr, (mid + 1), high);
  let cross: Result = max_cross_sum(arr, low, mid, high);
  if (((left.sum >= right.sum) && (left.sum >= cross.sum))) {
    return left;
  }
  if (((right.sum >= left.sum) && (right.sum >= cross.sum))) {
    return right;
  }
  return cross;
}
function show(res: Result) {
  console.log(_str((((((("[" + _str(res.start)) + ", ") + _str(res.end)) + ", ") + _str(res.sum)) + "]")));
}
function main() {
  let nums1: number[] = [-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0];
  let res1: Result = max_subarray(nums1, 0, (_len(nums1) - 1));
  show(res1);
  let nums2: number[] = [2.0, 8.0, 9.0];
  let res2: Result = max_subarray(nums2, 0, (_len(nums2) - 1));
  show(res2);
  let nums3: number[] = [0.0, 0.0];
  let res3: Result = max_subarray(nums3, 0, (_len(nums3) - 1));
  show(res3);
  let nums4: number[] = [-1.0, 0.0, 1.0];
  let res4: Result = max_subarray(nums4, 0, (_len(nums4) - 1));
  show(res4);
  let nums5: number[] = [-2.0, -3.0, -1.0, -4.0, -6.0];
  let res5: Result = max_subarray(nums5, 0, (_len(nums5) - 1));
  show(res5);
  let nums6: number[] = [];
  let res6: Result = max_subarray(nums6, 0, 0);
  show(res6);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

