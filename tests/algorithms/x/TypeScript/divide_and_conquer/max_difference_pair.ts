// Generated by Mochi v0.10.61 on 2025-08-08 17:06:01 GMT+7

function min_slice(a: number[], start: number, end: number): number {
  let m: number = a[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
  let i: number = (start + 1);
  while ((i < end)) {
    if ((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] < m)) {
      m = a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return m;
}
function max_slice(a: number[], start: number, end: number): number {
  let m: number = a[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
  let i: number = (start + 1);
  while ((i < end)) {
    if ((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] > m)) {
      m = a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  return m;
}
function max_diff_range(a: number[], start: number, end: number): number[] {
  if (((end - start) == 1)) {
    let v: number = a[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
    return [v, v];
  }
  let mid: number = Math.trunc((start + end) / 2);
  let left: number[] = max_diff_range(a, start, mid);
  let right: number[] = max_diff_range(a, mid, end);
  let small1: number = left[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? left.length + _mochi_idx : _mochi_idx;})()];
  let big1: number = left[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? left.length + _mochi_idx : _mochi_idx;})()];
  let small2: number = right[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? right.length + _mochi_idx : _mochi_idx;})()];
  let big2: number = right[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? right.length + _mochi_idx : _mochi_idx;})()];
  let min_left: number = min_slice(a, start, mid);
  let max_right: number = max_slice(a, mid, end);
  let cross_diff: number = (max_right - min_left);
  let left_diff: number = (big1 - small1);
  let right_diff: number = (big2 - small2);
  if (((right_diff > cross_diff) && (right_diff > left_diff))) {
    return [small2, big2];
  } else {
    if ((left_diff > cross_diff)) {
      return [small1, big1];
    } else {
      return [min_left, max_right];
    }
  }
}
function max_difference(a: number[]): number[] {
  return max_diff_range(a, 0, _len(a));
}
function main() {
  let result: number[] = max_difference([5, 11, 2, 1, 7, 9, 0, 7]);
  console.log(_str(_str(result)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

