// Generated by Mochi v0.10.61 on 2025-08-08 17:06:09 GMT+7

function default_matrix_multiplication(a: number[][], b: number[][]): number[][] {
  return [[((a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])), ((a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))], [((a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])), ((a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))]];
}
function matrix_addition(matrix_a: number[][], matrix_b: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(matrix_a))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push((matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + matrix_b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix_b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function matrix_subtraction(matrix_a: number[][], matrix_b: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(matrix_a))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push((matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - matrix_b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix_b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function split_matrix(a: number[][]): number[][][] {
  let n: number = _len(a);
  let mid: number = Math.trunc(n / 2);
  let top_left: number[][] = [];
  let top_right: number[][] = [];
  let bot_left: number[][] = [];
  let bot_right: number[][] = [];
  let i: number = 0;
  while ((i < mid)) {
    let left_row: number[] = [];
    let right_row: number[] = [];
    let j: number = 0;
    while ((j < mid)) {
      left_row.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      right_row.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + mid)); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    top_left.push(left_row);
    top_right.push(right_row);
    i = (i + 1);
  }
  i = mid;
  while ((i < n)) {
    let left_row: number[] = [];
    let right_row: number[] = [];
    let j: number = 0;
    while ((j < mid)) {
      left_row.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      right_row.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + mid)); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    bot_left.push(left_row);
    bot_right.push(right_row);
    i = (i + 1);
  }
  return [top_left, top_right, bot_left, bot_right];
}
function matrix_dimensions(matrix: number[][]): number[] {
  return [_len(matrix), _len(matrix[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()])];
}
function next_power_of_two(n: number): number {
  let p: number = 1;
  while ((p < n)) {
    p = (p * 2);
  }
  return p;
}
function pad_matrix(mat: number[][], rows: number, cols: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      let v: number = 0;
      if (((i < _len(mat)) && (j < _len(mat[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()])))) {
        v = mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      }
      row.push(v);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function actual_strassen(matrix_a: number[][], matrix_b: number[][]): number[][] {
  if ((matrix_dimensions(matrix_a)[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? matrix_dimensions(matrix_a).length + _mochi_idx : _mochi_idx;})()] == 2)) {
    return default_matrix_multiplication(matrix_a, matrix_b);
  }
  let parts_a: number[][][] = split_matrix(matrix_a);
  let a: number[][] = parts_a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parts_a.length + _mochi_idx : _mochi_idx;})()];
  let b: number[][] = parts_a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? parts_a.length + _mochi_idx : _mochi_idx;})()];
  let c: number[][] = parts_a[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? parts_a.length + _mochi_idx : _mochi_idx;})()];
  let d: number[][] = parts_a[(()=>{const _mochi_idx = Math.trunc(3); return _mochi_idx < 0 ? parts_a.length + _mochi_idx : _mochi_idx;})()];
  let parts_b: number[][][] = split_matrix(matrix_b);
  let e: number[][] = parts_b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? parts_b.length + _mochi_idx : _mochi_idx;})()];
  let f: number[][] = parts_b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? parts_b.length + _mochi_idx : _mochi_idx;})()];
  let g: number[][] = parts_b[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? parts_b.length + _mochi_idx : _mochi_idx;})()];
  let h: number[][] = parts_b[(()=>{const _mochi_idx = Math.trunc(3); return _mochi_idx < 0 ? parts_b.length + _mochi_idx : _mochi_idx;})()];
  let t1: number[][] = actual_strassen(a, matrix_subtraction(f, h));
  let t2: number[][] = actual_strassen(matrix_addition(a, b), h);
  let t3: number[][] = actual_strassen(matrix_addition(c, d), e);
  let t4: number[][] = actual_strassen(d, matrix_subtraction(g, e));
  let t5: number[][] = actual_strassen(matrix_addition(a, d), matrix_addition(e, h));
  let t6: number[][] = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h));
  let t7: number[][] = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f));
  let top_left: number[][] = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6);
  let top_right: number[][] = matrix_addition(t1, t2);
  let bot_left: number[][] = matrix_addition(t3, t4);
  let bot_right: number[][] = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7);
  let new_matrix: number[][] = [];
  let i: number = 0;
  while ((i < _len(top_right))) {
    new_matrix.push(concat(top_left[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? top_left.length + _mochi_idx : _mochi_idx;})()], top_right[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? top_right.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(bot_right))) {
    new_matrix.push(concat(bot_left[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bot_left.length + _mochi_idx : _mochi_idx;})()], bot_right[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bot_right.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return new_matrix;
}
function strassen(matrix1: number[][], matrix2: number[][]): number[][] {
  let dims1: number[] = matrix_dimensions(matrix1);
  let dims2: number[] = matrix_dimensions(matrix2);
  if ((dims1[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? dims1.length + _mochi_idx : _mochi_idx;})()] != dims2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dims2.length + _mochi_idx : _mochi_idx;})()])) {
    return [];
  }
  let maximum: number = Math.trunc((() => { const _arr = [dims1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dims1.length + _mochi_idx : _mochi_idx;})()], dims1[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? dims1.length + _mochi_idx : _mochi_idx;})()], dims2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dims2.length + _mochi_idx : _mochi_idx;})()], dims2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? dims2.length + _mochi_idx : _mochi_idx;})()]]; return _arr.length === 0 ? 0 : Math.max(..._arr); })());
  let size: number = next_power_of_two(maximum);
  let new_matrix1: number[][] = pad_matrix(matrix1, size, size);
  let new_matrix2: number[][] = pad_matrix(matrix2, size, size);
  let result_padded: number[][] = actual_strassen(new_matrix1, new_matrix2);
  let final_matrix: number[][] = [];
  let i: number = 0;
  while ((i < dims1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? dims1.length + _mochi_idx : _mochi_idx;})()])) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < dims2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? dims2.length + _mochi_idx : _mochi_idx;})()])) {
      row.push(result_padded[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result_padded.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? result_padded[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result_padded.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    final_matrix.push(row);
    i = (i + 1);
  }
  return final_matrix;
}
function main() {
  let matrix1: number[][] = [[2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 2, 3, 1]];
  let matrix2: number[][] = [[0, 2, 1, 1], [16, 2, 3, 3], [2, 2, 7, 7], [13, 11, 22, 4]];
  let res: number[][] = strassen(matrix1, matrix2);
  console.log(_str("[" + (res).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

