// Generated by Mochi v0.10.59 on 2025-08-06 21:51:23 GMT+7

export interface Point { x: number; y: number }
function cross(o: Point, a: Point, b: Point): number {
  return (((a.x - o.x) * (b.y - o.y)) - ((a.y - o.y) * (b.x - o.x)));
}
function sortPoints(ps: Point[]): Point[] {
  let arr: Point[] = ps;
  let n: number = _len(arr);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      let p: Point = arr[(j) < 0 ? arr.length + (j) : j];
      let q: Point = arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))];
      if (((p.x > q.x) || ((p.x == q.x) && (p.y > q.y)))) {
        arr[(j) < 0 ? arr.length + (j) : j] = q;
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = p;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function convex_hull(ps: Point[]): Point[] {
  ps = sortPoints(ps);
  let lower: Point[] = [];
  for (const p of ps) {
    while (((_len(lower) >= 2) && (cross(lower[(Math.trunc((_len(lower) - 2))) < 0 ? lower.length + (Math.trunc((_len(lower) - 2))) : Math.trunc((_len(lower) - 2))], lower[(Math.trunc((_len(lower) - 1))) < 0 ? lower.length + (Math.trunc((_len(lower) - 1))) : Math.trunc((_len(lower) - 1))], p) <= 0))) {
      lower = lower.slice(0, (_len(lower) - 1));
    }
    lower.push(p);
  }
  let upper: Point[] = [];
  let i: number = (_len(ps) - 1);
  while ((i >= 0)) {
    let p: Point = ps[(i) < 0 ? ps.length + (i) : i];
    while (((_len(upper) >= 2) && (cross(upper[(Math.trunc((_len(upper) - 2))) < 0 ? upper.length + (Math.trunc((_len(upper) - 2))) : Math.trunc((_len(upper) - 2))], upper[(Math.trunc((_len(upper) - 1))) < 0 ? upper.length + (Math.trunc((_len(upper) - 1))) : Math.trunc((_len(upper) - 1))], p) <= 0))) {
      upper = upper.slice(0, (_len(upper) - 1));
    }
    upper.push(p);
    i = (i - 1);
  }
  let hull = lower.slice(0, (_len(lower) - 1));
  let j: number = 0;
  while ((j < (_len(upper) - 1))) {
    hull.push(upper[(j) < 0 ? upper.length + (j) : j]);
    j = (j + 1);
  }
  return hull;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

