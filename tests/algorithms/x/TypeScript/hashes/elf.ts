// Generated by Mochi v0.10.61 on 2025-08-08 15:57:18 GMT+7

let ascii: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
function ord(ch: string): number {
  let i: number = 0;
  while ((i < _len(ascii))) {
    if ((ascii.slice(i, (i + 1)) == ch)) {
      return (32 + i);
    }
    i = (i + 1);
  }
  return 0;
}
function bit_and(a: number, b: number): number {
  let ua: number = a;
  let ub: number = b;
  let res: number = 0;
  let bit: number = 1;
  while (((ua > 0) || (ub > 0))) {
    if ((((ua % 2) == 1) && ((ub % 2) == 1))) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_xor(a: number, b: number): number {
  let ua: number = a;
  let ub: number = b;
  let res: number = 0;
  let bit: number = 1;
  while (((ua > 0) || (ub > 0))) {
    let abit: number = (ua % 2);
    let bbit: number = (ub % 2);
    if ((abit != bbit)) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_not32(x: number): number {
  let ux: number = x;
  let res: number = 0;
  let bit: number = 1;
  let count: number = 0;
  while ((count < 32)) {
    if (((ux % 2) == 0)) {
      res = (res + bit);
    }
    ux = Math.trunc(Math.trunc(ux / 2));
    bit = (bit * 2);
    count = (count + 1);
  }
  return res;
}
function elf_hash(data: string): number {
  let hash_: number = 0;
  let i: number = 0;
  while ((i < _len(data))) {
    let c: number = ord(data.slice(i, (i + 1)));
    hash_ = ((hash_ * 16) + c);
    let x: number = bit_and(hash_, 4026531840);
    if ((x != 0)) {
      hash_ = bit_xor(hash_, Math.trunc(Math.trunc(x / 16777216)));
    }
    hash_ = bit_and(hash_, bit_not32(x));
    i = (i + 1);
  }
  return hash_;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(elf_hash("lorem ipsum"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

