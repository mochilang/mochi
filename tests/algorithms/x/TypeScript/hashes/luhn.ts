// Generated by Mochi v0.10.59 on 2025-08-07 00:03:23 GMT+7

function is_luhn(s: string): boolean {
  let n: number = _len(s);
  if ((n <= 1)) {
    return false;
  }
  let check_digit: number = Math.trunc((s).substring((n - 1), n));
  let i: number = (n - 2);
  let even: boolean = true;
  while ((i >= 0)) {
    let digit: number = Math.trunc((s).substring(i, (i + 1)));
    if (even) {
      let doubled: number = (digit * 2);
      if ((doubled > 9)) {
        doubled = (doubled - 9);
      }
      check_digit = (check_digit + doubled);
    } else {
      check_digit = (check_digit + digit);
    }
    even = !even;
    i = (i - 1);
  }
  return ((check_digit % 10) == 0);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(JSON.stringify(is_luhn("79927398713"), null, 2));
  console.log(JSON.stringify(is_luhn("79927398714"), null, 2));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

