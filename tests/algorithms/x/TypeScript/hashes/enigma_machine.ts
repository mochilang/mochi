// Generated by Mochi v0.10.66 on 2025-08-15 10:29:48 GMT+7

let ASCII: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
function build_alphabet(): string[] {
  let result: string[] = [];
  let i: number = 0;
  while ((i < _len(ASCII))) {
    result.push(ASCII[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ASCII.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return result;
}
function range_list(n: number): number[] {
  let lst: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    lst.push(i);
    i = (i + 1);
  }
  return lst;
}
function reversed_range_list(n: number): number[] {
  let lst: number[] = [];
  let i: number = (n - 1);
  while ((i >= 0)) {
    lst.push(i);
    i = (i - 1);
  }
  return lst;
}
function index_of_char(lst: string[], ch: string): number {
  let i: number = 0;
  while ((i < _len(lst))) {
    if ((lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()] === ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function index_of_int(lst: number[], value: number): number {
  let i: number = 0;
  while ((i < _len(lst))) {
    if ((lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()] === value)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function enigma_encrypt(message: string, token: number): string {
  let alphabets: string[] = build_alphabet();
  let n: number = _len(alphabets);
  let gear_one: number[] = range_list(n);
  let gear_two: number[] = range_list(n);
  let gear_three: number[] = range_list(n);
  let reflector: number[] = reversed_range_list(n);
  let gear_one_pos: number = 0;
  let gear_two_pos: number = 0;
  let gear_three_pos: number = 0;
  function rotator() {
    let i: number = gear_one[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? gear_one.length + _mochi_idx : _mochi_idx;})()];
    gear_one = gear_one.slice(1, _len(gear_one));
    gear_one.push(i);
    gear_one_pos = (gear_one_pos + 1);
    if (((gear_one_pos % n) === 0)) {
      i = gear_two[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? gear_two.length + _mochi_idx : _mochi_idx;})()];
      gear_two = gear_two.slice(1, _len(gear_two));
      gear_two.push(i);
      gear_two_pos = (gear_two_pos + 1);
      if (((gear_two_pos % n) === 0)) {
        i = gear_three[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? gear_three.length + _mochi_idx : _mochi_idx;})()];
        gear_three = gear_three.slice(1, _len(gear_three));
        gear_three.push(i);
        gear_three_pos = (gear_three_pos + 1);
      }
    }
  }
  function engine(ch: string): string {
    let target: number = index_of_char(alphabets, ch);
    target = gear_one[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? gear_one.length + _mochi_idx : _mochi_idx;})()];
    target = gear_two[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? gear_two.length + _mochi_idx : _mochi_idx;})()];
    target = gear_three[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? gear_three.length + _mochi_idx : _mochi_idx;})()];
    target = reflector[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? reflector.length + _mochi_idx : _mochi_idx;})()];
    target = index_of_int(gear_three, target);
    target = index_of_int(gear_two, target);
    target = index_of_int(gear_one, target);
    rotator();
    return alphabets[(()=>{const _mochi_idx = target; return _mochi_idx < 0 ? alphabets.length + _mochi_idx : _mochi_idx;})()];
  }
  let t: number = 0;
  while ((t < token)) {
    rotator();
    t = (t + 1);
  }
  let result: string = "";
  let idx: number = 0;
  while ((idx < _len(message))) {
    result = (result + engine(message[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? message.length + _mochi_idx : _mochi_idx;})()]));
    idx = (idx + 1);
  }
  return result;
}
let message: string = "HELLO WORLD";
let token: number = 123;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let encoded: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
encoded = enigma_encrypt(message, token)
  console.log(_str(encoded));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

