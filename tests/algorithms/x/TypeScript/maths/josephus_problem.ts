// Generated by Mochi v0.10.67 on 2025-08-17 09:16:35 GMT+7

function josephus_recursive(num_people: number, step_size: number): number {
  if (((num_people <= 0) || (step_size <= 0))) {
    _panic("num_people or step_size is not a positive integer.");
  }
  if ((num_people === 1)) {
    return 0;
  }
  return ((josephus_recursive((num_people - 1), step_size) + step_size) % num_people);
}
function find_winner(num_people: number, step_size: number): number {
  return (josephus_recursive(num_people, step_size) + 1);
}
function remove_at(xs: number[], idx: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i !== idx)) {
      res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function josephus_iterative(num_people: number, step_size: number): number {
  if (((num_people <= 0) || (step_size <= 0))) {
    _panic("num_people or step_size is not a positive integer.");
  }
  let circle: number[] = [];
  let i: number = 1;
  while ((i <= num_people)) {
    circle.push(i);
    i = (i + 1);
  }
  let current: number = 0;
  while ((_len(circle) > 1)) {
    current = (((current + step_size) - 1) % _len(circle));
    circle = remove_at(circle, current);
  }
  return circle[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? circle.length + _mochi_idx : _mochi_idx;})()];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return '[' + x.map(_str).join(', ') + ']';
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r = josephus_recursive(7, 3)
  console.log(_str(r));
  console.log(_str(find_winner(7, 3)));
  console.log(_str(josephus_iterative(7, 3)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

