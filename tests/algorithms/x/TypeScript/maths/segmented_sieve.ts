// Generated by Mochi v0.10.67 on 2025-08-17 12:22:47 GMT+7

function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function int_sqrt(n: number): number {
  let r: number = 0;
  while ((((r + 1) * (r + 1)) <= n)) {
    r = (r + 1);
  }
  return r;
}
function sieve(n: number): number[] {
  if ((n <= 0)) {
    _panic("Number must instead be a positive integer");
  }
  let in_prime: number[] = [];
  let start: number = 2;
  let end: number = int_sqrt(n);
  let temp: number[] = [];
  let i: number = 0;
  while ((i < (end + 1))) {
    temp.push(1);
    i = (i + 1);
  }
  let prime: number[] = [];
  while ((start <= end)) {
    if ((temp[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? temp.length + _mochi_idx : _mochi_idx;})()] === 1)) {
      in_prime.push(start);
      let j: bigint = (start * start);
      while ((j <= end)) {
        temp[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? temp.length + _mochi_idx : _mochi_idx;})()] = 0;
        j = (j + start);
      }
    }
    start = (start + 1);
  }
  i = 0;
  while ((i < _len(in_prime))) {
    prime.push(in_prime[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? in_prime.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let low: bigint = (end + 1);
  let high: number = min_int((2 * end), n);
  while ((low <= n)) {
    let tempSeg: number[] = [];
    let size: bigint = ((high - low) + 1);
    let k: number = 0;
    while ((k < size)) {
      tempSeg.push(1);
      k = (k + 1);
    }
    let idx: number = 0;
    while ((idx < _len(in_prime))) {
      let each: number = in_prime[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? in_prime.length + _mochi_idx : _mochi_idx;})()];
      let t: bigint = (Math.trunc(low / each) * each);
      if ((t < low)) {
        t = (t + each);
      }
      let j2: bigint = t;
      while ((j2 <= high)) {
        tempSeg[(()=>{const _mochi_idx = (j2 - low); return _mochi_idx < 0 ? tempSeg.length + _mochi_idx : _mochi_idx;})()] = 0;
        j2 = (j2 + each);
      }
      idx = (idx + 1);
    }
    let j3: number = 0;
    while ((j3 < _len(tempSeg))) {
      if ((tempSeg[(()=>{const _mochi_idx = j3; return _mochi_idx < 0 ? tempSeg.length + _mochi_idx : _mochi_idx;})()] === 1)) {
        prime.push((j3 + low));
      }
      j3 = (j3 + 1);
    }
    low = (high + 1);
    high = min_int((high + end), n);
  }
  return prime;
}
function lists_equal(a: number[], b: number[]): boolean {
  if ((_len(a) !== _len(b))) {
    return false;
  }
  let m: number = 0;
  while ((m < _len(a))) {
    if ((a[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] !== b[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    m = (m + 1);
  }
  return true;
}
function test_sieve() {
  let e1: number[] = sieve(8);
  if (!lists_equal(e1, [2, 3, 5, 7])) {
    _panic("sieve(8) failed");
  }
  let e2: number[] = sieve(27);
  if (!lists_equal(e2, [2, 3, 5, 7, 11, 13, 17, 19, 23])) {
    _panic("sieve(27) failed");
  }
}
function main() {
  test_sieve();
  console.log(_str(sieve(30)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

