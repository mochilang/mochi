// Generated by Mochi v0.10.59 on 2025-08-07 00:17:34 GMT+7

function key(x: number, y: number): string {
  return ((_str(x) + ",") + _str(y));
}
function joint_probability_distribution(x_values: number[], y_values: number[], x_probabilities: number[], y_probabilities: number[]): Record<string, number> {
  let result: Record<string, number> = {};
  let i: number = 0;
  while ((i < _len(x_values))) {
    let j: number = 0;
    while ((j < _len(y_values))) {
      let k: string = key(x_values[(i) < 0 ? x_values.length + (i) : i], y_values[(j) < 0 ? y_values.length + (j) : j]);
      result[(k) < 0 ? result.length + (k) : k] = (x_probabilities[(i) < 0 ? x_probabilities.length + (i) : i] * y_probabilities[(j) < 0 ? y_probabilities.length + (j) : j]);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return result;
}
function expectation(values: number[], probabilities: number[]): number {
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(values))) {
    total = (total + (values[(i) < 0 ? values.length + (i) : i] * probabilities[(i) < 0 ? probabilities.length + (i) : i]));
    i = (i + 1);
  }
  return total;
}
function variance(values: number[], probabilities: number[]): number {
  let mean = expectation(values, probabilities);
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(values))) {
    let diff = (values[(i) < 0 ? values.length + (i) : i] - mean);
    total = (total + ((diff * diff) * probabilities[(i) < 0 ? probabilities.length + (i) : i]));
    i = (i + 1);
  }
  return total;
}
function covariance(x_values: number[], y_values: number[], x_probabilities: number[], y_probabilities: number[]): number {
  let mean_x: number = expectation(x_values, x_probabilities);
  let mean_y: number = expectation(y_values, y_probabilities);
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(x_values))) {
    let j: number = 0;
    while ((j < _len(y_values))) {
      let diff_x: number = (x_values[(i) < 0 ? x_values.length + (i) : i] - mean_x);
      let diff_y: number = (y_values[(j) < 0 ? y_values.length + (j) : j] - mean_y);
      total = (total + (((diff_x * diff_y) * x_probabilities[(i) < 0 ? x_probabilities.length + (i) : i]) * y_probabilities[(j) < 0 ? y_probabilities.length + (j) : j]));
      j = (j + 1);
    }
    i = (i + 1);
  }
  return total;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function standard_deviation(v: number): number {
  return sqrtApprox(v);
}
function main() {
  let x_values: number[] = [1, 2];
  let y_values: number[] = [-2, 5, 8];
  let x_probabilities: number[] = [0.7, 0.3];
  let y_probabilities: number[] = [0.3, 0.5, 0.2];
  let jpd: Record<string, number> = joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities);
  let i: number = 0;
  while ((i < _len(x_values))) {
    let j: number = 0;
    while ((j < _len(y_values))) {
      let k: string = key(x_values[(i) < 0 ? x_values.length + (i) : i], y_values[(j) < 0 ? y_values.length + (j) : j]);
      let prob: number = jpd[(k) < 0 ? jpd.length + (k) : k];
      console.log(_str(((k + "=") + _str(prob))));
      j = (j + 1);
    }
    i = (i + 1);
  }
  let ex: number = expectation(x_values, x_probabilities);
  let ey: number = expectation(y_values, y_probabilities);
  let vx: number = variance(x_values, x_probabilities);
  let vy: number = variance(y_values, y_probabilities);
  let cov: number = covariance(x_values, y_values, x_probabilities, y_probabilities);
  console.log(_str(("Ex=" + _str(ex))));
  console.log(_str(("Ey=" + _str(ey))));
  console.log(_str(("Vx=" + _str(vx))));
  console.log(_str(("Vy=" + _str(vy))));
  console.log(_str(("Cov=" + _str(cov))));
  console.log(_str(("Sx=" + _str(standard_deviation(vx)))));
  console.log(_str(("Sy=" + _str(standard_deviation(vy)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

