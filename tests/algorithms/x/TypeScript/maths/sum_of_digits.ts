// Generated by Mochi v0.10.59 on 2025-08-07 00:24:36 GMT+7

function abs_int(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function sum_of_digits(n: number): number {
  let m: number = abs_int(n);
  let res: number = 0;
  while ((m > 0)) {
    res = (res + (m % 10));
    m = Math.trunc(m / 10);
  }
  return res;
}
function sum_of_digits_recursion(n: number): number {
  let m: number = abs_int(n);
  if ((m < 10)) {
    return m;
  }
  return ((m % 10) + sum_of_digits_recursion(Math.trunc(m / 10)));
}
function sum_of_digits_compact(n: number): number {
  let s: string = _str(abs_int(n));
  let res: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    res = (res + s[(i) < 0 ? s.length + (i) : i].charCodeAt(0));
    i = (i + 1);
  }
  return res;
}
function test_sum_of_digits() {
  if ((sum_of_digits(12345) != 15)) {
    _panic("sum_of_digits 12345 failed");
  }
  if ((sum_of_digits(123) != 6)) {
    _panic("sum_of_digits 123 failed");
  }
  if ((sum_of_digits(-123) != 6)) {
    _panic("sum_of_digits -123 failed");
  }
  if ((sum_of_digits(0) != 0)) {
    _panic("sum_of_digits 0 failed");
  }
  if ((sum_of_digits_recursion(12345) != 15)) {
    _panic("recursion 12345 failed");
  }
  if ((sum_of_digits_recursion(123) != 6)) {
    _panic("recursion 123 failed");
  }
  if ((sum_of_digits_recursion(-123) != 6)) {
    _panic("recursion -123 failed");
  }
  if ((sum_of_digits_recursion(0) != 0)) {
    _panic("recursion 0 failed");
  }
  if ((sum_of_digits_compact(12345) != 15)) {
    _panic("compact 12345 failed");
  }
  if ((sum_of_digits_compact(123) != 6)) {
    _panic("compact 123 failed");
  }
  if ((sum_of_digits_compact(-123) != 6)) {
    _panic("compact -123 failed");
  }
  if ((sum_of_digits_compact(0) != 0)) {
    _panic("compact 0 failed");
  }
}
function main() {
  test_sum_of_digits();
  console.log(_str(_str(sum_of_digits(12345))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

