// Generated by Mochi v0.10.63 on 2025-08-12 07:59:10 GMT+7

function is_prime(n: number): boolean {
  if ((n <= 1)) {
    return false;
  }
  if ((n <= 3)) {
    return true;
  }
  if (((n % 2) == 0)) {
    return false;
  }
  let i: number = 3;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      return false;
    }
    i = (i + 2);
  }
  return true;
}
function is_germain_prime(_number: number): boolean {
  if ((_number < 1)) {
    _panic("Input value must be a positive integer");
  }
  return (is_prime(_number) && is_prime(((2 * _number) + 1)));
}
function is_safe_prime(_number: number): boolean {
  if ((_number < 1)) {
    _panic("Input value must be a positive integer");
  }
  if ((((_number - 1) % 2) != 0)) {
    return false;
  }
  return (is_prime(_number) && is_prime(Math.trunc((_number - 1) / 2)));
}
function test_is_germain_prime() {
  if (!is_germain_prime(3)) {
    _panic("is_germain_prime(3) failed");
  }
  if (!is_germain_prime(11)) {
    _panic("is_germain_prime(11) failed");
  }
  if (is_germain_prime(4)) {
    _panic("is_germain_prime(4) failed");
  }
  if (!is_germain_prime(23)) {
    _panic("is_germain_prime(23) failed");
  }
  if (is_germain_prime(13)) {
    _panic("is_germain_prime(13) failed");
  }
  if (is_germain_prime(20)) {
    _panic("is_germain_prime(20) failed");
  }
}
function test_is_safe_prime() {
  if (!is_safe_prime(5)) {
    _panic("is_safe_prime(5) failed");
  }
  if (!is_safe_prime(11)) {
    _panic("is_safe_prime(11) failed");
  }
  if (is_safe_prime(1)) {
    _panic("is_safe_prime(1) failed");
  }
  if (is_safe_prime(2)) {
    _panic("is_safe_prime(2) failed");
  }
  if (is_safe_prime(3)) {
    _panic("is_safe_prime(3) failed");
  }
  if (!is_safe_prime(47)) {
    _panic("is_safe_prime(47) failed");
  }
}
function main() {
  test_is_germain_prime();
  test_is_safe_prime();
  console.log(_str(is_germain_prime(23)));
  console.log(_str(is_safe_prime(47)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

