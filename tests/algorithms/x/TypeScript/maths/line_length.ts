// Generated by Mochi v0.10.63 on 2025-08-12 07:59:25 GMT+7

function sqrt_newton(n: number): number {
  if ((n == 0.0)) {
    return 0.0;
  }
  let x: number = n;
  let i: number = 0;
  while ((i < 20)) {
    x = ((x + (n / x)) / 2.0);
    i = (i + 1);
  }
  return x;
}
function hypot(a: number, b: number): number {
  return sqrt_newton(((a * a) + (b * b)));
}
function line_length(fnc, x_start: number, x_end: number, steps: number): number {
  let x1: number = x_start;
  let fx1: number = fnc(x_start);
  let length: number = 0.0;
  let i: number = 0;
  let step: number = ((x_end - x_start) / (1.0 * steps));
  while ((i < steps)) {
    let x2: number = (step + x1);
    let fx2: number = fnc(x2);
    length = (length + hypot((x2 - x1), (fx2 - fx1)));
    x1 = x2;
    fx1 = fx2;
    i = (i + 1);
  }
  return length;
}
function f1(x: number): number {
  return x;
}
function f2(x: number): number {
  return 1.0;
}
function f3(x: number): number {
  return ((x * x) / 10.0);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(line_length(f1, 0.0, 1.0, 10)));
  console.log(_str(line_length(f2, -5.5, 4.5, 100)));
  console.log(_str(line_length(f3, 0.0, 10.0, 1000)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

