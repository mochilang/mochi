// Generated by Mochi v0.10.59 on 2025-08-07 00:18:21 GMT+7

function prime_sieve_eratosthenes(num: number): number[] {
  if ((num <= 0)) {
    _panic("Input must be a positive integer");
  }
  let primes: boolean[] = [];
  let i: number = 0;
  while ((i <= num)) {
    primes.push(true);
    i = (i + 1);
  }
  let p: number = 2;
  while (((p * p) <= num)) {
    if (primes[(p) < 0 ? primes.length + (p) : p]) {
      let j: number = (p * p);
      while ((j <= num)) {
        primes[(j) < 0 ? primes.length + (j) : j] = false;
        j = (j + p);
      }
    }
    p = (p + 1);
  }
  let result: number[] = [];
  let k: number = 2;
  while ((k <= num)) {
    if (primes[(k) < 0 ? primes.length + (k) : k]) {
      result.push(k);
    }
    k = (k + 1);
  }
  return result;
}
function list_eq(a: number[], b: number[]): boolean {
  if ((_len(a) != _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    if ((a[(i) < 0 ? a.length + (i) : i] != b[(i) < 0 ? b.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function test_prime_sieve_eratosthenes() {
  if (!list_eq(prime_sieve_eratosthenes(10), [2, 3, 5, 7])) {
    _panic("test 10 failed");
  }
  if (!list_eq(prime_sieve_eratosthenes(20), [2, 3, 5, 7, 11, 13, 17, 19])) {
    _panic("test 20 failed");
  }
  if (!list_eq(prime_sieve_eratosthenes(2), [2])) {
    _panic("test 2 failed");
  }
  if ((_len(prime_sieve_eratosthenes(1)) != 0)) {
    _panic("test 1 failed");
  }
}
function main() {
  test_prime_sieve_eratosthenes();
  console.log(_str(_str(prime_sieve_eratosthenes(20))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

