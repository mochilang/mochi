// Generated by Mochi v0.10.67 on 2025-08-17 13:47:23 GMT+7

function bubble_sort(nums: number[]): number[] {
  let arr: number[] = nums;
  let n: number = _len(arr);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let temp: number = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = temp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function three_sum(nums: number[]): number[][] {
  let sorted: number[] = bubble_sort(nums);
  let res: number[][] = [];
  let n: number = _len(sorted);
  let i: number = 0;
  while ((i < (n - 2))) {
    if (((i === 0) || (sorted[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()] !== sorted[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]))) {
      let low: bigint = (i + 1);
      let high: bigint = (n - 1);
      let c: bigint = (0 - sorted[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]);
      while ((low < high)) {
        let s: bigint = (sorted[(()=>{const _mochi_idx = low; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()] + sorted[(()=>{const _mochi_idx = high; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]);
        if ((s === c)) {
          let triple: number[] = [sorted[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()], sorted[(()=>{const _mochi_idx = low; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()], sorted[(()=>{const _mochi_idx = high; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]];
          res.push(triple);
          while (((low < high) && (sorted[(()=>{const _mochi_idx = low; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()] === sorted[(()=>{const _mochi_idx = Math.trunc((low + 1)); return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]))) {
            low = (low + 1);
          }
          while (((low < high) && (sorted[(()=>{const _mochi_idx = high; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()] === sorted[(()=>{const _mochi_idx = Math.trunc((high - 1)); return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]))) {
            high = (high - 1);
          }
          low = (low + 1);
          high = (high - 1);
        } else {
          if ((s < c)) {
            low = (low + 1);
          } else {
            high = (high - 1);
          }
        }
      }
    }
    i = (i + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(three_sum([-1, 0, 1, 2, -1, -4])));
  console.log(_str(three_sum([1, 2, 3, 4])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

