// Generated by Mochi v0.10.63 on 2025-08-11 18:41:19 GMT+7

function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function factorial(n: number): number {
  if ((n < 0)) {
    _panic("factorial is undefined for negative numbers");
  }
  let result: number = 1;
  let i: number = 2;
  while ((i <= n)) {
    result = (result * i);
    i = (i + 1);
  }
  return result;
}
function pow_float(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function binomial_distribution(successes: number, trials: number, prob: number): number {
  if ((successes > trials)) {
    _panic("successes must be lower or equal to trials");
  }
  if (((trials < 0) || (successes < 0))) {
    _panic("the function is defined for non-negative integers");
  }
  if (!((0.0 < prob) && (prob < 1.0))) {
    _panic("prob has to be in range of 1 - 0");
  }
  let probability: number = (pow_float(prob, successes) * pow_float((1.0 - prob), (trials - successes)));
  let numerator: number = factorial(trials);
  let denominator: number = (factorial(successes) * factorial((trials - successes)));
  let coefficient: number = (numerator / denominator);
  return (probability * coefficient);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

