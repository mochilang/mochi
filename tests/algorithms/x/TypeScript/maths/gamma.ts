// Generated by Mochi v0.10.66 on 2025-08-16 14:48:31 GMT+7

let PI: number = 3.141592653589793;
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrt(x: number): number {
  if ((x < 0.0)) {
    _panic("sqrt domain error");
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function ln(x: number): number {
  return Math.log(x);
}
function exp_series(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 20)) {
    term = ((term * x) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function powf(base: number, exponent: number): number {
  if ((base <= 0.0)) {
    return 0.0;
  }
  return exp_series((exponent * ln(base)));
}
function integrand(x: number, z: number): number {
  return (powf(x, (z - 1.0)) * exp_series(-x));
}
function gamma_iterative(num: number): number {
  if ((num <= 0.0)) {
    _panic("math domain error");
  }
  let step: number = 0.001;
  let limit: number = 100.0;
  let x: number = step;
  let total: number = 0.0;
  while ((x < limit)) {
    total = (total + (integrand(x, num) * step));
    x = (x + step);
  }
  return total;
}
function gamma_recursive(num: number): number {
  if ((num <= 0.0)) {
    _panic("math domain error");
  }
  if ((num > 171.5)) {
    _panic("math range error");
  }
  let int_part = Math.trunc(num);
  let frac = (num - int_part);
  if (!((absf(frac) < 1e-06) || (absf((frac - 0.5)) < 1e-06))) {
    _panic("num must be an integer or a half-integer");
  }
  if ((absf((num - 0.5)) < 1e-06)) {
    return sqrt(PI);
  }
  if ((absf((num - 1.0)) < 1e-06)) {
    return 1.0;
  }
  return ((num - 1.0) * gamma_recursive((num - 1.0)));
}
function main() {
  console.log(_str(gamma_iterative(5.0)));
  console.log(_str(gamma_recursive(5.0)));
  console.log(_str(gamma_recursive(0.5)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

