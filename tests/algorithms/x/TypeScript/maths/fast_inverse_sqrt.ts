// Generated by Mochi v0.10.63 on 2025-08-12 07:59:03 GMT+7

function pow2_int(n: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 2);
    i = (i + 1);
  }
  return result;
}
function pow2_float(n: number): number {
  let result: number = 1.0;
  if ((n >= 0)) {
    let i: number = 0;
    while ((i < n)) {
      result = (result * 2.0);
      i = (i + 1);
    }
  } else {
    let i: number = 0;
    let m: number = (0 - n);
    while ((i < m)) {
      result = (result / 2.0);
      i = (i + 1);
    }
  }
  return result;
}
function lshift(num: number, k: number): number {
  let result = num;
  let i: number = 0;
  while ((i < k)) {
    result = (result * 2);
    i = (i + 1);
  }
  return result;
}
function rshift(num: number, k: number): number {
  let result = num;
  let i: number = 0;
  while ((i < k)) {
    result = ((result - (result % 2)) / 2);
    i = (i + 1);
  }
  return result;
}
function log2_floor(x: number): number {
  let n: number = x;
  let e: number = 0;
  while ((n >= 2.0)) {
    n = (n / 2.0);
    e = (e + 1);
  }
  while ((n < 1.0)) {
    n = (n * 2.0);
    e = (e - 1);
  }
  return e;
}
function float_to_bits(x: number): number {
  let num: number = x;
  let sign: number = 0;
  if ((num < 0.0)) {
    sign = 1;
    num = -num;
  }
  let exp = log2_floor(num);
  let pow: number = pow2_float(exp);
  let normalized = (num / pow);
  let frac = (normalized - 1.0);
  let mantissa = Math.trunc((frac * pow2_float(23)));
  let exp_bits = (exp + 127);
  return ((lshift(sign, 31) + lshift(exp_bits, 23)) + mantissa);
}
function bits_to_float(bits: number): number {
  let sign_bit: number = (rshift(bits, 31) % 2);
  let sign: number = 1.0;
  if ((sign_bit == 1)) {
    sign = -1.0;
  }
  let exp_bits: number = (rshift(bits, 23) % 256);
  let exp: number = (exp_bits - 127);
  let mantissa_bits: number = (bits % pow2_int(23));
  let mantissa: number = (1.0 + (mantissa_bits / pow2_float(23)));
  return ((sign * mantissa) * pow2_float(exp));
}
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function is_close(a: number, b: number, rel_tol: number): boolean {
  return (absf((a - b)) <= (rel_tol * absf(b)));
}
function fast_inverse_sqrt(_number: number): number {
  if ((_number <= 0.0)) {
    _panic("Input must be a positive number.");
  }
  let i: number = float_to_bits(_number);
  let magic: number = 1597463007;
  let y_bits: number = (magic - rshift(i, 1));
  let y: number = bits_to_float(y_bits);
  y = (y * (1.5 - (((0.5 * _number) * y) * y)));
  return y;
}
function test_fast_inverse_sqrt() {
  if ((absf((fast_inverse_sqrt(10.0) - 0.3156857923527257)) > 0.0001)) {
    _panic("fast_inverse_sqrt(10) failed");
  }
  if ((absf((fast_inverse_sqrt(4.0) - 0.49915357479239103)) > 0.0001)) {
    _panic("fast_inverse_sqrt(4) failed");
  }
  if ((absf((fast_inverse_sqrt(4.1) - 0.4932849504615651)) > 0.0001)) {
    _panic("fast_inverse_sqrt(4.1) failed");
  }
  let i: number = 50;
  while ((i < 60)) {
    let y: number = fast_inverse_sqrt(i);
    let actual: number = (1.0 / sqrtApprox(i));
    if (!is_close(y, actual, 0.00132)) {
      _panic("relative error too high");
    }
    i = (i + 1);
  }
}
function main() {
  test_fast_inverse_sqrt();
  let i: number = 5;
  while ((i <= 100)) {
    let diff: number = ((1.0 / sqrtApprox(i)) - fast_inverse_sqrt(i));
    console.log(_str(((_str(i) + ": ") + _str(diff))));
    i = (i + 5);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

