// Generated by Mochi v0.10.63 on 2025-08-12 07:59:28 GMT+7

let PI: number = 3.141592653589793;
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow(x: number, n: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    result = (result * x);
    i = (i + 1);
  }
  return result;
}
function factorial(n: number): number {
  let result: number = 1.0;
  let i: number = 2;
  while ((i <= n)) {
    result = (result * i);
    i = (i + 1);
  }
  return result;
}
function maclaurin_sin(theta: number, accuracy: number): number {
  let t: number = theta;
  let div: number = Math.floor((t / (2.0 * PI)));
  t = (t - ((2.0 * div) * PI));
  let sum: number = 0.0;
  let r: number = 0;
  while ((r < accuracy)) {
    let power: number = ((2 * r) + 1);
    let sign: number = (((r % 2) == 0) ? 1.0 : -1.0);
    sum = (sum + ((sign * pow(t, power)) / factorial(power)));
    r = (r + 1);
  }
  return sum;
}
function maclaurin_cos(theta: number, accuracy: number): number {
  let t: number = theta;
  let div: number = Math.floor((t / (2.0 * PI)));
  t = (t - ((2.0 * div) * PI));
  let sum: number = 0.0;
  let r: number = 0;
  while ((r < accuracy)) {
    let power: number = (2 * r);
    let sign: number = (((r % 2) == 0) ? 1.0 : -1.0);
    sum = (sum + ((sign * pow(t, power)) / factorial(power)));
    r = (r + 1);
  }
  return sum;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(maclaurin_sin(10.0, 30)));
  console.log(_str(maclaurin_sin(-10.0, 30)));
  console.log(_str(maclaurin_sin(10.0, 15)));
  console.log(_str(maclaurin_sin(-10.0, 15)));
  console.log(_str(maclaurin_cos(5.0, 30)));
  console.log(_str(maclaurin_cos(-5.0, 30)));
  console.log(_str(maclaurin_cos(10.0, 15)));
  console.log(_str(maclaurin_cos(-10.0, 15)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

