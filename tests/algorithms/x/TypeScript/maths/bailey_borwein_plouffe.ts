// Generated by Mochi v0.10.59 on 2025-08-07 00:16:51 GMT+7

function mod_pow(base: number, exponent: number, modulus: number): number {
  let result: number = 1;
  let b: number = (base % modulus);
  let e: number = exponent;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % modulus);
    }
    b = ((b * b) % modulus);
    e = Math.trunc(e / 2);
  }
  return result;
}
function pow_float(base: number, exponent: number): number {
  let exp: number = exponent;
  let result: number = 1.0;
  if ((exp < 0)) {
    exp = -exp;
  }
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  if ((exponent < 0)) {
    result = (1.0 / result);
  }
  return result;
}
function hex_digit(n: number): string {
  if ((n < 10)) {
    return _str(n);
  }
  let letters: string[] = ["a", "b", "c", "d", "e", "f"];
  return letters[(Math.trunc((n - 10))) < 0 ? letters.length + (Math.trunc((n - 10))) : Math.trunc((n - 10))];
}
function floor_float(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function subsum(digit_pos_to_extract: number, denominator_addend: number, precision: number): number {
  let total: number = 0.0;
  let sum_index: number = 0;
  while ((sum_index < (digit_pos_to_extract + precision))) {
    let denominator: number = ((8 * sum_index) + denominator_addend);
    if ((sum_index < digit_pos_to_extract)) {
      let exponent: number = ((digit_pos_to_extract - 1) - sum_index);
      let exponential_term: number = mod_pow(16, exponent, denominator);
      total = (total + (exponential_term / denominator));
    } else {
      let exponent: number = ((digit_pos_to_extract - 1) - sum_index);
      let exponential_term: number = pow_float(16.0, exponent);
      total = (total + (exponential_term / denominator));
    }
    sum_index = (sum_index + 1);
  }
  return total;
}
function bailey_borwein_plouffe(digit_position: number, precision: number): string {
  if ((digit_position <= 0)) {
    _panic("Digit position must be a positive integer");
  }
  if ((precision < 0)) {
    _panic("Precision must be a nonnegative integer");
  }
  let sum_result: number = ((((4.0 * subsum(digit_position, 1, precision)) - (2.0 * subsum(digit_position, 4, precision))) - (1.0 * subsum(digit_position, 5, precision))) - (1.0 * subsum(digit_position, 6, precision)));
  let fraction: number = (sum_result - floor_float(sum_result));
  let digit: number = Math.trunc((fraction * 16.0));
  let hd: string = hex_digit(digit);
  return hd;
}
let digits: string = "";
let i: number = 1;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i <= 10)) {
    digits = (digits + bailey_borwein_plouffe(i, 1000));
    i = (i + 1);
  }
  console.log(_str(digits));
  console.log(_str(bailey_borwein_plouffe(5, 10000)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

