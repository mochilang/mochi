// Generated by Mochi v0.10.59 on 2025-08-07 00:17:48 GMT+7

function abs_val(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function pow_float(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function nth_root(value: number, n: number): number {
  if ((value == 0.0)) {
    return 0.0;
  }
  let x: number = (value / n);
  let i: number = 0;
  while ((i < 20)) {
    let num = (((n - 1) * x) + (value / pow_float(x, (n - 1))));
    x = (num / n);
    i = (i + 1);
  }
  return x;
}
function minkowski_distance(point_a: number[], point_b: number[], order: number): number {
  if ((order < 1)) {
    _panic("The order must be greater than or equal to 1.");
  }
  if ((_len(point_a) != _len(point_b))) {
    _panic("Both points must have the same dimension.");
  }
  let total: number = 0.0;
  let idx: number = 0;
  while ((idx < _len(point_a))) {
    let diff: number = abs_val((point_a[(idx) < 0 ? point_a.length + (idx) : idx] - point_b[(idx) < 0 ? point_b.length + (idx) : idx]));
    total = (total + pow_float(diff, order));
    idx = (idx + 1);
  }
  return nth_root(total, order);
}
function test_minkowski() {
  if ((abs_val((minkowski_distance([1.0, 1.0], [2.0, 2.0], 1) - 2.0)) > 0.0001)) {
    _panic("minkowski_distance test1 failed");
  }
  if ((abs_val((minkowski_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], 2) - 8.0)) > 0.0001)) {
    _panic("minkowski_distance test2 failed");
  }
}
function main() {
  test_minkowski();
  console.log(_str(minkowski_distance([5.0], [0.0], 3)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

