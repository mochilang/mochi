// Generated by Mochi v0.10.59 on 2025-08-07 00:17:37 GMT+7

function int_pow(base: number, exp: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function karatsuba(a: number, b: number): number {
  if (((_len(_str(a)) == 1) || (_len(_str(b)) == 1))) {
    return (a * b);
  }
  let m1: number = _len(_str(a));
  let lb: number = _len(_str(b));
  if ((lb > m1)) {
    m1 = lb;
  }
  let m2: number = Math.trunc(m1 / 2);
  let power: number = int_pow(10, m2);
  let a1: number = Math.trunc(a / power);
  let a2: number = (a % power);
  let b1: number = Math.trunc(b / power);
  let b2: number = (b % power);
  let x: number = karatsuba(a2, b2);
  let y: number = karatsuba((a1 + a2), (b1 + b2));
  let z: number = karatsuba(a1, b1);
  let result: number = (((z * int_pow(10, (2 * m2))) + (((y - z) - x) * power)) + x);
  return result;
}
function main() {
  console.log(_str(_str(karatsuba(15463, 23489))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

