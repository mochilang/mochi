// Generated by Mochi v0.10.59 on 2025-08-07 00:18:14 GMT+7

export interface Point3d { x: number; y: number; z: number }
export interface Vector3d { x: number; y: number; z: number }
function create_vector(p1: Point3d, p2: Point3d): Vector3d {
  let vx: number = (p2.x - p1.x);
  let vy: number = (p2.y - p1.y);
  let vz: number = (p2.z - p1.z);
  return {"x": vx, "y": vy, "z": vz};
}
function get_3d_vectors_cross(ab: Vector3d, ac: Vector3d): Vector3d {
  let cx: number = ((ab.y * ac.z) - (ab.z * ac.y));
  let cy: number = ((ab.z * ac.x) - (ab.x * ac.z));
  let cz: number = ((ab.x * ac.y) - (ab.y * ac.x));
  return {"x": cx, "y": cy, "z": cz};
}
function pow10(exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * 10.0);
    i = (i + 1);
  }
  return result;
}
function round_float(x: number, digits: number): number {
  let factor: number = pow10(digits);
  let v: number = (x * factor);
  if ((v >= 0.0)) {
    v = (v + 0.5);
  } else {
    v = (v - 0.5);
  }
  let t: number = Math.trunc(v);
  return (t / factor);
}
function is_zero_vector(v: Vector3d, accuracy: number): boolean {
  return (((round_float(v.x, accuracy) == 0.0) && (round_float(v.y, accuracy) == 0.0)) && (round_float(v.z, accuracy) == 0.0));
}
function are_collinear(a: Point3d, b: Point3d, c: Point3d, accuracy: number): boolean {
  let ab: Vector3d = create_vector(a, b);
  let ac: Vector3d = create_vector(a, c);
  let cross: Vector3d = get_3d_vectors_cross(ab, ac);
  return is_zero_vector(cross, accuracy);
}
function test_are_collinear() {
  let p1: Point3d = {"x": 0.0, "y": 0.0, "z": 0.0};
  let p2: Point3d = {"x": 1.0, "y": 1.0, "z": 1.0};
  let p3: Point3d = {"x": 2.0, "y": 2.0, "z": 2.0};
  if (!are_collinear(p1, p2, p3, 10)) {
    _panic("collinear test failed");
  }
  let q3: Point3d = {"x": 1.0, "y": 2.0, "z": 3.0};
  if (are_collinear(p1, p2, q3, 10)) {
    _panic("non-collinear test failed");
  }
}
function main() {
  test_are_collinear();
  let a: Point3d = {"x": 4.802293498137402, "y": 3.536233125455244, "z": 0.0};
  let b: Point3d = {"x": -2.186788107953106, "y": -9.24561398001649, "z": 7.141509524846482};
  let c: Point3d = {"x": 1.530169574640268, "y": -2.447927606600034, "z": 3.343487096469054};
  console.log(_str(_str(are_collinear(a, b, c, 10))));
  let d: Point3d = {"x": 2.399001826862445, "y": -2.452009976680793, "z": 4.464656666157666};
  let e: Point3d = {"x": -3.682816335934376, "y": 5.753788986533145, "z": 9.490993909044244};
  let f: Point3d = {"x": 1.962903518985307, "y": 3.741415730125627, "z": 7.0};
  console.log(_str(_str(are_collinear(d, e, f, 10))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

