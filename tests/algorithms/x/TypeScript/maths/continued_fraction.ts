// Generated by Mochi v0.10.59 on 2025-08-07 00:17:04 GMT+7

function floor_div(a: number, b: number): number {
  let q: number = Math.trunc(a / b);
  let r: number = (a % b);
  if (((r != 0) && (((a < 0) && (b > 0)) || ((a > 0) && (b < 0))))) {
    q = (q - 1);
  }
  return q;
}
function continued_fraction(numerator: number, denominator: number): number[] {
  let num: number = numerator;
  let den: number = denominator;
  let result: number[] = [];
  while (true) {
    let integer_part = floor_div(num, den);
    result.push(integer_part);
    num = (num - (integer_part * den));
    if ((num == 0)) {
      break
    }
    let tmp = num;
    num = den;
    den = tmp;
  }
  return result;
}
function list_to_string(lst: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(lst))) {
    s = (s + _str(lst[(i) < 0 ? lst.length + (i) : i]));
    if ((i < (_len(lst) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  return (s + "]");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("Continued Fraction of 0.84375 is: " + list_to_string(continued_fraction(27, 32)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

