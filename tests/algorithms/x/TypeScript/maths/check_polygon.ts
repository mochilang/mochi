// Generated by Mochi v0.10.59 on 2025-08-07 00:17:00 GMT+7

function check_polygon(nums: number[]): boolean {
  if ((_len(nums) < 2)) {
    error("Monogons and Digons are not polygons in the Euclidean space");
  }
  let i: number = 0;
  while ((i < _len(nums))) {
    if ((nums[(i) < 0 ? nums.length + (i) : i] <= 0.0)) {
      error("All values must be greater than 0");
    }
    i = (i + 1);
  }
  let total: number = 0.0;
  let max_side: number = 0.0;
  i = 0;
  while ((i < _len(nums))) {
    let v: number = nums[(i) < 0 ? nums.length + (i) : i];
    total = (total + v);
    if ((v > max_side)) {
      max_side = v;
    }
    i = (i + 1);
  }
  return (max_side < (total - max_side));
}
let nums: number[] = [3.0, 7.0, 13.0, 2.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let _: boolean
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(check_polygon([6.0, 10.0, 5.0]))));
  console.log(_str(_str(check_polygon([3.0, 7.0, 13.0, 2.0]))));
  console.log(_str(_str(check_polygon([1.0, 4.3, 5.2, 12.2]))));
_ = check_polygon(nums)
  console.log(_str(_str(nums)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

