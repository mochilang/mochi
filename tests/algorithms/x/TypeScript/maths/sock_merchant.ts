// Generated by Mochi v0.10.59 on 2025-08-07 00:18:42 GMT+7

function sock_merchant(colors: number[]): number {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < _len(colors))) {
    arr.push(colors[(i) < 0 ? colors.length + (i) : i]);
    i = (i + 1);
  }
  let n: number = _len(arr);
  let a: number = 0;
  while ((a < n)) {
    let min_idx: number = a;
    let b: number = (a + 1);
    while ((b < n)) {
      if ((arr[(b) < 0 ? arr.length + (b) : b] < arr[(min_idx) < 0 ? arr.length + (min_idx) : min_idx])) {
        min_idx = b;
      }
      b = (b + 1);
    }
    let temp: number = arr[(a) < 0 ? arr.length + (a) : a];
    arr[(a) < 0 ? arr.length + (a) : a] = arr[(min_idx) < 0 ? arr.length + (min_idx) : min_idx];
    arr[(min_idx) < 0 ? arr.length + (min_idx) : min_idx] = temp;
    a = (a + 1);
  }
  let pairs: number = 0;
  i = 0;
  while ((i < n)) {
    let count: number = 1;
    while ((((i + 1) < n) && (arr[(i) < 0 ? arr.length + (i) : i] == arr[(Math.trunc((i + 1))) < 0 ? arr.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))]))) {
      count = (count + 1);
      i = (i + 1);
    }
    pairs = (pairs + Math.trunc(count / 2));
    i = (i + 1);
  }
  return pairs;
}
function test_sock_merchant() {
  let example1: number[] = [10, 20, 20, 10, 10, 30, 50, 10, 20];
  if ((sock_merchant(example1) != 3)) {
    _panic("example1 failed");
  }
  let example2: number[] = [1, 1, 3, 3];
  if ((sock_merchant(example2) != 2)) {
    _panic("example2 failed");
  }
}
function main() {
  test_sock_merchant();
  let example1: number[] = [10, 20, 20, 10, 10, 30, 50, 10, 20];
  console.log(_str(_str(sock_merchant(example1))));
  let example2: number[] = [1, 1, 3, 3];
  console.log(_str(_str(sock_merchant(example2))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

