// Generated by Mochi v0.10.67 on 2025-08-17 12:22:42 GMT+7

export interface QR { q: number[][]; r: number[][] }
function sqrt_approx(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + Math.trunc(x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function sign(x: number): number {
  if ((x >= 0.0)) {
    return 1.0;
  } else {
    return -1.0;
  }
}
function vector_norm(v: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < _len(v))) {
    sum = (sum + (v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] * v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let n = sqrt_approx(sum);
  return n;
}
function identity_matrix(n: number): number[][] {
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      if ((i === j)) {
        row.push(1.0);
      } else {
        row.push(0.0);
      }
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return mat;
}
function copy_matrix(a: number[][]): number[][] {
  let mat: number[][] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return mat;
}
function matmul(a: number[][], b: number[][]): number[][] {
  let m: number = _len(a);
  let n: number = _len(a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
  let p: number = _len(b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < m)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < p)) {
      let sum: number = 0.0;
      let k: number = 0;
      while ((k < n)) {
        sum = (sum + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function qr_decomposition(a: number[][]): QR {
  let m: number = _len(a);
  let n: number = _len(a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
  let t: number = ((m < n) ? m : n);
  let q: number[][] = identity_matrix(m);
  let r: number[][] = copy_matrix(a);
  let k: number = 0;
  while ((k < (t - 1))) {
    let x: number[] = [];
    let i: number = k;
    while ((i < m)) {
      x.push(r[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? r[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? r.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      i = (i + 1);
    }
    let e1: number[] = [];
    i = 0;
    while ((i < _len(x))) {
      if ((i === 0)) {
        e1.push(1.0);
      } else {
        e1.push(0.0);
      }
      i = (i + 1);
    }
    let alpha: number = vector_norm(x);
    let s: number = (sign(x[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()]) * alpha);
    let v: number[] = [];
    i = 0;
    while ((i < _len(x))) {
      v.push((x[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()] + (s * e1[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? e1.length + _mochi_idx : _mochi_idx;})()])));
      i = (i + 1);
    }
    let vnorm: number = vector_norm(v);
    i = 0;
    while ((i < _len(v))) {
      v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] = (v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] / vnorm);
      i = (i + 1);
    }
    let size: number = _len(v);
    let qk_small: number[][] = [];
    i = 0;
    while ((i < size)) {
      let row: number[] = [];
      let j: number = 0;
      while ((j < size)) {
        let delta: number = ((i === j) ? 1.0 : 0.0);
        row.push((delta - ((2.0 * v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]) * v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()])));
        j = (j + 1);
      }
      qk_small.push(row);
      i = (i + 1);
    }
    let qk: number[][] = identity_matrix(m);
    i = 0;
    while ((i < size)) {
      let j: number = 0;
      while ((j < size)) {
        qk[(()=>{const _mochi_idx = (k + i); return _mochi_idx < 0 ? qk.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (k + j); return _mochi_idx < 0 ? qk[(()=>{const _mochi_idx = (k + i); return _mochi_idx < 0 ? qk.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = qk_small[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? qk_small.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? qk_small[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? qk_small.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        j = (j + 1);
      }
      i = (i + 1);
    }
    q = matmul(q, qk);
    r = matmul(qk, r);
    k = (k + 1);
  }
  return {q, r};
}
function print_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
      line = (line + _str(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      if (((j + 1) < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let A: number[][]
let result: QR
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
A = [[12.0, -51.0, 4.0], [6.0, 167.0, -68.0], [-4.0, 24.0, -41.0]]
result = qr_decomposition(A)
  print_matrix(result.q);
  print_matrix(result.r);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

