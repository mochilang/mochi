// Generated by Mochi v0.10.59 on 2025-08-07 00:18:50 GMT+7

function hamming(n: number): number[] {
  if ((n < 1)) {
    _panic("n_element should be a positive number");
  }
  let hamming_list: number[] = [1];
  let i: number = 0;
  let j: number = 0;
  let k: number = 0;
  let index: number = 1;
  while ((index < n)) {
    while (((hamming_list[(i) < 0 ? hamming_list.length + (i) : i] * 2) <= hamming_list[(Math.trunc((_len(hamming_list) - 1))) < 0 ? hamming_list.length + (Math.trunc((_len(hamming_list) - 1))) : Math.trunc((_len(hamming_list) - 1))])) {
      i = (i + 1);
    }
    while (((hamming_list[(j) < 0 ? hamming_list.length + (j) : j] * 3) <= hamming_list[(Math.trunc((_len(hamming_list) - 1))) < 0 ? hamming_list.length + (Math.trunc((_len(hamming_list) - 1))) : Math.trunc((_len(hamming_list) - 1))])) {
      j = (j + 1);
    }
    while (((hamming_list[(k) < 0 ? hamming_list.length + (k) : k] * 5) <= hamming_list[(Math.trunc((_len(hamming_list) - 1))) < 0 ? hamming_list.length + (Math.trunc((_len(hamming_list) - 1))) : Math.trunc((_len(hamming_list) - 1))])) {
      k = (k + 1);
    }
    let m1: number = (hamming_list[(i) < 0 ? hamming_list.length + (i) : i] * 2);
    let m2: number = (hamming_list[(j) < 0 ? hamming_list.length + (j) : j] * 3);
    let m3: number = (hamming_list[(k) < 0 ? hamming_list.length + (k) : k] * 5);
    let next: number = m1;
    if ((m2 < next)) {
      next = m2;
    }
    if ((m3 < next)) {
      next = m3;
    }
    hamming_list.push(next);
    index = (index + 1);
  }
  return hamming_list;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (hamming(5)).join(' ') + "]"));
  console.log(_str("[" + (hamming(10)).join(' ') + "]"));
  console.log(_str("[" + (hamming(15)).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

