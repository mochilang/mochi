// Generated by Mochi v0.10.59 on 2025-08-07 00:18:45 GMT+7

function pow_int(base: number, exp: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function armstrong_number(n: number): boolean {
  if ((n < 1)) {
    return false;
  }
  let digits: number = 0;
  let temp: number = n;
  while ((temp > 0)) {
    temp = Math.trunc(temp / 10);
    digits = (digits + 1);
  }
  let total: number = 0;
  temp = n;
  while ((temp > 0)) {
    let rem: number = (temp % 10);
    total = (total + pow_int(rem, digits));
    temp = Math.trunc(temp / 10);
  }
  return (total == n);
}
function pluperfect_number(n: number): boolean {
  if ((n < 1)) {
    return false;
  }
  let digit_histogram: number[] = [];
  let i: number = 0;
  while ((i < 10)) {
    digit_histogram.push(0);
    i = (i + 1);
  }
  let digit_total: number = 0;
  let temp: number = n;
  while ((temp > 0)) {
    let rem: number = (temp % 10);
    digit_histogram[(rem) < 0 ? digit_histogram.length + (rem) : rem] = (digit_histogram[(rem) < 0 ? digit_histogram.length + (rem) : rem] + 1);
    digit_total = (digit_total + 1);
    temp = Math.trunc(temp / 10);
  }
  let total: number = 0;
  i = 0;
  while ((i < 10)) {
    if ((digit_histogram[(i) < 0 ? digit_histogram.length + (i) : i] > 0)) {
      total = (total + (digit_histogram[(i) < 0 ? digit_histogram.length + (i) : i] * pow_int(i, digit_total)));
    }
    i = (i + 1);
  }
  return (total == n);
}
function narcissistic_number(n: number): boolean {
  if ((n < 1)) {
    return false;
  }
  let digits: number = 0;
  let temp: number = n;
  while ((temp > 0)) {
    temp = Math.trunc(temp / 10);
    digits = (digits + 1);
  }
  temp = n;
  let total: number = 0;
  while ((temp > 0)) {
    let rem: number = (temp % 10);
    total = (total + pow_int(rem, digits));
    temp = Math.trunc(temp / 10);
  }
  return (total == n);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(armstrong_number(371)));
  console.log(_str(armstrong_number(200)));
  console.log(_str(pluperfect_number(371)));
  console.log(_str(pluperfect_number(200)));
  console.log(_str(narcissistic_number(371)));
  console.log(_str(narcissistic_number(200)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

