// Generated by Mochi v0.10.59 on 2025-08-07 00:18:48 GMT+7

function abs_int(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
function gcd(a: number, b: number): number {
  if ((a == 0)) {
    return abs_int(b);
  }
  return gcd((b % a), a);
}
function power(x: number, y: number, m: number): number {
  if ((y == 0)) {
    return (1 % m);
  }
  let temp: number = (power(x, Math.trunc(y / 2), m) % m);
  temp = ((temp * temp) % m);
  if (((y % 2) == 1)) {
    temp = ((temp * x) % m);
  }
  return temp;
}
function is_carmichael_number(n: number): boolean {
  if ((n <= 0)) {
    _panic("Number must be positive");
  }
  let b: number = 2;
  while ((b < n)) {
    if ((gcd(b, n) == 1)) {
      if ((power(b, (n - 1), n) != 1)) {
        return false;
      }
    }
    b = (b + 1);
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(power(2, 15, 3))));
  console.log(_str(_str(power(5, 1, 30))));
  console.log(_str(_str(is_carmichael_number(4))));
  console.log(_str(_str(is_carmichael_number(561))));
  console.log(_str(_str(is_carmichael_number(562))));
  console.log(_str(_str(is_carmichael_number(1105))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

