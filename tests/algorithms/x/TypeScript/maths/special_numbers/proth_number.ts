// Generated by Mochi v0.10.59 on 2025-08-07 00:24:31 GMT+7

function pow2(exp: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * 2);
    i = (i + 1);
  }
  return result;
}
function proth(_number: number): number {
  if ((_number < 1)) {
    _panic("Input value must be > 0");
  }
  if ((_number == 1)) {
    return 3;
  }
  if ((_number == 2)) {
    return 5;
  }
  let temp: number = Math.trunc(Math.trunc(_number / 3));
  let pow: number = 1;
  let block_index: number = 1;
  while ((pow <= temp)) {
    pow = (pow * 2);
    block_index = (block_index + 1);
  }
  let proth_list: number[] = [3, 5];
  let proth_index: number = 2;
  let increment: number = 3;
  let block: number = 1;
  while ((block < block_index)) {
    let i: number = 0;
    while ((i < increment)) {
      let next_val: number = (pow2((block + 1)) + proth_list[(Math.trunc((proth_index - 1))) < 0 ? proth_list.length + (Math.trunc((proth_index - 1))) : Math.trunc((proth_index - 1))]);
      proth_list.push(next_val);
      proth_index = (proth_index + 1);
      i = (i + 1);
    }
    increment = (increment * 2);
    block = (block + 1);
  }
  return proth_list[(Math.trunc((_number - 1))) < 0 ? proth_list.length + (Math.trunc((_number - 1))) : Math.trunc((_number - 1))];
}
function main() {
  let n: number = 1;
  while ((n <= 10)) {
    let value: number = proth(n);
    console.log(_str(((("The " + _str(n)) + "th Proth number: ") + _str(value))));
    n = (n + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

