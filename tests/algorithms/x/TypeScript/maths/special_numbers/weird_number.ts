// Generated by Mochi v0.10.67 on 2025-08-17 13:47:10 GMT+7

function bubble_sort(xs: number[]): number[] {
  let arr: number[] = xs;
  let n: number = _len(arr);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < ((n - i) - 1))) {
      if ((arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function factors(num: number): number[] {
  let values: number[] = [1];
  let i: number = 2;
  while (((i * i) <= num)) {
    if (((num % i) === 0)) {
      values.push(i);
      let d = Math.trunc(num / i);
      if ((d !== i)) {
        values.push(d);
      }
    }
    i = (i + 1);
  }
  return bubble_sort(values);
}
function sum_list(xs: number[]): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(xs))) {
    total = (total + xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return total;
}
function abundant(n: number): boolean {
  return (sum_list(factors(n)) > n);
}
function semi_perfect(_number: number): boolean {
  if ((_number <= 0)) {
    return true;
  }
  let values = factors(_number);
  let possible: boolean[] = [];
  let j: number = 0;
  while ((j <= _number)) {
    possible.push((j === 0));
    j = (j + 1);
  }
  let idx: number = 0;
  while ((idx < _len(values))) {
    let v = values[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()];
    let s: number = _number;
    while ((s >= v)) {
      if (possible[(s - v)]) {
        possible[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? possible.length + _mochi_idx : _mochi_idx;})()] = true;
      }
      s = (s - 1);
    }
    idx = (idx + 1);
  }
  return possible[(()=>{const _mochi_idx = _number; return _mochi_idx < 0 ? possible.length + _mochi_idx : _mochi_idx;})()];
}
function weird(_number: number): boolean {
  return (abundant(_number) && (semi_perfect(_number) === false));
}
function run_tests() {
  if (!_equal(factors(12), [1, 2, 3, 4, 6])) {
    _panic("factors 12 failed");
  }
  if (!_equal(factors(1), [1])) {
    _panic("factors 1 failed");
  }
  if (!_equal(factors(100), [1, 2, 4, 5, 10, 20, 25, 50])) {
    _panic("factors 100 failed");
  }
  if ((abundant(0) !== true)) {
    _panic("abundant 0 failed");
  }
  if ((abundant(1) !== false)) {
    _panic("abundant 1 failed");
  }
  if ((abundant(12) !== true)) {
    _panic("abundant 12 failed");
  }
  if ((abundant(13) !== false)) {
    _panic("abundant 13 failed");
  }
  if ((abundant(20) !== true)) {
    _panic("abundant 20 failed");
  }
  if ((semi_perfect(0) !== true)) {
    _panic("semi_perfect 0 failed");
  }
  if ((semi_perfect(1) !== true)) {
    _panic("semi_perfect 1 failed");
  }
  if ((semi_perfect(12) !== true)) {
    _panic("semi_perfect 12 failed");
  }
  if ((semi_perfect(13) !== false)) {
    _panic("semi_perfect 13 failed");
  }
  if ((weird(0) !== false)) {
    _panic("weird 0 failed");
  }
  if ((weird(70) !== true)) {
    _panic("weird 70 failed");
  }
  if ((weird(77) !== false)) {
    _panic("weird 77 failed");
  }
}
function main() {
  run_tests();
  let nums: number[] = [69, 70, 71];
  let i: number = 0;
  while ((i < _len(nums))) {
    let n: number = nums[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()];
    if (weird(n)) {
      console.log(_str((_str(n) + " is weird.")));
    } else {
      console.log(_str((_str(n) + " is not weird.")));
    }
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === 'number' && typeof b === 'number') {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

