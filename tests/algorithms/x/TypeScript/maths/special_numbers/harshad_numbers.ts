// Generated by Mochi v0.10.67 on 2025-08-17 12:23:11 GMT+7

function panic(msg: string) {
}
function char_to_value(c: string): number {
  let digits: string = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let i: number = 0;
  while ((i < _len(digits))) {
    if ((digits[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? digits.length + _mochi_idx : _mochi_idx;})()] === c)) {
      return i;
    }
    i = (i + 1);
  }
  panic("invalid digit");
}
function int_to_base(_number: number, base: number): string {
  if (((base < 2) || (base > 36))) {
    panic("'base' must be between 2 and 36 inclusive");
  }
  if ((_number < 0)) {
    panic("number must be a positive integer");
  }
  let digits: string = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let n: number = _number;
  let result: string = "";
  while ((n > 0)) {
    let remainder: bigint = (n % base);
    result = (digits[(()=>{const _mochi_idx = remainder; return _mochi_idx < 0 ? digits.length + _mochi_idx : _mochi_idx;})()] + result);
    n = Math.trunc(n / base);
  }
  if ((result === "")) {
    result = "0";
  }
  return result;
}
function base_to_int(num_str: string, base: number): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(num_str))) {
    let c: string = num_str[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? num_str.length + _mochi_idx : _mochi_idx;})()];
    value = ((value * base) + char_to_value(c));
    i = (i + 1);
  }
  return value;
}
function sum_of_digits(num: number, base: number): string {
  if (((base < 2) || (base > 36))) {
    panic("'base' must be between 2 and 36 inclusive");
  }
  let num_str = int_to_base(num, base);
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(num_str))) {
    let c = num_str[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? num_str.length + _mochi_idx : _mochi_idx;})()];
    total = (total + char_to_value(c));
    i = (i + 1);
  }
  return int_to_base(total, base);
}
function harshad_numbers_in_base(limit: number, base: number): string[] {
  if (((base < 2) || (base > 36))) {
    panic("'base' must be between 2 and 36 inclusive");
  }
  if ((limit < 0)) {
    return [];
  }
  let numbers: string[] = [];
  let i: number = 1;
  while ((i < limit)) {
    let s: string = sum_of_digits(i, base);
    let divisor: number = base_to_int(s, base);
    if (((i % divisor) === 0)) {
      numbers.push(int_to_base(i, base));
    }
    i = (i + 1);
  }
  return numbers;
}
function is_harshad_number_in_base(num: number, base: number): boolean {
  if (((base < 2) || (base > 36))) {
    panic("'base' must be between 2 and 36 inclusive");
  }
  if ((num < 0)) {
    return false;
  }
  let n = int_to_base(num, base);
  let d = sum_of_digits(num, base);
  let n_val: number = base_to_int(n, base);
  let d_val: number = base_to_int(d, base);
  return ((n_val % d_val) === 0);
}
function main() {
  console.log(_str(int_to_base(0, 21)));
  console.log(_str(int_to_base(23, 2)));
  console.log(_str(int_to_base(58, 5)));
  console.log(_str(int_to_base(167, 16)));
  console.log(_str(sum_of_digits(103, 12)));
  console.log(_str(sum_of_digits(1275, 4)));
  console.log(_str(sum_of_digits(6645, 2)));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(harshad_numbers_in_base(15, 2))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(harshad_numbers_in_base(12, 34))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(harshad_numbers_in_base(12, 4))));
  console.log(_str(is_harshad_number_in_base(18, 10)));
  console.log(_str(is_harshad_number_in_base(21, 10)));
  console.log(_str(is_harshad_number_in_base(-21, 5)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

