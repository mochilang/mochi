// Generated by Mochi v0.10.59 on 2025-08-07 00:18:47 GMT+7

function binomial_coefficient(total_elements: number, elements_to_choose: number): number {
  if (((elements_to_choose == 0) || (elements_to_choose == total_elements))) {
    return 1;
  }
  let k: number = elements_to_choose;
  if ((k > (total_elements - k))) {
    k = (total_elements - k);
  }
  let coefficient: number = 1;
  let i: number = 0;
  while ((i < k)) {
    coefficient = (coefficient * (total_elements - i));
    coefficient = Math.trunc(coefficient / (i + 1));
    i = (i + 1);
  }
  return coefficient;
}
function bell_numbers(max_set_length: number): number[] {
  if ((max_set_length < 0)) {
    _panic("max_set_length must be non-negative");
  }
  let bell: number[] = [];
  let i: number = 0;
  while ((i <= max_set_length)) {
    bell.push(0);
    i = (i + 1);
  }
  bell[(0) < 0 ? bell.length + (0) : 0] = 1;
  i = 1;
  while ((i <= max_set_length)) {
    let j: number = 0;
    while ((j < i)) {
      bell[(i) < 0 ? bell.length + (i) : i] = (bell[(i) < 0 ? bell.length + (i) : i] + (binomial_coefficient((i - 1), j) * bell[(j) < 0 ? bell.length + (j) : j]));
      j = (j + 1);
    }
    i = (i + 1);
  }
  return bell;
}
function main() {
  console.log(_str(_str(bell_numbers(5))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

