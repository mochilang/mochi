// Generated by Mochi v0.10.67 on 2025-08-17 12:22:59 GMT+7

let PI: number = 3.141592653589793;
function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow(x: number, n: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    result = (result * x);
    i = (i + 1);
  }
  return result;
}
function factorial(n: number): number {
  let result: number = 1.0;
  let i: number = 2;
  while ((i <= n)) {
    result = (result * i);
    i = (i + 1);
  }
  return result;
}
function radians(deg: number): number {
  return ((deg * PI) / 180.0);
}
function taylor_sin(angle_in_degrees: number, accuracy: number, rounded_values_count: number): number {
  let k: number = Math.floor((angle_in_degrees / 360.0));
  let angle: number = (angle_in_degrees - (k * 360.0));
  let angle_in_radians: number = radians(angle);
  let result: number = angle_in_radians;
  let a: number = 3;
  let sign: number = -1.0;
  let i: number = 0;
  while ((i < accuracy)) {
    result = (result + ((sign * pow(angle_in_radians, a)) / factorial(a)));
    sign = -sign;
    a = (a + 2);
    i = (i + 1);
  }
  return result;
}
function test_sin() {
  let eps: number = 1e-07;
  if ((abs((taylor_sin(0.0, 18, 10) - 0.0)) > eps)) {
    _panic("sin(0) failed");
  }
  if ((abs((taylor_sin(90.0, 18, 10) - 1.0)) > eps)) {
    _panic("sin(90) failed");
  }
  if ((abs((taylor_sin(180.0, 18, 10) - 0.0)) > eps)) {
    _panic("sin(180) failed");
  }
  if ((abs((taylor_sin(270.0, 18, 10) - -1.0)) > eps)) {
    _panic("sin(270) failed");
  }
}
function main() {
  test_sin();
  let res: number = taylor_sin(64.0, 18, 10);
  console.log(_str(res));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

