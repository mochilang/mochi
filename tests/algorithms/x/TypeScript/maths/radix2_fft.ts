// Generated by Mochi v0.10.67 on 2025-08-17 12:22:45 GMT+7

export interface Complex { re: number; im: number }
function c_add(a: Complex, b: Complex): Complex {
  return {re: (a.re + b.re), im: (a.im + b.im)};
}
function c_sub(a: Complex, b: Complex): Complex {
  return {re: (a.re - b.re), im: (a.im - b.im)};
}
function c_mul(a: Complex, b: Complex): Complex {
  return {re: ((a.re * b.re) - (a.im * b.im)), im: ((a.re * b.im) + (a.im * b.re))};
}
function c_mul_scalar(a: Complex, s: number): Complex {
  return {re: (a.re * s), im: (a.im * s)};
}
function c_div_scalar(a: Complex, s: number): Complex {
  return {re: (a.re / s), im: (a.im / s)};
}
let PI: number = 3.141592653589793;
function sin_taylor(x: number): number {
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = (k1 + 1.0);
    term = Math.trunc(((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = Math.trunc(((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function exp_i(theta: number): Complex {
  return {re: cos_taylor(theta), im: sin_taylor(theta)};
}
function make_complex_list(n: number, value: Complex): Complex[] {
  let arr: Complex[] = [];
  let i: number = 0;
  while ((i < n)) {
    arr.push(value);
    i = (i + 1);
  }
  return arr;
}
function fft(a: Complex[], invert: boolean): Complex[] {
  let n: number = _len(a);
  if ((n === 1)) {
    return [a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]];
  }
  let a0: Complex[] = [];
  let a1: Complex[] = [];
  let i: number = 0;
  while ((i < Math.trunc(n / 2))) {
    a0.push(a[(()=>{const _mochi_idx = Math.trunc((2 * i)); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
    a1.push(a[(()=>{const _mochi_idx = Math.trunc(((2 * i) + 1)); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let y0: Complex[] = fft(a0, invert);
  let y1: Complex[] = fft(a1, invert);
  let angle: number = (((2.0 * PI) / n) * (invert ? -1.0 : 1.0));
  let w: Complex = {re: 1.0, im: 0.0};
  let wn: Complex = exp_i(angle);
  let y: Complex[] = make_complex_list(n, {re: 0.0, im: 0.0});
  i = 0;
  while ((i < Math.trunc(n / 2))) {
    let t: Complex = c_mul(w, y1[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y1.length + _mochi_idx : _mochi_idx;})()]);
    let u: Complex = y0[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y0.length + _mochi_idx : _mochi_idx;})()];
    let even: Complex = c_add(u, t);
    let odd: Complex = c_sub(u, t);
    if (invert) {
      even = c_div_scalar(even, 2.0);
      odd = c_div_scalar(odd, 2.0);
    }
    y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] = even;
    y[(()=>{const _mochi_idx = (i + Math.trunc(n / 2)); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] = odd;
    w = c_mul(w, wn);
    i = (i + 1);
  }
  return y;
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let p: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 10.0);
    i = (i + 1);
  }
  return p;
}
function round_to(x: number, ndigits: number): number {
  let m: number = pow10(ndigits);
  return (Math.floor(((x * m) + 0.5)) / m);
}
function list_to_string(l: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(l))) {
    s = (s + _str(l[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? l.length + _mochi_idx : _mochi_idx;})()]));
    if (((i + 1) < _len(l))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function multiply_poly(a: number[], b: number[]): number[] {
  let n: number = 1;
  while ((n < ((_len(a) + _len(b)) - 1))) {
    n = (n * 2);
  }
  let fa: Complex[] = make_complex_list(n, {re: 0.0, im: 0.0});
  let fb: Complex[] = make_complex_list(n, {re: 0.0, im: 0.0});
  let i: number = 0;
  while ((i < _len(a))) {
    fa[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? fa.length + _mochi_idx : _mochi_idx;})()] = {re: a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()], im: 0.0};
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(b))) {
    fb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? fb.length + _mochi_idx : _mochi_idx;})()] = {re: b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()], im: 0.0};
    i = (i + 1);
  }
  fa = fft(fa, false);
  fb = fft(fb, false);
  i = 0;
  while ((i < n)) {
    fa[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? fa.length + _mochi_idx : _mochi_idx;})()] = c_mul(fa[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? fa.length + _mochi_idx : _mochi_idx;})()], fb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? fb.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  fa = fft(fa, true);
  let res: number[] = [];
  i = 0;
  while ((i < ((_len(a) + _len(b)) - 1))) {
    let val: Complex = fa[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? fa.length + _mochi_idx : _mochi_idx;})()];
    res.push(round_to(val.re, 8));
    i = (i + 1);
  }
  while (((_len(res) > 0) && (res[(()=>{const _mochi_idx = Math.trunc((_len(res) - 1)); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] === 0.0))) {
    res = res.slice(0, (_len(res) - 1));
  }
  return res;
}
let A: number[] = [0.0, 1.0, 0.0, 2.0];
let B: number[] = [2.0, 3.0, 4.0, 0.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let product: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
product = multiply_poly(A, B)
  console.log(_str(list_to_string(product)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

