// Generated by Mochi v0.10.63 on 2025-08-12 07:59:13 GMT+7

function integer_square_root(num: number): number {
  if ((num < 0)) {
    _panic("num must be non-negative integer");
  }
  if ((num < 2)) {
    return num;
  }
  let left_bound: number = 0;
  let right_bound: number = Math.trunc(num / 2);
  while ((left_bound <= right_bound)) {
    let mid: number = (left_bound + Math.trunc((right_bound - left_bound) / 2));
    let mid_squared: number = (mid * mid);
    if ((mid_squared == num)) {
      return mid;
    }
    if ((mid_squared < num)) {
      left_bound = (mid + 1);
    } else {
      right_bound = (mid - 1);
    }
  }
  return right_bound;
}
function test_integer_square_root() {
  let expected: number[] = [0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4];
  let i: number = 0;
  while ((i < _len(expected))) {
    let result: number = integer_square_root(i);
    if ((result != expected[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? expected.length + _mochi_idx : _mochi_idx;})()])) {
      _panic(("test failed at index " + _str(i)));
    }
    i = (i + 1);
  }
  if ((integer_square_root(625) != 25)) {
    _panic("sqrt of 625 incorrect");
  }
  if ((integer_square_root(2147483647) != 46340)) {
    _panic("sqrt of max int incorrect");
  }
}
function main() {
  test_integer_square_root();
  console.log(_str(integer_square_root(625)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

