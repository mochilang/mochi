// Generated by Mochi v0.10.59 on 2025-08-07 00:17:25 GMT+7

function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function pow_int(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function nth_root(x: number, n: number): number {
  if ((x == 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    let denom: number = pow_int(guess, (n - 1));
    guess = ((((n - 1) * guess) + (x / denom)) / n);
    i = (i + 1);
  }
  return guess;
}
function round_nearest(x: number): number {
  if ((x >= 0.0)) {
    let n: number = Math.trunc((x + 0.5));
    return n;
  }
  let n: number = Math.trunc((x - 0.5));
  return n;
}
function compute_geometric_mean(nums: number[]): number {
  if ((_len(nums) == 0)) {
    _panic("no numbers");
  }
  let product: number = 1.0;
  let i: number = 0;
  while ((i < _len(nums))) {
    product = (product * nums[(i) < 0 ? nums.length + (i) : i]);
    i = (i + 1);
  }
  if (((product < 0.0) && ((_len(nums) % 2) == 0))) {
    _panic("Cannot Compute Geometric Mean for these numbers.");
  }
  let mean: number = nth_root(abs(product), _len(nums));
  if ((product < 0.0)) {
    mean = -mean;
  }
  let possible: number = round_nearest(mean);
  if ((pow_int(possible, _len(nums)) == product)) {
    mean = possible;
  }
  return mean;
}
function test_compute_geometric_mean() {
  let eps: number = 0.0001;
  let m1: number = compute_geometric_mean([2.0, 8.0]);
  if ((abs((m1 - 4.0)) > eps)) {
    _panic("test1 failed");
  }
  let m2: number = compute_geometric_mean([5.0, 125.0]);
  if ((abs((m2 - 25.0)) > eps)) {
    _panic("test2 failed");
  }
  let m3: number = compute_geometric_mean([1.0, 0.0]);
  if ((abs((m3 - 0.0)) > eps)) {
    _panic("test3 failed");
  }
  let m4: number = compute_geometric_mean([1.0, 5.0, 25.0, 5.0]);
  if ((abs((m4 - 5.0)) > eps)) {
    _panic("test4 failed");
  }
  let m5: number = compute_geometric_mean([-5.0, 25.0, 1.0]);
  if ((abs((m5 + 5.0)) > eps)) {
    _panic("test5 failed");
  }
}
function main() {
  test_compute_geometric_mean();
  console.log(_str(compute_geometric_mean([-3.0, -27.0])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

