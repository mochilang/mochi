// Generated by Mochi v0.10.59 on 2025-08-07 00:18:17 GMT+7

export interface Polynomial { degree: number; coefficients: number[] }
function copy_list(xs: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return res;
}
function polynomial_new(degree: number, coeffs: number[]): Polynomial {
  if ((_len(coeffs) != (degree + 1))) {
    _panic("The number of coefficients should be equal to the degree + 1.");
  }
  return {degree, "coefficients": copy_list(coeffs)};
}
function add(p: Polynomial, q: Polynomial): Polynomial {
  if ((p.degree > q.degree)) {
    let coeffs: number[] = copy_list(p.coefficients);
    let i: number = 0;
    while ((i <= q.degree)) {
      coeffs[(i) < 0 ? coeffs.length + (i) : i] = (coeffs[(i) < 0 ? coeffs.length + (i) : i] + q.coefficients[(i) < 0 ? q.coefficients.length + (i) : i]);
      i = (i + 1);
    }
    return {"degree": p.degree, "coefficients": coeffs};
  } else {
    let coeffs: number[] = copy_list(q.coefficients);
    let i: number = 0;
    while ((i <= p.degree)) {
      coeffs[(i) < 0 ? coeffs.length + (i) : i] = (coeffs[(i) < 0 ? coeffs.length + (i) : i] + p.coefficients[(i) < 0 ? p.coefficients.length + (i) : i]);
      i = (i + 1);
    }
    return {"degree": q.degree, "coefficients": coeffs};
  }
}
function neg(p: Polynomial): Polynomial {
  let coeffs: number[] = [];
  let i: number = 0;
  while ((i <= p.degree)) {
    coeffs.push(-p.coefficients[(i) < 0 ? p.coefficients.length + (i) : i]);
    i = (i + 1);
  }
  return {"degree": p.degree, "coefficients": coeffs};
}
function sub(p: Polynomial, q: Polynomial): Polynomial {
  return add(p, neg(q));
}
function mul(p: Polynomial, q: Polynomial): Polynomial {
  let size: number = ((p.degree + q.degree) + 1);
  let coeffs: number[] = [];
  let i: number = 0;
  while ((i < size)) {
    coeffs.push(0.0);
    i = (i + 1);
  }
  i = 0;
  while ((i <= p.degree)) {
    let j: number = 0;
    while ((j <= q.degree)) {
      coeffs[((i + j)) < 0 ? coeffs.length + ((i + j)) : (i + j)] = (coeffs[(Math.trunc((i + j))) < 0 ? coeffs.length + (Math.trunc((i + j))) : Math.trunc((i + j))] + (p.coefficients[(i) < 0 ? p.coefficients.length + (i) : i] * q.coefficients[(j) < 0 ? q.coefficients.length + (j) : j]));
      j = (j + 1);
    }
    i = (i + 1);
  }
  return {"degree": (p.degree + q.degree), "coefficients": coeffs};
}
function power(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function evaluate(p: Polynomial, x: number): number {
  let result: number = 0.0;
  let i: number = 0;
  while ((i <= p.degree)) {
    result = (result + (p.coefficients[(i) < 0 ? p.coefficients.length + (i) : i] * power(x, i)));
    i = (i + 1);
  }
  return result;
}
function poly_to_string(p: Polynomial): string {
  let s: string = "";
  let i: number = p.degree;
  while ((i >= 0)) {
    let coeff: number = p.coefficients[(i) < 0 ? p.coefficients.length + (i) : i];
    if ((coeff != 0.0)) {
      if ((_len(s) > 0)) {
        if ((coeff > 0.0)) {
          s = (s + " + ");
        } else {
          s = (s + " - ");
        }
      } else {
        if ((coeff < 0.0)) {
          s = (s + "-");
        }
      }
      let abs_coeff: number = ((coeff < 0.0) ? -coeff : coeff);
      if ((i == 0)) {
        s = (s + _str(abs_coeff));
      } else {
        if ((i == 1)) {
          s = ((s + _str(abs_coeff)) + "x");
        } else {
          s = (((s + _str(abs_coeff)) + "x^") + _str(i));
        }
      }
    }
    i = (i - 1);
  }
  if ((s == "")) {
    s = "0";
  }
  return s;
}
function derivative(p: Polynomial): Polynomial {
  if ((p.degree == 0)) {
    return {"degree": 0, "coefficients": [0.0]};
  }
  let coeffs: number[] = [];
  let i: number = 0;
  while ((i < p.degree)) {
    coeffs.push((p.coefficients[(Math.trunc((i + 1))) < 0 ? p.coefficients.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))] * Number((i + 1))));
    i = (i + 1);
  }
  return {"degree": (p.degree - 1), "coefficients": coeffs};
}
function integral(p: Polynomial, constant: number): Polynomial {
  let coeffs: number[] = [constant];
  let i: number = 0;
  while ((i <= p.degree)) {
    coeffs.push((p.coefficients[(i) < 0 ? p.coefficients.length + (i) : i] / Number((i + 1))));
    i = (i + 1);
  }
  return {"degree": (p.degree + 1), "coefficients": coeffs};
}
function equals(p: Polynomial, q: Polynomial): boolean {
  if ((p.degree != q.degree)) {
    return false;
  }
  let i: number = 0;
  while ((i <= p.degree)) {
    if ((p.coefficients[(i) < 0 ? p.coefficients.length + (i) : i] != q.coefficients[(i) < 0 ? q.coefficients.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function not_equals(p: Polynomial, q: Polynomial): boolean {
  return !equals(p, q);
}
function test_polynomial() {
  let p: Polynomial = polynomial_new(2, [1.0, 2.0, 3.0]);
  let q: Polynomial = polynomial_new(2, [1.0, 2.0, 3.0]);
  if ((poly_to_string(add(p, q)) != "6x^2 + 4x + 2")) {
    _panic("add failed");
  }
  if ((poly_to_string(sub(p, q)) != "0")) {
    _panic("sub failed");
  }
  if ((evaluate(p, 2.0) != 17.0)) {
    _panic("evaluate failed");
  }
  if ((poly_to_string(derivative(p)) != "6x + 2")) {
    _panic("derivative failed");
  }
  let integ: string = poly_to_string(integral(p, 0.0));
  if ((integ != "1x^3 + 1x^2 + 1x")) {
    _panic("integral failed");
  }
  if (!equals(p, q)) {
    _panic("equals failed");
  }
  if (not_equals(p, q)) {
    _panic("not_equals failed");
  }
}
function main() {
  test_polynomial();
  let p: Polynomial = polynomial_new(2, [1.0, 2.0, 3.0]);
  let d: Polynomial = derivative(p);
  console.log(_str(poly_to_string(d)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

