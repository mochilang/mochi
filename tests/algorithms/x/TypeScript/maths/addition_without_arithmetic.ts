// Generated by Mochi v0.10.63 on 2025-08-11 18:40:14 GMT+7

let MAX: number = 4294967296;
let HALF: number = 2147483648;
function to_unsigned(n: number): number {
  if ((n < 0)) {
    return (MAX + n);
  }
  return n;
}
function from_unsigned(n: number): number {
  if ((n >= HALF)) {
    return (n - MAX);
  }
  return n;
}
function bit_and(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  let res: number = 0;
  let bit: number = 1;
  let i: number = 0;
  while ((i < 32)) {
    if ((((x % 2) == 1) && ((y % 2) == 1))) {
      res = (res + bit);
    }
    x = Math.trunc(x / 2);
    y = Math.trunc(y / 2);
    bit = (bit * 2);
    i = (i + 1);
  }
  return res;
}
function bit_xor(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  let res: number = 0;
  let bit: number = 1;
  let i: number = 0;
  while ((i < 32)) {
    let abit: number = (x % 2);
    let bbit: number = (y % 2);
    if ((((abit + bbit) % 2) == 1)) {
      res = (res + bit);
    }
    x = Math.trunc(x / 2);
    y = Math.trunc(y / 2);
    bit = (bit * 2);
    i = (i + 1);
  }
  return res;
}
function lshift1(num: number): number {
  return ((num * 2) % MAX);
}
function add(a: number, b: number): number {
  let first: number = to_unsigned(a);
  let second: number = to_unsigned(b);
  while ((second != 0)) {
    let carry = bit_and(first, second);
    first = bit_xor(first, second);
    second = lshift1(carry);
  }
  let result = from_unsigned(first);
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(add(3, 5))));
  console.log(_str(_str(add(13, 5))));
  console.log(_str(_str(add(-7, 2))));
  console.log(_str(_str(add(0, -7))));
  console.log(_str(_str(add(-321, 0))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

