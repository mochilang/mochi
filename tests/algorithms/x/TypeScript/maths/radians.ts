// Generated by Mochi v0.10.59 on 2025-08-07 00:18:27 GMT+7

let PI: number = 3.141592653589793;
function radians(degree: number): number {
  return (degree / (180.0 / PI));
}
function abs_float(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function almost_equal(a: number, b: number): boolean {
  return (abs_float((a - b)) <= 1e-08);
}
function test_radians() {
  if (!almost_equal(radians(180.0), PI)) {
    _panic("radians 180 failed");
  }
  if (!almost_equal(radians(92.0), 1.6057029118347832)) {
    _panic("radians 92 failed");
  }
  if (!almost_equal(radians(274.0), 4.782202150464463)) {
    _panic("radians 274 failed");
  }
  if (!almost_equal(radians(109.82), 1.9167205845401725)) {
    _panic("radians 109.82 failed");
  }
}
function main() {
  test_radians();
  console.log(_str(_str(radians(180.0))));
  console.log(_str(_str(radians(92.0))));
  console.log(_str(_str(radians(274.0))));
  console.log(_str(_str(radians(109.82))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

