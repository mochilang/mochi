// Generated by Mochi v0.10.66 on 2025-08-16 14:48:22 GMT+7

export interface Coeffs { x: number; y: number }
function abs_val(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function extended_euclidean_algorithm(a: number, b: number): Coeffs {
  if ((abs_val(a) === 1)) {
    return {x: a, y: 0};
  }
  if ((abs_val(b) === 1)) {
    return {x: 0, y: b};
  }
  let old_remainder: number = a;
  let remainder: number = b;
  let old_coeff_a: number = 1;
  let coeff_a: number = 0;
  let old_coeff_b: number = 0;
  let coeff_b: number = 1;
  while ((remainder !== 0)) {
    let quotient: number = Math.trunc(old_remainder / remainder);
    let temp_remainder: bigint = (old_remainder - (quotient * remainder));
    old_remainder = remainder;
    remainder = temp_remainder;
    let temp_a: bigint = (old_coeff_a - (quotient * coeff_a));
    old_coeff_a = coeff_a;
    coeff_a = temp_a;
    let temp_b: bigint = (old_coeff_b - (quotient * coeff_b));
    old_coeff_b = coeff_b;
    coeff_b = temp_b;
  }
  if ((a < 0)) {
    old_coeff_a = -old_coeff_a;
  }
  if ((b < 0)) {
    old_coeff_b = -old_coeff_b;
  }
  return {x: old_coeff_a, y: old_coeff_b};
}
function test_extended_euclidean_algorithm() {
  let r1: Coeffs = extended_euclidean_algorithm(1, 24);
  if (((r1.x !== 1) || (r1.y !== 0))) {
    _panic("test1 failed");
  }
  let r2: Coeffs = extended_euclidean_algorithm(8, 14);
  if (((r2.x !== 2) || (r2.y !== -1))) {
    _panic("test2 failed");
  }
  let r3: Coeffs = extended_euclidean_algorithm(240, 46);
  if (((r3.x !== -9) || (r3.y !== 47))) {
    _panic("test3 failed");
  }
  let r4: Coeffs = extended_euclidean_algorithm(1, -4);
  if (((r4.x !== 1) || (r4.y !== 0))) {
    _panic("test4 failed");
  }
  let r5: Coeffs = extended_euclidean_algorithm(-2, -4);
  if (((r5.x !== -1) || (r5.y !== 0))) {
    _panic("test5 failed");
  }
  let r6: Coeffs = extended_euclidean_algorithm(0, -4);
  if (((r6.x !== 0) || (r6.y !== -1))) {
    _panic("test6 failed");
  }
  let r7: Coeffs = extended_euclidean_algorithm(2, 0);
  if (((r7.x !== 1) || (r7.y !== 0))) {
    _panic("test7 failed");
  }
}
function main() {
  test_extended_euclidean_algorithm();
  let res: Coeffs = extended_euclidean_algorithm(240, 46);
  console.log(_str((((("(" + _str(res.x)) + ", ") + _str(res.y)) + ")")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

