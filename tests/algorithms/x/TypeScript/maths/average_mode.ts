// Generated by Mochi v0.10.66 on 2025-08-16 14:47:55 GMT+7

function contains_int(xs: number[], x: number): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function contains_string(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function count_int(xs: number[], x: number): number {
  let cnt: number = 0;
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === x)) {
      cnt = (cnt + 1);
    }
    i = (i + 1);
  }
  return cnt;
}
function count_string(xs: string[], x: string): number {
  let cnt: number = 0;
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === x)) {
      cnt = (cnt + 1);
    }
    i = (i + 1);
  }
  return cnt;
}
function sort_int(xs: number[]): number[] {
  let arr: number[] = xs;
  let i: number = 0;
  while ((i < _len(arr))) {
    let j: bigint = (i + 1);
    while ((j < _len(arr))) {
      if ((arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function sort_string(xs: string[]): string[] {
  let arr: string[] = xs;
  let i: number = 0;
  while ((i < _len(arr))) {
    let j: bigint = (i + 1);
    while ((j < _len(arr))) {
      if ((arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: string = arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function mode_int(lst: number[]): number[] {
  if ((_len(lst) === 0)) {
    return [];
  }
  let counts: number[] = [];
  let i: number = 0;
  while ((i < _len(lst))) {
    counts.push(count_int(lst, lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let max_count: number = 0;
  i = 0;
  while ((i < _len(counts))) {
    if ((counts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] > max_count)) {
      max_count = counts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  let modes: number[] = [];
  i = 0;
  while ((i < _len(lst))) {
    if ((counts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] === max_count)) {
      let v: number = lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()];
      if (!contains_int(modes, v)) {
        modes.push(v);
      }
    }
    i = (i + 1);
  }
  return sort_int(modes);
}
function mode_string(lst: string[]): string[] {
  if ((_len(lst) === 0)) {
    return [];
  }
  let counts: number[] = [];
  let i: number = 0;
  while ((i < _len(lst))) {
    counts.push(count_string(lst, lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let max_count: number = 0;
  i = 0;
  while ((i < _len(counts))) {
    if ((counts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] > max_count)) {
      max_count = counts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 1);
  }
  let modes: string[] = [];
  i = 0;
  while ((i < _len(lst))) {
    if ((counts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] === max_count)) {
      let v: string = lst[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lst.length + _mochi_idx : _mochi_idx;})()];
      if (!contains_string(modes, v)) {
        modes.push(v);
      }
    }
    i = (i + 1);
  }
  return sort_string(modes);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(mode_int([2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2]))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2]))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2]))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(mode_string(["x", "y", "y", "z"]))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(mode_string(["x", "x", "y", "y", "z"]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

