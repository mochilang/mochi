// Generated by Mochi v0.10.59 on 2025-08-07 00:17:18 GMT+7

function binary_exponentiation(a: number, n: number, mod: number): number {
  if ((n == 0)) {
    return 1;
  }
  if (((n % 2) == 1)) {
    return ((binary_exponentiation(a, (n - 1), mod) * a) % mod);
  }
  let b: number = binary_exponentiation(a, Math.trunc(n / 2), mod);
  return ((b * b) % mod);
}
function naive_exponent_mod(a: number, n: number, mod: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < n)) {
    result = ((result * a) % mod);
    i = (i + 1);
  }
  return result;
}
function print_bool(b: boolean) {
  if (b) {
    console.log("");
  } else {
    _stdout_write("");
  }
}
let p: number = 701;
let a: number = 1000000000;
let b: number = 10;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
let left: number
let right_fast: number
let right_naive: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
left = (Math.trunc(a / b) % p)
right_fast = ((a * binary_exponentiation(b, (p - 2), p)) % p)
  print_bool((left == right_fast));
right_naive = ((a * naive_exponent_mod(b, (p - 2), p)) % p)
  print_bool((left == right_naive));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

