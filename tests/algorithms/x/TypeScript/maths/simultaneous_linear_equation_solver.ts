// Generated by Mochi v0.10.59 on 2025-08-07 00:18:40 GMT+7

function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let p: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 10.0);
    i = (i + 1);
  }
  return p;
}
function round(x: number, n: number): number {
  let m: number = pow10(n);
  return (floor(((x * m) + 0.5)) / m);
}
function clone_matrix(mat: number[][]): number[][] {
  let new_mat: number[][] = [];
  let i: number = 0;
  while ((i < _len(mat))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(mat[(i) < 0 ? mat.length + (i) : i]))) {
      row.push(mat[(i) < 0 ? mat.length + (i) : i][(j) < 0 ? mat[(i) < 0 ? mat.length + (i) : i].length + (j) : j]);
      j = (j + 1);
    }
    new_mat.push(row);
    i = (i + 1);
  }
  return new_mat;
}
function solve_simultaneous(equations: number[][]): number[] {
  let n: number = _len(equations);
  if ((n == 0)) {
    _panic("solve_simultaneous() requires n lists of length n+1");
  }
  let m: number = (n + 1);
  let i: number = 0;
  while ((i < n)) {
    if ((_len(equations[(i) < 0 ? equations.length + (i) : i]) != m)) {
      _panic("solve_simultaneous() requires n lists of length n+1");
    }
    i = (i + 1);
  }
  let a: number[][] = clone_matrix(equations);
  let row: number = 0;
  while ((row < n)) {
    let pivot: number = row;
    while (((pivot < n) && (a[(pivot) < 0 ? a.length + (pivot) : pivot][(row) < 0 ? a[(pivot) < 0 ? a.length + (pivot) : pivot].length + (row) : row] == 0.0))) {
      pivot = (pivot + 1);
    }
    if ((pivot == n)) {
      _panic("solve_simultaneous() requires at least 1 full equation");
    }
    if ((pivot != row)) {
      let temp: number[] = a[(row) < 0 ? a.length + (row) : row];
      a[(row) < 0 ? a.length + (row) : row] = a[(pivot) < 0 ? a.length + (pivot) : pivot];
      a[(pivot) < 0 ? a.length + (pivot) : pivot] = temp;
    }
    let pivot_val: number = a[(row) < 0 ? a.length + (row) : row][(row) < 0 ? a[(row) < 0 ? a.length + (row) : row].length + (row) : row];
    let col: number = 0;
    while ((col < m)) {
      a[(row) < 0 ? a.length + (row) : row][(col) < 0 ? a[(row) < 0 ? a.length + (row) : row].length + (col) : col] = (a[(row) < 0 ? a.length + (row) : row][(col) < 0 ? a[(row) < 0 ? a.length + (row) : row].length + (col) : col] / pivot_val);
      col = (col + 1);
    }
    let r: number = 0;
    while ((r < n)) {
      if ((r != row)) {
        let factor: number = a[(r) < 0 ? a.length + (r) : r][(row) < 0 ? a[(r) < 0 ? a.length + (r) : r].length + (row) : row];
        let c: number = 0;
        while ((c < m)) {
          a[(r) < 0 ? a.length + (r) : r][(c) < 0 ? a[(r) < 0 ? a.length + (r) : r].length + (c) : c] = (a[(r) < 0 ? a.length + (r) : r][(c) < 0 ? a[(r) < 0 ? a.length + (r) : r].length + (c) : c] - (factor * a[(row) < 0 ? a.length + (row) : row][(c) < 0 ? a[(row) < 0 ? a.length + (row) : row].length + (c) : c]));
          c = (c + 1);
        }
      }
      r = (r + 1);
    }
    row = (row + 1);
  }
  let res: number[] = [];
  let k: number = 0;
  while ((k < n)) {
    res.push(round(a[(k) < 0 ? a.length + (k) : k][(Math.trunc((m - 1))) < 0 ? a[(k) < 0 ? a.length + (k) : k].length + (Math.trunc((m - 1))) : Math.trunc((m - 1))], 5));
    k = (k + 1);
  }
  return res;
}
function test_solver() {
  let a: number[][] = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
  let r1: number[] = solve_simultaneous(a);
  if (!(((_len(r1) == 2) && (r1[(Math.trunc(0)) < 0 ? r1.length + (Math.trunc(0)) : Math.trunc(0)] == (0.0 - 1.0))) && (r1[(Math.trunc(1)) < 0 ? r1.length + (Math.trunc(1)) : Math.trunc(1)] == 2.0))) {
    _panic("test1 failed");
  }
  let b: number[][] = [[0.0, (0.0 - 3.0), 1.0, 7.0], [3.0, 2.0, (0.0 - 1.0), 11.0], [5.0, 1.0, (0.0 - 2.0), 12.0]];
  let r2: number[] = solve_simultaneous(b);
  if (!((((_len(r2) == 3) && (r2[(Math.trunc(0)) < 0 ? r2.length + (Math.trunc(0)) : Math.trunc(0)] == 6.4)) && (r2[(Math.trunc(1)) < 0 ? r2.length + (Math.trunc(1)) : Math.trunc(1)] == 1.2)) && (r2[(Math.trunc(2)) < 0 ? r2.length + (Math.trunc(2)) : Math.trunc(2)] == 10.6))) {
    _panic("test2 failed");
  }
}
function main() {
  test_solver();
  let eq: number[][] = [[2.0, 1.0, 1.0, 1.0, 1.0, 4.0], [1.0, 2.0, 1.0, 1.0, 1.0, 5.0], [1.0, 1.0, 2.0, 1.0, 1.0, 6.0], [1.0, 1.0, 1.0, 2.0, 1.0, 7.0], [1.0, 1.0, 1.0, 1.0, 2.0, 8.0]];
  console.log(_str(_str(solve_simultaneous(eq))));
  console.log(_str(_str(solve_simultaneous([[4.0, 2.0]]))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

