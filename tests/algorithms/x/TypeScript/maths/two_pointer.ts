// Generated by Mochi v0.10.59 on 2025-08-07 00:24:47 GMT+7

function two_pointer(nums: number[], target: number): number[] {
  let i: number = 0;
  let j: number = (_len(nums) - 1);
  while ((i < j)) {
    let s: number = (nums[(i) < 0 ? nums.length + (i) : i] + nums[(j) < 0 ? nums.length + (j) : j]);
    if ((s == target)) {
      return [i, j];
    }
    if ((s < target)) {
      i = (i + 1);
    } else {
      j = (j - 1);
    }
  }
  return [];
}
function test_two_pointer() {
  if ((two_pointer([2, 7, 11, 15], 9) != [0, 1])) {
    _panic("case1");
  }
  if ((two_pointer([2, 7, 11, 15], 17) != [0, 3])) {
    _panic("case2");
  }
  if ((two_pointer([2, 7, 11, 15], 18) != [1, 2])) {
    _panic("case3");
  }
  if ((two_pointer([2, 7, 11, 15], 26) != [2, 3])) {
    _panic("case4");
  }
  if ((two_pointer([1, 3, 3], 6) != [1, 2])) {
    _panic("case5");
  }
  if ((_len(two_pointer([2, 7, 11, 15], 8)) != 0)) {
    _panic("case6");
  }
  if ((_len(two_pointer([0, 3, 6, 9, 12, 15, 18, 21, 24, 27], 19)) != 0)) {
    _panic("case7");
  }
  if ((_len(two_pointer([1, 2, 3], 6)) != 0)) {
    _panic("case8");
  }
}
function main() {
  test_two_pointer();
  console.log(_str("[" + (two_pointer([2, 7, 11, 15], 9)).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

