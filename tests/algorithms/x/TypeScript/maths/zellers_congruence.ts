// Generated by Mochi v0.10.67 on 2025-08-17 13:47:33 GMT+7

function parse_decimal(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    if (((c < "0") || (c > "9"))) {
      _panic("invalid literal");
    }
    value = ((value * 10) + Math.trunc(c));
    i = (i + 1);
  }
  return value;
}
function zeller_day(date_input: string): string {
  let days: Record<number, string> = {[0]: "Sunday", [1]: "Monday", [2]: "Tuesday", [3]: "Wednesday", [4]: "Thursday", [5]: "Friday", [6]: "Saturday"};
  if ((_len(date_input) !== 10)) {
    _panic("Must be 10 characters long");
  }
  let m: number = parse_decimal(date_input.slice(0, 2));
  if (((m <= 0) || (m >= 13))) {
    _panic("Month must be between 1 - 12");
  }
  let sep1: string = date_input[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? date_input.length + _mochi_idx : _mochi_idx;})()];
  if (((sep1 !== "-") && (sep1 !== "/"))) {
    _panic("Date separator must be '-' or '/'");
  }
  let d: number = parse_decimal(date_input.slice(3, 5));
  if (((d <= 0) || (d >= 32))) {
    _panic("Date must be between 1 - 31");
  }
  let sep2: string = date_input[(()=>{const _mochi_idx = Math.trunc(5); return _mochi_idx < 0 ? date_input.length + _mochi_idx : _mochi_idx;})()];
  if (((sep2 !== "-") && (sep2 !== "/"))) {
    _panic("Date separator must be '-' or '/'");
  }
  let y: number = parse_decimal(date_input.slice(6, 10));
  if (((y <= 45) || (y >= 8500))) {
    _panic("Year out of range. There has to be some sort of limit...right?");
  }
  let year: number = y;
  let month: number = m;
  if ((month <= 2)) {
    year = (year - 1);
    month = (month + 12);
  }
  let c: number = Math.trunc(year / 100);
  let k: bigint = (year % 100);
  let t: number = Math.trunc(((2.6 * month) - 5.39));
  let u: number = Math.trunc(c / 4);
  let v: bigint = Math.trunc(k / 4);
  let x: bigint = (d + k);
  let z: bigint = (((t + u) + v) + x);
  let w: bigint = (z - (2 * c));
  let f: bigint = (w % 7);
  if ((f < 0)) {
    f = (f + 7);
  }
  return days[f];
}
function zeller(date_input: string): string {
  let day: string = zeller_day(date_input);
  return (((("Your date " + date_input) + ", is a ") + day) + "!");
}
function test_zeller() {
  let inputs: string[] = ["01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"];
  let expected: string[] = ["Sunday", "Monday", "Tuesday", "Thursday"];
  let i: number = 0;
  while ((i < _len(inputs))) {
    let res: string = zeller_day(inputs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? inputs.length + _mochi_idx : _mochi_idx;})()]);
    if ((res !== expected[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? expected.length + _mochi_idx : _mochi_idx;})()])) {
      _panic("zeller test failed");
    }
    i = (i + 1);
  }
}
function main() {
  test_zeller();
  console.log(_str(zeller("01-31-2010")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

