// Generated by Mochi v0.10.59 on 2025-08-07 00:17:33 GMT+7

function contains(xs: string[], value: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] == value)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function jaccard_similarity(set_a: string[], set_b: string[], alternative_union: boolean): number {
  let intersection_len: number = 0;
  let i: number = 0;
  while ((i < _len(set_a))) {
    if (contains(set_b, set_a[(i) < 0 ? set_a.length + (i) : i])) {
      intersection_len = (intersection_len + 1);
    }
    i = (i + 1);
  }
  let union_len: number = 0;
  if (alternative_union) {
    union_len = (_len(set_a) + _len(set_b));
  } else {
    let union_list: string[] = [];
    i = 0;
    while ((i < _len(set_a))) {
      let val_a: string = set_a[(i) < 0 ? set_a.length + (i) : i];
      if (!contains(union_list, val_a)) {
        union_list.push(val_a);
      }
      i = (i + 1);
    }
    i = 0;
    while ((i < _len(set_b))) {
      let val_b: string = set_b[(i) < 0 ? set_b.length + (i) : i];
      if (!contains(union_list, val_b)) {
        union_list.push(val_b);
      }
      i = (i + 1);
    }
    union_len = _len(union_list);
  }
  return ((1.0 * intersection_len) / union_len);
}
function main() {
  let set_a: string[] = ["a", "b", "c", "d", "e"];
  let set_b: string[] = ["c", "d", "e", "f", "h", "i"];
  console.log(_str(jaccard_similarity(set_a, set_b, false)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

