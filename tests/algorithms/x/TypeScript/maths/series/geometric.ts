// Generated by Mochi v0.10.59 on 2025-08-07 00:18:31 GMT+7

function is_geometric_series(series: number[]): boolean {
  if ((_len(series) == 0)) {
    _panic("Input list must be a non empty list");
  }
  if ((_len(series) == 1)) {
    return true;
  }
  if ((series[(Math.trunc(0)) < 0 ? series.length + (Math.trunc(0)) : Math.trunc(0)] == 0.0)) {
    return false;
  }
  let ratio: number = (series[(Math.trunc(1)) < 0 ? series.length + (Math.trunc(1)) : Math.trunc(1)] / series[(Math.trunc(0)) < 0 ? series.length + (Math.trunc(0)) : Math.trunc(0)]);
  let i: number = 0;
  while ((i < (_len(series) - 1))) {
    if ((series[(i) < 0 ? series.length + (i) : i] == 0.0)) {
      return false;
    }
    if (((series[(Math.trunc((i + 1))) < 0 ? series.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))] / series[(i) < 0 ? series.length + (i) : i]) != ratio)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function geometric_mean(series: number[]): number {
  if ((_len(series) == 0)) {
    _panic("Input list must be a non empty list");
  }
  let product: number = 1.0;
  let i: number = 0;
  while ((i < _len(series))) {
    product = (product * series[(i) < 0 ? series.length + (i) : i]);
    i = (i + 1);
  }
  let n: number = _len(series);
  return nth_root(product, n);
}
function pow_float(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function nth_root(value: number, n: number): number {
  if ((value == 0.0)) {
    return 0.0;
  }
  let low: number = 0.0;
  let high: number = value;
  if ((value < 1.0)) {
    high = 1.0;
  }
  let mid: number = ((low + high) / 2.0);
  let i: number = 0;
  while ((i < 40)) {
    let mp: number = pow_float(mid, n);
    if ((mp > value)) {
      high = mid;
    } else {
      low = mid;
    }
    mid = ((low + high) / 2.0);
    i = (i + 1);
  }
  return mid;
}
function test_geometric() {
  let a: number[] = [2.0, 4.0, 8.0];
  if (!is_geometric_series(a)) {
    _panic("expected geometric series");
  }
  let b: number[] = [1.0, 2.0, 3.0];
  if (is_geometric_series(b)) {
    _panic("expected non geometric series");
  }
}
function main() {
  test_geometric();
  console.log(_str(geometric_mean([2.0, 4.0, 8.0])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

