// Generated by Mochi v0.10.66 on 2025-08-16 14:48:15 GMT+7

export interface Dual { real: number; duals: number[] }
function make_dual(real: number, rank: number): Dual {
  let ds: number[] = [];
  let i: number = 0;
  while ((i < rank)) {
    ds.push(1.0);
    i = (i + 1);
  }
  return {real, duals: ds};
}
function dual_from_list(real: number, ds: number[]): Dual {
  return {real, duals: ds};
}
function dual_add(a: Dual, b: Dual): Dual {
  let s_dual: number[] = [];
  let i: number = 0;
  while ((i < _len(a.duals))) {
    s_dual.push(a.duals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.duals.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let o_dual: number[] = [];
  let j: number = 0;
  while ((j < _len(b.duals))) {
    o_dual.push(b.duals[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b.duals.length + _mochi_idx : _mochi_idx;})()]);
    j = (j + 1);
  }
  if ((_len(s_dual) > _len(o_dual))) {
    let diff: bigint = (_len(s_dual) - _len(o_dual));
    let k: number = 0;
    while ((k < diff)) {
      o_dual.push(1.0);
      k = (k + 1);
    }
  } else {
    if ((_len(s_dual) < _len(o_dual))) {
      let diff2: bigint = (_len(o_dual) - _len(s_dual));
      let k2: number = 0;
      while ((k2 < diff2)) {
        s_dual.push(1.0);
        k2 = (k2 + 1);
      }
    }
  }
  let new_duals: number[] = [];
  let idx: number = 0;
  while ((idx < _len(s_dual))) {
    new_duals.push((s_dual[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? s_dual.length + _mochi_idx : _mochi_idx;})()] + o_dual[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? o_dual.length + _mochi_idx : _mochi_idx;})()]));
    idx = (idx + 1);
  }
  return {real: (a.real + b.real), duals: new_duals};
}
function dual_add_real(a: Dual, b: number): Dual {
  let ds: number[] = [];
  let i: number = 0;
  while ((i < _len(a.duals))) {
    ds.push(a.duals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.duals.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return {real: (a.real + b), duals: ds};
}
function dual_mul(a: Dual, b: Dual): Dual {
  let new_len: bigint = ((_len(a.duals) + _len(b.duals)) + 1);
  let new_duals: number[] = [];
  let idx: number = 0;
  while ((idx < new_len)) {
    new_duals.push(0.0);
    idx = (idx + 1);
  }
  let i: number = 0;
  while ((i < _len(a.duals))) {
    let j: number = 0;
    while ((j < _len(b.duals))) {
      let pos: bigint = ((i + j) + 1);
      let val: number = (new_duals[(()=>{const _mochi_idx = pos; return _mochi_idx < 0 ? new_duals.length + _mochi_idx : _mochi_idx;})()] + (a.duals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.duals.length + _mochi_idx : _mochi_idx;})()] * b.duals[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b.duals.length + _mochi_idx : _mochi_idx;})()]));
      new_duals[(()=>{const _mochi_idx = pos; return _mochi_idx < 0 ? new_duals.length + _mochi_idx : _mochi_idx;})()] = val;
      j = (j + 1);
    }
    i = (i + 1);
  }
  let k: number = 0;
  while ((k < _len(a.duals))) {
    let val: number = (new_duals[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? new_duals.length + _mochi_idx : _mochi_idx;})()] + (a.duals[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.duals.length + _mochi_idx : _mochi_idx;})()] * b.real));
    new_duals[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? new_duals.length + _mochi_idx : _mochi_idx;})()] = val;
    k = (k + 1);
  }
  let l: number = 0;
  while ((l < _len(b.duals))) {
    let val: number = (new_duals[(()=>{const _mochi_idx = l; return _mochi_idx < 0 ? new_duals.length + _mochi_idx : _mochi_idx;})()] + (b.duals[(()=>{const _mochi_idx = l; return _mochi_idx < 0 ? b.duals.length + _mochi_idx : _mochi_idx;})()] * a.real));
    new_duals[(()=>{const _mochi_idx = l; return _mochi_idx < 0 ? new_duals.length + _mochi_idx : _mochi_idx;})()] = val;
    l = (l + 1);
  }
  return {real: (a.real * b.real), duals: new_duals};
}
function dual_mul_real(a: Dual, b: number): Dual {
  let ds: number[] = [];
  let i: number = 0;
  while ((i < _len(a.duals))) {
    ds.push((a.duals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.duals.length + _mochi_idx : _mochi_idx;})()] * b));
    i = (i + 1);
  }
  return {real: (a.real * b), duals: ds};
}
function dual_pow(x: Dual, n: number): Dual {
  if ((n < 0)) {
    _panic("power must be a positive integer");
  }
  if ((n === 0)) {
    return {real: 1.0, duals: []};
  }
  let res: Dual = x;
  let i: number = 1;
  while ((i < n)) {
    res = dual_mul(res, x);
    i = (i + 1);
  }
  return res;
}
function factorial(n: number): number {
  let res: number = 1.0;
  let i: number = 2;
  while ((i <= n)) {
    res = (res * i);
    i = (i + 1);
  }
  return res;
}
function differentiate(func, position: number, order: number): number {
  let d: Dual = make_dual(position, 1);
  let result: Dual = func(d);
  if ((order === 0)) {
    return result.real;
  }
  return (result.duals[(()=>{const _mochi_idx = Math.trunc((order - 1)); return _mochi_idx < 0 ? result.duals.length + _mochi_idx : _mochi_idx;})()] * factorial(order));
}
function test_differentiate() {
  function f1(x: Dual): Dual {
    return dual_pow(x, 2);
  }
  if ((differentiate(f1, 2.0, 2) !== 2.0)) {
    _panic("f1 failed");
  }
  function f2(x: Dual): Dual {
    return dual_mul(dual_pow(x, 2), dual_pow(x, 4));
  }
  if ((differentiate(f2, 9.0, 2) !== 196830.0)) {
    _panic("f2 failed");
  }
  function f3(y: Dual): Dual {
    return dual_mul_real(dual_pow(dual_add_real(y, 3.0), 6), 0.5);
  }
  if ((differentiate(f3, 3.5, 4) !== 7605.0)) {
    _panic("f3 failed");
  }
  function f4(y: Dual): Dual {
    return dual_pow(y, 2);
  }
  if ((differentiate(f4, 4.0, 3) !== 0.0)) {
    _panic("f4 failed");
  }
}
function main() {
  test_differentiate();
  function f(y: Dual): Dual {
    return dual_mul(dual_pow(y, 2), dual_pow(y, 4));
  }
  let res = differentiate(f, 9.0, 2);
  console.log(_str(res));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

