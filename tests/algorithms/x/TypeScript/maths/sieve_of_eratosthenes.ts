// Generated by Mochi v0.10.59 on 2025-08-07 00:18:37 GMT+7

function isqrt(n: number): number {
  let r: number = 0;
  while ((((r + 1) * (r + 1)) <= n)) {
    r = (r + 1);
  }
  return r;
}
function prime_sieve(num: number): number[] {
  if ((num <= 0)) {
    _panic("Invalid input, please enter a positive integer.");
  }
  let sieve: boolean[] = [];
  let i: number = 0;
  while ((i <= num)) {
    sieve.push(true);
    i = (i + 1);
  }
  let prime: number[] = [];
  let start: number = 2;
  let end = isqrt(num);
  while ((start <= end)) {
    if (sieve[(start) < 0 ? sieve.length + (start) : start]) {
      prime.push(start);
      let j: number = (start * start);
      while ((j <= num)) {
        if (sieve[(j) < 0 ? sieve.length + (j) : j]) {
          sieve[(j) < 0 ? sieve.length + (j) : j] = false;
        }
        j = (j + start);
      }
    }
    start = (start + 1);
  }
  let k = (end + 1);
  while ((k <= num)) {
    if (sieve[(k) < 0 ? sieve.length + (k) : k]) {
      prime.push(k);
    }
    k = (k + 1);
  }
  return prime;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(prime_sieve(50))));
  console.log(_str(_str(prime_sieve(25))));
  console.log(_str(_str(prime_sieve(10))));
  console.log(_str(_str(prime_sieve(9))));
  console.log(_str(_str(prime_sieve(2))));
  console.log(_str(_str(prime_sieve(1))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

