// Generated by Mochi v0.10.67 on 2025-08-17 09:17:00 GMT+7

let lcg_seed: number = 1;
function lcg_rand(): number {
  lcg_seed = Number((((BigInt(lcg_seed) * 1103515245n) + 12345n) % 2147483648n));
  return lcg_seed;
}
function roll(): number {
  let rv: number = lcg_rand();
  let r: number = ((rv * 6.0) / 2147483648.0);
  return (1 + Math.trunc(r));
}
function round2(x: number): number {
  let y: number = ((x * 100.0) + 0.5);
  let z: number = Math.trunc(y);
  return (z / 100.0);
}
function throw_dice(num_throws: number, num_dice: number): number[] {
  let count_of_sum: number[] = [];
  let max_sum: bigint = ((num_dice * 6) + 1);
  let i: number = 0;
  while ((i < max_sum)) {
    count_of_sum.push(0);
    i = (i + 1);
  }
  let t: number = 0;
  while ((t < num_throws)) {
    let s: number = 0;
    let d: number = 0;
    while ((d < num_dice)) {
      s = (s + roll());
      d = (d + 1);
    }
    count_of_sum[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? count_of_sum.length + _mochi_idx : _mochi_idx;})()] = (count_of_sum[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? count_of_sum.length + _mochi_idx : _mochi_idx;})()] + 1);
    t = (t + 1);
  }
  let probability: number[] = [];
  i = num_dice;
  while ((i < max_sum)) {
    let p: number = ((count_of_sum[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? count_of_sum.length + _mochi_idx : _mochi_idx;})()] * 100.0) / num_throws);
    probability.push(round2(p));
    i = (i + 1);
  }
  return probability;
}
function main() {
  lcg_seed = 1;
  let result: number[] = throw_dice(10000, 2);
  console.log(_str(result));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return '[' + x.map(_str).join(', ') + ']';
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

