// Generated by Mochi v0.10.63 on 2025-08-12 07:58:53 GMT+7

export interface Fraction { numerator: number; denominator: number }
function pow10(n: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 10);
    i = (i + 1);
  }
  return result;
}
function gcd(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  if ((x < 0)) {
    x = -x;
  }
  if ((y < 0)) {
    y = -y;
  }
  while ((y != 0)) {
    let r: number = (x % y);
    x = y;
    y = r;
  }
  return x;
}
function parse_decimal(s: string): Fraction {
  if ((_len(s) == 0)) {
    _panic("invalid number");
  }
  let idx: number = 0;
  let sign: number = 1;
  let first = (s).substring(0, 1);
  if ((first == "-")) {
    sign = -1;
    idx = 1;
  } else {
    if ((first == "+")) {
      idx = 1;
    }
  }
  let int_part: string = "";
  while ((idx < _len(s))) {
    let c: string = (s).substring(idx, (idx + 1));
    if (((c >= "0") && (c <= "9"))) {
      int_part = (int_part + c);
      idx = (idx + 1);
    } else {
      break
    }
  }
  let frac_part: string = "";
  if (((idx < _len(s)) && ((s).substring(idx, (idx + 1)) == "."))) {
    idx = (idx + 1);
    while ((idx < _len(s))) {
      let c: string = (s).substring(idx, (idx + 1));
      if (((c >= "0") && (c <= "9"))) {
        frac_part = (frac_part + c);
        idx = (idx + 1);
      } else {
        break
      }
    }
  }
  let exp: number = 0;
  if (((idx < _len(s)) && (((s).substring(idx, (idx + 1)) == "e") || ((s).substring(idx, (idx + 1)) == "E")))) {
    idx = (idx + 1);
    let exp_sign: number = 1;
    if (((idx < _len(s)) && ((s).substring(idx, (idx + 1)) == "-"))) {
      exp_sign = -1;
      idx = (idx + 1);
    } else {
      if (((idx < _len(s)) && ((s).substring(idx, (idx + 1)) == "+"))) {
        idx = (idx + 1);
      }
    }
    let exp_str: string = "";
    while ((idx < _len(s))) {
      let c: string = (s).substring(idx, (idx + 1));
      if (((c >= "0") && (c <= "9"))) {
        exp_str = (exp_str + c);
        idx = (idx + 1);
      } else {
        _panic("invalid number");
      }
    }
    if ((_len(exp_str) == 0)) {
      _panic("invalid number");
    }
    exp = (exp_sign * Math.trunc(exp_str));
  }
  if ((idx != _len(s))) {
    _panic("invalid number");
  }
  if ((_len(int_part) == 0)) {
    int_part = "0";
  }
  let num_str: string = (int_part + frac_part);
  let numerator: number = Math.trunc(num_str);
  if ((sign == (0 - 1))) {
    numerator = (0 - numerator);
  }
  let denominator: number = pow10(_len(frac_part));
  if ((exp > 0)) {
    numerator = (numerator * pow10(exp));
  } else {
    if ((exp < 0)) {
      denominator = (denominator * pow10(-exp));
    }
  }
  return {numerator, denominator};
}
function reduce(fr: Fraction): Fraction {
  let g: number = gcd(fr.numerator, fr.denominator);
  return {"numerator": Math.trunc(fr.numerator / g), "denominator": Math.trunc(fr.denominator / g)};
}
function decimal_to_fraction_str(s: string): Fraction {
  return reduce(parse_decimal(s));
}
function decimal_to_fraction(x: number): Fraction {
  return decimal_to_fraction_str(_str(x));
}
function assert_fraction(name: string, fr: Fraction, num: number, den: number) {
  if (((fr.numerator != num) || (fr.denominator != den))) {
    _panic(name);
  }
}
function test_decimal_to_fraction() {
  assert_fraction("case1", decimal_to_fraction(2.0), 2, 1);
  assert_fraction("case2", decimal_to_fraction(89.0), 89, 1);
  assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1);
  assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1);
  assert_fraction("case5", decimal_to_fraction(1.5), 3, 2);
  assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4);
  assert_fraction("case7", decimal_to_fraction(0.0), 0, 1);
  assert_fraction("case8", decimal_to_fraction(-2.5), -5, 2);
  assert_fraction("case9", decimal_to_fraction(0.125), 1, 8);
  assert_fraction("case10", decimal_to_fraction(1.00000025e+06), 4000001, 4);
  assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000);
  assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1);
  assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2);
}
function main() {
  test_decimal_to_fraction();
  let fr: Fraction = decimal_to_fraction(1.5);
  console.log(_str(((_str(fr.numerator) + "/") + _str(fr.denominator))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

