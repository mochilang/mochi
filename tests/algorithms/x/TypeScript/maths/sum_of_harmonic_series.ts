// Generated by Mochi v0.10.59 on 2025-08-07 00:24:38 GMT+7

function sum_of_harmonic_progression(first_term: number, common_difference: number, number_of_terms: number): number {
  let arithmetic_progression: number[] = [(1.0 / first_term)];
  let term: number = (1.0 / first_term);
  let i: number = 0;
  while ((i < (number_of_terms - 1))) {
    term = (term + common_difference);
    arithmetic_progression.push(term);
    i = (i + 1);
  }
  let total: number = 0.0;
  let j: number = 0;
  while ((j < _len(arithmetic_progression))) {
    total = (total + (1.0 / arithmetic_progression[(j) < 0 ? arithmetic_progression.length + (j) : j]));
    j = (j + 1);
  }
  return total;
}
function abs_val(num: number): number {
  if ((num < 0.0)) {
    return -num;
  }
  return num;
}
function test_sum_of_harmonic_progression() {
  let result1: number = sum_of_harmonic_progression(0.5, 2.0, 2);
  if ((abs_val((result1 - 0.75)) > 1e-07)) {
    _panic("test1 failed");
  }
  let result2: number = sum_of_harmonic_progression(0.2, 5.0, 5);
  if ((abs_val((result2 - 0.45666666666666667)) > 1e-07)) {
    _panic("test2 failed");
  }
}
function main() {
  test_sum_of_harmonic_progression();
  console.log(_str(sum_of_harmonic_progression(0.5, 2.0, 2)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

