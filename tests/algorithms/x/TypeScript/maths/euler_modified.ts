// Generated by Mochi v0.10.63 on 2025-08-12 07:58:59 GMT+7

function ceil_float(x: number): number {
  let i: number = Math.trunc(x);
  if ((x > i)) {
    return (i + 1);
  }
  return i;
}
function exp_approx(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 20)) {
    term = ((term * x) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function euler_modified(ode_func, y0: number, x0: number, step: number, x_end: number): number[] {
  let n: number = ceil_float(((x_end - x0) / step));
  let y: number[] = [y0];
  let x: number = x0;
  let k: number = 0;
  while ((k < n)) {
    let y_predict: number = (y[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] + (step * ode_func(x, y[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()])));
    let slope1: number = ode_func(x, y[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()]);
    let slope2: number = ode_func((x + step), y_predict);
    let y_next: number = (y[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] + ((step / 2.0) * (slope1 + slope2)));
    y.push(y_next);
    x = (x + step);
    k = (k + 1);
  }
  return y;
}
function f1(x: number, y: number): number {
  return (((-2.0 * x) * y) * y);
}
function f2(x: number, y: number): number {
  return ((-2.0 * y) + (((x * x) * x) * exp_approx((-2.0 * x))));
}
function main() {
  let y1: number[] = euler_modified(f1, 1.0, 0.0, 0.2, 1.0);
  console.log(_str(y1[(()=>{const _mochi_idx = Math.trunc((_len(y1) - 1)); return _mochi_idx < 0 ? y1.length + _mochi_idx : _mochi_idx;})()]));
  let y2: number[] = euler_modified(f2, 1.0, 0.0, 0.1, 0.3);
  console.log(_str(y2[(()=>{const _mochi_idx = Math.trunc((_len(y2) - 1)); return _mochi_idx < 0 ? y2.length + _mochi_idx : _mochi_idx;})()]));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

