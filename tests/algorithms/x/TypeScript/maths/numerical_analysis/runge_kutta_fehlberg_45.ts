// Generated by Mochi v0.10.59 on 2025-08-07 00:18:03 GMT+7

function runge_kutta_fehlberg_45(func, x_initial: number, y_initial: number, step_size: number, x_final: number): number[] {
  if ((x_initial >= x_final)) {
    _panic("The final value of x must be greater than initial value of x.");
  }
  if ((step_size <= 0.0)) {
    _panic("Step size must be positive.");
  }
  let n: number = Math.trunc(((x_final - x_initial) / step_size));
  let ys: number[] = [];
  let x: number = x_initial;
  let y: number = y_initial;
  ys.push(y);
  let i: number = 0;
  while ((i < n)) {
    let k1: number = (step_size * func(x, y));
    let k2: number = (step_size * func((x + (step_size / 4.0)), (y + (k1 / 4.0))));
    let k3: number = (step_size * func((x + ((3.0 / 8.0) * step_size)), ((y + ((3.0 / 32.0) * k1)) + ((9.0 / 32.0) * k2))));
    let k4: number = (step_size * func((x + ((12.0 / 13.0) * step_size)), (((y + ((1932.0 / 2197.0) * k1)) - ((7200.0 / 2197.0) * k2)) + ((7296.0 / 2197.0) * k3))));
    let k5: number = (step_size * func((x + step_size), ((((y + ((439.0 / 216.0) * k1)) - (8.0 * k2)) + ((3680.0 / 513.0) * k3)) - ((845.0 / 4104.0) * k4))));
    let k6: number = (step_size * func((x + (step_size / 2.0)), (((((y - ((8.0 / 27.0) * k1)) + (2.0 * k2)) - ((3544.0 / 2565.0) * k3)) + ((1859.0 / 4104.0) * k4)) - ((11.0 / 40.0) * k5))));
    y = (((((y + ((16.0 / 135.0) * k1)) + ((6656.0 / 12825.0) * k3)) + ((28561.0 / 56430.0) * k4)) - ((9.0 / 50.0) * k5)) + ((2.0 / 55.0) * k6));
    x = (x + step_size);
    ys.push(y);
    i = (i + 1);
  }
  return ys;
}
function main() {
  function f1(x: number, y: number): number {
    return (1.0 + (y * y));
  }
  let y1 = runge_kutta_fehlberg_45(f1, 0.0, 0.0, 0.2, 1.0);
  console.log(_str(y1[(Math.trunc(1)) < 0 ? y1.length + (Math.trunc(1)) : Math.trunc(1)]));
  function f2(x: number, y: number): number {
    return x;
  }
  let y2 = runge_kutta_fehlberg_45(f2, -1.0, 0.0, 0.2, 0.0);
  console.log(_str(y2[(Math.trunc(1)) < 0 ? y2.length + (Math.trunc(1)) : Math.trunc(1)]));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

