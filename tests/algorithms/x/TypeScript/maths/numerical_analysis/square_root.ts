// Generated by Mochi v0.10.59 on 2025-08-07 00:18:07 GMT+7

function fx(x: number, a: number): number {
  return ((x * x) - a);
}
function fx_derivative(x: number): number {
  return (2.0 * x);
}
function get_initial_point(a: number): number {
  let start: number = 2.0;
  while ((start <= a)) {
    start = (start * start);
  }
  return start;
}
function abs_float(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function square_root_iterative(a: number, max_iter: number, tolerance: number): number {
  if ((a < 0.0)) {
    _panic("math domain error");
  }
  let value: number = get_initial_point(a);
  let i: number = 0;
  while ((i < max_iter)) {
    let prev_value: number = value;
    value = (value - (fx(value, a) / fx_derivative(value)));
    if ((abs_float((prev_value - value)) < tolerance)) {
      return value;
    }
    i = (i + 1);
  }
  return value;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r1: number
let r2: number
let r3: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = square_root_iterative(4.0, 9999, 1e-14)
  console.log(_str(_str(r1)));
r2 = square_root_iterative(3.2, 9999, 1e-14)
  console.log(_str(_str(r2)));
r3 = square_root_iterative(140.0, 9999, 1e-14)
  console.log(_str(_str(r3)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

