// Generated by Mochi v0.10.67 on 2025-08-17 09:17:11 GMT+7

export interface NevilleResult { value: number; table: number[][] }
function neville_interpolate(x_points: number[], y_points: number[], x0: number): NevilleResult {
  let n: number = _len(x_points);
  let q: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(0.0);
      j = (j + 1);
    }
    q.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    q[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? q[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y_points[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y_points.length + _mochi_idx : _mochi_idx;})()];
    i = (i + 1);
  }
  let col: number = 2;
  while ((col < n)) {
    let row_idx: number = col;
    while ((row_idx < n)) {
      q[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? q[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = ((((x0 - x_points[(()=>{const _mochi_idx = Math.trunc(((row_idx - col) + 1)); return _mochi_idx < 0 ? x_points.length + _mochi_idx : _mochi_idx;})()]) * q[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((col - 1)); return _mochi_idx < 0 ? q[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) - ((x0 - x_points[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? x_points.length + _mochi_idx : _mochi_idx;})()]) * q[(()=>{const _mochi_idx = Math.trunc((row_idx - 1)); return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((col - 1)); return _mochi_idx < 0 ? q[(()=>{const _mochi_idx = Math.trunc((row_idx - 1)); return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) / (x_points[(()=>{const _mochi_idx = row_idx; return _mochi_idx < 0 ? x_points.length + _mochi_idx : _mochi_idx;})()] - x_points[(()=>{const _mochi_idx = Math.trunc(((row_idx - col) + 1)); return _mochi_idx < 0 ? x_points.length + _mochi_idx : _mochi_idx;})()]));
      row_idx = (row_idx + 1);
    }
    col = (col + 1);
  }
  return {value: q[(()=>{const _mochi_idx = Math.trunc((n - 1)); return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((n - 1)); return _mochi_idx < 0 ? q[(()=>{const _mochi_idx = Math.trunc((n - 1)); return _mochi_idx < 0 ? q.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()], table: q};
}
function test_neville() {
  let xs: number[] = [1.0, 2.0, 3.0, 4.0, 6.0];
  let ys: number[] = [6.0, 7.0, 8.0, 9.0, 11.0];
  let r1: NevilleResult = neville_interpolate(xs, ys, 5.0);
  if ((r1.value !== 10.0)) {
    _panic("neville_interpolate at 5 failed");
  }
  let r2: NevilleResult = neville_interpolate(xs, ys, 99.0);
  if ((r2.value !== 104.0)) {
    _panic("neville_interpolate at 99 failed");
  }
}
function main() {
  test_neville();
  let xs: number[] = [1.0, 2.0, 3.0, 4.0, 6.0];
  let ys: number[] = [6.0, 7.0, 8.0, 9.0, 11.0];
  let r: NevilleResult = neville_interpolate(xs, ys, 5.0);
  console.log(_str(r.value));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return '[' + x.map(_str).join(', ') + ']';
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

