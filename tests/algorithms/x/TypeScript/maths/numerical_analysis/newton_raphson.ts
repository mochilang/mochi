// Generated by Mochi v0.10.59 on 2025-08-07 00:17:59 GMT+7

export interface NRResult { root: number; error: number; steps: number[] }
function abs_float(x: number): number {
  if ((x < 0.0)) {
    return -x;
  } else {
    return x;
  }
}
function fail(msg: string) {
  console.log(_str(("error: " + msg)));
}
function calc_derivative(f, x: number, delta_x: number): number {
  return ((f((x + (delta_x / 2.0))) - f((x - (delta_x / 2.0)))) / delta_x);
}
function newton_raphson(f, x0: number, max_iter: number, step: number, max_error: number, log_steps: boolean): NRResult {
  let a: number = x0;
  let steps: number[] = [];
  let i: number = 0;
  while ((i < max_iter)) {
    if (log_steps) {
      steps.push(a);
    }
    let err: number = abs_float(f(a));
    if ((err < max_error)) {
      return {"root": a, "error": err, steps};
    }
    let der: number = calc_derivative(f, a, step);
    if ((der == 0.0)) {
      fail("No converging solution found, zero derivative");
      return {"root": a, "error": err, steps};
    }
    a = (a - (f(a) / der));
    i = (i + 1);
  }
  fail("No converging solution found, iteration limit reached");
  return {"root": a, "error": abs_float(f(a)), steps};
}
function poly(x: number): number {
  return (((x * x) - (5.0 * x)) + 2.0);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: NRResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = newton_raphson(poly, 0.4, 20, 1e-06, 1e-06, false)
  console.log(_str(((("root = " + _str(result.root)) + ", error = ") + _str(result.error))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

