// Generated by Mochi v0.10.59 on 2025-08-07 00:17:54 GMT+7

function abs_float(x: number): number {
  if ((x < 0.0)) {
    return -x;
  } else {
    return x;
  }
}
function bisection(f, a: number, b: number): number {
  let start: number = a;
  let end: number = b;
  if ((f(a) == 0.0)) {
    return a;
  }
  if ((f(b) == 0.0)) {
    return b;
  }
  if (((f(a) * f(b)) > 0.0)) {
    _panic("could not find root in given interval.");
  }
  let mid: number = (start + ((end - start) / 2.0));
  while ((abs_float((start - mid)) > 1e-07)) {
    let fmid: number = f(mid);
    if ((fmid == 0.0)) {
      return mid;
    }
    if (((fmid * f(start)) < 0.0)) {
      end = mid;
    } else {
      start = mid;
    }
    mid = (start + ((end - start) / 2.0));
  }
  return mid;
}
function f(x: number): number {
  return ((((x * x) * x) - (2.0 * x)) - 5.0);
}
function main() {
  console.log(_str(_str(bisection(f, 1.0, 1000.0))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

