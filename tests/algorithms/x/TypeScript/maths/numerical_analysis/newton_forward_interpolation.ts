// Generated by Mochi v0.10.67 on 2025-08-17 09:17:12 GMT+7

function ucal(u: number, p: number): number {
  let temp: number = u;
  let i: number = 1;
  while ((i < p)) {
    temp = (temp * (u - i));
    i = (i + 1);
  }
  return temp;
}
function factorial(n: number): number {
  let result: number = 1.0;
  let i: number = 2;
  while ((i <= n)) {
    result = (result * i);
    i = (i + 1);
  }
  return result;
}
function newton_forward_interpolation(x: number[], y0: number[], value: number): number {
  let n: number = _len(x);
  let y: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(0.0);
      j = (j + 1);
    }
    y.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? y[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = y0[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? y0.length + _mochi_idx : _mochi_idx;})()];
    i = (i + 1);
  }
  let i1: number = 1;
  while ((i1 < n)) {
    let j1: number = 0;
    while ((j1 < (n - i1))) {
      y[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i1; return _mochi_idx < 0 ? y[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (y[(()=>{const _mochi_idx = Math.trunc((j1 + 1)); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((i1 - 1)); return _mochi_idx < 0 ? y[(()=>{const _mochi_idx = Math.trunc((j1 + 1)); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - y[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((i1 - 1)); return _mochi_idx < 0 ? y[(()=>{const _mochi_idx = j1; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j1 = (j1 + 1);
    }
    i1 = (i1 + 1);
  }
  let u: number = ((value - x[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()]) / (x[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()] - x[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()]));
  let sum: number = y[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let k: number = 1;
  while ((k < n)) {
    sum = (sum + ((ucal(u, k) * y[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? y[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) / factorial(k)));
    k = (k + 1);
  }
  return sum;
}
let x_points: number[] = [0.0, 1.0, 2.0, 3.0];
let y_points: number[] = [0.0, 1.0, 8.0, 27.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return '[' + x.map(_str).join(', ') + ']';
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(newton_forward_interpolation(x_points, y_points, 1.5)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

