// Generated by Mochi v0.10.67 on 2025-08-17 09:17:21 GMT+7

function sqrt(x: number): number {
  let guess: number = ((x > 1.0) ? (x / 2.0) : 1.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = (0.5 * (guess + (x / guess)));
    i = (i + 1);
  }
  return guess;
}
function runge_kutta_gills(func, x_initial: number, y_initial: number, step_size: number, x_final: number): number[] {
  if ((x_initial >= x_final)) {
    _panic("The final value of x must be greater than initial value of x.");
  }
  if ((step_size <= 0.0)) {
    _panic("Step size must be positive.");
  }
  let n: number = Math.trunc(((x_final - x_initial) / step_size));
  let y: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    y.push(0.0);
    i = (i + 1);
  }
  y[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] = y_initial;
  let xi: number = x_initial;
  let idx: number = 0;
  let root2: number = sqrt(2.0);
  while ((idx < n)) {
    let k1: number = (step_size * func(xi, y[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()]));
    let k2: number = (step_size * func((xi + (step_size / 2.0)), (y[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] + (k1 / 2.0))));
    let k3: number = (step_size * func((xi + (step_size / 2.0)), ((y[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] + ((-0.5 + (1.0 / root2)) * k1)) + ((1.0 - (1.0 / root2)) * k2))));
    let k4: number = (step_size * func((xi + step_size), ((y[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] - ((1.0 / root2) * k2)) + ((1.0 + (1.0 / root2)) * k3))));
    y[(()=>{const _mochi_idx = (idx + 1); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] = (y[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] + ((((k1 + ((2.0 - root2) * k2)) + ((2.0 + root2) * k3)) + k4) / 6.0));
    xi = (xi + step_size);
    idx = (idx + 1);
  }
  return y;
}
function f1(x: number, y: number): number {
  return ((x - y) / 2.0);
}
function f2(x: number, y: number): number {
  return x;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return '[' + x.map(_str).join(', ') + ']';
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let y1: number[]
let y2: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
y1 = runge_kutta_gills(f1, 0.0, 3.0, 0.2, 5.0)
  console.log(_str(y1[(()=>{const _mochi_idx = Math.trunc((_len(y1) - 1)); return _mochi_idx < 0 ? y1.length + _mochi_idx : _mochi_idx;})()]));
y2 = runge_kutta_gills(f2, -1.0, 0.0, 0.2, 0.0)
  console.log(_str(y2));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

