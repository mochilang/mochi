// Generated by Mochi v0.10.59 on 2025-08-07 00:18:02 GMT+7

function runge_kutta(f, y0: number, x0: number, h: number, x_end: number): number[] {
  let span: number = ((x_end - x0) / h);
  let n: number = Math.trunc(span);
  if ((Number(n) < span)) {
    n = (n + 1);
  }
  let y: number[] = [];
  let i: number = 0;
  while ((i < (n + 1))) {
    y.push(0.0);
    i = (i + 1);
  }
  y[(0) < 0 ? y.length + (0) : 0] = y0;
  let x: number = x0;
  let k: number = 0;
  while ((k < n)) {
    let k1: number = f(x, y[(k) < 0 ? y.length + (k) : k]);
    let k2: number = f((x + (0.5 * h)), (y[(k) < 0 ? y.length + (k) : k] + ((0.5 * h) * k1)));
    let k3: number = f((x + (0.5 * h)), (y[(k) < 0 ? y.length + (k) : k] + ((0.5 * h) * k2)));
    let k4: number = f((x + h), (y[(k) < 0 ? y.length + (k) : k] + (h * k3)));
    y[((k + 1)) < 0 ? y.length + ((k + 1)) : (k + 1)] = (y[(k) < 0 ? y.length + (k) : k] + (((1.0 / 6.0) * h) * (((k1 + (2.0 * k2)) + (2.0 * k3)) + k4)));
    x = (x + h);
    k = (k + 1);
  }
  return y;
}
function test_runge_kutta() {
  function f(x: number, y: number): number {
    return y;
  }
  let result = runge_kutta(f, 1.0, 0.0, 0.01, 5.0);
  let last = result[(Math.trunc((_len(result) - 1))) < 0 ? result.length + (Math.trunc((_len(result) - 1))) : Math.trunc((_len(result) - 1))];
  let expected: number = 148.41315904125113;
  let diff = (last - expected);
  if ((diff < 0.0)) {
    diff = -diff;
  }
  if ((diff > 1e-06)) {
    _panic("runge_kutta failed");
  }
}
function main() {
  test_runge_kutta();
  function f(x: number, y: number): number {
    return y;
  }
  let r = runge_kutta(f, 1.0, 0.0, 0.1, 1.0);
  console.log(_str(_str(r[(Math.trunc((_len(r) - 1))) < 0 ? r.length + (Math.trunc((_len(r) - 1))) : Math.trunc((_len(r) - 1))])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

