// Generated by Mochi v0.10.67 on 2025-08-17 09:16:24 GMT+7

function exact_prime_factor_count(n: number): number {
  let count: number = 0;
  let num: number = n;
  if (((num % 2) === 0)) {
    count = (count + 1);
    while (((num % 2) === 0)) {
      num = Math.trunc(num / 2);
    }
  }
  let i: number = 3;
  while (((i * i) <= num)) {
    if (((num % i) === 0)) {
      count = (count + 1);
      while (((num % i) === 0)) {
        num = (num / i);
      }
    }
    i = (i + 2);
  }
  if ((num > 2)) {
    count = (count + 1);
  }
  return count;
}
function ln(x: number): number {
  let ln2: number = 0.6931471805599453;
  let y: number = x;
  let k: number = 0.0;
  while ((y > 2.0)) {
    y = (y / 2.0);
    k = (k + ln2);
  }
  while ((y < 1.0)) {
    y = (y * 2.0);
    k = (k - ln2);
  }
  let t: number = ((y - 1.0) / (y + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let n: number = 1;
  while ((n <= 19)) {
    sum = (sum + (term / n));
    term = ((term * t) * t);
    n = (n + 2);
  }
  return (k + (2.0 * sum));
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function round4(x: number): number {
  let m: number = 10000.0;
  return (Math.floor(((x * m) + 0.5)) / m);
}
function main() {
  let n: number = 51242183;
  let count = exact_prime_factor_count(n);
  console.log(_str(("The number of distinct prime factors is/are " + _str(count))));
  let loglog: number = ln(ln(n));
  console.log(_str(("The value of log(log(n)) is " + _str(round4(loglog)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return '[' + x.map(_str).join(', ') + ']';
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

