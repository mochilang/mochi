// Generated by Mochi v0.10.59 on 2025-08-07 00:17:20 GMT+7

function normalize_index(index: number, n: number): number {
  if ((index < 0)) {
    return (n + index);
  }
  return index;
}
function find_max_iterative(nums: number[]): number {
  if ((_len(nums) == 0)) {
    _panic("find_max_iterative() arg is an empty sequence");
  }
  let max_num: number = nums[(Math.trunc(0)) < 0 ? nums.length + (Math.trunc(0)) : Math.trunc(0)];
  let i: number = 0;
  while ((i < _len(nums))) {
    let x: number = nums[(i) < 0 ? nums.length + (i) : i];
    if ((x > max_num)) {
      max_num = x;
    }
    i = (i + 1);
  }
  return max_num;
}
function find_max_recursive(nums: number[], left: number, right: number): number {
  let n: number = _len(nums);
  if ((n == 0)) {
    _panic("find_max_recursive() arg is an empty sequence");
  }
  if (((((left >= n) || (left < (0 - n))) || (right >= n)) || (right < (0 - n)))) {
    _panic("list index out of range");
  }
  let l: number = normalize_index(left, n);
  let r: number = normalize_index(right, n);
  if ((l == r)) {
    return nums[(l) < 0 ? nums.length + (l) : l];
  }
  let mid: number = Math.trunc((l + r) / 2);
  let left_max: number = find_max_recursive(nums, l, mid);
  let right_max: number = find_max_recursive(nums, (mid + 1), r);
  if ((left_max >= right_max)) {
    return left_max;
  }
  return right_max;
}
function test_find_max() {
  let arr: number[] = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0];
  if ((find_max_iterative(arr) != 94.0)) {
    _panic("find_max_iterative failed");
  }
  if ((find_max_recursive(arr, 0, (_len(arr) - 1)) != 94.0)) {
    _panic("find_max_recursive failed");
  }
  if ((find_max_recursive(arr, -_len(arr), -1) != 94.0)) {
    _panic("negative index handling failed");
  }
}
function main() {
  test_find_max();
  let nums: number[] = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0];
  console.log(_str(find_max_iterative(nums)));
  console.log(_str(find_max_recursive(nums, 0, (_len(nums) - 1))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

