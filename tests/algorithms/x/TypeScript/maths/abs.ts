// Generated by Mochi v0.10.59 on 2025-08-07 00:16:42 GMT+7

function abs_val(num: number): number {
  if ((num < 0.0)) {
    return -num;
  }
  return num;
}
function abs_min(x: number[]): number {
  if ((_len(x) == 0)) {
    _panic("abs_min() arg is an empty sequence");
  }
  let j: number = x[(Math.trunc(0)) < 0 ? x.length + (Math.trunc(0)) : Math.trunc(0)];
  let idx: number = 0;
  while ((idx < _len(x))) {
    let i: number = x[(idx) < 0 ? x.length + (idx) : idx];
    if ((abs_val(Number(i)) < abs_val(Number(j)))) {
      j = i;
    }
    idx = (idx + 1);
  }
  return j;
}
function abs_max(x: number[]): number {
  if ((_len(x) == 0)) {
    _panic("abs_max() arg is an empty sequence");
  }
  let j: number = x[(Math.trunc(0)) < 0 ? x.length + (Math.trunc(0)) : Math.trunc(0)];
  let idx: number = 0;
  while ((idx < _len(x))) {
    let i: number = x[(idx) < 0 ? x.length + (idx) : idx];
    if ((abs_val(Number(i)) > abs_val(Number(j)))) {
      j = i;
    }
    idx = (idx + 1);
  }
  return j;
}
function abs_max_sort(x: number[]): number {
  if ((_len(x) == 0)) {
    _panic("abs_max_sort() arg is an empty sequence");
  }
  let arr: number[] = [];
  let i: number = 0;
  while ((i < _len(x))) {
    arr.push(x[(i) < 0 ? x.length + (i) : i]);
    i = (i + 1);
  }
  let n: number = _len(arr);
  let a: number = 0;
  while ((a < n)) {
    let b: number = 0;
    while ((b < ((n - a) - 1))) {
      if ((abs_val(Number(arr[(b) < 0 ? arr.length + (b) : b])) > abs_val(Number(arr[(Math.trunc((b + 1))) < 0 ? arr.length + (Math.trunc((b + 1))) : Math.trunc((b + 1))])))) {
        let temp: number = arr[(b) < 0 ? arr.length + (b) : b];
        arr[(b) < 0 ? arr.length + (b) : b] = arr[(Math.trunc((b + 1))) < 0 ? arr.length + (Math.trunc((b + 1))) : Math.trunc((b + 1))];
        arr[((b + 1)) < 0 ? arr.length + ((b + 1)) : (b + 1)] = temp;
      }
      b = (b + 1);
    }
    a = (a + 1);
  }
  return arr[(Math.trunc((n - 1))) < 0 ? arr.length + (Math.trunc((n - 1))) : Math.trunc((n - 1))];
}
function test_abs_val() {
  if ((abs_val(0.0) != 0.0)) {
    _panic("abs_val(0) failed");
  }
  if ((abs_val(34.0) != 34.0)) {
    _panic("abs_val(34) failed");
  }
  if ((abs_val(-100000000000.0) != 100000000000.0)) {
    _panic("abs_val large failed");
  }
  let a: number[] = [-3, -1, 2, -11];
  if ((abs_max(a) != -11)) {
    _panic("abs_max failed");
  }
  if ((abs_max_sort(a) != -11)) {
    _panic("abs_max_sort failed");
  }
  if ((abs_min(a) != -1)) {
    _panic("abs_min failed");
  }
}
function main() {
  test_abs_val();
  console.log(_str(abs_val(-34.0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

