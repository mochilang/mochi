// Generated by Mochi v0.10.67 on 2025-08-17 12:24:44 GMT+7

function remove_digit(num: number): number {
  let n = num;
  if ((n < 0)) {
    n = -n;
  }
  let max_val: number = 0;
  let divisor: number = 1;
  while ((divisor <= n)) {
    let higher = Math.trunc(n / (divisor * 10));
    let lower = (n % divisor);
    let candidate = ((higher * divisor) + lower);
    if ((candidate > max_val)) {
      max_val = candidate;
    }
    divisor = (divisor * 10);
  }
  return max_val;
}
function test_remove_digit() {
  if ((remove_digit(152) !== 52)) {
    _panic("remove_digit(152) failed");
  }
  if ((remove_digit(6385) !== 685)) {
    _panic("remove_digit(6385) failed");
  }
  if ((remove_digit(-11) !== 1)) {
    _panic("remove_digit(-11) failed");
  }
  if ((remove_digit(2222222) !== 222222)) {
    _panic("remove_digit(2222222) failed");
  }
}
function main() {
  test_remove_digit();
  console.log(_str(remove_digit(152)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

