// Generated by Mochi v0.10.59 on 2025-08-07 00:17:50 GMT+7

let PI: number = 3.141592653589793;
let rand_seed: number = 123456789;
function rand_float(): number {
  rand_seed = (((1103515245 * rand_seed) + 12345) % 2147483648);
  return (rand_seed / 2147483648.0);
}
function rand_range(min_val: number, max_val: number): number {
  return ((rand_float() * (max_val - min_val)) + min_val);
}
function abs_float(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x == 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function pi_estimator(iterations: number) {
  let inside: number = 0.0;
  let i: number = 0;
  while ((i < iterations)) {
    let x: number = rand_range(-1.0, 1.0);
    let y: number = rand_range(-1.0, 1.0);
    if ((((x * x) + (y * y)) <= 1.0)) {
      inside = (inside + 1.0);
    }
    i = (i + 1);
  }
  let proportion: number = (inside / iterations);
  let pi_estimate: number = (proportion * 4.0);
  console.log(_str("The estimated value of pi is") + " " + _str(pi_estimate));
  console.log(_str("The numpy value of pi is") + " " + _str(PI));
  console.log(_str("The total error is") + " " + _str(abs_float((PI - pi_estimate))));
}
function area_under_curve_estimator(iterations: number, f, min_value: number, max_value: number): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < iterations)) {
    let x: number = rand_range(min_value, max_value);
    sum = (sum + f(x));
    i = (i + 1);
  }
  let expected = (sum / iterations);
  return (expected * (max_value - min_value));
}
function area_under_line_estimator_check(iterations: number, min_value: number, max_value: number) {
  function identity_function(x: number): number {
    return x;
  }
  let estimated_value = area_under_curve_estimator(iterations, identity_function, min_value, max_value);
  let expected_value: number = (((max_value * max_value) - (min_value * min_value)) / 2.0);
  console.log(_str("******************"));
  console.log(_str("Estimating area under y=x where x varies from") + " " + _str(min_value));
  console.log(_str("Estimated value is") + " " + _str(estimated_value));
  console.log(_str("Expected value is") + " " + _str(expected_value));
  console.log(_str("Total error is") + " " + _str(abs_float((estimated_value - expected_value))));
  console.log(_str("******************"));
}
function pi_estimator_using_area_under_curve(iterations: number) {
  function semi_circle(x: number): number {
    let y: number = (4.0 - (x * x));
    let s: number = sqrtApprox(y);
    return s;
  }
  let estimated_value = area_under_curve_estimator(iterations, semi_circle, 0.0, 2.0);
  console.log(_str("******************"));
  console.log(_str("Estimating pi using area_under_curve_estimator"));
  console.log(_str("Estimated value is") + " " + _str(estimated_value));
  console.log(_str("Expected value is") + " " + _str(PI));
  console.log(_str("Total error is") + " " + _str(abs_float((estimated_value - PI))));
  console.log(_str("******************"));
}
function main() {
  pi_estimator(1000);
  area_under_line_estimator_check(1000, 0.0, 1.0);
  pi_estimator_using_area_under_curve(1000);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

