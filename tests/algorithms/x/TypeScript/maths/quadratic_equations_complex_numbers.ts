// Generated by Mochi v0.10.67 on 2025-08-17 12:22:43 GMT+7

export interface Complex { re: number; im: number }
function add(a: Complex, b: Complex): Complex {
  return {re: (a.re + b.re), im: (a.im + b.im)};
}
function sub(a: Complex, b: Complex): Complex {
  return {re: (a.re - b.re), im: (a.im - b.im)};
}
function div_real(a: Complex, r: number): Complex {
  return {re: (a.re / r), im: (a.im / r)};
}
function sqrt_newton(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + Math.trunc(x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function sqrt_to_complex(d: number): Complex {
  if ((d >= 0.0)) {
    return {re: sqrt_newton(d), im: 0.0};
  }
  return {re: 0.0, im: sqrt_newton(-d)};
}
function quadratic_roots(a: number, b: number, c: number): Complex[] {
  if ((a === 0.0)) {
    console.log(_str("ValueError: coefficient 'a' must not be zero"));
    return [];
  }
  let delta: number = ((b * b) - ((4.0 * a) * c));
  let sqrt_d: Complex = sqrt_to_complex(delta);
  let minus_b: Complex = {re: -b, im: 0.0};
  let two_a: number = (2.0 * a);
  let root1: Complex = div_real(add(minus_b, sqrt_d), two_a);
  let root2: Complex = div_real(sub(minus_b, sqrt_d), two_a);
  return [root1, root2];
}
function root_str(r: Complex): string {
  if ((r.im === 0.0)) {
    return _str(r.re);
  }
  let s: string = _str(r.re);
  if ((r.im >= 0.0)) {
    s = (((s + "+") + _str(r.im)) + "i");
  } else {
    s = ((s + _str(r.im)) + "i");
  }
  return s;
}
function main() {
  let roots: Complex[] = quadratic_roots(5.0, 6.0, 1.0);
  if ((_len(roots) === 2)) {
    console.log(_str(((("The solutions are: " + root_str(roots[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? roots.length + _mochi_idx : _mochi_idx;})()])) + " and ") + root_str(roots[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? roots.length + _mochi_idx : _mochi_idx;})()]))));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

