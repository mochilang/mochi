// Generated by Mochi v0.10.59 on 2025-08-07 00:17:30 GMT+7

function bubble_sort(nums: number[]): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < _len(nums))) {
    arr.push(nums[(i) < 0 ? nums.length + (i) : i]);
    i = (i + 1);
  }
  let n: number = _len(arr);
  let a: number = 0;
  while ((a < n)) {
    let b: number = 0;
    while ((b < ((n - a) - 1))) {
      if ((arr[(b) < 0 ? arr.length + (b) : b] > arr[(Math.trunc((b + 1))) < 0 ? arr.length + (Math.trunc((b + 1))) : Math.trunc((b + 1))])) {
        let temp: number = arr[(b) < 0 ? arr.length + (b) : b];
        arr[(b) < 0 ? arr.length + (b) : b] = arr[(Math.trunc((b + 1))) < 0 ? arr.length + (Math.trunc((b + 1))) : Math.trunc((b + 1))];
        arr[((b + 1)) < 0 ? arr.length + ((b + 1)) : (b + 1)] = temp;
      }
      b = (b + 1);
    }
    a = (a + 1);
  }
  return arr;
}
function find_median(nums: number[]): number {
  let length: number = _len(nums);
  let div: number = Math.trunc(length / 2);
  let mod: number = (length % 2);
  if ((mod != 0)) {
    return nums[(div) < 0 ? nums.length + (div) : div];
  }
  return ((nums[(div) < 0 ? nums.length + (div) : div] + nums[(Math.trunc((div - 1))) < 0 ? nums.length + (Math.trunc((div - 1))) : Math.trunc((div - 1))]) / 2.0);
}
function interquartile_range(nums: number[]): number {
  if ((_len(nums) == 0)) {
    _panic("The list is empty. Provide a non-empty list.");
  }
  let sorted: number[] = bubble_sort(nums);
  let length: number = _len(sorted);
  let div: number = Math.trunc(length / 2);
  let mod: number = (length % 2);
  let lower: number[] = [];
  let i: number = 0;
  while ((i < div)) {
    lower.push(sorted[(i) < 0 ? sorted.length + (i) : i]);
    i = (i + 1);
  }
  let upper: number[] = [];
  let j: number = (div + mod);
  while ((j < length)) {
    upper.push(sorted[(j) < 0 ? sorted.length + (j) : j]);
    j = (j + 1);
  }
  let q1 = find_median(lower);
  let q3 = find_median(upper);
  return (q3 - q1);
}
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function float_equal(a: number, b: number): boolean {
  let diff: number = absf((a - b));
  return (diff < 1e-07);
}
function test_interquartile_range() {
  if (!float_equal(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]), 2.0)) {
    _panic("interquartile_range case1 failed");
  }
  if (!float_equal(interquartile_range([-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0]), 17.0)) {
    _panic("interquartile_range case2 failed");
  }
  if (!float_equal(interquartile_range([-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1]), 17.2)) {
    _panic("interquartile_range case3 failed");
  }
  if (!float_equal(interquartile_range([0.0, 0.0, 0.0, 0.0, 0.0]), 0.0)) {
    _panic("interquartile_range case4 failed");
  }
}
function main() {
  test_interquartile_range();
  console.log(_str(_str(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

