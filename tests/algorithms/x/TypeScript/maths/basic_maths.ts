// Generated by Mochi v0.10.59 on 2025-08-07 00:16:53 GMT+7

function pow_int(base: number, exp: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function prime_factors(n: number): number[] {
  if ((n <= 0)) {
    _panic("Only positive integers have prime factors");
  }
  let num: number = n;
  let pf: number[] = [];
  while (((num % 2) == 0)) {
    pf.push(2);
    num = Math.trunc(num / 2);
  }
  let i: number = 3;
  while (((i * i) <= num)) {
    while (((num % i) == 0)) {
      pf.push(i);
      num = (num / i);
    }
    i = (i + 2);
  }
  if ((num > 2)) {
    pf.push(num);
  }
  return pf;
}
function number_of_divisors(n: number): number {
  if ((n <= 0)) {
    _panic("Only positive numbers are accepted");
  }
  let num: number = n;
  let div: number = 1;
  let temp: number = 1;
  while (((num % 2) == 0)) {
    temp = (temp + 1);
    num = Math.trunc(num / 2);
  }
  div = (div * temp);
  let i: number = 3;
  while (((i * i) <= num)) {
    temp = 1;
    while (((num % i) == 0)) {
      temp = (temp + 1);
      num = (num / i);
    }
    div = (div * temp);
    i = (i + 2);
  }
  if ((num > 1)) {
    div = (div * 2);
  }
  return div;
}
function sum_of_divisors(n: number): number {
  if ((n <= 0)) {
    _panic("Only positive numbers are accepted");
  }
  let num: number = n;
  let s: number = 1;
  let temp: number = 1;
  while (((num % 2) == 0)) {
    temp = (temp + 1);
    num = Math.trunc(num / 2);
  }
  if ((temp > 1)) {
    s = (s * Math.trunc((pow_int(2, temp) - 1) / (2 - 1)));
  }
  let i: number = 3;
  while (((i * i) <= num)) {
    temp = 1;
    while (((num % i) == 0)) {
      temp = (temp + 1);
      num = (num / i);
    }
    if ((temp > 1)) {
      s = (s * Math.trunc((pow_int(i, temp) - 1) / (i - 1)));
    }
    i = (i + 2);
  }
  return s;
}
function contains(arr: number[], x: number): boolean {
  let idx: number = 0;
  while ((idx < _len(arr))) {
    if ((arr[(idx) < 0 ? arr.length + (idx) : idx] == x)) {
      return true;
    }
    idx = (idx + 1);
  }
  return false;
}
function unique(arr: number[]): number[] {
  let result: number[] = [];
  let idx: number = 0;
  while ((idx < _len(arr))) {
    let v: number = arr[(idx) < 0 ? arr.length + (idx) : idx];
    if (!contains(result, v)) {
      result.push(v);
    }
    idx = (idx + 1);
  }
  return result;
}
function euler_phi(n: number): number {
  if ((n <= 0)) {
    _panic("Only positive numbers are accepted");
  }
  let s: number = n;
  let factors: number[] = unique(prime_factors(n));
  let idx: number = 0;
  while ((idx < _len(factors))) {
    let x: number = factors[(idx) < 0 ? factors.length + (idx) : idx];
    s = (Math.trunc(s / x) * (x - 1));
    idx = (idx + 1);
  }
  return s;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(prime_factors(100))));
  console.log(_str(_str(number_of_divisors(100))));
  console.log(_str(_str(sum_of_divisors(100))));
  console.log(_str(_str(euler_phi(100))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

