// Generated by Mochi v0.10.66 on 2025-08-16 14:48:07 GMT+7

function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function factorial_float(n: number): number {
  let result: number = 1.0;
  let i: number = 2;
  while ((i <= n)) {
    result = (result * i);
    i = (i + 1);
  }
  return result;
}
function pi(n: number): number {
  if ((n < 1)) {
    _panic("Undefined for non-natural numbers");
  }
  let iterations: bigint = Math.trunc((n + 13) / 14);
  let constant_term: number = (426880.0 * sqrtApprox(10005.0));
  let exponential_term: number = 1.0;
  let linear_term: number = 13591409.0;
  let partial_sum: number = linear_term;
  let k: number = 1;
  while ((k < iterations)) {
    let k6: bigint = (6 * k);
    let k3: bigint = (3 * k);
    let fact6k: number = factorial_float(k6);
    let fact3k: number = factorial_float(k3);
    let factk: number = factorial_float(k);
    let multinomial: number = (fact6k / (((fact3k * factk) * factk) * factk));
    linear_term = (linear_term + 545140134.0);
    exponential_term = (exponential_term * -262537412640768000.0);
    partial_sum = (partial_sum + ((multinomial * linear_term) / exponential_term));
    k = (k + 1);
  }
  return (constant_term / partial_sum);
}
let n: number = 50;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(((("The first " + _str(n)) + " digits of pi is: ") + _str(pi(n)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

