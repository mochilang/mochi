// Generated by Mochi v0.10.67 on 2025-08-17 09:16:41 GMT+7

function ln(x: number): number {
  let t: number = ((x - 1.0) / (x + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let k: number = 1;
  while ((k <= 99)) {
    sum = (sum + (term / k));
    term = ((term * t) * t);
    k = (k + 2);
  }
  return (2.0 * sum);
}
function log10(x: number): number {
  return (ln(x) / ln(10.0));
}
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function res(x: number, y: number): number {
  if ((x === 0)) {
    return 0.0;
  }
  if ((y === 0)) {
    return 1.0;
  }
  if ((x < 0)) {
    _panic("math domain error");
  }
  return (y * log10(x));
}
function test_res() {
  if ((absf((res(5, 7) - 4.892790030352132)) > 1e-07)) {
    _panic("res(5,7) failed");
  }
  if ((res(0, 5) !== 0.0)) {
    _panic("res(0,5) failed");
  }
  if ((res(3, 0) !== 1.0)) {
    _panic("res(3,0) failed");
  }
}
function compare(x1: number, y1: number, x2: number, y2: number): string {
  let r1: number = res(x1, y1);
  let r2: number = res(x2, y2);
  if ((r1 > r2)) {
    return ((("Largest number is " + _str(x1)) + " ^ ") + _str(y1));
  }
  if ((r2 > r1)) {
    return ((("Largest number is " + _str(x2)) + " ^ ") + _str(y2));
  }
  return "Both are equal";
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return '[' + x.map(_str).join(', ') + ']';
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  test_res();
  console.log(_str(compare(5, 7, 4, 8)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

