// Generated by Mochi v0.10.67 on 2025-08-17 13:47:32 GMT+7

let PI: number = 3.141592653589793;
let SQRT5: number = 2.23606797749979;
function minf(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function maxf(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}
function vol_cube(side_length: number): number {
  if ((side_length < 0.0)) {
    _panic("vol_cube() only accepts non-negative values");
  }
  return ((side_length * side_length) * side_length);
}
function vol_spherical_cap(height: number, radius: number): number {
  if (((height < 0.0) || (radius < 0.0))) {
    _panic("vol_spherical_cap() only accepts non-negative values");
  }
  return (((((1.0 / 3.0) * PI) * height) * height) * ((3.0 * radius) - height));
}
function vol_sphere(radius: number): number {
  if ((radius < 0.0)) {
    _panic("vol_sphere() only accepts non-negative values");
  }
  return (((((4.0 / 3.0) * PI) * radius) * radius) * radius);
}
function vol_spheres_intersect(radius_1: number, radius_2: number, centers_distance: number): number {
  if ((((radius_1 < 0.0) || (radius_2 < 0.0)) || (centers_distance < 0.0))) {
    _panic("vol_spheres_intersect() only accepts non-negative values");
  }
  if ((centers_distance === 0.0)) {
    return vol_sphere(minf(radius_1, radius_2));
  }
  let h1: number = ((((radius_1 - radius_2) + centers_distance) * ((radius_1 + radius_2) - centers_distance)) / (2.0 * centers_distance));
  let h2: number = ((((radius_2 - radius_1) + centers_distance) * ((radius_2 + radius_1) - centers_distance)) / (2.0 * centers_distance));
  return (vol_spherical_cap(h1, radius_2) + vol_spherical_cap(h2, radius_1));
}
function vol_spheres_union(radius_1: number, radius_2: number, centers_distance: number): number {
  if ((((radius_1 <= 0.0) || (radius_2 <= 0.0)) || (centers_distance < 0.0))) {
    _panic("vol_spheres_union() only accepts non-negative values, non-zero radius");
  }
  if ((centers_distance === 0.0)) {
    return vol_sphere(maxf(radius_1, radius_2));
  }
  return ((vol_sphere(radius_1) + vol_sphere(radius_2)) - vol_spheres_intersect(radius_1, radius_2, centers_distance));
}
function vol_cuboid(width: number, height: number, length: number): number {
  if ((((width < 0.0) || (height < 0.0)) || (length < 0.0))) {
    _panic("vol_cuboid() only accepts non-negative values");
  }
  return ((width * height) * length);
}
function vol_cone(area_of_base: number, height: number): number {
  if (((height < 0.0) || (area_of_base < 0.0))) {
    _panic("vol_cone() only accepts non-negative values");
  }
  return ((area_of_base * height) / 3.0);
}
function vol_right_circ_cone(radius: number, height: number): number {
  if (((height < 0.0) || (radius < 0.0))) {
    _panic("vol_right_circ_cone() only accepts non-negative values");
  }
  return ((((PI * radius) * radius) * height) / 3.0);
}
function vol_prism(area_of_base: number, height: number): number {
  if (((height < 0.0) || (area_of_base < 0.0))) {
    _panic("vol_prism() only accepts non-negative values");
  }
  return (area_of_base * height);
}
function vol_pyramid(area_of_base: number, height: number): number {
  if (((height < 0.0) || (area_of_base < 0.0))) {
    _panic("vol_pyramid() only accepts non-negative values");
  }
  return ((area_of_base * height) / 3.0);
}
function vol_hemisphere(radius: number): number {
  if ((radius < 0.0)) {
    _panic("vol_hemisphere() only accepts non-negative values");
  }
  return (((((radius * radius) * radius) * PI) * 2.0) / 3.0);
}
function vol_circular_cylinder(radius: number, height: number): number {
  if (((height < 0.0) || (radius < 0.0))) {
    _panic("vol_circular_cylinder() only accepts non-negative values");
  }
  return (((radius * radius) * height) * PI);
}
function vol_hollow_circular_cylinder(inner_radius: number, outer_radius: number, height: number): number {
  if ((((inner_radius < 0.0) || (outer_radius < 0.0)) || (height < 0.0))) {
    _panic("vol_hollow_circular_cylinder() only accepts non-negative values");
  }
  if ((outer_radius <= inner_radius)) {
    _panic("outer_radius must be greater than inner_radius");
  }
  return ((PI * ((outer_radius * outer_radius) - (inner_radius * inner_radius))) * height);
}
function vol_conical_frustum(height: number, radius_1: number, radius_2: number): number {
  if ((((radius_1 < 0.0) || (radius_2 < 0.0)) || (height < 0.0))) {
    _panic("vol_conical_frustum() only accepts non-negative values");
  }
  return ((((1.0 / 3.0) * PI) * height) * (((radius_1 * radius_1) + (radius_2 * radius_2)) + (radius_1 * radius_2)));
}
function vol_torus(torus_radius: number, tube_radius: number): number {
  if (((torus_radius < 0.0) || (tube_radius < 0.0))) {
    _panic("vol_torus() only accepts non-negative values");
  }
  return (((((2.0 * PI) * PI) * torus_radius) * tube_radius) * tube_radius);
}
function vol_icosahedron(tri_side: number): number {
  if ((tri_side < 0.0)) {
    _panic("vol_icosahedron() only accepts non-negative values");
  }
  return (((((tri_side * tri_side) * tri_side) * (3.0 + SQRT5)) * 5.0) / 12.0);
}
function main() {
  console.log(_str("Volumes:"));
  console.log(_str(("Cube: " + _str(vol_cube(2.0)))));
  console.log(_str(("Cuboid: " + _str(vol_cuboid(2.0, 2.0, 2.0)))));
  console.log(_str(("Cone: " + _str(vol_cone(2.0, 2.0)))));
  console.log(_str(("Right Circular Cone: " + _str(vol_right_circ_cone(2.0, 2.0)))));
  console.log(_str(("Prism: " + _str(vol_prism(2.0, 2.0)))));
  console.log(_str(("Pyramid: " + _str(vol_pyramid(2.0, 2.0)))));
  console.log(_str(("Sphere: " + _str(vol_sphere(2.0)))));
  console.log(_str(("Hemisphere: " + _str(vol_hemisphere(2.0)))));
  console.log(_str(("Circular Cylinder: " + _str(vol_circular_cylinder(2.0, 2.0)))));
  console.log(_str(("Torus: " + _str(vol_torus(2.0, 2.0)))));
  console.log(_str(("Conical Frustum: " + _str(vol_conical_frustum(2.0, 2.0, 4.0)))));
  console.log(_str(("Spherical cap: " + _str(vol_spherical_cap(1.0, 2.0)))));
  console.log(_str(("Spheres intersection: " + _str(vol_spheres_intersect(2.0, 2.0, 1.0)))));
  console.log(_str(("Spheres union: " + _str(vol_spheres_union(2.0, 2.0, 1.0)))));
  console.log(_str(("Hollow Circular Cylinder: " + _str(vol_hollow_circular_cylinder(1.0, 2.0, 3.0)))));
  console.log(_str(("Icosahedron: " + _str(vol_icosahedron(2.5)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

