// Generated by Mochi v0.10.67 on 2025-08-17 12:23:01 GMT+7

function exp_approx(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 20)) {
    term = Math.trunc((term * x) / i);
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function softmax(vec: number[]): number[] {
  let exps: number[] = [];
  let i: number = 0;
  while ((i < _len(vec))) {
    exps.push(exp_approx(vec[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vec.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let total: number = 0.0;
  i = 0;
  while ((i < _len(exps))) {
    total = (total + exps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? exps.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let result: number[] = [];
  i = 0;
  while ((i < _len(exps))) {
    result.push((exps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? exps.length + _mochi_idx : _mochi_idx;})()] / total));
    i = (i + 1);
  }
  return result;
}
function abs_val(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function approx_equal(a: number, b: number): boolean {
  return (abs_val((a - b)) < 0.0001);
}
function test_softmax() {
  let s1: number[] = softmax([1.0, 2.0, 3.0, 4.0]);
  let sum1: number = 0.0;
  let i: number = 0;
  while ((i < _len(s1))) {
    sum1 = (sum1 + s1[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s1.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  if (!approx_equal(sum1, 1.0)) {
    _panic("sum test failed");
  }
  let s2: number[] = softmax([5.0, 5.0]);
  if (!(approx_equal(s2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? s2.length + _mochi_idx : _mochi_idx;})()], 0.5) && approx_equal(s2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? s2.length + _mochi_idx : _mochi_idx;})()], 0.5))) {
    _panic("equal elements test failed");
  }
  let s3: number[] = softmax([0.0]);
  if (!approx_equal(s3[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? s3.length + _mochi_idx : _mochi_idx;})()], 1.0)) {
    _panic("zero vector test failed");
  }
}
function main() {
  test_softmax();
  console.log(_str(softmax([1.0, 2.0, 3.0, 4.0])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

