// Generated by Mochi v0.10.66 on 2025-08-16 14:48:18 GMT+7

function ceil_int(x: number): number {
  let n: number = Math.trunc(x);
  if ((Number(n) < x)) {
    n = (n + 1);
  }
  return n;
}
function explicit_euler(ode_func, y0: number, x0: number, step_size: number, x_end: number): number[] {
  let n: number = ceil_int(((x_end - x0) / step_size));
  let y: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    y.push(0.0);
    i = (i + 1);
  }
  y[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] = y0;
  let x: number = x0;
  let k: number = 0;
  while ((k < n)) {
    y[(()=>{const _mochi_idx = (k + 1); return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] = (y[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()] + (step_size * ode_func(x, y[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()])));
    x = (x + step_size);
    k = (k + 1);
  }
  return y;
}
function abs_float(a: number): number {
  if ((a < 0.0)) {
    return -a;
  }
  return a;
}
function test_explicit_euler() {
  let f = (x, y) => y;
  let ys: number[] = explicit_euler(f, 1.0, 0.0, 0.01, 5.0);
  let last: number = ys[(()=>{const _mochi_idx = Math.trunc((_len(ys) - 1)); return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()];
  if ((abs_float((last - 144.77277243257308)) > 0.001)) {
    _panic("explicit_euler failed");
  }
}
function main() {
  test_explicit_euler();
  let f = (x, y) => y;
  let ys: number[] = explicit_euler(f, 1.0, 0.0, 0.01, 5.0);
  console.log(_str(ys[(()=>{const _mochi_idx = Math.trunc((_len(ys) - 1)); return _mochi_idx < 0 ? ys.length + _mochi_idx : _mochi_idx;})()]));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

