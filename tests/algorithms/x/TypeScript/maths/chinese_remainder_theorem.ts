// Generated by Mochi v0.10.66 on 2025-08-16 14:48:06 GMT+7

export interface EuclidResult { x: number; y: number }
function extended_euclid(a: number, b: number): EuclidResult {
  if ((b === 0)) {
    return {x: 1, y: 0};
  }
  let res: EuclidResult = extended_euclid(b, (a % b));
  let k: number = Math.trunc(a / b);
  return {x: res.y, y: (res.x - (k * res.y))};
}
function chinese_remainder_theorem(n1: number, r1: number, n2: number, r2: number): number {
  let res: EuclidResult = extended_euclid(n1, n2);
  let x: number = res.x;
  let y: number = res.y;
  let m: bigint = (n1 * n2);
  let n: bigint = (((r2 * x) * n1) + ((r1 * y) * n2));
  return (((n % m) + m) % m);
}
function invert_modulo(a: number, n: number): number {
  let res: EuclidResult = extended_euclid(a, n);
  let b: number = res.x;
  if ((b < 0)) {
    b = (((b % n) + n) % n);
  }
  return b;
}
function chinese_remainder_theorem2(n1: number, r1: number, n2: number, r2: number): number {
  let x: number = invert_modulo(n1, n2);
  let y: number = invert_modulo(n2, n1);
  let m: bigint = (n1 * n2);
  let n: bigint = (((r2 * x) * n1) + ((r1 * y) * n2));
  return (((n % m) + m) % m);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let e1: EuclidResult
let e2: EuclidResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
e1 = extended_euclid(10, 6)
  console.log(_str(((_str(e1.x) + ",") + _str(e1.y))));
e2 = extended_euclid(7, 5)
  console.log(_str(((_str(e2.x) + ",") + _str(e2.y))));
  console.log(_str(chinese_remainder_theorem(5, 1, 7, 3)));
  console.log(_str(chinese_remainder_theorem(6, 1, 4, 3)));
  console.log(_str(invert_modulo(2, 5)));
  console.log(_str(invert_modulo(8, 7)));
  console.log(_str(chinese_remainder_theorem2(5, 1, 7, 3)));
  console.log(_str(chinese_remainder_theorem2(6, 1, 4, 3)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

