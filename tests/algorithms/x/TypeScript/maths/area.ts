// Generated by Mochi v0.10.59 on 2025-08-07 00:16:46 GMT+7

let PI: number = 3.141592653589793;
let TWO_PI: number = 6.283185307179586;
function _mod(x: number, m: number): number {
  return (x - (Math.trunc((x / m)) * m));
}
function sin_approx(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y3: number = (y2 * y);
  let y5: number = (y3 * y2);
  let y7: number = (y5 * y2);
  return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0));
}
function cos_approx(x: number): number {
  let y: number = (_mod((x + PI), TWO_PI) - PI);
  let y2: number = (y * y);
  let y4: number = (y2 * y2);
  let y6: number = (y4 * y2);
  return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0));
}
function tan_approx(x: number): number {
  return (sin_approx(x) / cos_approx(x));
}
function sqrt_approx(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function surface_area_cube(side_length: number): number {
  if ((side_length < 0.0)) {
    console.log(_str("ValueError: surface_area_cube() only accepts non-negative values"));
    return 0.0;
  }
  return ((6.0 * side_length) * side_length);
}
function surface_area_cuboid(length: number, breadth: number, height: number): number {
  if ((((length < 0.0) || (breadth < 0.0)) || (height < 0.0))) {
    console.log(_str("ValueError: surface_area_cuboid() only accepts non-negative values"));
    return 0.0;
  }
  return (2.0 * (((length * breadth) + (breadth * height)) + (length * height)));
}
function surface_area_sphere(radius: number): number {
  if ((radius < 0.0)) {
    console.log(_str("ValueError: surface_area_sphere() only accepts non-negative values"));
    return 0.0;
  }
  return (((4.0 * PI) * radius) * radius);
}
function surface_area_hemisphere(radius: number): number {
  if ((radius < 0.0)) {
    console.log(_str("ValueError: surface_area_hemisphere() only accepts non-negative values"));
    return 0.0;
  }
  return (((3.0 * PI) * radius) * radius);
}
function surface_area_cone(radius: number, height: number): number {
  if (((radius < 0.0) || (height < 0.0))) {
    console.log(_str("ValueError: surface_area_cone() only accepts non-negative values"));
    return 0.0;
  }
  let slant: number = sqrt_approx(((height * height) + (radius * radius)));
  return ((PI * radius) * (radius + slant));
}
function surface_area_conical_frustum(radius1: number, radius2: number, height: number): number {
  if ((((radius1 < 0.0) || (radius2 < 0.0)) || (height < 0.0))) {
    console.log(_str("ValueError: surface_area_conical_frustum() only accepts non-negative values"));
    return 0.0;
  }
  let slant: number = sqrt_approx(((height * height) + ((radius1 - radius2) * (radius1 - radius2))));
  return (PI * (((slant * (radius1 + radius2)) + (radius1 * radius1)) + (radius2 * radius2)));
}
function surface_area_cylinder(radius: number, height: number): number {
  if (((radius < 0.0) || (height < 0.0))) {
    console.log(_str("ValueError: surface_area_cylinder() only accepts non-negative values"));
    return 0.0;
  }
  return (((2.0 * PI) * radius) * (height + radius));
}
function surface_area_torus(torus_radius: number, tube_radius: number): number {
  if (((torus_radius < 0.0) || (tube_radius < 0.0))) {
    console.log(_str("ValueError: surface_area_torus() only accepts non-negative values"));
    return 0.0;
  }
  if ((torus_radius < tube_radius)) {
    console.log(_str("ValueError: surface_area_torus() does not support spindle or self intersecting tori"));
    return 0.0;
  }
  return ((((4.0 * PI) * PI) * torus_radius) * tube_radius);
}
function area_rectangle(length: number, width: number): number {
  if (((length < 0.0) || (width < 0.0))) {
    console.log(_str("ValueError: area_rectangle() only accepts non-negative values"));
    return 0.0;
  }
  return (length * width);
}
function area_square(side_length: number): number {
  if ((side_length < 0.0)) {
    console.log(_str("ValueError: area_square() only accepts non-negative values"));
    return 0.0;
  }
  return (side_length * side_length);
}
function area_triangle(base: number, height: number): number {
  if (((base < 0.0) || (height < 0.0))) {
    console.log(_str("ValueError: area_triangle() only accepts non-negative values"));
    return 0.0;
  }
  return ((base * height) / 2.0);
}
function area_triangle_three_sides(side1: number, side2: number, side3: number): number {
  if ((((side1 < 0.0) || (side2 < 0.0)) || (side3 < 0.0))) {
    console.log(_str("ValueError: area_triangle_three_sides() only accepts non-negative values"));
    return 0.0;
  }
  if (((((side1 + side2) < side3) || ((side1 + side3) < side2)) || ((side2 + side3) < side1))) {
    console.log(_str("ValueError: Given three sides do not form a triangle"));
    return 0.0;
  }
  let s: number = (((side1 + side2) + side3) / 2.0);
  let prod: number = (((s * (s - side1)) * (s - side2)) * (s - side3));
  let res: number = sqrt_approx(prod);
  return res;
}
function area_parallelogram(base: number, height: number): number {
  if (((base < 0.0) || (height < 0.0))) {
    console.log(_str("ValueError: area_parallelogram() only accepts non-negative values"));
    return 0.0;
  }
  return (base * height);
}
function area_trapezium(base1: number, base2: number, height: number): number {
  if ((((base1 < 0.0) || (base2 < 0.0)) || (height < 0.0))) {
    console.log(_str("ValueError: area_trapezium() only accepts non-negative values"));
    return 0.0;
  }
  return ((0.5 * (base1 + base2)) * height);
}
function area_circle(radius: number): number {
  if ((radius < 0.0)) {
    console.log(_str("ValueError: area_circle() only accepts non-negative values"));
    return 0.0;
  }
  return ((PI * radius) * radius);
}
function area_ellipse(radius_x: number, radius_y: number): number {
  if (((radius_x < 0.0) || (radius_y < 0.0))) {
    console.log(_str("ValueError: area_ellipse() only accepts non-negative values"));
    return 0.0;
  }
  return ((PI * radius_x) * radius_y);
}
function area_rhombus(diagonal1: number, diagonal2: number): number {
  if (((diagonal1 < 0.0) || (diagonal2 < 0.0))) {
    console.log(_str("ValueError: area_rhombus() only accepts non-negative values"));
    return 0.0;
  }
  return ((0.5 * diagonal1) * diagonal2);
}
function area_reg_polygon(sides: number, length: number): number {
  if ((sides < 3)) {
    console.log(_str("ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides"));
    return 0.0;
  }
  if ((length < 0.0)) {
    console.log(_str("ValueError: area_reg_polygon() only accepts non-negative values as length of a side"));
    return 0.0;
  }
  let n: number = sides;
  return (((n * length) * length) / (4.0 * tan_approx((PI / n))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let TRI_THREE_SIDES: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[DEMO] Areas of various geometric shapes:"));
  console.log(_str(("Rectangle: " + _str(area_rectangle(10.0, 20.0)))));
  console.log(_str(("Square: " + _str(area_square(10.0)))));
  console.log(_str(("Triangle: " + _str(area_triangle(10.0, 10.0)))));
TRI_THREE_SIDES = area_triangle_three_sides(5.0, 12.0, 13.0)
  console.log(_str(("Triangle Three Sides: " + _str(TRI_THREE_SIDES))));
  console.log(_str(("Parallelogram: " + _str(area_parallelogram(10.0, 20.0)))));
  console.log(_str(("Rhombus: " + _str(area_rhombus(10.0, 20.0)))));
  console.log(_str(("Trapezium: " + _str(area_trapezium(10.0, 20.0, 30.0)))));
  console.log(_str(("Circle: " + _str(area_circle(20.0)))));
  console.log(_str(("Ellipse: " + _str(area_ellipse(10.0, 20.0)))));
  console.log(_str(""));
  console.log(_str("Surface Areas of various geometric shapes:"));
  console.log(_str(("Cube: " + _str(surface_area_cube(20.0)))));
  console.log(_str(("Cuboid: " + _str(surface_area_cuboid(10.0, 20.0, 30.0)))));
  console.log(_str(("Sphere: " + _str(surface_area_sphere(20.0)))));
  console.log(_str(("Hemisphere: " + _str(surface_area_hemisphere(20.0)))));
  console.log(_str(("Cone: " + _str(surface_area_cone(10.0, 20.0)))));
  console.log(_str(("Conical Frustum: " + _str(surface_area_conical_frustum(10.0, 20.0, 30.0)))));
  console.log(_str(("Cylinder: " + _str(surface_area_cylinder(10.0, 20.0)))));
  console.log(_str(("Torus: " + _str(surface_area_torus(20.0, 10.0)))));
  console.log(_str(("Equilateral Triangle: " + _str(area_reg_polygon(3, 10.0)))));
  console.log(_str(("Square: " + _str(area_reg_polygon(4, 10.0)))));
  console.log(_str(("Regular Pentagon: " + _str(area_reg_polygon(5, 10.0)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

