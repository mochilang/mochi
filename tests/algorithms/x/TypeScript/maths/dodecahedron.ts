// Generated by Mochi v0.10.66 on 2025-08-16 14:48:13 GMT+7

function sqrtApprox(x: number): number {
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function abs_val(num: number): number {
  if ((num < 0.0)) {
    return -num;
  }
  return num;
}
function approx_equal(a: number, b: number, eps: number): boolean {
  return (abs_val((a - b)) < eps);
}
function dodecahedron_surface_area(edge: number): number {
  if ((edge <= 0)) {
    _panic("Length must be a positive.");
  }
  let term: number = sqrtApprox((25.0 + (10.0 * sqrtApprox(5.0))));
  let e: number = edge;
  return (((3.0 * term) * e) * e);
}
function dodecahedron_volume(edge: number): number {
  if ((edge <= 0)) {
    _panic("Length must be a positive.");
  }
  let term: number = ((15.0 + (7.0 * sqrtApprox(5.0))) / 4.0);
  let e: number = edge;
  return (((term * e) * e) * e);
}
function test_dodecahedron() {
  if (!approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001)) {
    _panic("surface area 5 failed");
  }
  if (!approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001)) {
    _panic("surface area 10 failed");
  }
  if (!approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001)) {
    _panic("volume 5 failed");
  }
  if (!approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001)) {
    _panic("volume 10 failed");
  }
}
function main() {
  test_dodecahedron();
  console.log(_str(dodecahedron_surface_area(5)));
  console.log(_str(dodecahedron_volume(5)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

