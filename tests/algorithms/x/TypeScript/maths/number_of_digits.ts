// Generated by Mochi v0.10.59 on 2025-08-07 00:17:52 GMT+7

function abs_int(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function num_digits(n: number): number {
  let x: number = abs_int(n);
  let digits: number = 1;
  while ((x >= 10)) {
    x = Math.trunc(x / 10);
    digits = (digits + 1);
  }
  return digits;
}
function num_digits_fast(n: number): number {
  let x: number = abs_int(n);
  let digits: number = 1;
  let power: number = 10;
  while ((x >= power)) {
    power = (power * 10);
    digits = (digits + 1);
  }
  return digits;
}
function num_digits_faster(n: number): number {
  let s: string = _str(abs_int(n));
  return _len(s);
}
function test_num_digits() {
  if ((num_digits(12345) != 5)) {
    _panic("num_digits 12345 failed");
  }
  if ((num_digits(123) != 3)) {
    _panic("num_digits 123 failed");
  }
  if ((num_digits(0) != 1)) {
    _panic("num_digits 0 failed");
  }
  if ((num_digits(-1) != 1)) {
    _panic("num_digits -1 failed");
  }
  if ((num_digits(-123456) != 6)) {
    _panic("num_digits -123456 failed");
  }
  if ((num_digits_fast(12345) != 5)) {
    _panic("num_digits_fast 12345 failed");
  }
  if ((num_digits_fast(123) != 3)) {
    _panic("num_digits_fast 123 failed");
  }
  if ((num_digits_fast(0) != 1)) {
    _panic("num_digits_fast 0 failed");
  }
  if ((num_digits_fast(-1) != 1)) {
    _panic("num_digits_fast -1 failed");
  }
  if ((num_digits_fast(-123456) != 6)) {
    _panic("num_digits_fast -123456 failed");
  }
  if ((num_digits_faster(12345) != 5)) {
    _panic("num_digits_faster 12345 failed");
  }
  if ((num_digits_faster(123) != 3)) {
    _panic("num_digits_faster 123 failed");
  }
  if ((num_digits_faster(0) != 1)) {
    _panic("num_digits_faster 0 failed");
  }
  if ((num_digits_faster(-1) != 1)) {
    _panic("num_digits_faster -1 failed");
  }
  if ((num_digits_faster(-123456) != 6)) {
    _panic("num_digits_faster -123456 failed");
  }
}
function main() {
  test_num_digits();
  console.log(_str(_str(num_digits(12345))));
  console.log(_str(_str(num_digits_fast(12345))));
  console.log(_str(_str(num_digits_faster(12345))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

