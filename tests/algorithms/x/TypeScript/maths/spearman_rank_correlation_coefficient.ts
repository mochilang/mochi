// Generated by Mochi v0.10.59 on 2025-08-07 00:18:44 GMT+7

function assign_ranks(data: number[]): number[] {
  let ranks: number[] = [];
  let n: number = _len(data);
  let i: number = 0;
  while ((i < n)) {
    let rank: number = 1;
    let j: number = 0;
    while ((j < n)) {
      if (((data[(j) < 0 ? data.length + (j) : j] < data[(i) < 0 ? data.length + (i) : i]) || ((data[(j) < 0 ? data.length + (j) : j] == data[(i) < 0 ? data.length + (i) : i]) && (j < i)))) {
        rank = (rank + 1);
      }
      j = (j + 1);
    }
    ranks.push(rank);
    i = (i + 1);
  }
  return ranks;
}
function calculate_spearman_rank_correlation(var1: number[], var2: number[]): number {
  if ((_len(var1) != _len(var2))) {
    _panic("Lists must have equal length");
  }
  let n: number = _len(var1);
  let rank1: number[] = assign_ranks(var1);
  let rank2: number[] = assign_ranks(var2);
  let i: number = 0;
  let d_sq: number = 0.0;
  while ((i < n)) {
    let diff: number = (rank1[(i) < 0 ? rank1.length + (i) : i] - rank2[(i) < 0 ? rank2.length + (i) : i]);
    d_sq = (d_sq + (diff * diff));
    i = (i + 1);
  }
  let n_f: number = n;
  return (1.0 - ((6.0 * d_sq) / (n_f * ((n_f * n_f) - 1.0))));
}
function test_spearman() {
  let x: number[] = [1.0, 2.0, 3.0, 4.0, 5.0];
  let y_inc: number[] = [2.0, 4.0, 6.0, 8.0, 10.0];
  if ((calculate_spearman_rank_correlation(x, y_inc) != 1.0)) {
    _panic("case1");
  }
  let y_dec: number[] = [5.0, 4.0, 3.0, 2.0, 1.0];
  if ((calculate_spearman_rank_correlation(x, y_dec) != -1.0)) {
    _panic("case2");
  }
  let y_mix: number[] = [5.0, 1.0, 2.0, 9.0, 5.0];
  if ((calculate_spearman_rank_correlation(x, y_mix) != 0.6)) {
    _panic("case3");
  }
}
function main() {
  test_spearman();
  console.log(_str(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 4.0, 6.0, 8.0, 10.0]))));
  console.log(_str(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 4.0, 3.0, 2.0, 1.0]))));
  console.log(_str(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 1.0, 2.0, 9.0, 5.0]))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

