// Generated by Mochi v0.10.63 on 2025-08-12 07:59:15 GMT+7

function split_by_dot(s: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    if ((c == ".")) {
      res.push(current);
      current = "";
    } else {
      current = (current + c);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function is_digit_str(s: string): boolean {
  if ((_len(s) == 0)) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    if (((c < "0") || (c > "9"))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function parse_decimal(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    value = ((value * 10) + Math.trunc(c));
    i = (i + 1);
  }
  return value;
}
function is_ip_v4_address_valid(ip: string): boolean {
  let octets: string[] = split_by_dot(ip);
  if ((_len(octets) != 4)) {
    return false;
  }
  let i: number = 0;
  while ((i < 4)) {
    let oct: string = octets[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? octets.length + _mochi_idx : _mochi_idx;})()];
    if (!is_digit_str(oct)) {
      return false;
    }
    let _number: number = parse_decimal(oct);
    if ((_len(_str(_number)) != _len(oct))) {
      return false;
    }
    if (((_number < 0) || (_number > 255))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(is_ip_v4_address_valid("192.168.0.23")));
  console.log(_str(is_ip_v4_address_valid("192.256.15.8")));
  console.log(_str(is_ip_v4_address_valid("172.100.0.8")));
  console.log(_str(is_ip_v4_address_valid("255.256.0.256")));
  console.log(_str(is_ip_v4_address_valid("1.2.33333333.4")));
  console.log(_str(is_ip_v4_address_valid("1.2.-3.4")));
  console.log(_str(is_ip_v4_address_valid("1.2.3")));
  console.log(_str(is_ip_v4_address_valid("1.2.3.4.5")));
  console.log(_str(is_ip_v4_address_valid("1.2.A.4")));
  console.log(_str(is_ip_v4_address_valid("0.0.0.0")));
  console.log(_str(is_ip_v4_address_valid("1.2.3.")));
  console.log(_str(is_ip_v4_address_valid("1.2.3.05")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

