// Generated by Mochi v0.10.66 on 2025-08-16 14:48:14 GMT+7

function double_factorial_recursive(n: number): number {
  if ((n < 0)) {
    _panic("double_factorial_recursive() not defined for negative values");
  }
  if ((n <= 1)) {
    return 1;
  }
  return (n * double_factorial_recursive((n - 2)));
}
function double_factorial_iterative(n: number): number {
  if ((n < 0)) {
    _panic("double_factorial_iterative() not defined for negative values");
  }
  let result: number = 1;
  let i: number = n;
  while ((i > 0)) {
    result = (result * i);
    i = (i - 2);
  }
  return result;
}
function test_double_factorial() {
  if ((double_factorial_recursive(0) !== 1)) {
    _panic("0!! recursive failed");
  }
  if ((double_factorial_iterative(0) !== 1)) {
    _panic("0!! iterative failed");
  }
  if ((double_factorial_recursive(1) !== 1)) {
    _panic("1!! recursive failed");
  }
  if ((double_factorial_iterative(1) !== 1)) {
    _panic("1!! iterative failed");
  }
  if ((double_factorial_recursive(5) !== 15)) {
    _panic("5!! recursive failed");
  }
  if ((double_factorial_iterative(5) !== 15)) {
    _panic("5!! iterative failed");
  }
  if ((double_factorial_recursive(6) !== 48)) {
    _panic("6!! recursive failed");
  }
  if ((double_factorial_iterative(6) !== 48)) {
    _panic("6!! iterative failed");
  }
  let n: number = 0;
  while ((n <= 10)) {
    if ((double_factorial_recursive(n) !== double_factorial_iterative(n))) {
      _panic("double factorial mismatch");
    }
    n = (n + 1);
  }
}
function main() {
  test_double_factorial();
  console.log(_str(double_factorial_iterative(10)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

