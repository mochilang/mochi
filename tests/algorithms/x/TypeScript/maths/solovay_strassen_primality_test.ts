// Generated by Mochi v0.10.67 on 2025-08-17 12:23:02 GMT+7

let seed: number = 1;
function set_seed(s: number) {
  seed = s;
}
function randint(a: number, b: number): number {
  seed = Number((((BigInt(seed) * 1103515245n) + 12345n) % 2147483648n));
  return ((seed % ((b - a) + 1)) + a);
}
function jacobi_symbol(random_a: number, _number: number): number {
  if (((random_a === 0) || (random_a === 1))) {
    return random_a;
  }
  random_a = (random_a % _number);
  let t: number = 1;
  while ((random_a !== 0)) {
    while (((random_a % 2) === 0)) {
      random_a = Math.trunc(random_a / 2);
      let r: bigint = (_number % 8);
      if (((r === 3) || (r === 5))) {
        t = -t;
      }
    }
    let temp: number = random_a;
    random_a = _number;
    _number = temp;
    if ((((random_a % 4) === 3) && ((_number % 4) === 3))) {
      t = -t;
    }
    random_a = (random_a % _number);
  }
  if ((_number === 1)) {
    return t;
  }
  return 0;
}
function pow_mod(base: number, exp: number, mod: number): number {
  let result: number = 1;
  let b: bigint = (base % mod);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) === 1)) {
      result = ((result * b) % mod);
    }
    b = ((b * b) % mod);
    e = Math.trunc(e / 2);
  }
  return result;
}
function solovay_strassen(_number: number, iterations: number): boolean {
  if ((_number <= 1)) {
    return false;
  }
  if ((_number <= 3)) {
    return true;
  }
  let i: number = 0;
  while ((i < iterations)) {
    let a: number = randint(2, (_number - 2));
    let x: number = jacobi_symbol(a, _number);
    let y: number = pow_mod(a, Math.trunc((_number - 1) / 2), _number);
    let mod_x: bigint = (x % _number);
    if ((mod_x < 0)) {
      mod_x = (mod_x + _number);
    }
    if (((x === 0) || (y !== mod_x))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function main() {
  set_seed(10);
  console.log(_str(solovay_strassen(13, 5)));
  console.log(_str(solovay_strassen(9, 10)));
  console.log(_str(solovay_strassen(17, 15)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

