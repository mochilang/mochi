// Generated by Mochi v0.10.59 on 2025-08-07 00:17:38 GMT+7

function remove_at(xs: number[], idx: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i != idx)) {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function kth_permutation(k: number, n: number): number[] {
  if ((n <= 0)) {
    _panic("n must be positive");
  }
  let factorials: number[] = [1];
  let i: number = 2;
  while ((i < n)) {
    factorials.push((factorials[(Math.trunc((_len(factorials) - 1))) < 0 ? factorials.length + (Math.trunc((_len(factorials) - 1))) : Math.trunc((_len(factorials) - 1))] * i));
    i = (i + 1);
  }
  let total: number = (factorials[(Math.trunc((_len(factorials) - 1))) < 0 ? factorials.length + (Math.trunc((_len(factorials) - 1))) : Math.trunc((_len(factorials) - 1))] * n);
  if (((k < 0) || (k >= total))) {
    _panic("k out of bounds");
  }
  let elements: number[] = [];
  let e: number = 0;
  while ((e < n)) {
    elements.push(e);
    e = (e + 1);
  }
  let permutation: number[] = [];
  let idx: number = (_len(factorials) - 1);
  while ((idx >= 0)) {
    let factorial: number = factorials[(idx) < 0 ? factorials.length + (idx) : idx];
    let _number: number = Math.trunc(k / factorial);
    k = (k % factorial);
    permutation.push(elements[(_number) < 0 ? elements.length + (_number) : _number]);
    elements = remove_at(elements, _number);
    idx = (idx - 1);
  }
  permutation.push(elements[(Math.trunc(0)) < 0 ? elements.length + (Math.trunc(0)) : Math.trunc(0)]);
  return permutation;
}
function list_equal(a: number[], b: number[]): boolean {
  if ((_len(a) != _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    if ((a[(i) < 0 ? a.length + (i) : i] != b[(i) < 0 ? b.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function list_to_string(xs: number[]): string {
  if ((_len(xs) == 0)) {
    return "[]";
  }
  let s: string = ("[" + _str(xs[(Math.trunc(0)) < 0 ? xs.length + (Math.trunc(0)) : Math.trunc(0)]));
  let i: number = 1;
  while ((i < _len(xs))) {
    s = ((s + ", ") + _str(xs[(i) < 0 ? xs.length + (i) : i]));
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function test_kth_permutation() {
  let expected1: number[] = [0, 1, 2, 3, 4];
  let res1: number[] = kth_permutation(0, 5);
  if (!list_equal(res1, expected1)) {
    _panic("test case 1 failed");
  }
  let expected2: number[] = [1, 3, 0, 2];
  let res2: number[] = kth_permutation(10, 4);
  if (!list_equal(res2, expected2)) {
    _panic("test case 2 failed");
  }
}
function main() {
  test_kth_permutation();
  let res: number[] = kth_permutation(10, 4);
  console.log(_str(list_to_string(res)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

