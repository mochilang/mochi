// Generated by Mochi v0.10.67 on 2025-08-17 13:47:26 GMT+7

function bubble_sort(nums: number[]): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < _len(nums))) {
    arr.push(nums[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? nums.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let n: number = _len(arr);
  let a: number = 0;
  while ((a < n)) {
    let b: number = 0;
    while ((b < ((n - a) - 1))) {
      if ((arr[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = Math.trunc((b + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number = arr[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = Math.trunc((b + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = (b + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      b = (b + 1);
    }
    a = (a + 1);
  }
  return arr;
}
function sort3(xs: number[]): number[] {
  let arr: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    arr.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let n: number = _len(arr);
  let a: number = 0;
  while ((a < n)) {
    let b: number = 0;
    while ((b < ((n - a) - 1))) {
      if ((arr[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = Math.trunc((b + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number = arr[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = Math.trunc((b + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = (b + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      b = (b + 1);
    }
    a = (a + 1);
  }
  return arr;
}
function triplet_sum1(arr: number[], target: number): number[] {
  let i: number = 0;
  while ((i < (_len(arr) - 2))) {
    let j: bigint = (i + 1);
    while ((j < (_len(arr) - 1))) {
      let k: bigint = (j + 1);
      while ((k < _len(arr))) {
        if ((((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] + arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]) + arr[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]) === target)) {
          return sort3([arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()], arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()], arr[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]]);
        }
        k = (k + 1);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return [0, 0, 0];
}
function triplet_sum2(arr: number[], target: number): number[] {
  let sorted: number[] = bubble_sort(arr);
  let n: number = _len(sorted);
  let i: number = 0;
  while ((i < (n - 2))) {
    let left: bigint = (i + 1);
    let right: bigint = (n - 1);
    while ((left < right)) {
      let s: bigint = ((sorted[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()] + sorted[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]) + sorted[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]);
      if ((s === target)) {
        return [sorted[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()], sorted[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()], sorted[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()]];
      }
      if ((s < target)) {
        left = (left + 1);
      } else {
        right = (right - 1);
      }
    }
    i = (i + 1);
  }
  return [0, 0, 0];
}
function list_equal(a: number[], b: number[]): boolean {
  if ((_len(a) !== _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    if ((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] !== b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function test_triplet_sum() {
  let arr1: number[] = [13, 29, 7, 23, 5];
  if (!list_equal(triplet_sum1(arr1, 35), [5, 7, 23])) {
    _panic("ts1 case1 failed");
  }
  if (!list_equal(triplet_sum2(arr1, 35), [5, 7, 23])) {
    _panic("ts2 case1 failed");
  }
  let arr2: number[] = [37, 9, 19, 50, 44];
  if (!list_equal(triplet_sum1(arr2, 65), [9, 19, 37])) {
    _panic("ts1 case2 failed");
  }
  if (!list_equal(triplet_sum2(arr2, 65), [9, 19, 37])) {
    _panic("ts2 case2 failed");
  }
  let arr3: number[] = [6, 47, 27, 1, 15];
  if (!list_equal(triplet_sum1(arr3, 11), [0, 0, 0])) {
    _panic("ts1 case3 failed");
  }
  if (!list_equal(triplet_sum2(arr3, 11), [0, 0, 0])) {
    _panic("ts2 case3 failed");
  }
}
function main() {
  test_triplet_sum();
  let sample: number[] = [13, 29, 7, 23, 5];
  let res: number[] = triplet_sum2(sample, 35);
  console.log(_str(((((_str(res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()]) + " ") + _str(res[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()])) + " ") + _str(res[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()]))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

