// Generated by Mochi v0.10.59 on 2025-08-07 00:17:27 GMT+7

function abs_int(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function greatest_common_divisor(a: number, b: number): number {
  let x: number = abs_int(a);
  let y: number = abs_int(b);
  if ((x == 0)) {
    return y;
  }
  return greatest_common_divisor((y % x), x);
}
function gcd_by_iterative(x: number, y: number): number {
  let a: number = abs_int(x);
  let b: number = abs_int(y);
  while ((b != 0)) {
    let temp: number = b;
    b = (a % b);
    a = temp;
  }
  return a;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(greatest_common_divisor(24, 40))));
  console.log(_str(_str(greatest_common_divisor(1, 1))));
  console.log(_str(_str(greatest_common_divisor(1, 800))));
  console.log(_str(_str(greatest_common_divisor(11, 37))));
  console.log(_str(_str(greatest_common_divisor(3, 5))));
  console.log(_str(_str(greatest_common_divisor(16, 4))));
  console.log(_str(_str(greatest_common_divisor(-3, 9))));
  console.log(_str(_str(greatest_common_divisor(9, -3))));
  console.log(_str(_str(greatest_common_divisor(3, -9))));
  console.log(_str(_str(greatest_common_divisor(-3, -9))));
  console.log(_str(_str(gcd_by_iterative(24, 40))));
  console.log(_str(_str((greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)))));
  console.log(_str(_str(gcd_by_iterative(-3, -9))));
  console.log(_str(_str(gcd_by_iterative(3, -9))));
  console.log(_str(_str(gcd_by_iterative(1, -800))));
  console.log(_str(_str(gcd_by_iterative(11, 37))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

