// Generated by Mochi v0.10.63 on 2025-08-12 07:59:30 GMT+7

function identity(n: number): number[][] {
  let i: number = 0;
  let mat: number[][] = [];
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      if ((i == j)) {
        row.push(1);
      } else {
        row.push(0);
      }
      j = (j + 1);
    }
    mat.push(row);
    i = (i + 1);
  }
  return mat;
}
function matrix_mul(a: number[][], b: number[][]): number[][] {
  let n: number = _len(a);
  let result: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      let cell: number = 0;
      let k: number = 0;
      while ((k < n)) {
        cell = (cell + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      row.push(cell);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function matrix_pow(base: number[][], exp: number): number[][] {
  let result: number[][] = identity(_len(base));
  let b: number[][] = base;
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = matrix_mul(result, b);
    }
    b = matrix_mul(b, b);
    e = Math.trunc(e / 2);
  }
  return result;
}
function fibonacci_with_matrix_exponentiation(n: number, f1: number, f2: number): number {
  if ((n == 1)) {
    return f1;
  }
  if ((n == 2)) {
    return f2;
  }
  let base: number[][] = [[1, 1], [1, 0]];
  let m: number[][] = matrix_pow(base, (n - 2));
  return ((f2 * m[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (f1 * m[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
}
function simple_fibonacci(n: number, f1: number, f2: number): number {
  if ((n == 1)) {
    return f1;
  }
  if ((n == 2)) {
    return f2;
  }
  let a: number = f1;
  let b: number = f2;
  let count: number = (n - 2);
  while ((count > 0)) {
    let tmp: number = (a + b);
    a = b;
    b = tmp;
    count = (count - 1);
  }
  return b;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(fibonacci_with_matrix_exponentiation(1, 5, 6)));
  console.log(_str(fibonacci_with_matrix_exponentiation(2, 10, 11)));
  console.log(_str(fibonacci_with_matrix_exponentiation(13, 0, 1)));
  console.log(_str(fibonacci_with_matrix_exponentiation(10, 5, 9)));
  console.log(_str(fibonacci_with_matrix_exponentiation(9, 2, 3)));
  console.log(_str(simple_fibonacci(1, 5, 6)));
  console.log(_str(simple_fibonacci(2, 10, 11)));
  console.log(_str(simple_fibonacci(13, 0, 1)));
  console.log(_str(simple_fibonacci(10, 5, 9)));
  console.log(_str(simple_fibonacci(9, 2, 3)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

