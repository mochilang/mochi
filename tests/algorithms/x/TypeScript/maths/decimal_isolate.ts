// Generated by Mochi v0.10.66 on 2025-08-16 14:48:11 GMT+7

function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let p: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 10.0);
    i = (i + 1);
  }
  return p;
}
function round(x: number, n: number): number {
  let m: number = pow10(n);
  return (Math.floor(((x * m) + 0.5)) / m);
}
function decimal_isolate(_number: number, digit_amount: number): number {
  let whole: number = Math.trunc(_number);
  let frac: number = (_number - whole);
  if ((digit_amount > 0)) {
    return round(frac, digit_amount);
  }
  return frac;
}
function main() {
  console.log(_str(decimal_isolate(1.53, 0)));
  console.log(_str(decimal_isolate(35.345, 1)));
  console.log(_str(decimal_isolate(35.345, 2)));
  console.log(_str(decimal_isolate(35.345, 3)));
  console.log(_str(decimal_isolate(-14.789, 3)));
  console.log(_str(decimal_isolate(0.0, 2)));
  console.log(_str(decimal_isolate(-14.123, 1)));
  console.log(_str(decimal_isolate(-14.123, 2)));
  console.log(_str(decimal_isolate(-14.123, 3)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

