// Generated by Mochi v0.10.63 on 2025-08-12 07:59:34 GMT+7

function mod(a: number, n: number): number {
  let r: number = (a % n);
  if ((r < 0)) {
    return (r + n);
  }
  return r;
}
function greatest_common_divisor(a: number, b: number): number {
  let x: number = ((a < 0) ? -a : a);
  let y: number = ((b < 0) ? -b : b);
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  return x;
}
function extended_gcd(a: number, b: number): number[] {
  if ((b == 0)) {
    return [a, 1, 0];
  }
  let res: number[] = extended_gcd(b, (a % b));
  let d: number = res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
  let p: number = res[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
  let q: number = res[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
  let x: number = q;
  let y: number = (p - (q * Math.trunc(a / b)));
  return [d, x, y];
}
function extended_euclid(a: number, b: number): number[] {
  if ((b == 0)) {
    return [1, 0];
  }
  let res: number[] = extended_euclid(b, (a % b));
  let x: number = res[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
  let y: number = (res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] - (Math.trunc(a / b) * res[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()]));
  return [x, y];
}
function invert_modulo(a: number, n: number): number {
  let res: number[] = extended_euclid(a, n);
  let inv: number = res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
  return mod(inv, n);
}
function modular_division(a: number, b: number, n: number): number {
  if ((n <= 1)) {
    _panic("n must be > 1");
  }
  if ((a <= 0)) {
    _panic("a must be > 0");
  }
  if ((greatest_common_divisor(a, n) != 1)) {
    _panic("gcd(a,n) != 1");
  }
  let eg: number[] = extended_gcd(n, a);
  let s: number = eg[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? eg.length + _mochi_idx : _mochi_idx;})()];
  return mod((b * s), n);
}
function modular_division2(a: number, b: number, n: number): number {
  let s: number = invert_modulo(a, n);
  return mod((b * s), n);
}
function tests() {
  if ((modular_division(4, 8, 5) != 2)) {
    _panic("md1");
  }
  if ((modular_division(3, 8, 5) != 1)) {
    _panic("md2");
  }
  if ((modular_division(4, 11, 5) != 4)) {
    _panic("md3");
  }
  if ((modular_division2(4, 8, 5) != 2)) {
    _panic("md21");
  }
  if ((modular_division2(3, 8, 5) != 1)) {
    _panic("md22");
  }
  if ((modular_division2(4, 11, 5) != 4)) {
    _panic("md23");
  }
  if ((invert_modulo(2, 5) != 3)) {
    _panic("inv");
  }
  let eg: number[] = extended_gcd(10, 6);
  if ((((eg[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? eg.length + _mochi_idx : _mochi_idx;})()] != 2) || (eg[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? eg.length + _mochi_idx : _mochi_idx;})()] != -1)) || (eg[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? eg.length + _mochi_idx : _mochi_idx;})()] != 2))) {
    _panic("eg");
  }
  let eu: number[] = extended_euclid(10, 6);
  if (((eu[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? eu.length + _mochi_idx : _mochi_idx;})()] != -1) || (eu[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? eu.length + _mochi_idx : _mochi_idx;})()] != 2))) {
    _panic("eu");
  }
  if ((greatest_common_divisor(121, 11) != 11)) {
    _panic("gcd");
  }
}
function main() {
  tests();
  console.log(_str(modular_division(4, 8, 5)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

