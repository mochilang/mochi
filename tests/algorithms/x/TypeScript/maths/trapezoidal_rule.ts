// Generated by Mochi v0.10.59 on 2025-08-07 00:24:44 GMT+7

function f(x: number): number {
  return (x * x);
}
function make_points(a: number, b: number, h: number): number[] {
  let xs: number[] = [];
  let x: number = (a + h);
  while ((x <= (b - h))) {
    xs.push(x);
    x = (x + h);
  }
  return xs;
}
function trapezoidal_rule(boundary: number[], steps: number): number {
  let h: number = ((boundary[(Math.trunc(1)) < 0 ? boundary.length + (Math.trunc(1)) : Math.trunc(1)] - boundary[(Math.trunc(0)) < 0 ? boundary.length + (Math.trunc(0)) : Math.trunc(0)]) / steps);
  let a: number = boundary[(Math.trunc(0)) < 0 ? boundary.length + (Math.trunc(0)) : Math.trunc(0)];
  let b: number = boundary[(Math.trunc(1)) < 0 ? boundary.length + (Math.trunc(1)) : Math.trunc(1)];
  let xs: number[] = make_points(a, b, h);
  let y: number = ((h / 2.0) * f(a));
  let i: number = 0;
  while ((i < _len(xs))) {
    y = (y + (h * f(xs[(i) < 0 ? xs.length + (i) : i])));
    i = (i + 1);
  }
  y = (y + ((h / 2.0) * f(b)));
  return y;
}
let a: number = 0.0;
let b: number = 1.0;
let steps: number = 10.0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let boundary: number[]
let y: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
boundary = [a, b]
y = trapezoidal_rule(boundary, steps)
  console.log(_str(("y = " + _str(y))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

