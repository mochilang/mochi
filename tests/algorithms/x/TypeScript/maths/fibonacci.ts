// Generated by Mochi v0.10.66 on 2025-08-16 14:51:04 GMT+7

function sqrt(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function powf(x: number, n: number): number {
  let res: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    res = (res * x);
    i = (i + 1);
  }
  return res;
}
function roundf(x: number): number {
  if ((x >= 0.0)) {
    return Math.trunc((x + 0.5));
  }
  return Math.trunc((x - 0.5));
}
function fib_iterative(n: number): number[] {
  if ((n < 0)) {
    _panic("n is negative");
  }
  if ((n === 0)) {
    return [0];
  }
  let fib: number[] = [0, 1];
  let i: number = 2;
  while ((i <= n)) {
    fib.push((fib[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? fib.length + _mochi_idx : _mochi_idx;})()] + fib[(()=>{const _mochi_idx = Math.trunc((i - 2)); return _mochi_idx < 0 ? fib.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return fib;
}
function fib_recursive_term(i: number): number {
  if ((i < 0)) {
    _panic("n is negative");
  }
  if ((i < 2)) {
    return i;
  }
  return (fib_recursive_term((i - 1)) + fib_recursive_term((i - 2)));
}
function fib_recursive(n: number): number[] {
  if ((n < 0)) {
    _panic("n is negative");
  }
  let res: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    res.push(fib_recursive_term(i));
    i = (i + 1);
  }
  return res;
}
let fib_cache_global: Record<number, number> = {};
function fib_recursive_cached_term(i: number): number {
  if ((i < 0)) {
    _panic("n is negative");
  }
  if ((i < 2)) {
    return i;
  }
  if ((i in fib_cache_global)) {
    return fib_cache_global[i];
  }
  let val: bigint = (fib_recursive_cached_term((i - 1)) + fib_recursive_cached_term((i - 2)));
  fib_cache_global[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? fib_cache_global.length + _mochi_idx : _mochi_idx;})()] = val;
  return val;
}
function fib_recursive_cached(n: number): number[] {
  if ((n < 0)) {
    _panic("n is negative");
  }
  let res: number[] = [];
  let j: number = 0;
  while ((j <= n)) {
    res.push(fib_recursive_cached_term(j));
    j = (j + 1);
  }
  return res;
}
let fib_memo_cache: Record<number, number> = {[0]: 0, [1]: 1, [2]: 1};
function fib_memoization_term(num: number): number {
  if ((num in fib_memo_cache)) {
    return fib_memo_cache[num];
  }
  let value = (fib_memoization_term((num - 1)) + fib_memoization_term((num - 2)));
  fib_memo_cache[(()=>{const _mochi_idx = num; return _mochi_idx < 0 ? fib_memo_cache.length + _mochi_idx : _mochi_idx;})()] = value;
  return value;
}
function fib_memoization(n: number): number[] {
  if ((n < 0)) {
    _panic("n is negative");
  }
  let out: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    out.push(fib_memoization_term(i));
    i = (i + 1);
  }
  return out;
}
function fib_binet(n: number): number[] {
  if ((n < 0)) {
    _panic("n is negative");
  }
  if ((n >= 1475)) {
    _panic("n is too large");
  }
  let sqrt5: number = sqrt(5.0);
  let phi: number = ((1.0 + sqrt5) / 2.0);
  let res: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    let val: number = roundf((powf(phi, i) / sqrt5));
    res.push(val);
    i = (i + 1);
  }
  return res;
}
function matrix_mul(a: number[][], b: number[][]): number[][] {
  let a00: bigint = ((a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
  let a01: bigint = ((a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
  let a10: bigint = ((a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
  let a11: bigint = ((a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]) + (a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
  return [[a00, a01], [a10, a11]];
}
function matrix_pow(m: number[][], power: number): number[][] {
  if ((power < 0)) {
    _panic("power is negative");
  }
  let result: number[][] = [[1, 0], [0, 1]];
  let base: number[][] = m;
  let p: number = power;
  while ((p > 0)) {
    if (((p % 2) === 1)) {
      result = matrix_mul(result, base);
    }
    base = matrix_mul(base, base);
    p = Math.trunc(Math.trunc(p / 2));
  }
  return result;
}
function fib_matrix(n: number): number {
  if ((n < 0)) {
    _panic("n is negative");
  }
  if ((n === 0)) {
    return 0;
  }
  let m: number[][] = [[1, 1], [1, 0]];
  let res: number[][] = matrix_pow(m, (n - 1));
  return res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
function run_tests(): number {
  let expected: number[] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];
  let it: number[] = fib_iterative(10);
  let rec: number[] = fib_recursive(10);
  let cache: number[] = fib_recursive_cached(10);
  let memo: number[] = fib_memoization(10);
  let bin: number[] = fib_binet(10);
  let m: number = fib_matrix(10);
  if (!_equal(it, expected)) {
    _panic("iterative failed");
  }
  if (!_equal(rec, expected)) {
    _panic("recursive failed");
  }
  if (!_equal(cache, expected)) {
    _panic("cached failed");
  }
  if (!_equal(memo, expected)) {
    _panic("memoization failed");
  }
  if (!_equal(bin, expected)) {
    _panic("binet failed");
  }
  if ((m !== 55)) {
    _panic("matrix failed");
  }
  return m;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === 'number' && typeof b === 'number') {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(run_tests()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

