// Generated by Mochi v0.10.59 on 2025-08-07 00:18:15 GMT+7

export interface PollardResult { factor: number; ok: boolean }
function gcd(a: number, b: number): number {
  let x: number = ((a < 0) ? -a : a);
  let y: number = ((b < 0) ? -b : b);
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  return x;
}
function rand_fn(value: number, step: number, modulus: number): number {
  return (((value * value) + step) % modulus);
}
function pollard_rho(num: number, seed: number, step: number, attempts: number): PollardResult {
  if ((num < 2)) {
    _panic("The input value cannot be less than 2");
  }
  if (((num > 2) && ((num % 2) == 0))) {
    return {"factor": 2, "ok": true};
  }
  let s: number = seed;
  let st: number = step;
  let i: number = 0;
  while ((i < attempts)) {
    let tortoise: number = s;
    let hare: number = s;
    while (true) {
      tortoise = rand_fn(tortoise, st, num);
      hare = rand_fn(hare, st, num);
      hare = rand_fn(hare, st, num);
      let divisor = gcd((hare - tortoise), num);
      if ((divisor == 1)) {
        continue
      } else {
        if ((divisor == num)) {
          break
        } else {
          return {"factor": divisor, "ok": true};
        }
      }
    }
    s = hare;
    st = (st + 1);
    i = (i + 1);
  }
  return {"factor": 0, "ok": false};
}
function test_pollard_rho() {
  let r1: PollardResult = pollard_rho(8051, 2, 1, 5);
  if ((!r1.ok || ((r1.factor != 83) && (r1.factor != 97)))) {
    _panic("test1 failed");
  }
  let r2: PollardResult = pollard_rho(10403, 2, 1, 5);
  if ((!r2.ok || ((r2.factor != 101) && (r2.factor != 103)))) {
    _panic("test2 failed");
  }
  let r3: PollardResult = pollard_rho(100, 2, 1, 3);
  if ((!r3.ok || (r3.factor != 2))) {
    _panic("test3 failed");
  }
  let r4: PollardResult = pollard_rho(17, 2, 1, 3);
  if (r4.ok) {
    _panic("test4 failed");
  }
  let r5: PollardResult = pollard_rho(((17 * 17) * 17), 2, 1, 3);
  if ((!r5.ok || (r5.factor != 17))) {
    _panic("test5 failed");
  }
  let r6: PollardResult = pollard_rho(((17 * 17) * 17), 2, 1, 1);
  if (r6.ok) {
    _panic("test6 failed");
  }
  let r7: PollardResult = pollard_rho(((3 * 5) * 7), 2, 1, 3);
  if ((!r7.ok || (r7.factor != 21))) {
    _panic("test7 failed");
  }
}
function main() {
  test_pollard_rho();
  let a: PollardResult = pollard_rho(100, 2, 1, 3);
  if (a.ok) {
    console.log(_str(_str(a.factor)));
  } else {
    console.log(_str("None"));
  }
  let b: PollardResult = pollard_rho(17, 2, 1, 3);
  if (b.ok) {
    console.log(_str(_str(b.factor)));
  } else {
    console.log(_str("None"));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

