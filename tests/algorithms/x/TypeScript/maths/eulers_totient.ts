// Generated by Mochi v0.10.59 on 2025-08-07 00:17:13 GMT+7

function totient(n: number): number[] {
  let is_prime: boolean[] = [];
  let totients: number[] = [];
  let primes: number[] = [];
  let i: number = 0;
  while ((i <= n)) {
    is_prime.push(true);
    totients.push((i - 1));
    i = (i + 1);
  }
  i = 2;
  while ((i <= n)) {
    if (is_prime[(i) < 0 ? is_prime.length + (i) : i]) {
      primes.push(i);
    }
    let j: number = 0;
    while ((j < _len(primes))) {
      let p: number = primes[(j) < 0 ? primes.length + (j) : j];
      if (((i * p) >= n)) {
        break
      }
      is_prime[((i * p)) < 0 ? is_prime.length + ((i * p)) : (i * p)] = false;
      if (((i % p) == 0)) {
        totients[((i * p)) < 0 ? totients.length + ((i * p)) : (i * p)] = (totients[(i) < 0 ? totients.length + (i) : i] * p);
        break
      }
      totients[((i * p)) < 0 ? totients.length + ((i * p)) : (i * p)] = (totients[(i) < 0 ? totients.length + (i) : i] * (p - 1));
      j = (j + 1);
    }
    i = (i + 1);
  }
  return totients;
}
function test_totient() {
  let expected: number[] = [-1, 0, 1, 2, 2, 4, 2, 6, 4, 6, 9];
  let res: number[] = totient(10);
  let idx: number = 0;
  while ((idx < _len(expected))) {
    if ((res[(idx) < 0 ? res.length + (idx) : idx] != expected[(idx) < 0 ? expected.length + (idx) : idx])) {
      _panic(("totient mismatch at " + _str(idx)));
    }
    idx = (idx + 1);
  }
}
function main() {
  test_totient();
  let n: number = 10;
  let res: number[] = totient(n);
  let i: number = 1;
  while ((i < n)) {
    console.log(_str((((_str(i) + " has ") + _str(res[(i) < 0 ? res.length + (i) : i])) + " relative primes.")));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

