// Generated by Mochi v0.10.62 on 2025-08-09 10:36:37 GMT+7

let PI: number = 3.141592653589793;
export interface Angle { degrees: number }
function make_angle(deg: number): Angle {
  if (((deg < 0.0) || (deg > 360.0))) {
    _panic("degrees must be between 0 and 360");
  }
  return {"degrees": deg};
}
export interface Side { length: number; angle: Angle; next: number }
function make_side(length: number, angle: Angle): Side {
  if ((length <= 0.0)) {
    _panic("length must be positive");
  }
  return {length, angle, "next": -1};
}
export interface Ellipse { major: number; minor: number }
function ellipse_area(e: Ellipse): number {
  return ((PI * e.major) * e.minor);
}
function ellipse_perimeter(e: Ellipse): number {
  return (PI * (e.major + e.minor));
}
export interface Circle { radius: number }
function circle_area(c: Circle): number {
  let e: Ellipse = {"major": c.radius, "minor": c.radius};
  let area: number = ellipse_area(e);
  return area;
}
function circle_perimeter(c: Circle): number {
  let e: Ellipse = {"major": c.radius, "minor": c.radius};
  let per: number = ellipse_perimeter(e);
  return per;
}
function circle_diameter(c: Circle): number {
  return (c.radius * 2.0);
}
function circle_max_parts(num_cuts: number): number {
  if ((num_cuts < 0.0)) {
    _panic("num_cuts must be positive");
  }
  return (((num_cuts + 2.0) + (num_cuts * num_cuts)) * 0.5);
}
export interface Polygon { sides: Side[] }
function make_polygon(): Polygon {
  let s: Side[] = [];
  return {"sides": s};
}
function polygon_add_side(p: Polygon, s: Side) {
  p.sides.push(s);
}
function polygon_get_side(p: Polygon, index: number): Side {
  return p.sides[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? p.sides.length + _mochi_idx : _mochi_idx;})()];
}
function polygon_set_side(p: Polygon, index: number, s: Side) {
  let tmp: Side[] = p.sides;
  tmp[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? tmp.length + _mochi_idx : _mochi_idx;})()] = s;
  p.sides = tmp;
}
export interface Rectangle { short_side: Side; long_side: Side; poly: Polygon }
function make_rectangle(short_len: number, long_len: number): Rectangle {
  if (((short_len <= 0.0) || (long_len <= 0.0))) {
    _panic("length must be positive");
  }
  let short: Side = make_side(short_len, make_angle(90.0));
  let long: Side = make_side(long_len, make_angle(90.0));
  let p: Polygon = make_polygon();
  polygon_add_side(p, short);
  polygon_add_side(p, long);
  return {"short_side": short, "long_side": long, "poly": p};
}
function rectangle_perimeter(r: Rectangle): number {
  return ((r.short_side.length + r.long_side.length) * 2.0);
}
function rectangle_area(r: Rectangle): number {
  return (r.short_side.length * r.long_side.length);
}
export interface Square { side: Side; rect: Rectangle }
function make_square(side_len: number): Square {
  let rect: Rectangle = make_rectangle(side_len, side_len);
  return {"side": rect.short_side, rect};
}
function square_perimeter(s: Square): number {
  let p: number = rectangle_perimeter(s.rect);
  return p;
}
function square_area(s: Square): number {
  let a: number = rectangle_area(s.rect);
  return a;
}
function main() {
  let a: Angle = make_angle(90.0);
  console.log(_str(a.degrees));
  let s: Side = make_side(5.0, a);
  console.log(_str(s.length));
  let e: Ellipse = {"major": 5.0, "minor": 10.0};
  console.log(_str(ellipse_area(e)));
  console.log(_str(ellipse_perimeter(e)));
  let c: Circle = {"radius": 5.0};
  console.log(_str(circle_area(c)));
  console.log(_str(circle_perimeter(c)));
  console.log(_str(circle_diameter(c)));
  console.log(_str(circle_max_parts(7.0)));
  let r: Rectangle = make_rectangle(5.0, 10.0);
  console.log(_str(rectangle_perimeter(r)));
  console.log(_str(rectangle_area(r)));
  let q: Square = make_square(5.0);
  console.log(_str(square_perimeter(q)));
  console.log(_str(square_area(q)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

