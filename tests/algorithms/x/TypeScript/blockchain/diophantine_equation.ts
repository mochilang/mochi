// Generated by Mochi v0.10.59 on 2025-08-06 19:19:56 GMT+7

function gcd(a: number, b: number): number {
  let x: number = ((a < 0) ? -a : a);
  let y: number = ((b < 0) ? -b : b);
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  return x;
}
function extended_gcd(a: number, b: number): number[] {
  if ((b == 0)) {
    return [a, 1, 0];
  }
  let res: number[] = extended_gcd(b, (a % b));
  let d: number = res[Math.trunc(0)];
  let p: number = res[Math.trunc(1)];
  let q: number = res[Math.trunc(2)];
  let x: number = q;
  let y: number = (p - (q * Math.trunc(a / b)));
  return [d, x, y];
}
function diophantine(a: number, b: number, c: number): number[] {
  let d: number = gcd(a, b);
  if (((c % d) != 0)) {
    panic("No solution");
  }
  let eg: number[] = extended_gcd(a, b);
  let r: number = Math.trunc(c / d);
  let x: number = (eg[Math.trunc(1)] * r);
  let y: number = (eg[Math.trunc(2)] * r);
  return [x, y];
}
function diophantine_all_soln(a: number, b: number, c: number, n: number): number[][] {
  let base: number[] = diophantine(a, b, c);
  let x0: number = base[Math.trunc(0)];
  let y0: number = base[Math.trunc(1)];
  let d: number = gcd(a, b);
  let p: number = Math.trunc(a / d);
  let q: number = Math.trunc(b / d);
  let sols: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let x: number = (x0 + (i * q));
    let y: number = (y0 - (i * p));
    sols.push([x, y]);
    i = (i + 1);
  }
  return sols;
}
let j: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let s1: number[]
let sols: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
s1 = diophantine(10, 6, 14)
  console.log(_str(_str(s1)));
sols = diophantine_all_soln(10, 6, 14, 4)
  while ((j < _len(sols))) {
    console.log(_str(_str(sols[j])));
    j = (j + 1);
  }
  console.log(_str(_str(diophantine(391, 299, -69))));
  console.log(_str(_str(extended_gcd(10, 6))));
  console.log(_str(_str(extended_gcd(7, 5))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

