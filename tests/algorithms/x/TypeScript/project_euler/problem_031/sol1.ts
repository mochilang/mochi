// Generated by Mochi v0.10.59 on 2025-08-07 08:23:48 GMT+7

function one_pence(): number {
  return 1;
}
function two_pence(x: number): number {
  if ((x < 0)) {
    return 0;
  }
  return (two_pence((x - 2)) + one_pence());
}
function five_pence(x: number): number {
  if ((x < 0)) {
    return 0;
  }
  return (five_pence((x - 5)) + two_pence(x));
}
function ten_pence(x: number): number {
  if ((x < 0)) {
    return 0;
  }
  return (ten_pence((x - 10)) + five_pence(x));
}
function twenty_pence(x: number): number {
  if ((x < 0)) {
    return 0;
  }
  return (twenty_pence((x - 20)) + ten_pence(x));
}
function fifty_pence(x: number): number {
  if ((x < 0)) {
    return 0;
  }
  return (fifty_pence((x - 50)) + twenty_pence(x));
}
function one_pound(x: number): number {
  if ((x < 0)) {
    return 0;
  }
  return (one_pound((x - 100)) + fifty_pence(x));
}
function two_pound(x: number): number {
  if ((x < 0)) {
    return 0;
  }
  return (two_pound((x - 200)) + one_pound(x));
}
function solution(n: number): number {
  return two_pound(n);
}
function main() {
  let n: number = Math.trunc(_input());
  console.log(_str(_str(solution(n))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

