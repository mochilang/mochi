// Generated by Mochi v0.10.70 on 2025-08-22 15:38:31 GMT+7

function solution(m: number): number {
  let memo: number[][] = [];
  let i: number = 0;
  while ((i <= m)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < m)) {
      row.push(0);
      j = (j + 1);
    }
    memo.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i <= m)) {
    memo[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 1;
    i = (i + 1);
  }
  let n: number = 0;
  while ((n <= m)) {
    let k: number = 1;
    while ((k < m)) {
      memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((k - 1)); return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      if ((n > k)) {
        memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + memo[(()=>{const _mochi_idx = Math.trunc(((n - k) - 1)); return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = Math.trunc(((n - k) - 1)); return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      }
      k = (k + 1);
    }
    n = (n + 1);
  }
  return (memo[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((m - 1)); return _mochi_idx < 0 ? memo[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? memo.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - 1);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution(100)));
  console.log(_str(solution(50)));
  console.log(_str(solution(30)));
  console.log(_str(solution(10)));
  console.log(_str(solution(5)));
  console.log(_str(solution(3)));
  console.log(_str(solution(2)));
  console.log(_str(solution(1)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

