// Generated by Mochi v0.10.70 on 2025-08-22 15:38:08 GMT+7

function solution(limit: number): number {
  let phi: number[] = [];
  let i: number = 0;
  while ((i <= limit)) {
    phi.push(i);
    i = (i + 1);
  }
  let n: number = 2;
  while ((n <= limit)) {
    if ((phi[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? phi.length + _mochi_idx : _mochi_idx;})()] === n)) {
      let k: number = n;
      while ((k <= limit)) {
        phi[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? phi.length + _mochi_idx : _mochi_idx;})()] = (phi[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? phi.length + _mochi_idx : _mochi_idx;})()] - Math.trunc(phi[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? phi.length + _mochi_idx : _mochi_idx;})()] / n));
        k = (k + n);
      }
    }
    n = (n + 1);
  }
  let total: number = 0;
  let m: number = 2;
  while ((m <= limit)) {
    total = (total + phi[(()=>{const _mochi_idx = m; return _mochi_idx < 0 ? phi.length + _mochi_idx : _mochi_idx;})()]);
    m = (m + 1);
  }
  return total;
}
function main() {
  console.log(_str(solution(8)));
  console.log(_str(solution(1000)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

