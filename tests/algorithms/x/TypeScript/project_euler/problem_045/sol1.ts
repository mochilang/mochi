// Generated by Mochi v0.10.59 on 2025-08-07 08:24:06 GMT+7

function to_float(x: number): number {
  return (x * 1.0);
}
function sqrt(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function floor(x: number): number {
  let n: number = 0;
  let y: number = x;
  while ((y >= 1.0)) {
    y = (y - 1.0);
    n = (n + 1);
  }
  return n;
}
function hexagonal_num(n: number): number {
  return (n * ((2 * n) - 1));
}
function is_pentagonal(n: number): boolean {
  let root: number = sqrt((1.0 + (24.0 * to_float(n))));
  let val: number = ((1.0 + root) / 6.0);
  return (val == to_float(floor(val)));
}
function solution(start: number): number {
  let idx: number = start;
  let num: number = hexagonal_num(idx);
  while (!is_pentagonal(num)) {
    idx = (idx + 1);
    num = hexagonal_num(idx);
  }
  return num;
}
function test_hexagonal_num() {
  if ((hexagonal_num(143) != 40755)) {
    _panic("hexagonal_num(143) failed");
  }
  if ((hexagonal_num(21) != 861)) {
    _panic("hexagonal_num(21) failed");
  }
  if ((hexagonal_num(10) != 190)) {
    _panic("hexagonal_num(10) failed");
  }
}
function test_is_pentagonal() {
  if (!is_pentagonal(330)) {
    _panic("330 should be pentagonal");
  }
  if (is_pentagonal(7683)) {
    _panic("7683 should not be pentagonal");
  }
  if (!is_pentagonal(2380)) {
    _panic("2380 should be pentagonal");
  }
}
function test_solution() {
  if ((solution(144) != 1533776805)) {
    _panic("solution failed");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  test_hexagonal_num();
  test_is_pentagonal();
  test_solution();
  console.log(_str((_str(solution(144)) + " = ")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

