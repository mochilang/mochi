// Generated by Mochi v0.10.59 on 2025-08-07 08:24:22 GMT+7

function xor(a: number, b: number): number {
  let res: number = 0;
  let bit: number = 1;
  let x: number = a;
  let y: number = b;
  while (((x > 0) || (y > 0))) {
    let abit: number = (x % 2);
    let bbit: number = (y % 2);
    if ((abit != bbit)) {
      res = (res + bit);
    }
    x = Math.trunc(x / 2);
    y = Math.trunc(y / 2);
    bit = (bit * 2);
  }
  return res;
}
let ascii_chars: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
function chr(code: number): string {
  if ((code == 10)) {
    return "\n";
  }
  if ((code == 13)) {
    return "\r";
  }
  if ((code == 9)) {
    return "\t";
  }
  if (((code >= 32) && (code < 127))) {
    return ascii_chars.slice((code - 32), (code - 31));
  }
  return "";
}
function ord(ch: string): number {
  if ((ch == "\n")) {
    return 10;
  }
  if ((ch == "\r")) {
    return 13;
  }
  if ((ch == "\t")) {
    return 9;
  }
  let i: number = 0;
  while ((i < _len(ascii_chars))) {
    if ((ascii_chars.slice(i, (i + 1)) == ch)) {
      return (32 + i);
    }
    i = (i + 1);
  }
  return 0;
}
function is_valid_ascii(code: number): boolean {
  if (((code >= 32) && (code <= 126))) {
    return true;
  }
  if ((((code == 9) || (code == 10)) || (code == 13))) {
    return true;
  }
  return false;
}
let LOWERCASE_INTS: number[] = [];
let i: number = 97;
let COMMON_WORDS: string[] = ["the", "be", "to", "of", "and", "in", "that", "have"];
function try_key(ciphertext: number[], key: number[]): string {
  let decoded: string = "";
  let i: number = 0;
  let klen: number = _len(key);
  while ((i < _len(ciphertext))) {
    let decodedchar: number = xor(ciphertext[(i) < 0 ? ciphertext.length + (i) : i], key[(Math.trunc((i % klen))) < 0 ? key.length + (Math.trunc((i % klen))) : Math.trunc((i % klen))]);
    if (!is_valid_ascii(decodedchar)) {
      return null;
    }
    decoded = (decoded + chr(decodedchar));
    i = (i + 1);
  }
  return decoded;
}
function filter_valid_chars(ciphertext: number[]): string[] {
  let possibles: string[] = [];
  let i: number = 0;
  while ((i < _len(LOWERCASE_INTS))) {
    let j: number = 0;
    while ((j < _len(LOWERCASE_INTS))) {
      let k: number = 0;
      while ((k < _len(LOWERCASE_INTS))) {
        let key: number[] = [LOWERCASE_INTS[(i) < 0 ? LOWERCASE_INTS.length + (i) : i], LOWERCASE_INTS[(j) < 0 ? LOWERCASE_INTS.length + (j) : j], LOWERCASE_INTS[(k) < 0 ? LOWERCASE_INTS.length + (k) : k]];
        let decoded: string = try_key(ciphertext, key);
        if ((decoded != null)) {
          possibles.push(decoded);
        }
        k = (k + 1);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return possibles;
}
function contains(s: string, sub: string): boolean {
  let n: number = _len(s);
  let m: number = _len(sub);
  if ((m == 0)) {
    return true;
  }
  let i: number = 0;
  while ((i <= (n - m))) {
    let j: number = 0;
    let is_match: boolean = true;
    while ((j < m)) {
      if ((s[(Math.trunc((i + j))) < 0 ? s.length + (Math.trunc((i + j))) : Math.trunc((i + j))] != sub[(j) < 0 ? sub.length + (j) : j])) {
        is_match = false;
        break
      }
      j = (j + 1);
    }
    if (is_match) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function filter_common_word(possibles: string[], common_word: string): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(possibles))) {
    let p: string = possibles[(i) < 0 ? possibles.length + (i) : i];
    if (contains(p.toLowerCase(), common_word)) {
      res.push(p);
    }
    i = (i + 1);
  }
  return res;
}
function solution(ciphertext: number[]): number {
  let possibles: string[] = filter_valid_chars(ciphertext);
  let i: number = 0;
  while ((i < _len(COMMON_WORDS))) {
    let word: string = COMMON_WORDS[(i) < 0 ? COMMON_WORDS.length + (i) : i];
    possibles = filter_common_word(possibles, word);
    if ((_len(possibles) == 1)) {
      break
    }
    i = (i + 1);
  }
  let decoded_text: string = possibles[(Math.trunc(0)) < 0 ? possibles.length + (Math.trunc(0)) : Math.trunc(0)];
  let sum: number = 0;
  let j: number = 0;
  while ((j < _len(decoded_text))) {
    sum = (sum + ord((decoded_text).substring(j, (j + 1))));
    j = (j + 1);
  }
  return sum;
}
let ciphertext: number[] = [17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  LOWERCASE_INTS = new Int32Array(122 + 1).fill(i);
  console.log(_str(_str(solution(ciphertext))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

