// Generated by Mochi v0.10.59 on 2025-08-07 08:24:10 GMT+7

function is_prime(_number: number): boolean {
  if (((1 < _number) && (_number < 4))) {
    return true;
  }
  if ((((_number < 2) || ((_number % 2) == 0)) || ((_number % 3) == 0))) {
    return false;
  }
  let i: number = 5;
  while (((i * i) <= _number)) {
    if ((((_number % i) == 0) || ((_number % (i + 2)) == 0))) {
      return false;
    }
    i = (i + 6);
  }
  return true;
}
function search(target: number, arr: number[]): boolean {
  let left: number = 0;
  let right: number = (_len(arr) - 1);
  while ((left <= right)) {
    let middle: number = Math.trunc((left + right) / 2);
    if ((arr[(middle) < 0 ? arr.length + (middle) : middle] == target)) {
      return true;
    }
    if ((arr[(middle) < 0 ? arr.length + (middle) : middle] < target)) {
      left = (middle + 1);
    } else {
      right = (middle - 1);
    }
  }
  return false;
}
function sort_int(xs: number[]): number[] {
  let arr: number[] = xs;
  let i: number = 0;
  while ((i < _len(arr))) {
    let j: number = (i + 1);
    while ((j < _len(arr))) {
      if ((arr[(j) < 0 ? arr.length + (j) : j] < arr[(i) < 0 ? arr.length + (i) : i])) {
        let tmp: number = arr[(i) < 0 ? arr.length + (i) : i];
        arr[(i) < 0 ? arr.length + (i) : i] = arr[(j) < 0 ? arr.length + (j) : j];
        arr[(j) < 0 ? arr.length + (j) : j] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function permutations_of_number(n: number): number[] {
  let s: string = _str(n);
  let d: number[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    d.push(Math.trunc(s[(i) < 0 ? s.length + (i) : i]));
    i = (i + 1);
  }
  let res: number[] = [];
  let a: number = 0;
  while ((a < _len(d))) {
    let b: number = 0;
    while ((b < _len(d))) {
      if ((b != a)) {
        let c: number = 0;
        while ((c < _len(d))) {
          if (((c != a) && (c != b))) {
            let e: number = 0;
            while ((e < _len(d))) {
              if ((((e != a) && (e != b)) && (e != c))) {
                let val: number = ((((d[(a) < 0 ? d.length + (a) : a] * 1000) + (d[(b) < 0 ? d.length + (b) : b] * 100)) + (d[(c) < 0 ? d.length + (c) : c] * 10)) + d[(e) < 0 ? d.length + (e) : e]);
                res.push(val);
              }
              e = (e + 1);
            }
          }
          c = (c + 1);
        }
      }
      b = (b + 1);
    }
    a = (a + 1);
  }
  return res;
}
function abs_int(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
function contains_int(xs: number[], v: number): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] == v)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function solution(): number {
  let prime_list: number[] = [];
  let n: number = 1001;
  while ((n < 10000)) {
    if (is_prime(n)) {
      prime_list.push(n);
    }
    n = (n + 2);
  }
  let candidates: number[][] = [];
  let i: number = 0;
  while ((i < _len(prime_list))) {
    let _number: number = prime_list[(i) < 0 ? prime_list.length + (i) : i];
    let tmp: number[] = [];
    let perms: number[] = permutations_of_number(_number);
    let j: number = 0;
    while ((j < _len(perms))) {
      let prime: number = perms[(j) < 0 ? perms.length + (j) : j];
      if ((((prime % 2) != 0) && search(prime, prime_list))) {
        tmp.push(prime);
      }
      j = (j + 1);
    }
    tmp = sort_int(tmp);
    if ((_len(tmp) >= 3)) {
      candidates.push(tmp);
    }
    i = (i + 1);
  }
  let passed: number[][] = [];
  i = 0;
  while ((i < _len(candidates))) {
    let candidate: number[] = candidates[(i) < 0 ? candidates.length + (i) : i];
    let found: boolean = false;
    let a: number = 0;
    while ((a < _len(candidate))) {
      let b: number = (a + 1);
      while ((b < _len(candidate))) {
        let c: number = (b + 1);
        while ((c < _len(candidate))) {
          let x: number = candidate[(a) < 0 ? candidate.length + (a) : a];
          let y: number = candidate[(b) < 0 ? candidate.length + (b) : b];
          let z: number = candidate[(c) < 0 ? candidate.length + (c) : c];
          if (((((abs_int((x - y)) == abs_int((y - z))) && (x != y)) && (x != z)) && (y != z))) {
            let triple: number[] = sort_int([x, y, z]);
            passed.push(triple);
            found = true;
            break
          }
          c = (c + 1);
        }
        if (found) {
          break
        }
        b = (b + 1);
      }
      if (found) {
        break
      }
      a = (a + 1);
    }
    i = (i + 1);
  }
  let answer_nums: number[] = [];
  i = 0;
  while ((i < _len(passed))) {
    let seq: number[] = passed[(i) < 0 ? passed.length + (i) : i];
    let val: number = Math.trunc(((_str(seq[(Math.trunc(0)) < 0 ? seq.length + (Math.trunc(0)) : Math.trunc(0)]) + _str(seq[(Math.trunc(1)) < 0 ? seq.length + (Math.trunc(1)) : Math.trunc(1)])) + _str(seq[(Math.trunc(2)) < 0 ? seq.length + (Math.trunc(2)) : Math.trunc(2)])));
    if (!contains_int(answer_nums, val)) {
      answer_nums.push(val);
    }
    i = (i + 1);
  }
  let max_val: number = answer_nums[(Math.trunc(0)) < 0 ? answer_nums.length + (Math.trunc(0)) : Math.trunc(0)];
  i = 1;
  while ((i < _len(answer_nums))) {
    if ((answer_nums[(i) < 0 ? answer_nums.length + (i) : i] > max_val)) {
      max_val = answer_nums[(i) < 0 ? answer_nums.length + (i) : i];
    }
    i = (i + 1);
  }
  return max_val;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

