// Generated by Mochi v0.10.59 on 2025-08-07 08:18:49 GMT+7

function is_palindrome(num: number): boolean {
  let s: string = _str(num);
  let i: number = 0;
  let j: number = (_len(s) - 1);
  while ((i < j)) {
    if ((s.slice(i, (i + 1)) != s.slice(j, (j + 1)))) {
      return false;
    }
    i = (i + 1);
    j = (j - 1);
  }
  return true;
}
function solution(n: number): number {
  let _number: number = (n - 1);
  while ((_number > 9999)) {
    if (is_palindrome(_number)) {
      let divisor: number = 999;
      while ((divisor > 99)) {
        if (((_number % divisor) == 0)) {
          let other: number = Math.trunc(_number / divisor);
          if ((_len(_str(other)) == 3)) {
            return _number;
          }
        }
        divisor = (divisor - 1);
      }
    }
    _number = (_number - 1);
  }
  console.log(_str("That number is larger than our acceptable range."));
  return 0;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("solution() = " + _str(solution(998001)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

