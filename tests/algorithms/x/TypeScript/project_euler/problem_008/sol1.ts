// Generated by Mochi v0.10.59 on 2025-08-07 08:19:06 GMT+7

let N: string = ((((((((((((((((((("73167176531330624919225119674426574742355349194934" + "96983520312774506326239578318016984801869478851843") + "85861560789112949495459501737958331952853208805511") + "12540698747158523863050715693290963295227443043557") + "66896648950445244523161731856403098711121722383113") + "62229893423380308135336276614282806444486645238749") + "30358907296290491560440772390713810515859307960866") + "70172427121883998797908792274921901699720888093776") + "65727333001053367881220235421809751254540594752243") + "52584907711670556013604839586446706324415722155397") + "53697817977846174064955149290862569321978468622482") + "83972241375657056057490261407972968652414535100474") + "82166370484403199890008895243450658541227588666881") + "16427171479924442928230863465674813919123162824586") + "17866458359124566529476545682848912883142607690042") + "24219022671055626321111109370544217506941658960408") + "07198403850962455444362981230987879927244284909188") + "84580156166097919133875499200524063689912560717606") + "05886116467109405077541002256983155200055935729725") + "71636269561882670428252483600823257530420752963450");
function solution(n: string): number {
  let largest_product: number = 0;
  let i: number = 0;
  while ((i <= (_len(n) - 13))) {
    let product: number = 1;
    let j: number = 0;
    while ((j < 13)) {
      product = (product * Math.trunc((n).substring((i + j), ((i + j) + 1))));
      j = (j + 1);
    }
    if ((product > largest_product)) {
      largest_product = product;
    }
    i = (i + 1);
  }
  return largest_product;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("solution() = " + _str(solution(N)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

