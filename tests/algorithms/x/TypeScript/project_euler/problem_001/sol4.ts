// Generated by Mochi v0.10.69 on 2025-08-19 16:45:40 GMT+7

function contains(xs: number[], value: number): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === value)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function solution(n: number): number {
  let zmulti: number[] = [];
  let xmulti: number[] = [];
  let temp: number = 1;
  while (true) {
    let result: bigint = (3 * temp);
    if ((result < n)) {
      zmulti.push(result);
      temp = (temp + 1);
    } else {
      break
    }
  }
  temp = 1;
  while (true) {
    let result: bigint = (5 * temp);
    if ((result < n)) {
      xmulti.push(result);
      temp = (temp + 1);
    } else {
      break
    }
  }
  let collection: number[] = [];
  let i: number = 0;
  while ((i < _len(zmulti))) {
    let v: number = zmulti[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? zmulti.length + _mochi_idx : _mochi_idx;})()];
    if (!contains(collection, v)) {
      collection.push(v);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(xmulti))) {
    let v: number = xmulti[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xmulti.length + _mochi_idx : _mochi_idx;})()];
    if (!contains(collection, v)) {
      collection.push(v);
    }
    i = (i + 1);
  }
  let total: number = 0;
  i = 0;
  while ((i < _len(collection))) {
    total = (total + collection[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? collection.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return total;
}
function test_solution() {
  if ((solution(3) !== 0)) {
    _panic("solution(3) failed");
  }
  if ((solution(4) !== 3)) {
    _panic("solution(4) failed");
  }
  if ((solution(10) !== 23)) {
    _panic("solution(10) failed");
  }
  if ((solution(600) !== 83700)) {
    _panic("solution(600) failed");
  }
}
function main() {
  test_solution();
  console.log(_str(("solution() = " + _str(solution(1000)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

