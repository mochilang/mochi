// Generated by Mochi v0.10.66 on 2025-08-16 12:46:14 GMT+7

function range_desc(start: number, end: number): number[] {
  let res: number[] = [];
  let i: number = start;
  while ((i >= end)) {
    res.push(i);
    i = (i - 1);
  }
  return res;
}
function range_asc(start: number, end: number): number[] {
  let res: number[] = [];
  let i: number = start;
  while ((i <= end)) {
    res.push(i);
    i = (i + 1);
  }
  return res;
}
function concat_lists(a: number[], b: number[]): number[] {
  let res: number[] = a;
  let i: number = 0;
  while ((i < _len(b))) {
    res.push(b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function swap(xs: number[], i: number, j: number): number[] {
  let res: number[] = [];
  let k: number = 0;
  while ((k < _len(xs))) {
    if ((k === i)) {
      res.push(xs[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    } else {
      if ((k === j)) {
        res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
      } else {
        res.push(xs[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
      }
    }
    k = (k + 1);
  }
  return res;
}
function generate_gon_ring(gon_side: number, perm: number[]): number[] {
  let result: number[] = [];
  result.push(perm[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? perm.length + _mochi_idx : _mochi_idx;})()]);
  result.push(perm[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? perm.length + _mochi_idx : _mochi_idx;})()]);
  result.push(perm[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? perm.length + _mochi_idx : _mochi_idx;})()]);
  let extended: any[] = [...perm, perm[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? perm.length + _mochi_idx : _mochi_idx;})()]];
  let magic_number: number = ((gon_side < 5) ? 1 : 2);
  let i: number = 1;
  while ((i < (Math.trunc(_len(extended) / 3) + magic_number))) {
    result.push(extended[(()=>{const _mochi_idx = Math.trunc(((2 * i) + 1)); return _mochi_idx < 0 ? extended.length + _mochi_idx : _mochi_idx;})()]);
    result.push(result[(()=>{const _mochi_idx = Math.trunc(((3 * i) - 1)); return _mochi_idx < 0 ? result.length + _mochi_idx : _mochi_idx;})()]);
    result.push(extended[(()=>{const _mochi_idx = Math.trunc(((2 * i) + 2)); return _mochi_idx < 0 ? extended.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return result;
}
function min_outer(numbers: number[]): number {
  let min_val: number = numbers[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()];
  let i: number = 3;
  while ((i < _len(numbers))) {
    if ((numbers[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()] < min_val)) {
      min_val = numbers[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()];
    }
    i = (i + 3);
  }
  return min_val;
}
function is_magic_gon(numbers: number[]): boolean {
  if (((_len(numbers) % 3) !== 0)) {
    return false;
  }
  if ((min_outer(numbers) !== numbers[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()])) {
    return false;
  }
  let total: number = ((numbers[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()] + numbers[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()]) + numbers[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()]);
  let i: number = 3;
  while ((i < _len(numbers))) {
    if ((((numbers[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()] + numbers[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()]) + numbers[(()=>{const _mochi_idx = Math.trunc((i + 2)); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()]) !== total)) {
      return false;
    }
    i = (i + 3);
  }
  return true;
}
function permute_search(nums: number[], start: number, gon_side: number, current_max: string): string {
  if ((start === _len(nums))) {
    let ring: number[] = generate_gon_ring(gon_side, nums);
    if (is_magic_gon(ring)) {
      let s: string = "";
      let k: number = 0;
      while ((k < _len(ring))) {
        s = (s + _str(ring[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? ring.length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      if ((s > current_max)) {
        return s;
      }
    }
    return current_max;
  }
  let res: string = current_max;
  let i: number = start;
  while ((i < _len(nums))) {
    let swapped: number[] = swap(nums, start, i);
    let candidate: string = permute_search(swapped, (start + 1), gon_side, res);
    if ((candidate > res)) {
      res = candidate;
    }
    i = (i + 1);
  }
  return res;
}
function solution(gon_side: number): string {
  if (((gon_side < 3) || (gon_side > 5))) {
    return "";
  }
  let small: number[] = range_desc((gon_side + 1), 1);
  let big: number[] = range_asc((gon_side + 2), (gon_side * 2));
  let numbers: number[] = concat_lists(small, big);
  let max_str: string = permute_search(numbers, 0, gon_side, "");
  return max_str;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution(5)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

