// Generated by Mochi v0.10.59 on 2025-08-07 08:19:16 GMT+7

function largest_product(grid: number[][]): number {
  let n_rows: number = _len(grid);
  let n_cols: number = _len(grid[(Math.trunc(0)) < 0 ? grid.length + (Math.trunc(0)) : Math.trunc(0)]);
  let largest: number = 0;
  let i: number = 0;
  while ((i < n_rows)) {
    let j: number = 0;
    while ((j < n_cols)) {
      if ((j <= (n_cols - 4))) {
        let horz: number = (((grid[(i) < 0 ? grid.length + (i) : i][(j) < 0 ? grid[(i) < 0 ? grid.length + (i) : i].length + (j) : j] * grid[(i) < 0 ? grid.length + (i) : i][(Math.trunc((j + 1))) < 0 ? grid[(i) < 0 ? grid.length + (i) : i].length + (Math.trunc((j + 1))) : Math.trunc((j + 1))]) * grid[(i) < 0 ? grid.length + (i) : i][(Math.trunc((j + 2))) < 0 ? grid[(i) < 0 ? grid.length + (i) : i].length + (Math.trunc((j + 2))) : Math.trunc((j + 2))]) * grid[(i) < 0 ? grid.length + (i) : i][(Math.trunc((j + 3))) < 0 ? grid[(i) < 0 ? grid.length + (i) : i].length + (Math.trunc((j + 3))) : Math.trunc((j + 3))]);
        if ((horz > largest)) {
          largest = horz;
        }
      }
      if ((i <= (n_rows - 4))) {
        let vert: number = (((grid[(i) < 0 ? grid.length + (i) : i][(j) < 0 ? grid[(i) < 0 ? grid.length + (i) : i].length + (j) : j] * grid[(Math.trunc((i + 1))) < 0 ? grid.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))][(j) < 0 ? grid[(Math.trunc((i + 1))) < 0 ? grid.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))].length + (j) : j]) * grid[(Math.trunc((i + 2))) < 0 ? grid.length + (Math.trunc((i + 2))) : Math.trunc((i + 2))][(j) < 0 ? grid[(Math.trunc((i + 2))) < 0 ? grid.length + (Math.trunc((i + 2))) : Math.trunc((i + 2))].length + (j) : j]) * grid[(Math.trunc((i + 3))) < 0 ? grid.length + (Math.trunc((i + 3))) : Math.trunc((i + 3))][(j) < 0 ? grid[(Math.trunc((i + 3))) < 0 ? grid.length + (Math.trunc((i + 3))) : Math.trunc((i + 3))].length + (j) : j]);
        if ((vert > largest)) {
          largest = vert;
        }
        if ((j <= (n_cols - 4))) {
          let lr: number = (((grid[(i) < 0 ? grid.length + (i) : i][(j) < 0 ? grid[(i) < 0 ? grid.length + (i) : i].length + (j) : j] * grid[(Math.trunc((i + 1))) < 0 ? grid.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))][(Math.trunc((j + 1))) < 0 ? grid[(Math.trunc((i + 1))) < 0 ? grid.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))].length + (Math.trunc((j + 1))) : Math.trunc((j + 1))]) * grid[(Math.trunc((i + 2))) < 0 ? grid.length + (Math.trunc((i + 2))) : Math.trunc((i + 2))][(Math.trunc((j + 2))) < 0 ? grid[(Math.trunc((i + 2))) < 0 ? grid.length + (Math.trunc((i + 2))) : Math.trunc((i + 2))].length + (Math.trunc((j + 2))) : Math.trunc((j + 2))]) * grid[(Math.trunc((i + 3))) < 0 ? grid.length + (Math.trunc((i + 3))) : Math.trunc((i + 3))][(Math.trunc((j + 3))) < 0 ? grid[(Math.trunc((i + 3))) < 0 ? grid.length + (Math.trunc((i + 3))) : Math.trunc((i + 3))].length + (Math.trunc((j + 3))) : Math.trunc((j + 3))]);
          if ((lr > largest)) {
            largest = lr;
          }
        }
        if ((j >= 3)) {
          let rl: number = (((grid[(i) < 0 ? grid.length + (i) : i][(j) < 0 ? grid[(i) < 0 ? grid.length + (i) : i].length + (j) : j] * grid[(Math.trunc((i + 1))) < 0 ? grid.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))][(Math.trunc((j - 1))) < 0 ? grid[(Math.trunc((i + 1))) < 0 ? grid.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))].length + (Math.trunc((j - 1))) : Math.trunc((j - 1))]) * grid[(Math.trunc((i + 2))) < 0 ? grid.length + (Math.trunc((i + 2))) : Math.trunc((i + 2))][(Math.trunc((j - 2))) < 0 ? grid[(Math.trunc((i + 2))) < 0 ? grid.length + (Math.trunc((i + 2))) : Math.trunc((i + 2))].length + (Math.trunc((j - 2))) : Math.trunc((j - 2))]) * grid[(Math.trunc((i + 3))) < 0 ? grid.length + (Math.trunc((i + 3))) : Math.trunc((i + 3))][(Math.trunc((j - 3))) < 0 ? grid[(Math.trunc((i + 3))) < 0 ? grid.length + (Math.trunc((i + 3))) : Math.trunc((i + 3))].length + (Math.trunc((j - 3))) : Math.trunc((j - 3))]);
          if ((rl > largest)) {
            largest = rl;
          }
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return largest;
}
function main() {
  let grid: number[][] = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8], [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0], [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65], [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91], [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80], [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50], [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70], [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21], [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72], [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95], [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92], [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57], [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58], [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40], [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66], [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69], [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36], [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16], [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54], [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]];
  let ans: number = largest_product(grid);
  console.log(_str(_str(ans)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

