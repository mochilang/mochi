// Generated by Mochi v0.10.59 on 2025-08-07 08:20:26 GMT+7

let collatz_cache: Record<number, number> = {[1]: 1};
function collatz_length(n: number): number {
  let num: number = n;
  let sequence: number[] = [];
  while (!(num in collatz_cache)) {
    sequence.push(num);
    if (((num % 2) == 0)) {
      num = Math.trunc(Math.trunc(num / 2));
    } else {
      num = ((3 * num) + 1);
    }
  }
  let length: number = collatz_cache[(num) < 0 ? collatz_cache.length + (num) : num];
  let i: number = (_len(sequence) - 1);
  while ((i >= 0)) {
    length = (length + 1);
    collatz_cache[(sequence[(i) < 0 ? sequence.length + (i) : i]) < 0 ? collatz_cache.length + (sequence[(i) < 0 ? sequence.length + (i) : i]) : sequence[(i) < 0 ? sequence.length + (i) : i]] = length;
    i = (i - 1);
  }
  return length;
}
function solution(limit: number): number {
  let max_len: number = 0;
  let max_start: number = 1;
  let i: number = 1;
  while ((i < limit)) {
    let length: number = collatz_length(i);
    if ((length > max_len)) {
      max_len = length;
      max_start = i;
    }
    i = (i + 1);
  }
  return max_start;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let input_str: string
let limit: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
input_str = _input()
limit = Math.trunc(input_str)
  console.log(_str(solution(limit)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

