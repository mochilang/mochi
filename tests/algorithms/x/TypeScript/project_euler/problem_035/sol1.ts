// Generated by Mochi v0.10.71 on 2025-08-23 15:52:51 GMT+7

let LIMIT: number = 10000;
let sieve: boolean[] = [];
let i: number = 0;
let p: number = 2;
function is_prime(n: number): boolean {
  return sieve[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()];
}
function contains_an_even_digit(n: number): boolean {
  let s: string = _str(n);
  let idx: number = 0;
  while ((idx < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    if ((((((c === "0") || (c === "2")) || (c === "4")) || (c === "6")) || (c === "8"))) {
      return true;
    }
    idx = (idx + 1);
  }
  return false;
}
function parse_int(s: string): number {
  let value: number = 0;
  let k: number = 0;
  while ((k < _len(s))) {
    let ch: string = s[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    value = ((value * 10) + Math.trunc(ch));
    k = (k + 1);
  }
  return value;
}
function find_circular_primes(limit: number): number[] {
  let result: number[] = [2];
  let num: number = 3;
  while ((num <= limit)) {
    if ((is_prime(num) && (contains_an_even_digit(num) === false))) {
      let s: string = _str(num);
      let all_prime: boolean = true;
      let j: number = 0;
      while ((j < _len(s))) {
        let rotated_str: string = ((s).substring(j, _len(s)) + (s).substring(0, j));
        let rotated: number = parse_int(rotated_str);
        if (!is_prime(rotated)) {
          all_prime = false;
          break
        }
        j = (j + 1);
      }
      if (all_prime) {
        result.push(num);
      }
    }
    num = (num + 2);
  }
  return result;
}
function solution(): number {
  return _len(find_circular_primes(LIMIT));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i <= LIMIT)) {
    sieve.push(true);
    i = (i + 1);
  }
  while (((p * p) <= LIMIT)) {
    if (sieve[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()]) {
      let j: bigint = (p * p);
      while ((j <= LIMIT)) {
        sieve[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? sieve.length + _mochi_idx : _mochi_idx;})()] = false;
        j = (j + p);
      }
    }
    p = (p + 1);
  }
  console.log(_str(("len(find_circular_primes()) = " + _str(solution()))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

