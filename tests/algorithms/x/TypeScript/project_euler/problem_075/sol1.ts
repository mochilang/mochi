// Generated by Mochi v0.10.59 on 2025-08-07 08:54:31 GMT+7

function gcd(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  return x;
}
function solution(limit: number): number {
  let frequencies: Record<number, number> = {};
  let m: number = 2;
  while ((((2 * m) * (m + 1)) <= limit)) {
    let n: number = ((m % 2) + 1);
    while ((n < m)) {
      if ((gcd(m, n) > 1)) {
        n = (n + 2);
        continue
      }
      let primitive_perimeter: number = ((2 * m) * (m + n));
      let perimeter: number = primitive_perimeter;
      while ((perimeter <= limit)) {
        if (!(perimeter in frequencies)) {
          frequencies[(perimeter) < 0 ? frequencies.length + (perimeter) : perimeter] = 0;
        }
        frequencies[(perimeter) < 0 ? frequencies.length + (perimeter) : perimeter] = (frequencies[(perimeter) < 0 ? frequencies.length + (perimeter) : perimeter] + 1);
        perimeter = (perimeter + primitive_perimeter);
      }
      n = (n + 2);
    }
    m = (m + 1);
  }
  let count: number = 0;
  for (const p in frequencies) {
    if ((frequencies[(p) < 0 ? frequencies.length + (p) : p] == 1)) {
      count = (count + 1);
    }
  }
  return count;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = solution(1500000)
  console.log(_str(("solution() = " + _str(result))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

