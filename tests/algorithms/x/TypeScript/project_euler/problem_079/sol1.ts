// Generated by Mochi v0.10.70 on 2025-08-22 15:38:41 GMT+7

function parse_int(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    value = ((value * 10) + Math.trunc(c));
    i = (i + 1);
  }
  return value;
}
function join(xs: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    s = (s + xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return s;
}
function contains(xs: string[], c: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === c)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function index_of(xs: string[], c: string): number {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === c)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function remove_at(xs: string[], idx: number): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i !== idx)) {
      res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function unique_chars(logins: string[]): string[] {
  let chars: string[] = [];
  let i: number = 0;
  while ((i < _len(logins))) {
    let login: string = logins[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? logins.length + _mochi_idx : _mochi_idx;})()];
    let j: number = 0;
    while ((j < _len(login))) {
      let c: string = login[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? login.length + _mochi_idx : _mochi_idx;})()];
      if (!contains(chars, c)) {
        chars.push(c);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return chars;
}
function satisfies(permutation: string[], logins: string[]): boolean {
  let i: number = 0;
  while ((i < _len(logins))) {
    let login: string = logins[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? logins.length + _mochi_idx : _mochi_idx;})()];
    let i0: number = index_of(permutation, login[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? login.length + _mochi_idx : _mochi_idx;})()]);
    let i1: number = index_of(permutation, login[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? login.length + _mochi_idx : _mochi_idx;})()]);
    let i2: number = index_of(permutation, login[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? login.length + _mochi_idx : _mochi_idx;})()]);
    if (!((i0 < i1) && (i1 < i2))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function search(chars: string[], current: string[], logins: string[]): string {
  if ((_len(chars) === 0)) {
    if (satisfies(current, logins)) {
      return join(current);
    }
    return "";
  }
  let i: number = 0;
  while ((i < _len(chars))) {
    let c: string = chars[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? chars.length + _mochi_idx : _mochi_idx;})()];
    let rest: string[] = remove_at(chars, i);
    let next: any[] = [...current, c];
    let res: string = search(rest, next, logins);
    if ((res !== "")) {
      return res;
    }
    i = (i + 1);
  }
  return "";
}
function find_secret_passcode(logins: string[]): number {
  let chars: string[] = unique_chars(logins);
  let s: string = search(chars, [], logins);
  if ((s === "")) {
    return -1;
  }
  return parse_int(s);
}
let logins1: string[] = ["135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280"];
let logins2: string[] = ["426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201"];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(find_secret_passcode(logins1)));
  console.log(_str(find_secret_passcode(logins2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

