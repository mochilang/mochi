// Generated by Mochi v0.10.66 on 2025-08-16 11:59:59 GMT+7

function card_value(c: string): number {
  if ((c === "2")) {
    return 2;
  }
  if ((c === "3")) {
    return 3;
  }
  if ((c === "4")) {
    return 4;
  }
  if ((c === "5")) {
    return 5;
  }
  if ((c === "6")) {
    return 6;
  }
  if ((c === "7")) {
    return 7;
  }
  if ((c === "8")) {
    return 8;
  }
  if ((c === "9")) {
    return 9;
  }
  if ((c === "T")) {
    return 10;
  }
  if ((c === "J")) {
    return 11;
  }
  if ((c === "Q")) {
    return 12;
  }
  if ((c === "K")) {
    return 13;
  }
  if ((c === "A")) {
    return 14;
  }
  return 0;
}
function sort_desc(xs: number[]): number[] {
  let arr: number[] = xs;
  let n: number = _len(arr);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
        let tmp: number = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
        arr[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function filter_not(xs: number[], v: number): number[] {
  let res: number[] = [];
  for (const x of xs) {
    if ((x !== v)) {
      res.push(x);
    }
  }
  return res;
}
function hand_rank(hand: string[]): number[] {
  let ranks: number[] = [];
  let suits: string[] = [];
  for (const card of hand) {
    ranks.push(card_value(card[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? card.length + _mochi_idx : _mochi_idx;})()]));
    suits.push(card[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? card.length + _mochi_idx : _mochi_idx;})()]);
  }
  ranks = sort_desc(ranks);
  let flush: boolean = true;
  let i: number = 1;
  while ((i < _len(suits))) {
    if ((suits[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? suits.length + _mochi_idx : _mochi_idx;})()] !== suits[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? suits.length + _mochi_idx : _mochi_idx;})()])) {
      flush = false;
    }
    i = (i + 1);
  }
  let straight: boolean = true;
  i = 0;
  while ((i < 4)) {
    if (((ranks[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] - ranks[(()=>{const _mochi_idx = Math.trunc((i + 1)); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()]) !== 1)) {
      straight = false;
    }
    i = (i + 1);
  }
  if ((((((!straight && (ranks[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] === 14)) && (ranks[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] === 5)) && (ranks[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] === 4)) && (ranks[(()=>{const _mochi_idx = Math.trunc(3); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] === 3)) && (ranks[(()=>{const _mochi_idx = Math.trunc(4); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] === 2))) {
    straight = true;
    ranks = [5, 4, 3, 2, 1];
  }
  let counts: Record<number, number> = {};
  for (const r of ranks) {
    if ((r in counts)) {
      counts[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = (counts[r] + 1);
    } else {
      counts[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = 1;
    }
  }
  let uniq: number[] = [];
  for (const r of ranks) {
    let exists: boolean = false;
    for (const u of uniq) {
      if ((u === r)) {
        exists = true;
      }
    }
    if (!exists) {
      uniq.push(r);
    }
  }
  let count_vals: number[][] = [];
  for (const u of uniq) {
    count_vals.push([counts[u], u]);
  }
  let n: number = _len(count_vals);
  let i2: number = 0;
  while ((i2 < n)) {
    let j2: number = 0;
    while ((j2 < (n - 1))) {
      let a: number[] = count_vals[(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()];
      let b: number[] = count_vals[(()=>{const _mochi_idx = Math.trunc((j2 + 1)); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()];
      if (((a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] < b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]) || ((a[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] === b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]) && (a[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] < b[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()])))) {
        let tmp: number[] = count_vals[(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()];
        count_vals[(()=>{const _mochi_idx = j2; return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()] = count_vals[(()=>{const _mochi_idx = Math.trunc((j2 + 1)); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()];
        count_vals[(()=>{const _mochi_idx = (j2 + 1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()] = tmp;
      }
      j2 = (j2 + 1);
    }
    i2 = (i2 + 1);
  }
  let c1: number = count_vals[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count_vals[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let v1: number = count_vals[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let rank: number[] = [];
  if ((straight && flush)) {
    if ((ranks[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()] === 14)) {
      rank.push(9);
      rank.push(14);
      return rank;
    }
    rank.push(8);
    rank.push(ranks[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()]);
    return rank;
  }
  if ((c1 === 4)) {
    let kicker: number = 0;
    for (const r of ranks) {
      if ((r !== v1)) {
        kicker = r;
      }
    }
    rank.push(7);
    rank.push(v1);
    rank.push(kicker);
    return rank;
  }
  if ((c1 === 3)) {
    let c2: number = count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let v2: number = count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    if ((c2 === 2)) {
      rank.push(6);
      rank.push(v1);
      rank.push(v2);
      return rank;
    }
    rank.push(3);
    rank.push(v1);
    for (const r of ranks) {
      if ((r !== v1)) {
        rank.push(r);
      }
    }
    return rank;
  }
  if ((c1 === 2)) {
    let c2: number = count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    let v2: number = count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? count_vals.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    if ((c2 === 2)) {
      let high_pair: number = v1;
      let low_pair: number = v2;
      if ((low_pair > high_pair)) {
        let tmp: number[] = high_pair;
        high_pair = low_pair;
        low_pair = tmp;
      }
      let kicker: number = 0;
      for (const r of ranks) {
        if (((r !== high_pair) && (r !== low_pair))) {
          kicker = r;
        }
      }
      rank.push(2);
      rank.push(high_pair);
      rank.push(low_pair);
      rank.push(kicker);
      return rank;
    }
    rank.push(1);
    rank.push(v1);
    for (const r of ranks) {
      if ((r !== v1)) {
        rank.push(r);
      }
    }
    return rank;
  }
  if (flush) {
    rank.push(5);
    for (const r of ranks) {
      rank.push(r);
    }
    return rank;
  }
  if (straight) {
    rank.push(4);
    rank.push(ranks[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? ranks.length + _mochi_idx : _mochi_idx;})()]);
    return rank;
  }
  rank.push(0);
  for (const r of ranks) {
    rank.push(r);
  }
  return rank;
}
function compare_hands(h1: string[], h2: string[]): number {
  let r1: number[] = hand_rank(h1);
  let r2: number[] = hand_rank(h2);
  let i: number = 0;
  while (((i < _len(r1)) && (i < _len(r2)))) {
    if ((r1[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? r1.length + _mochi_idx : _mochi_idx;})()] > r2[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? r2.length + _mochi_idx : _mochi_idx;})()])) {
      return 1;
    }
    if ((r1[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? r1.length + _mochi_idx : _mochi_idx;})()] < r2[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? r2.length + _mochi_idx : _mochi_idx;})()])) {
      return -1;
    }
    i = (i + 1);
  }
  return 0;
}
function solution(): number {
  let hands: Record<string, string>[] = (()=>{const _t=Deno.readTextFileSync(new URL('../../../../../..', import.meta.url).pathname + "tests/github/TheAlgorithms/Python/project_euler/problem_054/poker_hands.txt").trim().split(/\\r?\\n/);return _t.filter(Boolean).map(_l=>{const _c=_l.split(" ");const _o:any={};for(let i=0;i<_c.length;i++)_o['c'+i]=_c[i];return _o;});})();
  let wins: number = 0;
  for (const h of hands) {
    let p1: string[] = [h.c0, h.c1, h.c2, h.c3, h.c4];
    let p2: string[] = [h.c5, h.c6, h.c7, h.c8, h.c9];
    if ((compare_hands(p1, p2) === 1)) {
      wins = (wins + 1);
    }
  }
  return wins;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

