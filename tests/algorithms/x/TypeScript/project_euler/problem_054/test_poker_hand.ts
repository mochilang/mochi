// Generated by Mochi v0.10.59 on 2025-08-07 08:24:17 GMT+7

function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    if ((((_len(sep) > 0) && ((i + _len(sep)) <= _len(s))) && ((s).substring(i, (i + _len(sep))) == sep))) {
      parts.push(cur);
      cur = "";
      i = (i + _len(sep));
    } else {
      cur = (cur + s.slice(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function card_value(ch: string): number {
  if ((ch == "A")) {
    return 14;
  } else {
    if ((ch == "K")) {
      return 13;
    } else {
      if ((ch == "Q")) {
        return 12;
      } else {
        if ((ch == "J")) {
          return 11;
        } else {
          if ((ch == "T")) {
            return 10;
          } else {
            if ((ch == "9")) {
              return 9;
            } else {
              if ((ch == "8")) {
                return 8;
              } else {
                if ((ch == "7")) {
                  return 7;
                } else {
                  if ((ch == "6")) {
                    return 6;
                  } else {
                    if ((ch == "5")) {
                      return 5;
                    } else {
                      if ((ch == "4")) {
                        return 4;
                      } else {
                        if ((ch == "3")) {
                          return 3;
                        } else {
                          return 2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
export interface Hand { rank: number; values: number[] }
function parse_hand(hand: string): Hand {
  let counts: number[] = [];
  let i: number = 0;
  while ((i <= 14)) {
    counts.push(0);
    i = (i + 1);
  }
  let suits: string[] = [];
  for (const card of hand.split(" ")) {
    let v: number = card_value(card.slice(0, 1));
    counts[(v) < 0 ? counts.length + (v) : v] = (counts[(v) < 0 ? counts.length + (v) : v] + 1);
    suits.push(card.slice(1, 2));
  }
  let vals: number[] = [];
  let v: number = 14;
  while ((v >= 2)) {
    let c: number = counts[(v) < 0 ? counts.length + (v) : v];
    let k: number = 0;
    while ((k < c)) {
      vals.push(v);
      k = (k + 1);
    }
    v = (v - 1);
  }
  let is_straight: boolean = false;
  if (((((((_len(vals) == 5) && (vals[(Math.trunc(0)) < 0 ? vals.length + (Math.trunc(0)) : Math.trunc(0)] == 14)) && (vals[(Math.trunc(1)) < 0 ? vals.length + (Math.trunc(1)) : Math.trunc(1)] == 5)) && (vals[(Math.trunc(2)) < 0 ? vals.length + (Math.trunc(2)) : Math.trunc(2)] == 4)) && (vals[(Math.trunc(3)) < 0 ? vals.length + (Math.trunc(3)) : Math.trunc(3)] == 3)) && (vals[(Math.trunc(4)) < 0 ? vals.length + (Math.trunc(4)) : Math.trunc(4)] == 2))) {
    is_straight = true;
    vals[(0) < 0 ? vals.length + (0) : 0] = 5;
    vals[(1) < 0 ? vals.length + (1) : 1] = 4;
    vals[(2) < 0 ? vals.length + (2) : 2] = 3;
    vals[(3) < 0 ? vals.length + (3) : 3] = 2;
    vals[(4) < 0 ? vals.length + (4) : 4] = 14;
  } else {
    is_straight = true;
    let j: number = 0;
    while ((j < 4)) {
      if (((vals[(j) < 0 ? vals.length + (j) : j] - vals[(Math.trunc((j + 1))) < 0 ? vals.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))]) != 1)) {
        is_straight = false;
      }
      j = (j + 1);
    }
  }
  let is_flush: boolean = true;
  let s0: string = suits[(Math.trunc(0)) < 0 ? suits.length + (Math.trunc(0)) : Math.trunc(0)];
  let t: number = 1;
  while ((t < _len(suits))) {
    if ((suits[(t) < 0 ? suits.length + (t) : t] != s0)) {
      is_flush = false;
    }
    t = (t + 1);
  }
  let four_val: number = 0;
  let three_val: number = 0;
  let pair_vals: number[] = [];
  v = 14;
  while ((v >= 2)) {
    if ((counts[(v) < 0 ? counts.length + (v) : v] == 4)) {
      four_val = v;
    } else {
      if ((counts[(v) < 0 ? counts.length + (v) : v] == 3)) {
        three_val = v;
      } else {
        if ((counts[(v) < 0 ? counts.length + (v) : v] == 2)) {
          pair_vals.push(v);
        }
      }
    }
    v = (v - 1);
  }
  let rank: number = 1;
  if ((((is_flush && is_straight) && (vals[(Math.trunc(0)) < 0 ? vals.length + (Math.trunc(0)) : Math.trunc(0)] == 14)) && (vals[(Math.trunc(4)) < 0 ? vals.length + (Math.trunc(4)) : Math.trunc(4)] == 10))) {
    rank = 10;
  } else {
    if ((is_flush && is_straight)) {
      rank = 9;
    } else {
      if ((four_val != 0)) {
        rank = 8;
      } else {
        if (((three_val != 0) && (_len(pair_vals) == 1))) {
          rank = 7;
        } else {
          if (is_flush) {
            rank = 6;
          } else {
            if (is_straight) {
              rank = 5;
            } else {
              if ((three_val != 0)) {
                rank = 4;
              } else {
                if ((_len(pair_vals) == 2)) {
                  rank = 3;
                } else {
                  if ((_len(pair_vals) == 1)) {
                    rank = 2;
                  } else {
                    rank = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return {rank, "values": vals};
}
function compare(a: Hand, b: Hand): string {
  if ((a.rank > b.rank)) {
    return "Win";
  }
  if ((a.rank < b.rank)) {
    return "Loss";
  }
  let i: number = 0;
  while ((i < _len(a.values))) {
    if ((a.values[(i) < 0 ? a.values.length + (i) : i] > b.values[(i) < 0 ? b.values.length + (i) : i])) {
      return "Win";
    }
    if ((a.values[(i) < 0 ? a.values.length + (i) : i] < b.values[(i) < 0 ? b.values.length + (i) : i])) {
      return "Loss";
    }
    i = (i + 1);
  }
  return "Tie";
}
function main() {
  let tests: string[][] = [["2H 3H 4H 5H 6H", "KS AS TS QS JS", "Loss"], ["2H 3H 4H 5H 6H", "AS AD AC AH JD", "Win"], ["AS AH 2H AD AC", "JS JD JC JH 3D", "Win"], ["2S AH 2H AS AC", "JS JD JC JH AD", "Loss"], ["2S AH 2H AS AC", "2H 3H 5H 6H 7H", "Win"]];
  for (const t of tests) {
    let res: string = compare(parse_hand(t[(Math.trunc(0)) < 0 ? t.length + (Math.trunc(0)) : Math.trunc(0)]), parse_hand(t[(Math.trunc(1)) < 0 ? t.length + (Math.trunc(1)) : Math.trunc(1)]));
    console.log(_str(((res + " expected ") + t[(Math.trunc(2)) < 0 ? t.length + (Math.trunc(2)) : Math.trunc(2)])));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

