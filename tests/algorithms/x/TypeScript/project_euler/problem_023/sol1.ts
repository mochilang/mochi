// Generated by Mochi v0.10.59 on 2025-08-07 08:20:40 GMT+7

function int_sqrt(n: number): number {
  let x: number = 1;
  while ((((x + 1) * (x + 1)) <= n)) {
    x = (x + 1);
  }
  return x;
}
function solution(limit: number): number {
  let sum_divs: number[] = [];
  let i: number = 0;
  while ((i <= limit)) {
    sum_divs.push(1);
    i = (i + 1);
  }
  let sqrt_limit: number = int_sqrt(limit);
  i = 2;
  while ((i <= sqrt_limit)) {
    sum_divs[((i * i)) < 0 ? sum_divs.length + ((i * i)) : (i * i)] = (sum_divs[(Math.trunc((i * i))) < 0 ? sum_divs.length + (Math.trunc((i * i))) : Math.trunc((i * i))] + i);
    let k: number = (i + 1);
    while ((k <= Math.trunc(limit / i))) {
      sum_divs[((k * i)) < 0 ? sum_divs.length + ((k * i)) : (k * i)] = ((sum_divs[(Math.trunc((k * i))) < 0 ? sum_divs.length + (Math.trunc((k * i))) : Math.trunc((k * i))] + k) + i);
      k = (k + 1);
    }
    i = (i + 1);
  }
  let is_abundant: boolean[] = [];
  i = 0;
  while ((i <= limit)) {
    is_abundant.push(false);
    i = (i + 1);
  }
  let abundants: number[] = [];
  let res: number = 0;
  let n: number = 1;
  while ((n <= limit)) {
    if ((sum_divs[(n) < 0 ? sum_divs.length + (n) : n] > n)) {
      abundants.push(n);
      is_abundant[(n) < 0 ? is_abundant.length + (n) : n] = true;
    }
    let has_pair: boolean = false;
    let j: number = 0;
    while ((j < _len(abundants))) {
      let a: number = abundants[(j) < 0 ? abundants.length + (j) : j];
      if ((a > n)) {
        break
      }
      let b: number = (n - a);
      if (((b <= limit) && is_abundant[(b) < 0 ? is_abundant.length + (b) : b])) {
        has_pair = true;
        break
      }
      j = (j + 1);
    }
    if (!has_pair) {
      res = (res + n);
    }
    n = (n + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(solution(28123))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

