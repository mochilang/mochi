// Generated by Mochi v0.10.59 on 2025-08-07 08:23:52 GMT+7

export interface FractionPair { num: number; den: number }
function gcd(a: number, b: number): number {
  let x: number = ((a < 0) ? -a : a);
  let y: number = ((b < 0) ? -b : b);
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  return x;
}
function is_digit_cancelling(num: number, den: number): boolean {
  if ((num >= den)) {
    return false;
  }
  let num_unit = (num % 10);
  let num_tens = Math.trunc(num / 10);
  let den_unit: number = (den % 10);
  let den_tens: number = Math.trunc(den / 10);
  if ((num_unit != den_tens)) {
    return false;
  }
  if ((den_unit == 0)) {
    return false;
  }
  return ((num * den_unit) == (num_tens * den));
}
function find_fractions(): FractionPair[] {
  let sols: FractionPair[] = [];
  let num: number = 10;
  while ((num < 100)) {
    let den = (num + 1);
    while ((den < 100)) {
      if (is_digit_cancelling(num, den)) {
        sols.push({num, den});
      }
      den = (den + 1);
    }
    num = (num + 1);
  }
  return sols;
}
function solution(): number {
  let fracs: FractionPair[] = find_fractions();
  let num_prod: number = 1;
  let den_prod: number = 1;
  let i: number = 0;
  while ((i < _len(fracs))) {
    let f: FractionPair = fracs[(i) < 0 ? fracs.length + (i) : i];
    num_prod = (num_prod * f.num);
    den_prod = (den_prod * f.den);
    i = (i + 1);
  }
  let g: number = gcd(num_prod, den_prod);
  return Math.trunc(den_prod / g);
}
function main() {
  console.log(_str(_str(solution())));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

