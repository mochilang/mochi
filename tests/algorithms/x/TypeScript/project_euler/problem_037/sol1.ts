// Generated by Mochi v0.10.59 on 2025-08-07 08:23:57 GMT+7

function is_prime(_number: number): boolean {
  if (((1 < _number) && (_number < 4))) {
    return true;
  }
  if ((((_number < 2) || ((_number % 2) == 0)) || ((_number % 3) == 0))) {
    return false;
  }
  let i: number = 5;
  while (((i * i) <= _number)) {
    if ((((_number % i) == 0) || ((_number % (i + 2)) == 0))) {
      return false;
    }
    i = (i + 6);
  }
  return true;
}
function list_truncated_nums(n: number): number[] {
  let str_num: string = _str(n);
  let list_nums: number[] = [n];
  let i: number = 1;
  let length: number = _len(str_num);
  while ((i < length)) {
    let right: number = Math.trunc((str_num).substring(i, length));
    let left: number = Math.trunc((str_num).substring(0, (length - i)));
    list_nums.push(right);
    list_nums.push(left);
    i = (i + 1);
  }
  return list_nums;
}
function validate(n: number): boolean {
  let s: string = _str(n);
  let length: number = _len(s);
  if ((length > 3)) {
    let last3: number = Math.trunc((s).substring((length - 3), length));
    let first3: number = Math.trunc((s).substring(0, 3));
    if (!(is_prime(last3) && is_prime(first3))) {
      return false;
    }
  }
  return true;
}
function compute_truncated_primes(count: number): number[] {
  let list_truncated_primes: number[] = [];
  let num: number = 13;
  while ((_len(list_truncated_primes) != count)) {
    if (validate(num)) {
      let list_nums = list_truncated_nums(num);
      let all_prime: boolean = true;
      let j: number = 0;
      while ((j < _len(list_nums))) {
        if (!is_prime(list_nums[(j) < 0 ? list_nums.length + (j) : j])) {
          all_prime = false;
          break
        }
        j = (j + 1);
      }
      if (all_prime) {
        list_truncated_primes.push(num);
      }
    }
    num = (num + 2);
  }
  return list_truncated_primes;
}
function solution(): number {
  let primes: number[] = compute_truncated_primes(11);
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(primes))) {
    total = (total + primes[(i) < 0 ? primes.length + (i) : i]);
    i = (i + 1);
  }
  return total;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("sum(compute_truncated_primes(11)) = " + _str(solution()))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

