// Generated by Mochi v0.10.66 on 2025-08-16 12:46:32 GMT+7

let DIGIT_FACTORIAL: number[] = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];
function digit_factorial_sum(_number: number): number {
  if ((_number < 0)) {
    _panic("Parameter number must be greater than or equal to 0");
  }
  if ((_number === 0)) {
    return DIGIT_FACTORIAL[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? DIGIT_FACTORIAL.length + _mochi_idx : _mochi_idx;})()];
  }
  let n: number = _number;
  let total: number = 0;
  while ((n > 0)) {
    let digit: number = (n % 10);
    total = (total + DIGIT_FACTORIAL[(()=>{const _mochi_idx = digit; return _mochi_idx < 0 ? DIGIT_FACTORIAL.length + _mochi_idx : _mochi_idx;})()]);
    n = Math.trunc(n / 10);
  }
  return total;
}
function chain_len(n: number, limit: number): number {
  let seen: Record<number, boolean> = {};
  let length: number = 0;
  let cur: number = n;
  while ((((cur in seen) === false) && (length <= limit))) {
    seen[(()=>{const _mochi_idx = cur; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
    length = (length + 1);
    cur = digit_factorial_sum(cur);
  }
  return length;
}
function solution(chain_length: number, number_limit: number): number {
  if (((chain_length <= 0) || (number_limit <= 0))) {
    _panic("Parameters chain_length and number_limit must be greater than 0");
  }
  let count: number = 0;
  let start: number = 1;
  while ((start < number_limit)) {
    if ((chain_len(start, chain_length) === chain_length)) {
      count = (count + 1);
    }
    start = (start + 1);
  }
  return count;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution(60, 1000000)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

