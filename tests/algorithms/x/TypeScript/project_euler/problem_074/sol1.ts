// Generated by Mochi v0.10.59 on 2025-08-07 08:57:42 GMT+7

let DIGIT_FACTORIALS: number[] = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];
let cache_sum_digit_factorials: Record<number, number> = {[145]: 145};
let chain_length_cache: Record<number, number> = {[145]: 0, [169]: 3, [36301]: 3, [1454]: 3, [871]: 2, [45361]: 2, [872]: 2};
function sum_digit_factorials(n: number): number {
  if ((n in cache_sum_digit_factorials)) {
    return cache_sum_digit_factorials[(n) < 0 ? cache_sum_digit_factorials.length + (n) : n];
  }
  let m: number = n;
  let ret: number = 0;
  if ((m == 0)) {
    ret = DIGIT_FACTORIALS[(Math.trunc(0)) < 0 ? DIGIT_FACTORIALS.length + (Math.trunc(0)) : Math.trunc(0)];
  }
  while ((m > 0)) {
    let digit: number = (m % 10);
    ret = (ret + DIGIT_FACTORIALS[(digit) < 0 ? DIGIT_FACTORIALS.length + (digit) : digit]);
    m = Math.trunc(m / 10);
  }
  cache_sum_digit_factorials[(n) < 0 ? cache_sum_digit_factorials.length + (n) : n] = ret;
  return ret;
}
function chain_length(n: number): number {
  if ((n in chain_length_cache)) {
    return chain_length_cache[(n) < 0 ? chain_length_cache.length + (n) : n];
  }
  let chain: number[] = [];
  let seen: Record<number, number> = {};
  let current: number = n;
  while (true) {
    if ((current in chain_length_cache)) {
      let known: number = chain_length_cache[(current) < 0 ? chain_length_cache.length + (current) : current];
      let total: number = known;
      let i: number = (_len(chain) - 1);
      while ((i >= 0)) {
        total = (total + 1);
        chain_length_cache[(chain[(i) < 0 ? chain.length + (i) : i]) < 0 ? chain_length_cache.length + (chain[(i) < 0 ? chain.length + (i) : i]) : chain[(i) < 0 ? chain.length + (i) : i]] = total;
        i = (i - 1);
      }
      return chain_length_cache[(n) < 0 ? chain_length_cache.length + (n) : n];
    }
    if ((current in seen)) {
      let loop_start: number = seen[(current) < 0 ? seen.length + (current) : current];
      let loop_len: number = (_len(chain) - loop_start);
      let i: number = (_len(chain) - 1);
      let ahead: number = 0;
      while ((i >= 0)) {
        if ((i >= loop_start)) {
          chain_length_cache[(chain[(i) < 0 ? chain.length + (i) : i]) < 0 ? chain_length_cache.length + (chain[(i) < 0 ? chain.length + (i) : i]) : chain[(i) < 0 ? chain.length + (i) : i]] = loop_len;
        } else {
          chain_length_cache[(chain[(i) < 0 ? chain.length + (i) : i]) < 0 ? chain_length_cache.length + (chain[(i) < 0 ? chain.length + (i) : i]) : chain[(i) < 0 ? chain.length + (i) : i]] = (loop_len + (ahead + 1));
        }
        ahead = (ahead + 1);
        i = (i - 1);
      }
      return chain_length_cache[(n) < 0 ? chain_length_cache.length + (n) : n];
    }
    seen[(current) < 0 ? seen.length + (current) : current] = _len(chain);
    chain.push(current);
    current = sum_digit_factorials(current);
  }
}
function solution(num_terms: number, max_start: number): number {
  let count: number = 0;
  let i: number = 1;
  while ((i < max_start)) {
    if ((chain_length(i) == num_terms)) {
      count = (count + 1);
    }
    i = (i + 1);
  }
  return count;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("solution() = " + _str(solution(60, 1000)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

