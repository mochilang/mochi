// Generated by Mochi v0.10.59 on 2025-08-07 08:20:39 GMT+7

export interface Name { name: string }
function ord_letter(ch: string): number {
  let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let i: number = 0;
  while ((i < _len(alphabet))) {
    if ((alphabet.slice(i, (i + 1)) == ch)) {
      return (i + 1);
    }
    i = (i + 1);
  }
  return 0;
}
function name_value(name: string): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(name))) {
    total = (total + ord_letter(name.slice(i, (i + 1))));
    i = (i + 1);
  }
  return total;
}
function bubble_sort(arr: string[]): string[] {
  let n: number = _len(arr);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < ((n - i) - 1))) {
      if ((arr[(j) < 0 ? arr.length + (j) : j] > arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))])) {
        let temp: string = arr[(j) < 0 ? arr.length + (j) : j];
        arr[(j) < 0 ? arr.length + (j) : j] = arr[(Math.trunc((j + 1))) < 0 ? arr.length + (Math.trunc((j + 1))) : Math.trunc((j + 1))];
        arr[((j + 1)) < 0 ? arr.length + ((j + 1)) : (j + 1)] = temp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
let names: string[] = [];
let total: number = 0;
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let rows: Name[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
rows = Deno.readTextFileSync("tests/github/TheAlgorithms/Mochi/project_euler/problem_022/p022_names.jsonl").trim().split(/\r?\n/).map(l=>JSON.parse(l))
  for (const r of rows) {
    names.push(r.name);
  }
  names = bubble_sort(names);
  while ((i < _len(names))) {
    total = (total + ((i + 1) * name_value(names[(i) < 0 ? names.length + (i) : i])));
    i = (i + 1);
  }
  console.log(_str(_str(total)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

