// Generated by Mochi v0.10.59 on 2025-08-07 08:20:38 GMT+7

function parse_names(line: string): string[] {
  let names: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(line))) {
    let ch: string = (line).substring(i, (i + 1));
    if ((ch == ",")) {
      names.push(current);
      current = "";
    } else {
      if ((ch != "\"")) {
        current = (current + ch);
      }
    }
    i = (i + 1);
  }
  names.push(current);
  return names;
}
function insertion_sort(arr: string[]): string[] {
  let a: string[] = arr;
  let i: number = 1;
  while ((i < _len(a))) {
    let key: string = a[(i) < 0 ? a.length + (i) : i];
    let j: number = (i - 1);
    while (((j >= 0) && (a[(j) < 0 ? a.length + (j) : j] > key))) {
      a[((j + 1)) < 0 ? a.length + ((j + 1)) : (j + 1)] = a[(j) < 0 ? a.length + (j) : j];
      j = (j - 1);
    }
    a[((j + 1)) < 0 ? a.length + ((j + 1)) : (j + 1)] = key;
    i = (i + 1);
  }
  return a;
}
function letter_value(ch: string): number {
  let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let idx: number = 0;
  while ((idx < _len(alphabet))) {
    if (((alphabet).substring(idx, (idx + 1)) == ch)) {
      return (idx + 1);
    }
    idx = (idx + 1);
  }
  return 0;
}
function name_score(name: string): number {
  let score: number = 0;
  let i: number = 0;
  while ((i < _len(name))) {
    score = (score + letter_value((name).substring(i, (i + 1))));
    i = (i + 1);
  }
  return score;
}
function main() {
  let line: string = _input();
  let names: string[] = insertion_sort(parse_names(line));
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(names))) {
    total = (total + ((i + 1) * name_score(names[(i) < 0 ? names.length + (i) : i])));
    i = (i + 1);
  }
  console.log(_str(_str(total)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

