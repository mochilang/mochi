// Generated by Mochi v0.10.59 on 2025-08-07 08:24:12 GMT+7

function parse_int(s: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    value = ((value * 10) + parseIntStr(s[(i) < 0 ? s.length + (i) : i], 10));
    i = (i + 1);
  }
  return value;
}
function digit_replacements(_number: number): number[][] {
  let num_str: string = _str(_number);
  let counts: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  let i: number = 0;
  while ((i < _len(num_str))) {
    let d: number = parseIntStr(num_str[(i) < 0 ? num_str.length + (i) : i], 10);
    counts[(d) < 0 ? counts.length + (d) : d] = (counts[(d) < 0 ? counts.length + (d) : d] + 1);
    i = (i + 1);
  }
  let result: number[][] = [];
  let digits: string = "0123456789";
  let digit: number = 0;
  while ((digit < 10)) {
    if ((counts[(digit) < 0 ? counts.length + (digit) : digit] > 1)) {
      let family: number[] = [];
      let repl: number = 0;
      while ((repl < 10)) {
        let new_str: string = "";
        let j: number = 0;
        while ((j < _len(num_str))) {
          let c: string = num_str[(j) < 0 ? num_str.length + (j) : j];
          if ((c == digits[(digit) < 0 ? digits.length + (digit) : digit])) {
            new_str = (new_str + digits[(repl) < 0 ? digits.length + (repl) : repl]);
          } else {
            new_str = (new_str + c);
          }
          j = (j + 1);
        }
        family.push(parse_int(new_str));
        repl = (repl + 1);
      }
      result.push(family);
    }
    digit = (digit + 1);
  }
  return result;
}
function is_prime(num: number): boolean {
  if ((num < 2)) {
    return false;
  }
  if (((num % 2) == 0)) {
    return (num == 2);
  }
  let i: number = 3;
  while (((i * i) <= num)) {
    if (((num % i) == 0)) {
      return false;
    }
    i = (i + 2);
  }
  return true;
}
function solution(family_length: number): number {
  let candidate: number = 121313;
  if (!is_prime(candidate)) {
    return -1;
  }
  let reps: number[][] = digit_replacements(candidate);
  let r: number = 0;
  while ((r < _len(reps))) {
    let family: number[] = reps[(r) < 0 ? reps.length + (r) : r];
    let count: number = 0;
    let min_prime: number = 0;
    let first: boolean = true;
    let i: number = 0;
    while ((i < _len(family))) {
      let num = family[(i) < 0 ? family.length + (i) : i];
      if (is_prime(num)) {
        if (first) {
          min_prime = num;
          first = false;
        } else {
          if ((num < min_prime)) {
            min_prime = num;
          }
        }
        count = (count + 1);
      }
      i = (i + 1);
    }
    if ((count == family_length)) {
      return min_prime;
    }
    r = (r + 1);
  }
  return -1;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(solution(8))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

