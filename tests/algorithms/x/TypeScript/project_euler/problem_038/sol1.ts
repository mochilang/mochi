// Generated by Mochi v0.10.59 on 2025-08-07 08:23:58 GMT+7

function is_9_pandigital(n: number): boolean {
  let digits: number[] = [];
  let i: number = 0;
  while ((i < 10)) {
    digits.push(0);
    i = (i + 1);
  }
  let count: number = 0;
  let x: number = n;
  while ((x > 0)) {
    let digit: number = (x % 10);
    if ((digit == 0)) {
      return false;
    }
    if ((digits[(digit) < 0 ? digits.length + (digit) : digit] == 1)) {
      return false;
    }
    digits[(digit) < 0 ? digits.length + (digit) : digit] = 1;
    x = Math.trunc(x / 10);
    count = (count + 1);
  }
  return ((((((((((count == 9) && (digits[(Math.trunc(1)) < 0 ? digits.length + (Math.trunc(1)) : Math.trunc(1)] == 1)) && (digits[(Math.trunc(2)) < 0 ? digits.length + (Math.trunc(2)) : Math.trunc(2)] == 1)) && (digits[(Math.trunc(3)) < 0 ? digits.length + (Math.trunc(3)) : Math.trunc(3)] == 1)) && (digits[(Math.trunc(4)) < 0 ? digits.length + (Math.trunc(4)) : Math.trunc(4)] == 1)) && (digits[(Math.trunc(5)) < 0 ? digits.length + (Math.trunc(5)) : Math.trunc(5)] == 1)) && (digits[(Math.trunc(6)) < 0 ? digits.length + (Math.trunc(6)) : Math.trunc(6)] == 1)) && (digits[(Math.trunc(7)) < 0 ? digits.length + (Math.trunc(7)) : Math.trunc(7)] == 1)) && (digits[(Math.trunc(8)) < 0 ? digits.length + (Math.trunc(8)) : Math.trunc(8)] == 1)) && (digits[(Math.trunc(9)) < 0 ? digits.length + (Math.trunc(9)) : Math.trunc(9)] == 1));
}
function solution(): number {
  let base_num: number = 9999;
  while ((base_num >= 5000)) {
    let candidate: number = (100002 * base_num);
    if (is_9_pandigital(candidate)) {
      return candidate;
    }
    base_num = (base_num - 1);
  }
  base_num = 333;
  while ((base_num >= 100)) {
    let candidate: number = (1002003 * base_num);
    if (is_9_pandigital(candidate)) {
      return candidate;
    }
    base_num = (base_num - 1);
  }
  return 0;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("solution() = " + _str(solution()))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

