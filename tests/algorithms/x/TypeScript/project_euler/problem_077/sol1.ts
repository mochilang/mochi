// Generated by Mochi v0.10.70 on 2025-08-22 15:38:32 GMT+7

let NUM_PRIMES: number = 100;
function generate_primes(limit: number): number[] {
  let is_prime: boolean[] = [];
  let i: number = 0;
  while ((i <= limit)) {
    is_prime.push(true);
    i = (i + 1);
  }
  is_prime[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()] = false;
  is_prime[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()] = false;
  i = 2;
  while (((i * i) <= limit)) {
    if (is_prime[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()]) {
      let j: bigint = (i * i);
      while ((j <= limit)) {
        is_prime[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()] = false;
        j = (j + i);
      }
    }
    i = (i + 1);
  }
  let primes: number[] = [];
  i = 2;
  while ((i <= limit)) {
    if (is_prime[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()]) {
      primes.push(i);
    }
    i = (i + 1);
  }
  return primes;
}
function contains(xs: number[], value: number): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === value)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
let partition_cache: Record<number, number[]> = {};
function partition(n: number): number[] {
  if ((n < 0)) {
    return [];
  }
  if ((n === 0)) {
    return [1];
  }
  if ((n in partition_cache)) {
    return partition_cache[n];
  }
  let ret: number[] = [];
  for (const prime of primes) {
    if ((prime > n)) {
      continue
    }
    let subs: number[] = partition((n - prime));
    for (const sub of subs) {
      let prod: bigint = (sub * prime);
      if (!contains(ret, prod)) {
        ret.push(prod);
      }
    }
  }
  partition_cache[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? partition_cache.length + _mochi_idx : _mochi_idx;})()] = ret;
  return ret;
}
function solution(threshold: number): number {
  let number_to_partition: number = 1;
  while ((number_to_partition < NUM_PRIMES)) {
    let parts: number[] = partition(number_to_partition);
    if ((_len(parts) > threshold)) {
      return number_to_partition;
    }
    number_to_partition = (number_to_partition + 1);
  }
  return 0;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let primes: number[]
let result: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
primes = generate_primes(NUM_PRIMES)
result = solution(5000)
  console.log(_str(("solution() = " + _str(result))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

