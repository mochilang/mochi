// Generated by Mochi v0.10.70 on 2025-08-22 15:34:21 GMT+7

function sqrt(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function is_pentagonal(n: number): boolean {
  let root: number = sqrt((1.0 + (24.0 * (1.0 * n))));
  let val: number = ((1.0 + root) / 6.0);
  let val_int: number = Math.trunc(val);
  return (val === (1.0 * val_int));
}
function pentagonal(k: number): number {
  return Math.trunc((k * ((3 * k) - 1)) / 2);
}
function solution(limit: number): number {
  let pentagonal_nums: number[] = [];
  let i: number = 1;
  while ((i < limit)) {
    pentagonal_nums.push(pentagonal(i));
    i = (i + 1);
  }
  let a_idx: number = 0;
  while ((a_idx < _len(pentagonal_nums))) {
    let pentagonal_i: number = pentagonal_nums[(()=>{const _mochi_idx = a_idx; return _mochi_idx < 0 ? pentagonal_nums.length + _mochi_idx : _mochi_idx;})()];
    let b_idx: number = a_idx;
    while ((b_idx < _len(pentagonal_nums))) {
      let pentagonal_j: number = pentagonal_nums[(()=>{const _mochi_idx = b_idx; return _mochi_idx < 0 ? pentagonal_nums.length + _mochi_idx : _mochi_idx;})()];
      let s: bigint = (pentagonal_i + pentagonal_j);
      let d: bigint = (pentagonal_j - pentagonal_i);
      if ((is_pentagonal(s) && is_pentagonal(d))) {
        return d;
      }
      b_idx = (b_idx + 1);
    }
    a_idx = (a_idx + 1);
  }
  return -1;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let result: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = solution(5000)
  console.log(_str(("solution() = " + _str(result))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

