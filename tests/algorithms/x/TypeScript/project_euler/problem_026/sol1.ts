// Generated by Mochi v0.10.59 on 2025-08-07 08:23:34 GMT+7

function contains(lst: number[], val: number): boolean {
  for (const x of lst) {
    if ((x == val)) {
      return true;
    }
  }
  return false;
}
function solution(numerator: number, limit: number): number {
  let the_digit: number = 1;
  let longest_len: number = 0;
  for (let d = numerator; d < limit; d++) {
    let remainders: number[] = [];
    let rem: number = numerator;
    let count: number = 1;
    while ((count <= limit)) {
      if (contains(remainders, rem)) {
        if ((longest_len < _len(remainders))) {
          longest_len = _len(remainders);
          the_digit = d;
        }
      } else {
        remainders.push(rem);
        rem = ((rem * 10) % d);
      }
      count = (count + 1);
    }
  }
  return the_digit;
}
function main() {
  console.log(_str(_str(solution(1, 10))));
  console.log(_str(_str(solution(10, 100))));
  console.log(_str(_str(solution(10, 1000))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

