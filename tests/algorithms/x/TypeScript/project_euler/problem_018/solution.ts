// Generated by Mochi v0.10.71 on 2025-08-23 15:51:03 GMT+7

function solution(): number {
  let triangle: number[][] = [[75], [95, 64], [17, 47, 82], [18, 35, 87, 10], [20, 4, 82, 47, 65], [19, 1, 23, 75, 3, 34], [88, 2, 77, 73, 7, 63, 67], [99, 65, 4, 28, 6, 16, 70, 92], [41, 41, 26, 56, 83, 40, 80, 70, 33], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]];
  let i: number = 1;
  while ((i < _len(triangle))) {
    let j: number = 0;
    while ((j < _len(triangle[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? triangle.length + _mochi_idx : _mochi_idx;})()]))) {
      let prev_row: number[] = triangle[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? triangle.length + _mochi_idx : _mochi_idx;})()];
      let number1: number = ((j !== _len(prev_row)) ? prev_row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? prev_row.length + _mochi_idx : _mochi_idx;})()] : 0);
      let number2: number = ((j > 0) ? prev_row[(()=>{const _mochi_idx = Math.trunc((j - 1)); return _mochi_idx < 0 ? prev_row.length + _mochi_idx : _mochi_idx;})()] : 0);
      let max_val: number = ((number1 > number2) ? number1 : number2);
      triangle[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? triangle.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? triangle[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? triangle.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (triangle[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? triangle.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? triangle[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? triangle.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + max_val);
      j = (j + 1);
    }
    i = (i + 1);
  }
  let last: number[] = triangle[(()=>{const _mochi_idx = Math.trunc((_len(triangle) - 1)); return _mochi_idx < 0 ? triangle.length + _mochi_idx : _mochi_idx;})()];
  let k: number = 0;
  let best: number = 0;
  while ((k < _len(last))) {
    if ((last[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? last.length + _mochi_idx : _mochi_idx;})()] > best)) {
      best = last[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? last.length + _mochi_idx : _mochi_idx;})()];
    }
    k = (k + 1);
  }
  return best;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

