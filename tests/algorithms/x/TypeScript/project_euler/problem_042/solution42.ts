// Generated by Mochi v0.10.70 on 2025-08-22 15:34:17 GMT+7

function triangular_numbers(limit: number): number[] {
  let res: number[] = [];
  let n: number = 1;
  while ((n <= limit)) {
    res.push(Math.trunc((n * (n + 1)) / 2));
    n = (n + 1);
  }
  return res;
}
function parse_words(text: string): string[] {
  let words: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(text))) {
    let c: string = text.slice(i, (i + 1));
    if ((c === ",")) {
      words.push(current);
      current = "";
    } else {
      if ((c === "\"")) {
      } else {
        if (((c === "\r") || (c === "\n"))) {
        } else {
          current = (current + c);
        }
      }
    }
    i = (i + 1);
  }
  if ((_len(current) > 0)) {
    words.push(current);
  }
  return words;
}
function word_value(word: string): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(word))) {
    total = ((total + word.slice(i, (i + 1)).charCodeAt(0)) - 64);
    i = (i + 1);
  }
  return total;
}
function contains(xs: number[], target: number): boolean {
  for (const x of xs) {
    if ((x === target)) {
      return true;
    }
  }
  return false;
}
function solution(): number {
  let text: string = _read_file("words.txt");
  let words: string[] = parse_words(text);
  let tri: number[] = triangular_numbers(100);
  let count: number = 0;
  for (const w of words) {
    let v: number = word_value(w);
    if (contains(tri, v)) {
      count = (count + 1);
    }
  }
  return count;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _read_file(path: string): string {
  const read = (p: string): string => {
    try {
      if (typeof Deno !== 'undefined') {
        return Deno.readTextFileSync(p);
      } else {
        const fs = require('fs');
        if (fs.existsSync(p)) return fs.readFileSync(p, 'utf8');
      }
    } catch (_) {}
    return '';
  };
  let text = read(path);
  if (text) return text;
  try {
    const dir = typeof Deno !== 'undefined' ? new URL('.', import.meta.url).pathname : __dirname + '/';
    text = read(dir + path);
    if (text) return text;
    const alt = dir.replace('tests/algorithms/x/TypeScript/', 'tests/github/TheAlgorithms/Mochi/') + path;
    text = read(alt);
    if (text) return text;
  } catch (_) {}
  return '';
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

