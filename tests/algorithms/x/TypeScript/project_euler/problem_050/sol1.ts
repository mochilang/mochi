// Generated by Mochi v0.10.70 on 2025-08-22 15:35:26 GMT+7

function prime_sieve(limit: number): number[] {
  if ((limit <= 2)) {
    return [];
  }
  let is_prime: boolean[] = [];
  let i: number = 0;
  while ((i < limit)) {
    is_prime.push(true);
    i = (i + 1);
  }
  is_prime[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()] = false;
  is_prime[(()=>{const _mochi_idx = 1; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()] = false;
  let p: number = 3;
  while (((p * p) < limit)) {
    let index: bigint = (p * 2);
    while ((index < limit)) {
      is_prime[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()] = false;
      index = (index + p);
    }
    p = (p + 2);
  }
  let primes: number[] = [2];
  let n: number = 3;
  while ((n < limit)) {
    if (is_prime[(()=>{const _mochi_idx = n; return _mochi_idx < 0 ? is_prime.length + _mochi_idx : _mochi_idx;})()]) {
      primes.push(n);
    }
    n = (n + 2);
  }
  return primes;
}
function solution(ceiling: number): number {
  let primes: number[] = prime_sieve(ceiling);
  let prime_map: Record<number, boolean> = {};
  let i: number = 0;
  while ((i < _len(primes))) {
    prime_map[(()=>{const _mochi_idx = primes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? primes.length + _mochi_idx : _mochi_idx;})()]; return _mochi_idx < 0 ? prime_map.length + _mochi_idx : _mochi_idx;})()] = true;
    i = (i + 1);
  }
  let prefix: number[] = [0];
  i = 0;
  while ((i < _len(primes))) {
    prefix.push((prefix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? prefix.length + _mochi_idx : _mochi_idx;})()] + primes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? primes.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let max_len: number = 0;
  while (((max_len < _len(prefix)) && (prefix[(()=>{const _mochi_idx = max_len; return _mochi_idx < 0 ? prefix.length + _mochi_idx : _mochi_idx;})()] < ceiling))) {
    max_len = (max_len + 1);
  }
  let L: number = max_len;
  while ((L > 0)) {
    let start: number = 0;
    while (((start + L) <= _len(primes))) {
      let s: bigint = (prefix[(()=>{const _mochi_idx = Math.trunc((start + L)); return _mochi_idx < 0 ? prefix.length + _mochi_idx : _mochi_idx;})()] - prefix[(()=>{const _mochi_idx = start; return _mochi_idx < 0 ? prefix.length + _mochi_idx : _mochi_idx;})()]);
      if ((s >= ceiling)) {
        break
      }
      if (prime_map[s]) {
        return s;
      }
      start = (start + 1);
    }
    L = (L - 1);
  }
  return 0;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let ans: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
ans = solution(1000000)
  console.log(_str(("solution() = " + _str(ans))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

