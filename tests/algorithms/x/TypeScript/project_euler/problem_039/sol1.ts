// Generated by Mochi v0.10.71 on 2025-08-23 15:52:58 GMT+7

function int_sqrt(n: number): number {
  let low: number = 0;
  let high: number = n;
  while ((low <= high)) {
    let mid: bigint = Math.trunc((low + high) / 2);
    let sq: bigint = (mid * mid);
    if ((sq === n)) {
      return mid;
    }
    if ((sq < n)) {
      low = (mid + 1);
    } else {
      high = (mid - 1);
    }
  }
  return high;
}
function pythagorean_triple(max_perimeter: number): Record<number, number> {
  let triplets: Record<number, number> = {};
  let base: number = 1;
  while ((base <= max_perimeter)) {
    let perpendicular: number = base;
    while ((perpendicular <= max_perimeter)) {
      let hyp_sq: bigint = ((base * base) + (perpendicular * perpendicular));
      let hyp: number = int_sqrt(hyp_sq);
      if (((hyp * hyp) === hyp_sq)) {
        let perimeter: bigint = ((base + perpendicular) + hyp);
        if ((perimeter <= max_perimeter)) {
          if ((perimeter in triplets)) {
            triplets[(()=>{const _mochi_idx = perimeter; return _mochi_idx < 0 ? triplets.length + _mochi_idx : _mochi_idx;})()] = (triplets[perimeter] + 1);
          } else {
            triplets[(()=>{const _mochi_idx = perimeter; return _mochi_idx < 0 ? triplets.length + _mochi_idx : _mochi_idx;})()] = 1;
          }
        }
      }
      perpendicular = (perpendicular + 1);
    }
    base = (base + 1);
  }
  return triplets;
}
function max_perimeter(counts: Record<number, number>): number {
  let best_p: number = 0;
  let max_count: number = 0;
  for (const p in counts) {
    let count = counts[p];
    if (((count > max_count) || ((count === max_count) && (p > best_p)))) {
      max_count = count;
      best_p = p;
    }
  }
  return best_p;
}
function solution(n: number): number {
  let triplets: Record<number, number> = pythagorean_triple(n);
  return max_perimeter(triplets);
}
function main() {
  let s200: number = max_perimeter(pythagorean_triple(200));
  let s100: number = max_perimeter(pythagorean_triple(100));
  console.log(_str(s100));
  console.log(_str(s200));
  let best: number = max_perimeter(pythagorean_triple(1000));
  console.log(_str(best));
  console.log(_str((("Perimeter " + _str(best)) + " has maximum solutions")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

