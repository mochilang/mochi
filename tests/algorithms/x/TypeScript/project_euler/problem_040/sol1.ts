// Generated by Mochi v0.10.59 on 2025-08-07 08:24:00 GMT+7

function solution(): number {
  let targets: number[] = [1, 10, 100, 1000, 10000, 100000, 1000000];
  let idx: number = 0;
  let product: number = 1;
  let count: number = 0;
  let i: number = 1;
  while ((idx < _len(targets))) {
    let s: string = _str(i);
    let j: number = 0;
    while ((j < _len(s))) {
      count = (count + 1);
      if ((count == targets[(idx) < 0 ? targets.length + (idx) : idx])) {
        product = (product * parseIntStr(s[(j) < 0 ? s.length + (j) : j], 10));
        idx = (idx + 1);
        if ((idx == _len(targets))) {
          break
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return product;
}
function test_solution() {
  if ((solution() != 210)) {
    _panic("solution failed");
  }
}
function main() {
  test_solution();
  console.log(_str(_str(solution())));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

