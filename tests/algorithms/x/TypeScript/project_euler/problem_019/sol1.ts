// Generated by Mochi v0.10.71 on 2025-08-23 15:51:05 GMT+7

function is_leap(year: number): boolean {
  if (((((year % 4) === 0) && ((year % 100) !== 0)) || ((year % 400) === 0))) {
    return true;
  }
  return false;
}
function count_sundays(): number {
  let days_per_month: number[] = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  let day: number = 6;
  let month: number = 1;
  let year: number = 1901;
  let sundays: number = 0;
  while ((year < 2001)) {
    day = (day + 7);
    if (is_leap(year)) {
      if (((day > days_per_month[(()=>{const _mochi_idx = Math.trunc((month - 1)); return _mochi_idx < 0 ? days_per_month.length + _mochi_idx : _mochi_idx;})()]) && (month !== 2))) {
        month = (month + 1);
        day = (day - days_per_month[(()=>{const _mochi_idx = Math.trunc((month - 2)); return _mochi_idx < 0 ? days_per_month.length + _mochi_idx : _mochi_idx;})()]);
      } else {
        if (((day > 29) && (month === 2))) {
          month = (month + 1);
          day = (day - 29);
        }
      }
    } else {
      if ((day > days_per_month[(()=>{const _mochi_idx = Math.trunc((month - 1)); return _mochi_idx < 0 ? days_per_month.length + _mochi_idx : _mochi_idx;})()])) {
        month = (month + 1);
        day = (day - days_per_month[(()=>{const _mochi_idx = Math.trunc((month - 2)); return _mochi_idx < 0 ? days_per_month.length + _mochi_idx : _mochi_idx;})()]);
      }
    }
    if ((month > 12)) {
      year = (year + 1);
      month = 1;
    }
    if (((year < 2001) && (day === 1))) {
      sundays = (sundays + 1);
    }
  }
  return sundays;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(count_sundays()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

