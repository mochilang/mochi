// Generated by Mochi v0.10.70 on 2025-08-22 15:35:20 GMT+7

function int_sqrt(n: number): number {
  let r: number = 0;
  while ((((r + 1) * (r + 1)) <= n)) {
    r = (r + 1);
  }
  return r;
}
function is_prime(_number: number): boolean {
  if (((1 < _number) && (_number < 4))) {
    return true;
  }
  if ((((_number < 2) || ((_number % 2) === 0)) || ((_number % 3) === 0))) {
    return false;
  }
  let i: number = 5;
  let limit: number = int_sqrt(_number);
  while ((i <= limit)) {
    if ((((_number % i) === 0) || ((_number % (i + 2)) === 0))) {
      return false;
    }
    i = (i + 6);
  }
  return true;
}
function compute_nums(n: number): number[] {
  if ((n <= 0)) {
    _panic("n must be >= 0");
  }
  let list_nums: number[] = [];
  let num: number = 3;
  while ((_len(list_nums) < n)) {
    if (!is_prime(num)) {
      let i: number = 0;
      let found: boolean = false;
      while ((((2 * i) * i) <= num)) {
        let rem = (num - ((2 * i) * i));
        if (is_prime(rem)) {
          found = true;
          break
        }
        i = (i + 1);
      }
      if (!found) {
        list_nums.push(num);
      }
    }
    num = (num + 2);
  }
  return list_nums;
}
function solution(): number {
  return compute_nums(1)[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? compute_nums(1).length + _mochi_idx : _mochi_idx;})()];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

