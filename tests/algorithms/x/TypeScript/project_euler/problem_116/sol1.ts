// Generated by Mochi v0.10.59 on 2025-08-07 08:54:38 GMT+7

function solution(length: number): number {
  let ways: number[][] = [];
  let i: number = 0;
  while ((i <= length)) {
    let row: number[] = [];
    row.push(0);
    row.push(0);
    row.push(0);
    ways.push(row);
    i = (i + 1);
  }
  let row_length: number = 0;
  while ((row_length <= length)) {
    let tile_length: number = 2;
    while ((tile_length <= 4)) {
      let tile_start: number = 0;
      while ((tile_start <= (row_length - tile_length))) {
        let remaining: number = ((row_length - tile_start) - tile_length);
        ways[(row_length) < 0 ? ways.length + (row_length) : row_length][((tile_length - 2)) < 0 ? ways[(row_length) < 0 ? ways.length + (row_length) : row_length].length + ((tile_length - 2)) : (tile_length - 2)] = ((ways[(row_length) < 0 ? ways.length + (row_length) : row_length][(Math.trunc((tile_length - 2))) < 0 ? ways[(row_length) < 0 ? ways.length + (row_length) : row_length].length + (Math.trunc((tile_length - 2))) : Math.trunc((tile_length - 2))] + ways[(remaining) < 0 ? ways.length + (remaining) : remaining][(Math.trunc((tile_length - 2))) < 0 ? ways[(remaining) < 0 ? ways.length + (remaining) : remaining].length + (Math.trunc((tile_length - 2))) : Math.trunc((tile_length - 2))]) + 1);
        tile_start = (tile_start + 1);
      }
      tile_length = (tile_length + 1);
    }
    row_length = (row_length + 1);
  }
  let total: number = 0;
  let j: number = 0;
  while ((j < 3)) {
    total = (total + ways[(length) < 0 ? ways.length + (length) : length][(j) < 0 ? ways[(length) < 0 ? ways.length + (length) : length].length + (j) : j]);
    j = (j + 1);
  }
  return total;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution(5)));
  console.log(_str(solution(50)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

