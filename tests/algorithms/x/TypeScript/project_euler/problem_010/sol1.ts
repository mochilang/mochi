// Generated by Mochi v0.10.59 on 2025-08-07 08:19:12 GMT+7

function is_prime(_number: number): boolean {
  if ((_number < 2)) {
    return false;
  }
  if ((_number < 4)) {
    return true;
  }
  if ((((_number % 2) == 0) || ((_number % 3) == 0))) {
    return false;
  }
  let i: number = 5;
  while (((i * i) <= _number)) {
    if ((((_number % i) == 0) || ((_number % (i + 2)) == 0))) {
      return false;
    }
    i = (i + 6);
  }
  return true;
}
function solution(n: number): number {
  if ((n <= 2)) {
    return 0;
  }
  let total: number = 2;
  let num: number = 3;
  while ((num < n)) {
    if (is_prime(num)) {
      total = (total + num);
    }
    num = (num + 2);
  }
  return total;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = solution(1000)
  console.log(_str(("solution() = " + _str(result))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

