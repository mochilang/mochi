// Generated by Mochi v0.10.59 on 2025-08-07 08:23:50 GMT+7

function join_digits(xs: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    s = (s + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return s;
}
function digits_to_int(xs: string[]): number {
  return Math.trunc(join_digits(xs));
}
function contains_int(xs: number[], value: number): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(i) < 0 ? xs.length + (i) : i] == value)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function remove_at(xs: string[], idx: number): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i != idx)) {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function is_combination_valid(comb: string[]): boolean {
  let prod: number = digits_to_int(comb.slice(5, 9));
  let mul2: number = digits_to_int(comb.slice(0, 2));
  let mul3: number = digits_to_int(comb.slice(2, 5));
  if (((mul2 * mul3) == prod)) {
    return true;
  }
  let mul1: number = digits_to_int(comb.slice(0, 1));
  let mul4: number = digits_to_int(comb.slice(1, 5));
  return ((mul1 * mul4) == prod);
}
function search(prefix: string[], remaining: string[], products: number[]): number[] {
  if ((_len(remaining) == 0)) {
    if (is_combination_valid(prefix)) {
      let p: number = digits_to_int(prefix.slice(5, 9));
      if (!contains_int(products, p)) {
        products.push(p);
      }
    }
    return products;
  }
  let i: number = 0;
  while ((i < _len(remaining))) {
    let next_prefix: any[] = [...prefix, remaining[(i) < 0 ? remaining.length + (i) : i]];
    let next_remaining: string[] = remove_at(remaining, i);
    products = search(next_prefix, next_remaining, products);
    i = (i + 1);
  }
  return products;
}
let digits: string[] = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
let products: number[] = [];
let total: number = 0;
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  products = search([], digits, products);
  while ((i < _len(products))) {
    total = (total + products[(i) < 0 ? products.length + (i) : i]);
    i = (i + 1);
  }
  console.log(_str(_str(total)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

