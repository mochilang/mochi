// Generated by Mochi v0.10.66 on 2025-08-16 12:46:20 GMT+7

function get_totients(max_one: number): number[] {
  let totients: number[] = [];
  let i: number = 0;
  while ((i < max_one)) {
    totients.push(i);
    i = (i + 1);
  }
  i = 2;
  while ((i < max_one)) {
    if ((totients[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? totients.length + _mochi_idx : _mochi_idx;})()] === i)) {
      let x: number = i;
      while ((x < max_one)) {
        totients[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? totients.length + _mochi_idx : _mochi_idx;})()] = (totients[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? totients.length + _mochi_idx : _mochi_idx;})()] - Math.trunc(totients[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? totients.length + _mochi_idx : _mochi_idx;})()] / i));
        x = (x + i);
      }
    }
    i = (i + 1);
  }
  return totients;
}
function has_same_digits(num1: number, num2: number): boolean {
  let count1: number[] = [];
  let count2: number[] = [];
  let i: number = 0;
  while ((i < 10)) {
    count1.push(0);
    count2.push(0);
    i = (i + 1);
  }
  let n1: number = num1;
  let n2: number = num2;
  if ((n1 === 0)) {
    count1[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? count1.length + _mochi_idx : _mochi_idx;})()] = (count1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count1.length + _mochi_idx : _mochi_idx;})()] + 1);
  }
  if ((n2 === 0)) {
    count2[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? count2.length + _mochi_idx : _mochi_idx;})()] = (count2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? count2.length + _mochi_idx : _mochi_idx;})()] + 1);
  }
  while ((n1 > 0)) {
    let d1: number = (n1 % 10);
    count1[(()=>{const _mochi_idx = d1; return _mochi_idx < 0 ? count1.length + _mochi_idx : _mochi_idx;})()] = (count1[(()=>{const _mochi_idx = d1; return _mochi_idx < 0 ? count1.length + _mochi_idx : _mochi_idx;})()] + 1);
    n1 = Math.trunc(n1 / 10);
  }
  while ((n2 > 0)) {
    let d2: number = (n2 % 10);
    count2[(()=>{const _mochi_idx = d2; return _mochi_idx < 0 ? count2.length + _mochi_idx : _mochi_idx;})()] = (count2[(()=>{const _mochi_idx = d2; return _mochi_idx < 0 ? count2.length + _mochi_idx : _mochi_idx;})()] + 1);
    n2 = Math.trunc(n2 / 10);
  }
  i = 0;
  while ((i < 10)) {
    if ((count1[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? count1.length + _mochi_idx : _mochi_idx;})()] !== count2[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? count2.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function solution(max_n: number): number {
  let min_numerator: number = 1;
  let min_denominator: number = 0;
  let totients: number[] = get_totients((max_n + 1));
  let i: number = 2;
  while ((i <= max_n)) {
    let t: number = totients[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? totients.length + _mochi_idx : _mochi_idx;})()];
    if ((((i * min_denominator) < (min_numerator * t)) && has_same_digits(i, t))) {
      min_numerator = i;
      min_denominator = t;
    }
    i = (i + 1);
  }
  return min_numerator;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(solution(10000)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

