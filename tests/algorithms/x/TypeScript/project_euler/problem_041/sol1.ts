// Generated by Mochi v0.10.59 on 2025-08-07 08:24:01 GMT+7

function is_prime(_number: number): boolean {
  if (((1 < _number) && (_number < 4))) {
    return true;
  } else {
    if ((((_number < 2) || ((_number % 2) == 0)) || ((_number % 3) == 0))) {
      return false;
    }
  }
  let i: number = 5;
  while (((i * i) <= _number)) {
    if ((((_number % i) == 0) || ((_number % (i + 2)) == 0))) {
      return false;
    }
    i = (i + 6);
  }
  return true;
}
function remove_at(xs: number[], index: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i != index)) {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function collect_primes(nums: number[], current: number, primes: number[]): number[] {
  if ((_len(nums) == 0)) {
    if (is_prime(current)) {
      primes.push(current);
    }
    return primes;
  }
  let i: number = 0;
  let res: number[] = primes;
  while ((i < _len(nums))) {
    let digit: number = nums[(i) < 0 ? nums.length + (i) : i];
    let remaining: number[] = remove_at(nums, i);
    res = collect_primes(remaining, ((current * 10) + digit), res);
    i = (i + 1);
  }
  return res;
}
function max_list(nums: number[]): number {
  let m: number = 0;
  let i: number = 0;
  while ((i < _len(nums))) {
    if ((nums[(i) < 0 ? nums.length + (i) : i] > m)) {
      m = nums[(i) < 0 ? nums.length + (i) : i];
    }
    i = (i + 1);
  }
  return m;
}
function solution(n: number): number {
  let digits: number[] = [];
  let i: number = 1;
  while ((i <= n)) {
    digits.push(i);
    i = (i + 1);
  }
  let primes: number[] = collect_primes(digits, 0, []);
  if ((_len(primes) == 0)) {
    return 0;
  }
  return max_list(primes);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("solution() = " + _str(solution(7)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

