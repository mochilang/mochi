// Generated by Mochi v0.10.59 on 2025-08-07 08:24:03 GMT+7

function is_substring_divisible(num: number[]): boolean {
  if (((num[(Math.trunc(3)) < 0 ? num.length + (Math.trunc(3)) : Math.trunc(3)] % 2) != 0)) {
    return false;
  }
  if (((((num[(Math.trunc(2)) < 0 ? num.length + (Math.trunc(2)) : Math.trunc(2)] + num[(Math.trunc(3)) < 0 ? num.length + (Math.trunc(3)) : Math.trunc(3)]) + num[(Math.trunc(4)) < 0 ? num.length + (Math.trunc(4)) : Math.trunc(4)]) % 3) != 0)) {
    return false;
  }
  if (((num[(Math.trunc(5)) < 0 ? num.length + (Math.trunc(5)) : Math.trunc(5)] % 5) != 0)) {
    return false;
  }
  let primes: number[] = [7, 11, 13, 17];
  let i: number = 0;
  while ((i < _len(primes))) {
    let p: number = primes[(i) < 0 ? primes.length + (i) : i];
    let idx: number = (i + 4);
    let val = (((num[(idx) < 0 ? num.length + (idx) : idx] * 100) + (num[(Math.trunc((idx + 1))) < 0 ? num.length + (Math.trunc((idx + 1))) : Math.trunc((idx + 1))] * 10)) + num[(Math.trunc((idx + 2))) < 0 ? num.length + (Math.trunc((idx + 2))) : Math.trunc((idx + 2))]);
    if (((val % p) != 0)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function remove_at(xs: number[], idx: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i != idx)) {
      res.push(xs[(i) < 0 ? xs.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
function digits_to_number(xs: number[]): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(xs))) {
    value = ((value * 10) + xs[(i) < 0 ? xs.length + (i) : i]);
    i = (i + 1);
  }
  return value;
}
function search(prefix: number[], remaining: number[]): number {
  if ((_len(remaining) == 0)) {
    if (is_substring_divisible(prefix)) {
      return digits_to_number(prefix);
    }
    return 0;
  }
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(remaining))) {
    let d: number = remaining[(i) < 0 ? remaining.length + (i) : i];
    let next_prefix: any[] = [...prefix, d];
    let next_remaining: number[] = remove_at(remaining, i);
    total = (total + search(next_prefix, next_remaining));
    i = (i + 1);
  }
  return total;
}
function solution(n: number): number {
  let digits: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    digits.push(i);
    i = (i + 1);
  }
  return search([], digits);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("solution() =") + " " + _str(solution(10)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

