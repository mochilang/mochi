// Generated by Mochi v0.10.59 on 2025-08-07 08:24:08 GMT+7

function run(n: number): number[] {
  let limit: number = 200000;
  let counts: Record<number, number> = {};
  let p: number = 2;
  while ((p <= limit)) {
    if (!(p in counts)) {
      let m: number = p;
      while ((m <= limit)) {
        if ((m in counts)) {
          counts[(m) < 0 ? counts.length + (m) : m] = (counts[(m) < 0 ? counts.length + (m) : m] + 1);
        } else {
          counts[(m) < 0 ? counts.length + (m) : m] = 1;
        }
        m = (m + p);
      }
    }
    p = (p + 1);
  }
  let streak: number = 0;
  let num: number = 2;
  while ((num <= limit)) {
    let c = ((num in counts) ? counts[(num) < 0 ? counts.length + (num) : num] : 0);
    if ((c == n)) {
      streak = (streak + 1);
      if ((streak == n)) {
        let result: number[] = [];
        let start = ((num - n) + 1);
        let j: number = 0;
        while ((j < n)) {
          result.push((start + j));
          j = (j + 1);
        }
        return result;
      }
    } else {
      streak = 0;
    }
    num = (num + 1);
  }
  return [];
}
function solution(n: number): number {
  let res: number[] = run(n);
  return res[(Math.trunc(0)) < 0 ? res.length + (Math.trunc(0)) : Math.trunc(0)];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(solution(4))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

