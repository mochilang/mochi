// Generated by Mochi v0.10.64 on 2025-08-13 07:27:58 GMT+7

function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let p: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 10.0);
    i = (i + 1);
  }
  return p;
}
function roundn(x: number, n: number): number {
  let m: number = pow10(n);
  return (Math.floor(((x * m) + 0.5)) / m);
}
function pad(signal: number[], target: number): number[] {
  let s: number[] = signal;
  while ((_len(s) < target)) {
    s.push(0.0);
  }
  return s;
}
function circular_convolution(a: number[], b: number[]): number[] {
  let n1: number = _len(a);
  let n2: number = _len(b);
  let n: number = ((n1 > n2) ? n1 : n2);
  let x: number[] = pad(a, n);
  let y: number[] = pad(b, n);
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    let sum: number = 0.0;
    let k: number = 0;
    while ((k < n)) {
      let j: number = ((i - k) % n);
      let idx: number = ((j < 0) ? (j + n) : j);
      sum = (sum + (x[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? x.length + _mochi_idx : _mochi_idx;})()] * y[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? y.length + _mochi_idx : _mochi_idx;})()]));
      k = (k + 1);
    }
    res.push(roundn(sum, 2));
    i = (i + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let example1: number[]
let example2: number[]
let example3: number[]
let example4: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
example1 = circular_convolution([2.0, 1.0, 2.0, -1.0], [1.0, 2.0, 3.0, 4.0])
  console.log(_str(example1));
example2 = circular_convolution([0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6], [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])
  console.log(_str(example2));
example3 = circular_convolution([-1.0, 1.0, 2.0, -2.0], [0.5, 1.0, -1.0, 2.0, 0.75])
  console.log(_str(example3));
example4 = circular_convolution([1.0, -1.0, 2.0, 3.0, -1.0], [1.0, 2.0, 3.0])
  console.log(_str(example4));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

