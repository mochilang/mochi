// Generated by Mochi v0.10.62 on 2025-08-09 10:35:47 GMT+7

function expApprox(x: number): number {
  let y: number = x;
  let is_neg: boolean = false;
  if ((x < 0.0)) {
    is_neg = true;
    y = -x;
  }
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 30)) {
    term = ((term * y) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  if (is_neg) {
    return (1.0 / sum);
  }
  return sum;
}
function round3(x: number): number {
  let scaled: number = (x * 1000.0);
  if ((scaled >= 0.0)) {
    scaled = (scaled + 0.5);
  } else {
    scaled = (scaled - 0.5);
  }
  let scaled_int: number = Math.trunc(scaled);
  return (scaled_int / 1000.0);
}
function charging_capacitor(source_voltage: number, resistance: number, capacitance: number, time_sec: number): number {
  if ((source_voltage <= 0.0)) {
    _panic("Source voltage must be positive.");
  }
  if ((resistance <= 0.0)) {
    _panic("Resistance must be positive.");
  }
  if ((capacitance <= 0.0)) {
    _panic("Capacitance must be positive.");
  }
  let exponent: number = (-time_sec / (resistance * capacitance));
  let voltage: number = (source_voltage * (1.0 - expApprox(exponent)));
  return round3(voltage);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(charging_capacitor(0.2, 0.9, 8.4, 0.5)));
  console.log(_str(charging_capacitor(2.2, 3.5, 2.4, 9.0)));
  console.log(_str(charging_capacitor(15.0, 200.0, 20.0, 2.0)));
  console.log(_str(charging_capacitor(20.0, 2000.0, 0.0003, 4.0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

