// Generated by Mochi v0.10.59 on 2025-08-06 21:52:50 GMT+7

let PI: number = 3.141592653589793;
function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function to_radians(deg: number): number {
  return ((deg * PI) / 180.0);
}
function sin_taylor(x: number): number {
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = (k1 + 1.0);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function rect(mag: number, angle: number): number[] {
  let c: number = cos_taylor(angle);
  let s: number = sin_taylor(angle);
  return [(mag * c), (mag * s)];
}
function multiply(a: number[], b: number[]): number[] {
  return [((a[(Math.trunc(0)) < 0 ? a.length + (Math.trunc(0)) : Math.trunc(0)] * b[(Math.trunc(0)) < 0 ? b.length + (Math.trunc(0)) : Math.trunc(0)]) - (a[(Math.trunc(1)) < 0 ? a.length + (Math.trunc(1)) : Math.trunc(1)] * b[(Math.trunc(1)) < 0 ? b.length + (Math.trunc(1)) : Math.trunc(1)])), ((a[(Math.trunc(0)) < 0 ? a.length + (Math.trunc(0)) : Math.trunc(0)] * b[(Math.trunc(1)) < 0 ? b.length + (Math.trunc(1)) : Math.trunc(1)]) + (a[(Math.trunc(1)) < 0 ? a.length + (Math.trunc(1)) : Math.trunc(1)] * b[(Math.trunc(0)) < 0 ? b.length + (Math.trunc(0)) : Math.trunc(0)]))];
}
function apparent_power(voltage: number, current: number, voltage_angle: number, current_angle: number): number[] {
  let vrad: number = to_radians(voltage_angle);
  let irad: number = to_radians(current_angle);
  let vrect: number[] = rect(voltage, vrad);
  let irect: number[] = rect(current, irad);
  let result: number[] = multiply(vrect, irect);
  return result;
}
function approx_equal(a: number[], b: number[], eps: number): boolean {
  return ((abs((a[(Math.trunc(0)) < 0 ? a.length + (Math.trunc(0)) : Math.trunc(0)] - b[(Math.trunc(0)) < 0 ? b.length + (Math.trunc(0)) : Math.trunc(0)])) < eps) && (abs((a[(Math.trunc(1)) < 0 ? a.length + (Math.trunc(1)) : Math.trunc(1)] - b[(Math.trunc(1)) < 0 ? b.length + (Math.trunc(1)) : Math.trunc(1)])) < eps));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

