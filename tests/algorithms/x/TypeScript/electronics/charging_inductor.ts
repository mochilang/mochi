// Generated by Mochi v0.10.64 on 2025-08-13 16:12:47 GMT+7

function expApprox(x: number): number {
  if ((x < 0.0)) {
    return (1.0 / expApprox(-x));
  }
  if ((x > 1.0)) {
    let half: number = expApprox((x / 2.0));
    return (half * half);
  }
  let sum: number = 1.0;
  let term: number = 1.0;
  let n: number = 1;
  while ((n < 20)) {
    term = ((term * x) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 10.0);
    i = (i + 1);
  }
  return result;
}
function round(x: number, n: number): number {
  let m: number = pow10(n);
  return (Math.floor(((x * m) + 0.5)) / m);
}
function charging_inductor(source_voltage: number, resistance: number, inductance: number, time: number): number {
  if ((source_voltage <= 0.0)) {
    _panic("Source voltage must be positive.");
  }
  if ((resistance <= 0.0)) {
    _panic("Resistance must be positive.");
  }
  if ((inductance <= 0.0)) {
    _panic("Inductance must be positive.");
  }
  let exponent: number = ((-time * resistance) / inductance);
  let current: number = ((source_voltage / resistance) * (1.0 - expApprox(exponent)));
  return round(current, 3);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(charging_inductor(5.8, 1.5, 2.3, 2.0)));
  console.log(_str(charging_inductor(8.0, 5.0, 3.0, 2.0)));
  console.log(_str(charging_inductor(8.0, (5.0 * pow10(2)), 3.0, 2.0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

