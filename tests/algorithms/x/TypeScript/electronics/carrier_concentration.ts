// Generated by Mochi v0.10.61 on 2025-08-08 17:59:59 GMT+7

export interface CarrierResult { name: string; value: number }
function sqrtApprox(x: number): number {
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function carrier_concentration(electron_conc: number, hole_conc: number, intrinsic_conc: number): CarrierResult {
  let zero_count: number = 0;
  if ((electron_conc == 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((hole_conc == 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((intrinsic_conc == 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((zero_count != 1)) {
    _panic("You cannot supply more or less than 2 values");
  }
  if ((electron_conc < 0.0)) {
    _panic("Electron concentration cannot be negative in a semiconductor");
  }
  if ((hole_conc < 0.0)) {
    _panic("Hole concentration cannot be negative in a semiconductor");
  }
  if ((intrinsic_conc < 0.0)) {
    _panic("Intrinsic concentration cannot be negative in a semiconductor");
  }
  if ((electron_conc == 0.0)) {
    return {"name": "electron_conc", "value": ((intrinsic_conc * intrinsic_conc) / hole_conc)};
  }
  if ((hole_conc == 0.0)) {
    return {"name": "hole_conc", "value": ((intrinsic_conc * intrinsic_conc) / electron_conc)};
  }
  if ((intrinsic_conc == 0.0)) {
    return {"name": "intrinsic_conc", "value": sqrtApprox((electron_conc * hole_conc))};
  }
  return {"name": "", "value": -1.0};
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r1: CarrierResult
let r2: CarrierResult
let r3: CarrierResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = carrier_concentration(25.0, 100.0, 0.0)
  console.log(_str(((r1.name + ", ") + _str(r1.value))));
r2 = carrier_concentration(0.0, 1600.0, 200.0)
  console.log(_str(((r2.name + ", ") + _str(r2.value))));
r3 = carrier_concentration(1000.0, 0.0, 1200.0)
  console.log(_str(((r3.name + ", ") + _str(r3.value))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

