// Generated by Mochi v0.10.64 on 2025-08-13 16:12:43 GMT+7

function pow10(n: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    result = (result * 10.0);
    i = (i + 1);
  }
  return result;
}
let TEMPERATURE: number = 300.0;
function ln_series(x: number): number {
  let t: number = ((x - 1.0) / (x + 1.0));
  let term: number = t;
  let sum: number = 0.0;
  let n: number = 1;
  while ((n <= 19)) {
    sum = (sum + (term / n));
    term = ((term * t) * t);
    n = (n + 2);
  }
  return (2.0 * sum);
}
function ln(x: number): number {
  return Math.log(x);
}
function builtin_voltage(donor_conc: number, acceptor_conc: number, intrinsic_conc: number): number {
  if ((donor_conc <= 0.0)) {
    _panic("Donor concentration should be positive");
  }
  if ((acceptor_conc <= 0.0)) {
    _panic("Acceptor concentration should be positive");
  }
  if ((intrinsic_conc <= 0.0)) {
    _panic("Intrinsic concentration should be positive");
  }
  if ((donor_conc <= intrinsic_conc)) {
    _panic("Donor concentration should be greater than intrinsic concentration");
  }
  if ((acceptor_conc <= intrinsic_conc)) {
    _panic("Acceptor concentration should be greater than intrinsic concentration");
  }
  return (((BOLTZMANN * TEMPERATURE) * ln(((donor_conc * acceptor_conc) / (intrinsic_conc * intrinsic_conc)))) / ELECTRON_VOLT);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let BOLTZMANN: number
let ELECTRON_VOLT: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
BOLTZMANN = (1.380649 / pow10(23))
ELECTRON_VOLT = (1.602176634 / pow10(19))
  console.log(_str(builtin_voltage(pow10(17), pow10(17), pow10(10))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

