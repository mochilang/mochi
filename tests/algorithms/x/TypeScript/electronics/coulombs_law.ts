// Generated by Mochi v0.10.64 on 2025-08-13 16:12:49 GMT+7

let COULOMBS_CONSTANT: number = 8988000000.0;
function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function coulombs_law(force: number, charge1: number, charge2: number, distance: number): Record<string, number> {
  let charge_product = abs((charge1 * charge2));
  let zero_count: number = 0;
  if ((force === 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((charge1 === 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((charge2 === 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((distance === 0.0)) {
    zero_count = (zero_count + 1);
  }
  if ((zero_count !== 1)) {
    _panic("One and only one argument must be 0");
  }
  if ((distance < 0.0)) {
    _panic("Distance cannot be negative");
  }
  if ((force === 0.0)) {
    let f = ((COULOMBS_CONSTANT * charge_product) / (distance * distance));
    return {force: f};
  }
  if ((charge1 === 0.0)) {
    let c1 = ((abs(force) * (distance * distance)) / (COULOMBS_CONSTANT * charge2));
    return {charge1: c1};
  }
  if ((charge2 === 0.0)) {
    let c2 = ((abs(force) * (distance * distance)) / (COULOMBS_CONSTANT * charge1));
    return {charge2: c2};
  }
  let d = sqrtApprox(((COULOMBS_CONSTANT * charge_product) / abs(force)));
  return {distance: d};
}
function print_map(m: Record<string, number>) {
  for (const k in m) {
    console.log(_str((((("{\"" + k) + "\": ") + _str(m[k])) + "}")));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0));
  print_map(coulombs_law(10.0, 3.0, 5.0, 0.0));
  print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

