// Generated by Mochi v0.10.61 on 2025-08-08 18:00:05 GMT+7

export interface Result { name: string; value: number }
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function pow10(n: number): number {
  let p: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 10.0);
    i = (i + 1);
  }
  return p;
}
function round_to(x: number, n: number): number {
  let m: number = pow10(n);
  return (Math.floor(((x * m) + 0.5)) / m);
}
function electric_power(voltage: number, current: number, power: number): Result {
  let zeros: number = 0;
  if ((voltage == 0.0)) {
    zeros = (zeros + 1);
  }
  if ((current == 0.0)) {
    zeros = (zeros + 1);
  }
  if ((power == 0.0)) {
    zeros = (zeros + 1);
  }
  if ((zeros != 1)) {
    _panic("Exactly one argument must be 0");
  } else {
    if ((power < 0.0)) {
      _panic("Power cannot be negative in any electrical/electronics system");
    } else {
      if ((voltage == 0.0)) {
        return {"name": "voltage", "value": (power / current)};
      } else {
        if ((current == 0.0)) {
          return {"name": "current", "value": (power / voltage)};
        } else {
          if ((power == 0.0)) {
            let p: number = absf((voltage * current));
            return {"name": "power", "value": round_to(p, 2)};
          } else {
            _panic("Unhandled case");
          }
        }
      }
    }
  }
}
function str_result(r: Result): string {
  return (((("Result(name='" + r.name) + "', value=") + _str(r.value)) + ")");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let r1: Result
let r2: Result
let r3: Result
let r4: Result
let r5: Result
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = electric_power(0.0, 2.0, 5.0)
  console.log(_str(str_result(r1)));
r2 = electric_power(2.0, 2.0, 0.0)
  console.log(_str(str_result(r2)));
r3 = electric_power(-2.0, 3.0, 0.0)
  console.log(_str(str_result(r3)));
r4 = electric_power(2.2, 2.2, 0.0)
  console.log(_str(str_result(r4)));
r5 = electric_power(2.0, 0.0, 6.0)
  console.log(_str(str_result(r5)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

