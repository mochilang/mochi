// Generated by Mochi v0.10.61 on 2025-08-08 18:00:35 GMT+7

let PI: number = 3.141592653589793;
let AXIS_A: number = 6378137.0;
let AXIS_B: number = 6.356752314245e+06;
let RADIUS: number = 6378137.0;
function to_radians(deg: number): number {
  return ((deg * PI) / 180.0);
}
function sin_taylor(x: number): number {
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = (k1 + 1.0);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function tan_approx(x: number): number {
  return (sin_taylor(x) / cos_taylor(x));
}
function sqrtApprox(x: number): number {
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function atanApprox(x: number): number {
  if ((x > 1.0)) {
    return ((PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  if ((x < -1.0)) {
    return ((-PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  return (x / (1.0 + ((0.28 * x) * x)));
}
function atan2Approx(y: number, x: number): number {
  if ((x > 0.0)) {
    let val: number = atanApprox((y / x));
    return val;
  }
  if ((x < 0.0)) {
    if ((y >= 0.0)) {
      return (atanApprox((y / x)) + PI);
    }
    return (atanApprox((y / x)) - PI);
  }
  if ((y > 0.0)) {
    return (PI / 2.0);
  }
  if ((y < 0.0)) {
    return (-PI / 2.0);
  }
  return 0.0;
}
function asinApprox(x: number): number {
  let denom = sqrtApprox((1.0 - (x * x)));
  let res = atan2Approx(x, denom);
  return res;
}
function haversine_distance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  let flattening: number = ((AXIS_A - AXIS_B) / AXIS_A);
  let phi_1: number = atanApprox(((1.0 - flattening) * tan_approx(to_radians(lat1))));
  let phi_2: number = atanApprox(((1.0 - flattening) * tan_approx(to_radians(lat2))));
  let lambda_1: number = to_radians(lon1);
  let lambda_2: number = to_radians(lon2);
  let sin_sq_phi: number = sin_taylor(((phi_2 - phi_1) / 2.0));
  let sin_sq_lambda: number = sin_taylor(((lambda_2 - lambda_1) / 2.0));
  sin_sq_phi = (sin_sq_phi * sin_sq_phi);
  sin_sq_lambda = (sin_sq_lambda * sin_sq_lambda);
  let h_value: number = sqrtApprox((sin_sq_phi + ((cos_taylor(phi_1) * cos_taylor(phi_2)) * sin_sq_lambda)));
  return ((2.0 * RADIUS) * asinApprox(h_value));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let SAN_FRANCISCO: number[]
let YOSEMITE: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
SAN_FRANCISCO = [37.774856, -122.424227]
YOSEMITE = [37.864742, -119.537521]
  console.log(_str(_str(haversine_distance(SAN_FRANCISCO[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? SAN_FRANCISCO.length + _mochi_idx : _mochi_idx;})()], SAN_FRANCISCO[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? SAN_FRANCISCO.length + _mochi_idx : _mochi_idx;})()], YOSEMITE[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? YOSEMITE.length + _mochi_idx : _mochi_idx;})()], YOSEMITE[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? YOSEMITE.length + _mochi_idx : _mochi_idx;})()]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

