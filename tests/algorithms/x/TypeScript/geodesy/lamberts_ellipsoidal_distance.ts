// Generated by Mochi v0.10.61 on 2025-08-08 18:00:36 GMT+7

let PI: number = 3.141592653589793;
let EQUATORIAL_RADIUS: number = 6378137.0;
function to_radians(deg: number): number {
  return ((deg * PI) / 180.0);
}
function sin_approx(x: number): number {
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = (k1 + 1.0);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_approx(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function sqrt_approx(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function lamberts_ellipsoidal_distance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  let phi1: number = to_radians(lat1);
  let phi2: number = to_radians(lat2);
  let lambda1: number = to_radians(lon1);
  let lambda2: number = to_radians(lon2);
  let x: number = ((lambda2 - lambda1) * cos_approx(((phi1 + phi2) / 2.0)));
  let y: number = (phi2 - phi1);
  return (EQUATORIAL_RADIUS * sqrt_approx(((x * x) + (y * y))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(lamberts_ellipsoidal_distance(37.774856, -122.424227, 37.864742, -119.537521)));
  console.log(_str(lamberts_ellipsoidal_distance(37.774856, -122.424227, 40.713019, -74.012647)));
  console.log(_str(lamberts_ellipsoidal_distance(37.774856, -122.424227, 45.443012, 12.313071)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

