// Generated by Mochi v0.10.61 on 2025-08-08 17:05:45 GMT+7

function rgb_to_gray(rgb: number[][][]): number[][] {
  let gray: number[][] = [];
  let i: number = 0;
  while ((i < _len(rgb))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()]))) {
      let r: number = rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let g: number = rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let b: number = rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let value: number = (((0.2989 * r) + (0.587 * g)) + (0.114 * b));
      row.push(value);
      j = (j + 1);
    }
    gray.push(row);
    i = (i + 1);
  }
  return gray;
}
function gray_to_binary(gray: number[][]): boolean[][] {
  let binary: boolean[][] = [];
  let i: number = 0;
  while ((i < _len(gray))) {
    let row: boolean[] = [];
    let j: number = 0;
    while ((j < _len(gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push(((gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > 127.0) && (gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] <= 255.0)));
      j = (j + 1);
    }
    binary.push(row);
    i = (i + 1);
  }
  return binary;
}
function erosion(image: boolean[][], kernel: number[][]): boolean[][] {
  let h: number = _len(image);
  let w: number = _len(image[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()]);
  let k_h: number = _len(kernel);
  let k_w: number = _len(kernel[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()]);
  let pad_y: number = Math.trunc(k_h / 2);
  let pad_x: number = Math.trunc(k_w / 2);
  let padded: boolean[][] = [];
  let y: number = 0;
  while ((y < (h + (2 * pad_y)))) {
    let row: boolean[] = [];
    let x: number = 0;
    while ((x < (w + (2 * pad_x)))) {
      row.push(false);
      x = (x + 1);
    }
    padded.push(row);
    y = (y + 1);
  }
  y = 0;
  while ((y < h)) {
    let x: number = 0;
    while ((x < w)) {
      padded[(()=>{const _mochi_idx = (pad_y + y); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (pad_x + x); return _mochi_idx < 0 ? padded[(()=>{const _mochi_idx = (pad_y + y); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = image[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? image[(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      x = (x + 1);
    }
    y = (y + 1);
  }
  let output: boolean[][] = [];
  y = 0;
  while ((y < h)) {
    let row_out: boolean[] = [];
    let x: number = 0;
    while ((x < w)) {
      let sum: number = 0;
      let ky: number = 0;
      while ((ky < k_h)) {
        let kx: number = 0;
        while ((kx < k_w)) {
          if (((kernel[(()=>{const _mochi_idx = ky; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = kx; return _mochi_idx < 0 ? kernel[(()=>{const _mochi_idx = ky; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1) && padded[(()=>{const _mochi_idx = Math.trunc((y + ky)); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((x + kx)); return _mochi_idx < 0 ? padded[(()=>{const _mochi_idx = Math.trunc((y + ky)); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
            sum = (sum + 1);
          }
          kx = (kx + 1);
        }
        ky = (ky + 1);
      }
      row_out.push((sum == 5));
      x = (x + 1);
    }
    output.push(row_out);
    y = (y + 1);
  }
  return output;
}
let rgb_img: number[][][] = [[[127, 255, 0]]];
let gray_img: number[][] = [[127.0, 255.0, 0.0]];
let img1: boolean[][] = [[true, true, false]];
let kernel1: number[][] = [[0, 1, 0]];
let img2: boolean[][] = [[true, false, false]];
let kernel2: number[][] = [[1, 1, 0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(rgb_to_gray(rgb_img))));
  console.log(_str(_str(gray_to_binary(gray_img))));
  console.log(_str(_str(erosion(img1, kernel1))));
  console.log(_str(_str(erosion(img2, kernel2))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

