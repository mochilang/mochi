// Generated by Mochi v0.10.59 on 2025-08-06 21:51:13 GMT+7

function rgb_to_gray(rgb: number[][][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(rgb))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(rgb[(i) < 0 ? rgb.length + (i) : i]))) {
      let r: number = rgb[(i) < 0 ? rgb.length + (i) : i][(j) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i].length + (j) : j][(Math.trunc(0)) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i][(j) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i].length + (j) : j].length + (Math.trunc(0)) : Math.trunc(0)];
      let g: number = rgb[(i) < 0 ? rgb.length + (i) : i][(j) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i].length + (j) : j][(Math.trunc(1)) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i][(j) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i].length + (j) : j].length + (Math.trunc(1)) : Math.trunc(1)];
      let b: number = rgb[(i) < 0 ? rgb.length + (i) : i][(j) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i].length + (j) : j][(Math.trunc(2)) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i][(j) < 0 ? rgb[(i) < 0 ? rgb.length + (i) : i].length + (j) : j].length + (Math.trunc(2)) : Math.trunc(2)];
      let gray: number = (((0.2989 * (1.0 * r)) + (0.587 * (1.0 * g))) + (0.114 * (1.0 * b)));
      row.push(gray);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function gray_to_binary(gray: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(gray))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(gray[(i) < 0 ? gray.length + (i) : i]))) {
      let v: number = gray[(i) < 0 ? gray.length + (i) : i][(j) < 0 ? gray[(i) < 0 ? gray.length + (i) : i].length + (j) : j];
      if (((v > 127.0) && (v <= 255.0))) {
        row.push(1);
      } else {
        row.push(0);
      }
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function dilation(image: number[][], kernel: number[][]): number[][] {
  let img_h: number = _len(image);
  let img_w: number = _len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)]);
  let k_h: number = _len(kernel);
  let k_w: number = _len(kernel[(Math.trunc(0)) < 0 ? kernel.length + (Math.trunc(0)) : Math.trunc(0)]);
  let pad_h: number = Math.trunc(k_h / 2);
  let pad_w: number = Math.trunc(k_w / 2);
  let p_h: number = (img_h + (2 * pad_h));
  let p_w: number = (img_w + (2 * pad_w));
  let padded: number[][] = [];
  let i: number = 0;
  while ((i < p_h)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < p_w)) {
      row.push(0);
      j = (j + 1);
    }
    padded.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i < img_h)) {
    let j: number = 0;
    while ((j < img_w)) {
      padded[((pad_h + i)) < 0 ? padded.length + ((pad_h + i)) : (pad_h + i)][((pad_w + j)) < 0 ? padded[((pad_h + i)) < 0 ? padded.length + ((pad_h + i)) : (pad_h + i)].length + ((pad_w + j)) : (pad_w + j)] = image[(i) < 0 ? image.length + (i) : i][(j) < 0 ? image[(i) < 0 ? image.length + (i) : i].length + (j) : j];
      j = (j + 1);
    }
    i = (i + 1);
  }
  let output: number[][] = [];
  i = 0;
  while ((i < img_h)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < img_w)) {
      let sum: number = 0;
      let ky: number = 0;
      while ((ky < k_h)) {
        let kx: number = 0;
        while ((kx < k_w)) {
          if ((kernel[(ky) < 0 ? kernel.length + (ky) : ky][(kx) < 0 ? kernel[(ky) < 0 ? kernel.length + (ky) : ky].length + (kx) : kx] == 1)) {
            sum = (sum + padded[(Math.trunc((i + ky))) < 0 ? padded.length + (Math.trunc((i + ky))) : Math.trunc((i + ky))][(Math.trunc((j + kx))) < 0 ? padded[(Math.trunc((i + ky))) < 0 ? padded.length + (Math.trunc((i + ky))) : Math.trunc((i + ky))].length + (Math.trunc((j + kx))) : Math.trunc((j + kx))]);
          }
          kx = (kx + 1);
        }
        ky = (ky + 1);
      }
      if ((sum > 0)) {
        row.push(1);
      } else {
        row.push(0);
      }
      j = (j + 1);
    }
    output.push(row);
    i = (i + 1);
  }
  return output;
}
function print_float_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(mat[(i) < 0 ? mat.length + (i) : i]))) {
      line = (line + _str(mat[(i) < 0 ? mat.length + (i) : i][(j) < 0 ? mat[(i) < 0 ? mat.length + (i) : i].length + (j) : j]));
      if ((j < (_len(mat[(i) < 0 ? mat.length + (i) : i]) - 1))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
function print_int_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(mat[(i) < 0 ? mat.length + (i) : i]))) {
      line = (line + _str(mat[(i) < 0 ? mat.length + (i) : i][(j) < 0 ? mat[(i) < 0 ? mat.length + (i) : i].length + (j) : j]));
      if ((j < (_len(mat[(i) < 0 ? mat.length + (i) : i]) - 1))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
function main() {
  let rgb_example: number[][][] = [[[127, 255, 0]]];
  print_float_matrix(rgb_to_gray(rgb_example));
  let gray_example: number[][] = [[26.0, 255.0, 14.0], [5.0, 147.0, 20.0], [1.0, 200.0, 0.0]];
  print_int_matrix(gray_to_binary(gray_example));
  let binary_image: number[][] = [[0, 1, 0], [0, 1, 0], [0, 1, 0]];
  let kernel: number[][] = [[0, 1, 0], [1, 1, 1], [0, 1, 0]];
  print_int_matrix(dilation(binary_image, kernel));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

