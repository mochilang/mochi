// Generated by Mochi v0.10.61 on 2025-08-08 17:05:44 GMT+7

function rgb_to_gray(rgb: number[][][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(rgb))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()]))) {
      let r: number = rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let g: number = rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let b: number = rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rgb[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? rgb.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let gray: number = (((0.2989 * (1.0 * r)) + (0.587 * (1.0 * g))) + (0.114 * (1.0 * b)));
      row.push(gray);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function gray_to_binary(gray: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(gray))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()]))) {
      let v: number = gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? gray[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? gray.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if (((v > 127.0) && (v <= 255.0))) {
        row.push(1);
      } else {
        row.push(0);
      }
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function dilation(image: number[][], kernel: number[][]): number[][] {
  let img_h: number = _len(image);
  let img_w: number = _len(image[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()]);
  let k_h: number = _len(kernel);
  let k_w: number = _len(kernel[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()]);
  let pad_h: number = Math.trunc(k_h / 2);
  let pad_w: number = Math.trunc(k_w / 2);
  let p_h: number = (img_h + (2 * pad_h));
  let p_w: number = (img_w + (2 * pad_w));
  let padded: number[][] = [];
  let i: number = 0;
  while ((i < p_h)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < p_w)) {
      row.push(0);
      j = (j + 1);
    }
    padded.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i < img_h)) {
    let j: number = 0;
    while ((j < img_w)) {
      padded[(()=>{const _mochi_idx = (pad_h + i); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (pad_w + j); return _mochi_idx < 0 ? padded[(()=>{const _mochi_idx = (pad_h + i); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      j = (j + 1);
    }
    i = (i + 1);
  }
  let output: number[][] = [];
  i = 0;
  while ((i < img_h)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < img_w)) {
      let sum: number = 0;
      let ky: number = 0;
      while ((ky < k_h)) {
        let kx: number = 0;
        while ((kx < k_w)) {
          if ((kernel[(()=>{const _mochi_idx = ky; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = kx; return _mochi_idx < 0 ? kernel[(()=>{const _mochi_idx = ky; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1)) {
            sum = (sum + padded[(()=>{const _mochi_idx = Math.trunc((i + ky)); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + kx)); return _mochi_idx < 0 ? padded[(()=>{const _mochi_idx = Math.trunc((i + ky)); return _mochi_idx < 0 ? padded.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
          }
          kx = (kx + 1);
        }
        ky = (ky + 1);
      }
      if ((sum > 0)) {
        row.push(1);
      } else {
        row.push(0);
      }
      j = (j + 1);
    }
    output.push(row);
    i = (i + 1);
  }
  return output;
}
function print_float_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
      line = (line + _str(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      if ((j < (_len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]) - 1))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
function print_int_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
      line = (line + _str(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      if ((j < (_len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]) - 1))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
function main() {
  let rgb_example: number[][][] = [[[127, 255, 0]]];
  print_float_matrix(rgb_to_gray(rgb_example));
  let gray_example: number[][] = [[26.0, 255.0, 14.0], [5.0, 147.0, 20.0], [1.0, 200.0, 0.0]];
  print_int_matrix(gray_to_binary(gray_example));
  let binary_image: number[][] = [[0, 1, 0], [0, 1, 0], [0, 1, 0]];
  let kernel: number[][] = [[0, 1, 0], [1, 1, 1], [0, 1, 0]];
  print_int_matrix(dilation(binary_image, kernel));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

