// Generated by Mochi v0.10.59 on 2025-08-06 21:51:18 GMT+7

function normalize(value: number): number {
  if ((value > 255)) {
    return 255;
  }
  return value;
}
function to_grayscale(blue: number, green: number, red: number): number {
  let gs: number = (((0.2126 * red) + (0.587 * green)) + (0.114 * blue));
  return Math.trunc(gs);
}
function make_sepia(img: number[][][], factor: number): number[][][] {
  let pixel_h: number = _len(img);
  let pixel_v: number = _len(img[(Math.trunc(0)) < 0 ? img.length + (Math.trunc(0)) : Math.trunc(0)]);
  let i: number = 0;
  while ((i < pixel_h)) {
    let j: number = 0;
    while ((j < pixel_v)) {
      let pixel: number[] = img[(i) < 0 ? img.length + (i) : i][(j) < 0 ? img[(i) < 0 ? img.length + (i) : i].length + (j) : j];
      let grey: number = to_grayscale(pixel[(Math.trunc(0)) < 0 ? pixel.length + (Math.trunc(0)) : Math.trunc(0)], pixel[(Math.trunc(1)) < 0 ? pixel.length + (Math.trunc(1)) : Math.trunc(1)], pixel[(Math.trunc(2)) < 0 ? pixel.length + (Math.trunc(2)) : Math.trunc(2)]);
      img[(i) < 0 ? img.length + (i) : i][(j) < 0 ? img[(i) < 0 ? img.length + (i) : i].length + (j) : j] = [normalize(grey), normalize((grey + factor)), normalize((grey + (2 * factor)))];
      j = (j + 1);
    }
    i = (i + 1);
  }
  return img;
}
let image: number[][][] = [[[10, 20, 30], [40, 50, 60]], [[70, 80, 90], [200, 150, 100]]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let sepia: number[][][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
sepia = make_sepia(image, 20)
  console.log(_str(_str(sepia)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

