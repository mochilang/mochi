// Generated by Mochi v0.10.59 on 2025-08-06 21:51:16 GMT+7

function zeros3d(h: number, w: number, c: number): number[][][] {
  let arr: number[][][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[][] = [];
    let x: number = 0;
    while ((x < w)) {
      let pixel: number[] = [];
      let k: number = 0;
      while ((k < c)) {
        pixel.push(0);
        k = (k + 1);
      }
      row.push(pixel);
      x = (x + 1);
    }
    arr.push(row);
    y = (y + 1);
  }
  return arr;
}
function resize_nn(img: number[][][], dst_w: number, dst_h: number): number[][][] {
  let src_h: number = _len(img);
  let src_w: number = _len(img[(Math.trunc(0)) < 0 ? img.length + (Math.trunc(0)) : Math.trunc(0)]);
  let channels: number = _len(img[(Math.trunc(0)) < 0 ? img.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? img[(Math.trunc(0)) < 0 ? img.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)]);
  let ratio_x: number = (src_w / dst_w);
  let ratio_y: number = (src_h / dst_h);
  let out: number[][][] = zeros3d(dst_h, dst_w, channels);
  let i: number = 0;
  while ((i < dst_h)) {
    let j: number = 0;
    while ((j < dst_w)) {
      let src_x: number = Math.trunc((ratio_x * j));
      let src_y: number = Math.trunc((ratio_y * i));
      out[(i) < 0 ? out.length + (i) : i][(j) < 0 ? out[(i) < 0 ? out.length + (i) : i].length + (j) : j] = img[(src_y) < 0 ? img.length + (src_y) : src_y][(src_x) < 0 ? img[(src_y) < 0 ? img.length + (src_y) : src_y].length + (src_x) : src_x];
      j = (j + 1);
    }
    i = (i + 1);
  }
  return out;
}
function main() {
  let img: number[][][] = [[[0, 0, 0], [255, 255, 255]], [[255, 0, 0], [0, 255, 0]]];
  let resized: number[][][] = resize_nn(img, 4, 4);
  console.log(_str("[" + (resized).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

