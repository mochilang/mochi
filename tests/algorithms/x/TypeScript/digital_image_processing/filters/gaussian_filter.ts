// Generated by Mochi v0.10.61 on 2025-08-08 17:05:33 GMT+7

let PI: number = 3.141592653589793;
function expApprox(x: number): number {
  let sum: number = 1.0;
  let term: number = 1.0;
  let n: number = 1;
  while ((n < 10)) {
    term = ((term * x) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function gen_gaussian_kernel(k_size: number, sigma: number): number[][] {
  let center: number = Math.trunc(k_size / 2);
  let kernel: number[][] = [];
  let i: number = 0;
  while ((i < k_size)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < k_size)) {
      let x: number = (i - center);
      let y: number = (j - center);
      let exponent: number = -(((x * x) + (y * y)) / ((2.0 * sigma) * sigma));
      let value: number = ((1.0 / ((2.0 * PI) * sigma)) * expApprox(exponent));
      row.push(value);
      j = (j + 1);
    }
    kernel.push(row);
    i = (i + 1);
  }
  return kernel;
}
function gaussian_filter(image: number[][], k_size: number, sigma: number): number[][] {
  let height: number = _len(image);
  let width: number = _len(image[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()]);
  let dst_height: number = ((height - k_size) + 1);
  let dst_width: number = ((width - k_size) + 1);
  let kernel: number[][] = gen_gaussian_kernel(k_size, sigma);
  let dst: number[][] = [];
  let i: number = 0;
  while ((i < dst_height)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < dst_width)) {
      let sum: number = 0.0;
      let ki: number = 0;
      while ((ki < k_size)) {
        let kj: number = 0;
        while ((kj < k_size)) {
          sum = (sum + (image[(()=>{const _mochi_idx = Math.trunc((i + ki)); return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + kj)); return _mochi_idx < 0 ? image[(()=>{const _mochi_idx = Math.trunc((i + ki)); return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * kernel[(()=>{const _mochi_idx = ki; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = kj; return _mochi_idx < 0 ? kernel[(()=>{const _mochi_idx = ki; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
          kj = (kj + 1);
        }
        ki = (ki + 1);
      }
      row.push(Math.trunc(sum));
      j = (j + 1);
    }
    dst.push(row);
    i = (i + 1);
  }
  return dst;
}
function print_image(image: number[][]) {
  let i: number = 0;
  while ((i < _len(image))) {
    console.log(_str("[" + (image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()]).join(' ') + "]"));
    i = (i + 1);
  }
}
let img: number[][] = [[52, 55, 61, 59, 79], [62, 59, 55, 104, 94], [63, 65, 66, 113, 144], [68, 70, 70, 126, 154], [70, 72, 69, 128, 155]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let gaussian3: number[][]
let gaussian5: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
gaussian3 = gaussian_filter(img, 3, 1.0)
gaussian5 = gaussian_filter(img, 5, 0.8)
  print_image(gaussian3);
  print_image(gaussian5);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

