// Generated by Mochi v0.10.59 on 2025-08-06 21:51:05 GMT+7

function get_neighbors_pixel(image: number[][], x: number, y: number, center: number): number {
  if (((x < 0) || (y < 0))) {
    return 0;
  }
  if (((x >= _len(image)) || (y >= _len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)])))) {
    return 0;
  }
  if ((image[(x) < 0 ? image.length + (x) : x][(y) < 0 ? image[(x) < 0 ? image.length + (x) : x].length + (y) : y] >= center)) {
    return 1;
  }
  return 0;
}
function local_binary_value(image: number[][], x: number, y: number): number {
  let center: number = image[(x) < 0 ? image.length + (x) : x][(y) < 0 ? image[(x) < 0 ? image.length + (x) : x].length + (y) : y];
  let powers: number[] = [1, 2, 4, 8, 16, 32, 64, 128];
  let neighbors: number[] = [get_neighbors_pixel(image, (x - 1), (y + 1), center), get_neighbors_pixel(image, x, (y + 1), center), get_neighbors_pixel(image, (x - 1), y, center), get_neighbors_pixel(image, (x + 1), (y + 1), center), get_neighbors_pixel(image, (x + 1), y, center), get_neighbors_pixel(image, (x + 1), (y - 1), center), get_neighbors_pixel(image, x, (y - 1), center), get_neighbors_pixel(image, (x - 1), (y - 1), center)];
  let sum: number = 0;
  let i: number = 0;
  while ((i < _len(neighbors))) {
    sum = (sum + (neighbors[(i) < 0 ? neighbors.length + (i) : i] * powers[(i) < 0 ? powers.length + (i) : i]));
    i = (i + 1);
  }
  return sum;
}
let image: number[][] = [[10, 10, 10, 10, 10], [10, 20, 30, 20, 10], [10, 30, 40, 30, 10], [10, 20, 30, 20, 10], [10, 10, 10, 10, 10]];
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i < _len(image))) {
    let j: number = 0;
    let line: string = "";
    while ((j < _len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)]))) {
      let value: number = local_binary_value(image, i, j);
      line = (line + _str(value));
      if ((j < (_len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)]) - 1))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

