// Generated by Mochi v0.10.61 on 2025-08-08 17:05:37 GMT+7

function insertion_sort(a: number[]): number[] {
  let i: number = 1;
  while ((i < _len(a))) {
    let key: number = a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
    let j: number = (i - 1);
    while (((j >= 0) && (a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] > key))) {
      a[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] = a[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()];
      j = (j - 1);
    }
    a[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] = key;
    i = (i + 1);
  }
  return a;
}
function median_filter(gray_img: number[][], mask: number): number[][] {
  let rows: number = _len(gray_img);
  let cols: number = _len(gray_img[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? gray_img.length + _mochi_idx : _mochi_idx;})()]);
  let bd: number = Math.trunc(mask / 2);
  let result: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      row.push(0);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  i = bd;
  while ((i < (rows - bd))) {
    let j: number = bd;
    while ((j < (cols - bd))) {
      let kernel: number[] = [];
      let x: number = (i - bd);
      while ((x <= (i + bd))) {
        let y: number = (j - bd);
        while ((y <= (j + bd))) {
          kernel.push(gray_img[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? gray_img.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = y; return _mochi_idx < 0 ? gray_img[(()=>{const _mochi_idx = x; return _mochi_idx < 0 ? gray_img.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
          y = (y + 1);
        }
        x = (x + 1);
      }
      kernel = insertion_sort(kernel);
      let idx: number = Math.trunc((mask * mask) / 2);
      result[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? result[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = kernel[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()];
      j = (j + 1);
    }
    i = (i + 1);
  }
  return result;
}
function main() {
  let img: number[][] = [[10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10]];
  let filtered: number[][] = median_filter(img, 3);
  console.log(_str("[" + (filtered).join(' ') + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

