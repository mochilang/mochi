// Generated by Mochi v0.10.59 on 2025-08-06 21:51:08 GMT+7

let PI: number = 3.141592653589793;
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = (x / 2.0);
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function atanApprox(x: number): number {
  if ((x > 1.0)) {
    return ((PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  if ((x < -1.0)) {
    return ((-PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  return (x / (1.0 + ((0.28 * x) * x)));
}
function atan2Approx(y: number, x: number): number {
  if ((x == 0.0)) {
    if ((y > 0.0)) {
      return (PI / 2.0);
    }
    if ((y < 0.0)) {
      return (-PI / 2.0);
    }
    return 0.0;
  }
  let a: number = atanApprox((y / x));
  if ((x > 0.0)) {
    return a;
  }
  if ((y >= 0.0)) {
    return (a + PI);
  }
  return (a - PI);
}
function zeros(h: number, w: number): number[][] {
  let m: number[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < w)) {
      row.push(0.0);
      x = (x + 1);
    }
    m.push(row);
    y = (y + 1);
  }
  return m;
}
function pad_edge(img: number[][], pad: number): number[][] {
  let h: number = _len(img);
  let w: number = _len(img[(Math.trunc(0)) < 0 ? img.length + (Math.trunc(0)) : Math.trunc(0)]);
  let out: number[][] = zeros((h + (pad * 2)), (w + (pad * 2)));
  let y: number = 0;
  while ((y < (h + (pad * 2)))) {
    let x: number = 0;
    while ((x < (w + (pad * 2)))) {
      let sy: number = (y - pad);
      if ((sy < 0)) {
        sy = 0;
      }
      if ((sy >= h)) {
        sy = (h - 1);
      }
      let sx: number = (x - pad);
      if ((sx < 0)) {
        sx = 0;
      }
      if ((sx >= w)) {
        sx = (w - 1);
      }
      out[(y) < 0 ? out.length + (y) : y][(x) < 0 ? out[(y) < 0 ? out.length + (y) : y].length + (x) : x] = img[(sy) < 0 ? img.length + (sy) : sy][(sx) < 0 ? img[(sy) < 0 ? img.length + (sy) : sy].length + (sx) : sx];
      x = (x + 1);
    }
    y = (y + 1);
  }
  return out;
}
function img_convolve(img: number[][], kernel: number[][]): number[][] {
  let h: number = _len(img);
  let w: number = _len(img[(Math.trunc(0)) < 0 ? img.length + (Math.trunc(0)) : Math.trunc(0)]);
  let k: number = _len(kernel);
  let pad: number = Math.trunc(k / 2);
  let padded: number[][] = pad_edge(img, pad);
  let out: number[][] = zeros(h, w);
  let y: number = 0;
  while ((y < h)) {
    let x: number = 0;
    while ((x < w)) {
      let sum: number = 0.0;
      let i: number = 0;
      while ((i < k)) {
        let j: number = 0;
        while ((j < k)) {
          sum = (sum + (padded[(Math.trunc((y + i))) < 0 ? padded.length + (Math.trunc((y + i))) : Math.trunc((y + i))][(Math.trunc((x + j))) < 0 ? padded[(Math.trunc((y + i))) < 0 ? padded.length + (Math.trunc((y + i))) : Math.trunc((y + i))].length + (Math.trunc((x + j))) : Math.trunc((x + j))] * kernel[(i) < 0 ? kernel.length + (i) : i][(j) < 0 ? kernel[(i) < 0 ? kernel.length + (i) : i].length + (j) : j]));
          j = (j + 1);
        }
        i = (i + 1);
      }
      out[(y) < 0 ? out.length + (y) : y][(x) < 0 ? out[(y) < 0 ? out.length + (y) : y].length + (x) : x] = sum;
      x = (x + 1);
    }
    y = (y + 1);
  }
  return out;
}
function abs_matrix(mat: number[][]): number[][] {
  let h: number = _len(mat);
  let w: number = _len(mat[(Math.trunc(0)) < 0 ? mat.length + (Math.trunc(0)) : Math.trunc(0)]);
  let out: number[][] = zeros(h, w);
  let y: number = 0;
  while ((y < h)) {
    let x: number = 0;
    while ((x < w)) {
      let v: number = mat[(y) < 0 ? mat.length + (y) : y][(x) < 0 ? mat[(y) < 0 ? mat.length + (y) : y].length + (x) : x];
      if ((v < 0.0)) {
        out[(y) < 0 ? out.length + (y) : y][(x) < 0 ? out[(y) < 0 ? out.length + (y) : y].length + (x) : x] = -v;
      } else {
        out[(y) < 0 ? out.length + (y) : y][(x) < 0 ? out[(y) < 0 ? out.length + (y) : y].length + (x) : x] = v;
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  return out;
}
function max_matrix(mat: number[][]): number {
  let max_val: number = mat[(Math.trunc(0)) < 0 ? mat.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? mat[(Math.trunc(0)) < 0 ? mat.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)];
  let y: number = 0;
  while ((y < _len(mat))) {
    let x: number = 0;
    while ((x < _len(mat[(Math.trunc(0)) < 0 ? mat.length + (Math.trunc(0)) : Math.trunc(0)]))) {
      if ((mat[(y) < 0 ? mat.length + (y) : y][(x) < 0 ? mat[(y) < 0 ? mat.length + (y) : y].length + (x) : x] > max_val)) {
        max_val = mat[(y) < 0 ? mat.length + (y) : y][(x) < 0 ? mat[(y) < 0 ? mat.length + (y) : y].length + (x) : x];
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  return max_val;
}
function scale_matrix(mat: number[][], factor: number): number[][] {
  let h: number = _len(mat);
  let w: number = _len(mat[(Math.trunc(0)) < 0 ? mat.length + (Math.trunc(0)) : Math.trunc(0)]);
  let out: number[][] = zeros(h, w);
  let y: number = 0;
  while ((y < h)) {
    let x: number = 0;
    while ((x < w)) {
      out[(y) < 0 ? out.length + (y) : y][(x) < 0 ? out[(y) < 0 ? out.length + (y) : y].length + (x) : x] = (mat[(y) < 0 ? mat.length + (y) : y][(x) < 0 ? mat[(y) < 0 ? mat.length + (y) : y].length + (x) : x] * factor);
      x = (x + 1);
    }
    y = (y + 1);
  }
  return out;
}
function sobel_filter(image: number[][]): number[][][] {
  let h: number = _len(image);
  let w: number = _len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)]);
  let img: number[][] = [];
  let y0: number = 0;
  while ((y0 < h)) {
    let row: number[] = [];
    let x0: number = 0;
    while ((x0 < w)) {
      row.push(image[(y0) < 0 ? image.length + (y0) : y0][(x0) < 0 ? image[(y0) < 0 ? image.length + (y0) : y0].length + (x0) : x0]);
      x0 = (x0 + 1);
    }
    img.push(row);
    y0 = (y0 + 1);
  }
  let kernel_x: number[][] = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]];
  let kernel_y: number[][] = [[1, 2, 1], [0, 0, 0], [-1, -2, -1]];
  let dst_x: number[][] = abs_matrix(img_convolve(img, kernel_x));
  let dst_y: number[][] = abs_matrix(img_convolve(img, kernel_y));
  let max_x: number = max_matrix(dst_x);
  let max_y: number = max_matrix(dst_y);
  dst_x = scale_matrix(dst_x, (255.0 / max_x));
  dst_y = scale_matrix(dst_y, (255.0 / max_y));
  let mag: number[][] = zeros(h, w);
  let theta: number[][] = zeros(h, w);
  let y: number = 0;
  while ((y < h)) {
    let x: number = 0;
    while ((x < w)) {
      let gx: number = dst_x[(y) < 0 ? dst_x.length + (y) : y][(x) < 0 ? dst_x[(y) < 0 ? dst_x.length + (y) : y].length + (x) : x];
      let gy: number = dst_y[(y) < 0 ? dst_y.length + (y) : y][(x) < 0 ? dst_y[(y) < 0 ? dst_y.length + (y) : y].length + (x) : x];
      mag[(y) < 0 ? mag.length + (y) : y][(x) < 0 ? mag[(y) < 0 ? mag.length + (y) : y].length + (x) : x] = sqrtApprox(((gx * gx) + (gy * gy)));
      theta[(y) < 0 ? theta.length + (y) : y][(x) < 0 ? theta[(y) < 0 ? theta.length + (y) : y].length + (x) : x] = atan2Approx(gy, gx);
      x = (x + 1);
    }
    y = (y + 1);
  }
  let max_m: number = max_matrix(mag);
  mag = scale_matrix(mag, (255.0 / max_m));
  return [mag, theta];
}
function print_matrix_int(mat: number[][]) {
  let y: number = 0;
  while ((y < _len(mat))) {
    let line: string = "";
    let x: number = 0;
    while ((x < _len(mat[(y) < 0 ? mat.length + (y) : y]))) {
      line = (line + _str(Math.trunc(mat[(y) < 0 ? mat.length + (y) : y][(x) < 0 ? mat[(y) < 0 ? mat.length + (y) : y].length + (x) : x])));
      if ((x < (_len(mat[(y) < 0 ? mat.length + (y) : y]) - 1))) {
        line = (line + " ");
      }
      x = (x + 1);
    }
    console.log(_str(line));
    y = (y + 1);
  }
}
function print_matrix_float(mat: number[][]) {
  let y: number = 0;
  while ((y < _len(mat))) {
    let line: string = "";
    let x: number = 0;
    while ((x < _len(mat[(y) < 0 ? mat.length + (y) : y]))) {
      line = (line + _str(mat[(y) < 0 ? mat.length + (y) : y][(x) < 0 ? mat[(y) < 0 ? mat.length + (y) : y].length + (x) : x]));
      if ((x < (_len(mat[(y) < 0 ? mat.length + (y) : y]) - 1))) {
        line = (line + " ");
      }
      x = (x + 1);
    }
    console.log(_str(line));
    y = (y + 1);
  }
}
function main() {
  let img: number[][] = [[10, 10, 10, 10, 10], [10, 50, 50, 50, 10], [10, 50, 80, 50, 10], [10, 50, 50, 50, 10], [10, 10, 10, 10, 10]];
  let res: number[][][] = sobel_filter(img);
  let mag: number[][] = res[(Math.trunc(0)) < 0 ? res.length + (Math.trunc(0)) : Math.trunc(0)];
  let theta: number[][] = res[(Math.trunc(1)) < 0 ? res.length + (Math.trunc(1)) : Math.trunc(1)];
  print_matrix_int(mag);
  print_matrix_float(theta);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

