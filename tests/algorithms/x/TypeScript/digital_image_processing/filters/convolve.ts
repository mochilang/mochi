// Generated by Mochi v0.10.59 on 2025-08-06 21:50:50 GMT+7

function pad_edge(image: number[][], pad_size: number): number[][] {
  let height: number = _len(image);
  let width: number = _len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)]);
  let new_height: number = (height + (pad_size * 2));
  let new_width: number = (width + (pad_size * 2));
  let padded: number[][] = [];
  let i: number = 0;
  while ((i < new_height)) {
    let row: number[] = [];
    let src_i: number = i;
    if ((src_i < pad_size)) {
      src_i = 0;
    }
    if ((src_i >= (height + pad_size))) {
      src_i = (height - 1);
    } else {
      src_i = (src_i - pad_size);
    }
    let j: number = 0;
    while ((j < new_width)) {
      let src_j: number = j;
      if ((src_j < pad_size)) {
        src_j = 0;
      }
      if ((src_j >= (width + pad_size))) {
        src_j = (width - 1);
      } else {
        src_j = (src_j - pad_size);
      }
      row.push(image[(src_i) < 0 ? image.length + (src_i) : src_i][(src_j) < 0 ? image[(src_i) < 0 ? image.length + (src_i) : src_i].length + (src_j) : src_j]);
      j = (j + 1);
    }
    padded.push(row);
    i = (i + 1);
  }
  return padded;
}
function im2col(image: number[][], block_h: number, block_w: number): number[][] {
  let rows: number = _len(image);
  let cols: number = _len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)]);
  let dst_height: number = ((rows - block_h) + 1);
  let dst_width: number = ((cols - block_w) + 1);
  let image_array: number[][] = [];
  let i: number = 0;
  while ((i < dst_height)) {
    let j: number = 0;
    while ((j < dst_width)) {
      let window: number[] = [];
      let bi: number = 0;
      while ((bi < block_h)) {
        let bj: number = 0;
        while ((bj < block_w)) {
          window.push(image[(Math.trunc((i + bi))) < 0 ? image.length + (Math.trunc((i + bi))) : Math.trunc((i + bi))][(Math.trunc((j + bj))) < 0 ? image[(Math.trunc((i + bi))) < 0 ? image.length + (Math.trunc((i + bi))) : Math.trunc((i + bi))].length + (Math.trunc((j + bj))) : Math.trunc((j + bj))]);
          bj = (bj + 1);
        }
        bi = (bi + 1);
      }
      image_array.push(window);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return image_array;
}
function flatten(matrix: number[][]): number[] {
  let out: number[] = [];
  let i: number = 0;
  while ((i < _len(matrix))) {
    let j: number = 0;
    while ((j < _len(matrix[(i) < 0 ? matrix.length + (i) : i]))) {
      out.push(matrix[(i) < 0 ? matrix.length + (i) : i][(j) < 0 ? matrix[(i) < 0 ? matrix.length + (i) : i].length + (j) : j]);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return out;
}
function dot(a: number[], b: number[]): number {
  let sum: number = 0;
  let i: number = 0;
  while ((i < _len(a))) {
    sum = (sum + (a[(i) < 0 ? a.length + (i) : i] * b[(i) < 0 ? b.length + (i) : i]));
    i = (i + 1);
  }
  return sum;
}
function img_convolve(image: number[][], kernel: number[][]): number[][] {
  let height: number = _len(image);
  let width: number = _len(image[(Math.trunc(0)) < 0 ? image.length + (Math.trunc(0)) : Math.trunc(0)]);
  let k_size: number = _len(kernel);
  let pad_size: number = Math.trunc(k_size / 2);
  let padded: number[][] = pad_edge(image, pad_size);
  let image_array: number[][] = im2col(padded, k_size, k_size);
  let kernel_flat: number[] = flatten(kernel);
  let dst: number[][] = [];
  let idx: number = 0;
  let i: number = 0;
  while ((i < height)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < width)) {
      let val: number = dot(image_array[(idx) < 0 ? image_array.length + (idx) : idx], kernel_flat);
      row.push(val);
      idx = (idx + 1);
      j = (j + 1);
    }
    dst.push(row);
    i = (i + 1);
  }
  return dst;
}
function print_matrix(m: number[][]) {
  let i: number = 0;
  while ((i < _len(m))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(m[(i) < 0 ? m.length + (i) : i]))) {
      if ((j > 0)) {
        line = (line + " ");
      }
      line = (line + _str(m[(i) < 0 ? m.length + (i) : i][(j) < 0 ? m[(i) < 0 ? m.length + (i) : i].length + (j) : j]));
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
let image: number[][] = [[1, 2, 3, 0, 0], [4, 5, 6, 0, 0], [7, 8, 9, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let laplace_kernel: number[][]
let result: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
laplace_kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]]
result = img_convolve(image, laplace_kernel)
  print_matrix(result);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

