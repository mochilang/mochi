// Generated by Mochi v0.10.72 on 2025-08-24 22:22:06 GMT+7

let PI: number = 3.141592653589793;
function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function expApprox(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 10)) {
    term = ((term * x) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function vec_gaussian(mat: number[][], variance: number): number[][] {
  let i: number = 0;
  let out: number[][] = [];
  while ((i < _len(mat))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
      let v: number = mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let e: number = (-(v * v) / (2.0 * variance));
      row.push(expApprox(e));
      j = (j + 1);
    }
    out.push(row);
    i = (i + 1);
  }
  return out;
}
function get_slice(img: number[][], x: number, y: number, kernel_size: number): number[][] {
  let half: number = Math.trunc(kernel_size / 2);
  let i: bigint = (x - half);
  let slice: number[][] = [];
  while ((i <= (x + half))) {
    let row: number[] = [];
    let j: bigint = (y - half);
    while ((j <= (y + half))) {
      row.push(img[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? img.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? img[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? img.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    slice.push(row);
    i = (i + 1);
  }
  return slice;
}
function get_gauss_kernel(kernel_size: number, spatial_variance: number): number[][] {
  let arr: number[][] = [];
  let i: number = 0;
  while ((i < kernel_size)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < kernel_size)) {
      let di: number = (i - Math.trunc(kernel_size / 2));
      let dj: number = (j - Math.trunc(kernel_size / 2));
      let dist: number = sqrtApprox(((di * di) + (dj * dj)));
      row.push(dist);
      j = (j + 1);
    }
    arr.push(row);
    i = (i + 1);
  }
  return vec_gaussian(arr, spatial_variance);
}
function elementwise_sub(mat: number[][], value: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(mat))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push((mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - value));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function elementwise_mul(a: number[][], b: number[][]): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function matrix_sum(mat: number[][]): number {
  let total: number = 0.0;
  let i: number = 0;
  while ((i < _len(mat))) {
    let j: number = 0;
    while ((j < _len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]))) {
      total = (total + mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return total;
}
function bilateral_filter(img: number[][], spatial_variance: number, intensity_variance: number, kernel_size: number): number {
  let gauss_ker: number[][] = get_gauss_kernel(kernel_size, spatial_variance);
  let img_s: number[][] = img;
  let center: number = img_s[(()=>{const _mochi_idx = Math.trunc(Math.trunc(kernel_size / 2)); return _mochi_idx < 0 ? img_s.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(Math.trunc(kernel_size / 2)); return _mochi_idx < 0 ? img_s[(()=>{const _mochi_idx = Math.trunc(Math.trunc(kernel_size / 2)); return _mochi_idx < 0 ? img_s.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let img_i: number[][] = elementwise_sub(img_s, center);
  let img_ig: number[][] = vec_gaussian(img_i, intensity_variance);
  let weights: number[][] = elementwise_mul(gauss_ker, img_ig);
  let vals: number[][] = elementwise_mul(img_s, weights);
  let sum_weights: number = matrix_sum(weights);
  let val: number = 0.0;
  if (!_equal(sum_weights, 0.0)) {
    val = (matrix_sum(vals) / sum_weights);
  }
  return val;
}
let img: number[][] = [[0.2, 0.3, 0.4], [0.3, 0.4, 0.5], [0.4, 0.5, 0.6]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = Number((BigInt(_nowSeed) * 1664525n + 1013904223n) % 2147483647n);
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
if (Array.isArray(x)) {
return x.map(_str).join(',');
}
if (x && typeof x === 'object') {
try {
const keys = Object.keys(x).sort();
const obj: any = {};
for (const k of keys) obj[k] = (x as any)[k];
return JSON.stringify(obj);
} catch {
return String(x);
}
}
return String(x);
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === 'number' && typeof b === 'number') {
    return Math.abs(a - b) < 1e-6;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}
let result: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = bilateral_filter(img, 1.0, 1.0, 3)
  console.log(_str(result));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

