// Generated by Mochi v0.10.59 on 2025-08-06 21:51:01 GMT+7

let PI: number = 3.141592653589793;
function to_radians(deg: number): number {
  return ((deg * PI) / 180.0);
}
function sin_taylor(x: number): number {
  let term: number = x;
  let sum: number = x;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = (2.0 * i);
    let k2: number = (k1 + 1.0);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function cos_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    let k1: number = ((2.0 * i) - 1.0);
    let k2: number = (2.0 * i);
    term = (((-term * x) * x) / (k1 * k2));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function exp_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1.0;
  while ((i < 20.0)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1.0);
  }
  return sum;
}
function gabor_filter_kernel(ksize: number, sigma: number, theta: number, lambd: number, gamma: number, psi: number): number[][] {
  let size: number = ksize;
  if (((size % 2) == 0)) {
    size = (size + 1);
  }
  let gabor: number[][] = [];
  let y: number = 0;
  while ((y < size)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < size)) {
      let px: number = (x - Math.trunc(size / 2));
      let py: number = (y - Math.trunc(size / 2));
      let rad: number = to_radians(theta);
      let cos_theta: number = cos_taylor(rad);
      let sin_theta: number = sin_taylor(rad);
      let x_rot: number = ((cos_theta * px) + (sin_theta * py));
      let y_rot: number = ((-sin_theta * px) + (cos_theta * py));
      let exponent: number = (-((x_rot * x_rot) + (((gamma * gamma) * y_rot) * y_rot)) / ((2.0 * sigma) * sigma));
      let value: number = (exp_taylor(exponent) * cos_taylor(((((2.0 * PI) * x_rot) / lambd) + psi)));
      row.push(value);
      x = (x + 1);
    }
    gabor.push(row);
    y = (y + 1);
  }
  return gabor;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let kernel: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
kernel = gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0)
  console.log(_str("[" + (kernel).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

