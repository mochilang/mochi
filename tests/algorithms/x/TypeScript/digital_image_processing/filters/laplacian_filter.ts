// Generated by Mochi v0.10.59 on 2025-08-06 21:51:04 GMT+7

function make_matrix(rows: number, cols: number, value: number): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      row.push(value);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function my_laplacian(src: number[][], ksize: number): number[][] {
  let kernel: number[][] = [];
  if ((ksize == 1)) {
    kernel = [[0, -1, 0], [-1, 4, -1], [0, -1, 0]];
  } else {
    if ((ksize == 3)) {
      kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]];
    } else {
      if ((ksize == 5)) {
        kernel = [[0, 0, -1, 0, 0], [0, -1, -2, -1, 0], [-1, -2, 16, -2, -1], [0, -1, -2, -1, 0], [0, 0, -1, 0, 0]];
      } else {
        if ((ksize == 7)) {
          kernel = [[0, 0, 0, -1, 0, 0, 0], [0, 0, -2, -3, -2, 0, 0], [0, -2, -7, -10, -7, -2, 0], [-1, -3, -10, 68, -10, -3, -1], [0, -2, -7, -10, -7, -2, 0], [0, 0, -2, -3, -2, 0, 0], [0, 0, 0, -1, 0, 0, 0]];
        } else {
          _panic("ksize must be in (1, 3, 5, 7)");
        }
      }
    }
  }
  let rows: number = _len(src);
  let cols: number = _len(src[(Math.trunc(0)) < 0 ? src.length + (Math.trunc(0)) : Math.trunc(0)]);
  let k: number = _len(kernel);
  let pad: number = Math.trunc(k / 2);
  let output: number[][] = make_matrix(rows, cols, 0);
  let i: number = 0;
  while ((i < rows)) {
    let j: number = 0;
    while ((j < cols)) {
      let sum: number = 0;
      let ki: number = 0;
      while ((ki < k)) {
        let kj: number = 0;
        while ((kj < k)) {
          let ii: number = ((i + ki) - pad);
          let jj: number = ((j + kj) - pad);
          let val: number = 0;
          if (((((ii >= 0) && (ii < rows)) && (jj >= 0)) && (jj < cols))) {
            val = src[(ii) < 0 ? src.length + (ii) : ii][(jj) < 0 ? src[(ii) < 0 ? src.length + (ii) : ii].length + (jj) : jj];
          }
          sum = (sum + (val * kernel[(ki) < 0 ? kernel.length + (ki) : ki][(kj) < 0 ? kernel[(ki) < 0 ? kernel.length + (ki) : ki].length + (kj) : kj]));
          kj = (kj + 1);
        }
        ki = (ki + 1);
      }
      output[(i) < 0 ? output.length + (i) : i][(j) < 0 ? output[(i) < 0 ? output.length + (i) : i].length + (j) : j] = sum;
      j = (j + 1);
    }
    i = (i + 1);
  }
  return output;
}
let image: number[][] = [[0, 0, 0, 0, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 0, 0, 0, 0]];
let r: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let result: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = my_laplacian(image, 3)
  while ((r < _len(result))) {
    let row_str: string = "[";
    let c: number = 0;
    while ((c < _len(result[(r) < 0 ? result.length + (r) : r]))) {
      row_str = (row_str + _str(result[(r) < 0 ? result.length + (r) : r][(c) < 0 ? result[(r) < 0 ? result.length + (r) : r].length + (c) : c]));
      if (((c + 1) < _len(result[(r) < 0 ? result.length + (r) : r]))) {
        row_str = (row_str + ", ");
      }
      c = (c + 1);
    }
    row_str = (row_str + "]");
    console.log(_str(row_str));
    r = (r + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

