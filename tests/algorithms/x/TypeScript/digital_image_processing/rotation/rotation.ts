// Generated by Mochi v0.10.59 on 2025-08-06 21:51:17 GMT+7

function mat_inverse3(m: number[][]): number[][] {
  let a: number = m[(Math.trunc(0)) < 0 ? m.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? m[(Math.trunc(0)) < 0 ? m.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)];
  let b: number = m[(Math.trunc(0)) < 0 ? m.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? m[(Math.trunc(0)) < 0 ? m.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)];
  let c: number = m[(Math.trunc(0)) < 0 ? m.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(2)) < 0 ? m[(Math.trunc(0)) < 0 ? m.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(2)) : Math.trunc(2)];
  let d: number = m[(Math.trunc(1)) < 0 ? m.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? m[(Math.trunc(1)) < 0 ? m.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)];
  let e: number = m[(Math.trunc(1)) < 0 ? m.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? m[(Math.trunc(1)) < 0 ? m.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)];
  let f: number = m[(Math.trunc(1)) < 0 ? m.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(2)) < 0 ? m[(Math.trunc(1)) < 0 ? m.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(2)) : Math.trunc(2)];
  let g: number = m[(Math.trunc(2)) < 0 ? m.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? m[(Math.trunc(2)) < 0 ? m.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)];
  let h: number = m[(Math.trunc(2)) < 0 ? m.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? m[(Math.trunc(2)) < 0 ? m.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)];
  let i: number = m[(Math.trunc(2)) < 0 ? m.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(2)) < 0 ? m[(Math.trunc(2)) < 0 ? m.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(2)) : Math.trunc(2)];
  let det: number = (((a * ((e * i) - (f * h))) - (b * ((d * i) - (f * g)))) + (c * ((d * h) - (e * g))));
  if ((det == 0.0)) {
    _panic("singular matrix");
  }
  let adj00: number = ((e * i) - (f * h));
  let adj01: number = ((c * h) - (b * i));
  let adj02: number = ((b * f) - (c * e));
  let adj10: number = ((f * g) - (d * i));
  let adj11: number = ((a * i) - (c * g));
  let adj12: number = ((c * d) - (a * f));
  let adj20: number = ((d * h) - (e * g));
  let adj21: number = ((b * g) - (a * h));
  let adj22: number = ((a * e) - (b * d));
  let inv: number[][] = [];
  inv.push([(adj00 / det), (adj01 / det), (adj02 / det)]);
  inv.push([(adj10 / det), (adj11 / det), (adj12 / det)]);
  inv.push([(adj20 / det), (adj21 / det), (adj22 / det)]);
  return inv;
}
function mat_vec_mul(m: number[][], v: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < 3)) {
    let val: number = (((m[(i) < 0 ? m.length + (i) : i][(Math.trunc(0)) < 0 ? m[(i) < 0 ? m.length + (i) : i].length + (Math.trunc(0)) : Math.trunc(0)] * v[(Math.trunc(0)) < 0 ? v.length + (Math.trunc(0)) : Math.trunc(0)]) + (m[(i) < 0 ? m.length + (i) : i][(Math.trunc(1)) < 0 ? m[(i) < 0 ? m.length + (i) : i].length + (Math.trunc(1)) : Math.trunc(1)] * v[(Math.trunc(1)) < 0 ? v.length + (Math.trunc(1)) : Math.trunc(1)])) + (m[(i) < 0 ? m.length + (i) : i][(Math.trunc(2)) < 0 ? m[(i) < 0 ? m.length + (i) : i].length + (Math.trunc(2)) : Math.trunc(2)] * v[(Math.trunc(2)) < 0 ? v.length + (Math.trunc(2)) : Math.trunc(2)]));
    res.push(val);
    i = (i + 1);
  }
  return res;
}
function create_matrix(rows: number, cols: number, value: number): number[][] {
  let result: number[][] = [];
  let r: number = 0;
  while ((r < rows)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < cols)) {
      row.push(value);
      c = (c + 1);
    }
    result.push(row);
    r = (r + 1);
  }
  return result;
}
function round_to_int(x: number): number {
  if ((x >= 0.0)) {
    return Math.trunc((x + 0.5));
  }
  return Math.trunc((x - 0.5));
}
function get_rotation(img: number[][], pt1: number[][], pt2: number[][], rows: number, cols: number): number[][] {
  let src: number[][] = [[pt1[(Math.trunc(0)) < 0 ? pt1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? pt1[(Math.trunc(0)) < 0 ? pt1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)], pt1[(Math.trunc(0)) < 0 ? pt1.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? pt1[(Math.trunc(0)) < 0 ? pt1.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)], 1.0], [pt1[(Math.trunc(1)) < 0 ? pt1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? pt1[(Math.trunc(1)) < 0 ? pt1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)], pt1[(Math.trunc(1)) < 0 ? pt1.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? pt1[(Math.trunc(1)) < 0 ? pt1.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)], 1.0], [pt1[(Math.trunc(2)) < 0 ? pt1.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? pt1[(Math.trunc(2)) < 0 ? pt1.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)], pt1[(Math.trunc(2)) < 0 ? pt1.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? pt1[(Math.trunc(2)) < 0 ? pt1.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)], 1.0]];
  let inv: number[][] = mat_inverse3(src);
  let vecx: number[] = [pt2[(Math.trunc(0)) < 0 ? pt2.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? pt2[(Math.trunc(0)) < 0 ? pt2.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)], pt2[(Math.trunc(1)) < 0 ? pt2.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? pt2[(Math.trunc(1)) < 0 ? pt2.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)], pt2[(Math.trunc(2)) < 0 ? pt2.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? pt2[(Math.trunc(2)) < 0 ? pt2.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)]];
  let vecy: number[] = [pt2[(Math.trunc(0)) < 0 ? pt2.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? pt2[(Math.trunc(0)) < 0 ? pt2.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)], pt2[(Math.trunc(1)) < 0 ? pt2.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? pt2[(Math.trunc(1)) < 0 ? pt2.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)], pt2[(Math.trunc(2)) < 0 ? pt2.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? pt2[(Math.trunc(2)) < 0 ? pt2.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)]];
  let avec: number[] = mat_vec_mul(inv, vecx);
  let bvec: number[] = mat_vec_mul(inv, vecy);
  let a0: number = avec[(Math.trunc(0)) < 0 ? avec.length + (Math.trunc(0)) : Math.trunc(0)];
  let a1: number = avec[(Math.trunc(1)) < 0 ? avec.length + (Math.trunc(1)) : Math.trunc(1)];
  let a2: number = avec[(Math.trunc(2)) < 0 ? avec.length + (Math.trunc(2)) : Math.trunc(2)];
  let b0: number = bvec[(Math.trunc(0)) < 0 ? bvec.length + (Math.trunc(0)) : Math.trunc(0)];
  let b1: number = bvec[(Math.trunc(1)) < 0 ? bvec.length + (Math.trunc(1)) : Math.trunc(1)];
  let b2: number = bvec[(Math.trunc(2)) < 0 ? bvec.length + (Math.trunc(2)) : Math.trunc(2)];
  let out: number[][] = create_matrix(rows, cols, 0);
  let y: number = 0;
  while ((y < rows)) {
    let x: number = 0;
    while ((x < cols)) {
      let xf: number = (((a0 * (1.0 * x)) + (a1 * (1.0 * y))) + a2);
      let yf: number = (((b0 * (1.0 * x)) + (b1 * (1.0 * y))) + b2);
      let sx: number = round_to_int(xf);
      let sy: number = round_to_int(yf);
      if (((((sx >= 0) && (sx < cols)) && (sy >= 0)) && (sy < rows))) {
        out[(sy) < 0 ? out.length + (sy) : sy][(sx) < 0 ? out[(sy) < 0 ? out.length + (sy) : sy].length + (sx) : sx] = img[(y) < 0 ? img.length + (y) : y][(x) < 0 ? img[(y) < 0 ? img.length + (y) : y].length + (x) : x];
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  return out;
}
let img: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
let pts1: number[][] = [[0.0, 0.0], [2.0, 0.0], [0.0, 2.0]];
let pts2: number[][] = [[0.0, 2.0], [0.0, 0.0], [2.0, 2.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let rotated: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
rotated = get_rotation(img, pts1, pts2, 3, 3)
  console.log(_str(_str(rotated)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

