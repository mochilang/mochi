// Generated by Mochi v0.10.61 on 2025-08-08 17:05:41 GMT+7

function make_list(n: number, value: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    res.push(value);
    i = (i + 1);
  }
  return res;
}
function histogram_stretch(image: number[][]): number[][] {
  let height: number = _len(image);
  let width: number = _len(image[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()]);
  let hist: number[] = make_list(256, 0);
  let i: number = 0;
  while ((i < height)) {
    let j: number = 0;
    while ((j < width)) {
      let val: number = image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      hist[(()=>{const _mochi_idx = val; return _mochi_idx < 0 ? hist.length + _mochi_idx : _mochi_idx;})()] = (hist[(()=>{const _mochi_idx = val; return _mochi_idx < 0 ? hist.length + _mochi_idx : _mochi_idx;})()] + 1);
      j = (j + 1);
    }
    i = (i + 1);
  }
  let mapping: number[] = make_list(256, 0);
  let cumulative: number = 0;
  let total: number = (height * width);
  let h: number = 0;
  while ((h < 256)) {
    cumulative = (cumulative + hist[(()=>{const _mochi_idx = h; return _mochi_idx < 0 ? hist.length + _mochi_idx : _mochi_idx;})()]);
    mapping[(()=>{const _mochi_idx = h; return _mochi_idx < 0 ? mapping.length + _mochi_idx : _mochi_idx;})()] = Math.trunc((255 * cumulative) / total);
    h = (h + 1);
  }
  i = 0;
  while ((i < height)) {
    let j: number = 0;
    while ((j < width)) {
      let val: number = image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = mapping[(()=>{const _mochi_idx = val; return _mochi_idx < 0 ? mapping.length + _mochi_idx : _mochi_idx;})()];
      j = (j + 1);
    }
    i = (i + 1);
  }
  return image;
}
function print_image(image: number[][]) {
  let i: number = 0;
  while ((i < _len(image))) {
    console.log(_str("[" + (image[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? image.length + _mochi_idx : _mochi_idx;})()]).join(' ') + "]"));
    i = (i + 1);
  }
}
let img: number[][] = [[52, 55, 61], [59, 79, 61], [85, 76, 62]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
result = histogram_stretch(img)
  print_image(result);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

