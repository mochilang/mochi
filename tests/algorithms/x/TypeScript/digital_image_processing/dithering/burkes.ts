// Generated by Mochi v0.10.59 on 2025-08-06 21:32:16 GMT+7

function get_greyscale(blue: number, green: number, red: number): number {
  let b: number = blue;
  let g: number = green;
  let r: number = red;
  return Math.trunc((((0.114 * b) + (0.587 * g)) + (0.299 * r)));
}
function zeros(h: number, w: number): number[][] {
  let table: number[][] = [];
  let i: number = 0;
  while ((i < h)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < w)) {
      row.push(0);
      j = (j + 1);
    }
    table.push(row);
    i = (i + 1);
  }
  return table;
}
function burkes_dither(img: number[][][], threshold: number): number[][] {
  let height: number = _len(img);
  let width: number = _len(img[Math.trunc(0)]);
  let error_table: number[][] = zeros((height + 1), (width + 4));
  let output: number[][] = [];
  let y: number = 0;
  while ((y < height)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < width)) {
      let px: number[] = img[y][x];
      let grey: number = get_greyscale(px[Math.trunc(0)], px[Math.trunc(1)], px[Math.trunc(2)]);
      let total: number = (grey + error_table[y][Math.trunc((x + 2))]);
      let new_val: number = 0;
      let current_error: number = 0;
      if ((threshold > total)) {
        new_val = 0;
        current_error = total;
      } else {
        new_val = 255;
        current_error = (total - 255);
      }
      row.push(new_val);
      error_table[y][(x + 3)] = (error_table[y][Math.trunc((x + 3))] + Math.trunc((8 * current_error) / 32));
      error_table[y][(x + 4)] = (error_table[y][Math.trunc((x + 4))] + Math.trunc((4 * current_error) / 32));
      error_table[(y + 1)][(x + 2)] = (error_table[Math.trunc((y + 1))][Math.trunc((x + 2))] + Math.trunc((8 * current_error) / 32));
      error_table[(y + 1)][(x + 3)] = (error_table[Math.trunc((y + 1))][Math.trunc((x + 3))] + Math.trunc((4 * current_error) / 32));
      error_table[(y + 1)][(x + 4)] = (error_table[Math.trunc((y + 1))][Math.trunc((x + 4))] + Math.trunc((2 * current_error) / 32));
      error_table[(y + 1)][(x + 1)] = (error_table[Math.trunc((y + 1))][Math.trunc((x + 1))] + Math.trunc((4 * current_error) / 32));
      error_table[(y + 1)][x] = (error_table[Math.trunc((y + 1))][x] + Math.trunc((2 * current_error) / 32));
      x = (x + 1);
    }
    output.push(row);
    y = (y + 1);
  }
  return output;
}
function main() {
  let img: number[][][] = [[[0, 0, 0], [64, 64, 64], [128, 128, 128], [192, 192, 192]], [[255, 255, 255], [200, 200, 200], [150, 150, 150], [100, 100, 100]], [[30, 144, 255], [255, 0, 0], [0, 255, 0], [0, 0, 255]], [[50, 100, 150], [80, 160, 240], [70, 140, 210], [60, 120, 180]]];
  let result: number[][] = burkes_dither(img, 128);
  let y: number = 0;
  while ((y < _len(result))) {
    let line: string = "";
    let x: number = 0;
    while ((x < _len(result[y]))) {
      line = (line + _str(result[y][x]));
      if ((x < (_len(result[y]) - 1))) {
        line = (line + " ");
      }
      x = (x + 1);
    }
    console.log(_str(line));
    y = (y + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

