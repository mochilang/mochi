// Generated by Mochi v0.10.59 on 2025-08-06 17:46:39 GMT+7

function repeat_char(ch: string, times: number): string {
  let res: string = "";
  let i: number = 0;
  while ((i < times)) {
    res = (res + ch);
    i = (i + 1);
  }
  return res;
}
function to_binary(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let res: string = "";
  let v: number = n;
  while ((v > 0)) {
    res = (_str((v % 2)) + res);
    v = Math.trunc(v / 2);
  }
  return res;
}
function pow2(exp: number): number {
  let res: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    res = (res * 2);
    i = (i + 1);
  }
  return res;
}
function twos_complement(_number: number): string {
  if ((_number > 0)) {
    panic("input must be a negative integer");
  }
  if ((_number == 0)) {
    return "0b0";
  }
  let abs_number: number = ((_number < 0) ? -_number : _number);
  let binary_number_length: number = _len(to_binary(abs_number));
  let complement_value: number = (pow2(binary_number_length) - abs_number);
  let complement_binary: string = to_binary(complement_value);
  let padding: string = repeat_char("0", (binary_number_length - _len(complement_binary)));
  let twos_complement_number: string = (("1" + padding) + complement_binary);
  return ("0b" + twos_complement_number);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(twos_complement(0)));
  console.log(_str(twos_complement(-1)));
  console.log(_str(twos_complement(-5)));
  console.log(_str(twos_complement(-17)));
  console.log(_str(twos_complement(-207)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

