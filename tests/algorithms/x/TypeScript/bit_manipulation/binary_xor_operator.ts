// Generated by Mochi v0.10.59 on 2025-08-06 17:46:41 GMT+7

function int_to_binary(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let res: string = "";
  let num: number = n;
  while ((num > 0)) {
    res = (_str((num % 2)) + res);
    num = Math.trunc(num / 2);
  }
  return res;
}
function pad_left(s: string, width: number): string {
  let res: string = s;
  while ((_len(res) < width)) {
    res = ("0" + res);
  }
  return res;
}
function binary_xor(a: number, b: number): string {
  if (((a < 0) || (b < 0))) {
    panic("the value of both inputs must be positive");
  }
  let a_bin: string = int_to_binary(a);
  let b_bin: string = int_to_binary(b);
  let max_len: number = ((_len(a_bin) > _len(b_bin)) ? _len(a_bin) : _len(b_bin));
  let a_pad: string = pad_left(a_bin, max_len);
  let b_pad: string = pad_left(b_bin, max_len);
  let i: number = 0;
  let result: string = "";
  while ((i < max_len)) {
    if ((a_pad[i] != b_pad[i])) {
      result = (result + "1");
    } else {
      result = (result + "0");
    }
    i = (i + 1);
  }
  return ("0b" + result);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(binary_xor(25, 32)));
  console.log(_str(binary_xor(37, 50)));
  console.log(_str(binary_xor(21, 30)));
  console.log(_str(binary_xor(58, 73)));
  console.log(_str(binary_xor(0, 255)));
  console.log(_str(binary_xor(256, 256)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

