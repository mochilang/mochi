// Generated by Mochi v0.10.59 on 2025-08-06 17:46:38 GMT+7

function repeat_char(ch: string, count: number): string {
  let res: string = "";
  let i: number = 0;
  while ((i < count)) {
    res = (res + ch);
    i = (i + 1);
  }
  return res;
}
function abs_int(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function pow2(exp: number): number {
  let res: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    res = (res * 2);
    i = (i + 1);
  }
  return res;
}
function to_binary_no_prefix(n: number): string {
  let v: number = n;
  if ((v < 0)) {
    v = -v;
  }
  if ((v == 0)) {
    return "0";
  }
  let res: string = "";
  while ((v > 0)) {
    res = (_str((v % 2)) + res);
    v = Math.trunc(v / 2);
  }
  return res;
}
function logical_left_shift(_number: number, shift_amount: number): string {
  if (((_number < 0) || (shift_amount < 0))) {
    panic("both inputs must be positive integers");
  }
  let binary_number: string = ("0b" + to_binary_no_prefix(_number));
  return (binary_number + repeat_char("0", shift_amount));
}
function logical_right_shift(_number: number, shift_amount: number): string {
  if (((_number < 0) || (shift_amount < 0))) {
    panic("both inputs must be positive integers");
  }
  let binary_number: string = to_binary_no_prefix(_number);
  if ((shift_amount >= _len(binary_number))) {
    return "0b0";
  }
  let shifted: string = (binary_number).substring(0, (_len(binary_number) - shift_amount));
  return ("0b" + shifted);
}
function arithmetic_right_shift(_number: number, shift_amount: number): string {
  let binary_number: string = "";
  if ((_number >= 0)) {
    binary_number = ("0" + to_binary_no_prefix(_number));
  } else {
    let length: number = _len(to_binary_no_prefix(-_number));
    let intermediate: number = (abs_int(_number) - pow2(length));
    let bin_repr: string = to_binary_no_prefix(intermediate);
    binary_number = (("1" + repeat_char("0", (length - _len(bin_repr)))) + bin_repr);
  }
  if ((shift_amount >= _len(binary_number))) {
    let sign: string = (binary_number).substring(0, 1);
    return ("0b" + repeat_char(sign, _len(binary_number)));
  }
  let sign: string = (binary_number).substring(0, 1);
  let shifted: string = (binary_number).substring(0, (_len(binary_number) - shift_amount));
  return (("0b" + repeat_char(sign, shift_amount)) + shifted);
}
function main() {
  console.log(_str(logical_left_shift(17, 2)));
  console.log(_str(logical_right_shift(1983, 4)));
  console.log(_str(arithmetic_right_shift(-17, 2)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

