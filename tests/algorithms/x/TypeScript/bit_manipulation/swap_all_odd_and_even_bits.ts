// Generated by Mochi v0.10.59 on 2025-08-06 19:19:55 GMT+7

function pad_left_num(n: number): string {
  let s: string = _str(n);
  while ((_len(s) < 5)) {
    s = (" " + s);
  }
  return s;
}
function to_binary(n: number): string {
  let sign: string = "";
  let num: number = n;
  if ((num < 0)) {
    sign = "-";
    num = (0 - num);
  }
  let bits: string = "";
  while ((num > 0)) {
    bits = (_str((num % 2)) + bits);
    num = ((num - (num % 2)) / 2);
  }
  if ((bits == "")) {
    bits = "0";
  }
  let min_width: number = 8;
  while ((_len(bits) < (min_width - _len(sign)))) {
    bits = ("0" + bits);
  }
  return (sign + bits);
}
function show_bits(before: number, after: number): string {
  return ((((((pad_left_num(before) + ": ") + to_binary(before)) + "\n") + pad_left_num(after)) + ": ") + to_binary(after));
}
function lshift(num: number, k: number): number {
  let result = num;
  let i: number = 0;
  while ((i < k)) {
    result = (result * 2);
    i = (i + 1);
  }
  return result;
}
function rshift(num: number, k: number): number {
  let result = num;
  let i: number = 0;
  while ((i < k)) {
    result = ((result - (result % 2)) / 2);
    i = (i + 1);
  }
  return result;
}
function swap_odd_even_bits(num: number): number {
  let n = num;
  if ((n < 0)) {
    n = (n + 4294967296);
  }
  let result: number = 0;
  let i: number = 0;
  while ((i < 32)) {
    let bit1 = (rshift(n, i) % 2);
    let bit2 = (rshift(n, (i + 1)) % 2);
    result = ((result + lshift(bit1, (i + 1))) + lshift(bit2, i));
    i = (i + 2);
  }
  return result;
}
function main() {
  let nums: number[] = [-1, 0, 1, 2, 3, 4, 23, 24];
  let i: number = 0;
  while ((i < _len(nums))) {
    let n: number = nums[i];
    console.log(_str(show_bits(n, swap_odd_even_bits(n))));
    console.log(_str(""));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

