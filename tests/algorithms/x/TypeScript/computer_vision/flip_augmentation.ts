// Generated by Mochi v0.10.59 on 2025-08-06 20:30:09 GMT+7

function flip_horizontal_image(img: number[][]): number[][] {
  let flipped: number[][] = [];
  let i: number = 0;
  while ((i < _len(img))) {
    let row: number[] = img[i];
    let j: number = (_len(row) - 1);
    let new_row: number[] = [];
    while ((j >= 0)) {
      new_row.push(row[j]);
      j = (j - 1);
    }
    flipped.push(new_row);
    i = (i + 1);
  }
  return flipped;
}
function flip_vertical_image(img: number[][]): number[][] {
  let flipped: number[][] = [];
  let i: number = (_len(img) - 1);
  while ((i >= 0)) {
    flipped.push(img[i]);
    i = (i - 1);
  }
  return flipped;
}
function flip_horizontal_boxes(boxes: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(boxes))) {
    let b: number[] = boxes[i];
    let x_new: number = (1.0 - b[Math.trunc(1)]);
    result.push([b[Math.trunc(0)], x_new, b[Math.trunc(2)], b[Math.trunc(3)], b[Math.trunc(4)]]);
    i = (i + 1);
  }
  return result;
}
function flip_vertical_boxes(boxes: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(boxes))) {
    let b: number[] = boxes[i];
    let y_new: number = (1.0 - b[Math.trunc(2)]);
    result.push([b[Math.trunc(0)], b[Math.trunc(1)], y_new, b[Math.trunc(3)], b[Math.trunc(4)]]);
    i = (i + 1);
  }
  return result;
}
function print_image(img: number[][]) {
  let i: number = 0;
  while ((i < _len(img))) {
    let row: number[] = img[i];
    let j: number = 0;
    let line: string = "";
    while ((j < _len(row))) {
      line = ((line + _str(row[j])) + " ");
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
let image: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
let boxes: number[][] = [[0.0, 0.25, 0.25, 0.5, 0.5], [1.0, 0.75, 0.75, 0.5, 0.5]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let h_img: number[][]
let h_boxes: number[][]
let v_img: number[][]
let v_boxes: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("Original image:"));
  print_image(image);
  console.log(_str(_str(boxes)));
  console.log(_str("Horizontal flip:"));
h_img = flip_horizontal_image(image)
h_boxes = flip_horizontal_boxes(boxes)
  print_image(h_img);
  console.log(_str(_str(h_boxes)));
  console.log(_str("Vertical flip:"));
v_img = flip_vertical_image(image)
v_boxes = flip_vertical_boxes(boxes)
  print_image(v_img);
  console.log(_str(_str(v_boxes)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

