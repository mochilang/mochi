// Generated by Mochi v0.10.59 on 2025-08-06 20:30:12 GMT+7

function zeros(h: number, w: number): number[][] {
  let m: number[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < w)) {
      row.push(0.0);
      x = (x + 1);
    }
    m.push(row);
    y = (y + 1);
  }
  return m;
}
function gradient(img: number[][]): number[][][] {
  let h: number = _len(img);
  let w: number = _len(img[Math.trunc(0)]);
  let dx: number[][] = zeros(h, w);
  let dy: number[][] = zeros(h, w);
  let y: number = 1;
  while ((y < (h - 1))) {
    let x: number = 1;
    while ((x < (w - 1))) {
      dx[y][x] = (img[y][Math.trunc((x + 1))] - img[y][Math.trunc((x - 1))]);
      dy[y][x] = (img[Math.trunc((y + 1))][x] - img[Math.trunc((y - 1))][x]);
      x = (x + 1);
    }
    y = (y + 1);
  }
  return [dx, dy];
}
function harris(img: number[][], k: number, window: number, thresh: number): number[][] {
  let h: number = _len(img);
  let w: number = _len(img[Math.trunc(0)]);
  let grads: number[][][] = gradient(img);
  let dx: number[][] = grads[Math.trunc(0)];
  let dy: number[][] = grads[Math.trunc(1)];
  let ixx: number[][] = zeros(h, w);
  let iyy: number[][] = zeros(h, w);
  let ixy: number[][] = zeros(h, w);
  let y: number = 0;
  while ((y < h)) {
    let x: number = 0;
    while ((x < w)) {
      let gx: number = dx[y][x];
      let gy: number = dy[y][x];
      ixx[y][x] = (gx * gx);
      iyy[y][x] = (gy * gy);
      ixy[y][x] = (gx * gy);
      x = (x + 1);
    }
    y = (y + 1);
  }
  let offset: number = Math.trunc(window / 2);
  let corners: number[][] = [];
  y = offset;
  while ((y < (h - offset))) {
    let x: number = offset;
    while ((x < (w - offset))) {
      let wxx: number = 0.0;
      let wyy: number = 0.0;
      let wxy: number = 0.0;
      let yy: number = (y - offset);
      while ((yy <= (y + offset))) {
        let xx: number = (x - offset);
        while ((xx <= (x + offset))) {
          wxx = (wxx + ixx[yy][xx]);
          wyy = (wyy + iyy[yy][xx]);
          wxy = (wxy + ixy[yy][xx]);
          xx = (xx + 1);
        }
        yy = (yy + 1);
      }
      let det: number = ((wxx * wyy) - (wxy * wxy));
      let trace: number = (wxx + wyy);
      let r: number = (det - (k * (trace * trace)));
      if ((r > thresh)) {
        corners.push([x, y]);
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  return corners;
}
let img: number[][] = [[1, 1, 1, 1, 1], [1, 255, 255, 255, 1], [1, 255, 0, 255, 1], [1, 255, 255, 255, 1], [1, 1, 1, 1, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let corners: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
corners = harris(img, 0.04, 3, 10000000000.0)
  console.log(_str("[" + (corners).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

