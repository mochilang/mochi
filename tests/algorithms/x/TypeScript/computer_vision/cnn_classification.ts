// Generated by Mochi v0.10.59 on 2025-08-06 20:30:07 GMT+7

function conv2d(image: number[][], kernel: number[][]): number[][] {
  let rows: number = _len(image);
  let cols: number = _len(image[Math.trunc(0)]);
  let k: number = _len(kernel);
  let output: number[][] = [];
  let i: number = 0;
  while ((i <= (rows - k))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j <= (cols - k))) {
      let sum: number = 0.0;
      let ki: number = 0;
      while ((ki < k)) {
        let kj: number = 0;
        while ((kj < k)) {
          sum = (sum + (image[Math.trunc((i + ki))][Math.trunc((j + kj))] * kernel[ki][kj]));
          kj = (kj + 1);
        }
        ki = (ki + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    output.push(row);
    i = (i + 1);
  }
  return output;
}
function relu_matrix(m: number[][]): number[][] {
  let out: number[][] = [];
  for (const row of m) {
    let new_row: number[] = [];
    for (const v of row) {
      if ((v > 0.0)) {
        new_row.push(v);
      } else {
        new_row.push(0.0);
      }
    }
    out.push(new_row);
  }
  return out;
}
function max_pool2x2(m: number[][]): number[][] {
  let rows: number = _len(m);
  let cols: number = _len(m[Math.trunc(0)]);
  let out: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let new_row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      let max_val: number = m[i][j];
      if ((m[i][Math.trunc((j + 1))] > max_val)) {
        max_val = m[i][Math.trunc((j + 1))];
      }
      if ((m[Math.trunc((i + 1))][j] > max_val)) {
        max_val = m[Math.trunc((i + 1))][j];
      }
      if ((m[Math.trunc((i + 1))][Math.trunc((j + 1))] > max_val)) {
        max_val = m[Math.trunc((i + 1))][Math.trunc((j + 1))];
      }
      new_row.push(max_val);
      j = (j + 2);
    }
    out.push(new_row);
    i = (i + 2);
  }
  return out;
}
function flatten(m: number[][]): number[] {
  let res: number[] = [];
  for (const row of m) {
    for (const v of row) {
      res.push(v);
    }
  }
  return res;
}
function dense(inputs: number[], weights: number[], bias: number): number {
  let s: number = bias;
  let i: number = 0;
  while ((i < _len(inputs))) {
    s = (s + (inputs[i] * weights[i]));
    i = (i + 1);
  }
  return s;
}
function exp_approx(x: number): number {
  let sum: number = 1.0;
  let term: number = 1.0;
  let i: number = 1;
  while ((i <= 10)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function sigmoid(x: number): number {
  return (1.0 / (1.0 + exp_approx(-x)));
}
let image: number[][] = [[0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];
let bias: number = 0.0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let kernel: number[][]
let conv: number[][]
let activated: number[][]
let pooled: number[][]
let flat: number[]
let weights: number[]
let output: number
let probability: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
kernel = [[1.0, 0.0, -1.0], [1.0, 0.0, -1.0], [1.0, 0.0, -1.0]]
conv = conv2d(image, kernel)
activated = relu_matrix(conv)
pooled = max_pool2x2(activated)
flat = flatten(pooled)
weights = [0.5, -0.4, 0.3, 0.1]
output = dense(flat, weights, bias)
probability = sigmoid(output)
  if ((probability >= 0.5)) {
    console.log(_str("Abnormality detected"));
  } else {
    console.log(_str("Normal"));
  }
  console.log(_str("Probability:"));
  console.log(_str(probability));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

