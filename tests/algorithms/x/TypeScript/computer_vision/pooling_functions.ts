// Generated by Mochi v0.10.59 on 2025-08-06 20:30:21 GMT+7

function maxpooling(arr: number[][], size: number, stride: number): number[][] {
  let n: number = _len(arr);
  if (((n == 0) || (_len(arr[Math.trunc(0)]) != n))) {
    panic("The input array is not a square matrix");
  }
  let result: number[][] = [];
  let i: number = 0;
  while (((i + size) <= n)) {
    let row: number[] = [];
    let j: number = 0;
    while (((j + size) <= n)) {
      let max_val: number = arr[i][j];
      let r: number = i;
      while ((r < (i + size))) {
        let c: number = j;
        while ((c < (j + size))) {
          let val: number = arr[r][c];
          if ((val > max_val)) {
            max_val = val;
          }
          c = (c + 1);
        }
        r = (r + 1);
      }
      row.push(max_val);
      j = (j + stride);
    }
    result.push(row);
    i = (i + stride);
  }
  return result;
}
function avgpooling(arr: number[][], size: number, stride: number): number[][] {
  let n: number = _len(arr);
  if (((n == 0) || (_len(arr[Math.trunc(0)]) != n))) {
    panic("The input array is not a square matrix");
  }
  let result: number[][] = [];
  let i: number = 0;
  while (((i + size) <= n)) {
    let row: number[] = [];
    let j: number = 0;
    while (((j + size) <= n)) {
      let sum: number = 0;
      let r: number = i;
      while ((r < (i + size))) {
        let c: number = j;
        while ((c < (j + size))) {
          sum = (sum + arr[r][c]);
          c = (c + 1);
        }
        r = (r + 1);
      }
      row.push((sum / (size * size)));
      j = (j + stride);
    }
    result.push(row);
    i = (i + stride);
  }
  return result;
}
function print_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    let line: string = "";
    let j: number = 0;
    while ((j < _len(mat[i]))) {
      line = (line + _str(mat[i][j]));
      if ((j < (_len(mat[i]) - 1))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    i = (i + 1);
  }
}
function main() {
  let arr1: number[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];
  let arr2: number[][] = [[147, 180, 122], [241, 76, 32], [126, 13, 157]];
  print_matrix(maxpooling(arr1, 2, 2));
  print_matrix(maxpooling(arr2, 2, 1));
  print_matrix(avgpooling(arr1, 2, 2));
  print_matrix(avgpooling(arr2, 2, 1));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

