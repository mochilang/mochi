// Generated by Mochi v0.10.59 on 2025-08-06 20:30:14 GMT+7

function round_int(x: number): number {
  if ((x >= 0.0)) {
    return Math.trunc((x + 0.5));
  }
  return Math.trunc((x - 0.5));
}
function zeros(rows: number, cols: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      row.push(0.0);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function warp(image: number[][], h_flow: number[][], v_flow: number[][]): number[][] {
  let h: number = _len(image);
  let w: number = _len(image[Math.trunc(0)]);
  let out: number[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < w)) {
      let sx: number = (x - round_int(h_flow[y][x]));
      let sy: number = (y - round_int(v_flow[y][x]));
      if (((((sx >= 0) && (sx < w)) && (sy >= 0)) && (sy < h))) {
        row.push(image[sy][sx]);
      } else {
        row.push(0.0);
      }
      x = (x + 1);
    }
    out.push(row);
    y = (y + 1);
  }
  return out;
}
function convolve(img: number[][], ker: number[][]): number[][] {
  let h: number = _len(img);
  let w: number = _len(img[Math.trunc(0)]);
  let kh: number = _len(ker);
  let kw: number = _len(ker[Math.trunc(0)]);
  let py: number = Math.trunc(kh / 2);
  let px: number = Math.trunc(kw / 2);
  let out: number[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < w)) {
      let s: number = 0.0;
      let ky: number = 0;
      while ((ky < kh)) {
        let kx: number = 0;
        while ((kx < kw)) {
          let iy: number = ((y + ky) - py);
          let ix: number = ((x + kx) - px);
          if (((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w))) {
            s = (s + (img[iy][ix] * ker[ky][kx]));
          }
          kx = (kx + 1);
        }
        ky = (ky + 1);
      }
      row.push(s);
      x = (x + 1);
    }
    out.push(row);
    y = (y + 1);
  }
  return out;
}
function horn_schunck(image0: number[][], image1: number[][], num_iter: number, alpha: number): number[][][] {
  let h: number = _len(image0);
  let w: number = _len(image0[Math.trunc(0)]);
  let u: number[][] = zeros(h, w);
  let v: number[][] = zeros(h, w);
  let kernel_x: number[][] = [[-0.25, 0.25], [-0.25, 0.25]];
  let kernel_y: number[][] = [[-0.25, -0.25], [0.25, 0.25]];
  let kernel_t: number[][] = [[0.25, 0.25], [0.25, 0.25]];
  let laplacian: number[][] = [[0.0833333333333, 0.166666666667, 0.0833333333333], [0.166666666667, 0.0, 0.166666666667], [0.0833333333333, 0.166666666667, 0.0833333333333]];
  let it: number = 0;
  while ((it < num_iter)) {
    let warped: number[][] = warp(image0, u, v);
    let dx1: number[][] = convolve(warped, kernel_x);
    let dx2: number[][] = convolve(image1, kernel_x);
    let dy1: number[][] = convolve(warped, kernel_y);
    let dy2: number[][] = convolve(image1, kernel_y);
    let dt1: number[][] = convolve(warped, kernel_t);
    let dt2: number[][] = convolve(image1, kernel_t);
    let avg_u: number[][] = convolve(u, laplacian);
    let avg_v: number[][] = convolve(v, laplacian);
    let y: number = 0;
    while ((y < h)) {
      let x: number = 0;
      while ((x < w)) {
        let dx: number = (dx1[y][x] + dx2[y][x]);
        let dy: number = (dy1[y][x] + dy2[y][x]);
        let dt: number = (dt1[y][x] - dt2[y][x]);
        let au: number = avg_u[y][x];
        let av: number = avg_v[y][x];
        let numer: number = (((dx * au) + (dy * av)) + dt);
        let denom = (((alpha * alpha) + (dx * dx)) + (dy * dy));
        let upd = (numer / denom);
        u[y][x] = (au - (dx * upd));
        v[y][x] = (av - (dy * upd));
        x = (x + 1);
      }
      y = (y + 1);
    }
    it = (it + 1);
  }
  return [u, v];
}
function print_matrix(mat: number[][]) {
  let y: number = 0;
  while ((y < _len(mat))) {
    let row: number[] = mat[y];
    let x: number = 0;
    let line: string = "";
    while ((x < _len(row))) {
      line = (line + _str(round_int(row[x])));
      if (((x + 1) < _len(row))) {
        line = (line + " ");
      }
      x = (x + 1);
    }
    console.log(_str(line));
    y = (y + 1);
  }
}
function main() {
  let image0: number[][] = [[0.0, 0.0, 2.0], [0.0, 0.0, 2.0]];
  let image1: number[][] = [[0.0, 2.0, 0.0], [0.0, 2.0, 0.0]];
  let flows: number[][][] = horn_schunck(image0, image1, 20, 0.1);
  let u: number[][] = flows[Math.trunc(0)];
  let v: number[][] = flows[Math.trunc(1)];
  print_matrix(u);
  console.log(_str("---"));
  print_matrix(v);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

