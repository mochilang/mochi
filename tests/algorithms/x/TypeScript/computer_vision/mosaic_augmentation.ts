// Generated by Mochi v0.10.59 on 2025-08-06 20:30:19 GMT+7

export interface MosaicResult { img: number[][]; annos: number[][]; path: string }
function update_image_and_anno(all_img_list: string[], all_annos: number[][][], idxs: number[], output_size: number[], scale_range: number[], filter_scale: number): MosaicResult {
  let height: number = output_size[Math.trunc(0)];
  let width: number = output_size[Math.trunc(1)];
  let output_img: number[][] = [];
  let r: number = 0;
  while ((r < height)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < width)) {
      row.push(0);
      c = (c + 1);
    }
    output_img.push(row);
    r = (r + 1);
  }
  let scale_x: number = ((scale_range[Math.trunc(0)] + scale_range[Math.trunc(1)]) / 2.0);
  let scale_y: number = ((scale_range[Math.trunc(0)] + scale_range[Math.trunc(1)]) / 2.0);
  let divid_point_x: number = Math.trunc((scale_x * width));
  let divid_point_y: number = Math.trunc((scale_y * height));
  let new_anno: number[][] = [];
  let path_list: string[] = [];
  let i: number = 0;
  while ((i < _len(idxs))) {
    let index: number = idxs[i];
    let path: string = all_img_list[index];
    path_list.push(path);
    let img_annos: number[][] = all_annos[index];
    if ((i == 0)) {
      let y0: number = 0;
      while ((y0 < divid_point_y)) {
        let x0: number = 0;
        while ((x0 < divid_point_x)) {
          output_img[y0][x0] = (i + 1);
          x0 = (x0 + 1);
        }
        y0 = (y0 + 1);
      }
      let j0: number = 0;
      while ((j0 < _len(img_annos))) {
        let bbox: number[] = img_annos[j0];
        let xmin: number = (bbox[Math.trunc(1)] * scale_x);
        let ymin: number = (bbox[Math.trunc(2)] * scale_y);
        let xmax: number = (bbox[Math.trunc(3)] * scale_x);
        let ymax: number = (bbox[Math.trunc(4)] * scale_y);
        new_anno.push([bbox[Math.trunc(0)], xmin, ymin, xmax, ymax]);
        j0 = (j0 + 1);
      }
    } else {
      if ((i == 1)) {
        let y1: number = 0;
        while ((y1 < divid_point_y)) {
          let x1: number = divid_point_x;
          while ((x1 < width)) {
            output_img[y1][x1] = (i + 1);
            x1 = (x1 + 1);
          }
          y1 = (y1 + 1);
        }
        let j1: number = 0;
        while ((j1 < _len(img_annos))) {
          let bbox1: number[] = img_annos[j1];
          let xmin1: number = (scale_x + (bbox1[Math.trunc(1)] * (1.0 - scale_x)));
          let ymin1: number = (bbox1[Math.trunc(2)] * scale_y);
          let xmax1: number = (scale_x + (bbox1[Math.trunc(3)] * (1.0 - scale_x)));
          let ymax1: number = (bbox1[Math.trunc(4)] * scale_y);
          new_anno.push([bbox1[Math.trunc(0)], xmin1, ymin1, xmax1, ymax1]);
          j1 = (j1 + 1);
        }
      } else {
        if ((i == 2)) {
          let y2: number = divid_point_y;
          while ((y2 < height)) {
            let x2: number = 0;
            while ((x2 < divid_point_x)) {
              output_img[y2][x2] = (i + 1);
              x2 = (x2 + 1);
            }
            y2 = (y2 + 1);
          }
          let j2: number = 0;
          while ((j2 < _len(img_annos))) {
            let bbox2: number[] = img_annos[j2];
            let xmin2: number = (bbox2[Math.trunc(1)] * scale_x);
            let ymin2: number = (scale_y + (bbox2[Math.trunc(2)] * (1.0 - scale_y)));
            let xmax2: number = (bbox2[Math.trunc(3)] * scale_x);
            let ymax2: number = (scale_y + (bbox2[Math.trunc(4)] * (1.0 - scale_y)));
            new_anno.push([bbox2[Math.trunc(0)], xmin2, ymin2, xmax2, ymax2]);
            j2 = (j2 + 1);
          }
        } else {
          let y3: number = divid_point_y;
          while ((y3 < height)) {
            let x3: number = divid_point_x;
            while ((x3 < width)) {
              output_img[y3][x3] = (i + 1);
              x3 = (x3 + 1);
            }
            y3 = (y3 + 1);
          }
          let j3: number = 0;
          while ((j3 < _len(img_annos))) {
            let bbox3: number[] = img_annos[j3];
            let xmin3: number = (scale_x + (bbox3[Math.trunc(1)] * (1.0 - scale_x)));
            let ymin3: number = (scale_y + (bbox3[Math.trunc(2)] * (1.0 - scale_y)));
            let xmax3: number = (scale_x + (bbox3[Math.trunc(3)] * (1.0 - scale_x)));
            let ymax3: number = (scale_y + (bbox3[Math.trunc(4)] * (1.0 - scale_y)));
            new_anno.push([bbox3[Math.trunc(0)], xmin3, ymin3, xmax3, ymax3]);
            j3 = (j3 + 1);
          }
        }
      }
    }
    i = (i + 1);
  }
  if ((filter_scale > 0.0)) {
    let filtered: number[][] = [];
    let k: number = 0;
    while ((k < _len(new_anno))) {
      let anno: number[] = new_anno[k];
      let w: number = (anno[Math.trunc(3)] - anno[Math.trunc(1)]);
      let h: number = (anno[Math.trunc(4)] - anno[Math.trunc(2)]);
      if (((filter_scale < w) && (filter_scale < h))) {
        filtered.push(anno);
      }
      k = (k + 1);
    }
    new_anno = filtered;
  }
  return {"img": output_img, "annos": new_anno, "path": path_list[Math.trunc(0)]};
}
function main() {
  let all_img_list: string[] = ["img0.jpg", "img1.jpg", "img2.jpg", "img3.jpg"];
  let all_annos: number[][][] = [[[0.0, 0.1, 0.1, 0.4, 0.4]], [[1.0, 0.2, 0.3, 0.5, 0.7]], [[2.0, 0.6, 0.2, 0.9, 0.5]], [[3.0, 0.5, 0.5, 0.8, 0.8]]];
  let idxs: number[] = [0, 1, 2, 3];
  let output_size: number[] = [100, 100];
  let scale_range: number[] = [0.4, 0.6];
  let filter_scale: number = 0.05;
  let res: MosaicResult = update_image_and_anno(all_img_list, all_annos, idxs, output_size, scale_range, filter_scale);
  let new_annos: number[][] = res.annos;
  let path: string = res.path;
  console.log(_str(("Base image: " + path)));
  console.log(_str(("Mosaic annotation count: " + _str(_len(new_annos)))));
  let i: number = 0;
  while ((i < _len(new_annos))) {
    let a: number[] = new_annos[i];
    console.log(_str(((((((((_str(a[Math.trunc(0)]) + " ") + _str(a[Math.trunc(1)])) + " ") + _str(a[Math.trunc(2)])) + " ") + _str(a[Math.trunc(3)])) + " ") + _str(a[Math.trunc(4)]))));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

