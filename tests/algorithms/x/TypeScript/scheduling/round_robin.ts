// Generated by Mochi v0.10.70 on 2025-08-22 15:38:54 GMT+7

function calculate_waiting_times(burst_times: number[]): number[] {
  let quantum: number = 2;
  let rem: number[] = [];
  let i: number = 0;
  while ((i < _len(burst_times))) {
    rem.push(burst_times[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? burst_times.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let waiting: number[] = [];
  i = 0;
  while ((i < _len(burst_times))) {
    waiting.push(0);
    i = (i + 1);
  }
  let t: number = 0;
  while (true) {
    let done: boolean = true;
    let j: number = 0;
    while ((j < _len(burst_times))) {
      if ((rem[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rem.length + _mochi_idx : _mochi_idx;})()] > 0)) {
        done = false;
        if ((rem[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rem.length + _mochi_idx : _mochi_idx;})()] > quantum)) {
          t = (t + quantum);
          rem[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rem.length + _mochi_idx : _mochi_idx;})()] = (rem[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rem.length + _mochi_idx : _mochi_idx;})()] - quantum);
        } else {
          t = (t + rem[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rem.length + _mochi_idx : _mochi_idx;})()]);
          waiting[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? waiting.length + _mochi_idx : _mochi_idx;})()] = (t - burst_times[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? burst_times.length + _mochi_idx : _mochi_idx;})()]);
          rem[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? rem.length + _mochi_idx : _mochi_idx;})()] = 0;
        }
      }
      j = (j + 1);
    }
    if (done) {
      return waiting;
    }
  }
  return waiting;
}
function calculate_turn_around_times(burst_times: number[], waiting_times: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(burst_times))) {
    result.push((burst_times[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? burst_times.length + _mochi_idx : _mochi_idx;})()] + waiting_times[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? waiting_times.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return result;
}
function mean(values: number[]): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(values))) {
    total = (total + values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return (total / _len(values));
}
function format_float_5(x: number): string {
  let scaled: number = Math.trunc(((x * 100000.0) + 0.5));
  let int_part: number = Math.trunc(scaled / 100000);
  let frac_part: bigint = (scaled % 100000);
  let frac_str: string = _str(frac_part);
  while ((_len(frac_str) < 5)) {
    frac_str = ("0" + frac_str);
  }
  return ((_str(int_part) + ".") + frac_str);
}
function main() {
  let burst_times: number[] = [3, 5, 7];
  let waiting_times: number[] = calculate_waiting_times(burst_times);
  let turn_around_times: number[] = calculate_turn_around_times(burst_times, waiting_times);
  console.log(_str("Process ID \tBurst Time \tWaiting Time \tTurnaround Time"));
  let i: number = 0;
  while ((i < _len(burst_times))) {
    let line: string = ((((((("  " + _str((i + 1))) + "\t\t  ") + _str(burst_times[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? burst_times.length + _mochi_idx : _mochi_idx;})()])) + "\t\t  ") + _str(waiting_times[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? waiting_times.length + _mochi_idx : _mochi_idx;})()])) + "\t\t  ") + _str(turn_around_times[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? turn_around_times.length + _mochi_idx : _mochi_idx;})()]));
    console.log(_str(line));
    i = (i + 1);
  }
  console.log(_str(""));
  console.log(_str(("Average waiting time = " + format_float_5(mean(waiting_times)))));
  console.log(_str(("Average turn around time = " + format_float_5(mean(turn_around_times)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

