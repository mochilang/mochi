// Generated by Mochi v0.10.59 on 2025-08-07 08:54:44 GMT+7

function calculate_waitingtime(arrival_time: number[], burst_time: number[], no_of_processes: number): number[] {
  let waiting_time: number[] = [];
  let remaining_time: number[] = [];
  let i: number = 0;
  while ((i < no_of_processes)) {
    waiting_time.push(0);
    remaining_time.push(burst_time[(i) < 0 ? burst_time.length + (i) : i]);
    i = (i + 1);
  }
  let completed: number = 0;
  let total_time: number = 0;
  while ((completed != no_of_processes)) {
    let ready_process: number[] = [];
    let target_process: number = -1;
    let j: number = 0;
    while ((j < no_of_processes)) {
      if (((arrival_time[(j) < 0 ? arrival_time.length + (j) : j] <= total_time) && (remaining_time[(j) < 0 ? remaining_time.length + (j) : j] > 0))) {
        ready_process.push(j);
      }
      j = (j + 1);
    }
    if ((_len(ready_process) > 0)) {
      target_process = ready_process[(Math.trunc(0)) < 0 ? ready_process.length + (Math.trunc(0)) : Math.trunc(0)];
      let k: number = 0;
      while ((k < _len(ready_process))) {
        let idx: number = ready_process[(k) < 0 ? ready_process.length + (k) : k];
        if ((remaining_time[(idx) < 0 ? remaining_time.length + (idx) : idx] < remaining_time[(target_process) < 0 ? remaining_time.length + (target_process) : target_process])) {
          target_process = idx;
        }
        k = (k + 1);
      }
      total_time = (total_time + burst_time[(target_process) < 0 ? burst_time.length + (target_process) : target_process]);
      completed = (completed + 1);
      remaining_time[(target_process) < 0 ? remaining_time.length + (target_process) : target_process] = 0;
      waiting_time[(target_process) < 0 ? waiting_time.length + (target_process) : target_process] = ((total_time - arrival_time[(target_process) < 0 ? arrival_time.length + (target_process) : target_process]) - burst_time[(target_process) < 0 ? burst_time.length + (target_process) : target_process]);
    } else {
      total_time = (total_time + 1);
    }
  }
  return waiting_time;
}
function calculate_turnaroundtime(burst_time: number[], no_of_processes: number, waiting_time: number[]): number[] {
  let turn_around_time: number[] = [];
  let i: number = 0;
  while ((i < no_of_processes)) {
    turn_around_time.push((burst_time[(i) < 0 ? burst_time.length + (i) : i] + waiting_time[(i) < 0 ? waiting_time.length + (i) : i]));
    i = (i + 1);
  }
  return turn_around_time;
}
function average(values: number[]): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(values))) {
    total = (total + values[(i) < 0 ? values.length + (i) : i]);
    i = (i + 1);
  }
  return (total / _len(values));
}
let no_of_processes: number = 4;
let burst_time: number[] = [2, 5, 3, 7];
let arrival_time: number[] = [0, 0, 0, 0];
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let waiting_time: number[]
let turn_around_time: number[]
let avg_wait: number
let avg_turn: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[TEST CASE 01]"));
waiting_time = calculate_waitingtime(arrival_time, burst_time, no_of_processes)
turn_around_time = calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)
  console.log(_str("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time"));
  while ((i < no_of_processes)) {
    let pid: number = (i + 1);
    console.log(_str(((((((((_str(pid) + "\t") + _str(burst_time[(i) < 0 ? burst_time.length + (i) : i])) + "\t\t\t") + _str(arrival_time[(i) < 0 ? arrival_time.length + (i) : i])) + "\t\t\t\t") + _str(waiting_time[(i) < 0 ? waiting_time.length + (i) : i])) + "\t\t\t\t") + _str(turn_around_time[(i) < 0 ? turn_around_time.length + (i) : i]))));
    i = (i + 1);
  }
avg_wait = average(waiting_time)
avg_turn = average(turn_around_time)
  console.log(_str(("\nAverage waiting time = " + _str(avg_wait))));
  console.log(_str(("Average turnaround time = " + _str(avg_turn))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

