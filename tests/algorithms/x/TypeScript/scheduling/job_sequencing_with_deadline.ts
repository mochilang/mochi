// Generated by Mochi v0.10.70 on 2025-08-22 15:38:50 GMT+7

export interface Job { id: number; deadline: number; profit: number }
function sort_jobs_by_profit(jobs: Job[]): Job[] {
  let js: Job[] = jobs;
  let i: number = 0;
  while ((i < _len(js))) {
    let j: number = 0;
    while ((j < ((_len(js) - i) - 1))) {
      let a: Job = js[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? js.length + _mochi_idx : _mochi_idx;})()];
      let b: Job = js[(()=>{const _mochi_idx = Math.trunc((j + 1)); return _mochi_idx < 0 ? js.length + _mochi_idx : _mochi_idx;})()];
      if ((a.profit < b.profit)) {
        js[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? js.length + _mochi_idx : _mochi_idx;})()] = b;
        js[(()=>{const _mochi_idx = (j + 1); return _mochi_idx < 0 ? js.length + _mochi_idx : _mochi_idx;})()] = a;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return js;
}
function max_deadline(jobs: Job[]): number {
  let max_d: number = 0;
  let i: number = 0;
  while ((i < _len(jobs))) {
    let job: Job = jobs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? jobs.length + _mochi_idx : _mochi_idx;})()];
    let d: number = job.deadline;
    if ((d > max_d)) {
      max_d = d;
    }
    i = (i + 1);
  }
  return max_d;
}
function job_sequencing_with_deadlines(jobs: Job[]): number[] {
  let js: Job[] = sort_jobs_by_profit(jobs);
  let max_d: number = max_deadline(js);
  let time_slots: number[] = [];
  let t: number = 0;
  while ((t < max_d)) {
    time_slots.push((0 - 1));
    t = (t + 1);
  }
  let count: number = 0;
  let max_profit: number = 0;
  let i: number = 0;
  while ((i < _len(js))) {
    let job: Job = js[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? js.length + _mochi_idx : _mochi_idx;})()];
    let j: bigint = (job.deadline - 1);
    while ((j >= 0)) {
      if ((time_slots[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? time_slots.length + _mochi_idx : _mochi_idx;})()] === (0 - 1))) {
        time_slots[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? time_slots.length + _mochi_idx : _mochi_idx;})()] = job.id;
        count = (count + 1);
        max_profit = (max_profit + job.profit);
        break
      }
      j = (j - 1);
    }
    i = (i + 1);
  }
  let result: number[] = [];
  result.push(count);
  result.push(max_profit);
  return result;
}
let jobs1: Job[] = [];
let jobs2: Job[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  jobs1.push({id: 1, deadline: 4, profit: 20});
  jobs1.push({id: 2, deadline: 1, profit: 10});
  jobs1.push({id: 3, deadline: 1, profit: 40});
  jobs1.push({id: 4, deadline: 1, profit: 30});
  console.log(_str(job_sequencing_with_deadlines(jobs1)));
  jobs2.push({id: 1, deadline: 2, profit: 100});
  jobs2.push({id: 2, deadline: 1, profit: 19});
  jobs2.push({id: 3, deadline: 2, profit: 27});
  jobs2.push({id: 4, deadline: 1, profit: 25});
  jobs2.push({id: 5, deadline: 1, profit: 15});
  console.log(_str(job_sequencing_with_deadlines(jobs2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

