// Generated by Mochi v0.10.59 on 2025-08-07 08:54:41 GMT+7

function max_tasks(tasks_info: number[][]): number[] {
  let order: number[] = [];
  let i: number = 0;
  while ((i < _len(tasks_info))) {
    order.push(i);
    i = (i + 1);
  }
  let n: number = _len(order);
  i = 0;
  while ((i < n)) {
    let j: number = (i + 1);
    while ((j < n)) {
      if ((tasks_info[(Math.trunc(order[(j) < 0 ? order.length + (j) : j])) < 0 ? tasks_info.length + (Math.trunc(order[(j) < 0 ? order.length + (j) : j])) : Math.trunc(order[(j) < 0 ? order.length + (j) : j])][(Math.trunc(1)) < 0 ? tasks_info[(Math.trunc(order[(j) < 0 ? order.length + (j) : j])) < 0 ? tasks_info.length + (Math.trunc(order[(j) < 0 ? order.length + (j) : j])) : Math.trunc(order[(j) < 0 ? order.length + (j) : j])].length + (Math.trunc(1)) : Math.trunc(1)] > tasks_info[(Math.trunc(order[(i) < 0 ? order.length + (i) : i])) < 0 ? tasks_info.length + (Math.trunc(order[(i) < 0 ? order.length + (i) : i])) : Math.trunc(order[(i) < 0 ? order.length + (i) : i])][(Math.trunc(1)) < 0 ? tasks_info[(Math.trunc(order[(i) < 0 ? order.length + (i) : i])) < 0 ? tasks_info.length + (Math.trunc(order[(i) < 0 ? order.length + (i) : i])) : Math.trunc(order[(i) < 0 ? order.length + (i) : i])].length + (Math.trunc(1)) : Math.trunc(1)])) {
        let tmp: number = order[(i) < 0 ? order.length + (i) : i];
        order[(i) < 0 ? order.length + (i) : i] = order[(j) < 0 ? order.length + (j) : j];
        order[(j) < 0 ? order.length + (j) : j] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  let result: number[] = [];
  let pos: number = 1;
  i = 0;
  while ((i < n)) {
    let id: number = order[(i) < 0 ? order.length + (i) : i];
    let deadline: number = tasks_info[(id) < 0 ? tasks_info.length + (id) : id][(Math.trunc(0)) < 0 ? tasks_info[(id) < 0 ? tasks_info.length + (id) : id].length + (Math.trunc(0)) : Math.trunc(0)];
    if ((deadline >= pos)) {
      result.push(id);
    }
    i = (i + 1);
    pos = (pos + 1);
  }
  return result;
}
function main() {
  let ex1: number[][] = [[4, 20], [1, 10], [1, 40], [1, 30]];
  let ex2: number[][] = [[1, 10], [2, 20], [3, 30], [2, 40]];
  console.log(_str(_str(max_tasks(ex1))));
  console.log(_str(_str(max_tasks(ex2))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

