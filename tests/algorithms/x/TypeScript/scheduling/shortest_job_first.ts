// Generated by Mochi v0.10.59 on 2025-08-07 08:54:46 GMT+7

function calculate_waitingtime(arrival_time: number[], burst_time: number[], no_of_processes: number): number[] {
  let remaining_time: number[] = [];
  let i: number = 0;
  while ((i < no_of_processes)) {
    remaining_time.push(burst_time[(i) < 0 ? burst_time.length + (i) : i]);
    i = (i + 1);
  }
  let waiting_time: number[] = [];
  i = 0;
  while ((i < no_of_processes)) {
    waiting_time.push(0);
    i = (i + 1);
  }
  let complete: number = 0;
  let increment_time: number = 0;
  let minm: number = 1000000000;
  let short: number = 0;
  let check: boolean = false;
  while ((complete != no_of_processes)) {
    let j: number = 0;
    while ((j < no_of_processes)) {
      if ((((arrival_time[(j) < 0 ? arrival_time.length + (j) : j] <= increment_time) && (remaining_time[(j) < 0 ? remaining_time.length + (j) : j] > 0)) && (remaining_time[(j) < 0 ? remaining_time.length + (j) : j] < minm))) {
        minm = remaining_time[(j) < 0 ? remaining_time.length + (j) : j];
        short = j;
        check = true;
      }
      j = (j + 1);
    }
    if (!check) {
      increment_time = (increment_time + 1);
      continue
    }
    remaining_time[(short) < 0 ? remaining_time.length + (short) : short] = (remaining_time[(short) < 0 ? remaining_time.length + (short) : short] - 1);
    minm = remaining_time[(short) < 0 ? remaining_time.length + (short) : short];
    if ((minm == 0)) {
      minm = 1000000000;
    }
    if ((remaining_time[(short) < 0 ? remaining_time.length + (short) : short] == 0)) {
      complete = (complete + 1);
      check = false;
      let finish_time: number = (increment_time + 1);
      let finar: number = (finish_time - arrival_time[(short) < 0 ? arrival_time.length + (short) : short]);
      waiting_time[(short) < 0 ? waiting_time.length + (short) : short] = (finar - burst_time[(short) < 0 ? burst_time.length + (short) : short]);
      if ((waiting_time[(short) < 0 ? waiting_time.length + (short) : short] < 0)) {
        waiting_time[(short) < 0 ? waiting_time.length + (short) : short] = 0;
      }
    }
    increment_time = (increment_time + 1);
  }
  return waiting_time;
}
function calculate_turnaroundtime(burst_time: number[], no_of_processes: number, waiting_time: number[]): number[] {
  let turn_around_time: number[] = [];
  let i: number = 0;
  while ((i < no_of_processes)) {
    turn_around_time.push((burst_time[(i) < 0 ? burst_time.length + (i) : i] + waiting_time[(i) < 0 ? waiting_time.length + (i) : i]));
    i = (i + 1);
  }
  return turn_around_time;
}
function to_float(x: number): number {
  return (x * 1.0);
}
function calculate_average_times(waiting_time: number[], turn_around_time: number[], no_of_processes: number) {
  let total_waiting_time: number = 0;
  let total_turn_around_time: number = 0;
  let i: number = 0;
  while ((i < no_of_processes)) {
    total_waiting_time = (total_waiting_time + waiting_time[(i) < 0 ? waiting_time.length + (i) : i]);
    total_turn_around_time = (total_turn_around_time + turn_around_time[(i) < 0 ? turn_around_time.length + (i) : i]);
    i = (i + 1);
  }
  let avg_wait: number = (to_float(total_waiting_time) / to_float(no_of_processes));
  let avg_turn: number = (to_float(total_turn_around_time) / to_float(no_of_processes));
  console.log(_str(("Average waiting time = " + _str(avg_wait))));
  console.log(_str(("Average turn around time = " + _str(avg_turn))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (calculate_waitingtime([1, 2, 3, 4], [3, 3, 5, 1], 4)).join(' ') + "]"));
  console.log(_str("[" + (calculate_waitingtime([1, 2, 3], [2, 5, 1], 3)).join(' ') + "]"));
  console.log(_str("[" + (calculate_waitingtime([2, 3], [5, 1], 2)).join(' ') + "]"));
  console.log(_str("[" + (calculate_turnaroundtime([3, 3, 5, 1], 4, [0, 3, 5, 0])).join(' ') + "]"));
  console.log(_str("[" + (calculate_turnaroundtime([3, 3], 2, [0, 3])).join(' ') + "]"));
  console.log(_str("[" + (calculate_turnaroundtime([8, 10, 1], 3, [1, 0, 3])).join(' ') + "]"));
  calculate_average_times([0, 3, 5, 0], [3, 6, 10, 1], 4);
  calculate_average_times([2, 3], [3, 6], 2);
  calculate_average_times([10, 4, 3], [2, 7, 6], 3);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

