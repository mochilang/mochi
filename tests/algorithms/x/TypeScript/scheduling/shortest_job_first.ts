// Generated by Mochi v0.10.70 on 2025-08-22 15:38:56 GMT+7

function calculate_waitingtime(arrival_time: number[], burst_time: number[], no_of_processes: number): number[] {
  let remaining_time: number[] = [];
  let i: number = 0;
  while ((i < no_of_processes)) {
    remaining_time.push(burst_time[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? burst_time.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let waiting_time: number[] = [];
  i = 0;
  while ((i < no_of_processes)) {
    waiting_time.push(0);
    i = (i + 1);
  }
  let complete: number = 0;
  let increment_time: number = 0;
  let minm: number = 1000000000;
  let short: number = 0;
  let check: boolean = false;
  while ((complete !== no_of_processes)) {
    let j: number = 0;
    while ((j < no_of_processes)) {
      if ((((arrival_time[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arrival_time.length + _mochi_idx : _mochi_idx;})()] <= increment_time) && (remaining_time[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? remaining_time.length + _mochi_idx : _mochi_idx;})()] > 0)) && (remaining_time[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? remaining_time.length + _mochi_idx : _mochi_idx;})()] < minm))) {
        minm = remaining_time[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? remaining_time.length + _mochi_idx : _mochi_idx;})()];
        short = j;
        check = true;
      }
      j = (j + 1);
    }
    if (!check) {
      increment_time = (increment_time + 1);
      continue
    }
    remaining_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? remaining_time.length + _mochi_idx : _mochi_idx;})()] = (remaining_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? remaining_time.length + _mochi_idx : _mochi_idx;})()] - 1);
    minm = remaining_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? remaining_time.length + _mochi_idx : _mochi_idx;})()];
    if ((minm === 0)) {
      minm = 1000000000;
    }
    if ((remaining_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? remaining_time.length + _mochi_idx : _mochi_idx;})()] === 0)) {
      complete = (complete + 1);
      check = false;
      let finish_time: bigint = (increment_time + 1);
      let finar: bigint = (finish_time - arrival_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? arrival_time.length + _mochi_idx : _mochi_idx;})()]);
      waiting_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? waiting_time.length + _mochi_idx : _mochi_idx;})()] = (finar - burst_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? burst_time.length + _mochi_idx : _mochi_idx;})()]);
      if ((waiting_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? waiting_time.length + _mochi_idx : _mochi_idx;})()] < 0)) {
        waiting_time[(()=>{const _mochi_idx = short; return _mochi_idx < 0 ? waiting_time.length + _mochi_idx : _mochi_idx;})()] = 0;
      }
    }
    increment_time = (increment_time + 1);
  }
  return waiting_time;
}
function calculate_turnaroundtime(burst_time: number[], no_of_processes: number, waiting_time: number[]): number[] {
  let turn_around_time: number[] = [];
  let i: number = 0;
  while ((i < no_of_processes)) {
    turn_around_time.push((burst_time[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? burst_time.length + _mochi_idx : _mochi_idx;})()] + waiting_time[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? waiting_time.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return turn_around_time;
}
function to_float(x: number): number {
  return (x * 1.0);
}
function calculate_average_times(waiting_time: number[], turn_around_time: number[], no_of_processes: number) {
  let total_waiting_time: number = 0;
  let total_turn_around_time: number = 0;
  let i: number = 0;
  while ((i < no_of_processes)) {
    total_waiting_time = (total_waiting_time + waiting_time[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? waiting_time.length + _mochi_idx : _mochi_idx;})()]);
    total_turn_around_time = (total_turn_around_time + turn_around_time[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? turn_around_time.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let avg_wait: number = (Number(total_waiting_time) / Number(no_of_processes));
  let avg_turn: number = (Number(total_turn_around_time) / Number(no_of_processes));
  console.log(_str(("Average waiting time = " + _str(avg_wait))));
  console.log(_str(("Average turn around time = " + _str(avg_turn))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(calculate_waitingtime([1, 2, 3, 4], [3, 3, 5, 1], 4))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(calculate_waitingtime([1, 2, 3], [2, 5, 1], 3))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(calculate_waitingtime([2, 3], [5, 1], 2))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(calculate_turnaroundtime([3, 3, 5, 1], 4, [0, 3, 5, 0]))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(calculate_turnaroundtime([3, 3], 2, [0, 3]))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(calculate_turnaroundtime([8, 10, 1], 3, [1, 0, 3]))));
  calculate_average_times([0, 3, 5, 0], [3, 6, 10, 1], 4);
  calculate_average_times([2, 3], [3, 6], 2);
  calculate_average_times([10, 4, 3], [2, 7, 6], 3);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

