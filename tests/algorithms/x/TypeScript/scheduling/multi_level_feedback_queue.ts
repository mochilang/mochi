// Generated by Mochi v0.10.59 on 2025-08-07 08:54:43 GMT+7

export interface Process { process_name: string; arrival_time: number; stop_time: number; burst_time: number; waiting_time: number; turnaround_time: number }
function make_process(name: string, arrival: number, burst: number): Process {
  return {"process_name": name, "arrival_time": arrival, "stop_time": arrival, "burst_time": burst, "waiting_time": 0, "turnaround_time": 0};
}
export interface MLFQ { number_of_queues: number; time_slices: number[]; ready_queue: Process[]; current_time: number; finish_queue: Process[] }
function make_mlfq(nqueues: number, time_slices: number[], queue: Process[], current_time: number): MLFQ {
  return {"number_of_queues": nqueues, time_slices, "ready_queue": queue, current_time, "finish_queue": []};
}
function calculate_sequence_of_finish_queue(mlfq: MLFQ): string[] {
  let seq: string[] = [];
  let i: number = 0;
  while ((i < _len(mlfq.finish_queue))) {
    let p: Process = mlfq.finish_queue[(i) < 0 ? mlfq.finish_queue.length + (i) : i];
    seq.push(p.process_name);
    i = (i + 1);
  }
  return seq;
}
function calculate_waiting_time(queue: Process[]): number[] {
  let times: number[] = [];
  let i: number = 0;
  while ((i < _len(queue))) {
    let p: Process = queue[(i) < 0 ? queue.length + (i) : i];
    times.push(p.waiting_time);
    i = (i + 1);
  }
  return times;
}
function calculate_turnaround_time(queue: Process[]): number[] {
  let times: number[] = [];
  let i: number = 0;
  while ((i < _len(queue))) {
    let p: Process = queue[(i) < 0 ? queue.length + (i) : i];
    times.push(p.turnaround_time);
    i = (i + 1);
  }
  return times;
}
function calculate_completion_time(queue: Process[]): number[] {
  let times: number[] = [];
  let i: number = 0;
  while ((i < _len(queue))) {
    let p: Process = queue[(i) < 0 ? queue.length + (i) : i];
    times.push(p.stop_time);
    i = (i + 1);
  }
  return times;
}
function calculate_remaining_burst_time_of_processes(queue: Process[]): number[] {
  let times: number[] = [];
  let i: number = 0;
  while ((i < _len(queue))) {
    let p: Process = queue[(i) < 0 ? queue.length + (i) : i];
    times.push(p.burst_time);
    i = (i + 1);
  }
  return times;
}
function update_waiting_time(mlfq: MLFQ, process: Process): number {
  process.waiting_time = (process.waiting_time + (mlfq.current_time - process.stop_time));
  return process.waiting_time;
}
function first_come_first_served(mlfq: MLFQ, ready_queue: Process[]): Process[] {
  let finished: Process[] = [];
  let rq: Process[] = ready_queue;
  while ((_len(rq) != 0)) {
    let cp: Process = rq[(Math.trunc(0)) < 0 ? rq.length + (Math.trunc(0)) : Math.trunc(0)];
    rq = rq.slice(1, _len(rq));
    if ((mlfq.current_time < cp.arrival_time)) {
      mlfq.current_time = cp.arrival_time;
    }
    update_waiting_time(mlfq, cp);
    mlfq.current_time = (mlfq.current_time + cp.burst_time);
    cp.burst_time = 0;
    cp.turnaround_time = (mlfq.current_time - cp.arrival_time);
    cp.stop_time = mlfq.current_time;
    finished.push(cp);
  }
  mlfq.finish_queue = concat(mlfq.finish_queue, finished);
  return finished;
}
export interface RRResult { finished: Process[]; ready: Process[] }
function round_robin(mlfq: MLFQ, ready_queue: Process[], time_slice: number): RRResult {
  let finished: Process[] = [];
  let rq: Process[] = ready_queue;
  let count: number = _len(rq);
  let i: number = 0;
  while ((i < count)) {
    let cp: Process = rq[(Math.trunc(0)) < 0 ? rq.length + (Math.trunc(0)) : Math.trunc(0)];
    rq = rq.slice(1, _len(rq));
    if ((mlfq.current_time < cp.arrival_time)) {
      mlfq.current_time = cp.arrival_time;
    }
    update_waiting_time(mlfq, cp);
    if ((cp.burst_time > time_slice)) {
      mlfq.current_time = (mlfq.current_time + time_slice);
      cp.burst_time = (cp.burst_time - time_slice);
      cp.stop_time = mlfq.current_time;
      rq.push(cp);
    } else {
      mlfq.current_time = (mlfq.current_time + cp.burst_time);
      cp.burst_time = 0;
      cp.stop_time = mlfq.current_time;
      cp.turnaround_time = (mlfq.current_time - cp.arrival_time);
      finished.push(cp);
    }
    i = (i + 1);
  }
  mlfq.finish_queue = concat(mlfq.finish_queue, finished);
  return {finished, "ready": rq};
}
function multi_level_feedback_queue(mlfq: MLFQ): Process[] {
  let i: number = 0;
  while ((i < (mlfq.number_of_queues - 1))) {
    let rr: RRResult = round_robin(mlfq, mlfq.ready_queue, mlfq.time_slices[(i) < 0 ? mlfq.time_slices.length + (i) : i]);
    mlfq.ready_queue = rr.ready;
    i = (i + 1);
  }
  first_come_first_served(mlfq, mlfq.ready_queue);
  return mlfq.finish_queue;
}
let number_of_queues: number = 3;
let time_slices: number[] = [17, 25];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let P1: Process
let P2: Process
let P3: Process
let P4: Process
let queue: Process[]
let mlfq: MLFQ
let finish_queue: Process[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
P1 = make_process("P1", 0, 53)
P2 = make_process("P2", 0, 17)
P3 = make_process("P3", 0, 68)
P4 = make_process("P4", 0, 24)
queue = [P1, P2, P3, P4]
mlfq = make_mlfq(number_of_queues, time_slices, queue, 0)
finish_queue = multi_level_feedback_queue(mlfq)
  console.log(_str(("waiting time:\t\t\t" + _str(calculate_waiting_time([P1, P2, P3, P4])))));
  console.log(_str(("completion time:\t\t" + _str(calculate_completion_time([P1, P2, P3, P4])))));
  console.log(_str(("turnaround time:\t\t" + _str(calculate_turnaround_time([P1, P2, P3, P4])))));
  console.log(_str(("sequence of finished processes:\t" + _str(calculate_sequence_of_finish_queue(mlfq)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

