// Generated by Mochi v0.10.61 on 2025-08-08 18:00:33 GMT+7

export interface FuzzySet { name: string; left_boundary: number; peak: number; right_boundary: number }
function stringify(fs: FuzzySet): string {
  return (((((((fs.name + ": [") + _str(fs.left_boundary)) + ", ") + _str(fs.peak)) + ", ") + _str(fs.right_boundary)) + "]");
}
function max2(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}
function min2(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}
function complement(fs: FuzzySet): FuzzySet {
  return {"name": ("¬" + fs.name), "left_boundary": (1.0 - fs.right_boundary), "peak": (1.0 - fs.left_boundary), "right_boundary": (1.0 - fs.peak)};
}
function intersection(a: FuzzySet, b: FuzzySet): FuzzySet {
  return {"name": ((a.name + " ∩ ") + b.name), "left_boundary": max2(a.left_boundary, b.left_boundary), "peak": min2(a.right_boundary, b.right_boundary), "right_boundary": ((a.peak + b.peak) / 2.0)};
}
function union(a: FuzzySet, b: FuzzySet): FuzzySet {
  return {"name": ((a.name + " U ") + b.name), "left_boundary": min2(a.left_boundary, b.left_boundary), "peak": max2(a.right_boundary, b.right_boundary), "right_boundary": ((a.peak + b.peak) / 2.0)};
}
function membership(fs: FuzzySet, x: number): number {
  if (((x <= fs.left_boundary) || (x >= fs.right_boundary))) {
    return 0.0;
  }
  if (((fs.left_boundary < x) && (x <= fs.peak))) {
    return ((x - fs.left_boundary) / (fs.peak - fs.left_boundary));
  }
  if (((fs.peak < x) && (x < fs.right_boundary))) {
    return ((fs.right_boundary - x) / (fs.right_boundary - fs.peak));
  }
  return 0.0;
}
let sheru: FuzzySet = {"name": "Sheru", "left_boundary": 0.4, "peak": 1.0, "right_boundary": 0.6};
let siya: FuzzySet = {"name": "Siya", "left_boundary": 0.5, "peak": 1.0, "right_boundary": 0.7};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let sheru_comp: FuzzySet
let inter: FuzzySet
let uni: FuzzySet
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(stringify(sheru)));
  console.log(_str(stringify(siya)));
sheru_comp = complement(sheru)
  console.log(_str(stringify(sheru_comp)));
inter = intersection(siya, sheru)
  console.log(_str(stringify(inter)));
  console.log(_str(("Sheru membership 0.5: " + _str(membership(sheru, 0.5)))));
  console.log(_str(("Sheru membership 0.6: " + _str(membership(sheru, 0.6)))));
uni = union(siya, sheru)
  console.log(_str(stringify(uni)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

