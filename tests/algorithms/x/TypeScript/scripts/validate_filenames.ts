// Generated by Mochi v0.10.59 on 2025-08-07 08:54:48 GMT+7

function indexOf(s: string, sub: string): number {
  let n: number = _len(s);
  let m: number = _len(sub);
  let i: number = 0;
  while ((i <= (n - m))) {
    if (((s).substring(i, (i + m)) == sub)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function contains(s: string, sub: string): boolean {
  return (s.indexOf(sub) >= 0);
}
function validate(files: string[]): number {
  let upper: string[] = [];
  let space: string[] = [];
  let hyphen: string[] = [];
  let nodir: string[] = [];
  for (const f of files) {
    if ((f != f.toLowerCase())) {
      upper.push(f);
    }
    if (contains(f, " ")) {
      space.push(f);
    }
    if ((contains(f, "-") && (contains(f, "/site-packages/") == false))) {
      hyphen.push(f);
    }
    if (!contains(f, "/")) {
      nodir.push(f);
    }
  }
  if ((_len(upper) > 0)) {
    console.log(_str((_str(_len(upper)) + " files contain uppercase characters:")));
    for (const f of upper) {
      console.log(_str(f));
    }
    console.log(_str(""));
  }
  if ((_len(space) > 0)) {
    console.log(_str((_str(_len(space)) + " files contain space characters:")));
    for (const f of space) {
      console.log(_str(f));
    }
    console.log(_str(""));
  }
  if ((_len(hyphen) > 0)) {
    console.log(_str((_str(_len(hyphen)) + " files contain hyphen characters:")));
    for (const f of hyphen) {
      console.log(_str(f));
    }
    console.log(_str(""));
  }
  if ((_len(nodir) > 0)) {
    console.log(_str((_str(_len(nodir)) + " files are not in a directory:")));
    for (const f of nodir) {
      console.log(_str(f));
    }
    console.log(_str(""));
  }
  return (((_len(upper) + _len(space)) + _len(hyphen)) + _len(nodir));
}
function main() {
  let files: string[] = ["scripts/Validate_filenames.py", "good/file.txt", "bad file.txt", "/site-packages/pkg-name.py", "nopath", "src/hyphen-name.py"];
  let bad: number = validate(files);
  console.log(_str(_str(bad)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

