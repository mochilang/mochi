// Generated by Mochi v0.10.66 on 2025-08-16 12:47:16 GMT+7

let HEX: string = "0123456789abcdef";
function byte_to_hex(b: number): string {
  let hi: number = Math.trunc(b / 16);
  let lo: number = (b % 16);
  return (HEX[(()=>{const _mochi_idx = hi; return _mochi_idx < 0 ? HEX.length + _mochi_idx : _mochi_idx;})()] + HEX[(()=>{const _mochi_idx = lo; return _mochi_idx < 0 ? HEX.length + _mochi_idx : _mochi_idx;})()]);
}
function bytes_to_hex(bs: number[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(bs))) {
    res = (res + byte_to_hex(bs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? bs.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function sha256_hex(s: string): string {
  return bytes_to_hex(sha256(s));
}
function solution_001(): string {
  let total: number = 0;
  let n: number = 0;
  while ((n < 1000)) {
    if ((((n % 3) === 0) || ((n % 5) === 0))) {
      total = (total + n);
    }
    n = (n + 1);
  }
  return _str(total);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
import { createHash } from 'node:crypto';
function sha256(bs: number[]): number[] {
  const hash = createHash('sha256');
  hash.update(new Uint8Array(bs));
  return Array.from(hash.digest());
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let expected: string
let answer: string
let computed: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
expected = sha256_hex("233168")
answer = solution_001()
computed = sha256_hex(answer)
  if ((computed === expected)) {
    console.log(_str("Problem 001 passed"));
  } else {
    console.log(_str(((("Problem 001 failed: " + computed) + " != ") + expected)));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

