// Generated by Mochi v0.10.59 on 2025-08-07 00:04:00 GMT+7

function pivot(t: number[][], row: number, col: number): number[][] {
  let pivotRow: number[] = [];
  let pivotVal: number = t[(row) < 0 ? t.length + (row) : row][(col) < 0 ? t[(row) < 0 ? t.length + (row) : row].length + (col) : col];
  for (let j = 0; j < _len(t[(row) < 0 ? t.length + (row) : row]); j++) {
    pivotRow.push((t[(row) < 0 ? t.length + (row) : row][(j) < 0 ? t[(row) < 0 ? t.length + (row) : row].length + (j) : j] / pivotVal));
  }
  t[(row) < 0 ? t.length + (row) : row] = pivotRow;
  for (let i = 0; i < _len(t); i++) {
    if ((i != row)) {
      let factor: number = t[(i) < 0 ? t.length + (i) : i][(col) < 0 ? t[(i) < 0 ? t.length + (i) : i].length + (col) : col];
      let newRow: number[] = [];
      for (let j = 0; j < _len(t[(i) < 0 ? t.length + (i) : i]); j++) {
        let value: number = (t[(i) < 0 ? t.length + (i) : i][(j) < 0 ? t[(i) < 0 ? t.length + (i) : i].length + (j) : j] - (factor * pivotRow[(j) < 0 ? pivotRow.length + (j) : j]));
        newRow.push(value);
      }
      t[(i) < 0 ? t.length + (i) : i] = newRow;
    }
  }
  return t;
}
function findPivot(t: number[][]): number[] {
  let col: number = 0;
  let minVal: number = 0.0;
  for (let j = 0; j < (_len(t[(Math.trunc(0)) < 0 ? t.length + (Math.trunc(0)) : Math.trunc(0)]) - 1); j++) {
    let v: number = t[(Math.trunc(0)) < 0 ? t.length + (Math.trunc(0)) : Math.trunc(0)][(j) < 0 ? t[(Math.trunc(0)) < 0 ? t.length + (Math.trunc(0)) : Math.trunc(0)].length + (j) : j];
    if ((v < minVal)) {
      minVal = v;
      col = j;
    }
  }
  if ((minVal >= 0.0)) {
    return [-1, -1];
  }
  let row: number = -1;
  let minRatio: number = 0.0;
  let first: boolean = true;
  for (let i = 1; i < _len(t); i++) {
    let coeff: number = t[(i) < 0 ? t.length + (i) : i][(col) < 0 ? t[(i) < 0 ? t.length + (i) : i].length + (col) : col];
    if ((coeff > 0.0)) {
      let rhs: number = t[(i) < 0 ? t.length + (i) : i][(Math.trunc((_len(t[(i) < 0 ? t.length + (i) : i]) - 1))) < 0 ? t[(i) < 0 ? t.length + (i) : i].length + (Math.trunc((_len(t[(i) < 0 ? t.length + (i) : i]) - 1))) : Math.trunc((_len(t[(i) < 0 ? t.length + (i) : i]) - 1))];
      let ratio: number = (rhs / coeff);
      if ((first || (ratio < minRatio))) {
        minRatio = ratio;
        row = i;
        first = false;
      }
    }
  }
  return [row, col];
}
function interpret(t: number[][], nVars: number): Record<string, number> {
  let lastCol: number = (_len(t[(Math.trunc(0)) < 0 ? t.length + (Math.trunc(0)) : Math.trunc(0)]) - 1);
  let p: number = t[(Math.trunc(0)) < 0 ? t.length + (Math.trunc(0)) : Math.trunc(0)][(lastCol) < 0 ? t[(Math.trunc(0)) < 0 ? t.length + (Math.trunc(0)) : Math.trunc(0)].length + (lastCol) : lastCol];
  if ((p < 0.0)) {
    p = -p;
  }
  let result: Record<string, number> = {};
  result.P = p;
  for (let i = 0; i < nVars; i++) {
    let nzRow: number = -1;
    let nzCount: number = 0;
    for (let r = 0; r < _len(t); r++) {
      let val: number = t[(r) < 0 ? t.length + (r) : r][(i) < 0 ? t[(r) < 0 ? t.length + (r) : r].length + (i) : i];
      if ((val != 0.0)) {
        nzCount = (nzCount + 1);
        nzRow = r;
      }
    }
    if (((nzCount == 1) && (t[(nzRow) < 0 ? t.length + (nzRow) : nzRow][(i) < 0 ? t[(nzRow) < 0 ? t.length + (nzRow) : nzRow].length + (i) : i] == 1.0))) {
      result[(("x" + _str((i + 1)))) < 0 ? result.length + (("x" + _str((i + 1)))) : ("x" + _str((i + 1)))] = t[(nzRow) < 0 ? t.length + (nzRow) : nzRow][(lastCol) < 0 ? t[(nzRow) < 0 ? t.length + (nzRow) : nzRow].length + (lastCol) : lastCol];
    }
  }
  return result;
}
function simplex(tab: number[][]): number[][] {
  let t: number[][] = tab;
  while (true) {
    let p: number[] = findPivot(t);
    let row: number = p[(Math.trunc(0)) < 0 ? p.length + (Math.trunc(0)) : Math.trunc(0)];
    let col: number = p[(Math.trunc(1)) < 0 ? p.length + (Math.trunc(1)) : Math.trunc(1)];
    if ((row < 0)) {
      break
    }
    t = pivot(t, row, col);
  }
  return t;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let tableau: number[][]
let finalTab: number[][]
let res: Record<string, number>
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
tableau = [[-1.0, -1.0, 0.0, 0.0, 0.0], [1.0, 3.0, 1.0, 0.0, 4.0], [3.0, 1.0, 0.0, 1.0, 4.0]]
finalTab = simplex(tableau)
res = interpret(finalTab, 2)
  console.log(_str(("P: " + _str(res.P))));
  for (let i = 0; i < 2; i++) {
    let key: string = ("x" + _str((i + 1)));
    if ((key in res)) {
      console.log(_str(((key + ": ") + _str(res[(key) < 0 ? res.length + (key) : key]))));
    }
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

