// Generated by Mochi v0.10.59 on 2025-08-06 21:51:38 GMT+7

function parse_project_name(toml: string): string {
  let i: number = 0;
  let name: string = "";
  let n: number = _len(toml);
  while (((i + 4) < n)) {
    if (((((toml[(i) < 0 ? toml.length + (i) : i] == "n") && (toml[(Math.trunc((i + 1))) < 0 ? toml.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))] == "a")) && (toml[(Math.trunc((i + 2))) < 0 ? toml.length + (Math.trunc((i + 2))) : Math.trunc((i + 2))] == "m")) && (toml[(Math.trunc((i + 3))) < 0 ? toml.length + (Math.trunc((i + 3))) : Math.trunc((i + 3))] == "e"))) {
      i = (i + 4);
      while (((i < n) && (toml[(i) < 0 ? toml.length + (i) : i] != "\""))) {
        i = (i + 1);
      }
      i = (i + 1);
      while (((i < n) && (toml[(i) < 0 ? toml.length + (i) : i] != "\""))) {
        name = (name + toml[(i) < 0 ? toml.length + (i) : i]);
        i = (i + 1);
      }
      return name;
    }
    i = (i + 1);
  }
  return name;
}
let pyproject: string = "[project]\nname = \"thealgorithms-python\"";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let project: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
project = parse_project_name(pyproject)
  console.log(_str(project));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

