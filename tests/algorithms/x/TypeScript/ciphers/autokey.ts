// Generated by Mochi v0.10.59 on 2025-08-06 20:04:49 GMT+7

let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
function to_lowercase(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[i];
    let j: number = 0;
    let found: boolean = false;
    while ((j < 26)) {
      if ((c == UPPER[j])) {
        res = (res + LOWER[j]);
        found = true;
        break
      }
      j = (j + 1);
    }
    if (!found) {
      res = (res + c);
    }
    i = (i + 1);
  }
  return res;
}
function char_index(c: string): number {
  let i: number = 0;
  while ((i < 26)) {
    if ((c == LOWER[i])) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function index_char(i: number): string {
  return LOWER[i];
}
function encrypt(plaintext: string, key: string): string {
  if ((_len(plaintext) == 0)) {
    panic("plaintext is empty");
  }
  if ((_len(key) == 0)) {
    panic("key is empty");
  }
  let full_key: string = (key + plaintext);
  plaintext = to_lowercase(plaintext);
  full_key = to_lowercase(full_key);
  let p_i: number = 0;
  let k_i: number = 0;
  let ciphertext: string = "";
  while ((p_i < _len(plaintext))) {
    let p_char: string = plaintext[p_i];
    let p_idx: number = char_index(p_char);
    if ((p_idx < 0)) {
      ciphertext = (ciphertext + p_char);
      p_i = (p_i + 1);
    } else {
      let k_char: string = full_key[k_i];
      let k_idx: number = char_index(k_char);
      if ((k_idx < 0)) {
        k_i = (k_i + 1);
      } else {
        let c_idx: number = ((p_idx + k_idx) % 26);
        ciphertext = (ciphertext + index_char(c_idx));
        k_i = (k_i + 1);
        p_i = (p_i + 1);
      }
    }
  }
  return ciphertext;
}
function decrypt(ciphertext: string, key: string): string {
  if ((_len(ciphertext) == 0)) {
    panic("ciphertext is empty");
  }
  if ((_len(key) == 0)) {
    panic("key is empty");
  }
  let current_key: string = to_lowercase(key);
  let c_i: number = 0;
  let k_i: number = 0;
  let plaintext: string = "";
  while ((c_i < _len(ciphertext))) {
    let c_char: string = ciphertext[c_i];
    let c_idx: number = char_index(c_char);
    if ((c_idx < 0)) {
      plaintext = (plaintext + c_char);
    } else {
      let k_char: string = current_key[k_i];
      let k_idx: number = char_index(k_char);
      let p_idx: number = (((c_idx - k_idx) + 26) % 26);
      let p_char: string = index_char(p_idx);
      plaintext = (plaintext + p_char);
      current_key = (current_key + p_char);
      k_i = (k_i + 1);
    }
    c_i = (c_i + 1);
  }
  return plaintext;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(encrypt("hello world", "coffee")));
  console.log(_str(decrypt("jsqqs avvwo", "coffee")));
  console.log(_str(encrypt("coffee is good as python", "TheAlgorithms")));
  console.log(_str(decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

