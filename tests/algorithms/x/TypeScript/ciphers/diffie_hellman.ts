// Generated by Mochi v0.10.59 on 2025-08-07 10:34:23 GMT+7

function int_to_hex(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let digits: string = "0123456789abcdef";
  let num: number = n;
  let res: string = "";
  while ((num > 0)) {
    let d = (num % 16);
    res = (digits[(d) < 0 ? digits.length + (d) : d] + res);
    num = Math.trunc(num / 16);
  }
  return res;
}
let seed: number = 123456789;
function rand_int(): number {
  seed = Number((((1103515245n * BigInt(seed)) + 12345n) % 2147483648n));
  return seed;
}
let PRIME: number = 23;
function mod_pow(base: number, exp: number): number {
  let result: number = 1;
  let b: number = (base % PRIME);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % PRIME);
    }
    b = ((b * b) % PRIME);
    e = Math.trunc(e / 2);
  }
  return result;
}
function is_valid_public_key(key: number): boolean {
  if (((key < 2) || (key > (PRIME - 2)))) {
    return false;
  }
  return (mod_pow(key, Math.trunc((PRIME - 1) / 2)) == 1);
}
function generate_private_key(): number {
  return ((rand_int() % (PRIME - 2)) + 2);
}
let generator: number = 5;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let alice_private: number
let alice_public: number
let bob_private: number
let bob_public: number
let alice_shared: number
let bob_shared: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
alice_private = generate_private_key()
alice_public = mod_pow(generator, alice_private)
bob_private = generate_private_key()
bob_public = mod_pow(generator, bob_private)
  if (!is_valid_public_key(alice_public)) {
    _panic("Invalid public key");
  }
  if (!is_valid_public_key(bob_public)) {
    _panic("Invalid public key");
  }
alice_shared = mod_pow(bob_public, alice_private)
bob_shared = mod_pow(alice_public, bob_private)
  console.log(_str(int_to_hex(alice_shared)));
  console.log(_str(int_to_hex(bob_shared)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

