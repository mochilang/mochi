// Generated by Mochi v0.10.59 on 2025-08-06 20:07:12 GMT+7

let B32_CHARSET: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
function indexOfChar(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let digits: string = "0123456789";
  let idx = indexOfChar(upper, ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = indexOfChar(lower, ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  idx = indexOfChar(digits, ch);
  if ((idx >= 0)) {
    return (48 + idx);
  }
  if ((ch == " ")) {
    return 32;
  }
  if ((ch == "!")) {
    return 33;
  }
  return 0;
}
function chr(code: number): string {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let digits: string = "0123456789";
  if ((code == 32)) {
    return " ";
  }
  if ((code == 33)) {
    return "!";
  }
  let idx: number = (code - 65);
  if (((idx >= 0) && (idx < _len(upper)))) {
    return upper[idx];
  }
  idx = (code - 97);
  if (((idx >= 0) && (idx < _len(lower)))) {
    return lower[idx];
  }
  idx = (code - 48);
  if (((idx >= 0) && (idx < _len(digits)))) {
    return digits[idx];
  }
  return "";
}
function repeat(s: string, n: number): string {
  let out: string = "";
  let i: number = 0;
  while ((i < n)) {
    out = (out + s);
    i = (i + 1);
  }
  return out;
}
function to_binary(n: number, bits: number): string {
  let v: number = n;
  let out: string = "";
  let i: number = 0;
  while ((i < bits)) {
    out = (_str((v % 2)) + out);
    v = Math.trunc(v / 2);
    i = (i + 1);
  }
  return out;
}
function binary_to_int(bits: string): number {
  let n: number = 0;
  let i: number = 0;
  while ((i < _len(bits))) {
    n = (n * 2);
    if ((bits[i] == "1")) {
      n = (n + 1);
    }
    i = (i + 1);
  }
  return n;
}
function base32_encode(data: string): string {
  let binary_data: string = "";
  let i: number = 0;
  while ((i < _len(data))) {
    binary_data = (binary_data + to_binary(ord(data[i]), 8));
    i = (i + 1);
  }
  let remainder: number = (_len(binary_data) % 5);
  if ((remainder != 0)) {
    binary_data = (binary_data + repeat("0", (5 - remainder)));
  }
  let b32_result: string = "";
  let j: number = 0;
  while ((j < _len(binary_data))) {
    let chunk: string = binary_data.slice(j, (j + 5));
    let index: number = binary_to_int(chunk);
    b32_result = (b32_result + B32_CHARSET[index]);
    j = (j + 5);
  }
  let rem: number = (_len(b32_result) % 8);
  if ((rem != 0)) {
    b32_result = (b32_result + repeat("=", (8 - rem)));
  }
  return b32_result;
}
function base32_decode(data: string): string {
  let clean: string = "";
  let i: number = 0;
  while ((i < _len(data))) {
    let ch: string = data[i];
    if ((ch != "=")) {
      clean = (clean + ch);
    }
    i = (i + 1);
  }
  let binary_chunks: string = "";
  i = 0;
  while ((i < _len(clean))) {
    let idx: number = indexOfChar(B32_CHARSET, clean[i]);
    binary_chunks = (binary_chunks + to_binary(idx, 5));
    i = (i + 1);
  }
  let result: string = "";
  let j: number = 0;
  while (((j + 8) <= _len(binary_chunks))) {
    let byte_bits: string = binary_chunks.slice(j, (j + 8));
    let code: number = binary_to_int(byte_bits);
    result = (result + chr(code));
    j = (j + 8);
  }
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(base32_encode("Hello World!")));
  console.log(_str(base32_encode("123456")));
  console.log(_str(base32_encode("some long complex string")));
  console.log(_str(base32_decode("JBSWY3DPEBLW64TMMQQQ====")));
  console.log(_str(base32_decode("GEZDGNBVGY======")));
  console.log(_str(base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

