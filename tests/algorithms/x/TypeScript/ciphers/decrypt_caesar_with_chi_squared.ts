// Generated by Mochi v0.10.59 on 2025-08-06 20:07:54 GMT+7

export interface Result { shift: number; chi: number; decoded: string }
function default_alphabet(): string[] {
  return ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
}
function default_frequencies(): Record<string, number> {
  return {"a": 0.08497, "b": 0.01492, "c": 0.02202, "d": 0.04253, "e": 0.11162, "f": 0.02228, "g": 0.02015, "h": 0.06094, "i": 0.07546, "j": 0.00153, "k": 0.01292, "l": 0.04025, "m": 0.02406, "n": 0.06749, "o": 0.07507, "p": 0.01929, "q": 0.00095, "r": 0.07587, "s": 0.06327, "t": 0.09356, "u": 0.02758, "v": 0.00978, "w": 0.0256, "x": 0.0015, "y": 0.01994, "z": 0.00077};
}
function index_of(xs: string[], ch: string): number {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function count_char(s: string, ch: string): number {
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      count = (count + 1);
    }
    i = (i + 1);
  }
  return count;
}
function decrypt_caesar_with_chi_squared(ciphertext: string, cipher_alphabet: string[], frequencies_dict: Record<string, number>, case_sensitive: boolean): Result {
  let alphabet_letters: string[] = cipher_alphabet;
  if ((_len(alphabet_letters) == 0)) {
    alphabet_letters = default_alphabet();
  }
  let frequencies: Record<string, number> = frequencies_dict;
  if ((_len(frequencies) == 0)) {
    frequencies = default_frequencies();
  }
  if (!case_sensitive) {
    ciphertext = ciphertext.toLowerCase();
  }
  let best_shift: number = 0;
  let best_chi: number = 0.0;
  let best_text: string = "";
  let shift: number = 0;
  while ((shift < _len(alphabet_letters))) {
    let decrypted: string = "";
    let i: number = 0;
    while ((i < _len(ciphertext))) {
      let ch: string = (ciphertext).substring(i, (i + 1));
      let idx: number = index_of(alphabet_letters, ch.toLowerCase());
      if ((idx >= 0)) {
        let m: number = _len(alphabet_letters);
        let new_idx: number = ((idx - shift) % m);
        if ((new_idx < 0)) {
          new_idx = (new_idx + m);
        }
        let new_char: string = alphabet_letters[new_idx];
        if ((case_sensitive && (ch != ch.toLowerCase()))) {
          decrypted = (decrypted + new_char.toUpperCase());
        } else {
          decrypted = (decrypted + new_char);
        }
      } else {
        decrypted = (decrypted + ch);
      }
      i = (i + 1);
    }
    let chi: number = 0.0;
    let lowered: string = (case_sensitive ? decrypted.toLowerCase() : decrypted);
    let j: number = 0;
    while ((j < _len(alphabet_letters))) {
      let letter: string = alphabet_letters[j];
      let occ: number = count_char(lowered, letter);
      if ((occ > 0)) {
        let occf: number = occ;
        let expected: number = (frequencies[letter] * occf);
        let diff: number = (occf - expected);
        chi = (chi + (((diff * diff) / expected) * occf));
      }
      j = (j + 1);
    }
    if (((shift == 0) || (chi < best_chi))) {
      best_shift = shift;
      best_chi = chi;
      best_text = decrypted;
    }
    shift = (shift + 1);
  }
  return {"shift": best_shift, "chi": best_chi, "decoded": best_text};
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let r1: Result
let r2: Result
let r3: Result
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
r1 = decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", [], {}, false)
  console.log(_str(((((_str(r1.shift) + ", ") + _str(r1.chi)) + ", ") + r1.decoded)));
r2 = decrypt_caesar_with_chi_squared("crybd cdbsxq", [], {}, false)
  console.log(_str(((((_str(r2.shift) + ", ") + _str(r2.chi)) + ", ") + r2.decoded)));
r3 = decrypt_caesar_with_chi_squared("Crybd Cdbsxq", [], {}, true)
  console.log(_str(((((_str(r3.shift) + ", ") + _str(r3.chi)) + ", ") + r3.decoded)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

