// Generated by Mochi v0.10.59 on 2025-08-06 20:29:32 GMT+7

let seed: number = 1;
function set_seed(s: number) {
  seed = s;
}
function randint(a: number, b: number): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return ((seed % ((b - a) + 1)) + a);
}
let ascii_chars: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
function ord(ch: string): number {
  let i: number = 0;
  while ((i < _len(ascii_chars))) {
    if ((ascii_chars[i] == ch)) {
      return (32 + i);
    }
    i = (i + 1);
  }
  return 0;
}
function chr(code: number): string {
  if (((code < 32) || (code > 126))) {
    return "";
  }
  return ascii_chars[Math.trunc((code - 32))];
}
function encrypt(text: string): Record<string, number[]> {
  let cipher: number[] = [];
  let key: number[] = [];
  let i: number = 0;
  while ((i < _len(text))) {
    let p: number = ord(text[i]);
    let k: number = randint(1, 300);
    let c: number = ((p + k) * k);
    cipher.push(c);
    key.push(k);
    i = (i + 1);
  }
  let res: Record<string, number[]> = {};
  res.cipher = cipher;
  res.key = key;
  return res;
}
function decrypt(cipher: number[], key: number[]): string {
  let plain: string = "";
  let i: number = 0;
  while ((i < _len(key))) {
    let p: number = Math.trunc((cipher[i] - (key[i] * key[i])) / key[i]);
    plain = (plain + chr(p));
    i = (i + 1);
  }
  return plain;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let res: Record<string, number[]>
let cipher: number[]
let key: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  set_seed(1);
res = encrypt("Hello")
cipher = res.cipher
key = res.key
  console.log(_str("[" + (cipher).join(' ') + "]"));
  console.log(_str("[" + (key).join(' ') + "]"));
  console.log(_str(decrypt(cipher, key)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

