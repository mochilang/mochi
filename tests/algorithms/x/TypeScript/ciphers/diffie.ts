// Generated by Mochi v0.10.59 on 2025-08-06 20:24:00 GMT+7

function mod_pow(base: number, exp: number, mod: number): number {
  let result: number = 1;
  let b: number = (base % mod);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % mod);
    }
    e = Math.trunc(e / 2);
    b = ((b * b) % mod);
  }
  return result;
}
function contains(xs: number[], val: number): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == val)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function find_primitive(modulus: number): number {
  let r: number = 1;
  while ((r < modulus)) {
    let li: number[] = [];
    let x: number = 0;
    let valid: boolean = true;
    while (((x < (modulus - 1)) && valid)) {
      let value: number = mod_pow(r, x, modulus);
      if (li.includes(value)) {
        valid = false;
      } else {
        li.push(value);
        x = (x + 1);
      }
    }
    if (valid) {
      return r;
    }
    r = (r + 1);
  }
  return -1;
}
let prime: number = 23;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let primitive_root: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(find_primitive(7)));
  console.log(_str(find_primitive(11)));
  console.log(_str(find_primitive(8)));
primitive_root = find_primitive(prime)
  if ((primitive_root == (0 - 1))) {
    console.log(_str("Cannot find the primitive for the value: -1"));
  } else {
    let a_private: number = 6;
    let b_private: number = 15;
    let a_public: number = mod_pow(primitive_root, a_private, prime);
    let b_public: number = mod_pow(primitive_root, b_private, prime);
    let a_secret: number = mod_pow(b_public, a_private, prime);
    let b_secret: number = mod_pow(a_public, b_private, prime);
    console.log(_str(("The key value generated by A is: " + _str(a_secret))));
    console.log(_str(("The key value generated by B is: " + _str(b_secret))));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

