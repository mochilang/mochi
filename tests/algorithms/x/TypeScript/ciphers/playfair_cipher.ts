// Generated by Mochi v0.10.59 on 2025-08-06 20:29:35 GMT+7

function contains(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function index_of(xs: string[], x: string): number {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == x)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function prepare_input(dirty: string): string {
  let letters: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let upper_dirty: string = dirty.toUpperCase();
  let filtered: string = "";
  let i: number = 0;
  while ((i < _len(upper_dirty))) {
    let c: string = (upper_dirty).substring(i, (i + 1));
    if (letters.includes(c)) {
      filtered = (filtered + c);
    }
    i = (i + 1);
  }
  if ((_len(filtered) < 2)) {
    return filtered;
  }
  let clean: string = "";
  i = 0;
  while ((i < (_len(filtered) - 1))) {
    let c1: string = (filtered).substring(i, (i + 1));
    let c2: string = (filtered).substring((i + 1), (i + 2));
    clean = (clean + c1);
    if ((c1 == c2)) {
      clean = (clean + "X");
    }
    i = (i + 1);
  }
  clean = (clean + (filtered).substring((_len(filtered) - 1), _len(filtered)));
  if (((_len(clean) % 2) == 1)) {
    clean = (clean + "X");
  }
  return clean;
}
function generate_table(key: string): string[] {
  let alphabet: string = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
  let table: string[] = [];
  let upper_key: string = key.toUpperCase();
  let i: number = 0;
  while ((i < _len(upper_key))) {
    let c: string = (upper_key).substring(i, (i + 1));
    if (alphabet.includes(c)) {
      if (!table.includes(c)) {
        table.push(c);
      }
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(alphabet))) {
    let c: string = (alphabet).substring(i, (i + 1));
    if (!table.includes(c)) {
      table.push(c);
    }
    i = (i + 1);
  }
  return table;
}
function encode(plaintext: string, key: string): string {
  let table: string[] = generate_table(key);
  let text: string = prepare_input(plaintext);
  let cipher: string = "";
  let i: number = 0;
  while ((i < _len(text))) {
    let c1: string = (text).substring(i, (i + 1));
    let c2: string = (text).substring((i + 1), (i + 2));
    let idx1: number = index_of(table, c1);
    let idx2: number = index_of(table, c2);
    let row1: number = Math.trunc(idx1 / 5);
    let col1: number = (idx1 % 5);
    let row2: number = Math.trunc(idx2 / 5);
    let col2: number = (idx2 % 5);
    if ((row1 == row2)) {
      cipher = (cipher + table[Math.trunc(((row1 * 5) + ((col1 + 1) % 5)))]);
      cipher = (cipher + table[Math.trunc(((row2 * 5) + ((col2 + 1) % 5)))]);
    } else {
      if ((col1 == col2)) {
        cipher = (cipher + table[Math.trunc(((((row1 + 1) % 5) * 5) + col1))]);
        cipher = (cipher + table[Math.trunc(((((row2 + 1) % 5) * 5) + col2))]);
      } else {
        cipher = (cipher + table[Math.trunc(((row1 * 5) + col2))]);
        cipher = (cipher + table[Math.trunc(((row2 * 5) + col1))]);
      }
    }
    i = (i + 2);
  }
  return cipher;
}
function decode(cipher: string, key: string): string {
  let table: string[] = generate_table(key);
  let plain: string = "";
  let i: number = 0;
  while ((i < _len(cipher))) {
    let c1: string = (cipher).substring(i, (i + 1));
    let c2: string = (cipher).substring((i + 1), (i + 2));
    let idx1: number = index_of(table, c1);
    let idx2: number = index_of(table, c2);
    let row1: number = Math.trunc(idx1 / 5);
    let col1: number = (idx1 % 5);
    let row2: number = Math.trunc(idx2 / 5);
    let col2: number = (idx2 % 5);
    if ((row1 == row2)) {
      plain = (plain + table[Math.trunc(((row1 * 5) + ((col1 + 4) % 5)))]);
      plain = (plain + table[Math.trunc(((row2 * 5) + ((col2 + 4) % 5)))]);
    } else {
      if ((col1 == col2)) {
        plain = (plain + table[Math.trunc(((((row1 + 4) % 5) * 5) + col1))]);
        plain = (plain + table[Math.trunc(((((row2 + 4) % 5) * 5) + col2))]);
      } else {
        plain = (plain + table[Math.trunc(((row1 * 5) + col2))]);
        plain = (plain + table[Math.trunc(((row2 * 5) + col1))]);
      }
    }
    i = (i + 2);
  }
  return plain;
}
function main() {
  console.log(_str("Encoded:") + " " + _str(encode("BYE AND THANKS", "GREETING")));
  console.log(_str("Decoded:") + " " + _str(decode("CXRBANRLBALQ", "GREETING")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

