// Generated by Mochi v0.10.59 on 2025-08-06 20:07:00 GMT+7

export interface Encode_map { a: string; b: string; c: string; d: string; e: string; f: string; g: string; h: string; i: string; j: string; k: string; l: string; m: string; n: string; o: string; p: string; q: string; r: string; s: string; t: string; u: string; v: string; w: string; x: string; y: string; z: string; " ": string }
let encode_map: Encode_map = {"a": "AAAAA", "b": "AAAAB", "c": "AAABA", "d": "AAABB", "e": "AABAA", "f": "AABAB", "g": "AABBA", "h": "AABBB", "i": "ABAAA", "j": "BBBAA", "k": "ABAAB", "l": "ABABA", "m": "ABABB", "n": "ABBAA", "o": "ABBAB", "p": "ABBBA", "q": "ABBBB", "r": "BAAAA", "s": "BAAAB", "t": "BAABA", "u": "BAABB", "v": "BBBAB", "w": "BABAA", "x": "BABAB", "y": "BABBA", "z": "BABBB", " ": " "};
function make_decode_map(): Record<string, string> {
  let m: Record<string, string> = {};
  for (const k in encode_map) {
    m[encode_map[k]] = k;
  }
  return m;
}
function split_spaces(s: string): string[] {
  let parts: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == " ")) {
      parts.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  parts.push(current);
  return parts;
}
function encode(word: string): string {
  let w: string = word.toLowerCase();
  let encoded: string = "";
  let i: number = 0;
  while ((i < _len(w))) {
    let ch: string = (w).substring(i, (i + 1));
    if ((ch in encode_map)) {
      encoded = (encoded + encode_map[ch]);
    } else {
      panic("encode() accepts only letters of the alphabet and spaces");
    }
    i = (i + 1);
  }
  return encoded;
}
function decode(coded: string): string {
  let i: number = 0;
  while ((i < _len(coded))) {
    let ch: string = (coded).substring(i, (i + 1));
    if ((((ch != "A") && (ch != "B")) && (ch != " "))) {
      panic("decode() accepts only 'A', 'B' and spaces");
    }
    i = (i + 1);
  }
  let words: string[] = split_spaces(coded);
  let decoded: string = "";
  let w: number = 0;
  while ((w < _len(words))) {
    let word: string = words[w];
    let j: number = 0;
    while ((j < _len(word))) {
      let segment: string = (word).substring(j, (j + 5));
      decoded = (decoded + decode_map[segment]);
      j = (j + 5);
    }
    if ((w < (_len(words) - 1))) {
      decoded = (decoded + " ");
    }
    w = (w + 1);
  }
  return decoded;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let decode_map: Record<string, string>
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
decode_map = make_decode_map()
  console.log(_str(encode("hello")));
  console.log(_str(encode("hello world")));
  console.log(_str(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB")));
  console.log(_str(decode("AABBBAABAAABABAABABAABBAB")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

