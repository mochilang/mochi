// Generated by Mochi v0.10.59 on 2025-08-07 10:34:28 GMT+7

let seed: number = 1;
function rand(max: number): number {
  seed = Number((((BigInt(seed) * 1103515245n) + 12345n) % 2147483647n));
  return (seed % max);
}
function generate_valid_block_size(message_length: number): number {
  let factors: number[] = [];
  let i: number = 2;
  while ((i <= message_length)) {
    if (((message_length % i) == 0)) {
      factors.push(i);
    }
    i = (i + 1);
  }
  let idx: number = rand(_len(factors));
  return factors[(idx) < 0 ? factors.length + (idx) : idx];
}
function generate_permutation_key(block_size: number): number[] {
  let digits: number[] = [];
  let i: number = 0;
  while ((i < block_size)) {
    digits.push(i);
    i = (i + 1);
  }
  let j: number = (block_size - 1);
  while ((j > 0)) {
    let k: number = rand((j + 1));
    let temp: number = digits[(j) < 0 ? digits.length + (j) : j];
    digits[(j) < 0 ? digits.length + (j) : j] = digits[(k) < 0 ? digits.length + (k) : k];
    digits[(k) < 0 ? digits.length + (k) : k] = temp;
    j = (j - 1);
  }
  return digits;
}
function encrypt(message: string, key: number[], block_size: number): string {
  let encrypted: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let block: string = (message).substring(i, (i + block_size));
    let j: number = 0;
    while ((j < block_size)) {
      encrypted = (encrypted + (block).substring(key[(j) < 0 ? key.length + (j) : j], (key[(j) < 0 ? key.length + (j) : j] + 1)));
      j = (j + 1);
    }
    i = (i + block_size);
  }
  return encrypted;
}
function repeat_string(times: number): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < times)) {
    res.push("");
    i = (i + 1);
  }
  return res;
}
function decrypt(encrypted: string, key: number[]): string {
  let klen: number = _len(key);
  let decrypted: string = "";
  let i: number = 0;
  while ((i < _len(encrypted))) {
    let block: string = (encrypted).substring(i, (i + klen));
    let original: string[] = repeat_string(klen);
    let j: number = 0;
    while ((j < klen)) {
      original[(key[(j) < 0 ? key.length + (j) : j]) < 0 ? original.length + (key[(j) < 0 ? key.length + (j) : j]) : key[(j) < 0 ? key.length + (j) : j]] = (block).substring(j, (j + 1));
      j = (j + 1);
    }
    j = 0;
    while ((j < klen)) {
      decrypted = (decrypted + original[(j) < 0 ? original.length + (j) : j]);
      j = (j + 1);
    }
    i = (i + klen);
  }
  return decrypted;
}
let message: string = "HELLO WORLD";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let block_size: number
let key: number[]
let encrypted: string
let decrypted: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
block_size = generate_valid_block_size(_len(message))
key = generate_permutation_key(block_size)
encrypted = encrypt(message, key, block_size)
decrypted = decrypt(encrypted, key)
  console.log(_str(("Block size: " + _str(block_size))));
  console.log(_str(("Key: " + _str(key))));
  console.log(_str(("Encrypted: " + encrypted)));
  console.log(_str(("Decrypted: " + decrypted)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

