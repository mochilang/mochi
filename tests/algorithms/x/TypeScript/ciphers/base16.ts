// Generated by Mochi v0.10.59 on 2025-08-06 20:07:05 GMT+7

function base16_encode(data: number[]): string {
  let digits: string = "0123456789ABCDEF";
  let res: string = "";
  let i: number = 0;
  while ((i < _len(data))) {
    let b: number = data[i];
    if (((b < 0) || (b > 255))) {
      panic("byte out of range");
    }
    let hi: number = Math.trunc(b / 16);
    let lo: number = (b % 16);
    res = ((res + digits.slice(hi, (hi + 1))) + digits.slice(lo, (lo + 1)));
    i = (i + 1);
  }
  return res;
}
function base16_decode(data: string): number[] {
  let digits: string = "0123456789ABCDEF";
  if (((_len(data) % 2) != 0)) {
    panic("Base16 encoded data is invalid: Data does not have an even number of hex digits.");
  }
  function hex_value(ch: string): number {
    let j: number = 0;
    while ((j < 16)) {
      if ((digits.slice(j, (j + 1)) == ch)) {
        return j;
      }
      j = (j + 1);
    }
    return -1;
  }
  let out: number[] = [];
  let i: number = 0;
  while ((i < _len(data))) {
    let hi_char: string = data.slice(i, (i + 1));
    let lo_char: string = data.slice((i + 1), (i + 2));
    let hi = hex_value(hi_char);
    let lo = hex_value(lo_char);
    if (((hi < 0) || (lo < 0))) {
      panic("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.");
    }
    out.push(((hi * 16) + lo));
    i = (i + 2);
  }
  return out;
}
let example1: number[] = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];
let example2: number[] = [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(base16_encode(example1)));
  console.log(_str(base16_encode(example2)));
  console.log(_str(base16_encode([])));
  console.log(_str(_str(base16_decode("48656C6C6F20576F726C6421"))));
  console.log(_str(_str(base16_decode("48454C4C4F20574F524C4421"))));
  console.log(_str(_str(base16_decode(""))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

