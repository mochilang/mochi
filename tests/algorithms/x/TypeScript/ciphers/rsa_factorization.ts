// Generated by Mochi v0.10.59 on 2025-08-06 20:29:47 GMT+7

function gcd(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  if ((x < 0)) {
    return -x;
  }
  return x;
}
function pow_mod(base: number, exp: number, mod: number): number {
  let result: number = 1;
  let b: number = (base % mod);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % mod);
    }
    e = Math.trunc(e / 2);
    b = ((b * b) % mod);
  }
  return result;
}
function rsa_factor(d: number, e: number, n: number): number[] {
  let k: number = ((d * e) - 1);
  let p: number = 0;
  let q: number = 0;
  let g: number = 2;
  while (((p == 0) && (g < n))) {
    let t: number = k;
    while (((t % 2) == 0)) {
      t = Math.trunc(t / 2);
      let x: number = pow_mod(g, t, n);
      let y: number = gcd((x - 1), n);
      if (((x > 1) && (y > 1))) {
        p = y;
        q = Math.trunc(n / y);
        break
      }
    }
    g = (g + 1);
  }
  if ((p > q)) {
    return [q, p];
  }
  return [p, q];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (rsa_factor(3, 16971, 25777)).join(' ') + "]"));
  console.log(_str("[" + (rsa_factor(7331, 11, 27233)).join(' ') + "]"));
  console.log(_str("[" + (rsa_factor(4021, 13, 17711)).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

