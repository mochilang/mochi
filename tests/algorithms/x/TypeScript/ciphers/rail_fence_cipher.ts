// Generated by Mochi v0.10.59 on 2025-08-06 20:29:42 GMT+7

function encrypt(input_string: string, key: number): string {
  if ((key <= 0)) {
    panic("Height of grid can't be 0 or negative");
  }
  if (((key == 1) || (_len(input_string) <= key))) {
    return input_string;
  }
  let lowest: number = (key - 1);
  let temp_grid: string[][] = [];
  let i: number = 0;
  while ((i < key)) {
    temp_grid.push([]);
    i = (i + 1);
  }
  let position: number = 0;
  while ((position < _len(input_string))) {
    let num: number = (position % (lowest * 2));
    let alt = ((lowest * 2) - num);
    if ((num > alt)) {
      num = alt;
    }
    let row = temp_grid[num];
    row.push((input_string).substring(position, (position + 1)));
    temp_grid[num] = row;
    position = (position + 1);
  }
  let output: string = "";
  i = 0;
  while ((i < key)) {
    let row: string[] = temp_grid[i];
    let j: number = 0;
    while ((j < _len(row))) {
      output = (output + row[j]);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return output;
}
function decrypt(input_string: string, key: number): string {
  if ((key <= 0)) {
    panic("Height of grid can't be 0 or negative");
  }
  if ((key == 1)) {
    return input_string;
  }
  let lowest: number = (key - 1);
  let counts: number[] = [];
  let i: number = 0;
  while ((i < key)) {
    counts.push(0);
    i = (i + 1);
  }
  let pos: number = 0;
  while ((pos < _len(input_string))) {
    let num: number = (pos % (lowest * 2));
    let alt = ((lowest * 2) - num);
    if ((num > alt)) {
      num = alt;
    }
    counts[num] = (counts[num] + 1);
    pos = (pos + 1);
  }
  let grid: string[][] = [];
  let counter: number = 0;
  i = 0;
  while ((i < key)) {
    let length: number = counts[i];
    let slice: string = (input_string).substring(counter, (counter + length));
    let row: string[] = [];
    let j: number = 0;
    while ((j < _len(slice))) {
      row.push(slice[j]);
      j = (j + 1);
    }
    grid.push(row);
    counter = (counter + length);
    i = (i + 1);
  }
  let indices: number[] = [];
  i = 0;
  while ((i < key)) {
    indices.push(0);
    i = (i + 1);
  }
  let output: string = "";
  pos = 0;
  while ((pos < _len(input_string))) {
    let num: number = (pos % (lowest * 2));
    let alt = ((lowest * 2) - num);
    if ((num > alt)) {
      num = alt;
    }
    output = (output + grid[num][Math.trunc(indices[num])]);
    indices[num] = (indices[num] + 1);
    pos = (pos + 1);
  }
  return output;
}
function bruteforce(input_string: string): Record<number, string> {
  let results: Record<number, string> = {};
  let key_guess: number = 1;
  while ((key_guess < _len(input_string))) {
    results[key_guess] = decrypt(input_string, key_guess);
    key_guess = (key_guess + 1);
  }
  return results;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
let bf: Record<number, string>
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(encrypt("Hello World", 4)));
  console.log(_str(decrypt("HWe olordll", 4)));
bf = bruteforce("HWe olordll")
  console.log(_str(bf[Math.trunc(4)]));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

