// Generated by Mochi v0.10.59 on 2025-08-06 20:29:24 GMT+7

let ASCII_UPPERCASE: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let ASCII_LOWERCASE: string = "abcdefghijklmnopqrstuvwxyz";
let NEG_ONE: number = (0 - 1);
function index_of(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return NEG_ONE;
}
function to_uppercase(s: string): string {
  let result: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    let idx: number = index_of(ASCII_LOWERCASE, ch);
    if ((idx == NEG_ONE)) {
      result = (result + ch);
    } else {
      result = (result + (ASCII_UPPERCASE).substring(idx, (idx + 1)));
    }
    i = (i + 1);
  }
  return result;
}
function gronsfeld(text: string, key: string): string {
  let ascii_len: number = _len(ASCII_UPPERCASE);
  let key_len: number = _len(key);
  if ((key_len == 0)) {
    panic("integer modulo by zero");
  }
  let upper_text: string = to_uppercase(text);
  let encrypted: string = "";
  let i: number = 0;
  while ((i < _len(upper_text))) {
    let ch: string = (upper_text).substring(i, (i + 1));
    let idx: number = index_of(ASCII_UPPERCASE, ch);
    if ((idx == NEG_ONE)) {
      encrypted = (encrypted + ch);
    } else {
      let key_idx: number = (i % key_len);
      let shift: number = Math.trunc((key).substring(key_idx, (key_idx + 1)));
      let new_position: number = ((idx + shift) % ascii_len);
      encrypted = (encrypted + (ASCII_UPPERCASE).substring(new_position, (new_position + 1)));
    }
    i = (i + 1);
  }
  return encrypted;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(gronsfeld("hello", "412")));
  console.log(_str(gronsfeld("hello", "123")));
  console.log(_str(gronsfeld("", "123")));
  console.log(_str(gronsfeld("yes, ¥€$ - _!@#%?", "0")));
  console.log(_str(gronsfeld("yes, ¥€$ - _!@#%?", "01")));
  console.log(_str(gronsfeld("yes, ¥€$ - _!@#%?", "012")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

