// Generated by Mochi v0.10.59 on 2025-08-06 20:29:58 GMT+7

function encrypt_message(key: number, message: string): string {
  let result: string = "";
  let col: number = 0;
  while ((col < key)) {
    let pointer: number = col;
    while ((pointer < _len(message))) {
      result = (result + message[pointer]);
      pointer = (pointer + key);
    }
    col = (col + 1);
  }
  return result;
}
function decrypt_message(key: number, message: string): string {
  let msg_len: number = _len(message);
  let num_cols: number = Math.trunc(msg_len / key);
  if (((msg_len % key) != 0)) {
    num_cols = (num_cols + 1);
  }
  let num_rows: number = key;
  let num_shaded_boxes: number = ((num_cols * num_rows) - msg_len);
  let plain: string[] = [];
  let i: number = 0;
  while ((i < num_cols)) {
    plain.push("");
    i = (i + 1);
  }
  let col: number = 0;
  let row: number = 0;
  let idx: number = 0;
  while ((idx < msg_len)) {
    let ch: string = message[idx];
    plain[col] = (plain[col] + ch);
    col = (col + 1);
    if (((col == num_cols) || ((col == (num_cols - 1)) && (row >= (num_rows - num_shaded_boxes))))) {
      col = 0;
      row = (row + 1);
    }
    idx = (idx + 1);
  }
  let result: string = "";
  i = 0;
  while ((i < num_cols)) {
    result = (result + plain[i]);
    i = (i + 1);
  }
  return result;
}
let key: number = 6;
let message: string = "Harshil Darji";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let encrypted: string
let decrypted: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
encrypted = encrypt_message(key, message)
  console.log(_str(encrypted));
decrypted = decrypt_message(key, encrypted)
  console.log(_str(decrypted));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

