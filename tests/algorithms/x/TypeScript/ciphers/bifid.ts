// Generated by Mochi v0.10.59 on 2025-08-06 20:07:34 GMT+7

let SQUARE: string[][] = [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]];
function index_of(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function to_lower_without_spaces(message: string, replace_j: boolean): string {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let res: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let ch: string = message[i];
    let pos = index_of(upper, ch);
    if ((pos >= 0)) {
      ch = lower[pos];
    }
    if ((ch != " ")) {
      if ((replace_j && (ch == "j"))) {
        ch = "i";
      }
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function letter_to_numbers(letter: string): number[] {
  let r: number = 0;
  while ((r < _len(SQUARE))) {
    let c: number = 0;
    while ((c < _len(SQUARE[r]))) {
      if ((SQUARE[r][c] == letter)) {
        return [(r + 1), (c + 1)];
      }
      c = (c + 1);
    }
    r = (r + 1);
  }
  return [0, 0];
}
function numbers_to_letter(row: number, col: number): string {
  return SQUARE[Math.trunc((row - 1))][Math.trunc((col - 1))];
}
function encode(message: string): string {
  let clean: string = to_lower_without_spaces(message, true);
  let l: number = _len(clean);
  let rows: number[] = [];
  let cols: number[] = [];
  let i: number = 0;
  while ((i < l)) {
    let nums: number[] = letter_to_numbers(clean[i]);
    rows.push(nums[Math.trunc(0)]);
    cols.push(nums[Math.trunc(1)]);
    i = (i + 1);
  }
  let seq: number[] = [];
  i = 0;
  while ((i < l)) {
    seq.push(rows[i]);
    i = (i + 1);
  }
  i = 0;
  while ((i < l)) {
    seq.push(cols[i]);
    i = (i + 1);
  }
  let encoded: string = "";
  i = 0;
  while ((i < l)) {
    let r: number = seq[Math.trunc((2 * i))];
    let c: number = seq[Math.trunc(((2 * i) + 1))];
    encoded = (encoded + numbers_to_letter(r, c));
    i = (i + 1);
  }
  return encoded;
}
function decode(message: string): string {
  let clean: string = to_lower_without_spaces(message, false);
  let l: number = _len(clean);
  let first: number[] = [];
  let i: number = 0;
  while ((i < l)) {
    let nums: number[] = letter_to_numbers(clean[i]);
    first.push(nums[Math.trunc(0)]);
    first.push(nums[Math.trunc(1)]);
    i = (i + 1);
  }
  let top: number[] = [];
  let bottom: number[] = [];
  i = 0;
  while ((i < l)) {
    top.push(first[i]);
    bottom.push(first[Math.trunc((i + l))]);
    i = (i + 1);
  }
  let decoded: string = "";
  i = 0;
  while ((i < l)) {
    let r: number = top[i];
    let c: number = bottom[i];
    decoded = (decoded + numbers_to_letter(r, c));
    i = (i + 1);
  }
  return decoded;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(encode("testmessage")));
  console.log(_str(encode("Test Message")));
  console.log(_str(encode("test j")));
  console.log(_str(encode("test i")));
  console.log(_str(decode("qtltbdxrxlk")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

