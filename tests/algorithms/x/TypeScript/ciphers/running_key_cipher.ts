// Generated by Mochi v0.10.59 on 2025-08-06 20:29:50 GMT+7

function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let idx = upper.indexOf(ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = lower.indexOf(ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  return 0;
}
function chr(n: number): string {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  if (((n >= 65) && (n < 91))) {
    return upper.slice((n - 65), (n - 64));
  }
  if (((n >= 97) && (n < 123))) {
    return lower.slice((n - 97), (n - 96));
  }
  return "?";
}
function clean_text(s: string): string {
  let out: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[i];
    if (((ch >= "A") && (ch <= "Z"))) {
      out = (out + ch);
    } else {
      if (((ch >= "a") && (ch <= "z"))) {
        out = (out + chr((ord(ch) - 32)));
      }
    }
    i = (i + 1);
  }
  return out;
}
function running_key_encrypt(key: string, plaintext: string): string {
  let pt: string = clean_text(plaintext);
  let k: string = clean_text(key);
  let key_len: number = _len(k);
  let res: string = "";
  let ord_a: number = ord("A");
  let i: number = 0;
  while ((i < _len(pt))) {
    let p: number = (ord(pt[i]) - ord_a);
    let kv: number = (ord(k[Math.trunc((i % key_len))]) - ord_a);
    let c: number = ((p + kv) % 26);
    res = (res + chr((c + ord_a)));
    i = (i + 1);
  }
  return res;
}
function running_key_decrypt(key: string, ciphertext: string): string {
  let ct: string = clean_text(ciphertext);
  let k: string = clean_text(key);
  let key_len: number = _len(k);
  let res: string = "";
  let ord_a: number = ord("A");
  let i: number = 0;
  while ((i < _len(ct))) {
    let c: number = (ord(ct[i]) - ord_a);
    let kv: number = (ord(k[Math.trunc((i % key_len))]) - ord_a);
    let p: number = (((c - kv) + 26) % 26);
    res = (res + chr((p + ord_a)));
    i = (i + 1);
  }
  return res;
}
let key: string = "How does the duck know that? said Victor";
let plaintext: string = "DEFEND THIS";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let ciphertext: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
ciphertext = running_key_encrypt(key, plaintext)
  console.log(_str(ciphertext));
  console.log(_str(running_key_decrypt(key, ciphertext)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

