// Generated by Mochi v0.10.59 on 2025-08-06 20:29:55 GMT+7

let LETTERS: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let LOWERCASE: string = "abcdefghijklmnopqrstuvwxyz";
let seed: number = 1;
function rand(n: number): number {
  seed = (((seed * 1664525) + 1013904223) % 2147483647);
  return (seed % n);
}
function get_random_key(): string {
  let chars: string[] = [];
  let i: number = 0;
  while ((i < _len(LETTERS))) {
    chars.push(LETTERS[i]);
    i = (i + 1);
  }
  let j: number = (_len(chars) - 1);
  while ((j > 0)) {
    let k: number = rand((j + 1));
    let tmp: string = chars[j];
    chars[j] = chars[k];
    chars[k] = tmp;
    j = (j - 1);
  }
  let res: string = "";
  i = 0;
  while ((i < _len(chars))) {
    res = (res + chars[i]);
    i = (i + 1);
  }
  return res;
}
function check_valid_key(key: string): boolean {
  if ((_len(key) != _len(LETTERS))) {
    return false;
  }
  let used: Record<string, boolean> = {};
  let i: number = 0;
  while ((i < _len(key))) {
    let ch: string = key[i];
    if (used[ch]) {
      return false;
    }
    used[ch] = true;
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(LETTERS))) {
    let ch: string = LETTERS[i];
    if (!used[ch]) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function index_in(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function char_to_upper(c: string): string {
  let i: number = 0;
  while ((i < _len(LOWERCASE))) {
    if ((c == LOWERCASE[i])) {
      return LETTERS[i];
    }
    i = (i + 1);
  }
  return c;
}
function char_to_lower(c: string): string {
  let i: number = 0;
  while ((i < _len(LETTERS))) {
    if ((c == LETTERS[i])) {
      return LOWERCASE[i];
    }
    i = (i + 1);
  }
  return c;
}
function is_upper(c: string): boolean {
  let i: number = 0;
  while ((i < _len(LETTERS))) {
    if ((c == LETTERS[i])) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function translate_message(key: string, message: string, mode: string): string {
  let chars_a: string = LETTERS;
  let chars_b: string = key;
  if ((mode == "decrypt")) {
    let tmp: string = chars_a;
    chars_a = chars_b;
    chars_b = tmp;
  }
  let translated: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let _symbol: string = message[i];
    let upper_symbol: string = char_to_upper(_symbol);
    let idx: number = index_in(chars_a, upper_symbol);
    if ((idx >= 0)) {
      let mapped: string = chars_b[idx];
      if (is_upper(_symbol)) {
        translated = (translated + mapped);
      } else {
        translated = (translated + char_to_lower(mapped));
      }
    } else {
      translated = (translated + _symbol);
    }
    i = (i + 1);
  }
  return translated;
}
function encrypt_message(key: string, message: string): string {
  let res: string = translate_message(key, message, "encrypt");
  return res;
}
function decrypt_message(key: string, message: string): string {
  let res: string = translate_message(key, message, "decrypt");
  return res;
}
let key: string = "LFWOAYUISVKMNXPBDCRJTQEGHZ";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(encrypt_message(key, "Harshil Darji")));
  console.log(_str(decrypt_message(key, "Ilcrism Olcvs")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

