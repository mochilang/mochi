// Generated by Mochi v0.10.59 on 2025-08-06 20:29:27 GMT+7

let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
function to_upper(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[i];
    let j: number = 0;
    let found: boolean = false;
    while ((j < 26)) {
      if ((ch == LOWER[j])) {
        res = (res + UPPER[j]);
        found = true;
        break
      }
      j = (j + 1);
    }
    if ((found == false)) {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function contains(xs: string[], x: string): boolean {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == x)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function contains_char(s: string, ch: string): boolean {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function get_value(keys: string[], values: string[], key: string): string {
  let i: number = 0;
  while ((i < _len(keys))) {
    if ((keys[i] == key)) {
      return values[i];
    }
    i = (i + 1);
  }
  return null;
}
function print_mapping(keys: string[], values: string[]) {
  let s: string = "{";
  let i: number = 0;
  while ((i < _len(keys))) {
    s = (((((s + "'") + keys[i]) + "': '") + values[i]) + "'");
    if (((i + 1) < _len(keys))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "}");
  console.log(_str(s));
}
function mixed_keyword(keyword: string, plaintext: string, verbose: boolean): string {
  let alphabet: string = UPPER;
  let keyword_u: string = to_upper(keyword);
  let plaintext_u: string = to_upper(plaintext);
  let unique: string[] = [];
  let i: number = 0;
  while ((i < _len(keyword_u))) {
    let ch: string = keyword_u[i];
    if ((contains_char(alphabet, ch) && (unique.includes(ch) == false))) {
      unique.push(ch);
    }
    i = (i + 1);
  }
  let num_unique: number = _len(unique);
  let shifted: string[] = [];
  i = 0;
  while ((i < _len(unique))) {
    shifted.push(unique[i]);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(alphabet))) {
    let ch: string = alphabet[i];
    if ((unique.includes(ch) == false)) {
      shifted.push(ch);
    }
    i = (i + 1);
  }
  let modified: string[][] = [];
  let k: number = 0;
  while ((k < _len(shifted))) {
    let row: string[] = [];
    let r: number = 0;
    while (((r < num_unique) && ((k + r) < _len(shifted)))) {
      row.push(shifted[Math.trunc((k + r))]);
      r = (r + 1);
    }
    modified.push(row);
    k = (k + num_unique);
  }
  let keys: string[] = [];
  let values: string[] = [];
  let column: number = 0;
  let letter_index: number = 0;
  while ((column < num_unique)) {
    let row_idx: number = 0;
    while ((row_idx < _len(modified))) {
      let row: string[] = modified[row_idx];
      if ((_len(row) <= column)) {
        break
      }
      keys.push(alphabet[letter_index]);
      values.push(row[column]);
      letter_index = (letter_index + 1);
      row_idx = (row_idx + 1);
    }
    column = (column + 1);
  }
  if (verbose) {
    print_mapping(keys, values);
  }
  let result: string = "";
  i = 0;
  while ((i < _len(plaintext_u))) {
    let ch: string = plaintext_u[i];
    let mapped = get_value(keys, values, ch);
    if ((mapped == null)) {
      result = (result + ch);
    } else {
      result = (result + mapped);
    }
    i = (i + 1);
  }
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(mixed_keyword("college", "UNIVERSITY", true)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

