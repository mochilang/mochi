// Generated by Mochi v0.10.59 on 2025-08-06 20:29:45 GMT+7

let BYTE_SIZE: number = 256;
function pow_int(base: number, exp: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function mod_pow(base: number, exponent: number, modulus: number): number {
  let result: number = 1;
  let b: number = (base % modulus);
  let e: number = exponent;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % modulus);
    }
    e = Math.trunc(e / 2);
    b = ((b * b) % modulus);
  }
  return result;
}
function ord(ch: string): number {
  if ((ch == " ")) {
    return 32;
  }
  if ((ch == "a")) {
    return 97;
  }
  if ((ch == "b")) {
    return 98;
  }
  if ((ch == "c")) {
    return 99;
  }
  if ((ch == "d")) {
    return 100;
  }
  if ((ch == "e")) {
    return 101;
  }
  if ((ch == "f")) {
    return 102;
  }
  if ((ch == "g")) {
    return 103;
  }
  if ((ch == "h")) {
    return 104;
  }
  if ((ch == "i")) {
    return 105;
  }
  if ((ch == "j")) {
    return 106;
  }
  if ((ch == "k")) {
    return 107;
  }
  if ((ch == "l")) {
    return 108;
  }
  if ((ch == "m")) {
    return 109;
  }
  if ((ch == "n")) {
    return 110;
  }
  if ((ch == "o")) {
    return 111;
  }
  if ((ch == "p")) {
    return 112;
  }
  if ((ch == "q")) {
    return 113;
  }
  if ((ch == "r")) {
    return 114;
  }
  if ((ch == "s")) {
    return 115;
  }
  if ((ch == "t")) {
    return 116;
  }
  if ((ch == "u")) {
    return 117;
  }
  if ((ch == "v")) {
    return 118;
  }
  if ((ch == "w")) {
    return 119;
  }
  if ((ch == "x")) {
    return 120;
  }
  if ((ch == "y")) {
    return 121;
  }
  if ((ch == "z")) {
    return 122;
  }
  return 0;
}
function chr(code: number): string {
  if ((code == 32)) {
    return " ";
  }
  if ((code == 97)) {
    return "a";
  }
  if ((code == 98)) {
    return "b";
  }
  if ((code == 99)) {
    return "c";
  }
  if ((code == 100)) {
    return "d";
  }
  if ((code == 101)) {
    return "e";
  }
  if ((code == 102)) {
    return "f";
  }
  if ((code == 103)) {
    return "g";
  }
  if ((code == 104)) {
    return "h";
  }
  if ((code == 105)) {
    return "i";
  }
  if ((code == 106)) {
    return "j";
  }
  if ((code == 107)) {
    return "k";
  }
  if ((code == 108)) {
    return "l";
  }
  if ((code == 109)) {
    return "m";
  }
  if ((code == 110)) {
    return "n";
  }
  if ((code == 111)) {
    return "o";
  }
  if ((code == 112)) {
    return "p";
  }
  if ((code == 113)) {
    return "q";
  }
  if ((code == 114)) {
    return "r";
  }
  if ((code == 115)) {
    return "s";
  }
  if ((code == 116)) {
    return "t";
  }
  if ((code == 117)) {
    return "u";
  }
  if ((code == 118)) {
    return "v";
  }
  if ((code == 119)) {
    return "w";
  }
  if ((code == 120)) {
    return "x";
  }
  if ((code == 121)) {
    return "y";
  }
  if ((code == 122)) {
    return "z";
  }
  return "";
}
function get_blocks_from_text(message: string, block_size: number): number[] {
  let block_ints: number[] = [];
  let block_start: number = 0;
  while ((block_start < _len(message))) {
    let block_int: number = 0;
    let i: number = block_start;
    while (((i < (block_start + block_size)) && (i < _len(message)))) {
      block_int = (block_int + (ord(message[i]) * pow_int(BYTE_SIZE, (i - block_start))));
      i = (i + 1);
    }
    block_ints.push(block_int);
    block_start = (block_start + block_size);
  }
  return block_ints;
}
function get_text_from_blocks(block_ints: number[], message_length: number, block_size: number): string {
  let message: string = "";
  for (const block_int of block_ints) {
    let block: number = block_int;
    let i: number = (block_size - 1);
    let block_message: string = "";
    while ((i >= 0)) {
      if (((_len(message) + i) < message_length)) {
        let ascii_number: number = Math.trunc(block / pow_int(BYTE_SIZE, i));
        block = (block % pow_int(BYTE_SIZE, i));
        block_message = (chr(ascii_number) + block_message);
      }
      i = (i - 1);
    }
    message = (message + block_message);
  }
  return message;
}
function encrypt_message(message: string, n: number, e: number, block_size: number): number[] {
  let encrypted: number[] = [];
  let blocks: number[] = get_blocks_from_text(message, block_size);
  for (const block of blocks) {
    encrypted.push(mod_pow(block, e, n));
  }
  return encrypted;
}
function decrypt_message(blocks: number[], message_length: number, n: number, d: number, block_size: number): string {
  let decrypted_blocks: number[] = [];
  for (const block of blocks) {
    decrypted_blocks.push(mod_pow(block, d, n));
  }
  let message: string = "";
  for (const num of decrypted_blocks) {
    message = (message + chr(num));
  }
  return message;
}
function main() {
  let message: string = "hello world";
  let n: number = 3233;
  let e: number = 17;
  let d: number = 2753;
  let block_size: number = 1;
  let encrypted: number[] = encrypt_message(message, n, e, block_size);
  console.log(_str(_str(encrypted)));
  let decrypted: string = decrypt_message(encrypted, _len(message), n, d, block_size);
  console.log(_str(decrypted));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

