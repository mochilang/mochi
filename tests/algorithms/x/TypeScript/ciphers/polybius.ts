// Generated by Mochi v0.10.59 on 2025-08-06 20:29:37 GMT+7

let square: string[][] = [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]];
function letter_to_numbers(letter: string): number[] {
  let i: number = 0;
  while ((i < _len(square))) {
    let j: number = 0;
    while ((j < _len(square[i]))) {
      if ((square[i][j] == letter)) {
        return [(i + 1), (j + 1)];
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return [0, 0];
}
function numbers_to_letter(index1: number, index2: number): string {
  return square[Math.trunc((index1 - 1))][Math.trunc((index2 - 1))];
}
function char_to_int(ch: string): number {
  if ((ch == "1")) {
    return 1;
  }
  if ((ch == "2")) {
    return 2;
  }
  if ((ch == "3")) {
    return 3;
  }
  if ((ch == "4")) {
    return 4;
  }
  if ((ch == "5")) {
    return 5;
  }
  return 0;
}
function encode(message: string): string {
  message = message.toLowerCase();
  let encoded: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let ch: string = message[i];
    if ((ch == "j")) {
      ch = "i";
    }
    if ((ch != " ")) {
      let nums: number[] = letter_to_numbers(ch);
      encoded = ((encoded + _str(nums[Math.trunc(0)])) + _str(nums[Math.trunc(1)]));
    } else {
      encoded = (encoded + " ");
    }
    i = (i + 1);
  }
  return encoded;
}
function decode(message: string): string {
  let decoded: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    if ((message[i] == " ")) {
      decoded = (decoded + " ");
      i = (i + 1);
    } else {
      let index1: number = char_to_int(message[i]);
      let index2: number = char_to_int(message[Math.trunc((i + 1))]);
      let letter: string = numbers_to_letter(index1, index2);
      decoded = (decoded + letter);
      i = (i + 2);
    }
  }
  return decoded;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(encode("test message")));
  console.log(_str(encode("Test Message")));
  console.log(_str(decode("44154344 32154343112215")));
  console.log(_str(decode("4415434432154343112215")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

