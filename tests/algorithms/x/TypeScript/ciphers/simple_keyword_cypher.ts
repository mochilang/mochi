// Generated by Mochi v0.10.59 on 2025-08-06 20:29:54 GMT+7

function index_in_string(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function contains_char(s: string, ch: string): boolean {
  return (index_in_string(s, ch) >= 0);
}
function is_alpha(ch: string): boolean {
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  return (contains_char(lower, ch) || contains_char(upper, ch));
}
function to_upper(s: string): string {
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[i];
    let idx = index_in_string(lower, ch);
    if ((idx >= 0)) {
      res = (res + upper[idx]);
    } else {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function remove_duplicates(key: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(key))) {
    let ch: string = key[i];
    if (((ch == " ") || (is_alpha(ch) && (contains_char(res, ch) == false)))) {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function create_cipher_map(key: string): string[] {
  let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let cleaned: string = remove_duplicates(to_upper(key));
  let cipher: string[] = [];
  let i: number = 0;
  while ((i < _len(cleaned))) {
    cipher.push(cleaned[i]);
    i = (i + 1);
  }
  let offset: number = _len(cleaned);
  let j: number = _len(cipher);
  while ((j < 26)) {
    let char: string = alphabet[Math.trunc((j - offset))];
    while (contains_char(cleaned, char)) {
      offset = (offset - 1);
      char = alphabet[Math.trunc((j - offset))];
    }
    cipher.push(char);
    j = (j + 1);
  }
  return cipher;
}
function index_in_list(lst: string[], ch: string): number {
  let i: number = 0;
  while ((i < _len(lst))) {
    if ((lst[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function encipher(message: string, cipher: string[]): string {
  let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let msg: string = to_upper(message);
  let res: string = "";
  let i: number = 0;
  while ((i < _len(msg))) {
    let ch: string = msg[i];
    let idx: number = index_in_string(alphabet, ch);
    if ((idx >= 0)) {
      res = (res + cipher[idx]);
    } else {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function decipher(message: string, cipher: string[]): string {
  let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let msg: string = to_upper(message);
  let res: string = "";
  let i: number = 0;
  while ((i < _len(msg))) {
    let ch: string = msg[i];
    let idx: number = index_in_list(cipher, ch);
    if ((idx >= 0)) {
      res = (res + alphabet[idx]);
    } else {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let cipher_map: string[]
let encoded: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
cipher_map = create_cipher_map("Goodbye!!")
encoded = encipher("Hello World!!", cipher_map)
  console.log(_str(encoded));
  console.log(_str(decipher(encoded, cipher_map)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

