// Generated by Mochi v0.10.59 on 2025-08-06 20:30:00 GMT+7

let triagrams: string[] = ["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"];
function remove_spaces(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = (s).substring(i, (i + 1));
    if ((c != " ")) {
      res = (res + c);
    }
    i = (i + 1);
  }
  return res;
}
function char_to_trigram(ch: string, alphabet: string): string {
  let i: number = 0;
  while ((i < _len(alphabet))) {
    if (((alphabet).substring(i, (i + 1)) == ch)) {
      return triagrams[i];
    }
    i = (i + 1);
  }
  return "";
}
function trigram_to_char(tri: string, alphabet: string): string {
  let i: number = 0;
  while ((i < _len(triagrams))) {
    if ((triagrams[i] == tri)) {
      return (alphabet).substring(i, (i + 1));
    }
    i = (i + 1);
  }
  return "";
}
function encrypt_part(part: string, alphabet: string): string {
  let one: string = "";
  let two: string = "";
  let three: string = "";
  let i: number = 0;
  while ((i < _len(part))) {
    let tri: string = char_to_trigram((part).substring(i, (i + 1)), alphabet);
    one = (one + (tri).substring(0, 1));
    two = (two + (tri).substring(1, 2));
    three = (three + (tri).substring(2, 3));
    i = (i + 1);
  }
  return ((one + two) + three);
}
function encrypt_message(message: string, alphabet: string, period: number): string {
  let msg: string = remove_spaces(message);
  let alpha: string = remove_spaces(alphabet);
  if ((_len(alpha) != 27)) {
    return "";
  }
  let encrypted_numeric: string = "";
  let i: number = 0;
  while ((i < _len(msg))) {
    let end: number = (i + period);
    if ((end > _len(msg))) {
      end = _len(msg);
    }
    let part: string = (msg).substring(i, end);
    encrypted_numeric = (encrypted_numeric + encrypt_part(part, alpha));
    i = (i + period);
  }
  let encrypted: string = "";
  let j: number = 0;
  while ((j < _len(encrypted_numeric))) {
    let tri: string = (encrypted_numeric).substring(j, (j + 3));
    encrypted = (encrypted + trigram_to_char(tri, alpha));
    j = (j + 3);
  }
  return encrypted;
}
function decrypt_part(part: string, alphabet: string): string[] {
  let converted: string = "";
  let i: number = 0;
  while ((i < _len(part))) {
    let tri: string = char_to_trigram((part).substring(i, (i + 1)), alphabet);
    converted = (converted + tri);
    i = (i + 1);
  }
  let result: string[] = [];
  let tmp: string = "";
  let j: number = 0;
  while ((j < _len(converted))) {
    tmp = (tmp + (converted).substring(j, (j + 1)));
    if ((_len(tmp) == _len(part))) {
      result.push(tmp);
      tmp = "";
    }
    j = (j + 1);
  }
  return result;
}
function decrypt_message(message: string, alphabet: string, period: number): string {
  let msg: string = remove_spaces(message);
  let alpha: string = remove_spaces(alphabet);
  if ((_len(alpha) != 27)) {
    return "";
  }
  let decrypted_numeric: string[] = [];
  let i: number = 0;
  while ((i < _len(msg))) {
    let end: number = (i + period);
    if ((end > _len(msg))) {
      end = _len(msg);
    }
    let part: string = (msg).substring(i, end);
    let groups: string[] = decrypt_part(part, alpha);
    let k: number = 0;
    while ((k < _len(groups[Math.trunc(0)]))) {
      let tri: string = (((groups[Math.trunc(0)]).substring(k, (k + 1)) + (groups[Math.trunc(1)]).substring(k, (k + 1))) + (groups[Math.trunc(2)]).substring(k, (k + 1)));
      decrypted_numeric.push(tri);
      k = (k + 1);
    }
    i = (i + period);
  }
  let decrypted: string = "";
  let j: number = 0;
  while ((j < _len(decrypted_numeric))) {
    decrypted = (decrypted + trigram_to_char(decrypted_numeric[j], alpha));
    j = (j + 1);
  }
  return decrypted;
}
function main() {
  let msg: string = "DEFEND THE EAST WALL OF THE CASTLE.";
  let alphabet: string = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ";
  let encrypted: string = encrypt_message(msg, alphabet, 5);
  let decrypted: string = decrypt_message(encrypted, alphabet, 5);
  console.log(_str(("Encrypted: " + encrypted)));
  console.log(_str(("Decrypted: " + decrypted)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

