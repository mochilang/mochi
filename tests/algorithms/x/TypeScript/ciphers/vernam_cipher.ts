// Generated by Mochi v0.10.59 on 2025-08-06 20:30:02 GMT+7

function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let idx = upper.indexOf(ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  return 0;
}
function chr(n: number): string {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  if (((n >= 65) && (n < 91))) {
    return (upper).substring((n - 65), (n - 64));
  }
  return "?";
}
function vernam_encrypt(plaintext: string, key: string): string {
  let ciphertext: string = "";
  let i: number = 0;
  while ((i < _len(plaintext))) {
    let p: number = (ord((plaintext).substring(i, (i + 1))) - 65);
    let k: number = (ord((key).substring((i % _len(key)), ((i % _len(key)) + 1))) - 65);
    let ct: number = (p + k);
    while ((ct > 25)) {
      ct = (ct - 26);
    }
    ciphertext = (ciphertext + chr((ct + 65)));
    i = (i + 1);
  }
  return ciphertext;
}
function vernam_decrypt(ciphertext: string, key: string): string {
  let decrypted: string = "";
  let i: number = 0;
  while ((i < _len(ciphertext))) {
    let c: number = ord((ciphertext).substring(i, (i + 1)));
    let k: number = ord((key).substring((i % _len(key)), ((i % _len(key)) + 1)));
    let val: number = (c - k);
    while ((val < 0)) {
      val = (val + 26);
    }
    decrypted = (decrypted + chr((val + 65)));
    i = (i + 1);
  }
  return decrypted;
}
let plaintext: string = "HELLO";
let key: string = "KEY";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let encrypted: string
let decrypted: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
encrypted = vernam_encrypt(plaintext, key)
decrypted = vernam_decrypt(encrypted, key)
  console.log(_str(("Plaintext: " + plaintext)));
  console.log(_str(("Encrypted: " + encrypted)));
  console.log(_str(("Decrypted: " + decrypted)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

