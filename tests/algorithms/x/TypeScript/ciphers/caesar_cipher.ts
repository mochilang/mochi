// Generated by Mochi v0.10.59 on 2025-08-06 20:07:44 GMT+7

let default_alphabet: string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
function index_of(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function encrypt(input_string: string, key: number, alphabet: string): string {
  let result: string = "";
  let i: number = 0;
  let n: number = _len(alphabet);
  while ((i < _len(input_string))) {
    let ch: string = (input_string).substring(i, (i + 1));
    let idx: number = index_of(alphabet, ch);
    if ((idx < 0)) {
      result = (result + ch);
    } else {
      let new_key: number = ((idx + key) % n);
      if ((new_key < 0)) {
        new_key = (new_key + n);
      }
      result = (result + (alphabet).substring(new_key, (new_key + 1)));
    }
    i = (i + 1);
  }
  return result;
}
function decrypt(input_string: string, key: number, alphabet: string): string {
  let result: string = "";
  let i: number = 0;
  let n: number = _len(alphabet);
  while ((i < _len(input_string))) {
    let ch: string = (input_string).substring(i, (i + 1));
    let idx: number = index_of(alphabet, ch);
    if ((idx < 0)) {
      result = (result + ch);
    } else {
      let new_key: number = ((idx - key) % n);
      if ((new_key < 0)) {
        new_key = (new_key + n);
      }
      result = (result + (alphabet).substring(new_key, (new_key + 1)));
    }
    i = (i + 1);
  }
  return result;
}
function brute_force(input_string: string, alphabet: string): string[] {
  let results: string[] = [];
  let key: number = 1;
  let n: number = _len(alphabet);
  while ((key <= n)) {
    let message: string = decrypt(input_string, key, alphabet);
    results.push(message);
    key = (key + 1);
  }
  return results;
}
function main() {
  let alpha: string = default_alphabet;
  let enc: string = encrypt("The quick brown fox jumps over the lazy dog", 8, alpha);
  console.log(_str(enc));
  let dec: string = decrypt(enc, 8, alpha);
  console.log(_str(dec));
  let brute: string[] = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha);
  console.log(_str(brute[Math.trunc(19)]));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

