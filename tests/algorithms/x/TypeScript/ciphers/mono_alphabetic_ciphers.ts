// Generated by Mochi v0.10.59 on 2025-08-06 20:29:29 GMT+7

let LETTERS: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
function find_char(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function encrypt_message(key: string, message: string): string {
  let chars_a: string = key;
  let chars_b: string = LETTERS;
  let translated: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let _symbol: string = message[i];
    let upper_sym: string = _symbol.toUpperCase();
    let sym_index: number = find_char(chars_a, upper_sym);
    if ((sym_index >= 0)) {
      let sub_char: string = chars_b[sym_index];
      if ((_symbol == upper_sym)) {
        translated = (translated + sub_char.toUpperCase());
      } else {
        translated = (translated + sub_char.toLowerCase());
      }
    } else {
      translated = (translated + _symbol);
    }
    i = (i + 1);
  }
  return translated;
}
function decrypt_message(key: string, message: string): string {
  let chars_a: string = LETTERS;
  let chars_b: string = key;
  let translated: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let _symbol: string = message[i];
    let upper_sym: string = _symbol.toUpperCase();
    let sym_index: number = find_char(chars_a, upper_sym);
    if ((sym_index >= 0)) {
      let sub_char: string = chars_b[sym_index];
      if ((_symbol == upper_sym)) {
        translated = (translated + sub_char.toUpperCase());
      } else {
        translated = (translated + sub_char.toLowerCase());
      }
    } else {
      translated = (translated + _symbol);
    }
    i = (i + 1);
  }
  return translated;
}
function main() {
  let message: string = "Hello World";
  let key: string = "QWERTYUIOPASDFGHJKLZXCVBNM";
  let mode: string = "decrypt";
  let translated: string = "";
  if ((mode == "encrypt")) {
    translated = encrypt_message(key, message);
  } else {
    if ((mode == "decrypt")) {
      translated = decrypt_message(key, message);
    }
  }
  console.log(_str(((((("Using the key " + key) + ", the ") + mode) + "ed message is: ") + translated)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

