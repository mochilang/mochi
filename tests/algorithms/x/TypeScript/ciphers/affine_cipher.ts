// Generated by Mochi v0.10.59 on 2025-08-06 20:04:38 GMT+7

let SYMBOLS: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
function gcd(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  while ((y != 0)) {
    let temp: number = (x % y);
    x = y;
    y = temp;
  }
  return x;
}
function mod_inverse(a: number, m: number): number {
  if ((gcd(a, m) != 1)) {
    panic((((("mod inverse of " + _str(a)) + " and ") + _str(m)) + " does not exist"));
  }
  let u1: number = 1;
  let u2: number = 0;
  let u3: number = a;
  let v1: number = 0;
  let v2: number = 1;
  let v3: number = m;
  while ((v3 != 0)) {
    let q: number = Math.trunc(u3 / v3);
    let t1: number = (u1 - (q * v1));
    let t2: number = (u2 - (q * v2));
    let t3: number = (u3 - (q * v3));
    u1 = v1;
    u2 = v2;
    u3 = v3;
    v1 = t1;
    v2 = t2;
    v3 = t3;
  }
  let res: number = (u1 % m);
  if ((res < 0)) {
    return (res + m);
  }
  return res;
}
function find_symbol(ch: string): number {
  let i: number = 0;
  while ((i < _len(SYMBOLS))) {
    if ((SYMBOLS[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function check_keys(key_a: number, key_b: number, mode: string) {
  let m: number = _len(SYMBOLS);
  if ((mode == "encrypt")) {
    if ((key_a == 1)) {
      panic("The affine cipher becomes weak when key A is set to 1. Choose different key");
    }
    if ((key_b == 0)) {
      panic("The affine cipher becomes weak when key B is set to 0. Choose different key");
    }
  }
  if ((((key_a < 0) || (key_b < 0)) || (key_b > (m - 1)))) {
    panic(("Key A must be greater than 0 and key B must be between 0 and " + _str((m - 1))));
  }
  if ((gcd(key_a, m) != 1)) {
    panic((((("Key A " + _str(key_a)) + " and the symbol set size ") + _str(m)) + " are not relatively prime. Choose a different key."));
  }
}
function encrypt_message(key: number, message: string): string {
  let m: number = _len(SYMBOLS);
  let key_a: number = Math.trunc(key / m);
  let key_b: number = (key % m);
  check_keys(key_a, key_b, "encrypt");
  let cipher_text: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let ch: string = message[i];
    let index: number = find_symbol(ch);
    if ((index >= 0)) {
      cipher_text = (cipher_text + SYMBOLS[Math.trunc((((index * key_a) + key_b) % m))]);
    } else {
      cipher_text = (cipher_text + ch);
    }
    i = (i + 1);
  }
  return cipher_text;
}
function decrypt_message(key: number, message: string): string {
  let m: number = _len(SYMBOLS);
  let key_a: number = Math.trunc(key / m);
  let key_b: number = (key % m);
  check_keys(key_a, key_b, "decrypt");
  let inv: number = mod_inverse(key_a, m);
  let plain_text: string = "";
  let i: number = 0;
  while ((i < _len(message))) {
    let ch: string = message[i];
    let index: number = find_symbol(ch);
    if ((index >= 0)) {
      let n: number = ((index - key_b) * inv);
      let pos: number = (n % m);
      let final: number = ((pos < 0) ? (pos + m) : pos);
      plain_text = (plain_text + SYMBOLS[final]);
    } else {
      plain_text = (plain_text + ch);
    }
    i = (i + 1);
  }
  return plain_text;
}
function main() {
  let key: number = 4545;
  let msg: string = "The affine cipher is a type of monoalphabetic substitution cipher.";
  let enc: string = encrypt_message(key, msg);
  console.log(_str(enc));
  console.log(_str(decrypt_message(key, enc)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

