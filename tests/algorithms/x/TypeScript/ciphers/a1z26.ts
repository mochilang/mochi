// Generated by Mochi v0.10.59 on 2025-08-06 20:04:29 GMT+7

function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function charToNum(ch: string): number {
  let letters: string = "abcdefghijklmnopqrstuvwxyz";
  let idx: number = letters.indexOf(ch);
  if ((idx >= 0)) {
    return (idx + 1);
  }
  return 0;
}
function numToChar(n: number): string {
  let letters: string = "abcdefghijklmnopqrstuvwxyz";
  if (((n >= 1) && (n <= 26))) {
    return (letters).substring((n - 1), n);
  }
  return "?";
}
function encode(plain: string): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(plain))) {
    let ch: string = (plain).substring(i, (i + 1)).toLowerCase();
    let val: number = charToNum(ch);
    if ((val > 0)) {
      res.push(val);
    }
    i = (i + 1);
  }
  return res;
}
function decode(encoded: number[]): string {
  let out: string = "";
  for (const n of encoded) {
    out = (out + numToChar(n));
  }
  return out;
}
function main() {
  console.log(_str("-> "));
  let text: string = _input().toLowerCase();
  let enc: number[] = encode(text);
  console.log(_str(("Encoded: " + _str(enc))));
  console.log(_str(("Decoded: " + decode(enc))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

