// Generated by Mochi v0.10.59 on 2025-08-06 20:29:31 GMT+7

let CHARS: string[] = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "];
let CODES: string[] = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"];
function to_upper_char(c: string): string {
  if ((c == "a")) {
    return "A";
  }
  if ((c == "b")) {
    return "B";
  }
  if ((c == "c")) {
    return "C";
  }
  if ((c == "d")) {
    return "D";
  }
  if ((c == "e")) {
    return "E";
  }
  if ((c == "f")) {
    return "F";
  }
  if ((c == "g")) {
    return "G";
  }
  if ((c == "h")) {
    return "H";
  }
  if ((c == "i")) {
    return "I";
  }
  if ((c == "j")) {
    return "J";
  }
  if ((c == "k")) {
    return "K";
  }
  if ((c == "l")) {
    return "L";
  }
  if ((c == "m")) {
    return "M";
  }
  if ((c == "n")) {
    return "N";
  }
  if ((c == "o")) {
    return "O";
  }
  if ((c == "p")) {
    return "P";
  }
  if ((c == "q")) {
    return "Q";
  }
  if ((c == "r")) {
    return "R";
  }
  if ((c == "s")) {
    return "S";
  }
  if ((c == "t")) {
    return "T";
  }
  if ((c == "u")) {
    return "U";
  }
  if ((c == "v")) {
    return "V";
  }
  if ((c == "w")) {
    return "W";
  }
  if ((c == "x")) {
    return "X";
  }
  if ((c == "y")) {
    return "Y";
  }
  if ((c == "z")) {
    return "Z";
  }
  return c;
}
function to_upper(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    res = (res + to_upper_char(s[i]));
    i = (i + 1);
  }
  return res;
}
function index_of(xs: string[], target: string): number {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[i] == target)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function encrypt(message: string): string {
  let msg: string = to_upper(message);
  let res: string = "";
  let i: number = 0;
  while ((i < _len(msg))) {
    let c: string = msg[i];
    let idx: number = index_of(CHARS, c);
    if ((idx >= 0)) {
      if ((res != "")) {
        res = (res + " ");
      }
      res = (res + CODES[idx]);
    }
    i = (i + 1);
  }
  return res;
}
function split_spaces(s: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[i];
    if ((ch == " ")) {
      if ((current != "")) {
        res.push(current);
        current = "";
      }
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  if ((current != "")) {
    res.push(current);
  }
  return res;
}
function decrypt(message: string): string {
  let parts: string[] = split_spaces(message);
  let res: string = "";
  for (const code of parts) {
    let idx: number = index_of(CODES, code);
    if ((idx >= 0)) {
      res = (res + CHARS[idx]);
    }
  }
  return res;
}
let msg: string = "Morse code here!";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let enc: string
let dec: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(msg));
enc = encrypt(msg)
  console.log(_str(enc));
dec = decrypt(enc)
  console.log(_str(dec));
  console.log(_str(encrypt("Sos!")));
  console.log(_str(decrypt("... --- ... -.-.--")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

