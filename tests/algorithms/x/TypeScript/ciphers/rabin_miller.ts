// Generated by Mochi v0.10.59 on 2025-08-06 20:29:41 GMT+7

function int_pow(base: number, exp: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function pow_mod(base: number, exp: number, mod: number): number {
  let result: number = 1;
  let b: number = (base % mod);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % mod);
    }
    e = Math.trunc(e / 2);
    b = ((b * b) % mod);
  }
  return result;
}
function rand_range(low: number, high: number): number {
  return ((_now() % (high - low)) + low);
}
function rabin_miller(num: number): boolean {
  let s = (num - 1);
  let t: number = 0;
  while (((s % 2) == 0)) {
    s = (s / 2);
    t = (t + 1);
  }
  let k: number = 0;
  while ((k < 5)) {
    let a = rand_range(2, (num - 1));
    let v = pow_mod(a, s, num);
    if ((v != 1)) {
      let i: number = 0;
      while ((v != (num - 1))) {
        if ((i == (t - 1))) {
          return false;
        }
        i = (i + 1);
        v = ((v * v) % num);
      }
    }
    k = (k + 1);
  }
  return true;
}
function is_prime_low_num(num: number): boolean {
  if ((num < 2)) {
    return false;
  }
  let low_primes: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
  if (low_primes.includes(num)) {
    return true;
  }
  let i: number = 0;
  while ((i < _len(low_primes))) {
    let p: number = low_primes[i];
    if (((num % p) == 0)) {
      return false;
    }
    i = (i + 1);
  }
  return rabin_miller(num);
}
function generate_large_prime(keysize: number): number {
  let start: number = int_pow(2, (keysize - 1));
  let end: number = int_pow(2, keysize);
  while (true) {
    let num = rand_range(start, end);
    if (is_prime_low_num(num)) {
      return num;
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let p: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
p = generate_large_prime(16)
  console.log(_str(("Prime number: " + _str(p))));
  console.log(_str(("is_prime_low_num: " + _str(is_prime_low_num(p)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

