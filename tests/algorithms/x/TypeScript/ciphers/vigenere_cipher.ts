// Generated by Mochi v0.10.59 on 2025-08-06 20:30:04 GMT+7

let LETTERS: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let LETTERS_LOWER: string = "abcdefghijklmnopqrstuvwxyz";
function find_index(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function to_upper_char(ch: string): string {
  let idx: number = find_index(LETTERS_LOWER, ch);
  if ((idx >= 0)) {
    return LETTERS[idx];
  }
  return ch;
}
function to_lower_char(ch: string): string {
  let idx: number = find_index(LETTERS, ch);
  if ((idx >= 0)) {
    return LETTERS_LOWER[idx];
  }
  return ch;
}
function is_upper(ch: string): boolean {
  return (find_index(LETTERS, ch) >= 0);
}
function to_upper_string(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    res = (res + to_upper_char(s[i]));
    i = (i + 1);
  }
  return res;
}
let key: string = "HDarji";
let message: string = "This is Harshil Darji from Dharmaj.";
let encrypted: string = "";
let key_index: number = 0;
let i: number = 0;
let decrypted: string = "";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let key_up: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
key_up = to_upper_string(key)
  while ((i < _len(message))) {
    let _symbol: string = message[i];
    let upper_symbol: string = to_upper_char(_symbol);
    let num: number = find_index(LETTERS, upper_symbol);
    if ((num >= 0)) {
      num = (num + find_index(LETTERS, key_up[key_index]));
      num = (num % _len(LETTERS));
      if (is_upper(_symbol)) {
        encrypted = (encrypted + LETTERS[num]);
      } else {
        encrypted = (encrypted + to_lower_char(LETTERS[num]));
      }
      key_index = (key_index + 1);
      if ((key_index == _len(key_up))) {
        key_index = 0;
      }
    } else {
      encrypted = (encrypted + _symbol);
    }
    i = (i + 1);
  }
  console.log(_str(encrypted));
  key_index = 0;
  i = 0;
  while ((i < _len(encrypted))) {
    let _symbol: string = encrypted[i];
    let upper_symbol: string = to_upper_char(_symbol);
    let num: number = find_index(LETTERS, upper_symbol);
    if ((num >= 0)) {
      num = (num - find_index(LETTERS, key_up[key_index]));
      num = (num % _len(LETTERS));
      if (is_upper(_symbol)) {
        decrypted = (decrypted + LETTERS[num]);
      } else {
        decrypted = (decrypted + to_lower_char(LETTERS[num]));
      }
      key_index = (key_index + 1);
      if ((key_index == _len(key_up))) {
        key_index = 0;
      }
    } else {
      decrypted = (decrypted + _symbol);
    }
    i = (i + 1);
  }
  console.log(_str(decrypted));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

