// Generated by Mochi v0.10.59 on 2025-08-06 20:29:57 GMT+7

function join_strings(xs: string[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(xs))) {
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}
function encrypt_message(key: number, message: string): string {
  let result: string = "";
  let col: number = 0;
  while ((col < key)) {
    let pointer: number = col;
    while ((pointer < _len(message))) {
      result = (result + (message).substring(pointer, (pointer + 1)));
      pointer = (pointer + key);
    }
    col = (col + 1);
  }
  return result;
}
function decrypt_message(key: number, message: string): string {
  let num_cols: number = Math.trunc(((_len(message) + key) - 1) / key);
  let num_rows: number = key;
  let num_shaded_boxes: number = ((num_cols * num_rows) - _len(message));
  let plain_text: string[] = [];
  let i: number = 0;
  while ((i < num_cols)) {
    plain_text.push("");
    i = (i + 1);
  }
  let col: number = 0;
  let row: number = 0;
  let index: number = 0;
  while ((index < _len(message))) {
    plain_text[col] = (plain_text[col] + (message).substring(index, (index + 1)));
    col = (col + 1);
    if (((col == num_cols) || ((col == (num_cols - 1)) && (row >= (num_rows - num_shaded_boxes))))) {
      col = 0;
      row = (row + 1);
    }
    index = (index + 1);
  }
  return join_strings(plain_text);
}
function main() {
  console.log(_str("Enter message: "));
  let message: string = _input();
  let max_key: number = (_len(message) - 1);
  console.log(_str((("Enter key [2-" + _str(max_key)) + "]: ")));
  let key: number = Math.trunc(_input());
  console.log(_str("Encryption/Decryption [e/d]: "));
  let mode: string = _input();
  let text: string = "";
  let first: string = (mode).substring(0, 1);
  if (((first == "e") || (first == "E"))) {
    text = encrypt_message(key, message);
  } else {
    if (((first == "d") || (first == "D"))) {
      text = decrypt_message(key, message);
    }
  }
  console.log(_str((("Output:\n" + text) + "|")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

