// Generated by Mochi v0.10.59 on 2025-08-06 20:07:59 GMT+7

function mod_pow(base: number, exp: number, mod: number): number {
  let result: number = 1;
  let b: number = (base % mod);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % mod);
    }
    b = ((b * b) % mod);
    e = Math.trunc(e / 2);
  }
  return result;
}
function miller_rabin(n: number, allow_probable: boolean): boolean {
  if ((n == 2)) {
    return true;
  }
  if (((n < 2) || ((n % 2) == 0))) {
    return false;
  }
  if ((n > 5)) {
    let last: number = (n % 10);
    if (!((((last == 1) || (last == 3)) || (last == 7)) || (last == 9))) {
      return false;
    }
  }
  let limit: number = 3825123056546413051;
  if (((n > limit) && !allow_probable)) {
    panic("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.");
  }
  let bounds: number[] = [2047, 1373653, 25326001, 3215031751, 2152302898747, 3474749660383, 341550071728321, limit];
  let primes: number[] = [2, 3, 5, 7, 11, 13, 17, 19];
  let i: number = 0;
  let plist_len: number = _len(primes);
  while ((i < _len(bounds))) {
    if ((n < bounds[i])) {
      plist_len = (i + 1);
      i = _len(bounds);
    } else {
      i = (i + 1);
    }
  }
  let d: number = (n - 1);
  let s: number = 0;
  while (((d % 2) == 0)) {
    d = Math.trunc(d / 2);
    s = (s + 1);
  }
  let j: number = 0;
  while ((j < plist_len)) {
    let prime: number = primes[j];
    let x: number = mod_pow(prime, d, n);
    let pr: boolean = false;
    if (((x == 1) || (x == (n - 1)))) {
      pr = true;
    } else {
      let r: number = 1;
      while (((r < s) && !pr)) {
        x = ((x * x) % n);
        if ((x == (n - 1))) {
          pr = true;
        }
        r = (r + 1);
      }
    }
    if (!pr) {
      return false;
    }
    j = (j + 1);
  }
  return true;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(miller_rabin(561, false))));
  console.log(_str(_str(miller_rabin(563, false))));
  console.log(_str(_str(miller_rabin(838201, false))));
  console.log(_str(_str(miller_rabin(838207, false))));
  console.log(_str(_str(miller_rabin(17316001, false))));
  console.log(_str(_str(miller_rabin(17316017, false))));
  console.log(_str(_str(miller_rabin(3078386641, false))));
  console.log(_str(_str(miller_rabin(3078386653, false))));
  console.log(_str(_str(miller_rabin(1713045574801, false))));
  console.log(_str(_str(miller_rabin(1713045574819, false))));
  console.log(_str(_str(miller_rabin(2779799728307, false))));
  console.log(_str(_str(miller_rabin(2779799728327, false))));
  console.log(_str(_str(miller_rabin(113850023909441, false))));
  console.log(_str(_str(miller_rabin(113850023909527, false))));
  console.log(_str(_str(miller_rabin(1275041018848804351, false))));
  console.log(_str(_str(miller_rabin(1275041018848804391, false))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

