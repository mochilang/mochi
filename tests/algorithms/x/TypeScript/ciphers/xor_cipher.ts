// Generated by Mochi v0.10.59 on 2025-08-06 20:30:05 GMT+7

function xor(a: number, b: number): number {
  let res: number = 0;
  let bit: number = 1;
  let x: number = a;
  let y: number = b;
  while (((x > 0) || (y > 0))) {
    let abit: number = (x % 2);
    let bbit: number = (y % 2);
    if ((abit != bbit)) {
      res = (res + bit);
    }
    x = Math.trunc(x / 2);
    y = Math.trunc(y / 2);
    bit = (bit * 2);
  }
  return res;
}
let ascii: string = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
function ord(ch: string): number {
  let i: number = 0;
  while ((i < _len(ascii))) {
    if ((ascii.slice(i, (i + 1)) == ch)) {
      return (32 + i);
    }
    i = (i + 1);
  }
  return 0;
}
function chr(n: number): string {
  if (((n >= 32) && (n < 127))) {
    return ascii.slice((n - 32), (n - 31));
  }
  return "";
}
function normalize_key(key: number): number {
  let k: number = key;
  if ((k == 0)) {
    k = 1;
  }
  k = (k % 256);
  if ((k < 0)) {
    k = (k + 256);
  }
  return k;
}
function encrypt(content: string, key: number): string[] {
  let k: number = normalize_key(key);
  let result: string[] = [];
  let i: number = 0;
  while ((i < _len(content))) {
    let c: number = ord(content.slice(i, (i + 1)));
    let e: number = xor(c, k);
    result.push(chr(e));
    i = (i + 1);
  }
  return result;
}
function encrypt_string(content: string, key: number): string {
  let chars: string[] = encrypt(content, key);
  let out: string = "";
  for (const ch of chars) {
    out = (out + ch);
  }
  return out;
}
let sample: string = "hallo welt";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let enc: string
let dec: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
enc = encrypt_string(sample, 1)
dec = encrypt_string(enc, 1)
  console.log(_str(_str(encrypt(sample, 1))));
  console.log(_str(enc));
  console.log(_str(dec));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

