// Generated by Mochi v0.10.59 on 2025-08-06 20:07:21 GMT+7

let ascii85_chars: string = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu";
function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function ord(ch: string): number {
  let idx: number = ascii85_chars.indexOf(ch);
  if ((idx >= 0)) {
    return (33 + idx);
  }
  return 0;
}
function chr(n: number): string {
  if (((n >= 33) && (n <= 117))) {
    return ascii85_chars.slice((n - 33), (n - 32));
  }
  return "?";
}
function to_binary(n: number, bits: number): string {
  let b: string = "";
  let val: number = n;
  while ((val > 0)) {
    b = (_str((val % 2)) + b);
    val = Math.trunc(val / 2);
  }
  while ((_len(b) < bits)) {
    b = ("0" + b);
  }
  if ((_len(b) == 0)) {
    b = "0";
  }
  return b;
}
function bin_to_int(bits: string): number {
  let n: number = 0;
  let i: number = 0;
  while ((i < _len(bits))) {
    if ((bits[i] == "1")) {
      n = ((n * 2) + 1);
    } else {
      n = (n * 2);
    }
    i = (i + 1);
  }
  return n;
}
function reverse(s: string): string {
  let res: string = "";
  let i: number = (_len(s) - 1);
  while ((i >= 0)) {
    res = (res + s[i]);
    i = (i - 1);
  }
  return res;
}
function base10_to_85(d: number): string {
  if ((d > 0)) {
    return (chr(((d % 85) + 33)) + base10_to_85(Math.trunc(d / 85)));
  }
  return "";
}
function base85_to_10(digits: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(digits))) {
    value = ((value * 85) + (ord(digits[i]) - 33));
    i = (i + 1);
  }
  return value;
}
function ascii85_encode(data: string): string {
  let binary_data: string = "";
  for (const ch of data) {
    binary_data = (binary_data + to_binary(ord(ch), 8));
  }
  let null_values: number = Math.trunc(((32 * (Math.trunc(_len(binary_data) / 32) + 1)) - _len(binary_data)) / 8);
  let total_bits: number = (32 * (Math.trunc(_len(binary_data) / 32) + 1));
  while ((_len(binary_data) < total_bits)) {
    binary_data = (binary_data + "0");
  }
  let result: string = "";
  let i: number = 0;
  while ((i < _len(binary_data))) {
    let chunk_bits: string = binary_data.slice(i, (i + 32));
    let chunk_val: number = bin_to_int(chunk_bits);
    let encoded = reverse(base10_to_85(chunk_val));
    result = (result + encoded);
    i = (i + 32);
  }
  if (((null_values % 4) != 0)) {
    result = result.slice(0, (_len(result) - null_values));
  }
  return result;
}
function ascii85_decode(data: string): string {
  let null_values: number = ((5 * (Math.trunc(_len(data) / 5) + 1)) - _len(data));
  let binary_data: string = data;
  let i: number = 0;
  while ((i < null_values)) {
    binary_data = (binary_data + "u");
    i = (i + 1);
  }
  let result: string = "";
  i = 0;
  while ((i < _len(binary_data))) {
    let chunk: string = binary_data.slice(i, (i + 5));
    let value: number = base85_to_10(chunk);
    let bits: string = to_binary(value, 32);
    let j: number = 0;
    while ((j < 32)) {
      let byte_bits: string = bits.slice(j, (j + 8));
      let c: string = chr(bin_to_int(byte_bits));
      result = (result + c);
      j = (j + 8);
    }
    i = (i + 5);
  }
  let trim: number = null_values;
  if (((null_values % 5) == 0)) {
    trim = (null_values - 1);
  }
  return result.slice(0, (_len(result) - trim));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(ascii85_encode("")));
  console.log(_str(ascii85_encode("12345")));
  console.log(_str(ascii85_encode("base 85")));
  console.log(_str(ascii85_decode("")));
  console.log(_str(ascii85_decode("0etOA2#")));
  console.log(_str(ascii85_decode("@UX=h+?24")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

