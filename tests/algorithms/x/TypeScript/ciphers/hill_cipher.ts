// Generated by Mochi v0.10.59 on 2025-08-06 20:29:25 GMT+7

let KEY_STRING: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
function mod36(n: number): number {
  let r: number = (n % 36);
  if ((r < 0)) {
    r = (r + 36);
  }
  return r;
}
function gcd(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  while ((y != 0)) {
    let t: number = y;
    y = (x % y);
    x = t;
  }
  if ((x < 0)) {
    x = -x;
  }
  return x;
}
function replace_letters(letter: string): number {
  let i: number = 0;
  while ((i < _len(KEY_STRING))) {
    if ((KEY_STRING[i] == letter)) {
      return i;
    }
    i = (i + 1);
  }
  return 0;
}
function replace_digits(num: number): string {
  let idx = mod36(num);
  return KEY_STRING[idx];
}
function to_upper(c: string): string {
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let i: number = 0;
  while ((i < _len(lower))) {
    if ((c == lower[i])) {
      return upper[i];
    }
    i = (i + 1);
  }
  return c;
}
function process_text(text: string, break_key: number): string {
  let chars: string[] = [];
  let i: number = 0;
  while ((i < _len(text))) {
    let c: string = to_upper(text[i]);
    let j: number = 0;
    let ok: boolean = false;
    while ((j < _len(KEY_STRING))) {
      if ((KEY_STRING[j] == c)) {
        ok = true;
        break
      }
      j = (j + 1);
    }
    if (ok) {
      chars.push(c);
    }
    i = (i + 1);
  }
  if ((_len(chars) == 0)) {
    return "";
  }
  let last: string = chars[Math.trunc((_len(chars) - 1))];
  while (((_len(chars) % break_key) != 0)) {
    chars.push(last);
  }
  let res: string = "";
  let k: number = 0;
  while ((k < _len(chars))) {
    res = (res + chars[k]);
    k = (k + 1);
  }
  return res;
}
function matrix_minor(m: number[][], row: number, col: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(m))) {
    if ((i != row)) {
      let r: number[] = [];
      let j: number = 0;
      while ((j < _len(m[i]))) {
        if ((j != col)) {
          r.push(m[i][j]);
        }
        j = (j + 1);
      }
      res.push(r);
    }
    i = (i + 1);
  }
  return res;
}
function determinant(m: number[][]): number {
  let n: number = _len(m);
  if ((n == 1)) {
    return m[Math.trunc(0)][Math.trunc(0)];
  }
  if ((n == 2)) {
    return ((m[Math.trunc(0)][Math.trunc(0)] * m[Math.trunc(1)][Math.trunc(1)]) - (m[Math.trunc(0)][Math.trunc(1)] * m[Math.trunc(1)][Math.trunc(0)]));
  }
  let det: number = 0;
  let col: number = 0;
  while ((col < n)) {
    let minor_mat: number[][] = matrix_minor(m, 0, col);
    let sign: number = 1;
    if (((col % 2) == 1)) {
      sign = -1;
    }
    det = (det + ((sign * m[Math.trunc(0)][col]) * determinant(minor_mat)));
    col = (col + 1);
  }
  return det;
}
function cofactor_matrix(m: number[][]): number[][] {
  let n: number = _len(m);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      let minor_mat: number[][] = matrix_minor(m, i, j);
      let det_minor: number = determinant(minor_mat);
      let sign: number = 1;
      if ((((i + j) % 2) == 1)) {
        sign = -1;
      }
      row.push((sign * det_minor));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function transpose(m: number[][]): number[][] {
  let rows: number = _len(m);
  let cols: number = _len(m[Math.trunc(0)]);
  let res: number[][] = [];
  let j: number = 0;
  while ((j < cols)) {
    let row: number[] = [];
    let i: number = 0;
    while ((i < rows)) {
      row.push(m[i][j]);
      i = (i + 1);
    }
    res.push(row);
    j = (j + 1);
  }
  return res;
}
function matrix_mod(m: number[][]): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(m))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(m[i]))) {
      row.push(mod36(m[i][j]));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function scalar_matrix_mult(s: number, m: number[][]): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(m))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(m[i]))) {
      row.push(mod36((s * m[i][j])));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function adjugate(m: number[][]): number[][] {
  let cof: number[][] = cofactor_matrix(m);
  let n: number = _len(cof);
  let res: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(cof[j][i]);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function multiply_matrix_vector(m: number[][], v: number[]): number[] {
  let n: number = _len(m);
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    let sum: number = 0;
    let j: number = 0;
    while ((j < n)) {
      sum = (sum + (m[i][j] * v[j]));
      j = (j + 1);
    }
    res.push(mod36(sum));
    i = (i + 1);
  }
  return res;
}
function inverse_key(key: number[][]): number[][] {
  let det_val: number = determinant(key);
  let det_mod: number = mod36(det_val);
  let det_inv: number = 0;
  let i: number = 0;
  while ((i < 36)) {
    if ((((det_mod * i) % 36) == 1)) {
      det_inv = i;
      break
    }
    i = (i + 1);
  }
  let adj: number[][] = adjugate(key);
  let tmp: number[][] = scalar_matrix_mult(det_inv, adj);
  let res: number[][] = matrix_mod(tmp);
  return res;
}
function hill_encrypt(key: number[][], text: string): string {
  let break_key: number = _len(key);
  let processed: string = process_text(text, break_key);
  let encrypted: string = "";
  let i: number = 0;
  while ((i < _len(processed))) {
    let vec: number[] = [];
    let j: number = 0;
    while ((j < break_key)) {
      vec.push(replace_letters(processed[Math.trunc((i + j))]));
      j = (j + 1);
    }
    let enc_vec: number[] = multiply_matrix_vector(key, vec);
    let k: number = 0;
    while ((k < break_key)) {
      encrypted = (encrypted + replace_digits(enc_vec[k]));
      k = (k + 1);
    }
    i = (i + break_key);
  }
  return encrypted;
}
function hill_decrypt(key: number[][], text: string): string {
  let break_key: number = _len(key);
  let decrypt_key: number[][] = inverse_key(key);
  let processed: string = process_text(text, break_key);
  let decrypted: string = "";
  let i: number = 0;
  while ((i < _len(processed))) {
    let vec: number[] = [];
    let j: number = 0;
    while ((j < break_key)) {
      vec.push(replace_letters(processed[Math.trunc((i + j))]));
      j = (j + 1);
    }
    let dec_vec: number[] = multiply_matrix_vector(decrypt_key, vec);
    let k: number = 0;
    while ((k < break_key)) {
      decrypted = (decrypted + replace_digits(dec_vec[k]));
      k = (k + 1);
    }
    i = (i + break_key);
  }
  return decrypted;
}
let key: number[][] = [[2, 5], [1, 6]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(hill_encrypt(key, "testing hill cipher")));
  console.log(_str(hill_encrypt(key, "hello")));
  console.log(_str(hill_decrypt(key, "WHXYJOLM9C6XT085LL")));
  console.log(_str(hill_decrypt(key, "85FF00")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

