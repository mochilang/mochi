// Generated by Mochi v0.10.59 on 2025-08-06 20:29:49 GMT+7

function pow2(exp: number): number {
  let res: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    res = (res * 2);
    i = (i + 1);
  }
  return res;
}
let seed: number = 1;
function next_seed(x: number): number {
  return (((x * 1103515245) + 12345) % 2147483648);
}
function rand_range(min: number, max: number): number {
  seed = next_seed(seed);
  return (min + (seed % (max - min)));
}
function gcd(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  while ((y != 0)) {
    let temp: number = (x % y);
    x = y;
    y = temp;
  }
  return x;
}
function mod_inverse(e: number, phi: number): number {
  let t: number = 0;
  let newt: number = 1;
  let r: number = phi;
  let newr: number = e;
  while ((newr != 0)) {
    let quotient: number = Math.trunc(r / newr);
    let tmp: number = newt;
    newt = (t - (quotient * newt));
    t = tmp;
    let tmp_r: number = newr;
    newr = (r - (quotient * newr));
    r = tmp_r;
  }
  if ((r > 1)) {
    return 0;
  }
  if ((t < 0)) {
    t = (t + phi);
  }
  return t;
}
function is_prime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  let i: number = 2;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function generate_prime(bits: number): number {
  let min = pow2((bits - 1));
  let max = pow2(bits);
  let p = rand_range(min, max);
  if (((p % 2) == 0)) {
    p = (p + 1);
  }
  while (!is_prime(p)) {
    p = (p + 2);
    if ((p >= max)) {
      p = (min + 1);
    }
  }
  return p;
}
export interface Keys { public_key: number[]; private_key: number[] }
function generate_key(bits: number): Keys {
  let p: number = generate_prime(bits);
  let q: number = generate_prime(bits);
  let n: number = (p * q);
  let phi: number = ((p - 1) * (q - 1));
  let e: number = rand_range(2, phi);
  while ((gcd(e, phi) != 1)) {
    e = (e + 1);
    if ((e >= phi)) {
      e = 2;
    }
  }
  let d: number = mod_inverse(e, phi);
  return {"public_key": [n, e], "private_key": [n, d]};
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let keys: Keys
let pub: number[]
let priv: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
keys = generate_key(8)
pub = keys.public_key
priv = keys.private_key
  console.log(_str((((("Public key: (" + _str(pub[Math.trunc(0)])) + ", ") + _str(pub[Math.trunc(1)])) + ")")));
  console.log(_str((((("Private key: (" + _str(priv[Math.trunc(0)])) + ", ") + _str(priv[Math.trunc(1)])) + ")")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

