// Generated by Mochi v0.10.59 on 2025-08-06 20:07:16 GMT+7

let B64_CHARSET: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
function to_binary(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let num: number = n;
  let res: string = "";
  while ((num > 0)) {
    let bit = (num % 2);
    res = (_str(bit) + res);
    num = Math.trunc(num / 2);
  }
  return res;
}
function zfill(s: string, width: number): string {
  let res: string = s;
  let pad: number = (width - _len(s));
  while ((pad > 0)) {
    res = ("0" + res);
    pad = (pad - 1);
  }
  return res;
}
function from_binary(s: string): number {
  let i: number = 0;
  let result: number = 0;
  while ((i < _len(s))) {
    result = (result * 2);
    if (((s).substring(i, (i + 1)) == "1")) {
      result = (result + 1);
    }
    i = (i + 1);
  }
  return result;
}
function repeat(ch: string, times: number): string {
  let res: string = "";
  let i: number = 0;
  while ((i < times)) {
    res = (res + ch);
    i = (i + 1);
  }
  return res;
}
function char_index(s: string, c: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == c)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function base64_encode(data: number[]): string {
  let bits: string = "";
  let i: number = 0;
  while ((i < _len(data))) {
    bits = (bits + zfill(to_binary(data[i]), 8));
    i = (i + 1);
  }
  let pad_bits: number = 0;
  if (((_len(bits) % 6) != 0)) {
    pad_bits = (6 - (_len(bits) % 6));
    bits = (bits + repeat("0", pad_bits));
  }
  let j: number = 0;
  let encoded: string = "";
  while ((j < _len(bits))) {
    let chunk: string = (bits).substring(j, (j + 6));
    let idx: number = from_binary(chunk);
    encoded = (encoded + (B64_CHARSET).substring(idx, (idx + 1)));
    j = (j + 6);
  }
  let pad: number = Math.trunc(pad_bits / 2);
  while ((pad > 0)) {
    encoded = (encoded + "=");
    pad = (pad - 1);
  }
  return encoded;
}
function base64_decode(s: string): number[] {
  let padding: number = 0;
  let end: number = _len(s);
  while (((end > 0) && ((s).substring((end - 1), end) == "="))) {
    padding = (padding + 1);
    end = (end - 1);
  }
  let bits: string = "";
  let k: number = 0;
  while ((k < end)) {
    let c: string = (s).substring(k, (k + 1));
    let idx: number = char_index(B64_CHARSET, c);
    bits = (bits + zfill(to_binary(idx), 6));
    k = (k + 1);
  }
  if ((padding > 0)) {
    bits = (bits).substring(0, (_len(bits) - (padding * 2)));
  }
  let bytes: number[] = [];
  let m: number = 0;
  while ((m < _len(bits))) {
    let byte: number = from_binary((bits).substring(m, (m + 8)));
    bytes.push(byte);
    m = (m + 8);
  }
  return bytes;
}
function main() {
  let data: number[] = [77, 111, 99, 104, 105];
  let encoded: string = base64_encode(data);
  console.log(_str(encoded));
  console.log(JSON.stringify(base64_decode(encoded), null, 2));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

