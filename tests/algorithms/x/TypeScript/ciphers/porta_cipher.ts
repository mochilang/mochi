// Generated by Mochi v0.10.59 on 2025-08-06 20:29:39 GMT+7

let UPPER: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let LOWER: string = "abcdefghijklmnopqrstuvwxyz";
let BASE_TOP: string = "ABCDEFGHIJKLM";
let BASE_BOTTOM: string = "NOPQRSTUVWXYZ";
function to_upper(s: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    let j: number = 0;
    let replaced: boolean = false;
    while ((j < _len(LOWER))) {
      if (((LOWER).substring(j, (j + 1)) == ch)) {
        res = (res + (UPPER).substring(j, (j + 1)));
        replaced = true;
        break
      }
      j = (j + 1);
    }
    if (!replaced) {
      res = (res + ch);
    }
    i = (i + 1);
  }
  return res;
}
function char_index(c: string): number {
  let i: number = 0;
  while ((i < _len(UPPER))) {
    if (((UPPER).substring(i, (i + 1)) == c)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function rotate_right(s: string, k: number): string {
  let n: number = _len(s);
  let shift: number = (k % n);
  return ((s).substring((n - shift), n) + (s).substring(0, (n - shift)));
}
function table_for(c: string): string[] {
  let idx: number = char_index(c);
  let shift: number = Math.trunc(idx / 2);
  let row1: string = rotate_right(BASE_BOTTOM, shift);
  let pair: string[] = [BASE_TOP, row1];
  return pair;
}
function generate_table(key: string): string[][] {
  let up: string = to_upper(key);
  let i: number = 0;
  let result: string[][] = [];
  while ((i < _len(up))) {
    let ch: string = (up).substring(i, (i + 1));
    let pair: string[] = table_for(ch);
    result.push(pair);
    i = (i + 1);
  }
  return result;
}
function str_index(s: string, ch: string): number {
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
function get_position(table: string[], ch: string): number[] {
  let row: number = 0;
  if ((str_index(table[Math.trunc(0)], ch) == (0 - 1))) {
    row = 1;
  }
  let col: number = str_index(table[row], ch);
  return [row, col];
}
function get_opponent(table: string[], ch: string): string {
  let pos: number[] = get_position(table, ch);
  let row: number = pos[Math.trunc(0)];
  let col: number = pos[Math.trunc(1)];
  if ((col == (0 - 1))) {
    return ch;
  }
  if ((row == 1)) {
    return (table[Math.trunc(0)]).substring(col, (col + 1));
  }
  return (table[Math.trunc(1)]).substring(col, (col + 1));
}
function encrypt(key: string, words: string): string {
  let table: string[][] = generate_table(key);
  let up_words: string = to_upper(words);
  let cipher: string = "";
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(up_words))) {
    let ch: string = (up_words).substring(i, (i + 1));
    cipher = (cipher + get_opponent(table[count], ch));
    count = ((count + 1) % _len(table));
    i = (i + 1);
  }
  return cipher;
}
function decrypt(key: string, words: string): string {
  let res: string = encrypt(key, words);
  return res;
}
function main() {
  console.log(_str(encrypt("marvin", "jessica")));
  console.log(_str(decrypt("marvin", "QRACRWU")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

