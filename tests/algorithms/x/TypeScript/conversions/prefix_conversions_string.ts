// Generated by Mochi v0.10.59 on 2025-08-06 20:39:57 GMT+7

export interface Prefix { name: string; exp: number }
let si_positive: Prefix[] = [{"name": "yotta", "exp": 24}, {"name": "zetta", "exp": 21}, {"name": "exa", "exp": 18}, {"name": "peta", "exp": 15}, {"name": "tera", "exp": 12}, {"name": "giga", "exp": 9}, {"name": "mega", "exp": 6}, {"name": "kilo", "exp": 3}, {"name": "hecto", "exp": 2}, {"name": "deca", "exp": 1}];
let binary_prefixes: Prefix[] = [{"name": "yotta", "exp": 80}, {"name": "zetta", "exp": 70}, {"name": "exa", "exp": 60}, {"name": "peta", "exp": 50}, {"name": "tera", "exp": 40}, {"name": "giga", "exp": 30}, {"name": "mega", "exp": 20}, {"name": "kilo", "exp": 10}];
function pow(base: number, exp: number): number {
  let result: number = 1.0;
  let e: number = exp;
  if ((e < 0)) {
    e = -e;
    let i: number = 0;
    while ((i < e)) {
      result = (result * base);
      i = (i + 1);
    }
    return (1.0 / result);
  }
  let i: number = 0;
  while ((i < e)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function add_si_prefix(value: number): string {
  let prefixes: Prefix[] = [];
  if ((value > 0.0)) {
    prefixes = si_positive;
  } else {
    prefixes = si_negative;
  }
  let i: number = 0;
  while ((i < _len(prefixes))) {
    let p: Prefix = prefixes[i];
    let num = (value / pow(10.0, p.exp));
    if ((num > 1.0)) {
      return ((_str(num) + " ") + p.name);
    }
    i = (i + 1);
  }
  return _str(value);
}
function add_binary_prefix(value: number): string {
  let i: number = 0;
  while ((i < _len(binary_prefixes))) {
    let p: Prefix = binary_prefixes[i];
    let num = (value / pow(2.0, p.exp));
    if ((num > 1.0)) {
      return ((_str(num) + " ") + p.name);
    }
    i = (i + 1);
  }
  return _str(value);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let si_negative: Prefix[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
si_negative = [{"name": "deci", "exp": -1}, {"name": "centi", "exp": -2}, {"name": "milli", "exp": -3}, {"name": "micro", "exp": -6}, {"name": "nano", "exp": -9}, {"name": "pico", "exp": -12}, {"name": "femto", "exp": -15}, {"name": "atto", "exp": -18}, {"name": "zepto", "exp": -21}, {"name": "yocto", "exp": -24}]
  console.log(_str(add_si_prefix(10000.0)));
  console.log(_str(add_si_prefix(0.005)));
  console.log(_str(add_binary_prefix(65536.0)));
  console.log(_str(add_binary_prefix(512.0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

