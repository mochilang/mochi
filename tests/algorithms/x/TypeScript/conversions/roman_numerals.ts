// Generated by Mochi v0.10.59 on 2025-08-06 20:40:05 GMT+7

let roman_values: number[] = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
let roman_symbols: string[] = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
function char_value(c: string): number {
  if ((c == "I")) {
    return 1;
  }
  if ((c == "V")) {
    return 5;
  }
  if ((c == "X")) {
    return 10;
  }
  if ((c == "L")) {
    return 50;
  }
  if ((c == "C")) {
    return 100;
  }
  if ((c == "D")) {
    return 500;
  }
  if ((c == "M")) {
    return 1000;
  }
  return 0;
}
function roman_to_int(roman: string): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(roman))) {
    if ((((i + 1) < _len(roman)) && (char_value(roman[i]) < char_value(roman[Math.trunc((i + 1))])))) {
      total = ((total + char_value(roman[Math.trunc((i + 1))])) - char_value(roman[i]));
      i = (i + 2);
    } else {
      total = (total + char_value(roman[i]));
      i = (i + 1);
    }
  }
  return total;
}
function int_to_roman(_number: number): string {
  let num: number = _number;
  let res: string = "";
  let i: number = 0;
  while ((i < _len(roman_values))) {
    let value: number = roman_values[i];
    let _symbol: string = roman_symbols[i];
    let factor = (num / value);
    num = (num % value);
    let j: number = 0;
    while ((j < factor)) {
      res = (res + _symbol);
      j = (j + 1);
    }
    if ((num == 0)) {
      break
    }
    i = (i + 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

