// Generated by Mochi v0.10.59 on 2025-08-06 20:39:46 GMT+7

function rstrip_s(s: string): string {
  if (((_len(s) > 0) && (s[Math.trunc((_len(s) - 1))] == "s"))) {
    return (s).substring(0, (_len(s) - 1));
  }
  return s;
}
function normalize_alias(u: string): string {
  if ((u == "millimeter")) {
    return "mm";
  }
  if ((u == "centimeter")) {
    return "cm";
  }
  if ((u == "meter")) {
    return "m";
  }
  if ((u == "kilometer")) {
    return "km";
  }
  if ((u == "inch")) {
    return "in";
  }
  if ((u == "inche")) {
    return "in";
  }
  if ((u == "feet")) {
    return "ft";
  }
  if ((u == "foot")) {
    return "ft";
  }
  if ((u == "yard")) {
    return "yd";
  }
  if ((u == "mile")) {
    return "mi";
  }
  return u;
}
function has_unit(u: string): boolean {
  return ((((((((u == "mm") || (u == "cm")) || (u == "m")) || (u == "km")) || (u == "in")) || (u == "ft")) || (u == "yd")) || (u == "mi"));
}
function from_factor(u: string): number {
  if ((u == "mm")) {
    return 0.001;
  }
  if ((u == "cm")) {
    return 0.01;
  }
  if ((u == "m")) {
    return 1.0;
  }
  if ((u == "km")) {
    return 1000.0;
  }
  if ((u == "in")) {
    return 0.0254;
  }
  if ((u == "ft")) {
    return 0.3048;
  }
  if ((u == "yd")) {
    return 0.9144;
  }
  if ((u == "mi")) {
    return 1609.34;
  }
  return 0.0;
}
function to_factor(u: string): number {
  if ((u == "mm")) {
    return 1000.0;
  }
  if ((u == "cm")) {
    return 100.0;
  }
  if ((u == "m")) {
    return 1.0;
  }
  if ((u == "km")) {
    return 0.001;
  }
  if ((u == "in")) {
    return 39.3701;
  }
  if ((u == "ft")) {
    return 3.28084;
  }
  if ((u == "yd")) {
    return 1.09361;
  }
  if ((u == "mi")) {
    return 0.000621371;
  }
  return 0.0;
}
function length_conversion(value: number, from_type: string, to_type: string): number {
  let new_from: string = normalize_alias(rstrip_s(from_type.toLowerCase()));
  let new_to: string = normalize_alias(rstrip_s(to_type.toLowerCase()));
  if (!has_unit(new_from)) {
    panic((("Invalid 'from_type' value: '" + from_type) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"));
  }
  if (!has_unit(new_to)) {
    panic((("Invalid 'to_type' value: '" + to_type) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"));
  }
  return ((value * from_factor(new_from)) * to_factor(new_to));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(length_conversion(4.0, "METER", "FEET")));
  console.log(_str(length_conversion(1.0, "kilometer", "inch")));
  console.log(_str(length_conversion(2.0, "feet", "meter")));
  console.log(_str(length_conversion(2.0, "centimeter", "millimeter")));
  console.log(_str(length_conversion(4.0, "yard", "kilometer")));
  console.log(_str(length_conversion(3.0, "foot", "inch")));
  console.log(_str(length_conversion(3.0, "mm", "in")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

