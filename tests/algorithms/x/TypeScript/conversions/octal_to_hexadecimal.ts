// Generated by Mochi v0.10.59 on 2025-08-06 20:39:53 GMT+7

function octal_to_hex(octal: string): string {
  let s: string = octal;
  if ((((_len(s) >= 2) && (s[Math.trunc(0)] == "0")) && (s[Math.trunc(1)] == "o"))) {
    s = (s).substring(2, _len(s));
  }
  if ((_len(s) == 0)) {
    panic("Empty string was passed to the function");
  }
  let j: number = 0;
  while ((j < _len(s))) {
    let c: string = s[j];
    if (((((((((c != "0") && (c != "1")) && (c != "2")) && (c != "3")) && (c != "4")) && (c != "5")) && (c != "6")) && (c != "7"))) {
      panic("Not a Valid Octal Number");
    }
    j = (j + 1);
  }
  let decimal: number = 0;
  let k: number = 0;
  while ((k < _len(s))) {
    let d: number = s[k].charCodeAt(0);
    decimal = ((decimal * 8) + d);
    k = (k + 1);
  }
  let hex_chars: string = "0123456789ABCDEF";
  if ((decimal == 0)) {
    return "0x";
  }
  let hex: string = "";
  while ((decimal > 0)) {
    let idx: number = (decimal % 16);
    hex = (hex_chars[idx] + hex);
    decimal = Math.trunc(decimal / 16);
  }
  return ("0x" + hex);
}
let nums: string[] = ["030", "100", "247", "235", "007"];
let t: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((t < _len(nums))) {
    let num = nums[t];
    console.log(_str(octal_to_hex(num)));
    t = (t + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

