// Generated by Mochi v0.10.59 on 2025-08-06 20:39:27 GMT+7

let ones: string[] = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
let teens: string[] = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
let tens: string[] = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
let short_powers: number[] = [15, 12, 9, 6, 3, 2];
let short_units: string[] = ["quadrillion", "trillion", "billion", "million", "thousand", "hundred"];
let long_powers: number[] = [15, 9, 6, 3, 2];
let long_units: string[] = ["billiard", "milliard", "million", "thousand", "hundred"];
let indian_powers: number[] = [14, 12, 7, 5, 3, 2];
let indian_units: string[] = ["crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"];
function pow10(exp: number): number {
  let res: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    res = (res * 10);
    i = (i + 1);
  }
  return res;
}
function max_value(system: string): number {
  if ((system == "short")) {
    return (pow10(18) - 1);
  }
  if ((system == "long")) {
    return (pow10(21) - 1);
  }
  if ((system == "indian")) {
    return (pow10(19) - 1);
  }
  return 0;
}
function join_words(words: string[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(words))) {
    if ((i > 0)) {
      res = (res + " ");
    }
    res = (res + words[i]);
    i = (i + 1);
  }
  return res;
}
function convert_small_number(num: number): string {
  if ((num < 0)) {
    return "";
  }
  if ((num >= 100)) {
    return "";
  }
  let tens_digit = Math.trunc(num / 10);
  let ones_digit = (num % 10);
  if ((tens_digit == 0)) {
    return ones[ones_digit];
  }
  if ((tens_digit == 1)) {
    return teens[ones_digit];
  }
  let hyphen = ((ones_digit > 0) ? "-" : "");
  let tail = ((ones_digit > 0) ? ones[ones_digit] : "");
  return ((tens[tens_digit] + hyphen) + tail);
}
function convert_number(num: number, system: string): string {
  let word_groups: string[] = [];
  let n = num;
  if ((n < 0)) {
    word_groups.push("negative");
    n = -n;
  }
  if ((n > max_value(system))) {
    return "";
  }
  let powers: number[] = [];
  let units: string[] = [];
  if ((system == "short")) {
    powers = short_powers;
    units = short_units;
  } else {
    if ((system == "long")) {
      powers = long_powers;
      units = long_units;
    } else {
      if ((system == "indian")) {
        powers = indian_powers;
        units = indian_units;
      } else {
        return "";
      }
    }
  }
  let i: number = 0;
  while ((i < _len(powers))) {
    let power: number = powers[i];
    let unit: string = units[i];
    let divisor: number = pow10(power);
    let digit_group = (n / divisor);
    n = (n % divisor);
    if ((digit_group > 0)) {
      let word_group = ((digit_group >= 100) ? convert_number(digit_group, system) : convert_small_number(digit_group));
      word_groups.push(((word_group + " ") + unit));
    }
    i = (i + 1);
  }
  if (((n > 0) || (_len(word_groups) == 0))) {
    word_groups.push(convert_small_number(n));
  }
  let joined: string = join_words(word_groups);
  return joined;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(convert_number(123456789012345, "short")));
  console.log(_str(convert_number(123456789012345, "long")));
  console.log(_str(convert_number(123456789012345, "indian")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

