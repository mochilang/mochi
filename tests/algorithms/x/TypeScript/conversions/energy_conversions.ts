// Generated by Mochi v0.10.59 on 2025-08-06 20:39:37 GMT+7

export interface ENERGY_CONVERSION { joule: number; kilojoule: number; megajoule: number; gigajoule: number; wattsecond: number; watthour: number; kilowatthour: number; newtonmeter: number; calorie_nutr: number; kilocalorie_nutr: number; electronvolt: number; britishthermalunit_it: number; footpound: number }
let ENERGY_CONVERSION: ENERGY_CONVERSION = {"joule": 1.0, "kilojoule": 1000.0, "megajoule": 1000000.0, "gigajoule": 1000000000.0, "wattsecond": 1.0, "watthour": 3600.0, "kilowatthour": 3600000.0, "newtonmeter": 1.0, "calorie_nutr": 4186.8, "kilocalorie_nutr": 4186800.0, "electronvolt": 1.602176634e-19, "britishthermalunit_it": 1055.05585, "footpound": 1.355818};
function energy_conversion(from_type: string, to_type: string, value: number): number {
  if ((((from_type in ENERGY_CONVERSION) == false) || ((to_type in ENERGY_CONVERSION) == false))) {
    panic("Incorrect 'from_type' or 'to_type'");
  }
  return ((value * ENERGY_CONVERSION[from_type]) / ENERGY_CONVERSION[to_type]);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(energy_conversion("joule", "kilojoule", 1.0))));
  console.log(_str(_str(energy_conversion("kilowatthour", "joule", 10.0))));
  console.log(_str(_str(energy_conversion("britishthermalunit_it", "footpound", 1.0))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

