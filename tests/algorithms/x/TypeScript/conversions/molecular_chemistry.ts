// Generated by Mochi v0.10.59 on 2025-08-06 20:39:48 GMT+7

function round_to_int(x: number): number {
  if ((x >= 0.0)) {
    return Math.trunc((x + 0.5));
  }
  return Math.trunc((x - 0.5));
}
function molarity_to_normality(nfactor: number, moles: number, volume: number): number {
  return round_to_int(((moles / volume) * nfactor));
}
function moles_to_pressure(volume: number, moles: number, temperature: number): number {
  return round_to_int((((moles * 0.0821) * temperature) / volume));
}
function moles_to_volume(pressure: number, moles: number, temperature: number): number {
  return round_to_int((((moles * 0.0821) * temperature) / pressure));
}
function pressure_and_volume_to_temperature(pressure: number, moles: number, volume: number): number {
  return round_to_int(((pressure * volume) / (0.0821 * moles)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(molarity_to_normality(2.0, 3.1, 0.31))));
  console.log(_str(_str(molarity_to_normality(4.0, 11.4, 5.7))));
  console.log(_str(_str(moles_to_pressure(0.82, 3.0, 300.0))));
  console.log(_str(_str(moles_to_pressure(8.2, 5.0, 200.0))));
  console.log(_str(_str(moles_to_volume(0.82, 3.0, 300.0))));
  console.log(_str(_str(moles_to_volume(8.2, 5.0, 200.0))));
  console.log(_str(_str(pressure_and_volume_to_temperature(0.82, 1.0, 2.0))));
  console.log(_str(_str(pressure_and_volume_to_temperature(8.2, 5.0, 3.0))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

