// Generated by Mochi v0.10.59 on 2025-08-06 20:40:12 GMT+7

let units: string[] = ["cubic meter", "litre", "kilolitre", "gallon", "cubic yard", "cubic foot", "cup"];
let from_factors: number[] = [1.0, 0.001, 1.0, 0.00454, 0.76455, 0.028, 0.000236588];
let to_factors: number[] = [1.0, 1000.0, 1.0, 264.172, 1.30795, 35.3147, 4226.75];
function supported_values(): string {
  let result: string = units[Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(units))) {
    result = ((result + ", ") + units[i]);
    i = (i + 1);
  }
  return result;
}
function find_index(name: string): number {
  let i: number = 0;
  while ((i < _len(units))) {
    if ((units[i] == name)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function get_from_factor(name: string): number {
  let idx: number = find_index(name);
  if ((idx < 0)) {
    panic(((("Invalid 'from_type' value: '" + name) + "' Supported values are: ") + supported_values()));
  }
  return from_factors[idx];
}
function get_to_factor(name: string): number {
  let idx: number = find_index(name);
  if ((idx < 0)) {
    panic(((("Invalid 'to_type' value: '" + name) + "' Supported values are: ") + supported_values()));
  }
  return to_factors[idx];
}
function volume_conversion(value: number, from_type: string, to_type: string): number {
  let from_factor: number = get_from_factor(from_type);
  let to_factor: number = get_to_factor(to_type);
  return ((value * from_factor) * to_factor);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(volume_conversion(4.0, "cubic meter", "litre"))));
  console.log(_str(_str(volume_conversion(1.0, "litre", "gallon"))));
  console.log(_str(_str(volume_conversion(1.0, "kilolitre", "cubic meter"))));
  console.log(_str(_str(volume_conversion(3.0, "gallon", "cubic yard"))));
  console.log(_str(_str(volume_conversion(2.0, "cubic yard", "litre"))));
  console.log(_str(_str(volume_conversion(4.0, "cubic foot", "cup"))));
  console.log(_str(_str(volume_conversion(1.0, "cup", "kilolitre"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

