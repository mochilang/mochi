// Generated by Mochi v0.10.59 on 2025-08-06 20:40:02 GMT+7

function round_int(x: number): number {
  return Math.trunc((x + 0.5));
}
function rgb_to_cmyk(r_input: number, g_input: number, b_input: number): number[] {
  if (((((((r_input < 0) || (r_input >= 256)) || (g_input < 0)) || (g_input >= 256)) || (b_input < 0)) || (b_input >= 256))) {
    panic("Expected int of the range 0..255");
  }
  let r: number = (r_input / 255.0);
  let g: number = (g_input / 255.0);
  let b: number = (b_input / 255.0);
  let max_val: number = r;
  if ((g > max_val)) {
    max_val = g;
  }
  if ((b > max_val)) {
    max_val = b;
  }
  let k_float: number = (1.0 - max_val);
  if ((k_float == 1.0)) {
    return [0, 0, 0, 100];
  }
  let c_float: number = ((100.0 * ((1.0 - r) - k_float)) / (1.0 - k_float));
  let m_float: number = ((100.0 * ((1.0 - g) - k_float)) / (1.0 - k_float));
  let y_float: number = ((100.0 * ((1.0 - b) - k_float)) / (1.0 - k_float));
  let k_percent: number = (100.0 * k_float);
  let c: number = round_int(c_float);
  let m: number = round_int(m_float);
  let y: number = round_int(y_float);
  let k: number = round_int(k_percent);
  return [c, m, y, k];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (rgb_to_cmyk(255, 255, 255)).join(' ') + "]"));
  console.log(_str("[" + (rgb_to_cmyk(128, 128, 128)).join(' ') + "]"));
  console.log(_str("[" + (rgb_to_cmyk(0, 0, 0)).join(' ') + "]"));
  console.log(_str("[" + (rgb_to_cmyk(255, 0, 0)).join(' ') + "]"));
  console.log(_str("[" + (rgb_to_cmyk(0, 255, 0)).join(' ') + "]"));
  console.log(_str("[" + (rgb_to_cmyk(0, 0, 255)).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

