// Generated by Mochi v0.10.59 on 2025-08-06 20:30:29 GMT+7

export interface UNIT_SYMBOL { meter: string; kilometer: string; megametre: string; gigametre: string; terametre: string; petametre: string; exametre: string; zettametre: string; yottametre: string }
export interface METRIC_CONVERSION { m: number; km: number; Mm: number; Gm: number; Tm: number; Pm: number; Em: number; Zm: number; Ym: number }
let UNIT_SYMBOL: UNIT_SYMBOL = {"meter": "m", "kilometer": "km", "megametre": "Mm", "gigametre": "Gm", "terametre": "Tm", "petametre": "Pm", "exametre": "Em", "zettametre": "Zm", "yottametre": "Ym"};
let METRIC_CONVERSION: METRIC_CONVERSION = {"m": 0, "km": 3, "Mm": 6, "Gm": 9, "Tm": 12, "Pm": 15, "Em": 18, "Zm": 21, "Ym": 24};
let ABBREVIATIONS: string = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym";
function sanitize(unit: string): string {
  let res: string = unit.toLowerCase();
  if ((_len(res) > 0)) {
    let last: string = (res).substring((_len(res) - 1), _len(res));
    if ((last == "s")) {
      res = (res).substring(0, (_len(res) - 1));
    }
  }
  if ((res in UNIT_SYMBOL)) {
    return UNIT_SYMBOL[res];
  }
  return res;
}
function pow10(exp: number): number {
  if ((exp == 0)) {
    return 1.0;
  }
  let e: number = exp;
  let res: number = 1.0;
  if ((e < 0)) {
    e = -e;
  }
  let i: number = 0;
  while ((i < e)) {
    res = (res * 10.0);
    i = (i + 1);
  }
  if ((exp < 0)) {
    return (1.0 / res);
  }
  return res;
}
function length_conversion(value: number, from_type: string, to_type: string): number {
  let from_sanitized: string = sanitize(from_type);
  let to_sanitized: string = sanitize(to_type);
  if (!(from_sanitized in METRIC_CONVERSION)) {
    panic(((("Invalid 'from_type' value: '" + from_type) + "'.\nConversion abbreviations are: ") + ABBREVIATIONS));
  }
  if (!(to_sanitized in METRIC_CONVERSION)) {
    panic(((("Invalid 'to_type' value: '" + to_type) + "'.\nConversion abbreviations are: ") + ABBREVIATIONS));
  }
  let from_exp = METRIC_CONVERSION[from_sanitized];
  let to_exp = METRIC_CONVERSION[to_sanitized];
  let exponent: number = 0;
  if ((from_exp > to_exp)) {
    exponent = (from_exp - to_exp);
  } else {
    exponent = -(to_exp - from_exp);
  }
  return (value * pow10(exponent));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(length_conversion(1.0, "meter", "kilometer"))));
  console.log(_str(_str(length_conversion(1.0, "meter", "megametre"))));
  console.log(_str(_str(length_conversion(1.0, "gigametre", "meter"))));
  console.log(_str(_str(length_conversion(1.0, "terametre", "zettametre"))));
  console.log(_str(_str(length_conversion(1.0, "yottametre", "zettametre"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

