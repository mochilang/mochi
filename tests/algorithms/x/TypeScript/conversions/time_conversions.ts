// Generated by Mochi v0.10.59 on 2025-08-06 20:40:10 GMT+7

export interface Time_chart { seconds: number; minutes: number; hours: number; days: number; weeks: number; months: number; years: number }
export interface Time_chart_inverse { seconds: number; minutes: number; hours: number; days: number; weeks: number; months: number; years: number }
let time_chart: Time_chart = {"seconds": 1.0, "minutes": 60.0, "hours": 3600.0, "days": 86400.0, "weeks": 604800.0, "months": 2629800.0, "years": 31557600.0};
let time_chart_inverse: Time_chart_inverse = {"seconds": 1.0, "minutes": (1.0 / 60.0), "hours": (1.0 / 3600.0), "days": (1.0 / 86400.0), "weeks": (1.0 / 604800.0), "months": (1.0 / 2629800.0), "years": (1.0 / 31557600.0)};
let units: string[] = ["seconds", "minutes", "hours", "days", "weeks", "months", "years"];
let units_str: string = "seconds, minutes, hours, days, weeks, months, years";
function contains(arr: string[], t: string): boolean {
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((arr[i] == t)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function convert_time(time_value: number, unit_from: string, unit_to: string): number {
  if ((time_value < 0.0)) {
    panic("'time_value' must be a non-negative number.");
  }
  let _from: string = unit_from.toLowerCase();
  let to: string = unit_to.toLowerCase();
  if ((!units.includes(_from) || !units.includes(to))) {
    let invalid_unit: string = _from;
    if (units.includes(_from)) {
      invalid_unit = to;
    }
    panic((((("Invalid unit " + invalid_unit) + " is not in ") + units_str) + "."));
  }
  let seconds = (time_value * time_chart[_from]);
  let converted = (seconds * time_chart_inverse[to]);
  let scaled = (converted * 1000.0);
  let int_part = Math.trunc((scaled + 0.5));
  return ((int_part + 0.0) / 1000.0);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(convert_time(3600.0, "seconds", "hours")));
  console.log(_str(convert_time(360.0, "days", "months")));
  console.log(_str(convert_time(360.0, "months", "years")));
  console.log(_str(convert_time(1.0, "years", "seconds")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

