// Generated by Mochi v0.10.59 on 2025-08-06 20:39:24 GMT+7

function strip_spaces(s: string): string {
  let start: number = 0;
  let end: number = (_len(s) - 1);
  while (((start < _len(s)) && (s[start] == " "))) {
    start = (start + 1);
  }
  while (((end >= start) && (s[end] == " "))) {
    end = (end - 1);
  }
  let res: string = "";
  let i: number = start;
  while ((i <= end)) {
    res = (res + s[i]);
    i = (i + 1);
  }
  return res;
}
function repeat_char(ch: string, count: number): string {
  let res: string = "";
  let i: number = 0;
  while ((i < count)) {
    res = (res + ch);
    i = (i + 1);
  }
  return res;
}
function slice(s: string, start: number, end: number): string {
  let res: string = "";
  let i: number = start;
  while ((i < end)) {
    res = (res + s[i]);
    i = (i + 1);
  }
  return res;
}
function bits_to_int(bits: string): number {
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(bits))) {
    value = (value * 2);
    if ((bits[i] == "1")) {
      value = (value + 1);
    }
    i = (i + 1);
  }
  return value;
}
function bin_to_hexadecimal(binary_str: string): string {
  let s: string = strip_spaces(binary_str);
  if ((_len(s) == 0)) {
    panic("Empty string was passed to the function");
  }
  let is_negative: boolean = false;
  if ((s[Math.trunc(0)] == "-")) {
    is_negative = true;
    s = s.slice(1, _len(s));
  }
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[i];
    if (((c != "0") && (c != "1"))) {
      panic("Non-binary value was passed to the function");
    }
    i = (i + 1);
  }
  let groups: number = (Math.trunc(_len(s) / 4) + 1);
  let pad_len: number = ((groups * 4) - _len(s));
  s = (repeat_char("0", pad_len) + s);
  let digits: string = "0123456789abcdef";
  let res: string = "0x";
  let j: number = 0;
  while ((j < _len(s))) {
    let chunk: string = s.slice(j, (j + 4));
    let val: number = bits_to_int(chunk);
    res = (res + digits[val]);
    j = (j + 4);
  }
  if (is_negative) {
    return ("-" + res);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(bin_to_hexadecimal("101011111")));
  console.log(_str(bin_to_hexadecimal(" 1010   ")));
  console.log(_str(bin_to_hexadecimal("-11101")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

