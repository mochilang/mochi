// Generated by Mochi v0.10.59 on 2025-08-06 20:39:45 GMT+7

let hex_digits: string = "0123456789abcdef";
function split_by_dot(s: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[i];
    if ((c == ".")) {
      res.push(current);
      current = "";
    } else {
      current = (current + c);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function parse_decimal(s: string): number {
  if ((_len(s) == 0)) {
    panic("Invalid IPv4 address format");
  }
  let value: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let c: string = s[i];
    if (((c < "0") || (c > "9"))) {
      panic("Invalid IPv4 address format");
    }
    value = ((value * 10) + Math.trunc(c));
    i = (i + 1);
  }
  return value;
}
function to_hex2(n: number): string {
  let x: number = n;
  let res: string = "";
  while ((x > 0)) {
    let d: number = (x % 16);
    res = (hex_digits[d] + res);
    x = Math.trunc(x / 16);
  }
  while ((_len(res) < 2)) {
    res = ("0" + res);
  }
  return res;
}
function ipv4_to_decimal(ipv4_address: string): number {
  let parts: string[] = split_by_dot(ipv4_address);
  if ((_len(parts) != 4)) {
    panic("Invalid IPv4 address format");
  }
  let result: number = 0;
  let i: number = 0;
  while ((i < 4)) {
    let oct: number = parse_decimal(parts[i]);
    if (((oct < 0) || (oct > 255))) {
      panic(("Invalid IPv4 octet " + _str(oct)));
    }
    result = ((result * 256) + oct);
    i = (i + 1);
  }
  return result;
}
function alt_ipv4_to_decimal(ipv4_address: string): number {
  let parts: string[] = split_by_dot(ipv4_address);
  if ((_len(parts) != 4)) {
    panic("Invalid IPv4 address format");
  }
  let hex_str: string = "";
  let i: number = 0;
  while ((i < 4)) {
    let oct: number = parse_decimal(parts[i]);
    if (((oct < 0) || (oct > 255))) {
      panic(("Invalid IPv4 octet " + _str(oct)));
    }
    hex_str = (hex_str + to_hex2(oct));
    i = (i + 1);
  }
  let value: number = 0;
  let k: number = 0;
  while ((k < _len(hex_str))) {
    let c: string = hex_str[k];
    let digit: number = (0 - 1);
    let j: number = 0;
    while ((j < _len(hex_digits))) {
      if ((hex_digits[j] == c)) {
        digit = j;
      }
      j = (j + 1);
    }
    if ((digit < 0)) {
      panic("Invalid hex digit");
    }
    value = ((value * 16) + digit);
    k = (k + 1);
  }
  return value;
}
function decimal_to_ipv4(decimal_ipv4: number): string {
  if (((decimal_ipv4 < 0) || (decimal_ipv4 > 4294967295))) {
    panic("Invalid decimal IPv4 address");
  }
  let n: number = decimal_ipv4;
  let parts: string[] = [];
  let i: number = 0;
  while ((i < 4)) {
    let octet: number = (n % 256);
    parts.push(_str(octet));
    n = Math.trunc(n / 256);
    i = (i + 1);
  }
  let res: string = "";
  let j: number = (_len(parts) - 1);
  while ((j >= 0)) {
    res = (res + parts[j]);
    if ((j > 0)) {
      res = (res + ".");
    }
    j = (j - 1);
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(ipv4_to_decimal("192.168.0.1")));
  console.log(_str(ipv4_to_decimal("10.0.0.255")));
  console.log(_str(alt_ipv4_to_decimal("192.168.0.1")));
  console.log(_str(alt_ipv4_to_decimal("10.0.0.255")));
  console.log(_str(decimal_to_ipv4(3232235521)));
  console.log(_str(decimal_to_ipv4(167772415)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

