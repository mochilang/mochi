// Generated by Mochi v0.10.59 on 2025-08-06 20:40:14 GMT+7

export interface KILOGRAM_CHART { kilogram: number; gram: number; milligram: number; "metric-ton": number; "long-ton": number; "short-ton": number; pound: number; stone: number; ounce: number; carrat: number; "atomic-mass-unit": number }
export interface WEIGHT_TYPE_CHART { kilogram: number; gram: number; milligram: number; "metric-ton": number; "long-ton": number; "short-ton": number; pound: number; stone: number; ounce: number; carrat: number; "atomic-mass-unit": number }
function pow10(exp: number): number {
  let result: number = 1.0;
  if ((exp >= 0)) {
    let i: number = 0;
    while ((i < exp)) {
      result = (result * 10.0);
      i = (i + 1);
    }
  } else {
    let i: number = 0;
    while ((i < (0 - exp))) {
      result = (result / 10.0);
      i = (i + 1);
    }
  }
  return result;
}
function weight_conversion(from_type: string, to_type: string, value: number): number {
  let has_to = (to_type in KILOGRAM_CHART);
  let has_from = (from_type in WEIGHT_TYPE_CHART);
  if ((has_to && has_from)) {
    return ((value * KILOGRAM_CHART[to_type]) * WEIGHT_TYPE_CHART[from_type]);
  }
  console.log(_str("Invalid 'from_type' or 'to_type'"));
  return 0.0;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let KILOGRAM_CHART: KILOGRAM_CHART
let WEIGHT_TYPE_CHART: WEIGHT_TYPE_CHART
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
KILOGRAM_CHART = {"kilogram": 1.0, "gram": 1000.0, "milligram": 1000000.0, "metric-ton": 0.001, "long-ton": 0.0009842073, "short-ton": 0.0011023122, "pound": 2.2046244202, "stone": 0.1574731728, "ounce": 35.273990723, "carrat": 5000.0, "atomic-mass-unit": (6.022136652 * pow10(26))}
WEIGHT_TYPE_CHART = {"kilogram": 1.0, "gram": 0.001, "milligram": 1e-06, "metric-ton": 1000.0, "long-ton": 1016.04608, "short-ton": 907.184, "pound": 0.453592, "stone": 6.35029, "ounce": 0.0283495, "carrat": 0.0002, "atomic-mass-unit": (1.660540199 * pow10(-27))}
  console.log(_str(weight_conversion("kilogram", "gram", 1.0)));
  console.log(_str(weight_conversion("gram", "pound", 3.0)));
  console.log(_str(weight_conversion("ounce", "kilogram", 3.0)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

