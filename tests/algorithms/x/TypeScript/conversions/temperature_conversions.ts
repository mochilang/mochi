// Generated by Mochi v0.10.59 on 2025-08-06 20:40:09 GMT+7

function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let p: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 10.0);
    i = (i + 1);
  }
  return p;
}
function round_to(x: number, ndigits: number): number {
  let m: number = pow10(ndigits);
  return (floor(((x * m) + 0.5)) / m);
}
function celsius_to_fahrenheit(c: number, ndigits: number): number {
  return round_to((((c * 9.0) / 5.0) + 32.0), ndigits);
}
function celsius_to_kelvin(c: number, ndigits: number): number {
  return round_to((c + 273.15), ndigits);
}
function celsius_to_rankine(c: number, ndigits: number): number {
  return round_to((((c * 9.0) / 5.0) + 491.67), ndigits);
}
function fahrenheit_to_celsius(f: number, ndigits: number): number {
  return round_to((((f - 32.0) * 5.0) / 9.0), ndigits);
}
function fahrenheit_to_kelvin(f: number, ndigits: number): number {
  return round_to(((((f - 32.0) * 5.0) / 9.0) + 273.15), ndigits);
}
function fahrenheit_to_rankine(f: number, ndigits: number): number {
  return round_to((f + 459.67), ndigits);
}
function kelvin_to_celsius(k: number, ndigits: number): number {
  return round_to((k - 273.15), ndigits);
}
function kelvin_to_fahrenheit(k: number, ndigits: number): number {
  return round_to(((((k - 273.15) * 9.0) / 5.0) + 32.0), ndigits);
}
function kelvin_to_rankine(k: number, ndigits: number): number {
  return round_to(((k * 9.0) / 5.0), ndigits);
}
function rankine_to_celsius(r: number, ndigits: number): number {
  return round_to((((r - 491.67) * 5.0) / 9.0), ndigits);
}
function rankine_to_fahrenheit(r: number, ndigits: number): number {
  return round_to((r - 459.67), ndigits);
}
function rankine_to_kelvin(r: number, ndigits: number): number {
  return round_to(((r * 5.0) / 9.0), ndigits);
}
function reaumur_to_kelvin(r: number, ndigits: number): number {
  return round_to(((r * 1.25) + 273.15), ndigits);
}
function reaumur_to_fahrenheit(r: number, ndigits: number): number {
  return round_to(((r * 2.25) + 32.0), ndigits);
}
function reaumur_to_celsius(r: number, ndigits: number): number {
  return round_to((r * 1.25), ndigits);
}
function reaumur_to_rankine(r: number, ndigits: number): number {
  return round_to((((r * 2.25) + 32.0) + 459.67), ndigits);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(celsius_to_fahrenheit(0.0, 2)));
  console.log(_str(celsius_to_kelvin(0.0, 2)));
  console.log(_str(celsius_to_rankine(0.0, 2)));
  console.log(_str(fahrenheit_to_celsius(32.0, 2)));
  console.log(_str(fahrenheit_to_kelvin(32.0, 2)));
  console.log(_str(fahrenheit_to_rankine(32.0, 2)));
  console.log(_str(kelvin_to_celsius(273.15, 2)));
  console.log(_str(kelvin_to_fahrenheit(273.15, 2)));
  console.log(_str(kelvin_to_rankine(273.15, 2)));
  console.log(_str(rankine_to_celsius(491.67, 2)));
  console.log(_str(rankine_to_fahrenheit(491.67, 2)));
  console.log(_str(rankine_to_kelvin(491.67, 2)));
  console.log(_str(reaumur_to_kelvin(80.0, 2)));
  console.log(_str(reaumur_to_fahrenheit(80.0, 2)));
  console.log(_str(reaumur_to_celsius(80.0, 2)));
  console.log(_str(reaumur_to_rankine(80.0, 2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

