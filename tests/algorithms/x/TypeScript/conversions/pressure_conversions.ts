// Generated by Mochi v0.10.59 on 2025-08-06 20:39:58 GMT+7

export interface PRESSURE_CONVERSION { atm: FromTo; pascal: FromTo; bar: FromTo; kilopascal: FromTo; megapascal: FromTo; psi: FromTo; inHg: FromTo; torr: FromTo }
export interface FromTo { from_factor: number; to_factor: number }
let PRESSURE_CONVERSION: PRESSURE_CONVERSION = {"atm": {"from_factor": 1.0, "to_factor": 1.0}, "pascal": {"from_factor": 9.8e-06, "to_factor": 101325.0}, "bar": {"from_factor": 0.986923, "to_factor": 1.01325}, "kilopascal": {"from_factor": 0.00986923, "to_factor": 101.325}, "megapascal": {"from_factor": 9.86923, "to_factor": 0.101325}, "psi": {"from_factor": 0.068046, "to_factor": 14.6959}, "inHg": {"from_factor": 0.0334211, "to_factor": 29.9213}, "torr": {"from_factor": 0.00131579, "to_factor": 760.0}};
function pressure_conversion(value: number, from_type: string, to_type: string): number {
  if (!(from_type in PRESSURE_CONVERSION)) {
    let keys = Object.keys(PRESSURE_CONVERSION).join(", ");
    panic(((("Invalid 'from_type' value: '" + from_type) + "'  Supported values are:\n") + keys));
  }
  if (!(to_type in PRESSURE_CONVERSION)) {
    let keys = Object.keys(PRESSURE_CONVERSION).join(", ");
    panic(((("Invalid 'to_type' value: '" + to_type) + ".  Supported values are:\n") + keys));
  }
  let _from = PRESSURE_CONVERSION[from_type];
  let to = PRESSURE_CONVERSION[to_type];
  return ((value * _from.from_factor) * to.to_factor);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(pressure_conversion(4.0, "atm", "pascal")));
  console.log(_str(pressure_conversion(1.0, "pascal", "psi")));
  console.log(_str(pressure_conversion(1.0, "bar", "atm")));
  console.log(_str(pressure_conversion(3.0, "kilopascal", "bar")));
  console.log(_str(pressure_conversion(2.0, "megapascal", "psi")));
  console.log(_str(pressure_conversion(4.0, "psi", "torr")));
  console.log(_str(pressure_conversion(1.0, "inHg", "atm")));
  console.log(_str(pressure_conversion(1.0, "torr", "psi")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

