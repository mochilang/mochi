// Generated by Mochi v0.10.59 on 2025-08-06 20:39:26 GMT+7

function bin_to_octal(bin_string: string): string {
  let i: number = 0;
  while ((i < _len(bin_string))) {
    let c: string = bin_string[i];
    if (!((c == "0") || (c == "1"))) {
      panic("Non-binary value was passed to the function");
    }
    i = (i + 1);
  }
  if ((_len(bin_string) == 0)) {
    panic("Empty string was passed to the function");
  }
  let padded: string = bin_string;
  while (((_len(padded) % 3) != 0)) {
    padded = ("0" + padded);
  }
  let oct_string: string = "";
  let index: number = 0;
  while ((index < _len(padded))) {
    let group: string = padded.slice(index, (index + 3));
    let b0: number = ((group[Math.trunc(0)] == "1") ? 1 : 0);
    let b1: number = ((group[Math.trunc(1)] == "1") ? 1 : 0);
    let b2: number = ((group[Math.trunc(2)] == "1") ? 1 : 0);
    let oct_val: number = (((b0 * 4) + (b1 * 2)) + b2);
    oct_string = (oct_string + _str(oct_val));
    index = (index + 3);
  }
  return oct_string;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(bin_to_octal("1111")));
  console.log(_str(bin_to_octal("101010101010011")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

