// Generated by Mochi v0.10.59 on 2025-08-06 20:39:55 GMT+7

export interface SI_UNITS { yotta: number; zetta: number; exa: number; peta: number; tera: number; giga: number; mega: number; kilo: number; hecto: number; deca: number; deci: number; centi: number; milli: number; micro: number; nano: number; pico: number; femto: number; atto: number; zepto: number; yocto: number }
export interface BINARY_UNITS { yotta: number; zetta: number; exa: number; peta: number; tera: number; giga: number; mega: number; kilo: number }
let BINARY_UNITS: BINARY_UNITS = {"yotta": 8, "zetta": 7, "exa": 6, "peta": 5, "tera": 4, "giga": 3, "mega": 2, "kilo": 1};
function pow(base: number, exp: number): number {
  if ((exp == 0)) {
    return 1.0;
  }
  let e: number = exp;
  if ((e < 0)) {
    e = -e;
  }
  let result: number = 1.0;
  let i: number = 0;
  while ((i < e)) {
    result = (result * base);
    i = (i + 1);
  }
  if ((exp < 0)) {
    return (1.0 / result);
  }
  return result;
}
function convert_si_prefix(known_amount: number, known_prefix: string, unknown_prefix: string): number {
  let kp: string = known_prefix.toLowerCase();
  let up: string = unknown_prefix.toLowerCase();
  if (!(kp in SI_UNITS)) {
    panic(("unknown prefix: " + known_prefix));
  }
  if (!(up in SI_UNITS)) {
    panic(("unknown prefix: " + unknown_prefix));
  }
  let diff = (SI_UNITS[kp] - SI_UNITS[up]);
  return (known_amount * pow(10.0, diff));
}
function convert_binary_prefix(known_amount: number, known_prefix: string, unknown_prefix: string): number {
  let kp: string = known_prefix.toLowerCase();
  let up: string = unknown_prefix.toLowerCase();
  if (!(kp in BINARY_UNITS)) {
    panic(("unknown prefix: " + known_prefix));
  }
  if (!(up in BINARY_UNITS)) {
    panic(("unknown prefix: " + unknown_prefix));
  }
  let diff = ((BINARY_UNITS[kp] - BINARY_UNITS[up]) * 10);
  return (known_amount * pow(2.0, diff));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
let SI_UNITS: SI_UNITS
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
SI_UNITS = {"yotta": 24, "zetta": 21, "exa": 18, "peta": 15, "tera": 12, "giga": 9, "mega": 6, "kilo": 3, "hecto": 2, "deca": 1, "deci": -1, "centi": -2, "milli": -3, "micro": -6, "nano": -9, "pico": -12, "femto": -15, "atto": -18, "zepto": -21, "yocto": -24}
  console.log(_str(_str(convert_si_prefix(1.0, "giga", "mega"))));
  console.log(_str(_str(convert_si_prefix(1.0, "mega", "giga"))));
  console.log(_str(_str(convert_si_prefix(1.0, "kilo", "kilo"))));
  console.log(_str(_str(convert_binary_prefix(1.0, "giga", "mega"))));
  console.log(_str(_str(convert_binary_prefix(1.0, "mega", "giga"))));
  console.log(_str(_str(convert_binary_prefix(1.0, "kilo", "kilo"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

