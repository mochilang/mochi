// Generated by Mochi v0.10.59 on 2025-08-06 20:46:04 GMT+7

function panic(msg: string) {
  console.log(_str(msg));
}
function trim_spaces(s: string): string {
  let start: number = 0;
  let end: number = (_len(s) - 1);
  while (((start <= end) && ((s).substring(start, (start + 1)) == " "))) {
    start = (start + 1);
  }
  while (((end >= start) && ((s).substring(end, (end + 1)) == " "))) {
    end = (end - 1);
  }
  if ((start > end)) {
    return "";
  }
  return (s).substring(start, (end + 1));
}
function char_to_digit(ch: string): number {
  if ((ch == "0")) {
    return 0;
  }
  if ((ch == "1")) {
    return 1;
  }
  if ((ch == "2")) {
    return 2;
  }
  if ((ch == "3")) {
    return 3;
  }
  if ((ch == "4")) {
    return 4;
  }
  if ((ch == "5")) {
    return 5;
  }
  if ((ch == "6")) {
    return 6;
  }
  if ((ch == "7")) {
    return 7;
  }
  panic("Non-octal value was passed to the function");
  return 0;
}
function oct_to_decimal(oct_string: string): number {
  let s: string = trim_spaces(oct_string);
  if ((_len(s) == 0)) {
    panic("Empty string was passed to the function");
    return 0;
  }
  let is_negative: boolean = false;
  if (((s).substring(0, 1) == "-")) {
    is_negative = true;
    s = (s).substring(1, _len(s));
  }
  if ((_len(s) == 0)) {
    panic("Non-octal value was passed to the function");
    return 0;
  }
  let decimal_number: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    let digit: number = char_to_digit(ch);
    decimal_number = ((8 * decimal_number) + digit);
    i = (i + 1);
  }
  if (is_negative) {
    decimal_number = -decimal_number;
  }
  return decimal_number;
}
function main() {
  console.log(_str(_str(oct_to_decimal("1"))));
  console.log(_str(_str(oct_to_decimal("-1"))));
  console.log(_str(_str(oct_to_decimal("12"))));
  console.log(_str(_str(oct_to_decimal(" 12   "))));
  console.log(_str(_str(oct_to_decimal("-45"))));
  console.log(_str(_str(oct_to_decimal("0"))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

