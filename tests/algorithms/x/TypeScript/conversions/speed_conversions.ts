// Generated by Mochi v0.10.59 on 2025-08-06 20:40:07 GMT+7

let units: string[] = ["km/h", "m/s", "mph", "knot"];
let speed_chart: number[] = [1.0, 3.6, 1.609344, 1.852];
let speed_chart_inverse: number[] = [1.0, 0.277777778, 0.621371192, 0.539956803];
function index_of(arr: string[], value: string): number {
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((arr[i] == value)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function units_string(arr: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((i > 0)) {
      s = (s + ", ");
    }
    s = (s + arr[i]);
    i = (i + 1);
  }
  return s;
}
function round3(x: number): number {
  let y: number = ((x * 1000.0) + 0.5);
  let z: number = Math.trunc(y);
  let zf: number = z;
  return (zf / 1000.0);
}
function convert_speed(speed: number, unit_from: string, unit_to: string): number {
  let from_index: number = index_of(units, unit_from);
  let to_index: number = index_of(units, unit_to);
  if (((from_index < 0) || (to_index < 0))) {
    let msg: string = ((((("Incorrect 'from_type' or 'to_type' value: " + unit_from) + ", ") + unit_to) + "\nValid values are: ") + units_string(units));
    panic(msg);
  }
  let result: number = ((speed * speed_chart[from_index]) * speed_chart_inverse[to_index]);
  let r: number = round3(result);
  return r;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(convert_speed(100.0, "km/h", "m/s"))));
  console.log(_str(_str(convert_speed(100.0, "km/h", "mph"))));
  console.log(_str(_str(convert_speed(100.0, "km/h", "knot"))));
  console.log(_str(_str(convert_speed(100.0, "m/s", "km/h"))));
  console.log(_str(_str(convert_speed(100.0, "m/s", "mph"))));
  console.log(_str(_str(convert_speed(100.0, "m/s", "knot"))));
  console.log(_str(_str(convert_speed(100.0, "mph", "km/h"))));
  console.log(_str(_str(convert_speed(100.0, "mph", "m/s"))));
  console.log(_str(_str(convert_speed(100.0, "mph", "knot"))));
  console.log(_str(_str(convert_speed(100.0, "knot", "km/h"))));
  console.log(_str(_str(convert_speed(100.0, "knot", "m/s"))));
  console.log(_str(_str(convert_speed(100.0, "knot", "mph"))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

