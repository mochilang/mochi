// Generated by Mochi v0.10.59 on 2025-08-06 20:39:50 GMT+7

function octal_to_binary(octal_number: string): string {
  if ((_len(octal_number) == 0)) {
    panic("Empty string was passed to the function");
  }
  let octal_digits: string = "01234567";
  let binary_number: string = "";
  let i: number = 0;
  while ((i < _len(octal_number))) {
    let digit: string = octal_number[i];
    let valid: boolean = false;
    let j: number = 0;
    while ((j < _len(octal_digits))) {
      if ((digit == octal_digits[j])) {
        valid = true;
        break
      }
      j = (j + 1);
    }
    if (!valid) {
      panic("Non-octal value was passed to the function");
    }
    let value: number = Math.trunc(digit);
    let k: number = 0;
    let binary_digit: string = "";
    while ((k < 3)) {
      binary_digit = (_str((value % 2)) + binary_digit);
      value = Math.trunc(value / 2);
      k = (k + 1);
    }
    binary_number = (binary_number + binary_digit);
    i = (i + 1);
  }
  return binary_number;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(octal_to_binary("17")));
  console.log(_str(octal_to_binary("7")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

