// Generated by Mochi v0.10.59 on 2025-08-07 08:54:40 GMT+7

function to_bits(n: number, width: number): string {
  let res: string = "";
  let num: number = n;
  let w: number = width;
  while ((w > 0)) {
    res = (_str((num % 2)) + res);
    num = Math.trunc(num / 2);
    w = (w - 1);
  }
  return res;
}
function quantum_fourier_transform(number_of_qubits: number): Record<string, number> {
  if ((number_of_qubits <= 0)) {
    _panic("number of qubits must be > 0.");
  }
  if ((number_of_qubits > 10)) {
    _panic("number of qubits too large to simulate(>10).");
  }
  let shots: number = 10000;
  let states: number = 1;
  let p: number = 0;
  while ((p < number_of_qubits)) {
    states = (states * 2);
    p = (p + 1);
  }
  let per_state: number = Math.trunc(shots / states);
  let counts: Record<string, number> = {};
  let i: number = 0;
  while ((i < states)) {
    counts[(to_bits(i, number_of_qubits)) < 0 ? counts.length + (to_bits(i, number_of_qubits)) : to_bits(i, number_of_qubits)] = per_state;
    i = (i + 1);
  }
  return counts;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("Total count for quantum fourier transform state is: " + _str(quantum_fourier_transform(3)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

