// Generated by Mochi v0.10.59 on 2025-08-06 19:19:59 GMT+7

function row_string(row: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(row))) {
    s = (s + _str(row[i]));
    if ((i < (_len(row) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function print_kmap(kmap: number[][]) {
  let i: number = 0;
  while ((i < _len(kmap))) {
    console.log(_str(row_string(kmap[i])));
    i = (i + 1);
  }
}
function join_terms(terms: string[]): string {
  if ((_len(terms) == 0)) {
    return "";
  }
  let res: string = terms[Math.trunc(0)];
  let i: number = 1;
  while ((i < _len(terms))) {
    res = ((res + " + ") + terms[i]);
    i = (i + 1);
  }
  return res;
}
function simplify_kmap(board: number[][]): string {
  let terms: string[] = [];
  let a: number = 0;
  while ((a < _len(board))) {
    let row: number[] = board[a];
    let b: number = 0;
    while ((b < _len(row))) {
      let item: number = row[b];
      if ((item != 0)) {
        let term: string = (((a != 0) ? "A" : "A'") + ((b != 0) ? "B" : "B'"));
        terms.push(term);
      }
      b = (b + 1);
    }
    a = (a + 1);
  }
  let expr: string = join_terms(terms);
  return expr;
}
let kmap: number[][] = [[0, 1], [1, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  print_kmap(kmap);
  console.log(_str("Simplified Expression:"));
  console.log(_str(simplify_kmap(kmap)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

