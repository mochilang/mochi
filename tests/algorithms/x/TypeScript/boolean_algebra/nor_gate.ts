// Generated by Mochi v0.10.59 on 2025-08-06 19:20:04 GMT+7

function nor_gate(input_1: number, input_2: number): number {
  if (((input_1 == 0) && (input_2 == 0))) {
    return 1;
  }
  return 0;
}
function center(s: string, width: number): string {
  let total: number = (width - _len(s));
  if ((total <= 0)) {
    return s;
  }
  let left: number = Math.trunc(total / 2);
  let right: number = (total - left);
  let res: string = s;
  let i: number = 0;
  while ((i < left)) {
    res = (" " + res);
    i = (i + 1);
  }
  let j: number = 0;
  while ((j < right)) {
    res = (res + " ");
    j = (j + 1);
  }
  return res;
}
function make_table_row(i: number, j: number): string {
  let output: number = nor_gate(i, j);
  return (((((("| " + center(_str(i), 8)) + " | ") + center(_str(j), 8)) + " | ") + center(_str(output), 8)) + " |");
}
function truth_table(): string {
  return (((((((("Truth Table of NOR Gate:\n" + "| Input 1 | Input 2 | Output  |\n") + make_table_row(0, 0)) + "\n") + make_table_row(0, 1)) + "\n") + make_table_row(1, 0)) + "\n") + make_table_row(1, 1));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(nor_gate(0, 0)));
  console.log(_str(nor_gate(0, 1)));
  console.log(_str(nor_gate(1, 0)));
  console.log(_str(nor_gate(1, 1)));
  console.log(_str(truth_table()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

