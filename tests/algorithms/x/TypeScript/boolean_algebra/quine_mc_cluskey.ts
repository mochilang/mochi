// Generated by Mochi v0.10.59 on 2025-08-06 19:20:07 GMT+7

function compare_string(string1: string, string2: string): string {
  let result: string = "";
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(string1))) {
    let c1: string = (string1).substring(i, (i + 1));
    let c2: string = (string2).substring(i, (i + 1));
    if ((c1 != c2)) {
      count = (count + 1);
      result = (result + "_");
    } else {
      result = (result + c1);
    }
    i = (i + 1);
  }
  if ((count > 1)) {
    return "";
  }
  return result;
}
function contains_string(arr: string[], value: string): boolean {
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((arr[i] == value)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function unique_strings(arr: string[]): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(arr))) {
    if (!contains_string(res, arr[i])) {
      res.push(arr[i]);
    }
    i = (i + 1);
  }
  return res;
}
function check(binary: string[]): string[] {
  let pi: string[] = [];
  let current: string[] = binary;
  while (true) {
    let check1: string[] = [];
    let i: number = 0;
    while ((i < _len(current))) {
      check1.push("$");
      i = (i + 1);
    }
    let temp: string[] = [];
    i = 0;
    while ((i < _len(current))) {
      let j: number = (i + 1);
      while ((j < _len(current))) {
        let k: string = compare_string(current[i], current[j]);
        if ((k == "")) {
          check1[i] = "*";
          check1[j] = "*";
          temp.push("X");
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    i = 0;
    while ((i < _len(current))) {
      if ((check1[i] == "$")) {
        pi.push(current[i]);
      }
      i = (i + 1);
    }
    if ((_len(temp) == 0)) {
      return pi;
    }
    current = unique_strings(temp);
  }
}
function decimal_to_binary(no_of_variable: number, minterms: number[]): string[] {
  let temp: string[] = [];
  let idx: number = 0;
  while ((idx < _len(minterms))) {
    let minterm: number = minterms[idx];
    let _string: string = "";
    let i: number = 0;
    while ((i < no_of_variable)) {
      _string = (_str((minterm % 2)) + _string);
      minterm = Math.trunc(minterm / 2);
      i = (i + 1);
    }
    temp.push(_string);
    idx = (idx + 1);
  }
  return temp;
}
function is_for_table(string1: string, string2: string, count: number): boolean {
  let count_n: number = 0;
  let i: number = 0;
  while ((i < _len(string1))) {
    let c1: string = (string1).substring(i, (i + 1));
    let c2: string = (string2).substring(i, (i + 1));
    if ((c1 != c2)) {
      count_n = (count_n + 1);
    }
    i = (i + 1);
  }
  return (count_n == count);
}
function count_ones(row: number[]): number {
  let c: number = 0;
  let j: number = 0;
  while ((j < _len(row))) {
    if ((row[j] == 1)) {
      c = (c + 1);
    }
    j = (j + 1);
  }
  return c;
}
function selection(chart: number[][], prime_implicants: string[]): string[] {
  let temp: string[] = [];
  let select: number[] = [];
  let i: number = 0;
  while ((i < _len(chart))) {
    select.push(0);
    i = (i + 1);
  }
  let col: number = 0;
  while ((col < _len(chart[Math.trunc(0)]))) {
    let count: number = 0;
    let row: number = 0;
    while ((row < _len(chart))) {
      if ((chart[row][col] == 1)) {
        count = (count + 1);
      }
      row = (row + 1);
    }
    if ((count == 1)) {
      let rem: number = 0;
      row = 0;
      while ((row < _len(chart))) {
        if ((chart[row][col] == 1)) {
          rem = row;
        }
        row = (row + 1);
      }
      select[rem] = 1;
    }
    col = (col + 1);
  }
  i = 0;
  while ((i < _len(select))) {
    if ((select[i] == 1)) {
      let j: number = 0;
      while ((j < _len(chart[Math.trunc(0)]))) {
        if ((chart[i][j] == 1)) {
          let r: number = 0;
          while ((r < _len(chart))) {
            chart[r][j] = 0;
            r = (r + 1);
          }
        }
        j = (j + 1);
      }
      temp.push(prime_implicants[i]);
    }
    i = (i + 1);
  }
  while (true) {
    let counts: number[] = [];
    let r: number = 0;
    while ((r < _len(chart))) {
      counts.push(count_ones(chart[r]));
      r = (r + 1);
    }
    let max_n: number = counts[Math.trunc(0)];
    let rem: number = 0;
    let k: number = 1;
    while ((k < _len(counts))) {
      if ((counts[k] > max_n)) {
        max_n = counts[k];
        rem = k;
      }
      k = (k + 1);
    }
    if ((max_n == 0)) {
      return temp;
    }
    temp.push(prime_implicants[rem]);
    let j: number = 0;
    while ((j < _len(chart[Math.trunc(0)]))) {
      if ((chart[rem][j] == 1)) {
        let r2: number = 0;
        while ((r2 < _len(chart))) {
          chart[r2][j] = 0;
          r2 = (r2 + 1);
        }
      }
      j = (j + 1);
    }
  }
}
function count_char(s: string, ch: string): number {
  let cnt: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      cnt = (cnt + 1);
    }
    i = (i + 1);
  }
  return cnt;
}
function prime_implicant_chart(prime_implicants: string[], binary: string[]): number[][] {
  let chart: number[][] = [];
  let i: number = 0;
  while ((i < _len(prime_implicants))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(binary))) {
      row.push(0);
      j = (j + 1);
    }
    chart.push(row);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(prime_implicants))) {
    let count = count_char(prime_implicants[i], "_");
    let j: number = 0;
    while ((j < _len(binary))) {
      if (is_for_table(prime_implicants[i], binary[j], count)) {
        chart[i][j] = 1;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return chart;
}
function main() {
  let no_of_variable: number = 3;
  let minterms: number[] = [1, 5, 7];
  let binary: string[] = decimal_to_binary(no_of_variable, minterms);
  let prime_implicants: string[] = check(binary);
  console.log(_str("Prime Implicants are:"));
  console.log(_str(_str(prime_implicants)));
  let chart: number[][] = prime_implicant_chart(prime_implicants, binary);
  let essential_prime_implicants: string[] = selection(chart, prime_implicants);
  console.log(_str("Essential Prime Implicants are:"));
  console.log(_str(_str(essential_prime_implicants)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

