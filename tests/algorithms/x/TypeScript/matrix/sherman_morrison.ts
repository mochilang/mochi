// Generated by Mochi v0.10.64 on 2025-08-12 09:23:15 GMT+7

export interface Matrix { data: number[][]; rows: number; cols: number }
function make_matrix(rows: number, cols: number, value: number): Matrix {
  let arr: number[][] = [];
  let r: number = 0;
  while ((r < rows)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < cols)) {
      row.push(value);
      c = (c + 1);
    }
    arr.push(row);
    r = (r + 1);
  }
  return {"data": arr, rows, cols};
}
function matrix_from_lists(vals: number[][]): Matrix {
  let r: number = _len(vals);
  let c: number = ((r == 0) ? 0 : _len(vals[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? vals.length + _mochi_idx : _mochi_idx;})()]));
  return {"data": vals, "rows": r, "cols": c};
}
function matrix_to_string(m: Matrix): string {
  let s: string = "";
  let i: number = 0;
  while ((i < m.rows)) {
    s = (s + "[");
    let j: number = 0;
    while ((j < m.cols)) {
      s = (s + _str(m.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      if ((j < (m.cols - 1))) {
        s = (s + ", ");
      }
      j = (j + 1);
    }
    s = (s + "]");
    if ((i < (m.rows - 1))) {
      s = (s + "\n");
    }
    i = (i + 1);
  }
  return s;
}
function matrix_add(a: Matrix, b: Matrix): Matrix {
  if (((a.rows != b.rows) || (a.cols != b.cols))) {
    return {"data": [], "rows": 0, "cols": 0};
  }
  let res: number[][] = [];
  let i: number = 0;
  while ((i < a.rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < a.cols)) {
      row.push((a.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + b.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return {"data": res, "rows": a.rows, "cols": a.cols};
}
function matrix_sub(a: Matrix, b: Matrix): Matrix {
  if (((a.rows != b.rows) || (a.cols != b.cols))) {
    return {"data": [], "rows": 0, "cols": 0};
  }
  let res: number[][] = [];
  let i: number = 0;
  while ((i < a.rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < a.cols)) {
      row.push((a.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? a.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - b.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return {"data": res, "rows": a.rows, "cols": a.cols};
}
function matrix_mul_scalar(m: Matrix, k: number): Matrix {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < m.rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < m.cols)) {
      row.push((m.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * k));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return {"data": res, "rows": m.rows, "cols": m.cols};
}
function matrix_mul(a: Matrix, b: Matrix): Matrix {
  if ((a.cols != b.rows)) {
    return {"data": [], "rows": 0, "cols": 0};
  }
  let res: number[][] = [];
  let i: number = 0;
  while ((i < a.rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < b.cols)) {
      let sum: number = 0.0;
      let k: number = 0;
      while ((k < a.cols)) {
        sum = (sum + (a.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a.data[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b.data[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b.data[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return {"data": res, "rows": a.rows, "cols": b.cols};
}
function matrix_transpose(m: Matrix): Matrix {
  let res: number[][] = [];
  let c: number = 0;
  while ((c < m.cols)) {
    let row: number[] = [];
    let r: number = 0;
    while ((r < m.rows)) {
      row.push(m.data[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? m.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? m.data[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? m.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      r = (r + 1);
    }
    res.push(row);
    c = (c + 1);
  }
  return {"data": res, "rows": m.cols, "cols": m.rows};
}
function sherman_morrison(ainv: Matrix, u: Matrix, v: Matrix): Matrix {
  let vt: Matrix = matrix_transpose(v);
  let vu: Matrix = matrix_mul(matrix_mul(vt, ainv), u);
  let factor: number = (vu.data[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? vu.data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? vu.data[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? vu.data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + 1.0);
  if ((factor == 0.0)) {
    return {"data": [], "rows": 0, "cols": 0};
  }
  let term1: Matrix = matrix_mul(ainv, u);
  let term2: Matrix = matrix_mul(vt, ainv);
  let numerator: Matrix = matrix_mul(term1, term2);
  let scaled: Matrix = matrix_mul_scalar(numerator, (1.0 / factor));
  return matrix_sub(ainv, scaled);
}
function main() {
  let ainv: Matrix = matrix_from_lists([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]);
  let u: Matrix = matrix_from_lists([[1.0], [2.0], [-3.0]]);
  let v: Matrix = matrix_from_lists([[4.0], [-2.0], [5.0]]);
  let result: Matrix = sherman_morrison(ainv, u, v);
  console.log(_str(matrix_to_string(result)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

