// Generated by Mochi v0.10.64 on 2025-08-12 09:23:09 GMT+7

function encode(row: number, col: number): string {
  return ((_str(row) + ",") + _str(col));
}
function is_safe(row: number, col: number, rows: number, cols: number): boolean {
  return ((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols));
}
function has(seen: Record<string, boolean>, key: string): boolean {
  return (key in seen);
}
function depth_first_search(row: number, col: number, seen: Record<string, boolean>, mat: number[][]): number {
  let rows: number = _len(mat);
  let cols: number = _len(mat[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]);
  let key: string = encode(row, col);
  if (((is_safe(row, col, rows, cols) && !has(seen, key)) && (mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1))) {
    seen[(()=>{const _mochi_idx = key; return _mochi_idx < 0 ? seen.length + _mochi_idx : _mochi_idx;})()] = true;
    return ((((1 + depth_first_search((row + 1), col, seen, mat)) + depth_first_search((row - 1), col, seen, mat)) + depth_first_search(row, (col + 1), seen, mat)) + depth_first_search(row, (col - 1), seen, mat));
  } else {
    return 0;
  }
}
function find_max_area(mat: number[][]): number {
  let seen: Record<string, boolean> = {};
  let rows: number = _len(mat);
  let max_area: number = 0;
  let r: number = 0;
  while ((r < rows)) {
    let line: number[] = mat[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()];
    let cols: number = _len(line);
    let c: number = 0;
    while ((c < cols)) {
      if ((line[(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? line.length + _mochi_idx : _mochi_idx;})()] == 1)) {
        let key: string = encode(r, c);
        if (!(key in seen)) {
          let area: number = depth_first_search(r, c, seen, mat);
          if ((area > max_area)) {
            max_area = area;
          }
        }
      }
      c = (c + 1);
    }
    r = (r + 1);
  }
  return max_area;
}
let matrix: number[][] = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(find_max_area(matrix)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

