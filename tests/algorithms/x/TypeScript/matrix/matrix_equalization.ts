// Generated by Mochi v0.10.59 on 2025-08-07 08:17:01 GMT+7

function unique(nums: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(nums))) {
    let v: number = nums[(i) < 0 ? nums.length + (i) : i];
    let found: boolean = false;
    let j: number = 0;
    while ((j < _len(res))) {
      if ((res[(j) < 0 ? res.length + (j) : j] == v)) {
        found = true;
        break
      }
      j = (j + 1);
    }
    if (!found) {
      res.push(v);
    }
    i = (i + 1);
  }
  return res;
}
function array_equalization(vector: number[], step_size: number): number {
  if ((step_size <= 0)) {
    error("Step size must be positive and non-zero.");
  }
  let elems: number[] = unique(vector);
  let min_updates: number = _len(vector);
  let i: number = 0;
  while ((i < _len(elems))) {
    let target: number = elems[(i) < 0 ? elems.length + (i) : i];
    let idx: number = 0;
    let updates: number = 0;
    while ((idx < _len(vector))) {
      if ((vector[(idx) < 0 ? vector.length + (idx) : idx] != target)) {
        updates = (updates + 1);
        idx = (idx + step_size);
      } else {
        idx = (idx + 1);
      }
    }
    if ((updates < min_updates)) {
      min_updates = updates;
    }
    i = (i + 1);
  }
  return min_updates;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4))));
  console.log(_str(_str(array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2))));
  console.log(_str(_str(array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5))));
  console.log(_str(_str(array_equalization([22, 22, 22, 33, 33, 33], 2))));
  console.log(_str(_str(array_equalization([1, 2, 3], 2147483647))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

