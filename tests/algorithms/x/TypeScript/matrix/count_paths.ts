// Generated by Mochi v0.10.59 on 2025-08-07 00:24:53 GMT+7

function depth_first_search(grid: number[][], row: number, col: number, visit: boolean[][]): number {
  let row_length: number = _len(grid);
  let col_length: number = _len(grid[(Math.trunc(0)) < 0 ? grid.length + (Math.trunc(0)) : Math.trunc(0)]);
  if (((((row < 0) || (col < 0)) || (row == row_length)) || (col == col_length))) {
    return 0;
  }
  if (visit[(row) < 0 ? visit.length + (row) : row][(col) < 0 ? visit[(row) < 0 ? visit.length + (row) : row].length + (col) : col]) {
    return 0;
  }
  if ((grid[(row) < 0 ? grid.length + (row) : row][(col) < 0 ? grid[(row) < 0 ? grid.length + (row) : row].length + (col) : col] == 1)) {
    return 0;
  }
  if (((row == (row_length - 1)) && (col == (col_length - 1)))) {
    return 1;
  }
  visit[(row) < 0 ? visit.length + (row) : row][(col) < 0 ? visit[(row) < 0 ? visit.length + (row) : row].length + (col) : col] = true;
  let count: number = 0;
  count = (count + depth_first_search(grid, (row + 1), col, visit));
  count = (count + depth_first_search(grid, (row - 1), col, visit));
  count = (count + depth_first_search(grid, row, (col + 1), visit));
  count = (count + depth_first_search(grid, row, (col - 1), visit));
  visit[(row) < 0 ? visit.length + (row) : row][(col) < 0 ? visit[(row) < 0 ? visit.length + (row) : row].length + (col) : col] = false;
  return count;
}
function count_paths(grid: number[][]): number {
  let rows: number = _len(grid);
  let cols: number = _len(grid[(Math.trunc(0)) < 0 ? grid.length + (Math.trunc(0)) : Math.trunc(0)]);
  let visit: boolean[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row_visit: boolean[] = [];
    let j: number = 0;
    while ((j < cols)) {
      row_visit.push(false);
      j = (j + 1);
    }
    visit.push(row_visit);
    i = (i + 1);
  }
  return depth_first_search(grid, 0, 0, visit);
}
function main() {
  let grid1: number[][] = [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]];
  console.log(_str(_str(count_paths(grid1))));
  let grid2: number[][] = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]];
  console.log(_str(_str(count_paths(grid2))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

