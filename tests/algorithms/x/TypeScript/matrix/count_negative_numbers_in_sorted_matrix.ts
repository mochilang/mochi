// Generated by Mochi v0.10.64 on 2025-08-12 14:00:25 GMT+7

function generate_large_matrix(): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < 1000)) {
    let row: number[] = [];
    let j: number = (1000 - i);
    while ((j > (-1000 - i))) {
      row.push(j);
      j = (j - 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function find_negative_index(arr: number[]): number {
  let left: number = 0;
  let right: number = (_len(arr) - 1);
  if ((_len(arr) === 0)) {
    return 0;
  }
  if ((arr[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < 0)) {
    return 0;
  }
  while ((left <= right)) {
    let mid: number = Math.trunc((left + right) / 2);
    let num = arr[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    if ((num < 0)) {
      if ((mid === 0)) {
        return 0;
      }
      if ((arr[(()=>{const _mochi_idx = Math.trunc((mid - 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] >= 0)) {
        return mid;
      }
      right = (mid - 1);
    } else {
      left = (mid + 1);
    }
  }
  return _len(arr);
}
function count_negatives_binary_search(grid: number[][]): number {
  let total: number = 0;
  let bound: number = _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]);
  let i: number = 0;
  while ((i < _len(grid))) {
    let row: number[] = grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()];
    let idx = find_negative_index(row.slice(0, bound));
    bound = idx;
    total = (total + idx);
    i = (i + 1);
  }
  return ((_len(grid) * _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()])) - total);
}
function count_negatives_brute_force(grid: number[][]): number {
  let count: number = 0;
  let i: number = 0;
  while ((i < _len(grid))) {
    let row: number[] = grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()];
    let j: number = 0;
    while ((j < _len(row))) {
      if ((row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()] < 0)) {
        count = (count + 1);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return count;
}
function count_negatives_brute_force_with_break(grid: number[][]): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(grid))) {
    let row: number[] = grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()];
    let j: number = 0;
    while ((j < _len(row))) {
      let _number: number = row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()];
      if ((_number < 0)) {
        total = (total + (_len(row) - j));
        break
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return total;
}
let results_bin: number[] = [];
let i: number = 0;
let results_brute: number[] = [];
let results_break: number[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let grid: number[][]
let test_grids: number[][][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
grid = generate_large_matrix()
test_grids = [[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]], [[7, 7, 6]], [[7, 7, 6], [-1, -2, -3]], grid]
  while ((i < _len(test_grids))) {
    results_bin.push(count_negatives_binary_search(test_grids[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? test_grids.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  console.log(_str(results_bin));
  i = 0;
  while ((i < _len(test_grids))) {
    results_brute.push(count_negatives_brute_force(test_grids[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? test_grids.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  console.log(_str(results_brute));
  i = 0;
  while ((i < _len(test_grids))) {
    results_break.push(count_negatives_brute_force_with_break(test_grids[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? test_grids.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  console.log(_str(results_break));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

