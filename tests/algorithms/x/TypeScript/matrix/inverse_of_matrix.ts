// Generated by Mochi v0.10.59 on 2025-08-07 00:24:55 GMT+7

function inverse_of_matrix(matrix: number[][]): number[][] {
  if ((((_len(matrix) == 2) && (_len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]) == 2)) && (_len(matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)]) == 2))) {
    let det: number = ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)]) - (matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)]));
    if ((det == 0.0)) {
      console.log(_str("This matrix has no inverse."));
      return [];
    }
    return [[(matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)] / det), (-matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] / det)], [(-matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)] / det), (matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] / det)]];
  } else {
    if (((((_len(matrix) == 3) && (_len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]) == 3)) && (_len(matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)]) == 3)) && (_len(matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)]) == 3))) {
      let det: number = (((((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)]) * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(2)) : Math.trunc(2)]) + ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(2)) : Math.trunc(2)]) * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)])) + ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)]) * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)])) - ((((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)]) * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)]) + ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)]) * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(2)) : Math.trunc(2)])) + ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(2)) : Math.trunc(2)]) * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)])));
      if ((det == 0.0)) {
        console.log(_str("This matrix has no inverse."));
        return [];
      }
      let cof: number[][] = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
      cof[(0) < 0 ? cof.length + (0) : 0][(0) < 0 ? cof[(0) < 0 ? cof.length + (0) : 0].length + (0) : 0] = ((matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(2)) : Math.trunc(2)]) - (matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)]));
      cof[(0) < 0 ? cof.length + (0) : 0][(1) < 0 ? cof[(0) < 0 ? cof.length + (0) : 0].length + (1) : 1] = -((matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(2)) : Math.trunc(2)]) - (matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)]));
      cof[(0) < 0 ? cof.length + (0) : 0][(2) < 0 ? cof[(0) < 0 ? cof.length + (0) : 0].length + (2) : 2] = ((matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)]) - (matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)]));
      cof[(1) < 0 ? cof.length + (1) : 1][(0) < 0 ? cof[(1) < 0 ? cof.length + (1) : 1].length + (0) : 0] = -((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(2)) : Math.trunc(2)]) - (matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)]));
      cof[(1) < 0 ? cof.length + (1) : 1][(1) < 0 ? cof[(1) < 0 ? cof.length + (1) : 1].length + (1) : 1] = ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(2)) : Math.trunc(2)]) - (matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)]));
      cof[(1) < 0 ? cof.length + (1) : 1][(2) < 0 ? cof[(1) < 0 ? cof.length + (1) : 1].length + (2) : 2] = -((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(1)) : Math.trunc(1)]) - (matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(2)) < 0 ? matrix.length + (Math.trunc(2)) : Math.trunc(2)].length + (Math.trunc(0)) : Math.trunc(0)]));
      cof[(2) < 0 ? cof.length + (2) : 2][(0) < 0 ? cof[(2) < 0 ? cof.length + (2) : 2].length + (0) : 0] = ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(2)) : Math.trunc(2)]) - (matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)]));
      cof[(2) < 0 ? cof.length + (2) : 2][(1) < 0 ? cof[(2) < 0 ? cof.length + (2) : 2].length + (1) : 1] = -((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(2)) : Math.trunc(2)]) - (matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(2)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(2)) : Math.trunc(2)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)]));
      cof[(2) < 0 ? cof.length + (2) : 2][(2) < 0 ? cof[(2) < 0 ? cof.length + (2) : 2].length + (2) : 2] = ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(1)) : Math.trunc(1)]) - (matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(1)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(1)) : Math.trunc(1)] * matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(1)) < 0 ? matrix.length + (Math.trunc(1)) : Math.trunc(1)].length + (Math.trunc(0)) : Math.trunc(0)]));
      let inv: number[][] = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
      let i: number = 0;
      while ((i < 3)) {
        let j: number = 0;
        while ((j < 3)) {
          inv[(i) < 0 ? inv.length + (i) : i][(j) < 0 ? inv[(i) < 0 ? inv.length + (i) : i].length + (j) : j] = (cof[(j) < 0 ? cof.length + (j) : j][(i) < 0 ? cof[(j) < 0 ? cof.length + (j) : j].length + (i) : i] / det);
          j = (j + 1);
        }
        i = (i + 1);
      }
      return inv;
    }
  }
  console.log(_str("Please provide a matrix of size 2x2 or 3x3."));
  return [];
}
let m2: number[][] = [[2.0, 5.0], [2.0, 0.0]];
let m3: number[][] = [[2.0, 5.0, 7.0], [2.0, 0.0, 1.0], [1.0, 2.0, 3.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("[" + (inverse_of_matrix(m2)).join(' ') + "]"));
  console.log(_str("[" + (inverse_of_matrix(m3)).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

