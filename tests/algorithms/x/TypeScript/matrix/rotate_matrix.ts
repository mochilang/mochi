// Generated by Mochi v0.10.64 on 2025-08-12 09:23:13 GMT+7

function abs_int(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function make_matrix(row_size: number): number[][] {
  let size: number = abs_int(row_size);
  if ((size == 0)) {
    size = 4;
  }
  let mat: number[][] = [];
  let y: number = 0;
  while ((y < size)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < size)) {
      row.push(((1 + x) + (y * size)));
      x = (x + 1);
    }
    mat.push(row);
    y = (y + 1);
  }
  return mat;
}
function transpose(mat: number[][]): number[][] {
  let n: number = _len(mat);
  let result: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row.push(mat[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function reverse_row(mat: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = (_len(mat) - 1);
  while ((i >= 0)) {
    result.push(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]);
    i = (i - 1);
  }
  return result;
}
function reverse_column(mat: number[][]): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(mat))) {
    let row: number[] = [];
    let j: number = (_len(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]) - 1);
    while ((j >= 0)) {
      row.push(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j - 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function rotate_90(mat: number[][]): number[][] {
  let t: number[][] = transpose(mat);
  let rr: number[][] = reverse_row(t);
  return rr;
}
function rotate_180(mat: number[][]): number[][] {
  let rc: number[][] = reverse_column(mat);
  let rr: number[][] = reverse_row(rc);
  return rr;
}
function rotate_270(mat: number[][]): number[][] {
  let t: number[][] = transpose(mat);
  let rc: number[][] = reverse_column(t);
  return rc;
}
function row_to_string(row: number[]): string {
  let line: string = "";
  let i: number = 0;
  while ((i < _len(row))) {
    if ((i == 0)) {
      line = _str(row[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()]);
    } else {
      line = ((line + " ") + _str(row[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()]));
    }
    i = (i + 1);
  }
  return line;
}
function print_matrix(mat: number[][]) {
  let i: number = 0;
  while ((i < _len(mat))) {
    console.log(_str(row_to_string(mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()])));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let mat: number[][]
let r90: number[][]
let r180: number[][]
let r270: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
mat = make_matrix(4)
  console.log(_str("\norigin:\n"));
  print_matrix(mat);
  console.log(_str("\nrotate 90 counterclockwise:\n"));
r90 = rotate_90(mat)
  print_matrix(r90);
  mat = make_matrix(4);
  console.log(_str("\norigin:\n"));
  print_matrix(mat);
  console.log(_str("\nrotate 180:\n"));
r180 = rotate_180(mat)
  print_matrix(r180);
  mat = make_matrix(4);
  console.log(_str("\norigin:\n"));
  print_matrix(mat);
  console.log(_str("\nrotate 270 counterclockwise:\n"));
r270 = rotate_270(mat)
  print_matrix(r270);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

