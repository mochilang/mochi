// Generated by Mochi v0.10.59 on 2025-08-07 08:17:08 GMT+7

function populate_current_row(triangle: number[][], current_row_idx: number): number[] {
  let row: number[] = [];
  let i: number = 0;
  while ((i <= current_row_idx)) {
    if (((i == 0) || (i == current_row_idx))) {
      row.push(1);
    } else {
      let left: number = triangle[(Math.trunc((current_row_idx - 1))) < 0 ? triangle.length + (Math.trunc((current_row_idx - 1))) : Math.trunc((current_row_idx - 1))][(Math.trunc((i - 1))) < 0 ? triangle[(Math.trunc((current_row_idx - 1))) < 0 ? triangle.length + (Math.trunc((current_row_idx - 1))) : Math.trunc((current_row_idx - 1))].length + (Math.trunc((i - 1))) : Math.trunc((i - 1))];
      let right: number = triangle[(Math.trunc((current_row_idx - 1))) < 0 ? triangle.length + (Math.trunc((current_row_idx - 1))) : Math.trunc((current_row_idx - 1))][(i) < 0 ? triangle[(Math.trunc((current_row_idx - 1))) < 0 ? triangle.length + (Math.trunc((current_row_idx - 1))) : Math.trunc((current_row_idx - 1))].length + (i) : i];
      row.push((left + right));
    }
    i = (i + 1);
  }
  return row;
}
function generate_pascal_triangle(num_rows: number): number[][] {
  if ((num_rows <= 0)) {
    return [];
  }
  let triangle: number[][] = [];
  let row_idx: number = 0;
  while ((row_idx < num_rows)) {
    let row: number[] = populate_current_row(triangle, row_idx);
    triangle.push(row);
    row_idx = (row_idx + 1);
  }
  return triangle;
}
function row_to_string(row: number[], total_rows: number, row_idx: number): string {
  let line: string = "";
  let spaces: number = ((total_rows - row_idx) - 1);
  let s: number = 0;
  while ((s < spaces)) {
    line = (line + " ");
    s = (s + 1);
  }
  let c: number = 0;
  while ((c <= row_idx)) {
    line = (line + _str(row[(c) < 0 ? row.length + (c) : c]));
    if ((c != row_idx)) {
      line = (line + " ");
    }
    c = (c + 1);
  }
  return line;
}
function print_pascal_triangle(num_rows: number) {
  let triangle: number[][] = generate_pascal_triangle(num_rows);
  let r: number = 0;
  while ((r < num_rows)) {
    let line: string = row_to_string(triangle[(r) < 0 ? triangle.length + (r) : r], num_rows, r);
    console.log(_str(line));
    r = (r + 1);
  }
}
function main() {
  print_pascal_triangle(5);
  console.log(_str(_str(generate_pascal_triangle(5))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

