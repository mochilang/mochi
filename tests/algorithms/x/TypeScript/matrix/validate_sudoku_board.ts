// Generated by Mochi v0.10.59 on 2025-08-07 08:17:14 GMT+7

let NUM_SQUARES: number = 9;
let EMPTY_CELL: string = ".";
function is_valid_sudoku_board(board: string[][]): boolean {
  if ((_len(board) != NUM_SQUARES)) {
    return false;
  }
  let i: number = 0;
  while ((i < NUM_SQUARES)) {
    if ((_len(board[(i) < 0 ? board.length + (i) : i]) != NUM_SQUARES)) {
      return false;
    }
    i = (i + 1);
  }
  let rows: string[][] = [];
  let cols: string[][] = [];
  let boxes: string[][] = [];
  i = 0;
  while ((i < NUM_SQUARES)) {
    rows.push([]);
    cols.push([]);
    boxes.push([]);
    i = (i + 1);
  }
  for (let r = 0; r < NUM_SQUARES; r++) {
    for (let c = 0; c < NUM_SQUARES; c++) {
      let value: string = board[(r) < 0 ? board.length + (r) : r][(c) < 0 ? board[(r) < 0 ? board.length + (r) : r].length + (c) : c];
      if ((value == EMPTY_CELL)) {
        continue
      }
      let box: number = ((Math.trunc(Math.trunc(r / 3)) * 3) + Math.trunc(Math.trunc(c / 3)));
      if (((rows[(r) < 0 ? rows.length + (r) : r].includes(value) || cols[(c) < 0 ? cols.length + (c) : c].includes(value)) || boxes[(box) < 0 ? boxes.length + (box) : box].includes(value))) {
        return false;
      }
      rows[(r) < 0 ? rows.length + (r) : r] = [...rows[(r) < 0 ? rows.length + (r) : r], value];
      cols[(c) < 0 ? cols.length + (c) : c] = [...cols[(c) < 0 ? cols.length + (c) : c], value];
      boxes[(box) < 0 ? boxes.length + (box) : box] = [...boxes[(box) < 0 ? boxes.length + (box) : box], value];
    }
  }
  return true;
}
let valid_board: string[][] = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]];
let invalid_board: string[][] = [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(is_valid_sudoku_board(valid_board)));
  console.log(_str(is_valid_sudoku_board(invalid_board)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

