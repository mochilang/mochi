// Generated by Mochi v0.10.64 on 2025-08-12 14:00:42 GMT+7

function is_valid_matrix(matrix: number[][]): boolean {
  if ((_len(matrix) === 0)) {
    return false;
  }
  let cols: number = _len(matrix[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()]);
  for (const row of matrix) {
    if ((_len(row) !== cols)) {
      return false;
    }
  }
  return true;
}
function spiral_traversal(matrix: number[][]): number[] {
  if (!is_valid_matrix(matrix)) {
    return [];
  }
  let rows: number = _len(matrix);
  let cols: number = _len(matrix[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()]);
  let top: number = 0;
  let bottom: number = (rows - 1);
  let left: number = 0;
  let right: number = (cols - 1);
  let result: number[] = [];
  while (((left <= right) && (top <= bottom))) {
    let i: number = left;
    while ((i <= right)) {
      result.push(matrix[(()=>{const _mochi_idx = top; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = top; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      i = (i + 1);
    }
    top = (top + 1);
    i = top;
    while ((i <= bottom)) {
      result.push(matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      i = (i + 1);
    }
    right = (right - 1);
    if ((top <= bottom)) {
      i = right;
      while ((i >= left)) {
        result.push(matrix[(()=>{const _mochi_idx = bottom; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = bottom; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        i = (i - 1);
      }
      bottom = (bottom - 1);
    }
    if ((left <= right)) {
      i = bottom;
      while ((i >= top)) {
        result.push(matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        i = (i - 1);
      }
      left = (left + 1);
    }
  }
  return result;
}
function spiral_print_clockwise(matrix: number[][]) {
  for (const value of spiral_traversal(matrix)) {
    console.log(_str(value));
  }
}
function main() {
  let a: number[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];
  spiral_print_clockwise(a);
  console.log(_str(spiral_traversal(a)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

