// Generated by Mochi v0.10.64 on 2025-08-12 09:23:04 GMT+7

function update_area_of_max_square(row: number, col: number, rows: number, cols: number, mat: number[][], largest_square_area: number[]): number {
  if (((row >= rows) || (col >= cols))) {
    return 0;
  }
  let right: number = update_area_of_max_square(row, (col + 1), rows, cols, mat, largest_square_area);
  let diagonal: number = update_area_of_max_square((row + 1), (col + 1), rows, cols, mat, largest_square_area);
  let down: number = update_area_of_max_square((row + 1), col, rows, cols, mat, largest_square_area);
  if ((mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1)) {
    let sub = (1 + (() => { const _arr = [right, diagonal, down]; return _arr.length === 0 ? 0 : Math.min(..._arr); })());
    if ((sub > largest_square_area[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? largest_square_area.length + _mochi_idx : _mochi_idx;})()])) {
      largest_square_area[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? largest_square_area.length + _mochi_idx : _mochi_idx;})()] = sub;
    }
    return sub;
  } else {
    return 0;
  }
}
function largest_square_area_in_matrix_top_down(rows: number, cols: number, mat: number[][]): number {
  let largest: number[] = [0];
  update_area_of_max_square(0, 0, rows, cols, mat, largest);
  return largest[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? largest.length + _mochi_idx : _mochi_idx;})()];
}
function update_area_of_max_square_with_dp(row: number, col: number, rows: number, cols: number, mat: number[][], dp_array: number[][], largest_square_area: number[]): number {
  if (((row >= rows) || (col >= cols))) {
    return 0;
  }
  if ((dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] != -1)) {
    return dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  }
  let right: number = update_area_of_max_square_with_dp(row, (col + 1), rows, cols, mat, dp_array, largest_square_area);
  let diagonal: number = update_area_of_max_square_with_dp((row + 1), (col + 1), rows, cols, mat, dp_array, largest_square_area);
  let down: number = update_area_of_max_square_with_dp((row + 1), col, rows, cols, mat, dp_array, largest_square_area);
  if ((mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1)) {
    let sub = (1 + (() => { const _arr = [right, diagonal, down]; return _arr.length === 0 ? 0 : Math.min(..._arr); })());
    if ((sub > largest_square_area[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? largest_square_area.length + _mochi_idx : _mochi_idx;})()])) {
      largest_square_area[(()=>{const _mochi_idx = 0; return _mochi_idx < 0 ? largest_square_area.length + _mochi_idx : _mochi_idx;})()] = sub;
    }
    dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = sub;
    return sub;
  } else {
    dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
    return 0;
  }
}
function largest_square_area_in_matrix_top_down_with_dp(rows: number, cols: number, mat: number[][]): number {
  let largest: number[] = [0];
  let dp_array: number[][] = [];
  let r: number = 0;
  while ((r < rows)) {
    let row_list: number[] = [];
    let c: number = 0;
    while ((c < cols)) {
      row_list.push(-1);
      c = (c + 1);
    }
    dp_array.push(row_list);
    r = (r + 1);
  }
  update_area_of_max_square_with_dp(0, 0, rows, cols, mat, dp_array, largest);
  return largest[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? largest.length + _mochi_idx : _mochi_idx;})()];
}
function largest_square_area_in_matrix_bottom_up(rows: number, cols: number, mat: number[][]): number {
  let dp_array: number[][] = [];
  let r: number = 0;
  while ((r <= rows)) {
    let row_list: number[] = [];
    let c: number = 0;
    while ((c <= cols)) {
      row_list.push(0);
      c = (c + 1);
    }
    dp_array.push(row_list);
    r = (r + 1);
  }
  let largest: number = 0;
  let row: number = (rows - 1);
  while ((row >= 0)) {
    let col: number = (cols - 1);
    while ((col >= 0)) {
      let right: number = dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((col + 1)); return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let diagonal: number = dp_array[(()=>{const _mochi_idx = Math.trunc((row + 1)); return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((col + 1)); return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = Math.trunc((row + 1)); return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      let bottom: number = dp_array[(()=>{const _mochi_idx = Math.trunc((row + 1)); return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = Math.trunc((row + 1)); return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
      if ((mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1)) {
        let value = (1 + (() => { const _arr = [right, diagonal, bottom]; return _arr.length === 0 ? 0 : Math.min(..._arr); })());
        dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = value;
        if ((value > largest)) {
          largest = value;
        }
      } else {
        dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? dp_array[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? dp_array.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = 0;
      }
      col = (col - 1);
    }
    row = (row - 1);
  }
  return largest;
}
function largest_square_area_in_matrix_bottom_up_space_optimization(rows: number, cols: number, mat: number[][]): number {
  let current_row: number[] = [];
  let i: number = 0;
  while ((i <= cols)) {
    current_row.push(0);
    i = (i + 1);
  }
  let next_row: number[] = [];
  let j: number = 0;
  while ((j <= cols)) {
    next_row.push(0);
    j = (j + 1);
  }
  let largest: number = 0;
  let row: number = (rows - 1);
  while ((row >= 0)) {
    let col: number = (cols - 1);
    while ((col >= 0)) {
      let right: number = current_row[(()=>{const _mochi_idx = Math.trunc((col + 1)); return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()];
      let diagonal: number = next_row[(()=>{const _mochi_idx = Math.trunc((col + 1)); return _mochi_idx < 0 ? next_row.length + _mochi_idx : _mochi_idx;})()];
      let bottom: number = next_row[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? next_row.length + _mochi_idx : _mochi_idx;})()];
      if ((mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == 1)) {
        let value = (1 + (() => { const _arr = [right, diagonal, bottom]; return _arr.length === 0 ? 0 : Math.min(..._arr); })());
        current_row[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] = value;
        if ((value > largest)) {
          largest = value;
        }
      } else {
        current_row[(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? current_row.length + _mochi_idx : _mochi_idx;})()] = 0;
      }
      col = (col - 1);
    }
    next_row = current_row;
    current_row = [];
    let t: number = 0;
    while ((t <= cols)) {
      current_row.push(0);
      t = (t + 1);
    }
    row = (row - 1);
  }
  return largest;
}
let sample: number[][] = [[1, 1], [1, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(largest_square_area_in_matrix_top_down(2, 2, sample)));
  console.log(_str(largest_square_area_in_matrix_top_down_with_dp(2, 2, sample)));
  console.log(_str(largest_square_area_in_matrix_bottom_up(2, 2, sample)));
  console.log(_str(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, sample)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

