// Generated by Mochi v0.10.64 on 2025-08-12 14:00:40 GMT+7

function search_in_sorted_matrix(mat: number[][], m: number, n: number, key: number) {
  let i: number = (m - 1);
  let j: number = 0;
  while (((i >= 0) && (j < n))) {
    if ((key === mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      console.log(_str(((((("Key " + _str(key)) + " found at row- ") + _str((i + 1))) + " column- ") + _str((j + 1)))));
      return;
    }
    if ((key < mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? mat[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()])) {
      i = (i - 1);
    } else {
      j = (j + 1);
    }
  }
  console.log(_str((("Key " + _str(key)) + " not found")));
}
function main() {
  let mat: number[][] = [[2.0, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]];
  search_in_sorted_matrix(mat, _len(mat), _len(mat[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]), 5.0);
  search_in_sorted_matrix(mat, _len(mat), _len(mat[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat.length + _mochi_idx : _mochi_idx;})()]), 21.0);
  let mat2: number[][] = [[2.1, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]];
  search_in_sorted_matrix(mat2, _len(mat2), _len(mat2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat2.length + _mochi_idx : _mochi_idx;})()]), 2.1);
  search_in_sorted_matrix(mat2, _len(mat2), _len(mat2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? mat2.length + _mochi_idx : _mochi_idx;})()]), 2.2);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

