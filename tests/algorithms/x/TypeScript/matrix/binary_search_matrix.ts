// Generated by Mochi v0.10.59 on 2025-08-07 00:24:50 GMT+7

function binary_search(arr: number[], lower_bound: number, upper_bound: number, value: number): number {
  let r: number = Math.trunc((lower_bound + upper_bound) / 2);
  if ((arr[(r) < 0 ? arr.length + (r) : r] == value)) {
    return r;
  }
  if ((lower_bound >= upper_bound)) {
    return -1;
  }
  if ((arr[(r) < 0 ? arr.length + (r) : r] < value)) {
    return binary_search(arr, (r + 1), upper_bound, value);
  }
  return binary_search(arr, lower_bound, (r - 1), value);
}
function mat_bin_search(value: number, matrix: number[][]): number[] {
  let index: number = 0;
  if ((matrix[(index) < 0 ? matrix.length + (index) : index][(Math.trunc(0)) < 0 ? matrix[(index) < 0 ? matrix.length + (index) : index].length + (Math.trunc(0)) : Math.trunc(0)] == value)) {
    return [index, 0];
  }
  while (((index < _len(matrix)) && (matrix[(index) < 0 ? matrix.length + (index) : index][(Math.trunc(0)) < 0 ? matrix[(index) < 0 ? matrix.length + (index) : index].length + (Math.trunc(0)) : Math.trunc(0)] < value))) {
    let r: number = binary_search(matrix[(index) < 0 ? matrix.length + (index) : index], 0, (_len(matrix[(index) < 0 ? matrix.length + (index) : index]) - 1), value);
    if ((r != -1)) {
      return [index, r];
    }
    index = (index + 1);
  }
  return [-1, -1];
}
function main() {
  let row: number[] = [1, 4, 7, 11, 15];
  console.log(_str(_str(binary_search(row, 0, (_len(row) - 1), 1))));
  console.log(_str(_str(binary_search(row, 0, (_len(row) - 1), 23))));
  let matrix: number[][] = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]];
  console.log(_str(_str(mat_bin_search(1, matrix))));
  console.log(_str(_str(mat_bin_search(34, matrix))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

