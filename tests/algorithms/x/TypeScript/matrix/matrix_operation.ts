// Generated by Mochi v0.10.59 on 2025-08-07 08:17:03 GMT+7

function add(matrices: number[][][]): number[][] {
  let rows: number = _len(matrices[(Math.trunc(0)) < 0 ? matrices.length + (Math.trunc(0)) : Math.trunc(0)]);
  let cols: number = _len(matrices[(Math.trunc(0)) < 0 ? matrices.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrices[(Math.trunc(0)) < 0 ? matrices.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)]);
  let r: number = 0;
  let result: number[][] = [];
  while ((r < rows)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < cols)) {
      let sum: number = 0.0;
      let m: number = 0;
      while ((m < _len(matrices))) {
        sum = (sum + matrices[(m) < 0 ? matrices.length + (m) : m][(r) < 0 ? matrices[(m) < 0 ? matrices.length + (m) : m].length + (r) : r][(c) < 0 ? matrices[(m) < 0 ? matrices.length + (m) : m][(r) < 0 ? matrices[(m) < 0 ? matrices.length + (m) : m].length + (r) : r].length + (c) : c]);
        m = (m + 1);
      }
      row.push(sum);
      c = (c + 1);
    }
    result.push(row);
    r = (r + 1);
  }
  return result;
}
function subtract(a: number[][], b: number[][]): number[][] {
  let rows: number = _len(a);
  let cols: number = _len(a[(Math.trunc(0)) < 0 ? a.length + (Math.trunc(0)) : Math.trunc(0)]);
  let r: number = 0;
  let result: number[][] = [];
  while ((r < rows)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < cols)) {
      row.push((a[(r) < 0 ? a.length + (r) : r][(c) < 0 ? a[(r) < 0 ? a.length + (r) : r].length + (c) : c] - b[(r) < 0 ? b.length + (r) : r][(c) < 0 ? b[(r) < 0 ? b.length + (r) : r].length + (c) : c]));
      c = (c + 1);
    }
    result.push(row);
    r = (r + 1);
  }
  return result;
}
function scalar_multiply(matrix: number[][], n: number): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(matrix))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(matrix[(i) < 0 ? matrix.length + (i) : i]))) {
      row.push((matrix[(i) < 0 ? matrix.length + (i) : i][(j) < 0 ? matrix[(i) < 0 ? matrix.length + (i) : i].length + (j) : j] * n));
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function multiply(a: number[][], b: number[][]): number[][] {
  let rowsA: number = _len(a);
  let colsA: number = _len(a[(Math.trunc(0)) < 0 ? a.length + (Math.trunc(0)) : Math.trunc(0)]);
  let rowsB: number = _len(b);
  let colsB: number = _len(b[(Math.trunc(0)) < 0 ? b.length + (Math.trunc(0)) : Math.trunc(0)]);
  let result: number[][] = [];
  let i: number = 0;
  while ((i < rowsA)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < colsB)) {
      let sum: number = 0.0;
      let k: number = 0;
      while ((k < colsA)) {
        sum = (sum + (a[(i) < 0 ? a.length + (i) : i][(k) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (k) : k] * b[(k) < 0 ? b.length + (k) : k][(j) < 0 ? b[(k) < 0 ? b.length + (k) : k].length + (j) : j]));
        k = (k + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function identity(n: number): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      if ((i == j)) {
        row.push(1.0);
      } else {
        row.push(0.0);
      }
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function transpose(matrix: number[][]): number[][] {
  let rows: number = _len(matrix);
  let cols: number = _len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]);
  let result: number[][] = [];
  let c: number = 0;
  while ((c < cols)) {
    let row: number[] = [];
    let r: number = 0;
    while ((r < rows)) {
      row.push(matrix[(r) < 0 ? matrix.length + (r) : r][(c) < 0 ? matrix[(r) < 0 ? matrix.length + (r) : r].length + (c) : c]);
      r = (r + 1);
    }
    result.push(row);
    c = (c + 1);
  }
  return result;
}
function minor(matrix: number[][], row: number, column: number): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(matrix))) {
    if ((i != row)) {
      let new_row: number[] = [];
      let j: number = 0;
      while ((j < _len(matrix[(i) < 0 ? matrix.length + (i) : i]))) {
        if ((j != column)) {
          new_row.push(matrix[(i) < 0 ? matrix.length + (i) : i][(j) < 0 ? matrix[(i) < 0 ? matrix.length + (i) : i].length + (j) : j]);
        }
        j = (j + 1);
      }
      result.push(new_row);
    }
    i = (i + 1);
  }
  return result;
}
function determinant(matrix: number[][]): number {
  if ((_len(matrix) == 1)) {
    return matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(Math.trunc(0)) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (Math.trunc(0)) : Math.trunc(0)];
  }
  let det: number = 0.0;
  let c: number = 0;
  while ((c < _len(matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)]))) {
    let sub: number[][] = minor(matrix, 0, c);
    let sign: number = (((c % 2) == 0) ? 1.0 : -1.0);
    det = (det + ((matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)][(c) < 0 ? matrix[(Math.trunc(0)) < 0 ? matrix.length + (Math.trunc(0)) : Math.trunc(0)].length + (c) : c] * determinant(sub)) * sign));
    c = (c + 1);
  }
  return det;
}
function inverse(matrix: number[][]): number[][] {
  let det: number = determinant(matrix);
  if ((det == 0.0)) {
    return [];
  }
  let size: number = _len(matrix);
  let matrix_minor: number[][] = [];
  let i: number = 0;
  while ((i < size)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < size)) {
      let m: number[][] = minor(matrix, i, j);
      row.push(determinant(m));
      j = (j + 1);
    }
    matrix_minor.push(row);
    i = (i + 1);
  }
  let cofactors: number[][] = [];
  i = 0;
  while ((i < size)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < size)) {
      let sign: number = ((((i + j) % 2) == 0) ? 1.0 : -1.0);
      row.push((matrix_minor[(i) < 0 ? matrix_minor.length + (i) : i][(j) < 0 ? matrix_minor[(i) < 0 ? matrix_minor.length + (i) : i].length + (j) : j] * sign));
      j = (j + 1);
    }
    cofactors.push(row);
    i = (i + 1);
  }
  let adjugate: number[][] = transpose(cofactors);
  return scalar_multiply(adjugate, (1.0 / det));
}
function main() {
  let matrix_a: number[][] = [[12.0, 10.0], [3.0, 9.0]];
  let matrix_b: number[][] = [[3.0, 4.0], [7.0, 4.0]];
  let matrix_c: number[][] = [[11.0, 12.0, 13.0, 14.0], [21.0, 22.0, 23.0, 24.0], [31.0, 32.0, 33.0, 34.0], [41.0, 42.0, 43.0, 44.0]];
  let matrix_d: number[][] = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]];
  console.log(_str((("Add Operation, add(matrix_a, matrix_b) = " + _str(add([matrix_a, matrix_b]))) + " \n")));
  console.log(_str((("Multiply Operation, multiply(matrix_a, matrix_b) = " + _str(multiply(matrix_a, matrix_b))) + " \n")));
  console.log(_str((("Identity: " + _str(identity(5))) + "\n")));
  console.log(_str((((("Minor of " + _str(matrix_c)) + " = ") + _str(minor(matrix_c, 1, 2))) + " \n")));
  console.log(_str((((("Determinant of " + _str(matrix_b)) + " = ") + _str(determinant(matrix_b))) + " \n")));
  console.log(_str((((("Inverse of " + _str(matrix_d)) + " = ") + _str(inverse(matrix_d))) + "\n")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

