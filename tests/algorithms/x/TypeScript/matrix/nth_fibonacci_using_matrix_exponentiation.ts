// Generated by Mochi v0.10.66 on 2025-08-16 09:40:37 GMT+7

function multiply(matrix_a: number[][], matrix_b: number[][]): number[][] {
  let n: number = _len(matrix_a);
  let matrix_c: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      let val: number = 0;
      let k: number = 0;
      while ((k < n)) {
        val = (val + (matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? matrix_a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix_a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * matrix_b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? matrix_b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? matrix_b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? matrix_b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      row.push(val);
      j = (j + 1);
    }
    matrix_c.push(row);
    i = (i + 1);
  }
  return matrix_c;
}
function identity(n: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      if ((i === j)) {
        row.push(1);
      } else {
        row.push(0);
      }
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function nth_fibonacci_matrix(n: number): number {
  if ((n <= 1)) {
    return n;
  }
  let res_matrix: number[][] = identity(2);
  let fib_matrix: number[][] = [[1, 1], [1, 0]];
  let m: number = (n - 1);
  while ((m > 0)) {
    if (((m % 2) === 1)) {
      res_matrix = multiply(res_matrix, fib_matrix);
    }
    fib_matrix = multiply(fib_matrix, fib_matrix);
    m = Math.trunc(m / 2);
  }
  return res_matrix[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res_matrix.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res_matrix[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? res_matrix.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
}
function nth_fibonacci_bruteforce(n: number): number {
  if ((n <= 1)) {
    return n;
  }
  let fib0: number = 0;
  let fib1: number = 1;
  let i: number = 2;
  while ((i <= n)) {
    let next: number = (fib0 + fib1);
    fib0 = fib1;
    fib1 = next;
    i = (i + 1);
  }
  return fib1;
}
function parse_number(s: string): number {
  let result: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if (((ch >= "0") && (ch <= "9"))) {
      result = ((result * 10) + Math.trunc(ch));
    }
    i = (i + 1);
  }
  return result;
}
function main() {
  let ordinals: string[] = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"];
  let i: number = 0;
  while ((i < _len(ordinals))) {
    let ordinal: string = ordinals[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ordinals.length + _mochi_idx : _mochi_idx;})()];
    let n: number = parse_number(ordinal);
    let msg: string = ((((ordinal + " fibonacci number using matrix exponentiation is ") + _str(nth_fibonacci_matrix(n))) + " and using bruteforce is ") + _str(nth_fibonacci_bruteforce(n)));
    console.log(_str(msg));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

