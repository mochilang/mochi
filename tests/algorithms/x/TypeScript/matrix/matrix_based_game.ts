// Generated by Mochi v0.10.64 on 2025-08-12 09:23:05 GMT+7

export interface Coord { x: number; y: number }
export interface PlayResult { matrix: string[][]; score: number }
function is_alnum(ch: string): boolean {
  return ((((ch >= "0") && (ch <= "9")) || ((ch >= "A") && (ch <= "Z"))) || ((ch >= "a") && (ch <= "z")));
}
function to_int(token: string): number {
  let res: number = 0;
  let i: number = 0;
  while ((i < _len(token))) {
    res = ((res * 10) + parseIntStr((token).substring(i, (i + 1)), 10));
    i = (i + 1);
  }
  return res;
}
function split(s: string, sep: string): string[] {
  let res: string[] = [];
  let current: string = "";
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == sep)) {
      res.push(current);
      current = "";
    } else {
      current = (current + ch);
    }
    i = (i + 1);
  }
  res.push(current);
  return res;
}
function parse_moves(input_str: string): Coord[] {
  let pairs: string[] = split(input_str, ",");
  let moves: Coord[] = [];
  let i: number = 0;
  while ((i < _len(pairs))) {
    let pair: string = pairs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? pairs.length + _mochi_idx : _mochi_idx;})()];
    let numbers: string[] = [];
    let num: string = "";
    let j: number = 0;
    while ((j < _len(pair))) {
      let ch: string = (pair).substring(j, (j + 1));
      if ((ch == " ")) {
        if ((num != "")) {
          numbers.push(num);
          num = "";
        }
      } else {
        num = (num + ch);
      }
      j = (j + 1);
    }
    if ((num != "")) {
      numbers.push(num);
    }
    if ((_len(numbers) != 2)) {
      _panic("Each move must have exactly two numbers.");
    }
    let x: number = to_int(numbers[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()]);
    let y: number = to_int(numbers[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? numbers.length + _mochi_idx : _mochi_idx;})()]);
    moves.push({x, y});
    i = (i + 1);
  }
  return moves;
}
function validate_matrix_size(size: number) {
  if ((size <= 0)) {
    _panic("Matrix size must be a positive integer.");
  }
}
function validate_matrix_content(matrix: string[], size: number) {
  if ((_len(matrix) != size)) {
    _panic("The matrix dont match with size.");
  }
  let i: number = 0;
  while ((i < size)) {
    let row: string = matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()];
    if ((_len(row) != size)) {
      _panic((("Each row in the matrix must have exactly " + _str(size)) + " characters."));
    }
    let j: number = 0;
    while ((j < size)) {
      let ch: string = (row).substring(j, (j + 1));
      if (!is_alnum(ch)) {
        _panic("Matrix rows can only contain letters and numbers.");
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
}
function validate_moves(moves: Coord[], size: number) {
  let i: number = 0;
  while ((i < _len(moves))) {
    let mv: Coord = moves[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? moves.length + _mochi_idx : _mochi_idx;})()];
    if (((((mv.x < 0) || (mv.x >= size)) || (mv.y < 0)) || (mv.y >= size))) {
      _panic("Move is out of bounds for a matrix.");
    }
    i = (i + 1);
  }
}
function contains(pos: Coord[], r: number, c: number): boolean {
  let i: number = 0;
  while ((i < _len(pos))) {
    let p: Coord = pos[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? pos.length + _mochi_idx : _mochi_idx;})()];
    if (((p.x == r) && (p.y == c))) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function find_repeat(matrix_g: string[][], row: number, column: number, size: number): Coord[] {
  column = ((size - 1) - column);
  let visited: Coord[] = [];
  let repeated: Coord[] = [];
  let color: string = matrix_g[(()=>{const _mochi_idx = column; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = column; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  if ((color == "-")) {
    return repeated;
  }
  let stack: Coord[] = [{"x": column, "y": row}];
  while ((_len(stack) > 0)) {
    let idx: number = (_len(stack) - 1);
    let pos: Coord = stack[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
    stack = stack.slice(0, idx);
    if (((((pos.x < 0) || (pos.x >= size)) || (pos.y < 0)) || (pos.y >= size))) {
      continue
    }
    if (contains(visited, pos.x, pos.y)) {
      continue
    }
    visited.push(pos);
    if ((matrix_g[(()=>{const _mochi_idx = Math.trunc(pos.x); return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc(pos.y); return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = Math.trunc(pos.x); return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] == color)) {
      repeated.push(pos);
      stack.push({"x": (pos.x - 1), "y": pos.y});
      stack.push({"x": (pos.x + 1), "y": pos.y});
      stack.push({"x": pos.x, "y": (pos.y - 1)});
      stack.push({"x": pos.x, "y": (pos.y + 1)});
    }
  }
  return repeated;
}
function increment_score(count: number): number {
  return ((count * (count + 1)) / 2);
}
function move_x(matrix_g: string[][], column: number, size: number): string[][] {
  let new_list: string[] = [];
  let row: number = 0;
  while ((row < size)) {
    let val: string = matrix_g[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column; return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
    if ((val != "-")) {
      new_list.push(val);
    } else {
      new_list = concat([val], new_list);
    }
    row = (row + 1);
  }
  row = 0;
  while ((row < size)) {
    matrix_g[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column; return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = new_list[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? new_list.length + _mochi_idx : _mochi_idx;})()];
    row = (row + 1);
  }
  return matrix_g;
}
function move_y(matrix_g: string[][], size: number): string[][] {
  let empty_cols: number[] = [];
  let column: number = (size - 1);
  while ((column >= 0)) {
    let row: number = 0;
    let all_empty: boolean = true;
    while ((row < size)) {
      if ((matrix_g[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = column; return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] != "-")) {
        all_empty = false;
        break
      }
      row = (row + 1);
    }
    if (all_empty) {
      empty_cols.push(column);
    }
    column = (column - 1);
  }
  let i: number = 0;
  while ((i < _len(empty_cols))) {
    let col: number = empty_cols[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? empty_cols.length + _mochi_idx : _mochi_idx;})()];
    let c: number = (col + 1);
    while ((c < size)) {
      let r: number = 0;
      while ((r < size)) {
        matrix_g[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (c - 1); return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = matrix_g[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = c; return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
        r = (r + 1);
      }
      c = (c + 1);
    }
    let r: number = 0;
    while ((r < size)) {
      matrix_g[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = (size - 1); return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = "-";
      r = (r + 1);
    }
    i = (i + 1);
  }
  return matrix_g;
}
function play(matrix_g: string[][], pos_x: number, pos_y: number, size: number): PlayResult {
  let same_colors: Coord[] = find_repeat(matrix_g, pos_x, pos_y, size);
  if ((_len(same_colors) != 0)) {
    let i: number = 0;
    while ((i < _len(same_colors))) {
      let p: Coord = same_colors[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? same_colors.length + _mochi_idx : _mochi_idx;})()];
      matrix_g[(()=>{const _mochi_idx = p.x; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = p.y; return _mochi_idx < 0 ? matrix_g[(()=>{const _mochi_idx = p.x; return _mochi_idx < 0 ? matrix_g.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = "-";
      i = (i + 1);
    }
    let column: number = 0;
    while ((column < size)) {
      matrix_g = move_x(matrix_g, column, size);
      column = (column + 1);
    }
    matrix_g = move_y(matrix_g, size);
  }
  let sc: number = increment_score(_len(same_colors));
  return {"matrix": matrix_g, "score": sc};
}
function build_matrix(matrix: string[]): string[][] {
  let res: string[][] = [];
  let i: number = 0;
  while ((i < _len(matrix))) {
    let row: string = matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()];
    let row_list: string[] = [];
    let j: number = 0;
    while ((j < _len(row))) {
      row_list.push((row).substring(j, (j + 1)));
      j = (j + 1);
    }
    res.push(row_list);
    i = (i + 1);
  }
  return res;
}
function process_game(size: number, matrix: string[], moves: Coord[]): number {
  let game_matrix: string[][] = build_matrix(matrix);
  let total: number = 0;
  let i: number = 0;
  while ((i < _len(moves))) {
    let mv: Coord = moves[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? moves.length + _mochi_idx : _mochi_idx;})()];
    let res: PlayResult = play(game_matrix, mv.x, mv.y, size);
    game_matrix = res.matrix;
    total = (total + res.score);
    i = (i + 1);
  }
  return total;
}
function main() {
  let size: number = 4;
  let matrix: string[] = ["RRBG", "RBBG", "YYGG", "XYGG"];
  let moves: Coord[] = parse_moves("0 1,1 1");
  validate_matrix_size(size);
  validate_matrix_content(matrix, size);
  validate_moves(moves, size);
  let score: number = process_game(size, matrix, moves);
  console.log(_str(score));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

