// Generated by Mochi v0.10.64 on 2025-08-12 14:00:24 GMT+7

function is_safe(grid: number[][], visited: boolean[][], row: number, col: number): boolean {
  let rows: number = _len(grid);
  let cols: number = _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]);
  let visited_cell: boolean = visited[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? visited[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let within_bounds: boolean = ((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols));
  let not_visited: boolean = (visited_cell === false);
  return ((within_bounds && not_visited) && (grid[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 1));
}
function dfs(grid: number[][], visited: boolean[][], row: number, col: number) {
  let row_nbr: number[] = [-1, -1, -1, 0, 0, 1, 1, 1];
  let col_nbr: number[] = [-1, 0, 1, -1, 1, -1, 0, 1];
  visited[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? visited[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = true;
  let k: number = 0;
  while ((k < 8)) {
    let new_row: number = (row + row_nbr[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? row_nbr.length + _mochi_idx : _mochi_idx;})()]);
    let new_col: number = (col + col_nbr[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? col_nbr.length + _mochi_idx : _mochi_idx;})()]);
    if (is_safe(grid, visited, new_row, new_col)) {
      dfs(grid, visited, new_row, new_col);
    }
    k = (k + 1);
  }
}
function count_islands(grid: number[][]): number {
  let rows: number = _len(grid);
  let cols: number = _len(grid[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()]);
  let visited: boolean[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row_list: boolean[] = [];
    let j: number = 0;
    while ((j < cols)) {
      row_list.push(false);
      j = (j + 1);
    }
    visited.push(row_list);
    i = (i + 1);
  }
  let count: number = 0;
  i = 0;
  while ((i < rows)) {
    let j: number = 0;
    while ((j < cols)) {
      if ((!visited[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? visited[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? visited.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] && (grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? grid[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? grid.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] === 1))) {
        dfs(grid, visited, i, j);
        count = (count + 1);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return count;
}
let grid: number[][] = [[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(count_islands(grid)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

