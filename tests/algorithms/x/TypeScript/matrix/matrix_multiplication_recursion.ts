// Generated by Mochi v0.10.64 on 2025-08-12 09:23:08 GMT+7

function is_square(matrix: number[][]): boolean {
  let n: number = _len(matrix);
  let i: number = 0;
  while ((i < n)) {
    if ((_len(matrix[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? matrix.length + _mochi_idx : _mochi_idx;})()]) != n)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function matrix_multiply(a: number[][], b: number[][]): number[][] {
  let rows: number = _len(a);
  let cols: number = _len(b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
  let inner: number = _len(b);
  let result: number[][] = [];
  let i: number = 0;
  while ((i < rows)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < cols)) {
      let sum: number = 0;
      let k: number = 0;
      while ((k < inner)) {
        sum = (sum + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
        k = (k + 1);
      }
      row.push(sum);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function multiply(i: number, j: number, k: number, a: number[][], b: number[][], result: number[][], n: number, m: number) {
  if ((i >= n)) {
    return;
  }
  if ((j >= m)) {
    multiply((i + 1), 0, 0, a, b, result, n, m);
    return;
  }
  if ((k >= _len(b))) {
    multiply(i, (j + 1), 0, a, b, result, n, m);
    return;
  }
  result[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? result[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (result[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? result[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? result.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + (a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
  multiply(i, j, (k + 1), a, b, result, n, m);
}
function matrix_multiply_recursive(a: number[][], b: number[][]): number[][] {
  if (((_len(a) == 0) || (_len(b) == 0))) {
    return [];
  }
  if ((((_len(a) != _len(b)) || !is_square(a)) || !is_square(b))) {
    _panic("Invalid matrix dimensions");
  }
  let n: number = _len(a);
  let m: number = _len(b[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]);
  let result: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < m)) {
      row.push(0);
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  multiply(0, 0, 0, a, b, result, n, m);
  return result;
}
let matrix_1_to_4: number[][] = [[1, 2], [3, 4]];
let matrix_5_to_8: number[][] = [[5, 6], [7, 8]];
let matrix_count_up: number[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];
let matrix_unordered: number[][] = [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(matrix_multiply_recursive(matrix_1_to_4, matrix_5_to_8))));
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(matrix_multiply_recursive(matrix_count_up, matrix_unordered))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

