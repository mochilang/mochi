// Generated by Mochi v0.10.64 on 2025-08-12 09:23:02 GMT+7

function cramers_rule_2x2(eq1: number[], eq2: number[]): number[] {
  if (((_len(eq1) != 3) || (_len(eq2) != 3))) {
    _panic("Please enter a valid equation.");
  }
  if (((((eq1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? eq1.length + _mochi_idx : _mochi_idx;})()] == 0.0) && (eq1[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? eq1.length + _mochi_idx : _mochi_idx;})()] == 0.0)) && (eq2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? eq2.length + _mochi_idx : _mochi_idx;})()] == 0.0)) && (eq2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? eq2.length + _mochi_idx : _mochi_idx;})()] == 0.0))) {
    _panic("Both a & b of two equations can't be zero.");
  }
  let a1: number = eq1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? eq1.length + _mochi_idx : _mochi_idx;})()];
  let b1: number = eq1[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? eq1.length + _mochi_idx : _mochi_idx;})()];
  let c1: number = eq1[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? eq1.length + _mochi_idx : _mochi_idx;})()];
  let a2: number = eq2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? eq2.length + _mochi_idx : _mochi_idx;})()];
  let b2: number = eq2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? eq2.length + _mochi_idx : _mochi_idx;})()];
  let c2: number = eq2[(()=>{const _mochi_idx = Math.trunc(2); return _mochi_idx < 0 ? eq2.length + _mochi_idx : _mochi_idx;})()];
  let determinant: number = ((a1 * b2) - (a2 * b1));
  let determinant_x: number = ((c1 * b2) - (c2 * b1));
  let determinant_y: number = ((a1 * c2) - (a2 * c1));
  if ((determinant == 0.0)) {
    if (((determinant_x == 0.0) && (determinant_y == 0.0))) {
      _panic("Infinite solutions. (Consistent system)");
    }
    _panic("No solution. (Inconsistent system)");
  }
  if (((determinant_x == 0.0) && (determinant_y == 0.0))) {
    return [0.0, 0.0];
  }
  let x: number = (determinant_x / determinant);
  let y: number = (determinant_y / determinant);
  return [x, y];
}
function test_cramers_rule_2x2() {
  let r1: number[] = cramers_rule_2x2([2.0, 3.0, 0.0], [5.0, 1.0, 0.0]);
  if (((r1[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? r1.length + _mochi_idx : _mochi_idx;})()] != 0.0) || (r1[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? r1.length + _mochi_idx : _mochi_idx;})()] != 0.0))) {
    _panic("Test1 failed");
  }
  let r2: number[] = cramers_rule_2x2([0.0, 4.0, 50.0], [2.0, 0.0, 26.0]);
  if (((r2[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? r2.length + _mochi_idx : _mochi_idx;})()] != 13.0) || (r2[(()=>{const _mochi_idx = Math.trunc(1); return _mochi_idx < 0 ? r2.length + _mochi_idx : _mochi_idx;})()] != 12.5))) {
    _panic("Test2 failed");
  }
}
function main() {
  test_cramers_rule_2x2();
  console.log(_str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(cramers_rule_2x2([11.0, 2.0, 30.0], [1.0, 0.0, 4.0]))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

