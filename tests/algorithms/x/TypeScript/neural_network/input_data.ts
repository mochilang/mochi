// Generated by Mochi v0.10.59 on 2025-08-07 08:17:31 GMT+7

export interface DataSet { images: number[][]; labels: number[][]; num_examples: number; index_in_epoch: number; epochs_completed: number }
export interface Datasets { train: DataSet; validation: DataSet; test_ds: DataSet }
function dense_to_one_hot(labels: number[], num_classes: number): number[][] {
  let result: number[][] = [];
  let i: number = 0;
  while ((i < _len(labels))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < num_classes)) {
      if ((j == labels[(i) < 0 ? labels.length + (i) : i])) {
        row.push(1);
      } else {
        row.push(0);
      }
      j = (j + 1);
    }
    result.push(row);
    i = (i + 1);
  }
  return result;
}
function new_dataset(images: number[][], labels: number[][]): DataSet {
  return {images, labels, "num_examples": _len(images), "index_in_epoch": 0, "epochs_completed": 0};
}
export interface BatchResult { dataset: DataSet; images: number[][]; labels: number[][] }
function next_batch(ds: DataSet, batch_size: number): BatchResult {
  let start: number = ds.index_in_epoch;
  if (((start + batch_size) > ds.num_examples)) {
    let rest: number = (ds.num_examples - start);
    let images_rest: number[][] = ds.images.slice(start, ds.num_examples);
    let labels_rest: number[][] = ds.labels.slice(start, ds.num_examples);
    let new_index: number = (batch_size - rest);
    let images_new: number[][] = ds.images.slice(0, new_index);
    let labels_new: number[][] = ds.labels.slice(0, new_index);
    let batch_images: any[] = concat(images_rest, images_new);
    let batch_labels: any[] = concat(labels_rest, labels_new);
    let new_ds: DataSet = {"images": ds.images, "labels": ds.labels, "num_examples": ds.num_examples, "index_in_epoch": new_index, "epochs_completed": (ds.epochs_completed + 1)};
    return {"dataset": new_ds, "images": batch_images, "labels": batch_labels};
  } else {
    let end: number = (start + batch_size);
    let batch_images: any[] = ds.images.slice(start, end);
    let batch_labels: any[] = ds.labels.slice(start, end);
    let new_ds: DataSet = {"images": ds.images, "labels": ds.labels, "num_examples": ds.num_examples, "index_in_epoch": end, "epochs_completed": ds.epochs_completed};
    return {"dataset": new_ds, "images": batch_images, "labels": batch_labels};
  }
}
function read_data_sets(train_images: number[][], train_labels_raw: number[], test_images: number[][], test_labels_raw: number[], validation_size: number, num_classes: number): Datasets {
  let train_labels: number[][] = dense_to_one_hot(train_labels_raw, num_classes);
  let test_labels: number[][] = dense_to_one_hot(test_labels_raw, num_classes);
  let validation_images: number[][] = train_images.slice(0, validation_size);
  let validation_labels: number[][] = train_labels.slice(0, validation_size);
  let train_images_rest: number[][] = train_images.slice(validation_size, _len(train_images));
  let train_labels_rest: number[][] = train_labels.slice(validation_size, _len(train_labels));
  let train: DataSet = new_dataset(train_images_rest, train_labels_rest);
  let validation: DataSet = new_dataset(validation_images, validation_labels);
  let testset: DataSet = new_dataset(test_images, test_labels);
  return {train, validation, "test_ds": testset};
}
function main() {
  let train_images: number[][] = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]];
  let train_labels_raw: number[] = [0, 1, 2, 3, 4];
  let test_images: number[][] = [[5, 6], [6, 7]];
  let test_labels_raw: number[] = [5, 6];
  let data: Datasets = read_data_sets(train_images, train_labels_raw, test_images, test_labels_raw, 2, 10);
  let ds: DataSet = data.train;
  let res: BatchResult = next_batch(ds, 2);
  ds = res.dataset;
  console.log(_str(_str(res.images)));
  console.log(_str(_str(res.labels)));
  res = next_batch(ds, 2);
  ds = res.dataset;
  console.log(_str(_str(res.images)));
  console.log(_str(_str(res.labels)));
  res = next_batch(ds, 2);
  ds = res.dataset;
  console.log(_str(_str(res.images)));
  console.log(_str(_str(res.labels)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function concat(a: any[], b: any[]): any[] { return a.concat(b); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

