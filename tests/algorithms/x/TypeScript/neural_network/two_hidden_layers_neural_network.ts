// Generated by Mochi v0.10.59 on 2025-08-07 08:17:33 GMT+7

export interface Network { w1: number[][]; w2: number[][]; w3: number[][] }
function exp_approx(x: number): number {
  let sum: number = 1.0;
  let term: number = 1.0;
  let i: number = 1;
  while ((i < 10)) {
    term = ((term * x) / Number(i));
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function sigmoid(x: number): number {
  return (1.0 / (1.0 + exp_approx(-x)));
}
function sigmoid_derivative(x: number): number {
  return (x * (1.0 - x));
}
function new_network(): Network {
  return {"w1": [[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8], [0.9, 1.0, 1.1, 1.2]], "w2": [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2]], "w3": [[0.1], [0.2], [0.3]]};
}
function feedforward(net: Network, input: number[]): number {
  let hidden1: number[] = [];
  let j: number = 0;
  while ((j < 4)) {
    let sum1: number = 0.0;
    let i: number = 0;
    while ((i < 3)) {
      sum1 = (sum1 + (input[(i) < 0 ? input.length + (i) : i] * net.w1[(i) < 0 ? net.w1.length + (i) : i][(j) < 0 ? net.w1[(i) < 0 ? net.w1.length + (i) : i].length + (j) : j]));
      i = (i + 1);
    }
    hidden1.push(sigmoid(sum1));
    j = (j + 1);
  }
  let hidden2: number[] = [];
  let k: number = 0;
  while ((k < 3)) {
    let sum2: number = 0.0;
    let j2: number = 0;
    while ((j2 < 4)) {
      sum2 = (sum2 + (hidden1[(j2) < 0 ? hidden1.length + (j2) : j2] * net.w2[(j2) < 0 ? net.w2.length + (j2) : j2][(k) < 0 ? net.w2[(j2) < 0 ? net.w2.length + (j2) : j2].length + (k) : k]));
      j2 = (j2 + 1);
    }
    hidden2.push(sigmoid(sum2));
    k = (k + 1);
  }
  let sum3: number = 0.0;
  let k2: number = 0;
  while ((k2 < 3)) {
    sum3 = (sum3 + (hidden2[(k2) < 0 ? hidden2.length + (k2) : k2] * net.w3[(k2) < 0 ? net.w3.length + (k2) : k2][(Math.trunc(0)) < 0 ? net.w3[(k2) < 0 ? net.w3.length + (k2) : k2].length + (Math.trunc(0)) : Math.trunc(0)]));
    k2 = (k2 + 1);
  }
  let out: number = sigmoid(sum3);
  return out;
}
function train(net: Network, inputs: number[][], outputs: number[], iterations: number) {
  let iter: number = 0;
  while ((iter < iterations)) {
    let s: number = 0;
    while ((s < _len(inputs))) {
      let inp: number[] = inputs[(s) < 0 ? inputs.length + (s) : s];
      let target: number = outputs[(s) < 0 ? outputs.length + (s) : s];
      let hidden1: number[] = [];
      let j: number = 0;
      while ((j < 4)) {
        let sum1: number = 0.0;
        let i: number = 0;
        while ((i < 3)) {
          sum1 = (sum1 + (inp[(i) < 0 ? inp.length + (i) : i] * net.w1[(i) < 0 ? net.w1.length + (i) : i][(j) < 0 ? net.w1[(i) < 0 ? net.w1.length + (i) : i].length + (j) : j]));
          i = (i + 1);
        }
        hidden1.push(sigmoid(sum1));
        j = (j + 1);
      }
      let hidden2: number[] = [];
      let k: number = 0;
      while ((k < 3)) {
        let sum2: number = 0.0;
        let j2: number = 0;
        while ((j2 < 4)) {
          sum2 = (sum2 + (hidden1[(j2) < 0 ? hidden1.length + (j2) : j2] * net.w2[(j2) < 0 ? net.w2.length + (j2) : j2][(k) < 0 ? net.w2[(j2) < 0 ? net.w2.length + (j2) : j2].length + (k) : k]));
          j2 = (j2 + 1);
        }
        hidden2.push(sigmoid(sum2));
        k = (k + 1);
      }
      let sum3: number = 0.0;
      let k3: number = 0;
      while ((k3 < 3)) {
        sum3 = (sum3 + (hidden2[(k3) < 0 ? hidden2.length + (k3) : k3] * net.w3[(k3) < 0 ? net.w3.length + (k3) : k3][(Math.trunc(0)) < 0 ? net.w3[(k3) < 0 ? net.w3.length + (k3) : k3].length + (Math.trunc(0)) : Math.trunc(0)]));
        k3 = (k3 + 1);
      }
      let output: number = sigmoid(sum3);
      let error: number = (target - output);
      let delta_output: number = (error * sigmoid_derivative(output));
      let new_w3: number[][] = [];
      let k4: number = 0;
      while ((k4 < 3)) {
        let w3row: number[] = net.w3[(k4) < 0 ? net.w3.length + (k4) : k4];
        w3row[(0) < 0 ? w3row.length + (0) : 0] = (w3row[(Math.trunc(0)) < 0 ? w3row.length + (Math.trunc(0)) : Math.trunc(0)] + (hidden2[(k4) < 0 ? hidden2.length + (k4) : k4] * delta_output));
        new_w3.push(w3row);
        k4 = (k4 + 1);
      }
      net.w3 = new_w3;
      let delta_hidden2: number[] = [];
      let k5: number = 0;
      while ((k5 < 3)) {
        let row: number[] = net.w3[(k5) < 0 ? net.w3.length + (k5) : k5];
        let dh2: number = ((row[(Math.trunc(0)) < 0 ? row.length + (Math.trunc(0)) : Math.trunc(0)] * delta_output) * sigmoid_derivative(hidden2[(k5) < 0 ? hidden2.length + (k5) : k5]));
        delta_hidden2.push(dh2);
        k5 = (k5 + 1);
      }
      let new_w2: number[][] = [];
      j = 0;
      while ((j < 4)) {
        let w2row: number[] = net.w2[(j) < 0 ? net.w2.length + (j) : j];
        let k6: number = 0;
        while ((k6 < 3)) {
          w2row[(k6) < 0 ? w2row.length + (k6) : k6] = (w2row[(k6) < 0 ? w2row.length + (k6) : k6] + (hidden1[(j) < 0 ? hidden1.length + (j) : j] * delta_hidden2[(k6) < 0 ? delta_hidden2.length + (k6) : k6]));
          k6 = (k6 + 1);
        }
        new_w2.push(w2row);
        j = (j + 1);
      }
      net.w2 = new_w2;
      let delta_hidden1: number[] = [];
      j = 0;
      while ((j < 4)) {
        let sumdh: number = 0.0;
        let k7: number = 0;
        while ((k7 < 3)) {
          let row2: number[] = net.w2[(j) < 0 ? net.w2.length + (j) : j];
          sumdh = (sumdh + (row2[(k7) < 0 ? row2.length + (k7) : k7] * delta_hidden2[(k7) < 0 ? delta_hidden2.length + (k7) : k7]));
          k7 = (k7 + 1);
        }
        delta_hidden1.push((sumdh * sigmoid_derivative(hidden1[(j) < 0 ? hidden1.length + (j) : j])));
        j = (j + 1);
      }
      let new_w1: number[][] = [];
      let i2: number = 0;
      while ((i2 < 3)) {
        let w1row: number[] = net.w1[(i2) < 0 ? net.w1.length + (i2) : i2];
        j = 0;
        while ((j < 4)) {
          w1row[(j) < 0 ? w1row.length + (j) : j] = (w1row[(j) < 0 ? w1row.length + (j) : j] + (inp[(i2) < 0 ? inp.length + (i2) : i2] * delta_hidden1[(j) < 0 ? delta_hidden1.length + (j) : j]));
          j = (j + 1);
        }
        new_w1.push(w1row);
        i2 = (i2 + 1);
      }
      net.w1 = new_w1;
      s = (s + 1);
    }
    iter = (iter + 1);
  }
}
function predict(net: Network, input: number[]): number {
  let out = feedforward(net, input);
  if ((out > 0.6)) {
    return 1;
  }
  return 0;
}
function example(): number {
  let inputs: number[][] = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0], [1.0, 0.0, 0.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0], [1.0, 1.0, 1.0]];
  let outputs: number[] = [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0];
  let net: Network = new_network();
  train(net, inputs, outputs, 10);
  let result: number = predict(net, [1.0, 1.0, 1.0]);
  console.log(_str(_str(result)));
  return result;
}
function main() {
  example();
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

