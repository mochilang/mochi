// Generated by Mochi v0.10.59 on 2025-08-07 08:17:29 GMT+7

let seed: number = 1;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function random(): number {
  return ((1.0 * rand()) / 2147483648.0);
}
function expApprox(x: number): number {
  let y: number = x;
  let is_neg: boolean = false;
  if ((x < 0.0)) {
    is_neg = true;
    y = -x;
  }
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 30)) {
    term = ((term * y) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  if (is_neg) {
    return (1.0 / sum);
  }
  return sum;
}
function sigmoid(z: number): number {
  return (1.0 / (1.0 + expApprox(-z)));
}
function sigmoid_vec(v: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(v))) {
    res.push(sigmoid(v[(i) < 0 ? v.length + (i) : i]));
    i = (i + 1);
  }
  return res;
}
function sigmoid_derivative(out: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(out))) {
    let val: number = out[(i) < 0 ? out.length + (i) : i];
    res.push((val * (1.0 - val)));
    i = (i + 1);
  }
  return res;
}
export interface Layer { units: number; weight: number[][]; bias: number[]; output: number[]; xdata: number[]; learn_rate: number }
function random_vector(n: number): number[] {
  let v: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    v.push((random() - 0.5));
    i = (i + 1);
  }
  return v;
}
function random_matrix(r: number, c: number): number[][] {
  let m: number[][] = [];
  let i: number = 0;
  while ((i < r)) {
    m.push(random_vector(c));
    i = (i + 1);
  }
  return m;
}
function matvec(mat: number[][], vec: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(mat))) {
    let s: number = 0.0;
    let j: number = 0;
    while ((j < _len(vec))) {
      s = (s + (mat[(i) < 0 ? mat.length + (i) : i][(j) < 0 ? mat[(i) < 0 ? mat.length + (i) : i].length + (j) : j] * vec[(j) < 0 ? vec.length + (j) : j]));
      j = (j + 1);
    }
    res.push(s);
    i = (i + 1);
  }
  return res;
}
function matTvec(mat: number[][], vec: number[]): number[] {
  let cols: number = _len(mat[(Math.trunc(0)) < 0 ? mat.length + (Math.trunc(0)) : Math.trunc(0)]);
  let res: number[] = [];
  let j: number = 0;
  while ((j < cols)) {
    let s: number = 0.0;
    let i: number = 0;
    while ((i < _len(mat))) {
      s = (s + (mat[(i) < 0 ? mat.length + (i) : i][(j) < 0 ? mat[(i) < 0 ? mat.length + (i) : i].length + (j) : j] * vec[(i) < 0 ? vec.length + (i) : i]));
      i = (i + 1);
    }
    res.push(s);
    j = (j + 1);
  }
  return res;
}
function vec_sub(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(i) < 0 ? a.length + (i) : i] - b[(i) < 0 ? b.length + (i) : i]));
    i = (i + 1);
  }
  return res;
}
function vec_mul(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(i) < 0 ? a.length + (i) : i] * b[(i) < 0 ? b.length + (i) : i]));
    i = (i + 1);
  }
  return res;
}
function vec_scalar_mul(v: number[], s: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(v))) {
    res.push((v[(i) < 0 ? v.length + (i) : i] * s));
    i = (i + 1);
  }
  return res;
}
function outer(a: number[], b: number[]): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(b))) {
      row.push((a[(i) < 0 ? a.length + (i) : i] * b[(j) < 0 ? b.length + (j) : j]));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function mat_scalar_mul(mat: number[][], s: number): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(mat))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(mat[(i) < 0 ? mat.length + (i) : i]))) {
      row.push((mat[(i) < 0 ? mat.length + (i) : i][(j) < 0 ? mat[(i) < 0 ? mat.length + (i) : i].length + (j) : j] * s));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function mat_sub(a: number[][], b: number[][]): number[][] {
  let res: number[][] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(a[(i) < 0 ? a.length + (i) : i]))) {
      row.push((a[(i) < 0 ? a.length + (i) : i][(j) < 0 ? a[(i) < 0 ? a.length + (i) : i].length + (j) : j] - b[(i) < 0 ? b.length + (i) : i][(j) < 0 ? b[(i) < 0 ? b.length + (i) : i].length + (j) : j]));
      j = (j + 1);
    }
    res.push(row);
    i = (i + 1);
  }
  return res;
}
function init_layer(units: number, back_units: number, lr: number): Layer {
  return {units, "weight": random_matrix(units, back_units), "bias": random_vector(units), "output": [], "xdata": [], "learn_rate": lr};
}
function forward(layers: Layer[], x: number[]): Layer[] {
  let data: number[] = x;
  let i: number = 0;
  while ((i < _len(layers))) {
    let layer: Layer = layers[(i) < 0 ? layers.length + (i) : i];
    layer.xdata = data;
    if ((i == 0)) {
      layer.output = data;
    } else {
      let z: number[] = vec_sub(matvec(layer.weight, data), layer.bias);
      layer.output = sigmoid_vec(z);
      data = layer.output;
    }
    layers[(i) < 0 ? layers.length + (i) : i] = layer;
    i = (i + 1);
  }
  return layers;
}
function backward(layers: Layer[], grad: number[]): Layer[] {
  let g: number[] = grad;
  let i: number = (_len(layers) - 1);
  while ((i > 0)) {
    let layer: Layer = layers[(i) < 0 ? layers.length + (i) : i];
    let deriv: number[] = sigmoid_derivative(layer.output);
    let delta: number[] = vec_mul(g, deriv);
    let grad_w: number[][] = outer(delta, layer.xdata);
    layer.weight = mat_sub(layer.weight, mat_scalar_mul(grad_w, layer.learn_rate));
    layer.bias = vec_sub(layer.bias, vec_scalar_mul(delta, layer.learn_rate));
    g = matTvec(layer.weight, delta);
    layers[(i) < 0 ? layers.length + (i) : i] = layer;
    i = (i - 1);
  }
  return layers;
}
function calc_loss(y: number[], yhat: number[]): number {
  let s: number = 0.0;
  let i: number = 0;
  while ((i < _len(y))) {
    let d: number = (y[(i) < 0 ? y.length + (i) : i] - yhat[(i) < 0 ? yhat.length + (i) : i]);
    s = (s + (d * d));
    i = (i + 1);
  }
  return s;
}
function calc_gradient(y: number[], yhat: number[]): number[] {
  let g: number[] = [];
  let i: number = 0;
  while ((i < _len(y))) {
    g.push((2.0 * (yhat[(i) < 0 ? yhat.length + (i) : i] - y[(i) < 0 ? y.length + (i) : i])));
    i = (i + 1);
  }
  return g;
}
function train(layers: Layer[], xdata: number[][], ydata: number[][], rounds: number, acc: number): number {
  let r: number = 0;
  while ((r < rounds)) {
    let i: number = 0;
    while ((i < _len(xdata))) {
      layers = forward(layers, xdata[(i) < 0 ? xdata.length + (i) : i]);
      let out: Layer = layers[(Math.trunc((_len(layers) - 1))) < 0 ? layers.length + (Math.trunc((_len(layers) - 1))) : Math.trunc((_len(layers) - 1))].output;
      let grad = calc_gradient(ydata[(i) < 0 ? ydata.length + (i) : i], out);
      layers = backward(layers, grad);
      i = (i + 1);
    }
    r = (r + 1);
  }
  return 0.0;
}
export interface Data { x: number[][]; y: number[][] }
function create_data(): Data {
  let x: number[][] = [];
  let i: number = 0;
  while ((i < 10)) {
    x.push(random_vector(10));
    i = (i + 1);
  }
  let y: number[][] = [[0.8, 0.4], [0.4, 0.3], [0.34, 0.45], [0.67, 0.32], [0.88, 0.67], [0.78, 0.77], [0.55, 0.66], [0.55, 0.43], [0.54, 0.1], [0.1, 0.5]];
  return {x, y};
}
function main() {
  let data: Data = create_data();
  let x: number[][] = data.x;
  let y: number[][] = data.y;
  let layers: Layer[] = [];
  layers.push(init_layer(10, 0, 0.3));
  layers.push(init_layer(20, 10, 0.3));
  layers.push(init_layer(30, 20, 0.3));
  layers.push(init_layer(2, 30, 0.3));
  let final_mse: number = train(layers, x, y, 100, 0.01);
  console.log(_str(final_mse));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

