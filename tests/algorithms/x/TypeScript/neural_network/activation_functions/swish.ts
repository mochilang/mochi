// Generated by Mochi v0.10.66 on 2025-08-16 09:41:15 GMT+7

function exp_approx(x: number): number {
  let sum: number = 1.0;
  let term: number = 1.0;
  let i: number = 1;
  while ((i <= 20)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function sigmoid(vector: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(vector))) {
    let v: number = vector[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()];
    let s: number = (1.0 / (1.0 + exp_approx(-v)));
    result.push(s);
    i = (i + 1);
  }
  return result;
}
function swish(vector: number[], beta: number): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(vector))) {
    let v: number = vector[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? vector.length + _mochi_idx : _mochi_idx;})()];
    let s: number = (1.0 / (1.0 + exp_approx((-beta * v))));
    result.push((v * s));
    i = (i + 1);
  }
  return result;
}
function sigmoid_linear_unit(vector: number[]): number[] {
  return swish(vector, 1.0);
}
function approx_equal(a: number, b: number, eps: number): boolean {
  let diff: number = ((a > b) ? (a - b) : (b - a));
  return (diff < eps);
}
function approx_equal_list(a: number[], b: number[], eps: number): boolean {
  if ((_len(a) !== _len(b))) {
    return false;
  }
  let i: number = 0;
  while ((i < _len(a))) {
    if (!approx_equal(a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()], b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()], eps)) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function test_swish() {
  let v: number[] = [-1.0, 1.0, 2.0];
  let eps: number = 0.001;
  if (!approx_equal_list(sigmoid(v), [0.26894142, 0.73105858, 0.88079708], eps)) {
    _panic("sigmoid incorrect");
  }
  if (!approx_equal_list(sigmoid_linear_unit(v), [-0.26894142, 0.73105858, 1.76159416], eps)) {
    _panic("sigmoid_linear_unit incorrect");
  }
  if (!approx_equal_list(swish(v, 2.0), [-0.11920292, 0.88079708, 1.96402758], eps)) {
    _panic("swish incorrect");
  }
  if (!approx_equal_list(swish([-2.0], 1.0), [-0.23840584], eps)) {
    _panic("swish with parameter 1 incorrect");
  }
}
function main() {
  test_swish();
  console.log(_str(sigmoid([-1.0, 1.0, 2.0])));
  console.log(_str(sigmoid_linear_unit([-1.0, 1.0, 2.0])));
  console.log(_str(swish([-1.0, 1.0, 2.0], 2.0)));
  console.log(_str(swish([-2.0], 1.0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

