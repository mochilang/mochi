// Generated by Mochi v0.10.59 on 2025-08-07 08:17:20 GMT+7

function exp_taylor(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1.0;
  while ((i < 20.0)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1.0);
  }
  return sum;
}
function sigmoid(vector: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(vector))) {
    let x: number = vector[(i) < 0 ? vector.length + (i) : i];
    let value: number = (1.0 / (1.0 + exp_taylor(-x)));
    result.push(value);
    i = (i + 1);
  }
  return result;
}
function gaussian_error_linear_unit(vector: number[]): number[] {
  let result: number[] = [];
  let i: number = 0;
  while ((i < _len(vector))) {
    let x: number = vector[(i) < 0 ? vector.length + (i) : i];
    let gelu: number = (x * (1.0 / (1.0 + exp_taylor((-1.702 * x)))));
    result.push(gelu);
    i = (i + 1);
  }
  return result;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let sample: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
sample = [-1.0, 1.0, 2.0]
  console.log(_str("[" + (sigmoid(sample)).join(' ') + "]"));
  console.log(_str("[" + (gaussian_error_linear_unit(sample)).join(' ') + "]"));
  console.log(_str("[" + (gaussian_error_linear_unit([-3.0])).join(' ') + "]"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

