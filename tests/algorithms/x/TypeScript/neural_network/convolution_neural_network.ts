// Generated by Mochi v0.10.64 on 2025-08-12 09:23:58 GMT+7

export interface CNN { conv_kernels: number[][][]; conv_bias: number[]; conv_step: number; pool_size: number; w_hidden: number[][]; w_out: number[][]; b_hidden: number[]; b_out: number[]; rate_weight: number; rate_bias: number }
let seed: number = 1;
function random(): number {
  seed = (((seed * 13) + 7) % 100);
  return (seed / 100.0);
}
function sigmoid(x: number): number {
  return (1.0 / (1.0 + exp(-x)));
}
function to_float(x: number): number {
  return (x * 1.0);
}
function exp(x: number): number {
  return Math.exp(x);
}
function convolve(data: number[][], kernel: number[][], step: number, bias: number): number[][] {
  let size_data: number = _len(data);
  let size_kernel: number = _len(kernel);
  let out: number[][] = [];
  let i: number = 0;
  while ((i <= (size_data - size_kernel))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j <= (size_data - size_kernel))) {
      let sum: number = 0.0;
      let a: number = 0;
      while ((a < size_kernel)) {
        let b: number = 0;
        while ((b < size_kernel)) {
          sum = (sum + (data[(()=>{const _mochi_idx = Math.trunc((i + a)); return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + b)); return _mochi_idx < 0 ? data[(()=>{const _mochi_idx = Math.trunc((i + a)); return _mochi_idx < 0 ? data.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * kernel[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = b; return _mochi_idx < 0 ? kernel[(()=>{const _mochi_idx = a; return _mochi_idx < 0 ? kernel.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
          b = (b + 1);
        }
        a = (a + 1);
      }
      row.push(sigmoid((sum - bias)));
      j = (j + step);
    }
    out.push(row);
    i = (i + step);
  }
  return out;
}
function average_pool(map: number[][], size: number): number[][] {
  let out: number[][] = [];
  let i: number = 0;
  while ((i < _len(map))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(map[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? map.length + _mochi_idx : _mochi_idx;})()]))) {
      let sum: number = 0.0;
      let a: number = 0;
      while ((a < size)) {
        let b: number = 0;
        while ((b < size)) {
          sum = (sum + map[(()=>{const _mochi_idx = Math.trunc((i + a)); return _mochi_idx < 0 ? map.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = Math.trunc((j + b)); return _mochi_idx < 0 ? map[(()=>{const _mochi_idx = Math.trunc((i + a)); return _mochi_idx < 0 ? map.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
          b = (b + 1);
        }
        a = (a + 1);
      }
      row.push((sum / (size * size)));
      j = (j + size);
    }
    out.push(row);
    i = (i + size);
  }
  return out;
}
function flatten(maps: number[][][]): number[] {
  let out: number[] = [];
  let i: number = 0;
  while ((i < _len(maps))) {
    let j: number = 0;
    while ((j < _len(maps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? maps.length + _mochi_idx : _mochi_idx;})()]))) {
      let k: number = 0;
      while ((k < _len(maps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? maps.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? maps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? maps.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]))) {
        out.push(maps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? maps.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? maps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? maps.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? maps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? maps.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? maps[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? maps.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
        k = (k + 1);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return out;
}
function vec_mul_mat(v: number[], m: number[][]): number[] {
  let cols: number = _len(m[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()]);
  let res: number[] = [];
  let j: number = 0;
  while ((j < cols)) {
    let sum: number = 0.0;
    let i: number = 0;
    while ((i < _len(v))) {
      sum = (sum + (v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()] * m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      i = (i + 1);
    }
    res.push(sum);
    j = (j + 1);
  }
  return res;
}
function matT_vec_mul(m: number[][], v: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(m))) {
    let sum: number = 0.0;
    let j: number = 0;
    while ((j < _len(m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()]))) {
      sum = (sum + (m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? m[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] * v[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    res.push(sum);
    i = (i + 1);
  }
  return res;
}
function vec_add(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] + b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function vec_sub(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] - b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function vec_mul(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(a))) {
    res.push((a[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? a.length + _mochi_idx : _mochi_idx;})()] * b[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? b.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
function vec_map_sig(v: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(v))) {
    res.push(sigmoid(v[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? v.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return res;
}
export interface TrainSample { image: number[][]; target: number[] }
function new_cnn(): CNN {
  let k1: number[][] = [[1.0, 0.0], [0.0, 1.0]];
  let k2: number[][] = [[0.0, 1.0], [1.0, 0.0]];
  let conv_kernels: number[][][] = [k1, k2];
  let conv_bias: number[] = [0.0, 0.0];
  let conv_step: number = 2;
  let pool_size: number = 2;
  let input_size: number = 2;
  let hidden_size: number = 2;
  let output_size: number = 2;
  let w_hidden: number[][] = [];
  let i: number = 0;
  while ((i < input_size)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < hidden_size)) {
      row.push((random() - 0.5));
      j = (j + 1);
    }
    w_hidden.push(row);
    i = (i + 1);
  }
  let w_out: number[][] = [];
  i = 0;
  while ((i < hidden_size)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < output_size)) {
      row.push((random() - 0.5));
      j = (j + 1);
    }
    w_out.push(row);
    i = (i + 1);
  }
  let b_hidden: number[] = [0.0, 0.0];
  let b_out: number[] = [0.0, 0.0];
  return {conv_kernels, conv_bias, conv_step, pool_size, w_hidden, w_out, b_hidden, b_out, "rate_weight": 0.2, "rate_bias": 0.2};
}
function forward(cnn: CNN, data: number[][]): number[] {
  let maps: number[][][] = [];
  let i: number = 0;
  while ((i < _len(cnn.conv_kernels))) {
    let conv_map: number[][] = convolve(data, cnn.conv_kernels[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cnn.conv_kernels.length + _mochi_idx : _mochi_idx;})()], cnn.conv_step, cnn.conv_bias[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cnn.conv_bias.length + _mochi_idx : _mochi_idx;})()]);
    let pooled: number[][] = average_pool(conv_map, cnn.pool_size);
    maps.push(pooled);
    i = (i + 1);
  }
  let flat: number[] = flatten(maps);
  let hidden_net: number[] = vec_add(vec_mul_mat(flat, cnn.w_hidden), cnn.b_hidden);
  let hidden_out: number[] = vec_map_sig(hidden_net);
  let out_net: number[] = vec_add(vec_mul_mat(hidden_out, cnn.w_out), cnn.b_out);
  let out: number[] = vec_map_sig(out_net);
  return out;
}
function train(cnn: CNN, samples: TrainSample[], epochs: number): CNN {
  let w_out: number[][] = cnn.w_out;
  let b_out: number[] = cnn.b_out;
  let w_hidden: number[][] = cnn.w_hidden;
  let b_hidden: number[] = cnn.b_hidden;
  let e: number = 0;
  while ((e < epochs)) {
    let s: number = 0;
    while ((s < _len(samples))) {
      let data: TrainSample = samples[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()].image;
      let target: TrainSample = samples[(()=>{const _mochi_idx = s; return _mochi_idx < 0 ? samples.length + _mochi_idx : _mochi_idx;})()].target;
      let maps: number[][][] = [];
      let i: number = 0;
      while ((i < _len(cnn.conv_kernels))) {
        let conv_map = convolve(data, cnn.conv_kernels[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cnn.conv_kernels.length + _mochi_idx : _mochi_idx;})()], cnn.conv_step, cnn.conv_bias[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cnn.conv_bias.length + _mochi_idx : _mochi_idx;})()]);
        let pooled: number[][] = average_pool(conv_map, cnn.pool_size);
        maps.push(pooled);
        i = (i + 1);
      }
      let flat: number[] = flatten(maps);
      let hidden_net: number[] = vec_add(vec_mul_mat(flat, w_hidden), b_hidden);
      let hidden_out: number[] = vec_map_sig(hidden_net);
      let out_net: number[] = vec_add(vec_mul_mat(hidden_out, w_out), b_out);
      let out: number[] = vec_map_sig(out_net);
      let error_out = vec_sub(target, out);
      let pd_out: number[] = vec_mul(error_out, vec_mul(out, vec_sub([1.0, 1.0], out)));
      let error_hidden: number[] = matT_vec_mul(w_out, pd_out);
      let pd_hidden: number[] = vec_mul(error_hidden, vec_mul(hidden_out, vec_sub([1.0, 1.0], hidden_out)));
      let j: number = 0;
      while ((j < _len(w_out))) {
        let k: number = 0;
        while ((k < _len(w_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? w_out.length + _mochi_idx : _mochi_idx;})()]))) {
          w_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? w_out.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? w_out.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (w_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? w_out.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? w_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? w_out.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + ((cnn.rate_weight * hidden_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? hidden_out.length + _mochi_idx : _mochi_idx;})()]) * pd_out[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? pd_out.length + _mochi_idx : _mochi_idx;})()]));
          k = (k + 1);
        }
        j = (j + 1);
      }
      j = 0;
      while ((j < _len(b_out))) {
        b_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b_out.length + _mochi_idx : _mochi_idx;})()] = (b_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b_out.length + _mochi_idx : _mochi_idx;})()] - (cnn.rate_bias * pd_out[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? pd_out.length + _mochi_idx : _mochi_idx;})()]));
        j = (j + 1);
      }
      let i_h: number = 0;
      while ((i_h < _len(w_hidden))) {
        let j_h: number = 0;
        while ((j_h < _len(w_hidden[(()=>{const _mochi_idx = i_h; return _mochi_idx < 0 ? w_hidden.length + _mochi_idx : _mochi_idx;})()]))) {
          w_hidden[(()=>{const _mochi_idx = i_h; return _mochi_idx < 0 ? w_hidden.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j_h; return _mochi_idx < 0 ? w_hidden[(()=>{const _mochi_idx = i_h; return _mochi_idx < 0 ? w_hidden.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] = (w_hidden[(()=>{const _mochi_idx = i_h; return _mochi_idx < 0 ? w_hidden.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j_h; return _mochi_idx < 0 ? w_hidden[(()=>{const _mochi_idx = i_h; return _mochi_idx < 0 ? w_hidden.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] + ((cnn.rate_weight * flat[(()=>{const _mochi_idx = i_h; return _mochi_idx < 0 ? flat.length + _mochi_idx : _mochi_idx;})()]) * pd_hidden[(()=>{const _mochi_idx = j_h; return _mochi_idx < 0 ? pd_hidden.length + _mochi_idx : _mochi_idx;})()]));
          j_h = (j_h + 1);
        }
        i_h = (i_h + 1);
      }
      j = 0;
      while ((j < _len(b_hidden))) {
        b_hidden[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b_hidden.length + _mochi_idx : _mochi_idx;})()] = (b_hidden[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? b_hidden.length + _mochi_idx : _mochi_idx;})()] - (cnn.rate_bias * pd_hidden[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? pd_hidden.length + _mochi_idx : _mochi_idx;})()]));
        j = (j + 1);
      }
      s = (s + 1);
    }
    e = (e + 1);
  }
  return {"conv_kernels": cnn.conv_kernels, "conv_bias": cnn.conv_bias, "conv_step": cnn.conv_step, "pool_size": cnn.pool_size, w_hidden, w_out, b_hidden, b_out, "rate_weight": cnn.rate_weight, "rate_bias": cnn.rate_bias};
}
function main() {
  let cnn: CNN = new_cnn();
  let image: number[][] = [[1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 1.0], [1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 1.0]];
  let sample: TrainSample = {image, "target": [1.0, 0.0]};
  console.log(_str("Before training:") + " " + _str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(forward(cnn, image))));
  let trained: CNN = train(cnn, [sample], 50);
  console.log(_str("After training:") + " " + _str(((v)=>v==null?"nil":"[" + v.join(' ') + "]")(forward(trained, image))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

