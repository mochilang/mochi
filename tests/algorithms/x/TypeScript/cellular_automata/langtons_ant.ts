// Generated by Mochi v0.10.59 on 2025-08-06 20:03:08 GMT+7

function create_board(width: number, height: number): boolean[][] {
  let board: boolean[][] = [];
  let i: number = 0;
  while ((i < height)) {
    let row: boolean[] = [];
    let j: number = 0;
    while ((j < width)) {
      row.push(true);
      j = (j + 1);
    }
    board.push(row);
    i = (i + 1);
  }
  return board;
}
function move_ant(board: boolean[][], x: number, y: number, direction: number): number[] {
  if (board[x][y]) {
    direction = ((direction + 1) % 4);
  } else {
    direction = ((direction + 3) % 4);
  }
  let old_x: number = x;
  let old_y: number = y;
  if ((direction == 0)) {
    x = (x - 1);
  } else {
    if ((direction == 1)) {
      y = (y + 1);
    } else {
      if ((direction == 2)) {
        x = (x + 1);
      } else {
        y = (y - 1);
      }
    }
  }
  board[old_x][old_y] = !board[old_x][old_y];
  return [x, y, direction];
}
function langtons_ant(width: number, height: number, steps: number): boolean[][] {
  let board: boolean[][] = create_board(width, height);
  let x: number = Math.trunc(width / 2);
  let y: number = Math.trunc(height / 2);
  let dir: number = 3;
  let s: number = 0;
  while ((s < steps)) {
    let state: number[] = move_ant(board, x, y, dir);
    x = state[Math.trunc(0)];
    y = state[Math.trunc(1)];
    dir = state[Math.trunc(2)];
    s = (s + 1);
  }
  return board;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

