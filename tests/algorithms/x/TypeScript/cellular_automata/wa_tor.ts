// Generated by Mochi v0.10.59 on 2025-08-06 20:04:13 GMT+7

let WIDTH: number = 10;
let HEIGHT: number = 10;
let PREY_INITIAL_COUNT: number = 20;
let PREY_REPRODUCTION_TIME: number = 5;
let PREDATOR_INITIAL_COUNT: number = 5;
let PREDATOR_REPRODUCTION_TIME: number = 20;
let PREDATOR_INITIAL_ENERGY: number = 15;
let PREDATOR_FOOD_VALUE: number = 5;
let TYPE_PREY: number = 0;
let TYPE_PREDATOR: number = 1;
let seed: number = 123456789;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function rand_range(max: number): number {
  return (rand() % max);
}
function shuffle(list_int: number[]): number[] {
  let i: number = (_len(list_int) - 1);
  while ((i > 0)) {
    let j: number = rand_range((i + 1));
    let tmp: number = list_int[i];
    list_int[i] = list_int[j];
    list_int[j] = tmp;
    i = (i - 1);
  }
  return list_int;
}
function create_board(): number[][] {
  let board: number[][] = [];
  let r: number = 0;
  while ((r < HEIGHT)) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < WIDTH)) {
      row.push(0);
      c = (c + 1);
    }
    board.push(row);
    r = (r + 1);
  }
  return board;
}
function create_prey(r: number, c: number): number[] {
  return [TYPE_PREY, r, c, PREY_REPRODUCTION_TIME, 0, 1];
}
function create_predator(r: number, c: number): number[] {
  return [TYPE_PREDATOR, r, c, PREDATOR_REPRODUCTION_TIME, PREDATOR_INITIAL_ENERGY, 1];
}
let entities: number[][] = [];
function empty_cell(r: number, c: number): boolean {
  return (board[r][c] == 0);
}
function add_entity(typ: number) {
  while (true) {
    let r: number = rand_range(HEIGHT);
    let c: number = rand_range(WIDTH);
    if (empty_cell(r, c)) {
      if ((typ == TYPE_PREY)) {
        board[r][c] = 1;
        entities.push(create_prey(r, c));
      } else {
        board[r][c] = 2;
        entities.push(create_predator(r, c));
      }
      return;
    }
  }
}
function setup() {
  let i: number = 0;
  while ((i < PREY_INITIAL_COUNT)) {
    add_entity(TYPE_PREY);
    i = (i + 1);
  }
  i = 0;
  while ((i < PREDATOR_INITIAL_COUNT)) {
    add_entity(TYPE_PREDATOR);
    i = (i + 1);
  }
}
function inside(r: number, c: number): boolean {
  return ((((r >= 0) && (r < HEIGHT)) && (c >= 0)) && (c < WIDTH));
}
function find_prey(r: number, c: number): number {
  let i: number = 0;
  while ((i < _len(entities))) {
    let e: number[] = entities[i];
    if (((((e[Math.trunc(5)] == 1) && (e[Math.trunc(0)] == TYPE_PREY)) && (e[Math.trunc(1)] == r)) && (e[Math.trunc(2)] == c))) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function step_world() {
  let i: number = 0;
  while ((i < _len(entities))) {
    let e: number[] = entities[i];
    if ((e[Math.trunc(5)] == 0)) {
      i = (i + 1);
      continue
    }
    let typ: number = e[Math.trunc(0)];
    let row: number = e[Math.trunc(1)];
    let col: number = e[Math.trunc(2)];
    let repro: number = e[Math.trunc(3)];
    let energy: number = e[Math.trunc(4)];
    let dirs: number[] = [0, 1, 2, 3];
    dirs = shuffle(dirs);
    let moved: boolean = false;
    let old_r: number = row;
    let old_c: number = col;
    if ((typ == TYPE_PREDATOR)) {
      let j: number = 0;
      let ate: boolean = false;
      while ((j < 4)) {
        let d: number = dirs[j];
        let nr: number = (row + dr[d]);
        let nc: number = (col + dc[d]);
        if ((inside(nr, nc) && (board[nr][nc] == 1))) {
          let prey_index: number = find_prey(nr, nc);
          if ((prey_index >= 0)) {
            entities[prey_index][5] = 0;
          }
          board[nr][nc] = 2;
          board[row][col] = 0;
          e[1] = nr;
          e[2] = nc;
          e[4] = ((energy + PREDATOR_FOOD_VALUE) - 1);
          moved = true;
          ate = true;
          break
        }
        j = (j + 1);
      }
      if (!ate) {
        j = 0;
        while ((j < 4)) {
          let d: number = dirs[j];
          let nr: number = (row + dr[d]);
          let nc: number = (col + dc[d]);
          if ((inside(nr, nc) && (board[nr][nc] == 0))) {
            board[nr][nc] = 2;
            board[row][col] = 0;
            e[1] = nr;
            e[2] = nc;
            moved = true;
            break
          }
          j = (j + 1);
        }
        e[4] = (energy - 1);
      }
      if ((e[Math.trunc(4)] <= 0)) {
        e[5] = 0;
        board[e[Math.trunc(1)]][e[Math.trunc(2)]] = 0;
      }
    } else {
      let j: number = 0;
      while ((j < 4)) {
        let d: number = dirs[j];
        let nr: number = (row + dr[d]);
        let nc: number = (col + dc[d]);
        if ((inside(nr, nc) && (board[nr][nc] == 0))) {
          board[nr][nc] = 1;
          board[row][col] = 0;
          e[1] = nr;
          e[2] = nc;
          moved = true;
          break
        }
        j = (j + 1);
      }
    }
    if ((e[Math.trunc(5)] == 1)) {
      if ((moved && (repro <= 0))) {
        if ((typ == TYPE_PREY)) {
          board[old_r][old_c] = 1;
          entities.push(create_prey(old_r, old_c));
          e[3] = PREY_REPRODUCTION_TIME;
        } else {
          board[old_r][old_c] = 2;
          entities.push(create_predator(old_r, old_c));
          e[3] = PREDATOR_REPRODUCTION_TIME;
        }
      } else {
        e[3] = (repro - 1);
      }
    }
    i = (i + 1);
  }
  let alive: number[][] = [];
  let k: number = 0;
  while ((k < _len(entities))) {
    let e2: number[] = entities[k];
    if ((e2[Math.trunc(5)] == 1)) {
      alive.push(e2);
    }
    k = (k + 1);
  }
  entities = alive;
}
function count_entities(typ: number): number {
  let cnt: number = 0;
  let i: number = 0;
  while ((i < _len(entities))) {
    if (((entities[i][Math.trunc(0)] == typ) && (entities[i][Math.trunc(5)] == 1))) {
      cnt = (cnt + 1);
    }
    i = (i + 1);
  }
  return cnt;
}
let t: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let board: number[][]
let dr: number[]
let dc: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
board = create_board()
dr = [-1, 0, 1, 0]
dc = [0, 1, 0, -1]
  setup();
  while ((t < 10)) {
    step_world();
    t = (t + 1);
  }
  console.log(_str(("Prey: " + _str(count_entities(TYPE_PREY)))));
  console.log(_str(("Predators: " + _str(count_entities(TYPE_PREDATOR)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

