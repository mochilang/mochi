// Generated by Mochi v0.10.59 on 2025-08-06 20:03:55 GMT+7

function format_ruleset(ruleset: number): number[] {
  let rs: number = ruleset;
  let bits_rev: number[] = [];
  let i: number = 0;
  while ((i < 8)) {
    bits_rev.push((rs % 2));
    rs = Math.trunc(rs / 2);
    i = (i + 1);
  }
  let bits: number[] = [];
  let j: number = (_len(bits_rev) - 1);
  while ((j >= 0)) {
    bits.push(bits_rev[j]);
    j = (j - 1);
  }
  return bits;
}
function new_generation(cells: number[][], rules: number[], time: number): number[] {
  let population: number = _len(cells[Math.trunc(0)]);
  let next_generation: number[] = [];
  let i: number = 0;
  while ((i < population)) {
    let left_neighbor: number = ((i == 0) ? 0 : cells[time][Math.trunc((i - 1))]);
    let right_neighbor: number = ((i == (population - 1)) ? 0 : cells[time][Math.trunc((i + 1))]);
    let center: number = cells[time][i];
    let idx: number = (7 - (((left_neighbor * 4) + (center * 2)) + right_neighbor));
    next_generation.push(rules[idx]);
    i = (i + 1);
  }
  return next_generation;
}
function cells_to_string(row: number[]): string {
  let result: string = "";
  let i: number = 0;
  while ((i < _len(row))) {
    if ((row[i] == 1)) {
      result = (result + "#");
    } else {
      result = (result + ".");
    }
    i = (i + 1);
  }
  return result;
}
let initial: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
let time: number = 0;
let t: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let cells: number[][]
let rules: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
cells = [initial]
rules = format_ruleset(30)
  while ((time < 16)) {
    let next: number[] = new_generation(cells, rules, time);
    cells.push(next);
    time = (time + 1);
  }
  while ((t < _len(cells))) {
    console.log(_str(cells_to_string(cells[t])));
    t = (t + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

