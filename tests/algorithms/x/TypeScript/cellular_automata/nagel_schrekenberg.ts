// Generated by Mochi v0.10.59 on 2025-08-06 20:03:38 GMT+7

let seed: number = 1;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function randint(a: number, b: number): number {
  let r: number = rand();
  return (a + (r % ((b - a) + 1)));
}
function random(): number {
  return ((1.0 * rand()) / 2147483648.0);
}
function construct_highway(number_of_cells: number, frequency: number, initial_speed: number, random_frequency: boolean, random_speed: boolean, max_speed: number): number[][] {
  let row: number[] = [];
  let i: number = 0;
  while ((i < number_of_cells)) {
    row.push(-1);
    i = (i + 1);
  }
  let highway: number[][] = [];
  highway.push(row);
  i = 0;
  if ((initial_speed < 0)) {
    initial_speed = 0;
  }
  while ((i < number_of_cells)) {
    let speed: number = initial_speed;
    if (random_speed) {
      speed = randint(0, max_speed);
    }
    highway[0][i] = speed;
    let step: number = frequency;
    if (random_frequency) {
      step = randint(1, (max_speed * 2));
    }
    i = (i + step);
  }
  return highway;
}
function get_distance(highway_now: number[], car_index: number): number {
  let distance: number = 0;
  let i: number = (car_index + 1);
  while ((i < _len(highway_now))) {
    if ((highway_now[i] > NEG_ONE)) {
      return distance;
    }
    distance = (distance + 1);
    i = (i + 1);
  }
  return (distance + get_distance(highway_now, -1));
}
function update(highway_now: number[], probability: number, max_speed: number): number[] {
  let number_of_cells: number = _len(highway_now);
  let next_highway: number[] = [];
  let i: number = 0;
  while ((i < number_of_cells)) {
    next_highway.push(-1);
    i = (i + 1);
  }
  let car_index: number = 0;
  while ((car_index < number_of_cells)) {
    let speed: number = highway_now[car_index];
    if ((speed > NEG_ONE)) {
      let new_speed: number = (speed + 1);
      if ((new_speed > max_speed)) {
        new_speed = max_speed;
      }
      let dn: number = (get_distance(highway_now, car_index) - 1);
      if ((new_speed > dn)) {
        new_speed = dn;
      }
      if ((random() < probability)) {
        new_speed = (new_speed - 1);
        if ((new_speed < 0)) {
          new_speed = 0;
        }
      }
      next_highway[car_index] = new_speed;
    }
    car_index = (car_index + 1);
  }
  return next_highway;
}
function simulate(highway: number[][], number_of_update: number, probability: number, max_speed: number): number[][] {
  let number_of_cells: number = _len(highway[Math.trunc(0)]);
  let i: number = 0;
  while ((i < number_of_update)) {
    let next_speeds: number[] = update(highway[i], probability, max_speed);
    let real_next: number[] = [];
    let j: number = 0;
    while ((j < number_of_cells)) {
      real_next.push(-1);
      j = (j + 1);
    }
    let k: number = 0;
    while ((k < number_of_cells)) {
      let speed: number = next_speeds[k];
      if ((speed > NEG_ONE)) {
        let index: number = ((k + speed) % number_of_cells);
        real_next[index] = speed;
      }
      k = (k + 1);
    }
    highway.push(real_next);
    i = (i + 1);
  }
  return highway;
}
function main() {
  let ex1: number[][] = simulate(construct_highway(6, 3, 0, false, false, 2), 2, 0.0, 2);
  console.log(_str(_str(ex1)));
  let ex2: number[][] = simulate(construct_highway(5, 2, -2, false, false, 2), 3, 0.0, 2);
  console.log(_str(_str(ex2)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let NEG_ONE: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
NEG_ONE = -1
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

