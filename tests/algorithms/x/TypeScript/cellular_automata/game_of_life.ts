// Generated by Mochi v0.10.59 on 2025-08-06 19:20:12 GMT+7

function count_alive_neighbours(board: boolean[][], row: number, col: number): number {
  let size: number = _len(board);
  let alive: number = 0;
  let dr: number = -1;
  while ((dr < 2)) {
    let dc: number = -1;
    while ((dc < 2)) {
      let nr: number = (row + dr);
      let nc: number = (col + dc);
      if (((((!((dr == 0) && (dc == 0)) && (nr >= 0)) && (nr < size)) && (nc >= 0)) && (nc < size))) {
        if (board[nr][nc]) {
          alive = (alive + 1);
        }
      }
      dc = (dc + 1);
    }
    dr = (dr + 1);
  }
  return alive;
}
function next_state(current: boolean, alive: number): boolean {
  let state: boolean = current;
  if (current) {
    if ((alive < 2)) {
      state = false;
    } else {
      if (((alive == 2) || (alive == 3))) {
        state = true;
      } else {
        state = false;
      }
    }
  } else {
    if ((alive == 3)) {
      state = true;
    }
  }
  return state;
}
function step(board: boolean[][]): boolean[][] {
  let size: number = _len(board);
  let new_board: boolean[][] = [];
  let r: number = 0;
  while ((r < size)) {
    let new_row: boolean[] = [];
    let c: number = 0;
    while ((c < size)) {
      let alive: number = count_alive_neighbours(board, r, c);
      let cell: boolean = board[r][c];
      let updated: boolean = next_state(cell, alive);
      new_row.push(updated);
      c = (c + 1);
    }
    new_board.push(new_row);
    r = (r + 1);
  }
  return new_board;
}
function show(board: boolean[][]) {
  let r: number = 0;
  while ((r < _len(board))) {
    let line: string = "";
    let c: number = 0;
    while ((c < _len(board[r]))) {
      if (board[r][c]) {
        line = (line + "#");
      } else {
        line = (line + ".");
      }
      c = (c + 1);
    }
    console.log(_str(line));
    r = (r + 1);
  }
}
let glider: boolean[][] = [[false, true, false, false, false], [false, false, true, false, false], [true, true, true, false, false], [false, false, false, false, false], [false, false, false, false, false]];
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let board: boolean[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
board = glider
  console.log(_str("Initial"));
  show(board);
  while ((i < 4)) {
    board = step(board);
    console.log(_str(("\nStep " + _str((i + 1)))));
    show(board);
    i = (i + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

