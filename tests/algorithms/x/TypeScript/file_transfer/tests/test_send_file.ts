// Generated by Mochi v0.10.61 on 2025-08-08 18:00:18 GMT+7

export interface ConnMock { recv_called: number; send_called: number; close_called: number }
function make_conn_mock(): ConnMock {
  return {"recv_called": 0, "send_called": 0, "close_called": 0};
}
function conn_recv(conn: ConnMock, size: number): number {
  conn.recv_called = (conn.recv_called + 1);
  return 0;
}
function conn_send(conn: ConnMock, data: number) {
  conn.send_called = (conn.send_called + 1);
}
function conn_close(conn: ConnMock) {
  conn.close_called = (conn.close_called + 1);
}
export interface SocketMock { bind_called: number; listen_called: number; accept_called: number; shutdown_called: number; close_called: number; conn: ConnMock }
function make_socket_mock(conn: ConnMock): SocketMock {
  return {"bind_called": 0, "listen_called": 0, "accept_called": 0, "shutdown_called": 0, "close_called": 0, conn};
}
function socket_bind(sock: SocketMock) {
  sock.bind_called = (sock.bind_called + 1);
}
function socket_listen(sock: SocketMock) {
  sock.listen_called = (sock.listen_called + 1);
}
function socket_accept(sock: SocketMock): ConnMock {
  sock.accept_called = (sock.accept_called + 1);
  return sock.conn;
}
function socket_shutdown(sock: SocketMock) {
  sock.shutdown_called = (sock.shutdown_called + 1);
}
function socket_close(sock: SocketMock) {
  sock.close_called = (sock.close_called + 1);
}
export interface FileMock { read_called: number; data: number[] }
function make_file_mock(values: number[]): FileMock {
  return {"read_called": 0, "data": values};
}
function file_read(f: FileMock, size: number): number {
  if ((f.read_called < _len(f.data))) {
    let value: number = f.data[(()=>{const _mochi_idx = Math.trunc(f.read_called); return _mochi_idx < 0 ? f.data.length + _mochi_idx : _mochi_idx;})()];
    f.read_called = (f.read_called + 1);
    return value;
  }
  f.read_called = (f.read_called + 1);
  return 0;
}
function file_open(): FileMock {
  return make_file_mock([1, 0]);
}
function send_file(sock: SocketMock, f: FileMock) {
  socket_bind(sock);
  socket_listen(sock);
  let conn: ConnMock = socket_accept(sock);
  let _: number = conn_recv(conn, 1024);
  let data: number = file_read(f, 1024);
  while ((data != 0)) {
    conn_send(conn, data);
    data = file_read(f, 1024);
  }
  conn_close(conn);
  socket_shutdown(sock);
  socket_close(sock);
}
function test_send_file_running_as_expected(): string {
  let conn: ConnMock = make_conn_mock();
  let sock: SocketMock = make_socket_mock(conn);
  let f: FileMock = file_open();
  send_file(sock, f);
  if ((((((((((sock.bind_called == 1) && (sock.listen_called == 1)) && (sock.accept_called == 1)) && (conn.recv_called == 1)) && (f.read_called >= 1)) && (conn.send_called == 1)) && (conn.close_called == 1)) && (sock.shutdown_called == 1)) && (sock.close_called == 1))) {
    return "pass";
  }
  return "fail";
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(test_send_file_running_as_expected()));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

