// Generated by Mochi v0.10.63 on 2025-08-11 14:53:25 GMT+7

export interface OPEN_TO_CLOSED { "(": string; "[": string; "{": string }
let OPEN_TO_CLOSED: OPEN_TO_CLOSED = {"(": ")", "[": "]", "{": "}"};
function slice_without_last(xs: string[]): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < (_len(xs) - 1))) {
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  return res;
}
function is_balanced(s: string): boolean {
  let stack: string[] = [];
  let i: number = 0;
  while ((i < _len(s))) {
    let _symbol: string = (s).substring(i, (i + 1));
    if ((_symbol in OPEN_TO_CLOSED)) {
      stack.push(_symbol);
    } else {
      if ((((_symbol == ")") || (_symbol == "]")) || (_symbol == "}"))) {
        if ((_len(stack) == 0)) {
          return false;
        }
        let top: string = stack[(()=>{const _mochi_idx = Math.trunc((_len(stack) - 1)); return _mochi_idx < 0 ? stack.length + _mochi_idx : _mochi_idx;})()];
        if ((OPEN_TO_CLOSED[top] != _symbol)) {
          return false;
        }
        stack = slice_without_last(stack);
      }
    }
    i = (i + 1);
  }
  return (_len(stack) == 0);
}
function main() {
  console.log(_str(is_balanced("")));
  console.log(_str(is_balanced("()")));
  console.log(_str(is_balanced("[]")));
  console.log(_str(is_balanced("{}")));
  console.log(_str(is_balanced("()[]{}")));
  console.log(_str(is_balanced("(())")));
  console.log(_str(is_balanced("[[")));
  console.log(_str(is_balanced("([{}])")));
  console.log(_str(is_balanced("(()[)]")));
  console.log(_str(is_balanced("([)]")));
  console.log(_str(is_balanced("[[()]]")));
  console.log(_str(is_balanced("(()(()))")));
  console.log(_str(is_balanced("]")));
  console.log(_str(is_balanced("Life is a bowl of cherries.")));
  console.log(_str(is_balanced("Life is a bowl of che{}ies.")));
  console.log(_str(is_balanced("Life is a bowl of che}{ies.")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

