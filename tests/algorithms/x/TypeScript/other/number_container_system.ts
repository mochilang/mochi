// Generated by Mochi v0.10.69 on 2025-08-19 16:42:02 GMT+7

export interface NumberContainer { numbermap: Record<number, number[]>; indexmap: Record<number, number> }
function remove_at(xs: number[], idx: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i !== idx)) {
      res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function insert_at(xs: number[], idx: number, val: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((i === idx)) {
      res.push(val);
    }
    res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  if ((idx === _len(xs))) {
    res.push(val);
  }
  return res;
}
function binary_search_delete(array: number[], item: number): number[] {
  let low: number = 0;
  let high: bigint = (_len(array) - 1);
  let arr: number[] = array;
  while ((low <= high)) {
    let mid: bigint = Math.trunc((low + high) / 2);
    if ((arr[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === item)) {
      arr = remove_at(arr, mid);
      return arr;
    } else {
      if ((arr[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < item)) {
        low = (mid + 1);
      } else {
        high = (mid - 1);
      }
    }
  }
  console.log(_str("ValueError: Either the item is not in the array or the array was unsorted"));
  return arr;
}
function binary_search_insert(array: number[], index: number): number[] {
  let low: number = 0;
  let high: bigint = (_len(array) - 1);
  let arr: number[] = array;
  while ((low <= high)) {
    let mid: bigint = Math.trunc((low + high) / 2);
    if ((arr[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === index)) {
      arr = insert_at(arr, (mid + 1), index);
      return arr;
    } else {
      if ((arr[(()=>{const _mochi_idx = mid; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < index)) {
        low = (mid + 1);
      } else {
        high = (mid - 1);
      }
    }
  }
  arr = insert_at(arr, low, index);
  return arr;
}
function change(cont: NumberContainer, idx: number, num: number): NumberContainer {
  let numbermap: Record<number, number[]> = cont.numbermap;
  let indexmap: Record<number, number> = cont.indexmap;
  if ((idx in indexmap)) {
    let old: number = indexmap[idx];
    let indexes: number[] = numbermap[old];
    if ((_len(indexes) === 1)) {
      numbermap[(()=>{const _mochi_idx = old; return _mochi_idx < 0 ? numbermap.length + _mochi_idx : _mochi_idx;})()] = [];
    } else {
      numbermap[(()=>{const _mochi_idx = old; return _mochi_idx < 0 ? numbermap.length + _mochi_idx : _mochi_idx;})()] = binary_search_delete(indexes, idx);
    }
  }
  indexmap[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? indexmap.length + _mochi_idx : _mochi_idx;})()] = num;
  if ((num in numbermap)) {
    numbermap[(()=>{const _mochi_idx = num; return _mochi_idx < 0 ? numbermap.length + _mochi_idx : _mochi_idx;})()] = binary_search_insert(numbermap[num], idx);
  } else {
    numbermap[(()=>{const _mochi_idx = num; return _mochi_idx < 0 ? numbermap.length + _mochi_idx : _mochi_idx;})()] = [idx];
  }
  return {numbermap, indexmap};
}
function find(cont: NumberContainer, num: number): number {
  let numbermap: Record<number, number[]> = cont.numbermap;
  if ((num in numbermap)) {
    let arr = numbermap[num];
    if ((_len(arr) > 0)) {
      return arr[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    }
  }
  return -1;
}
let nm: Record<number, number[]> = {};
let im: Record<number, number> = {};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  if (Array.isArray(x)) {
    return x.map(_str).join(',');
  }
  if (x && typeof x === 'object') {
    try { return JSON.stringify(x); } catch { return String(x); }
  }
  return String(x);
}
let cont: NumberContainer
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
cont = {numbermap: nm, indexmap: im}
  console.log(_str(find(cont, 10)));
  cont = change(cont, 0, 10);
  console.log(_str(find(cont, 10)));
  cont = change(cont, 0, 20);
  console.log(_str(find(cont, 10)));
  console.log(_str(find(cont, 20)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log('\n' + JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

