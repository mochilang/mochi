// Generated by Mochi v0.10.64 on 2025-08-12 14:09:55 GMT+7

function apply_table(inp: string, table: number[]): string {
  let res: string = "";
  let i: number = 0;
  while ((i < _len(table))) {
    let idx: number = (table[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? table.length + _mochi_idx : _mochi_idx;})()] - 1);
    if ((idx < 0)) {
      idx = (_len(inp) - 1);
    }
    res = (res + inp.slice(idx, (idx + 1)));
    i = (i + 1);
  }
  return res;
}
function left_shift(data: string): string {
  return (data.slice(1, _len(data)) + data.slice(0, 1));
}
function xor(a: string, b: string): string {
  let res: string = "";
  let i: number = 0;
  while (((i < _len(a)) && (i < _len(b)))) {
    if ((a.slice(i, (i + 1)) === b.slice(i, (i + 1)))) {
      res = (res + "0");
    } else {
      res = (res + "1");
    }
    i = (i + 1);
  }
  return res;
}
function int_to_binary(n: number): string {
  if ((n === 0)) {
    return "0";
  }
  let res: string = "";
  let num: number = n;
  while ((num > 0)) {
    res = (_str((num % 2)) + res);
    num = Math.trunc(num / 2);
  }
  return res;
}
function pad_left(s: string, width: number): string {
  let res: string = s;
  while ((_len(res) < width)) {
    res = ("0" + res);
  }
  return res;
}
function bin_to_int(s: string): number {
  let result: number = 0;
  let i: number = 0;
  while ((i < _len(s))) {
    let digit: number = parseIntStr(s.slice(i, (i + 1)), 10);
    result = ((result * 2) + digit);
    i = (i + 1);
  }
  return result;
}
function apply_sbox(s: number[][], data: string): string {
  let row_bits: string = (data.slice(0, 1) + data.slice((_len(data) - 1), _len(data)));
  let col_bits: string = data.slice(1, 3);
  let row: number = bin_to_int(row_bits);
  let col: number = bin_to_int(col_bits);
  let val: number = s[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = col; return _mochi_idx < 0 ? s[(()=>{const _mochi_idx = row; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()];
  let out: string = int_to_binary(val);
  return out;
}
let p4_table: number[] = [2, 4, 3, 1];
function f(expansion: number[], s0: number[][], s1: number[][], key: string, message: string): string {
  let left: string = message.slice(0, 4);
  let right: string = message.slice(4, 8);
  let temp: string = apply_table(right, expansion);
  temp = xor(temp, key);
  let left_bin_str: string = apply_sbox(s0, temp.slice(0, 4));
  let right_bin_str: string = apply_sbox(s1, temp.slice(4, 8));
  left_bin_str = pad_left(left_bin_str, 2);
  right_bin_str = pad_left(right_bin_str, 2);
  temp = apply_table((left_bin_str + right_bin_str), p4_table);
  temp = xor(left, temp);
  return (temp + right);
}
let key: string = "1010000010";
let message: string = "11010111";
let p8_table: number[] = [6, 3, 7, 4, 8, 5, 10, 9];
let p10_table: number[] = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6];
let IP: number[] = [2, 6, 3, 1, 4, 8, 5, 7];
let IP_inv: number[] = [4, 1, 3, 5, 7, 2, 8, 6];
let expansion: number[] = [4, 1, 2, 3, 2, 3, 4, 1];
let s0: number[][] = [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]];
let s1: number[][] = [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let temp: string
let left: string
let right: string
let key1: string
let key2: string
let CT: string
let PT: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
temp = apply_table(key, p10_table)
left = temp.slice(0, 5)
right = temp.slice(5, 10)
  left = left_shift(left);
  right = left_shift(right);
key1 = apply_table((left + right), p8_table)
  left = left_shift(left);
  right = left_shift(right);
  left = left_shift(left);
  right = left_shift(right);
key2 = apply_table((left + right), p8_table)
  temp = apply_table(message, IP);
  temp = f(expansion, s0, s1, key1, temp);
  temp = (temp.slice(4, 8) + temp.slice(0, 4));
  temp = f(expansion, s0, s1, key2, temp);
CT = apply_table(temp, IP_inv)
  console.log(_str(("Cipher text is: " + CT)));
  temp = apply_table(CT, IP);
  temp = f(expansion, s0, s1, key2, temp);
  temp = (temp.slice(4, 8) + temp.slice(0, 4));
  temp = f(expansion, s0, s1, key1, temp);
PT = apply_table(temp, IP_inv)
  console.log(_str(("Plain text after decypting is: " + PT)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

