// Generated by Mochi v0.10.59 on 2025-08-07 08:17:55 GMT+7

function get_data(source_data: number[][]): number[][] {
  let data_lists: number[][] = [];
  let i: number = 0;
  while ((i < _len(source_data))) {
    let row: number[] = source_data[(i) < 0 ? source_data.length + (i) : i];
    let j: number = 0;
    while ((j < _len(row))) {
      if ((_len(data_lists) < (j + 1))) {
        let empty: number[] = [];
        data_lists.push(empty);
      }
      data_lists[(j) < 0 ? data_lists.length + (j) : j] = [...data_lists[(j) < 0 ? data_lists.length + (j) : j], row[(j) < 0 ? row.length + (j) : j]];
      j = (j + 1);
    }
    i = (i + 1);
  }
  return data_lists;
}
function calculate_each_score(data_lists: number[][], weights: number[]): number[][] {
  let score_lists: number[][] = [];
  let i: number = 0;
  while ((i < _len(data_lists))) {
    let dlist: number[] = data_lists[(i) < 0 ? data_lists.length + (i) : i];
    let weight: number = weights[(i) < 0 ? weights.length + (i) : i];
    let mind: number = dlist[(Math.trunc(0)) < 0 ? dlist.length + (Math.trunc(0)) : Math.trunc(0)];
    let maxd: number = dlist[(Math.trunc(0)) < 0 ? dlist.length + (Math.trunc(0)) : Math.trunc(0)];
    let j: number = 1;
    while ((j < _len(dlist))) {
      let val: number = dlist[(j) < 0 ? dlist.length + (j) : j];
      if ((val < mind)) {
        mind = val;
      }
      if ((val > maxd)) {
        maxd = val;
      }
      j = (j + 1);
    }
    let score: number[] = [];
    j = 0;
    if ((weight == 0)) {
      while ((j < _len(dlist))) {
        let item: number = dlist[(j) < 0 ? dlist.length + (j) : j];
        if (((maxd - mind) == 0.0)) {
          score.push(1.0);
        } else {
          score.push((1.0 - ((item - mind) / (maxd - mind))));
        }
        j = (j + 1);
      }
    } else {
      while ((j < _len(dlist))) {
        let item: number = dlist[(j) < 0 ? dlist.length + (j) : j];
        if (((maxd - mind) == 0.0)) {
          score.push(0.0);
        } else {
          score.push(((item - mind) / (maxd - mind)));
        }
        j = (j + 1);
      }
    }
    score_lists.push(score);
    i = (i + 1);
  }
  return score_lists;
}
function generate_final_scores(score_lists: number[][]): number[] {
  let count = _len(score_lists[(Math.trunc(0)) < 0 ? score_lists.length + (Math.trunc(0)) : Math.trunc(0)]);
  let final_scores: number[] = [];
  let i: number = 0;
  while ((i < count)) {
    final_scores.push(0.0);
    i = (i + 1);
  }
  i = 0;
  while ((i < _len(score_lists))) {
    let slist: number[] = score_lists[(i) < 0 ? score_lists.length + (i) : i];
    let j: number = 0;
    while ((j < _len(slist))) {
      final_scores[(j) < 0 ? final_scores.length + (j) : j] = (final_scores[(j) < 0 ? final_scores.length + (j) : j] + slist[(j) < 0 ? slist.length + (j) : j]);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return final_scores;
}
function procentual_proximity(source_data: number[][], weights: number[]): number[][] {
  let data_lists: number[][] = get_data(source_data);
  let score_lists: number[][] = calculate_each_score(data_lists, weights);
  let final_scores: number[] = generate_final_scores(score_lists);
  let i: number = 0;
  while ((i < _len(final_scores))) {
    source_data[(i) < 0 ? source_data.length + (i) : i] = [...source_data[(i) < 0 ? source_data.length + (i) : i], final_scores[(i) < 0 ? final_scores.length + (i) : i]];
    i = (i + 1);
  }
  return source_data;
}
let vehicles: number[][] = [];
let weights: number[] = [0, 0, 1];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let result: number[][]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  vehicles.push([20.0, 60.0, 2012.0]);
  vehicles.push([23.0, 90.0, 2015.0]);
  vehicles.push([22.0, 50.0, 2011.0]);
result = procentual_proximity(vehicles, weights)
  console.log(_str(_str(result)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

