// Generated by Mochi v0.10.63 on 2025-08-11 14:53:16 GMT+7

export interface Entry { key: number; val: number; freq: number; order: number }
export interface LFUCache { entries: Entry[]; capacity: number; hits: number; miss: number; tick: number }
export interface GetResult { cache: LFUCache; value: number; ok: boolean }
function lfu_new(cap: number): LFUCache {
  return {"entries": [], "capacity": cap, "hits": 0, "miss": 0, "tick": 0};
}
function find_entry(entries: Entry[], key: number): number {
  let i: number = 0;
  while ((i < _len(entries))) {
    let e: Entry = entries[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()];
    if ((e.key == key)) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
function lfu_get(cache: LFUCache, key: number): GetResult {
  let idx: number = find_entry(cache.entries, key);
  if ((idx == (0 - 1))) {
    let new_cache: LFUCache = {"entries": cache.entries, "capacity": cache.capacity, "hits": cache.hits, "miss": (cache.miss + 1), "tick": cache.tick};
    return {"cache": new_cache, "value": 0, "ok": false};
  }
  let entries: Entry[] = cache.entries;
  let e: Entry = entries[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()];
  e.freq = (e.freq + 1);
  let new_tick: number = (cache.tick + 1);
  e.order = new_tick;
  entries[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()] = e;
  let new_cache: LFUCache = {entries, "capacity": cache.capacity, "hits": (cache.hits + 1), "miss": cache.miss, "tick": new_tick};
  return {"cache": new_cache, "value": e.val, "ok": true};
}
function remove_lfu(entries: Entry[]): Entry[] {
  if ((_len(entries) == 0)) {
    return entries;
  }
  let min_idx: number = 0;
  let i: number = 1;
  while ((i < _len(entries))) {
    let e: Entry = entries[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()];
    let m: Entry = entries[(()=>{const _mochi_idx = min_idx; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()];
    if (((e.freq < m.freq) || ((e.freq == m.freq) && (e.order < m.order)))) {
      min_idx = i;
    }
    i = (i + 1);
  }
  let res: Entry[] = [];
  let j: number = 0;
  while ((j < _len(entries))) {
    if ((j != min_idx)) {
      res.push(entries[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()]);
    }
    j = (j + 1);
  }
  return res;
}
function lfu_put(cache: LFUCache, key: number, value: number): LFUCache {
  let entries: Entry[] = cache.entries;
  let idx: number = find_entry(entries, key);
  if ((idx != (0 - 1))) {
    let e: Entry = entries[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()];
    e.val = value;
    e.freq = (e.freq + 1);
    let new_tick: number = (cache.tick + 1);
    e.order = new_tick;
    entries[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? entries.length + _mochi_idx : _mochi_idx;})()] = e;
    return {entries, "capacity": cache.capacity, "hits": cache.hits, "miss": cache.miss, "tick": new_tick};
  }
  if ((_len(entries) >= cache.capacity)) {
    entries = remove_lfu(entries);
  }
  let new_tick: number = (cache.tick + 1);
  let new_entry: Entry = {key, "val": value, "freq": 1, "order": new_tick};
  entries.push(new_entry);
  return {entries, "capacity": cache.capacity, "hits": cache.hits, "miss": cache.miss, "tick": new_tick};
}
function cache_info(cache: LFUCache): string {
  return (((((((("CacheInfo(hits=" + _str(cache.hits)) + ", misses=") + _str(cache.miss)) + ", capacity=") + _str(cache.capacity)) + ", current_size=") + _str(_len(cache.entries))) + ")");
}
function main() {
  let cache: LFUCache = lfu_new(2);
  cache = lfu_put(cache, 1, 1);
  cache = lfu_put(cache, 2, 2);
  let r: GetResult = lfu_get(cache, 1);
  cache = r.cache;
  if (r.ok) {
    console.log(_str(_str(r.value)));
  } else {
    console.log(_str("None"));
  }
  cache = lfu_put(cache, 3, 3);
  r = lfu_get(cache, 2);
  cache = r.cache;
  if (r.ok) {
    console.log(_str(_str(r.value)));
  } else {
    console.log(_str("None"));
  }
  cache = lfu_put(cache, 4, 4);
  r = lfu_get(cache, 1);
  cache = r.cache;
  if (r.ok) {
    console.log(_str(_str(r.value)));
  } else {
    console.log(_str("None"));
  }
  r = lfu_get(cache, 3);
  cache = r.cache;
  if (r.ok) {
    console.log(_str(_str(r.value)));
  } else {
    console.log(_str("None"));
  }
  r = lfu_get(cache, 4);
  cache = r.cache;
  if (r.ok) {
    console.log(_str(_str(r.value)));
  } else {
    console.log(_str("None"));
  }
  console.log(_str(cache_info(cache)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

