// Generated by Mochi v0.10.64 on 2025-08-12 14:09:50 GMT+7

function index_of(xs: number[], x: number): number {
  let i: number = 0;
  while ((i < _len(xs))) {
    if ((xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()] === x)) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
function majority_vote(votes: number[], votes_needed_to_win: number): number[] {
  if ((votes_needed_to_win < 2)) {
    return [];
  }
  let candidates: number[] = [];
  let counts: number[] = [];
  let i: number = 0;
  while ((i < _len(votes))) {
    let v: number = votes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? votes.length + _mochi_idx : _mochi_idx;})()];
    let idx: number = index_of(candidates, v);
    if ((idx !== (0 - 1))) {
      counts[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = (counts[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] + 1);
    } else {
      if ((_len(candidates) < (votes_needed_to_win - 1))) {
        candidates.push(v);
        counts.push(1);
      } else {
        let j: number = 0;
        while ((j < _len(counts))) {
          counts[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] = (counts[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] - 1);
          j = (j + 1);
        }
        let new_candidates: number[] = [];
        let new_counts: number[] = [];
        j = 0;
        while ((j < _len(candidates))) {
          if ((counts[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()] > 0)) {
            new_candidates.push(candidates[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? candidates.length + _mochi_idx : _mochi_idx;})()]);
            new_counts.push(counts[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? counts.length + _mochi_idx : _mochi_idx;})()]);
          }
          j = (j + 1);
        }
        candidates = new_candidates;
        counts = new_counts;
      }
    }
    i = (i + 1);
  }
  let final_counts: number[] = [];
  let j: number = 0;
  while ((j < _len(candidates))) {
    final_counts.push(0);
    j = (j + 1);
  }
  i = 0;
  while ((i < _len(votes))) {
    let v: number = votes[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? votes.length + _mochi_idx : _mochi_idx;})()];
    let idx: number = index_of(candidates, v);
    if ((idx !== (0 - 1))) {
      final_counts[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? final_counts.length + _mochi_idx : _mochi_idx;})()] = (final_counts[(()=>{const _mochi_idx = idx; return _mochi_idx < 0 ? final_counts.length + _mochi_idx : _mochi_idx;})()] + 1);
    }
    i = (i + 1);
  }
  let result: number[] = [];
  j = 0;
  while ((j < _len(candidates))) {
    if (((final_counts[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? final_counts.length + _mochi_idx : _mochi_idx;})()] * votes_needed_to_win) > _len(votes))) {
      result.push(candidates[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? candidates.length + _mochi_idx : _mochi_idx;})()]);
    }
    j = (j + 1);
  }
  return result;
}
function main() {
  let votes: number[] = [1, 2, 2, 3, 1, 3, 2];
  console.log(_str(majority_vote(votes, 3)));
  console.log(_str(majority_vote(votes, 2)));
  console.log(_str(majority_vote(votes, 4)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

