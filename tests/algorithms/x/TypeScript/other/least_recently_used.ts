// Generated by Mochi v0.10.64 on 2025-08-12 14:09:45 GMT+7

export interface LRUCache { max_capacity: number; store: string[] }
function new_cache(n: number): LRUCache {
  if ((n < 0)) {
    _panic("n should be an integer greater than 0.");
  }
  let cap: number = ((n === 0) ? 2147483647 : n);
  return {"max_capacity": cap, "store": []};
}
function remove_element(xs: string[], x: string): string[] {
  let res: string[] = [];
  let removed: boolean = false;
  let i: number = 0;
  while ((i < _len(xs))) {
    let v: string = xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()];
    if (((removed === false) && (v === x))) {
      removed = true;
    } else {
      res.push(v);
    }
    i = (i + 1);
  }
  return res;
}
function refer(cache: LRUCache, x: string): LRUCache {
  let store: string[] = cache.store;
  let exists: boolean = false;
  let i: number = 0;
  while ((i < _len(store))) {
    if ((store[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? store.length + _mochi_idx : _mochi_idx;})()] === x)) {
      exists = true;
    }
    i = (i + 1);
  }
  if (exists) {
    store = remove_element(store, x);
  } else {
    if ((_len(store) === cache.max_capacity)) {
      let new_store: string[] = [];
      let j: number = 0;
      while ((j < (_len(store) - 1))) {
        new_store.push(store[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? store.length + _mochi_idx : _mochi_idx;})()]);
        j = (j + 1);
      }
      store = new_store;
    }
  }
  store = [...[x], ...store];
  return {"max_capacity": cache.max_capacity, store};
}
function display(cache: LRUCache) {
  let i: number = 0;
  while ((i < _len(cache.store))) {
    console.log(_str(cache.store[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cache.store.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
}
function repr_item(s: string): string {
  let all_digits: boolean = true;
  let i: number = 0;
  while ((i < _len(s))) {
    let ch: string = s[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? s.length + _mochi_idx : _mochi_idx;})()];
    if (((ch < "0") || (ch > "9"))) {
      all_digits = false;
    }
    i = (i + 1);
  }
  if (all_digits) {
    return s;
  }
  return (("'" + s) + "'");
}
function cache_repr(cache: LRUCache): string {
  let res: string = (("LRUCache(" + _str(cache.max_capacity)) + ") => [");
  let i: number = 0;
  while ((i < _len(cache.store))) {
    res = (res + repr_item(cache.store[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? cache.store.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(cache.store) - 1))) {
      res = (res + ", ");
    }
    i = (i + 1);
  }
  res = (res + "]");
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let lru: LRUCache
let r: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
lru = new_cache(4)
  lru = refer(lru, "A");
  lru = refer(lru, "2");
  lru = refer(lru, "3");
  lru = refer(lru, "A");
  lru = refer(lru, "4");
  lru = refer(lru, "5");
r = cache_repr(lru)
  console.log(_str(r));
  if ((r !== "LRUCache(4) => [5, 4, 'A', 3]")) {
    _panic("Assertion error");
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

