// Generated by Mochi v0.10.63 on 2025-08-11 14:53:12 GMT+7

function get_avg(number_1: number, number_2: number): number {
  return Math.trunc((number_1 + number_2) / 2);
}
function guess_the_number(lower: number, higher: number, to_guess: number): number[] {
  if ((lower > higher)) {
    _panic("argument value for lower and higher must be(lower > higher)");
  }
  if (!((lower < to_guess) && (to_guess < higher))) {
    _panic("guess value must be within the range of lower and higher value");
  }
  function answer(_number: number): string {
    if ((_number > to_guess)) {
      return "high";
    } else {
      if ((_number < to_guess)) {
        return "low";
      } else {
        return "same";
      }
    }
  }
  console.log(_str("started..."));
  let last_lowest = lower;
  let last_highest: number = higher;
  let last_numbers: number[] = [];
  while (true) {
    let _number = get_avg(last_lowest, last_highest);
    last_numbers.push(_number);
    let resp = answer(_number);
    if ((resp == "low")) {
      last_lowest = _number;
    } else {
      if ((resp == "high")) {
        last_highest = _number;
      } else {
        break
      }
    }
  }
  console.log(_str(("guess the number : " + _str(last_numbers[(()=>{const _mochi_idx = Math.trunc((_len(last_numbers) - 1)); return _mochi_idx < 0 ? last_numbers.length + _mochi_idx : _mochi_idx;})()]))));
  console.log(_str(("details : " + _str(last_numbers))));
  return last_numbers;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  guess_the_number(10, 1000, 17);
  guess_the_number(-10000, 10000, 7);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

