// Generated by Mochi v0.10.63 on 2025-08-11 14:53:04 GMT+7

export interface Clause { literals: Record<string, number>; names: string[] }
function new_clause(lits: string[]): Clause {
  let m: Record<string, number> = {};
  let names: string[] = [];
  let i: number = 0;
  while ((i < _len(lits))) {
    let lit: string = lits[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? lits.length + _mochi_idx : _mochi_idx;})()];
    m[(()=>{const _mochi_idx = lit; return _mochi_idx < 0 ? m.length + _mochi_idx : _mochi_idx;})()] = (0 - 1);
    names.push(lit);
    i = (i + 1);
  }
  return {"literals": m, names};
}
function assign_clause(c: Clause, model: Record<string, number>): Clause {
  let lits: Record<string, number> = c.literals;
  let i: number = 0;
  while ((i < _len(c.names))) {
    let lit: string = c.names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.names.length + _mochi_idx : _mochi_idx;})()];
    let _symbol: string = (lit).substring(0, 2);
    if ((_symbol in model)) {
      let value: number = model[_symbol];
      if ((((lit).substring((_len(lit) - 1), _len(lit)) == "'") && (value != (0 - 1)))) {
        value = (1 - value);
      }
      lits[(()=>{const _mochi_idx = lit; return _mochi_idx < 0 ? lits.length + _mochi_idx : _mochi_idx;})()] = value;
    }
    i = (i + 1);
  }
  c.literals = lits;
  return c;
}
export interface EvalResult { value: number; clause: Clause }
function evaluate_clause(c: Clause, model: Record<string, number>): EvalResult {
  let i: number = 0;
  while ((i < _len(c.names))) {
    let lit: string = c.names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.names.length + _mochi_idx : _mochi_idx;})()];
    let sym: string = (((lit).substring((_len(lit) - 1), _len(lit)) == "'") ? (lit).substring(0, 2) : (lit + "'"));
    if ((sym in c.literals)) {
      return {"value": 1, "clause": c};
    }
    i = (i + 1);
  }
  c = assign_clause(c, model);
  i = 0;
  while ((i < _len(c.names))) {
    let lit: string = c.names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.names.length + _mochi_idx : _mochi_idx;})()];
    let value: number = c.literals[lit];
    if ((value == 1)) {
      return {"value": 1, "clause": c};
    }
    if ((value == (0 - 1))) {
      return {"value": (0 - 1), "clause": c};
    }
    i = (i + 1);
  }
  let any_true: number = 0;
  i = 0;
  while ((i < _len(c.names))) {
    let lit: string = c.names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.names.length + _mochi_idx : _mochi_idx;})()];
    if ((c.literals[lit] == 1)) {
      any_true = 1;
    }
    i = (i + 1);
  }
  return {"value": any_true, "clause": c};
}
export interface Formula { clauses: Clause[] }
function new_formula(cs: Clause[]): Formula {
  return {"clauses": cs};
}
export interface DPLLResult { sat: boolean; model: Record<string, number> }
function remove_symbol(symbols: string[], s: string): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(symbols))) {
    if ((symbols[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? symbols.length + _mochi_idx : _mochi_idx;})()] != s)) {
      res.push(symbols[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? symbols.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function dpll_algorithm(clauses: Clause[], symbols: string[], model: Record<string, number>): DPLLResult {
  let all_true: boolean = true;
  let i: number = 0;
  while ((i < _len(clauses))) {
    let ev: EvalResult = evaluate_clause(clauses[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? clauses.length + _mochi_idx : _mochi_idx;})()], model);
    clauses[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? clauses.length + _mochi_idx : _mochi_idx;})()] = ev.clause;
    if ((ev.value == 0)) {
      return {"sat": false, "model": {}};
    } else {
      if ((ev.value == (0 - 1))) {
        all_true = false;
      }
    }
    i = (i + 1);
  }
  if (all_true) {
    return {"sat": true, model};
  }
  let p: string = symbols[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? symbols.length + _mochi_idx : _mochi_idx;})()];
  let rest: string[] = remove_symbol(symbols, p);
  let tmp1: Record<string, number> = model;
  let tmp2: Record<string, number> = model;
  tmp1[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? tmp1.length + _mochi_idx : _mochi_idx;})()] = 1;
  tmp2[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? tmp2.length + _mochi_idx : _mochi_idx;})()] = 0;
  let res1: DPLLResult = dpll_algorithm(clauses, rest, tmp1);
  if (res1.sat) {
    return res1;
  }
  return dpll_algorithm(clauses, rest, tmp2);
}
function str_clause(c: Clause): string {
  let line: string = "{";
  let first: boolean = true;
  let i: number = 0;
  while ((i < _len(c.names))) {
    let lit: string = c.names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? c.names.length + _mochi_idx : _mochi_idx;})()];
    if (first) {
      first = false;
    } else {
      line = (line + " , ");
    }
    line = (line + lit);
    i = (i + 1);
  }
  line = (line + "}");
  return line;
}
function str_formula(f: Formula): string {
  let line: string = "{";
  let i: number = 0;
  while ((i < _len(f.clauses))) {
    line = (line + str_clause(f.clauses[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? f.clauses.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(f.clauses) - 1))) {
      line = (line + " , ");
    }
    i = (i + 1);
  }
  line = (line + "}");
  return line;
}
let symbols: string[] = ["A4", "A3", "A5", "A1"];
let model: Record<string, number> = {};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let clause1: Clause
let clause2: Clause
let formula: Formula
let formula_str: string
let clauses: Clause[]
let result: DPLLResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
clause1 = new_clause(["A4", "A3", "A5'", "A1", "A3'"])
clause2 = new_clause(["A4"])
formula = new_formula([clause1, clause2])
formula_str = str_formula(formula)
clauses = [clause1, clause2]
result = dpll_algorithm(clauses, symbols, model)
  if (result.sat) {
    console.log(_str((("The formula " + formula_str) + " is satisfiable.")));
  } else {
    console.log(_str((("The formula " + formula_str) + " is not satisfiable.")));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

