// Generated by Mochi v0.10.66 on 2025-08-16 09:41:39 GMT+7

export interface Thing { name: string; value: number; weight: number }
function get_value(t: Thing): number {
  return t.value;
}
function get_weight(t: Thing): number {
  return t.weight;
}
function get_name(t: Thing): string {
  return t.name;
}
function value_weight(t: Thing): number {
  return (t.value / t.weight);
}
function build_menu(names: string[], values: number[], weights: number[]): Thing[] {
  let menu: Thing[] = [];
  let i: number = 0;
  while ((((i < _len(values)) && (i < _len(names))) && (i < _len(weights)))) {
    menu.push({name: names[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? names.length + _mochi_idx : _mochi_idx;})()], value: values[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()], weight: weights[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? weights.length + _mochi_idx : _mochi_idx;})()]});
    i = (i + 1);
  }
  return menu;
}
function sort_desc(items: Thing[], key_func): Thing[] {
  let arr: Thing[] = [];
  let i: number = 0;
  while ((i < _len(items))) {
    arr.push(items[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? items.length + _mochi_idx : _mochi_idx;})()]);
    i = (i + 1);
  }
  let j: number = 1;
  while ((j < _len(arr))) {
    let key_item: Thing = arr[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    let key_val: number = key_func(key_item);
    let k: number = (j - 1);
    while (((k >= 0) && (key_func(arr[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]) < key_val))) {
      arr[(()=>{const _mochi_idx = (k + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = arr[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
      k = (k - 1);
    }
    arr[(()=>{const _mochi_idx = (k + 1); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] = key_item;
    j = (j + 1);
  }
  return arr;
}
export interface GreedyResult { items: Thing[]; total_value: number }
function greedy(items: Thing[], max_cost: number, key_func): GreedyResult {
  let items_copy: Thing[] = sort_desc(items, key_func);
  let result: Thing[] = [];
  let total_value: number = 0.0;
  let total_cost: number = 0.0;
  let i: number = 0;
  while ((i < _len(items_copy))) {
    let it: Thing = items_copy[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? items_copy.length + _mochi_idx : _mochi_idx;})()];
    let w: number = get_weight(it);
    if (((total_cost + w) <= max_cost)) {
      result.push(it);
      total_cost = (total_cost + w);
      total_value = (total_value + get_value(it));
    }
    i = (i + 1);
  }
  return {items: result, total_value};
}
function thing_to_string(t: Thing): string {
  return (((((("Thing(" + t.name) + ", ") + _str(t.value)) + ", ") + _str(t.weight)) + ")");
}
function list_to_string(ts: Thing[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(ts))) {
    s = (s + thing_to_string(ts[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? ts.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(ts) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
let food: string[] = ["Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"];
let value: number[] = [80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0];
let weight: number[] = [40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let foods: Thing[]
let res: GreedyResult
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
foods = build_menu(food, value, weight)
  console.log(_str(list_to_string(foods)));
res = greedy(foods, 500.0, get_value)
  console.log(_str(list_to_string(res.items)));
  console.log(_str(res.total_value));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

