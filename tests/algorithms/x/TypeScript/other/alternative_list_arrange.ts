// Generated by Mochi v0.10.64 on 2025-08-12 16:32:48 GMT+7

export type Item = { tag: "Int"; value: number } | { tag: "Str"; value: string };
function from_int(x: number): Item {
  return {"tag": "Int", "value": x};
}
function from_string(s: string): Item {
  return {"tag": "Str", "value": s};
}
function item_to_string(it: Item): string {
  return ((it.tag === "Int") ? _str(it.value) : ((it.tag === "Str") ? it.value : undefined));
}
function alternative_list_arrange(first: Item[], second: Item[]): Item[] {
  let len1 = _len(first);
  let len2: number = _len(second);
  let abs_len = ((len1 > len2) ? len1 : len2);
  let result: Item[] = [];
  let i: number = 0;
  while ((i < abs_len)) {
    if ((i < len1)) {
      result.push(first[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? first.length + _mochi_idx : _mochi_idx;})()]);
    }
    if ((i < len2)) {
      result.push(second[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? second.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return result;
}
function list_to_string(xs: Item[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < _len(xs))) {
    s = (s + item_to_string(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]));
    if ((i < (_len(xs) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let example1: Item[]
let example2: Item[]
let example3: Item[]
let example4: Item[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
example1 = alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [from_string("A"), from_string("B"), from_string("C")])
  console.log(_str(list_to_string(example1)));
example2 = alternative_list_arrange([from_string("A"), from_string("B"), from_string("C")], [from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)])
  console.log(_str(list_to_string(example2)));
example3 = alternative_list_arrange([from_string("X"), from_string("Y"), from_string("Z")], [from_int(9), from_int(8), from_int(7), from_int(6)])
  console.log(_str(list_to_string(example3)));
example4 = alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [])
  console.log(_str(list_to_string(example4)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

