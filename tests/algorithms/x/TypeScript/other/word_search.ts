// Generated by Mochi v0.10.59 on 2025-08-07 08:17:58 GMT+7

export interface WordSearch { words: string[]; width: number; height: number; board: string[][] }
let seed: number = 123456789;
function rand(): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function rand_range(max: number): number {
  return (rand() % max);
}
function shuffle(list_int: number[]): number[] {
  let i: number = (_len(list_int) - 1);
  while ((i > 0)) {
    let j: number = rand_range((i + 1));
    let tmp: number = list_int[(i) < 0 ? list_int.length + (i) : i];
    list_int[(i) < 0 ? list_int.length + (i) : i] = list_int[(j) < 0 ? list_int.length + (j) : j];
    list_int[(j) < 0 ? list_int.length + (j) : j] = tmp;
    i = (i - 1);
  }
  return list_int;
}
function rand_letter(): string {
  let letters: string = "abcdefghijklmnopqrstuvwxyz";
  let i: number = rand_range(26);
  return letters.slice(i, (i + 1));
}
function make_word_search(words: string[], width: number, height: number): WordSearch {
  let board: string[][] = [];
  let r: number = 0;
  while ((r < height)) {
    let row: string[] = [];
    let c: number = 0;
    while ((c < width)) {
      row.push("");
      c = (c + 1);
    }
    board.push(row);
    r = (r + 1);
  }
  return {words, width, height, board};
}
function insert_dir(ws: WordSearch, word: string, dr: number, dc: number, rows: number[], cols: number[]): boolean {
  let word_len: number = _len(word);
  let ri: number = 0;
  while ((ri < _len(rows))) {
    let row: number = rows[(ri) < 0 ? rows.length + (ri) : ri];
    let ci: number = 0;
    while ((ci < _len(cols))) {
      let col: number = cols[(ci) < 0 ? cols.length + (ci) : ci];
      let end_r: number = (row + (dr * (word_len - 1)));
      let end_c: number = (col + (dc * (word_len - 1)));
      if (((((end_r < 0) || (end_r >= ws.height)) || (end_c < 0)) || (end_c >= ws.width))) {
        ci = (ci + 1);
        continue
      }
      let k: number = 0;
      let ok: boolean = true;
      while ((k < word_len)) {
        let rr: number = (row + (dr * k));
        let cc: number = (col + (dc * k));
        if ((ws.board[(rr) < 0 ? ws.board.length + (rr) : rr][(cc) < 0 ? ws.board[(rr) < 0 ? ws.board.length + (rr) : rr].length + (cc) : cc] != "")) {
          ok = false;
          break
        }
        k = (k + 1);
      }
      if (ok) {
        k = 0;
        while ((k < word_len)) {
          let rr2: number = (row + (dr * k));
          let cc2: number = (col + (dc * k));
          let row_list: string[] = ws.board[(rr2) < 0 ? ws.board.length + (rr2) : rr2];
          row_list[(cc2) < 0 ? row_list.length + (cc2) : cc2] = word.slice(k, (k + 1));
          k = (k + 1);
        }
        return true;
      }
      ci = (ci + 1);
    }
    ri = (ri + 1);
  }
  return false;
}
function generate_board(ws: WordSearch) {
  let dirs_r: number[] = [-1, -1, 0, 1, 1, 1, 0, -1];
  let dirs_c: number[] = [0, 1, 1, 1, 0, -1, -1, -1];
  let i: number = 0;
  while ((i < _len(ws.words))) {
    let word: string = ws.words[(i) < 0 ? ws.words.length + (i) : i];
    let rows: number[] = [];
    let r: number = 0;
    while ((r < ws.height)) {
      rows.push(r);
      r = (r + 1);
    }
    let cols: number[] = [];
    let c: number = 0;
    while ((c < ws.width)) {
      cols.push(c);
      c = (c + 1);
    }
    rows = shuffle(rows);
    cols = shuffle(cols);
    let d: number = rand_range(8);
    insert_dir(ws, word, dirs_r[(d) < 0 ? dirs_r.length + (d) : d], dirs_c[(d) < 0 ? dirs_c.length + (d) : d], rows, cols);
    i = (i + 1);
  }
}
function visualise(ws: WordSearch, add_fake_chars: boolean): string {
  let result: string = "";
  let r: number = 0;
  while ((r < ws.height)) {
    let c: number = 0;
    while ((c < ws.width)) {
      let ch: string = ws.board[(r) < 0 ? ws.board.length + (r) : r][(c) < 0 ? ws.board[(r) < 0 ? ws.board.length + (r) : r].length + (c) : c];
      if ((ch == "")) {
        if (add_fake_chars) {
          ch = rand_letter();
        } else {
          ch = "#";
        }
      }
      result = ((result + ch) + " ");
      c = (c + 1);
    }
    result = (result + "\n");
    r = (r + 1);
  }
  return result;
}
function main() {
  let words: string[] = ["cat", "dog", "snake", "fish"];
  let ws: WordSearch = make_word_search(words, 10, 10);
  generate_board(ws);
  console.log(_str(visualise(ws, true)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

