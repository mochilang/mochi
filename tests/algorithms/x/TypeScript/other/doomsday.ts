// Generated by Mochi v0.10.66 on 2025-08-16 09:41:32 GMT+7

let DOOMSDAY_LEAP: number[] = [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5];
let DOOMSDAY_NOT_LEAP: number[] = [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5];
let WEEK_DAY_NAMES: Record<number, string> = {[0]: "Sunday", [1]: "Monday", [2]: "Tuesday", [3]: "Wednesday", [4]: "Thursday", [5]: "Friday", [6]: "Saturday"};
function get_week_day(year: number, month: number, day: number): string {
  if ((year < 100)) {
    _panic("year should be in YYYY format");
  }
  if (((month < 1) || (month > 12))) {
    _panic("month should be between 1 to 12");
  }
  if (((day < 1) || (day > 31))) {
    _panic("day should be between 1 to 31");
  }
  let century: number = Math.trunc(year / 100);
  let century_anchor: number = (((5 * (century % 4)) + 2) % 7);
  let centurian: number = (year % 100);
  let centurian_m: number = (centurian % 12);
  let dooms_day: number = ((((Math.trunc(centurian / 12) + centurian_m) + Math.trunc(centurian_m / 4)) + century_anchor) % 7);
  let day_anchor: number = ((((year % 4) !== 0) || ((centurian === 0) && ((year % 400) !== 0))) ? DOOMSDAY_NOT_LEAP[(()=>{const _mochi_idx = Math.trunc((month - 1)); return _mochi_idx < 0 ? DOOMSDAY_NOT_LEAP.length + _mochi_idx : _mochi_idx;})()] : DOOMSDAY_LEAP[(()=>{const _mochi_idx = Math.trunc((month - 1)); return _mochi_idx < 0 ? DOOMSDAY_LEAP.length + _mochi_idx : _mochi_idx;})()]);
  let week_day: number = (((dooms_day + day) - day_anchor) % 7);
  if ((week_day < 0)) {
    week_day = (week_day + 7);
  }
  return WEEK_DAY_NAMES[week_day];
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(get_week_day(2020, 10, 24)));
  console.log(_str(get_week_day(2017, 10, 24)));
  console.log(_str(get_week_day(2019, 5, 3)));
  console.log(_str(get_week_day(1970, 9, 16)));
  console.log(_str(get_week_day(1870, 8, 13)));
  console.log(_str(get_week_day(2040, 3, 14)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

