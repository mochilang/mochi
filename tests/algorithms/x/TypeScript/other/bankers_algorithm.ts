// Generated by Mochi v0.10.64 on 2025-08-12 16:11:21 GMT+7

export interface State { claim: number[]; alloc: number[][]; max: number[][] }
function processes_resource_summation(alloc: number[][]): number[] {
  let resources: number = _len(alloc[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()]);
  let sums: number[] = [];
  let i: number = 0;
  while ((i < resources)) {
    let total: number = 0;
    let j: number = 0;
    while ((j < _len(alloc))) {
      total = (total + alloc[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? alloc[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
      j = (j + 1);
    }
    sums.push(total);
    i = (i + 1);
  }
  return sums;
}
function available_resources(claim: number[], alloc_sum: number[]): number[] {
  let avail: number[] = [];
  let i: number = 0;
  while ((i < _len(claim))) {
    avail.push((claim[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? claim.length + _mochi_idx : _mochi_idx;})()] - alloc_sum[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? alloc_sum.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  return avail;
}
function need(max: number[][], alloc: number[][]): number[][] {
  let needs: number[][] = [];
  let i: number = 0;
  while ((i < _len(max))) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < _len(max[(()=>{const _mochi_idx = Math.trunc(0); return _mochi_idx < 0 ? max.length + _mochi_idx : _mochi_idx;})()]))) {
      row.push((max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? max.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? max.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] - alloc[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? alloc[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]));
      j = (j + 1);
    }
    needs.push(row);
    i = (i + 1);
  }
  return needs;
}
function pretty_print(claim: number[], alloc: number[][], max: number[][]) {
  console.log(_str("         Allocated Resource Table"));
  let i: number = 0;
  while ((i < _len(alloc))) {
    let row: number[] = alloc[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()];
    let line: string = (("P" + _str((i + 1))) + "       ");
    let j: number = 0;
    while ((j < _len(row))) {
      line = (line + _str(row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()]));
      if ((j < (_len(row) - 1))) {
        line = (line + "        ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    console.log(_str(""));
    i = (i + 1);
  }
  console.log(_str("         System Resource Table"));
  i = 0;
  while ((i < _len(max))) {
    let row = max[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? max.length + _mochi_idx : _mochi_idx;})()];
    let line: string = (("P" + _str((i + 1))) + "       ");
    let j: number = 0;
    while ((j < _len(row))) {
      line = (line + _str(row[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? row.length + _mochi_idx : _mochi_idx;})()]));
      if ((j < (_len(row) - 1))) {
        line = (line + "        ");
      }
      j = (j + 1);
    }
    console.log(_str(line));
    console.log(_str(""));
    i = (i + 1);
  }
  let usage: string = "";
  i = 0;
  while ((i < _len(claim))) {
    if ((i > 0)) {
      usage = (usage + " ");
    }
    usage = (usage + _str(claim[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? claim.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  let alloc_sum: number[] = processes_resource_summation(alloc);
  let avail: number[] = available_resources(claim, alloc_sum);
  let avail_str: string = "";
  i = 0;
  while ((i < _len(avail))) {
    if ((i > 0)) {
      avail_str = (avail_str + " ");
    }
    avail_str = (avail_str + _str(avail[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? avail.length + _mochi_idx : _mochi_idx;})()]));
    i = (i + 1);
  }
  console.log(_str(("Current Usage by Active Processes: " + usage)));
  console.log(_str(("Initial Available Resources:       " + avail_str)));
}
function bankers_algorithm(claim: number[], alloc: number[][], max: number[][]) {
  let need_list = need(max, alloc);
  let alloc_sum: number[] = processes_resource_summation(alloc);
  let avail: number[] = available_resources(claim, alloc_sum);
  console.log(_str("__________________________________________________"));
  console.log(_str(""));
  let finished: boolean[] = [];
  let i: number = 0;
  while ((i < _len(need_list))) {
    finished.push(false);
    i = (i + 1);
  }
  let remaining: number = _len(need_list);
  while ((remaining > 0)) {
    let safe: boolean = false;
    let p: number = 0;
    while ((p < _len(need_list))) {
      if (!finished[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? finished.length + _mochi_idx : _mochi_idx;})()]) {
        let exec: boolean = true;
        let r: number = 0;
        while ((r < _len(avail))) {
          if ((need_list[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? need_list.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? need_list[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? need_list.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()] > avail[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? avail.length + _mochi_idx : _mochi_idx;})()])) {
            exec = false;
            break
          }
          r = (r + 1);
        }
        if (exec) {
          safe = true;
          console.log(_str((("Process " + _str((p + 1))) + " is executing.")));
          r = 0;
          while ((r < _len(avail))) {
            avail[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? avail.length + _mochi_idx : _mochi_idx;})()] = (avail[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? avail.length + _mochi_idx : _mochi_idx;})()] + alloc[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()][(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? alloc[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? alloc.length + _mochi_idx : _mochi_idx;})()].length + _mochi_idx : _mochi_idx;})()]);
            r = (r + 1);
          }
          let avail_str: string = "";
          r = 0;
          while ((r < _len(avail))) {
            if ((r > 0)) {
              avail_str = (avail_str + " ");
            }
            avail_str = (avail_str + _str(avail[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? avail.length + _mochi_idx : _mochi_idx;})()]));
            r = (r + 1);
          }
          console.log(_str(("Updated available resource stack for processes: " + avail_str)));
          console.log(_str("The process is in a safe state."));
          console.log(_str(""));
          finished[(()=>{const _mochi_idx = p; return _mochi_idx < 0 ? finished.length + _mochi_idx : _mochi_idx;})()] = true;
          remaining = (remaining - 1);
        }
      }
      p = (p + 1);
    }
    if (!safe) {
      console.log(_str("System in unsafe state. Aborting..."));
      console.log(_str(""));
      break
    }
  }
}
let claim_vector: number[] = [8, 5, 9, 7];
let allocated_resources_table: number[][] = [[2, 0, 1, 1], [0, 1, 2, 1], [4, 0, 0, 3], [0, 2, 1, 0], [1, 0, 3, 0]];
let maximum_claim_table: number[][] = [[3, 2, 1, 4], [0, 2, 5, 2], [5, 1, 0, 5], [1, 5, 3, 0], [3, 0, 3, 3]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  pretty_print(claim_vector, allocated_resources_table, maximum_claim_table);
  bankers_algorithm(claim_vector, allocated_resources_table, maximum_claim_table);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

