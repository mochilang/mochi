// Generated by Mochi v0.10.64 on 2025-08-12 16:32:56 GMT+7

export interface EasterDate { month: number; day: number }
function gauss_easter(year: number): EasterDate {
  let metonic_cycle: number = (year % 19);
  let julian_leap_year: number = (year % 4);
  let non_leap_year: number = (year % 7);
  let leap_day_inhibits: number = Math.trunc(year / 100);
  let lunar_orbit_correction: number = Math.trunc((13 + (8 * leap_day_inhibits)) / 25);
  let leap_day_reinstall_number: number = (leap_day_inhibits / 4.0);
  let secular_moon_shift: number = ((((15.0 - lunar_orbit_correction) + leap_day_inhibits) - leap_day_reinstall_number) % 30.0);
  let century_starting_point: number = (((4.0 + leap_day_inhibits) - leap_day_reinstall_number) % 7.0);
  let days_to_add: number = (((19.0 * metonic_cycle) + secular_moon_shift) % 30.0);
  let days_from_phm_to_sunday: number = (((((2.0 * julian_leap_year) + (4.0 * non_leap_year)) + (6.0 * days_to_add)) + century_starting_point) % 7.0);
  if (((days_to_add === 29.0) && (days_from_phm_to_sunday === 6.0))) {
    return {"month": 4, "day": 19};
  }
  if (((days_to_add === 28.0) && (days_from_phm_to_sunday === 6.0))) {
    return {"month": 4, "day": 18};
  }
  let offset: number = Math.trunc((days_to_add + days_from_phm_to_sunday));
  let total: number = (22 + offset);
  if ((total > 31)) {
    return {"month": 4, "day": (total - 31)};
  }
  return {"month": 3, "day": total};
}
function format_date(year: number, d: EasterDate): string {
  let month: string = ((d.month < 10) ? ("0" + _str(d.month)) : _str(d.month));
  let day: string = ((d.day < 10) ? ("0" + _str(d.day)) : _str(d.day));
  return ((((_str(year) + "-") + month) + "-") + day);
}
let years: number[] = [1994, 2000, 2010, 2021, 2023, 2032, 2100];
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i < _len(years))) {
    let y: number = years[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? years.length + _mochi_idx : _mochi_idx;})()];
    let e: EasterDate = gauss_easter(y);
    console.log(_str(((("Easter in " + _str(y)) + " is ") + format_date(y, e))));
    i = (i + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

