// Generated by Mochi v0.10.59 on 2025-08-07 08:54:55 GMT+7

export interface SearchProblem { x: number; y: number; step: number; f: any }
function score(sp: SearchProblem): number {
  return sp.f(sp.x, sp.y);
}
function neighbors(sp: SearchProblem): SearchProblem[] {
  let s: number = sp.step;
  return [{"x": (sp.x - s), "y": (sp.y - s), "step": s, "f": sp.f}, {"x": (sp.x - s), "y": sp.y, "step": s, "f": sp.f}, {"x": (sp.x - s), "y": (sp.y + s), "step": s, "f": sp.f}, {"x": sp.x, "y": (sp.y - s), "step": s, "f": sp.f}, {"x": sp.x, "y": (sp.y + s), "step": s, "f": sp.f}, {"x": (sp.x + s), "y": (sp.y - s), "step": s, "f": sp.f}, {"x": (sp.x + s), "y": sp.y, "step": s, "f": sp.f}, {"x": (sp.x + s), "y": (sp.y + s), "step": s, "f": sp.f}];
}
function equal_state(a: SearchProblem, b: SearchProblem): boolean {
  return ((a.x == b.x) && (a.y == b.y));
}
function contains_state(lst: SearchProblem[], sp: SearchProblem): boolean {
  let i: number = 0;
  while ((i < _len(lst))) {
    if (equal_state(lst[(i) < 0 ? lst.length + (i) : i], sp)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function hill_climbing(sp: SearchProblem, find_max: boolean, max_x: number, min_x: number, max_y: number, min_y: number, max_iter: number): SearchProblem {
  let current: SearchProblem = sp;
  let visited: SearchProblem[] = [];
  let iterations: number = 0;
  let solution_found: boolean = false;
  while (((solution_found == false) && (iterations < max_iter))) {
    visited.push(current);
    iterations = (iterations + 1);
    let current_score: number = score(current);
    let neighs: SearchProblem[] = neighbors(current);
    let max_change: number = -1000000000000000000.0;
    let min_change: number = 1000000000000000000.0;
    let next: SearchProblem = current;
    let improved: boolean = false;
    let i: number = 0;
    while ((i < _len(neighs))) {
      let n: SearchProblem = neighs[(i) < 0 ? neighs.length + (i) : i];
      i = (i + 1);
      if (contains_state(visited, n)) {
        continue
      }
      if (((((n.x > max_x) || (n.x < min_x)) || (n.y > max_y)) || (n.y < min_y))) {
        continue
      }
      let change: number = (score(n) - current_score);
      if (find_max) {
        if (((change > max_change) && (change > 0.0))) {
          max_change = change;
          next = n;
          improved = true;
        }
      } else {
        if (((change < min_change) && (change < 0.0))) {
          min_change = change;
          next = n;
          improved = true;
        }
      }
    }
    if (improved) {
      current = next;
    } else {
      solution_found = true;
    }
  }
  return current;
}
function test_f1(x: number, y: number): number {
  return ((x * x) + (y * y));
}
function main() {
  let prob1: SearchProblem = {"x": 3.0, "y": 4.0, "step": 1.0, "f": test_f1};
  let local_min1: SearchProblem = hill_climbing(prob1, false, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 10000);
  console.log(_str(_str(Math.trunc(score(local_min1)))));
  let prob2: SearchProblem = {"x": 12.0, "y": 47.0, "step": 1.0, "f": test_f1};
  let local_min2: SearchProblem = hill_climbing(prob2, false, 100.0, 5.0, 50.0, -5.0, 10000);
  console.log(_str(_str(Math.trunc(score(local_min2)))));
  let prob3: SearchProblem = {"x": 3.0, "y": 4.0, "step": 1.0, "f": test_f1};
  let local_max: SearchProblem = hill_climbing(prob3, true, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 1000);
  console.log(_str(_str(Math.trunc(score(local_max)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

