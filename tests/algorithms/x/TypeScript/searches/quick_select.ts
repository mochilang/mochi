// Generated by Mochi v0.10.59 on 2025-08-07 08:55:00 GMT+7

function partition(data: number[], pivot: number): number[][] {
  let less: number[] = [];
  let equal: number[] = [];
  let greater: number[] = [];
  for (let i = 0; i < _len(data); i++) {
    let v: number = data[(i) < 0 ? data.length + (i) : i];
    if ((v < pivot)) {
      less.push(v);
    } else {
      if ((v > pivot)) {
        greater.push(v);
      } else {
        equal.push(v);
      }
    }
  }
  return [less, equal, greater];
}
function quick_select(items: number[], index: number): number {
  if (((index < 0) || (index >= _len(items)))) {
    return -1;
  }
  let pivot: number = items[(Math.trunc(Math.trunc(_len(items) / 2))) < 0 ? items.length + (Math.trunc(Math.trunc(_len(items) / 2))) : Math.trunc(Math.trunc(_len(items) / 2))];
  let parts: number[][] = partition(items, pivot);
  let smaller: number[] = parts[(Math.trunc(0)) < 0 ? parts.length + (Math.trunc(0)) : Math.trunc(0)];
  let equal: number[] = parts[(Math.trunc(1)) < 0 ? parts.length + (Math.trunc(1)) : Math.trunc(1)];
  let larger: number[] = parts[(Math.trunc(2)) < 0 ? parts.length + (Math.trunc(2)) : Math.trunc(2)];
  let count = _len(equal);
  let m: number = _len(smaller);
  if (((m <= index) && (index < (m + count)))) {
    return pivot;
  } else {
    if ((index < m)) {
      return quick_select(smaller, index);
    } else {
      return quick_select(larger, (index - (m + count)));
    }
  }
}
function median(items: number[]): number {
  let n: number = _len(items);
  let mid: number = Math.trunc(n / 2);
  if (((n % 2) != 0)) {
    return (1.0 * quick_select(items, mid));
  } else {
    let low: number = quick_select(items, (mid - 1));
    let high: number = quick_select(items, mid);
    return ((1.0 * (low + high)) / 2.0);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5))));
  console.log(_str(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 1))));
  console.log(_str(_str(quick_select([5, 4, 3, 2], 2))));
  console.log(_str(_str(quick_select([3, 5, 7, 10, 2, 12], 3))));
  console.log(_str(_str(median([3, 2, 2, 9, 9]))));
  console.log(_str(_str(median([2, 2, 9, 9, 9, 3]))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

