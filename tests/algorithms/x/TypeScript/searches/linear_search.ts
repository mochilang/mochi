// Generated by Mochi v0.10.66 on 2025-08-16 12:47:30 GMT+7

function linear_search(sequence: number[], target: number): number {
  let i: number = 0;
  while ((i < _len(sequence))) {
    if ((sequence[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? sequence.length + _mochi_idx : _mochi_idx;})()] === target)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function rec_linear_search(sequence: number[], low: number, high: number, target: number): number {
  if (!((((0 <= high) && (high < _len(sequence))) && (0 <= low)) && (low < _len(sequence)))) {
    _panic("Invalid upper or lower bound!");
  }
  if ((high < low)) {
    return -1;
  }
  if ((sequence[(()=>{const _mochi_idx = low; return _mochi_idx < 0 ? sequence.length + _mochi_idx : _mochi_idx;})()] === target)) {
    return low;
  }
  if ((sequence[(()=>{const _mochi_idx = high; return _mochi_idx < 0 ? sequence.length + _mochi_idx : _mochi_idx;})()] === target)) {
    return high;
  }
  return rec_linear_search(sequence, (low + 1), (high - 1), target);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(linear_search([0, 5, 7, 10, 15], 0)));
  console.log(_str(linear_search([0, 5, 7, 10, 15], 15)));
  console.log(_str(linear_search([0, 5, 7, 10, 15], 5)));
  console.log(_str(linear_search([0, 5, 7, 10, 15], 6)));
  console.log(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 0)));
  console.log(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 700)));
  console.log(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 30)));
  console.log(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, -6)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

