// Generated by Mochi v0.10.59 on 2025-08-07 08:55:02 GMT+7

function binary_search(arr: number[], item: number): boolean {
  let low: number = 0;
  let high: number = (_len(arr) - 1);
  while ((low <= high)) {
    let mid: number = Math.trunc((low + high) / 2);
    let val: number = arr[(mid) < 0 ? arr.length + (mid) : mid];
    if ((val == item)) {
      return true;
    }
    if ((item < val)) {
      high = (mid - 1);
    } else {
      low = (mid + 1);
    }
  }
  return false;
}
let arr1: number[] = [0, 1, 2, 8, 13, 17, 19, 32, 42];
let arr2: number[] = [4, 4, 5, 6, 7];
let arr4: number[] = [5];
let arr5: number[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let arr3: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(binary_search(arr1, 3)));
  console.log(_str(binary_search(arr1, 13)));
  console.log(_str(binary_search(arr2, 4)));
  console.log(_str(binary_search(arr2, -10)));
arr3 = [-18, 2]
  console.log(_str(binary_search(arr3, -18)));
  console.log(_str(binary_search(arr4, 5)));
  console.log(_str(binary_search(arr5, 1)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

