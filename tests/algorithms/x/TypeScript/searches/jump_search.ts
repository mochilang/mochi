// Generated by Mochi v0.10.59 on 2025-08-07 08:54:57 GMT+7

function int_sqrt(n: number): number {
  let x: number = 0;
  while ((((x + 1) * (x + 1)) <= n)) {
    x = (x + 1);
  }
  return x;
}
function jump_search(arr: number[], item: number): number {
  let arr_size: number = _len(arr);
  let block_size: number = int_sqrt(arr_size);
  let prev: number = 0;
  let step: number = block_size;
  while (((step < arr_size) && (arr[(Math.trunc((step - 1))) < 0 ? arr.length + (Math.trunc((step - 1))) : Math.trunc((step - 1))] < item))) {
    prev = step;
    step = (step + block_size);
    if ((prev >= arr_size)) {
      return -1;
    }
  }
  while (((prev < arr_size) && (arr[(prev) < 0 ? arr.length + (prev) : prev] < item))) {
    prev = (prev + 1);
    if ((prev == step)) {
      return -1;
    }
  }
  if (((prev < arr_size) && (arr[(prev) < 0 ? arr.length + (prev) : prev] == item))) {
    return prev;
  }
  return -1;
}
function main() {
  console.log(_str(_str(jump_search([0, 1, 2, 3, 4, 5], 3))));
  console.log(_str(_str(jump_search([-5, -2, -1], -1))));
  console.log(_str(_str(jump_search([0, 5, 10, 20], 8))));
  console.log(_str(_str(jump_search([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 55))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

