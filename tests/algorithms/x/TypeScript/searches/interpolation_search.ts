// Generated by Mochi v0.10.66 on 2025-08-16 12:47:27 GMT+7

function interpolation_search(arr: number[], item: number): number {
  let left: number = 0;
  let right: number = (_len(arr) - 1);
  while ((left <= right)) {
    if ((arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === arr[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
      if ((arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === item)) {
        return left;
      }
      return -1;
    }
    let point: number = (left + Math.trunc(((item - arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]) * (right - left)) / (arr[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] - arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])));
    if (((point < 0) || (point >= _len(arr)))) {
      return -1;
    }
    let current: number = arr[(()=>{const _mochi_idx = point; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()];
    if ((current === item)) {
      return point;
    }
    if ((point < left)) {
      right = left;
      left = point;
    } else {
      if ((point > right)) {
        left = right;
        right = point;
      } else {
        if ((item < current)) {
          right = (point - 1);
        } else {
          left = (point + 1);
        }
      }
    }
  }
  return -1;
}
function interpolation_search_recursive(arr: number[], item: number, left: number, right: number): number {
  if ((left > right)) {
    return -1;
  }
  if ((arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === arr[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
    if ((arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === item)) {
      return left;
    }
    return -1;
  }
  let point: number = (left + Math.trunc(((item - arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]) * (right - left)) / (arr[(()=>{const _mochi_idx = right; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] - arr[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])));
  if (((point < 0) || (point >= _len(arr)))) {
    return -1;
  }
  if ((arr[(()=>{const _mochi_idx = point; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === item)) {
    return point;
  }
  if ((point < left)) {
    return interpolation_search_recursive(arr, item, point, left);
  }
  if ((point > right)) {
    return interpolation_search_recursive(arr, item, right, left);
  }
  if ((arr[(()=>{const _mochi_idx = point; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > item)) {
    return interpolation_search_recursive(arr, item, left, (point - 1));
  }
  return interpolation_search_recursive(arr, item, (point + 1), right);
}
function interpolation_search_by_recursion(arr: number[], item: number): number {
  return interpolation_search_recursive(arr, item, 0, (_len(arr) - 1));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(interpolation_search([1, 2, 3, 4, 5], 2)));
  console.log(_str(interpolation_search([1, 2, 3, 4, 5], 6)));
  console.log(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 5)));
  console.log(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 100)));
  console.log(_str(interpolation_search_by_recursion([5, 5, 5, 5, 5], 3)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

