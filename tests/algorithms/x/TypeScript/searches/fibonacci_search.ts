// Generated by Mochi v0.10.59 on 2025-08-07 08:54:54 GMT+7

function fibonacci(k: number): number {
  if ((k < 0)) {
    _panic("k must be >= 0");
  }
  let a: number = 0;
  let b: number = 1;
  let i: number = 0;
  while ((i < k)) {
    let tmp: number = (a + b);
    a = b;
    b = tmp;
    i = (i + 1);
  }
  return a;
}
function min_int(a: number, b: number): number {
  if ((a < b)) {
    return a;
  } else {
    return b;
  }
}
function fibonacci_search(arr: number[], val: number): number {
  let n: number = _len(arr);
  let m: number = 0;
  while ((fibonacci(m) < n)) {
    m = (m + 1);
  }
  let offset: number = 0;
  while ((m > 0)) {
    let i: number = min_int((offset + fibonacci((m - 1))), (n - 1));
    let item: number = arr[(i) < 0 ? arr.length + (i) : i];
    if ((item == val)) {
      return i;
    } else {
      if ((val < item)) {
        m = (m - 1);
      } else {
        offset = (offset + fibonacci((m - 1)));
        m = (m - 2);
      }
    }
  }
  return -1;
}
let example1: number[] = [4, 5, 6, 7];
let example3: number[] = [0, 5, 10, 15, 20, 25, 30];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
let example2: number[]
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
example2 = [-18, 2]
  console.log(_str(_str(fibonacci_search(example1, 4))));
  console.log(_str(_str(fibonacci_search(example1, -10))));
  console.log(_str(_str(fibonacci_search(example2, -18))));
  console.log(_str(_str(fibonacci_search(example3, 15))));
  console.log(_str(_str(fibonacci_search(example3, 17))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

