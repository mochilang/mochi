// Generated by Mochi v0.10.59 on 2025-08-07 08:54:53 GMT+7

function is_sorted(xs: number[]): boolean {
  let i: number = 1;
  while ((i < _len(xs))) {
    if ((xs[(Math.trunc((i - 1))) < 0 ? xs.length + (Math.trunc((i - 1))) : Math.trunc((i - 1))] > xs[(i) < 0 ? xs.length + (i) : i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function exponential_search(arr: number[], item: number): number {
  if (!is_sorted(arr)) {
    _panic("sorted_collection must be sorted in ascending order");
  }
  if ((_len(arr) == 0)) {
    return -1;
  }
  if ((arr[(Math.trunc(0)) < 0 ? arr.length + (Math.trunc(0)) : Math.trunc(0)] == item)) {
    return 0;
  }
  let bound: number = 1;
  while (((bound < _len(arr)) && (arr[(bound) < 0 ? arr.length + (bound) : bound] < item))) {
    bound = (bound * 2);
  }
  let left: number = Math.trunc(bound / 2);
  let right: number = bound;
  if ((right >= _len(arr))) {
    right = (_len(arr) - 1);
  }
  while ((left <= right)) {
    let mid: number = (left + Math.trunc((right - left) / 2));
    if ((arr[(mid) < 0 ? arr.length + (mid) : mid] == item)) {
      return mid;
    }
    if ((arr[(mid) < 0 ? arr.length + (mid) : mid] > item)) {
      right = (mid - 1);
    } else {
      left = (mid + 1);
    }
  }
  return -1;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

