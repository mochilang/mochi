// Generated by Mochi v0.10.59 on 2025-08-07 08:55:04 GMT+7

export interface Graph { a: { b: number; c: number; d: number; e: number }; b: { a: number; c: number; d: number; e: number }; c: { a: number; b: number; d: number; e: number }; d: { a: number; b: number; c: number; e: number }; e: { a: number; b: number; c: number; d: number } }
export interface Solution { path: string[]; cost: number }
export interface Swap { a: string; b: string }
function path_cost(path: string[], graph: Record<string, Record<string, number>>): number {
  let total: number = 0;
  let i: number = 0;
  while ((i < (_len(path) - 1))) {
    let u: string = path[(i) < 0 ? path.length + (i) : i];
    let v: string = path[(Math.trunc((i + 1))) < 0 ? path.length + (Math.trunc((i + 1))) : Math.trunc((i + 1))];
    total = (total + graph[(u) < 0 ? graph.length + (u) : u][(v) < 0 ? graph[(u) < 0 ? graph.length + (u) : u].length + (v) : v]);
    i = (i + 1);
  }
  return total;
}
function generate_first_solution(graph: Record<string, Record<string, number>>, start: string): Solution {
  let path: string[] = [];
  let visiting: string = start;
  let total: number = 0;
  while ((_len(path) < _len(graph))) {
    path.push(visiting);
    let best_node: string = "";
    let best_cost: number = 1000000;
    for (const n in graph[(visiting) < 0 ? graph.length + (visiting) : visiting]) {
      if ((!path.includes(n) && (graph[(visiting) < 0 ? graph.length + (visiting) : visiting][(n) < 0 ? graph[(visiting) < 0 ? graph.length + (visiting) : visiting].length + (n) : n] < best_cost))) {
        best_cost = graph[(visiting) < 0 ? graph.length + (visiting) : visiting][(n) < 0 ? graph[(visiting) < 0 ? graph.length + (visiting) : visiting].length + (n) : n];
        best_node = n;
      }
    }
    if ((best_node == "")) {
      break
    }
    total = (total + best_cost);
    visiting = best_node;
  }
  path.push(start);
  total = (total + graph[(visiting) < 0 ? graph.length + (visiting) : visiting][(start) < 0 ? graph[(visiting) < 0 ? graph.length + (visiting) : visiting].length + (start) : start]);
  return {path, "cost": total};
}
function copy_path(path: string[]): string[] {
  let res: string[] = [];
  let i: number = 0;
  while ((i < _len(path))) {
    res.push(path[(i) < 0 ? path.length + (i) : i]);
    i = (i + 1);
  }
  return res;
}
function find_neighborhood(sol: Solution, graph: Record<string, Record<string, number>>): Solution[] {
  let neighbors: Solution[] = [];
  let i: number = 1;
  while ((i < (_len(sol.path) - 1))) {
    let j: number = 1;
    while ((j < (_len(sol.path) - 1))) {
      if ((i != j)) {
        let new_path: string[] = copy_path(sol.path);
        let tmp: string = new_path[(i) < 0 ? new_path.length + (i) : i];
        new_path[(i) < 0 ? new_path.length + (i) : i] = new_path[(j) < 0 ? new_path.length + (j) : j];
        new_path[(j) < 0 ? new_path.length + (j) : j] = tmp;
        let cost: number = path_cost(new_path, graph);
        neighbors.push({"path": new_path, cost});
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return neighbors;
}
function find_swap(a: string[], b: string[]): Swap {
  let i: number = 0;
  while ((i < _len(a))) {
    if ((a[(i) < 0 ? a.length + (i) : i] != b[(i) < 0 ? b.length + (i) : i])) {
      return {"a": a[(i) < 0 ? a.length + (i) : i], "b": b[(i) < 0 ? b.length + (i) : i]};
    }
    i = (i + 1);
  }
  return {"a": "", "b": ""};
}
function tabu_search(first: Solution, graph: Record<string, Record<string, number>>, iters: number, size: number): Solution {
  let solution = first;
  let best = first;
  let tabu: Swap[] = [];
  let count: number = 0;
  while ((count < iters)) {
    let neighborhood = find_neighborhood(solution, graph);
    if ((_len(neighborhood) == 0)) {
      break
    }
    let best_neighbor = neighborhood[(Math.trunc(0)) < 0 ? neighborhood.length + (Math.trunc(0)) : Math.trunc(0)];
    let best_move = find_swap(solution.path, best_neighbor.path);
    let i: number = 1;
    while ((i < _len(neighborhood))) {
      let cand = neighborhood[(i) < 0 ? neighborhood.length + (i) : i];
      let move = find_swap(solution.path, cand.path);
      let forbidden: boolean = false;
      let t: number = 0;
      while ((t < _len(tabu))) {
        if ((((tabu[(t) < 0 ? tabu.length + (t) : t].a == move.a) && (tabu[(t) < 0 ? tabu.length + (t) : t].b == move.b)) || ((tabu[(t) < 0 ? tabu.length + (t) : t].a == move.b) && (tabu[(t) < 0 ? tabu.length + (t) : t].b == move.a)))) {
          forbidden = true;
        }
        t = (t + 1);
      }
      if (((forbidden == false) && (cand.cost < best_neighbor.cost))) {
        best_neighbor = cand;
        best_move = move;
      }
      i = (i + 1);
    }
    solution = best_neighbor;
    tabu.push(best_move);
    if ((_len(tabu) > size)) {
      let new_tab: Swap[] = [];
      let j: number = 1;
      while ((j < _len(tabu))) {
        new_tab.push(tabu[(j) < 0 ? tabu.length + (j) : j]);
        j = (j + 1);
      }
      tabu = new_tab;
    }
    if ((solution.cost < best.cost)) {
      best = solution;
    }
    count = (count + 1);
  }
  return best;
}
let graph: Graph = {"a": {"b": 20, "c": 18, "d": 22, "e": 26}, "b": {"a": 20, "c": 10, "d": 11, "e": 12}, "c": {"a": 18, "b": 10, "d": 23, "e": 24}, "d": {"a": 22, "b": 11, "c": 23, "e": 40}, "e": {"a": 26, "b": 12, "c": 24, "d": 40}};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let first: Solution
let best: Solution
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
first = generate_first_solution(graph, "a")
best = tabu_search(first, graph, 4, 3)
  console.log(_str(_str(best.path)));
  console.log(_str(_str(best.cost)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

