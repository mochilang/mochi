// Generated by Mochi v0.10.59 on 2025-08-07 08:55:05 GMT+7

let precision: number = 10;
function lin_search(left: number, right: number, array: number[], target: number): number {
  let i: number = left;
  while ((i < right)) {
    if ((array[(i) < 0 ? array.length + (i) : i] == target)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function ite_ternary_search(array: number[], target: number): number {
  let left: number = 0;
  let right: number = (_len(array) - 1);
  while ((left <= right)) {
    if (((right - left) < precision)) {
      let idx: number = lin_search(left, (right + 1), array, target);
      return idx;
    }
    let one_third: number = (left + Math.trunc((right - left) / 3));
    let two_third: number = (right - Math.trunc((right - left) / 3));
    if ((array[(one_third) < 0 ? array.length + (one_third) : one_third] == target)) {
      return one_third;
    }
    if ((array[(two_third) < 0 ? array.length + (two_third) : two_third] == target)) {
      return two_third;
    }
    if ((target < array[(one_third) < 0 ? array.length + (one_third) : one_third])) {
      right = (one_third - 1);
    } else {
      if ((array[(two_third) < 0 ? array.length + (two_third) : two_third] < target)) {
        left = (two_third + 1);
      } else {
        left = (one_third + 1);
        right = (two_third - 1);
      }
    }
  }
  return -1;
}
function rec_ternary_search(left: number, right: number, array: number[], target: number): number {
  if ((left <= right)) {
    if (((right - left) < precision)) {
      let idx: number = lin_search(left, (right + 1), array, target);
      return idx;
    }
    let one_third: number = (left + Math.trunc((right - left) / 3));
    let two_third: number = (right - Math.trunc((right - left) / 3));
    if ((array[(one_third) < 0 ? array.length + (one_third) : one_third] == target)) {
      return one_third;
    }
    if ((array[(two_third) < 0 ? array.length + (two_third) : two_third] == target)) {
      return two_third;
    }
    if ((target < array[(one_third) < 0 ? array.length + (one_third) : one_third])) {
      return rec_ternary_search(left, (one_third - 1), array, target);
    }
    if ((array[(two_third) < 0 ? array.length + (two_third) : two_third] < target)) {
      return rec_ternary_search((two_third + 1), right, array, target);
    }
    return rec_ternary_search((one_third + 1), (two_third - 1), array, target);
  }
  return -1;
}
function main() {
  let test_list: number[] = [0, 1, 2, 8, 13, 17, 19, 32, 42];
  console.log(_str(_str(ite_ternary_search(test_list, 3))));
  console.log(_str(_str(ite_ternary_search(test_list, 13))));
  console.log(_str(_str(rec_ternary_search(0, (_len(test_list) - 1), test_list, 3))));
  console.log(_str(_str(rec_ternary_search(0, (_len(test_list) - 1), test_list, 13))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

