// Generated by Mochi v0.10.66 on 2025-08-16 12:47:32 GMT+7

function set_at_int(xs: number[], idx: number, value: number): number[] {
  let i: number = 0;
  let res: number[] = [];
  while ((i < _len(xs))) {
    if ((i === idx)) {
      res.push(value);
    } else {
      res.push(xs[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? xs.length + _mochi_idx : _mochi_idx;})()]);
    }
    i = (i + 1);
  }
  return res;
}
function sort_int(xs: number[]): number[] {
  let res: number[] = xs;
  let i: number = 1;
  while ((i < _len(res))) {
    let key: number = res[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()];
    let j: number = (i - 1);
    while (((j >= 0) && (res[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()] > key))) {
      res = set_at_int(res, (j + 1), res[(()=>{const _mochi_idx = j; return _mochi_idx < 0 ? res.length + _mochi_idx : _mochi_idx;})()]);
      j = (j - 1);
    }
    res = set_at_int(res, (j + 1), key);
    i = (i + 1);
  }
  return res;
}
function median_of_five(arr: number[]): number {
  let sorted: number[] = sort_int(arr);
  return sorted[(()=>{const _mochi_idx = Math.trunc(Math.trunc(_len(sorted) / 2)); return _mochi_idx < 0 ? sorted.length + _mochi_idx : _mochi_idx;})()];
}
function median_of_medians(arr: number[]): number {
  if ((_len(arr) <= 5)) {
    return median_of_five(arr);
  }
  let medians: number[] = [];
  let i: number = 0;
  while ((i < _len(arr))) {
    if (((i + 5) <= _len(arr))) {
      medians.push(median_of_five(arr.slice(i, (i + 5))));
    } else {
      medians.push(median_of_five(arr.slice(i, _len(arr))));
    }
    i = (i + 5);
  }
  return median_of_medians(medians);
}
function quick_select(arr: number[], target: number): number {
  if ((target > _len(arr))) {
    return -1;
  }
  let x: number = median_of_medians(arr);
  let left: number[] = [];
  let right: number[] = [];
  let check: boolean = false;
  let i: number = 0;
  while ((i < _len(arr))) {
    if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] < x)) {
      left.push(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
    } else {
      if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > x)) {
        right.push(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
      } else {
        if ((arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] === x)) {
          if (!check) {
            check = true;
          } else {
            right.push(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
          }
        } else {
          right.push(arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()]);
        }
      }
    }
    i = (i + 1);
  }
  let rank_x: number = (_len(left) + 1);
  let answer: number = 0;
  if ((rank_x === target)) {
    answer = x;
  } else {
    if ((rank_x > target)) {
      answer = quick_select(left, target);
    } else {
      answer = quick_select(right, (target - rank_x));
    }
  }
  return answer;
}
function main() {
  console.log(_str(median_of_five([5, 4, 3, 2])));
  console.log(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

