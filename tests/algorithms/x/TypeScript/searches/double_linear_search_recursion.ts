// Generated by Mochi v0.10.66 on 2025-08-16 12:47:21 GMT+7

function search(list_data: number[], key: number, left: number, right: number): number {
  let r: number = right;
  if ((r === 0)) {
    r = (_len(list_data) - 1);
  }
  if ((left > r)) {
    return -1;
  } else {
    if ((list_data[(()=>{const _mochi_idx = left; return _mochi_idx < 0 ? list_data.length + _mochi_idx : _mochi_idx;})()] === key)) {
      return left;
    } else {
      if ((list_data[(()=>{const _mochi_idx = r; return _mochi_idx < 0 ? list_data.length + _mochi_idx : _mochi_idx;})()] === key)) {
        return r;
      } else {
        return search(list_data, key, (left + 1), (r - 1));
      }
    }
  }
}
function main() {
  console.log(_str(search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 0, 0)));
  console.log(_str(search([1, 2, 4, 5, 3], 4, 0, 0)));
  console.log(_str(search([1, 2, 4, 5, 3], 6, 0, 0)));
  console.log(_str(search([5], 5, 0, 0)));
  console.log(_str(search([], 1, 0, 0)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

