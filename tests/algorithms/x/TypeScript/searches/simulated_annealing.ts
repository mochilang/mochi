// Generated by Mochi v0.10.59 on 2025-08-07 08:55:03 GMT+7

export interface SearchProblem { x: number; y: number; step: number }
function score(p: SearchProblem, f): number {
  return f(p.x, p.y);
}
function get_neighbors(p: SearchProblem): SearchProblem[] {
  let s: number = p.step;
  let ns: SearchProblem[] = [];
  ns.push({"x": (p.x - s), "y": (p.y - s), "step": s});
  ns.push({"x": (p.x - s), "y": p.y, "step": s});
  ns.push({"x": (p.x - s), "y": (p.y + s), "step": s});
  ns.push({"x": p.x, "y": (p.y - s), "step": s});
  ns.push({"x": p.x, "y": (p.y + s), "step": s});
  ns.push({"x": (p.x + s), "y": (p.y - s), "step": s});
  ns.push({"x": (p.x + s), "y": p.y, "step": s});
  ns.push({"x": (p.x + s), "y": (p.y + s), "step": s});
  return ns;
}
function remove_at(lst: SearchProblem[], idx: number): SearchProblem[] {
  let res: SearchProblem[] = [];
  let i: number = 0;
  while ((i < _len(lst))) {
    if ((i != idx)) {
      res.push(lst[(i) < 0 ? lst.length + (i) : i]);
    }
    i = (i + 1);
  }
  return res;
}
let seed: number = 1;
function rand(): number {
  let _t: number = _now();
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return seed;
}
function random_float(): number {
  return (rand() / 2147483648.0);
}
function randint(low: number, high: number): number {
  return ((rand() % ((high - low) + 1)) + low);
}
function expApprox(x: number): number {
  let y: number = x;
  let is_neg: boolean = false;
  if ((x < 0.0)) {
    is_neg = true;
    y = -x;
  }
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n < 30)) {
    term = ((term * y) / n);
    sum = (sum + term);
    n = (n + 1);
  }
  if (is_neg) {
    return (1.0 / sum);
  }
  return sum;
}
function simulated_annealing(search_prob: SearchProblem, f, find_max: boolean, max_x: number, min_x: number, max_y: number, min_y: number, start_temp: number, rate_of_decrease: number, threshold_temp: number): SearchProblem {
  let search_end: boolean = false;
  let current_state: SearchProblem = search_prob;
  let current_temp: number = start_temp;
  let best_state: SearchProblem = current_state;
  while (!search_end) {
    let current_score: number = score(current_state, f);
    if ((score(best_state, f) < current_score)) {
      best_state = current_state;
    }
    let next_state: SearchProblem = current_state;
    let found_next: boolean = false;
    let neighbors: SearchProblem[] = get_neighbors(current_state);
    while ((!found_next && (_len(neighbors) > 0))) {
      let idx: number = randint(0, (_len(neighbors) - 1));
      let picked_neighbor: SearchProblem = neighbors[(idx) < 0 ? neighbors.length + (idx) : idx];
      neighbors = remove_at(neighbors, idx);
      if (((((picked_neighbor.x > max_x) || (picked_neighbor.x < min_x)) || (picked_neighbor.y > max_y)) || (picked_neighbor.y < min_y))) {
        continue
      }
      let change: number = (score(picked_neighbor, f) - current_score);
      if (!find_max) {
        change = -change;
      }
      if ((change > 0.0)) {
        next_state = picked_neighbor;
        found_next = true;
      } else {
        let probability: number = expApprox((change / current_temp));
        if ((random_float() < probability)) {
          next_state = picked_neighbor;
          found_next = true;
        }
      }
    }
    current_temp = (current_temp - (current_temp * rate_of_decrease));
    if (((current_temp < threshold_temp) || !found_next)) {
      search_end = true;
    } else {
      current_state = next_state;
    }
  }
  return best_state;
}
function test_f1(x: number, y: number): number {
  return ((x * x) + (y * y));
}
function test_f2(x: number, y: number): number {
  return (((3.0 * x) * x) - (6.0 * y));
}
function main() {
  let prob1: SearchProblem = {"x": 12.0, "y": 47.0, "step": 1.0};
  let min_state: SearchProblem = simulated_annealing(prob1, test_f1, false, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0);
  console.log(_str("min1") + " " + _str(test_f1(min_state.x, min_state.y)));
  let prob2: SearchProblem = {"x": 12.0, "y": 47.0, "step": 1.0};
  let max_state: SearchProblem = simulated_annealing(prob2, test_f1, true, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0);
  console.log(_str("max1") + " " + _str(test_f1(max_state.x, max_state.y)));
  let prob3: SearchProblem = {"x": 3.0, "y": 4.0, "step": 1.0};
  let min_state2: SearchProblem = simulated_annealing(prob3, test_f2, false, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0);
  console.log(_str("min2") + " " + _str(test_f2(min_state2.x, min_state2.y)));
  let prob4: SearchProblem = {"x": 3.0, "y": 4.0, "step": 1.0};
  let max_state2: SearchProblem = simulated_annealing(prob4, test_f2, true, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0);
  console.log(_str("max2") + " " + _str(test_f2(max_state2.x, max_state2.y)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

