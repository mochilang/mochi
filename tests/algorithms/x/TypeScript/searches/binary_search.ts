// Generated by Mochi v0.10.66 on 2025-08-16 12:47:18 GMT+7

function is_sorted(arr: number[]): boolean {
  let i: number = 1;
  while ((i < _len(arr))) {
    if ((arr[(()=>{const _mochi_idx = Math.trunc((i - 1)); return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()] > arr[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? arr.length + _mochi_idx : _mochi_idx;})()])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function binary_search(sorted_collection: number[], item: number): number {
  if (!is_sorted(sorted_collection)) {
    return -1;
  }
  let left: number = 0;
  let right: number = (_len(sorted_collection) - 1);
  while ((left <= right)) {
    let midpoint: number = (left + Math.trunc((right - left) / 2));
    let current_item: number = sorted_collection[(()=>{const _mochi_idx = midpoint; return _mochi_idx < 0 ? sorted_collection.length + _mochi_idx : _mochi_idx;})()];
    if ((current_item === item)) {
      return midpoint;
    }
    if ((item < current_item)) {
      right = (midpoint - 1);
    } else {
      left = (midpoint + 1);
    }
  }
  return -1;
}
function binary_search_by_recursion(sorted_collection: number[], item: number, left: number, right: number): number {
  if ((right < left)) {
    return -1;
  }
  let midpoint: number = (left + Math.trunc((right - left) / 2));
  if ((sorted_collection[(()=>{const _mochi_idx = midpoint; return _mochi_idx < 0 ? sorted_collection.length + _mochi_idx : _mochi_idx;})()] === item)) {
    return midpoint;
  }
  if ((sorted_collection[(()=>{const _mochi_idx = midpoint; return _mochi_idx < 0 ? sorted_collection.length + _mochi_idx : _mochi_idx;})()] > item)) {
    return binary_search_by_recursion(sorted_collection, item, left, (midpoint - 1));
  }
  return binary_search_by_recursion(sorted_collection, item, (midpoint + 1), right);
}
function exponential_search(sorted_collection: number[], item: number): number {
  if (!is_sorted(sorted_collection)) {
    return -1;
  }
  if ((_len(sorted_collection) === 0)) {
    return -1;
  }
  let bound: number = 1;
  while (((bound < _len(sorted_collection)) && (sorted_collection[(()=>{const _mochi_idx = bound; return _mochi_idx < 0 ? sorted_collection.length + _mochi_idx : _mochi_idx;})()] < item))) {
    bound = (bound * 2);
  }
  let left: number = Math.trunc(bound / 2);
  let right: number = (() => { const _arr = [bound, (_len(sorted_collection) - 1)]; return _arr.length === 0 ? 0 : Math.min(..._arr); })();
  return binary_search_by_recursion(sorted_collection, item, left, right);
}
function main() {
  let data: number[] = [0, 5, 7, 10, 15];
  console.log(_str(binary_search(data, 0)));
  console.log(_str(binary_search(data, 15)));
  console.log(_str(binary_search(data, 5)));
  console.log(_str(binary_search(data, 6)));
  console.log(_str(binary_search_by_recursion(data, 0, 0, (_len(data) - 1))));
  console.log(_str(binary_search_by_recursion(data, 15, 0, (_len(data) - 1))));
  console.log(_str(binary_search_by_recursion(data, 5, 0, (_len(data) - 1))));
  console.log(_str(binary_search_by_recursion(data, 6, 0, (_len(data) - 1))));
  console.log(_str(exponential_search(data, 0)));
  console.log(_str(exponential_search(data, 15)));
  console.log(_str(exponential_search(data, 5)));
  console.log(_str(exponential_search(data, 6)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

