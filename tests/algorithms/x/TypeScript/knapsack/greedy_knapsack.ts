// Generated by Mochi v0.10.63 on 2025-08-12 08:45:19 GMT+7

function calc_profit(profit: number[], weight: number[], max_weight: number): number {
  if ((_len(profit) != _len(weight))) {
    _panic("The length of profit and weight must be same.");
  }
  if ((max_weight <= 0)) {
    _panic("max_weight must greater than zero.");
  }
  let i: number = 0;
  while ((i < _len(profit))) {
    if ((profit[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? profit.length + _mochi_idx : _mochi_idx;})()] < 0)) {
      _panic("Profit can not be negative.");
    }
    if ((weight[(()=>{const _mochi_idx = i; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()] < 0)) {
      _panic("Weight can not be negative.");
    }
    i = (i + 1);
  }
  let n: number = _len(profit);
  let used: boolean[] = [];
  let j: number = 0;
  while ((j < n)) {
    used.push(false);
    j = (j + 1);
  }
  let limit: number = 0;
  let gain: number = 0.0;
  let count: number = 0;
  while (((limit < max_weight) && (count < n))) {
    let maxRatio: number = -1.0;
    let maxIndex: number = -1;
    let k: number = 0;
    while ((k < n)) {
      if (!used[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? used.length + _mochi_idx : _mochi_idx;})()]) {
        let ratio: number = (profit[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? profit.length + _mochi_idx : _mochi_idx;})()] / weight[(()=>{const _mochi_idx = k; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()]);
        if ((ratio > maxRatio)) {
          maxRatio = ratio;
          maxIndex = k;
        }
      }
      k = (k + 1);
    }
    if ((maxIndex < 0)) {
      break
    }
    used[(()=>{const _mochi_idx = maxIndex; return _mochi_idx < 0 ? used.length + _mochi_idx : _mochi_idx;})()] = true;
    if (((max_weight - limit) >= weight[(()=>{const _mochi_idx = maxIndex; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()])) {
      limit = (limit + weight[(()=>{const _mochi_idx = maxIndex; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()]);
      gain = (gain + profit[(()=>{const _mochi_idx = maxIndex; return _mochi_idx < 0 ? profit.length + _mochi_idx : _mochi_idx;})()]);
    } else {
      gain = (gain + (((max_weight - limit) / weight[(()=>{const _mochi_idx = maxIndex; return _mochi_idx < 0 ? weight.length + _mochi_idx : _mochi_idx;})()]) * profit[(()=>{const _mochi_idx = maxIndex; return _mochi_idx < 0 ? profit.length + _mochi_idx : _mochi_idx;})()]));
      break
    }
    count = (count + 1);
  }
  return gain;
}
function main() {
  console.log(_str(calc_profit([1, 2, 3], [3, 4, 5], 15)));
  console.log(_str(calc_profit([10, 9, 8], [3, 4, 5], 25)));
  console.log(_str(calc_profit([10, 9, 8], [3, 4, 5], 5)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
function _panic(msg: any): never { throw new Error(String(msg)); }
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

