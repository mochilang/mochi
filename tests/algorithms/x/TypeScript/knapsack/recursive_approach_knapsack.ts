// Generated by Mochi v0.10.63 on 2025-08-12 08:45:28 GMT+7

function knapsack(weights: number[], values: number[], number_of_items: number, max_weight: number, index: number): number {
  if ((index == number_of_items)) {
    return 0;
  }
  let ans1 = knapsack(weights, values, number_of_items, max_weight, (index + 1));
  let ans2: number = 0;
  if ((weights[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? weights.length + _mochi_idx : _mochi_idx;})()] <= max_weight)) {
    ans2 = (values[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()] + knapsack(weights, values, number_of_items, (max_weight - weights[(()=>{const _mochi_idx = index; return _mochi_idx < 0 ? weights.length + _mochi_idx : _mochi_idx;})()]), (index + 1)));
  }
  if ((ans1 > ans2)) {
    return ans1;
  }
  return ans2;
}
function main() {
  let w1: number[] = [1, 2, 4, 5];
  let v1: number[] = [5, 4, 8, 6];
  let r1: number = knapsack(w1, v1, 4, 5, 0);
  console.log(_str(r1));
  let w2: number[] = [3, 4, 5];
  let v2: number[] = [10, 9, 8];
  let r2: number = knapsack(w2, v2, 3, 25, 0);
  console.log(_str(r2));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

