// Generated by Mochi v0.10.59 on 2025-08-07 00:03:35 GMT+7

export interface CalcResult { ok: boolean; value: number; error: string }
function calc_profit(profit: number[], weight: number[], max_weight: number): CalcResult {
  if ((_len(profit) != _len(weight))) {
    return {"ok": false, "value": 0.0, "error": "The length of profit and weight must be same."};
  }
  if ((max_weight <= 0)) {
    return {"ok": false, "value": 0.0, "error": "max_weight must greater than zero."};
  }
  let i: number = 0;
  while ((i < _len(profit))) {
    if ((profit[(i) < 0 ? profit.length + (i) : i] < 0)) {
      return {"ok": false, "value": 0.0, "error": "Profit can not be negative."};
    }
    if ((weight[(i) < 0 ? weight.length + (i) : i] < 0)) {
      return {"ok": false, "value": 0.0, "error": "Weight can not be negative."};
    }
    i = (i + 1);
  }
  let used: boolean[] = [];
  let j: number = 0;
  while ((j < _len(profit))) {
    used.push(false);
    j = (j + 1);
  }
  let limit: number = 0;
  let gain: number = 0.0;
  while ((limit < max_weight)) {
    let max_ratio: number = -1.0;
    let idx: number = (0 - 1);
    let k: number = 0;
    while ((k < _len(profit))) {
      if (!used[(k) < 0 ? used.length + (k) : k]) {
        let ratio: number = (profit[(k) < 0 ? profit.length + (k) : k] / weight[(k) < 0 ? weight.length + (k) : k]);
        if ((ratio > max_ratio)) {
          max_ratio = ratio;
          idx = k;
        }
      }
      k = (k + 1);
    }
    if ((idx == (0 - 1))) {
      break
    }
    used[(idx) < 0 ? used.length + (idx) : idx] = true;
    if (((max_weight - limit) >= weight[(idx) < 0 ? weight.length + (idx) : idx])) {
      limit = (limit + weight[(idx) < 0 ? weight.length + (idx) : idx]);
      gain = (gain + profit[(idx) < 0 ? profit.length + (idx) : idx]);
    } else {
      gain = (gain + (((max_weight - limit) / weight[(idx) < 0 ? weight.length + (idx) : idx]) * profit[(idx) < 0 ? profit.length + (idx) : idx]));
      break
    }
  }
  return {"ok": true, "value": gain, "error": ""};
}
function test_sorted(): boolean {
  let profit: number[] = [10, 20, 30, 40, 50, 60];
  let weight: number[] = [2, 4, 6, 8, 10, 12];
  let res: CalcResult = calc_profit(profit, weight, 100);
  return (res.ok && (res.value == 210.0));
}
function test_negative_max_weight(): boolean {
  let profit: number[] = [10, 20, 30, 40, 50, 60];
  let weight: number[] = [2, 4, 6, 8, 10, 12];
  let res: CalcResult = calc_profit(profit, weight, -15);
  return (!res.ok && (res.error == "max_weight must greater than zero."));
}
function test_negative_profit_value(): boolean {
  let profit: number[] = [10, -20, 30, 40, 50, 60];
  let weight: number[] = [2, 4, 6, 8, 10, 12];
  let res: CalcResult = calc_profit(profit, weight, 15);
  return (!res.ok && (res.error == "Profit can not be negative."));
}
function test_negative_weight_value(): boolean {
  let profit: number[] = [10, 20, 30, 40, 50, 60];
  let weight: number[] = [2, -4, 6, -8, 10, 12];
  let res: CalcResult = calc_profit(profit, weight, 15);
  return (!res.ok && (res.error == "Weight can not be negative."));
}
function test_null_max_weight(): boolean {
  let profit: number[] = [10, 20, 30, 40, 50, 60];
  let weight: number[] = [2, 4, 6, 8, 10, 12];
  let res: CalcResult = calc_profit(profit, weight, 0);
  return (!res.ok && (res.error == "max_weight must greater than zero."));
}
function test_unequal_list_length(): boolean {
  let profit: number[] = [10, 20, 30, 40, 50];
  let weight: number[] = [2, 4, 6, 8, 10, 12];
  let res: CalcResult = calc_profit(profit, weight, 100);
  return (!res.ok && (res.error == "The length of profit and weight must be same."));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(test_sorted()));
  console.log(_str(test_negative_max_weight()));
  console.log(_str(test_negative_profit_value()));
  console.log(_str(test_negative_weight_value()));
  console.log(_str(test_null_max_weight()));
  console.log(_str(test_unequal_list_length()));
  console.log("");
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

