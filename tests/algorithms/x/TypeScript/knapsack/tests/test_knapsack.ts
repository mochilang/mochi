// Generated by Mochi v0.10.63 on 2025-08-12 08:45:39 GMT+7

function knapsack(capacity: number, weights: number[], values: number[], counter: number): number {
  if (((counter == 0) || (capacity == 0))) {
    return 0;
  }
  if ((weights[(()=>{const _mochi_idx = Math.trunc((counter - 1)); return _mochi_idx < 0 ? weights.length + _mochi_idx : _mochi_idx;})()] > capacity)) {
    return knapsack(capacity, weights, values, (counter - 1));
  }
  let left_capacity: number = (capacity - weights[(()=>{const _mochi_idx = Math.trunc((counter - 1)); return _mochi_idx < 0 ? weights.length + _mochi_idx : _mochi_idx;})()]);
  let include_val = (values[(()=>{const _mochi_idx = Math.trunc((counter - 1)); return _mochi_idx < 0 ? values.length + _mochi_idx : _mochi_idx;})()] + knapsack(left_capacity, weights, values, (counter - 1)));
  let exclude_val = knapsack(capacity, weights, values, (counter - 1));
  if ((include_val > exclude_val)) {
    return include_val;
  }
  return exclude_val;
}
function test_base_case(): boolean {
  let cap: number = 0;
  let val: number[] = [0];
  let w: number[] = [0];
  let c: number = _len(val);
  if ((knapsack(cap, w, val, c) != 0)) {
    return false;
  }
  let val2: number[] = [60];
  let w2: number[] = [10];
  let c2: number = _len(val2);
  return (knapsack(cap, w2, val2, c2) == 0);
}
function test_easy_case(): boolean {
  let cap: number = 3;
  let val: number[] = [1, 2, 3];
  let w: number[] = [3, 2, 1];
  let c: number = _len(val);
  return (knapsack(cap, w, val, c) == 5);
}
function test_knapsack(): boolean {
  let cap: number = 50;
  let val: number[] = [60, 100, 120];
  let w: number[] = [10, 20, 30];
  let c: number = _len(val);
  return (knapsack(cap, w, val, c) == 220);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  } else {
    _nowSeed = 1;
    _nowSeeded = true;
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  if (typeof performance !== 'undefined' && (performance as any).memory) {
    return (performance as any).memory.usedJSHeapSize;
  }
  return 0;
}
function _len(x: any): number { return Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(test_base_case()));
  console.log(_str(test_easy_case()));
  console.log(_str(test_knapsack()));
  console.log("");
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

