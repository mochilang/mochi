# Code generated by Mochi transpiler 2025-08-12 13:41 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_square(matrix) do
    try do
      n = _len(matrix)
      i = 0
      while_fun = fn while_fun, i ->
        if i < n do
          if _len(Enum.at(matrix, i, [])) != n do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def matrix_multiply(a, b) do
    try do
      rows = _len(a)
      cols = _len(Enum.at(b, 0, []))
      inner = _len(b)
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < rows do
          row = []
          j = 0
          while_fun_3 = fn while_fun_3, j, row ->
            if j < cols do
              sum = 0
              k = 0
              while_fun_4 = fn while_fun_4, k, sum ->
                if k < inner do
                  sum = sum + Enum.at(Enum.at(a, i, []), k, 0) * Enum.at(Enum.at(b, k, []), j, 0)
                  k = k + 1
                  while_fun_4.(while_fun_4, k, sum)
                else
                  {k, sum}
                end
              end
              {k, sum} = try do
                  while_fun_4.(while_fun_4, k, sum)
                catch
                  {:break, {k, sum}} -> {k, sum}
                end

              row = (row ++ [sum])
              j = j + 1
              while_fun_3.(while_fun_3, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_3.(while_fun_3, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def multiply(i, j, k, a, b, result, n, m) do
    try do
      if i >= n do
        throw {:return, nil}
      end
      if j >= m do
        multiply(i + 1, 0, 0, a, b, result, n, m)
        throw {:return, nil}
      end
      if k >= _len(b) do
        multiply(i, j + 1, 0, a, b, result, n, m)
        throw {:return, nil}
      end
      result = List.replace_at(result, i, List.replace_at(Enum.at(result, i), j, Enum.at(Enum.at(result, i, []), j, 0) + Enum.at(Enum.at(a, i, []), k, 0) * Enum.at(Enum.at(b, k, []), j, 0)))
      multiply(i, j, k + 1, a, b, result, n, m)
    catch
      {:return, val} -> val
    end
  end
  def matrix_multiply_recursive(a, b) do
    try do
      if _len(a) == 0 || _len(b) == 0 do
        throw {:return, []}
      end
      if _len(a) != _len(b) || (!is_square(a)) || (!is_square(b)) do
        raise("Invalid matrix dimensions")
      end
      n = _len(a)
      m = _len(Enum.at(b, 0, []))
      result = []
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i < n do
          row = []
          j = 0
          while_fun_6 = fn while_fun_6, j, row ->
            if j < m do
              row = (row ++ [0])
              j = j + 1
              while_fun_6.(while_fun_6, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_6.(while_fun_6, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      multiply(0, 0, 0, a, b, result, n, m)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:matrix_1_to_4, [[1, 2], [3, 4]])
  Process.put(:matrix_5_to_8, [[5, 6], [7, 8]])
  Process.put(:matrix_count_up, [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
  Process.put(:matrix_unordered, [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(matrix_multiply_recursive(Process.get(:matrix_1_to_4), Process.get(:matrix_5_to_8))))
    IO.puts(Kernel.inspect(matrix_multiply_recursive(Process.get(:matrix_count_up), Process.get(:matrix_unordered))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
