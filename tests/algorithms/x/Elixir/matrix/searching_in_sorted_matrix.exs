# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def search_in_sorted_matrix(mat, m, n, key) do
    try do
      i = m - 1
      j = 0
      while_fun = fn while_fun, i, j ->
        if i >= 0 && j < n do
          if key == Enum.at(Enum.at(mat, i), j) do
            IO.puts(((((("Key " <> Kernel.to_string(key)) <> " found at row- ") <> Kernel.to_string(i + 1)) <> " column- ") <> Kernel.to_string(j + 1)))
            throw {:return, nil}
          end
          {i, j} = if key < Enum.at(Enum.at(mat, i), j) do
            i = i - 1
            {i, j}
          else
            j = j + 1
            {i, j}
          end
          while_fun.(while_fun, i, j)
        else
          {i, j}
        end
      end
      {i, j} = try do
          while_fun.(while_fun, i, j)
        catch
          {:break, {i, j}} -> {i, j}
        end

      IO.puts((("Key " <> Kernel.to_string(key)) <> " not found"))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      mat = [[2.0, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]]
      search_in_sorted_matrix(mat, _len(mat), _len(Enum.at(mat, 0)), 5.0)
      search_in_sorted_matrix(mat, _len(mat), _len(Enum.at(mat, 0)), 21.0)
      mat2 = [[2.1, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]]
      search_in_sorted_matrix(mat2, _len(mat2), _len(Enum.at(mat2, 0)), 2.1)
      search_in_sorted_matrix(mat2, _len(mat2), _len(Enum.at(mat2, 0)), 2.2)
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
