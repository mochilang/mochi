# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def generate_large_matrix() do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, result ->
        if i < 1000 do
          row = []
          j = 1000 - i
          while_fun_2 = fn while_fun_2, j, row ->
            if j > (-1000 - i) do
              row = (row ++ [j])
              j = j - 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun.(while_fun, result)
        else
          result
        end
      end
      result = try do
          while_fun.(while_fun, result)
        catch
          {:break, {result}} -> result
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def find_negative_index(arr) do
    try do
      left = 0
      right = _len(arr) - 1
      if _len(arr) == 0 do
        throw {:return, 0}
      end
      if Enum.at(arr, 0) < 0 do
        throw {:return, 0}
      end
      while_fun_3 = fn while_fun_3, left, right ->
        if left <= right do
          mid = div((left + right), 2)
          num = Enum.at(arr, mid)
          {left, right} = if num < 0 do
            if mid == 0 do
              throw {:return, 0}
            end
            if Enum.at(arr, mid - 1) >= 0 do
              throw {:return, mid}
            end
            right = mid - 1
            {left, right}
          else
            left = mid + 1
            {left, right}
          end
          while_fun_3.(while_fun_3, left, right)
        else
          {left, right}
        end
      end
      {left, right} = try do
          while_fun_3.(while_fun_3, left, right)
        catch
          {:break, {left, right}} -> {left, right}
        end

      throw {:return, _len(arr)}
    catch
      {:return, val} -> val
    end
  end
  def count_negatives_binary_search(grid) do
    try do
      total = 0
      bound = _len(Enum.at(grid, 0))
      i = 0
      while_fun_4 = fn while_fun_4, bound, total ->
        if i < _len(grid) do
          row = Enum.at(grid, i)
          idx = find_negative_index(_slice(row, 0, bound - (0)))
          bound = idx
          total = total + idx
          i = i + 1
          while_fun_4.(while_fun_4, bound, total)
        else
          {bound, total}
        end
      end
      {bound, total} = try do
          while_fun_4.(while_fun_4, bound, total)
        catch
          {:break, {bound, total}} -> {bound, total}
        end

      throw {:return, (_len(grid) * _len(Enum.at(grid, 0))) - total}
    catch
      {:return, val} -> val
    end
  end
  def count_negatives_brute_force(grid) do
    try do
      count = 0
      i = 0
      while_fun_5 = fn while_fun_5, count ->
        if i < _len(grid) do
          row = Enum.at(grid, i)
          j = 0
          while_fun_6 = fn while_fun_6, count, j ->
            if j < _len(row) do
              {count} = if Enum.at(row, j) < 0 do
                count = count + 1
                {count}
              else
                {count}
              end
              j = j + 1
              while_fun_6.(while_fun_6, count, j)
            else
              {count, j}
            end
          end
          {count, j} = try do
              while_fun_6.(while_fun_6, count, j)
            catch
              {:break, {count, j}} -> {count, j}
            end

          i = i + 1
          while_fun_5.(while_fun_5, count)
        else
          count
        end
      end
      count = try do
          while_fun_5.(while_fun_5, count)
        catch
          {:break, {count}} -> count
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def count_negatives_brute_force_with_break(grid) do
    try do
      total = 0
      i = 0
      while_fun_7 = fn while_fun_7, total ->
        if i < _len(grid) do
          row = Enum.at(grid, i)
          j = 0
          while_fun_8 = fn while_fun_8, j, total ->
            if j < _len(row) do
              number = Enum.at(row, j)
              {total} = if number < 0 do
                total = total + (_len(row) - j)
                throw {:break, {j, total}}
                {total}
              else
                {total}
              end
              j = j + 1
              while_fun_8.(while_fun_8, j, total)
            else
              {j, total}
            end
          end
          {j, total} = try do
              while_fun_8.(while_fun_8, j, total)
            catch
              {:break, {j, total}} -> {j, total}
            end

          i = i + 1
          while_fun_7.(while_fun_7, total)
        else
          total
        end
      end
      total = try do
          while_fun_7.(while_fun_7, total)
        catch
          {:break, {total}} -> total
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:results_bin, [])
  Process.put(:i, 0)
  Process.put(:results_brute, [])
  Process.put(:results_break, [])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:grid, generate_large_matrix())
    Process.put(:test_grids, [[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]], [[7, 7, 6]], [[7, 7, 6], [-1, -2, -3]], Process.get(:grid)])
    while_fun_9 = fn while_fun_9 ->
      if Process.get(:i) < _len(Process.get(:test_grids)) do
        Process.put(:results_bin, (Process.get(:results_bin) ++ [count_negatives_binary_search(Enum.at(Process.get(:test_grids), Process.get(:i)))]))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_9.(while_fun_9)
      else
        nil
      end
    end
    try do
      while_fun_9.(while_fun_9)
    catch
      :break -> nil
    end

    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:results_bin)])), ",", " "))
    Process.put(:i, 0)
    while_fun_10 = fn while_fun_10 ->
      if Process.get(:i) < _len(Process.get(:test_grids)) do
        Process.put(:results_brute, (Process.get(:results_brute) ++ [count_negatives_brute_force(Enum.at(Process.get(:test_grids), Process.get(:i)))]))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_10.(while_fun_10)
      else
        nil
      end
    end
    try do
      while_fun_10.(while_fun_10)
    catch
      :break -> nil
    end

    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:results_brute)])), ",", " "))
    Process.put(:i, 0)
    while_fun_11 = fn while_fun_11 ->
      if Process.get(:i) < _len(Process.get(:test_grids)) do
        Process.put(:results_break, (Process.get(:results_break) ++ [count_negatives_brute_force_with_break(Enum.at(Process.get(:test_grids), Process.get(:i)))]))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_11.(while_fun_11)
      else
        nil
      end
    end
    try do
      while_fun_11.(while_fun_11)
    catch
      :break -> nil
    end

    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:results_break)])), ",", " "))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
