# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def bubble_sort(a) do
    try do
      arr = a
      n = _len(arr)
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < n do
          j = 0
          while_fun_2 = fn while_fun_2, arr, j ->
            if j + 1 < n - i do
              {arr} = if Enum.at(arr, j) > Enum.at(arr, j + 1) do
                temp = Enum.at(arr, j)
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1))
                arr = List.replace_at(arr, j + 1, temp)
                {arr}
              else
                {arr}
              end
              j = j + 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def median(matrix) do
    try do
      linear = []
      i = 0
      while_fun_3 = fn while_fun_3, i, linear ->
        if i < _len(matrix) do
          row = Enum.at(matrix, i)
          j = 0
          while_fun_4 = fn while_fun_4, j, linear ->
            if j < _len(row) do
              linear = (linear ++ [Enum.at(row, j)])
              j = j + 1
              while_fun_4.(while_fun_4, j, linear)
            else
              {j, linear}
            end
          end
          {j, linear} = try do
              while_fun_4.(while_fun_4, j, linear)
            catch
              {:break, {j, linear}} -> {j, linear}
            end

          i = i + 1
          while_fun_3.(while_fun_3, i, linear)
        else
          {i, linear}
        end
      end
      {i, linear} = try do
          while_fun_3.(while_fun_3, i, linear)
        catch
          {:break, {i, linear}} -> {i, linear}
        end

      sorted = bubble_sort(linear)
      mid = div((_len(sorted) - 1), 2)
      throw {:return, Enum.at(sorted, mid)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:matrix1, [[1, 3, 5], [2, 6, 9], [3, 6, 9]])
  Process.put(:matrix2, [[1, 2, 3], [4, 5, 6]])
  def main() do
    IO.puts(Kernel.inspect(median(Process.get(:matrix1))))
    IO.puts(Kernel.inspect(median(Process.get(:matrix2))))
  end
end
Main.main()
