# Code generated by Mochi transpiler 2025-08-12 13:41 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def multiply(matrix_a, matrix_b) do
    try do
      n = _len(matrix_a)
      matrix_c = []
      i = 0
      while_fun = fn while_fun, i, matrix_c ->
        if i < n do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < n do
              val = 0
              k = 0
              while_fun_3 = fn while_fun_3, k, val ->
                if k < n do
                  val = val + Enum.at(Enum.at(matrix_a, i, []), k, 0) * Enum.at(Enum.at(matrix_b, k, []), j, 0)
                  k = k + 1
                  while_fun_3.(while_fun_3, k, val)
                else
                  {k, val}
                end
              end
              {k, val} = try do
                  while_fun_3.(while_fun_3, k, val)
                catch
                  {:break, {k, val}} -> {k, val}
                end

              row = (row ++ [val])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          matrix_c = (matrix_c ++ [row])
          i = i + 1
          while_fun.(while_fun, i, matrix_c)
        else
          {i, matrix_c}
        end
      end
      {i, matrix_c} = try do
          while_fun.(while_fun, i, matrix_c)
        catch
          {:break, {i, matrix_c}} -> {i, matrix_c}
        end

      throw {:return, matrix_c}
    catch
      {:return, val} -> val
    end
  end
  def identity(n) do
    try do
      res = []
      i = 0
      while_fun_4 = fn while_fun_4, i, res ->
        if i < n do
          row = []
          j = 0
          while_fun_5 = fn while_fun_5, j, row ->
            if j < n do
              row = (if i == j, do: (row ++ [1]), else: (row ++ [0]))
              j = j + 1
              while_fun_5.(while_fun_5, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_5.(while_fun_5, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          res = (res ++ [row])
          i = i + 1
          while_fun_4.(while_fun_4, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_4.(while_fun_4, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def nth_fibonacci_matrix(n) do
    try do
      if n <= 1 do
        throw {:return, n}
      end
      res_matrix = identity(2)
      fib_matrix = [[1, 1], [1, 0]]
      m = n - 1
      while_fun_6 = fn while_fun_6, fib_matrix, m, res_matrix ->
        if m > 0 do
          {res_matrix} = if rem(m, 2) == 1 do
            res_matrix = multiply(res_matrix, fib_matrix)
            {res_matrix}
          else
            {res_matrix}
          end
          fib_matrix = multiply(fib_matrix, fib_matrix)
          m = div(m, 2)
          while_fun_6.(while_fun_6, fib_matrix, m, res_matrix)
        else
          {fib_matrix, m, res_matrix}
        end
      end
      {fib_matrix, m, res_matrix} = try do
          while_fun_6.(while_fun_6, fib_matrix, m, res_matrix)
        catch
          {:break, {fib_matrix, m, res_matrix}} -> {fib_matrix, m, res_matrix}
        end

      throw {:return, Enum.at(Enum.at(res_matrix, 0, []), 0, 0)}
    catch
      {:return, val} -> val
    end
  end
  def nth_fibonacci_bruteforce(n) do
    try do
      if n <= 1 do
        throw {:return, n}
      end
      fib0 = 0
      fib1 = 1
      i = 2
      while_fun_7 = fn while_fun_7, fib0, fib1, i ->
        if i <= n do
          next = fib0 + fib1
          fib0 = fib1
          fib1 = next
          i = i + 1
          while_fun_7.(while_fun_7, fib0, fib1, i)
        else
          {fib0, fib1, i}
        end
      end
      {fib0, fib1, i} = try do
          while_fun_7.(while_fun_7, fib0, fib1, i)
        catch
          {:break, {fib0, fib1, i}} -> {fib0, fib1, i}
        end

      throw {:return, fib1}
    catch
      {:return, val} -> val
    end
  end
  def parse_number(s) do
    try do
      result = 0
      i = 0
      while_fun_8 = fn while_fun_8, i, result ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {result} = if ch >= "0" && ch <= "9" do
            result = result * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(ch))
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun_8.(while_fun_8, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_8.(while_fun_8, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      ordinals = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"]
      i = 0
      while_fun_9 = fn while_fun_9, i ->
        if i < _len(ordinals) do
          ordinal = Enum.at(ordinals, i, [])
          n = parse_number(ordinal)
          msg = ((((ordinal <> " fibonacci number using matrix exponentiation is ") <> Kernel.inspect(nth_fibonacci_matrix(n))) <> " and using bruteforce is ") <> Kernel.inspect(nth_fibonacci_bruteforce(n)))
          IO.puts(msg)
          i = i + 1
          while_fun_9.(while_fun_9, i)
        else
          i
        end
      end
      i = try do
          while_fun_9.(while_fun_9, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
