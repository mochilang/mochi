# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def check_matrix(mat) do
    try do
      if _len(mat) < 2 || _len(Enum.at(mat, 0, [])) < 2 do
        raise("Expected a matrix with at least 2x2 dimensions")
      end
    catch
      {:return, val} -> val
    end
  end
  def add(a, b) do
    try do
      check_matrix(a)
      check_matrix(b)
      if _len(a) != _len(b) || _len(Enum.at(a, 0, [])) != _len(Enum.at(b, 0, [])) do
        raise("Matrices must have the same dimensions")
      end
      rows = _len(a)
      cols = _len(Enum.at(a, 0, []))
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < rows do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < cols do
              row = (row ++ [Enum.at(Enum.at(a, i, []), j, 0) + Enum.at(Enum.at(b, i, []), j, 0)])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def subtract(a, b) do
    try do
      check_matrix(a)
      check_matrix(b)
      if _len(a) != _len(b) || _len(Enum.at(a, 0, [])) != _len(Enum.at(b, 0, [])) do
        raise("Matrices must have the same dimensions")
      end
      rows = _len(a)
      cols = _len(Enum.at(a, 0, []))
      result = []
      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < rows do
          row = []
          j = 0
          while_fun_4 = fn while_fun_4, j, row ->
            if j < cols do
              row = (row ++ [Enum.at(Enum.at(a, i, []), j, 0) - Enum.at(Enum.at(b, i, []), j, 0)])
              j = j + 1
              while_fun_4.(while_fun_4, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_4.(while_fun_4, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def scalar_multiply(a, s) do
    try do
      check_matrix(a)
      rows = _len(a)
      cols = _len(Enum.at(a, 0, []))
      result = []
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i < rows do
          row = []
          j = 0
          while_fun_6 = fn while_fun_6, j, row ->
            if j < cols do
              row = (row ++ [Enum.at(Enum.at(a, i, []), j, 0) * s])
              j = j + 1
              while_fun_6.(while_fun_6, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_6.(while_fun_6, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def multiply(a, b) do
    try do
      check_matrix(a)
      check_matrix(b)
      if _len(Enum.at(a, 0, [])) != _len(b) do
        raise("Invalid dimensions for matrix multiplication")
      end
      rows = _len(a)
      cols = _len(Enum.at(b, 0, []))
      result = []
      i = 0
      while_fun_7 = fn while_fun_7, i, result ->
        if i < rows do
          row = []
          j = 0
          while_fun_8 = fn while_fun_8, j, row ->
            if j < cols do
              sum = 0.0
              k = 0
              while_fun_9 = fn while_fun_9, k, sum ->
                if k < _len(b) do
                  sum = sum + Enum.at(Enum.at(a, i, []), k, 0) * Enum.at(Enum.at(b, k, []), j, 0)
                  k = k + 1
                  while_fun_9.(while_fun_9, k, sum)
                else
                  {k, sum}
                end
              end
              {k, sum} = try do
                  while_fun_9.(while_fun_9, k, sum)
                catch
                  {:break, {k, sum}} -> {k, sum}
                end

              row = (row ++ [sum])
              j = j + 1
              while_fun_8.(while_fun_8, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_8.(while_fun_8, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_7.(while_fun_7, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_7.(while_fun_7, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def identity(n) do
    try do
      result = []
      i = 0
      while_fun_10 = fn while_fun_10, i, result ->
        if i < n do
          row = []
          j = 0
          while_fun_11 = fn while_fun_11, j, row ->
            if j < n do
              row = (if i == j, do: (row ++ [1.0]), else: (row ++ [0.0]))
              j = j + 1
              while_fun_11.(while_fun_11, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_11.(while_fun_11, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_10.(while_fun_10, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_10.(while_fun_10, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def transpose(a) do
    try do
      check_matrix(a)
      rows = _len(a)
      cols = _len(Enum.at(a, 0, []))
      result = []
      j = 0
      while_fun_12 = fn while_fun_12, j, result ->
        if j < cols do
          row = []
          i = 0
          while_fun_13 = fn while_fun_13, i, row ->
            if i < rows do
              row = (row ++ [Enum.at(Enum.at(a, i, []), j, 0)])
              i = i + 1
              while_fun_13.(while_fun_13, i, row)
            else
              {i, row}
            end
          end
          {i, row} = try do
              while_fun_13.(while_fun_13, i, row)
            catch
              {:break, {i, row}} -> {i, row}
            end

          result = (result ++ [row])
          j = j + 1
          while_fun_12.(while_fun_12, j, result)
        else
          {j, result}
        end
      end
      {j, result} = try do
          while_fun_12.(while_fun_12, j, result)
        catch
          {:break, {j, result}} -> {j, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      mat_a = [[12.0, 10.0], [3.0, 9.0]]
      mat_b = [[3.0, 4.0], [7.0, 4.0]]
      mat_c = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
      IO.puts(Kernel.inspect(add(mat_a, mat_b)))
      IO.puts(Kernel.inspect(subtract(mat_a, mat_b)))
      IO.puts(Kernel.inspect(multiply(mat_a, mat_b)))
      IO.puts(Kernel.inspect(scalar_multiply(mat_a, 3.5)))
      IO.puts(Kernel.inspect(identity(5)))
      IO.puts(Kernel.inspect(transpose(mat_c)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
