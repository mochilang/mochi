# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def parse_project_name(toml) do
    try do
      i = 0
      name = ""
      n = _len(toml)
      while_fun = fn while_fun, i, name ->
        if i + 4 < n do
          {i, name} = if String.at(toml, i) == "n" && String.at(toml, i + 1) == "a" && String.at(toml, i + 2) == "m" && String.at(toml, i + 3) == "e" do
            i = i + 4
            while_fun_2 = fn while_fun_2, i ->
              if i < n && String.at(toml, i) != "\"" do
                i = i + 1
                while_fun_2.(while_fun_2, i)
              else
                i
              end
            end
            i = try do
                while_fun_2.(while_fun_2, i)
              catch
                {:break, {i}} -> i
              end

            i = i + 1
            while_fun_3 = fn while_fun_3, i, name ->
              if i < n && String.at(toml, i) != "\"" do
                name = (name <> String.at(toml, i))
                i = i + 1
                while_fun_3.(while_fun_3, i, name)
              else
                {i, name}
              end
            end
            {i, name} = try do
                while_fun_3.(while_fun_3, i, name)
              catch
                {:break, {i, name}} -> {i, name}
              end

            throw {:return, name}
            {i, name}
          else
            {i, name}
          end
          i = i + 1
          while_fun.(while_fun, i, name)
        else
          {i, name}
        end
      end
      {i, name} = try do
          while_fun.(while_fun, i, name)
        catch
          {:break, {i, name}} -> {i, name}
        end

      throw {:return, name}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pyproject, "[project]\nname = \"thealgorithms-python\"")
  def main() do
    Process.put(:project, parse_project_name(Process.get(:pyproject)))
    IO.puts(Process.get(:project))
  end
end
Main.main()
