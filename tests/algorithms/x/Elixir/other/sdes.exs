# Code generated by Mochi transpiler 2025-08-12 10:04 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def apply_table(inp, table) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(table) do
          idx = Enum.at(table, i, []) - 1
          {idx} = if idx < 0 do
            idx = _len(inp) - 1
            {idx}
          else
            {idx}
          end
          res = (res <> _slice(inp, idx, (idx + 1) - idx))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def left_shift(data) do
    try do
      throw {:return, (_slice(data, 1, _len(data) - 1) <> _slice(data, 0, 1 - 0))}
    catch
      {:return, val} -> val
    end
  end
  def xor(a, b) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(a) && i < _len(b) do
          res = (if _slice(a, i, (i + 1) - i) == _slice(b, i, (i + 1) - i), do: (res <> "0"), else: (res <> "1"))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def int_to_binary(n) do
    try do
      if n == 0 do
        throw {:return, "0"}
      end
      res = ""
      num = n
      while_fun_3 = fn while_fun_3, num, res ->
        if num > 0 do
          res = (Kernel.inspect(rem(num, 2)) <> res)
          num = div(num, 2)
          while_fun_3.(while_fun_3, num, res)
        else
          {num, res}
        end
      end
      {num, res} = try do
          while_fun_3.(while_fun_3, num, res)
        catch
          {:break, {num, res}} -> {num, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def pad_left(s, width) do
    try do
      res = s
      while_fun_4 = fn while_fun_4, res ->
        if _len(res) < width do
          res = ("0" <> res)
          while_fun_4.(while_fun_4, res)
        else
          res
        end
      end
      res = try do
          while_fun_4.(while_fun_4, res)
        catch
          {:break, {res}} -> res
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bin_to_int(s) do
    try do
      result = 0
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i < _len(s) do
          digit = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(_slice(s, i, (i + 1) - i))
          result = result * 2 + digit
          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def apply_sbox(s, data) do
    try do
      row_bits = (_slice(data, 0, 1 - 0) <> _slice(data, _len(data) - 1, _len(data) - (_len(data) - 1)))
      col_bits = _slice(data, 1, 3 - 1)
      row = bin_to_int(row_bits)
      col = bin_to_int(col_bits)
      val = Enum.at(Enum.at(s, row, []), col, 0)
      out = int_to_binary(val)
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def f(expansion, s0, s1, key, message) do
    try do
      left = _slice(message, 0, 4 - 0)
      right = _slice(message, 4, 8 - 4)
      temp = apply_table(right, expansion)
      temp = xor(temp, key)
      left_bin_str = apply_sbox(s0, _slice(temp, 0, 4 - 0))
      right_bin_str = apply_sbox(s1, _slice(temp, 4, 8 - 4))
      left_bin_str = pad_left(left_bin_str, 2)
      right_bin_str = pad_left(right_bin_str, 2)
      temp = apply_table((left_bin_str <> right_bin_str), Process.get(:p4_table))
      temp = xor(left, temp)
      throw {:return, (temp <> right)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:p4_table, [2, 4, 3, 1])
  Process.put(:key, "1010000010")
  Process.put(:message, "11010111")
  Process.put(:p8_table, [6, 3, 7, 4, 8, 5, 10, 9])
  Process.put(:p10_table, [3, 5, 2, 7, 4, 10, 1, 9, 8, 6])
  Process.put(:ip, [2, 6, 3, 1, 4, 8, 5, 7])
  Process.put(:ip_inv, [4, 1, 3, 5, 7, 2, 8, 6])
  Process.put(:expansion, [4, 1, 2, 3, 2, 3, 4, 1])
  Process.put(:s0, [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]])
  Process.put(:s1, [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]])
  def main() do
    Process.put(:temp, apply_table(Process.get(:key), Process.get(:p10_table)))
    Process.put(:left, _slice(Process.get(:temp), 0, 5 - 0))
    Process.put(:right, _slice(Process.get(:temp), 5, 10 - 5))
    Process.put(:left, left_shift(Process.get(:left)))
    Process.put(:right, left_shift(Process.get(:right)))
    Process.put(:key1, apply_table((Process.get(:left) <> Process.get(:right)), Process.get(:p8_table)))
    Process.put(:left, left_shift(Process.get(:left)))
    Process.put(:right, left_shift(Process.get(:right)))
    Process.put(:left, left_shift(Process.get(:left)))
    Process.put(:right, left_shift(Process.get(:right)))
    Process.put(:key2, apply_table((Process.get(:left) <> Process.get(:right)), Process.get(:p8_table)))
    Process.put(:temp, apply_table(Process.get(:message), Process.get(:ip)))
    Process.put(:temp, f(Process.get(:expansion), Process.get(:s0), Process.get(:s1), Process.get(:key1), Process.get(:temp)))
    Process.put(:temp, (_slice(Process.get(:temp), 4, 8 - 4) <> _slice(Process.get(:temp), 0, 4 - 0)))
    Process.put(:temp, f(Process.get(:expansion), Process.get(:s0), Process.get(:s1), Process.get(:key2), Process.get(:temp)))
    Process.put(:ct, apply_table(Process.get(:temp), Process.get(:ip_inv)))
    IO.puts(("Cipher text is: " <> Process.get(:ct)))
    Process.put(:temp, apply_table(Process.get(:ct), Process.get(:ip)))
    Process.put(:temp, f(Process.get(:expansion), Process.get(:s0), Process.get(:s1), Process.get(:key2), Process.get(:temp)))
    Process.put(:temp, (_slice(Process.get(:temp), 4, 8 - 4) <> _slice(Process.get(:temp), 0, 4 - 0)))
    Process.put(:temp, f(Process.get(:expansion), Process.get(:s0), Process.get(:s1), Process.get(:key1), Process.get(:temp)))
    Process.put(:pt, apply_table(Process.get(:temp), Process.get(:ip_inv)))
    IO.puts(("Plain text after decypting is: " <> Process.get(:pt)))
  end
end
Main.main()
