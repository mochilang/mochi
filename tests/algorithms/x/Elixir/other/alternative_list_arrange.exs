# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def from_int(x) do
    try do
      throw {:return, %{value: x}}
    catch
      {:return, val} -> val
    end
  end
  def from_string(s) do
    try do
      throw {:return, %{value: s}}
    catch
      {:return, val} -> val
    end
  end
  def item_to_string(it) do
    try do
      throw {:return, case it do
  %{value: v} -> Kernel.inspect(v)
  %{value: s} -> s
end}
    catch
      {:return, val} -> val
    end
  end
  def alternative_list_arrange(first, second) do
    try do
      len1 = _len(first)
      len2 = _len(second)
      abs_len = (if len1 > len2, do: len1, else: len2)
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < abs_len do
          {result} = if i < len1 do
            result = (result ++ [Enum.at(first, i, [])])
            {result}
          else
            {result}
          end
          {result} = if i < len2 do
            result = (result ++ [Enum.at(second, i, [])])
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def list_to_string(xs) do
    try do
      s = "["
      i = 0
      while_fun_2 = fn while_fun_2, i, s ->
        if i < _len(xs) do
          s = (s <> item_to_string(Enum.at(xs, i, [])))
          {s} = if i < _len(xs) - 1 do
            s = (s <> ", ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_2.(while_fun_2, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      s = (s <> "]")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:example1, alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [from_string("A"), from_string("B"), from_string("C")]))
    IO.puts(Kernel.inspect(list_to_string(Process.get(:example1))))
    Process.put(:example2, alternative_list_arrange([from_string("A"), from_string("B"), from_string("C")], [from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)]))
    IO.puts(Kernel.inspect(list_to_string(Process.get(:example2))))
    Process.put(:example3, alternative_list_arrange([from_string("X"), from_string("Y"), from_string("Z")], [from_int(9), from_int(8), from_int(7), from_int(6)]))
    IO.puts(Kernel.inspect(list_to_string(Process.get(:example3))))
    Process.put(:example4, alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], []))
    IO.puts(Kernel.inspect(list_to_string(Process.get(:example4))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
