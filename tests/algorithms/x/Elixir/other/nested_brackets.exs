# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def slice_without_last(xs) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) - 1 do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def is_balanced(s) do
    try do
      stack = []
      i = 0
      while_fun_2 = fn while_fun_2, i, stack ->
        if i < _len(s) do
          symbol = _slice(s, i, i + 1 - (i))
          {stack} = if Map.has_key?(Process.get(:open_to_closed), symbol) do
            stack = (stack ++ [symbol])
            {stack}
          else
            {stack} = if symbol == ")" || symbol == "]" || symbol == "}" do
              if _len(stack) == 0 do
                throw {:return, false}
              end
              top = Enum.at(stack, _len(stack) - 1)
              if Map.get(Process.get(:open_to_closed), top, "") != symbol do
                throw {:return, false}
              end
              stack = slice_without_last(stack)
              {stack}
            else
              {stack}
            end
            {stack}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, stack)
        else
          {i, stack}
        end
      end
      {i, stack} = try do
          while_fun_2.(while_fun_2, i, stack)
        catch
          {:break, {i, stack}} -> {i, stack}
        end

      throw {:return, _len(stack) == 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(is_balanced("")))
      IO.puts(Kernel.inspect(is_balanced("()")))
      IO.puts(Kernel.inspect(is_balanced("[]")))
      IO.puts(Kernel.inspect(is_balanced("{}")))
      IO.puts(Kernel.inspect(is_balanced("()[]{}")))
      IO.puts(Kernel.inspect(is_balanced("(())")))
      IO.puts(Kernel.inspect(is_balanced("[[")))
      IO.puts(Kernel.inspect(is_balanced("([{}])")))
      IO.puts(Kernel.inspect(is_balanced("(()[)]")))
      IO.puts(Kernel.inspect(is_balanced("([)]")))
      IO.puts(Kernel.inspect(is_balanced("[[()]]")))
      IO.puts(Kernel.inspect(is_balanced("(()(()))")))
      IO.puts(Kernel.inspect(is_balanced("]")))
      IO.puts(Kernel.inspect(is_balanced("Life is a bowl of cherries.")))
      IO.puts(Kernel.inspect(is_balanced("Life is a bowl of che{}ies.")))
      IO.puts(Kernel.inspect(is_balanced("Life is a bowl of che}{ies.")))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:open_to_closed, %{"(" => ")", "[" => "]", "{" => "}"})
end
Main.main()
