# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def make_lcg(multiplier, increment, modulo, seed) do
    try do
      throw {:return, %{multiplier: multiplier, increment: increment, modulo: modulo, seed: seed}}
    catch
      {:return, val} -> val
    end
  end
  def next_number(lcg) do
    try do
      lcg = Map.put(lcg, :seed, rem((lcg.multiplier * lcg.seed + lcg.increment), lcg.modulo))
      throw {:return, lcg.seed}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:i, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:lcg, make_lcg(1664525, 1013904223, 4294967296, _now()))
    while_fun = fn while_fun ->
      if Process.get(:i) < 5 do
        IO.puts(Kernel.inspect(next_number(Process.get(:lcg))))
        Process.put(:i, Process.get(:i) + 1)
        while_fun.(while_fun)
      else
        nil
      end
    end
    try do
      while_fun.(while_fun)
    catch
      :break -> nil
    end

    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
