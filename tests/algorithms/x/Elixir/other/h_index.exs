# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def subarray(xs, start, end_) do
    try do
      result = []
      k = start
      while_fun = fn while_fun, k, result ->
        if k < end_ do
          result = (result ++ [Enum.at(xs, k, [])])
          k = k + 1
          while_fun.(while_fun, k, result)
        else
          {k, result}
        end
      end
      {k, result} = try do
          while_fun.(while_fun, k, result)
        catch
          {:break, {k, result}} -> {k, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def merge(left_half, right_half) do
    try do
      result = []
      i = 0
      j = 0
      while_fun_2 = fn while_fun_2, i, j, result ->
        if i < _len(left_half) && j < _len(right_half) do
          {i, j, result} = if Enum.at(left_half, i, []) < Enum.at(right_half, j, []) do
            result = (result ++ [Enum.at(left_half, i, [])])
            i = i + 1
            {i, j, result}
          else
            result = (result ++ [Enum.at(right_half, j, [])])
            j = j + 1
            {i, j, result}
          end
          while_fun_2.(while_fun_2, i, j, result)
        else
          {i, j, result}
        end
      end
      {i, j, result} = try do
          while_fun_2.(while_fun_2, i, j, result)
        catch
          {:break, {i, j, result}} -> {i, j, result}
        end

      while_fun_3 = fn while_fun_3, i, result ->
        if i < _len(left_half) do
          result = (result ++ [Enum.at(left_half, i, [])])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      while_fun_4 = fn while_fun_4, j, result ->
        if j < _len(right_half) do
          result = (result ++ [Enum.at(right_half, j, [])])
          j = j + 1
          while_fun_4.(while_fun_4, j, result)
        else
          {j, result}
        end
      end
      {j, result} = try do
          while_fun_4.(while_fun_4, j, result)
        catch
          {:break, {j, result}} -> {j, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def merge_sort(array) do
    try do
      if _len(array) <= 1 do
        throw {:return, array}
      end
      middle = div(_len(array), 2)
      left_half = subarray(array, 0, middle)
      right_half = subarray(array, middle, _len(array))
      sorted_left = merge_sort(left_half)
      sorted_right = merge_sort(right_half)
      throw {:return, merge(sorted_left, sorted_right)}
    catch
      {:return, val} -> val
    end
  end
  def h_index(citations) do
    try do
      idx = 0
      while_fun_5 = fn while_fun_5, idx ->
        if idx < _len(citations) do
          if Enum.at(citations, idx, []) < 0 do
            raise("The citations should be a list of non negative integers.")
          end
          idx = idx + 1
          while_fun_5.(while_fun_5, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun_5.(while_fun_5, idx)
        catch
          {:break, {idx}} -> idx
        end

      sorted = merge_sort(citations)
      n = _len(sorted)
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < n do
          if Enum.at(sorted, n - 1 - i, []) <= i do
            throw {:return, i}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(h_index([3, 0, 6, 1, 5])))
    IO.puts(Kernel.inspect(h_index([1, 3, 1])))
    IO.puts(Kernel.inspect(h_index([1, 2, 3])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
