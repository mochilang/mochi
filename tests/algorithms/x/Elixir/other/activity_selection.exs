# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def print_max_activities(start, finish) do
    try do
      n = _len(finish)
      IO.puts("The following activities are selected:")
      i = 0
      result = "0,"
      j = 1
      while_fun = fn while_fun, i, j, result ->
        if j < n do
          {i, result} = if Enum.at(start, j) >= Enum.at(finish, i) do
            result = ((result <> Kernel.to_string(j)) <> ",")
            i = j
            {i, result}
          else
            {i, result}
          end
          j = j + 1
          while_fun.(while_fun, i, j, result)
        else
          {i, j, result}
        end
      end
      {i, j, result} = try do
          while_fun.(while_fun, i, j, result)
        catch
          {:break, {i, j, result}} -> {i, j, result}
        end

      IO.puts(result)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:start, [1, 3, 0, 5, 8, 5])
  Process.put(:finish, [2, 4, 6, 7, 9, 9])
  def main() do
    print_max_activities(Process.get(:start), Process.get(:finish))
  end
end
Main.main()
