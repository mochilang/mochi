# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def max_int(a, b) do
    try do
      if a >= b do
        throw {:return, a}
      else
        throw {:return, b}
      end
    catch
      {:return, val} -> val
    end
  end
  def max_subsequence_sum(nums) do
    try do
      if _len(nums) == 0 do
        raise("input sequence should not be empty")
      end
      ans = Enum.at(nums, 0, [])
      i = 1
      while_fun = fn while_fun, ans, i ->
        if i < _len(nums) do
          num = Enum.at(nums, i, [])
          extended = ans + num
          ans = max_int(max_int(ans, extended), num)
          i = i + 1
          while_fun.(while_fun, ans, i)
        else
          {ans, i}
        end
      end
      {ans, i} = try do
          while_fun.(while_fun, ans, i)
        catch
          {:break, {ans, i}} -> {ans, i}
        end

      throw {:return, ans}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(max_subsequence_sum([1, 2, 3, 4, -2])))
    IO.puts(Kernel.inspect(max_subsequence_sum([-2, -3, -1, -4, -6])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
