# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def rand() do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483648))
      throw {:return, div(Process.get(:seed), 65536)}
    catch
      {:return, val} -> val
    end
  end
  def randint(a, b) do
    try do
      r = rand()
      throw {:return, a + rem(r, (b - a + 1))}
    catch
      {:return, val} -> val
    end
  end
  def fisher_yates_shuffle_int(data) do
    try do
      res = data
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(res) do
          a = randint(0, _len(res) - 1)
          b = randint(0, _len(res) - 1)
          temp = Enum.at(res, a, [])
          res = List.replace_at(res, a, Enum.at(res, b, []))
          res = List.replace_at(res, b, temp)
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def fisher_yates_shuffle_str(data) do
    try do
      res = data
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(res) do
          a = randint(0, _len(res) - 1)
          b = randint(0, _len(res) - 1)
          temp = Enum.at(res, a, [])
          res = List.replace_at(res, a, Enum.at(res, b, []))
          res = List.replace_at(res, b, temp)
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  Process.put(:integers, [0, 1, 2, 3, 4, 5, 6, 7])
  Process.put(:strings, ["python", "says", "hello", "!"])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts("Fisher-Yates Shuffle:")
    IO.puts(((("List " <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:integers)])), ",", " ")) <> " ") <> Kernel.inspect(Process.get(:strings))))
    IO.puts(((("FY Shuffle " <> Kernel.inspect(fisher_yates_shuffle_int(Process.get(:integers)))) <> " ") <> Kernel.inspect(fisher_yates_shuffle_str(Process.get(:strings)))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
