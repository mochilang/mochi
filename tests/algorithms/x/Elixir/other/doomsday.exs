# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  def get_week_day(year, month, day) do
    try do
      if year < 100 do
        raise("year should be in YYYY format")
      end
      if month < 1 || month > 12 do
        raise("month should be between 1 to 12")
      end
      if day < 1 || day > 31 do
        raise("day should be between 1 to 31")
      end
      century = div(year, 100)
      century_anchor = rem((5 * (rem(century, 4)) + 2), 7)
      centurian = rem(year, 100)
      centurian_m = rem(centurian, 12)
      dooms_day = rem(((div(centurian, 12)) + centurian_m + (div(centurian_m, 4)) + century_anchor), 7)
      day_anchor = (if rem(year, 4) != 0 || (centurian == 0 && rem(year, 400) != 0), do: Enum.at(Process.get(:doomsday_not_leap), month - 1), else: Enum.at(Process.get(:doomsday_leap), month - 1))
      week_day = rem((dooms_day + day - day_anchor), 7)
      {week_day} = if week_day < 0 do
        week_day = week_day + 7
        {week_day}
      else
        {week_day}
      end
      throw {:return, Map.get(Process.get(:week_day_names), week_day, "")}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:doomsday_leap, [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5])
  Process.put(:doomsday_not_leap, [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5])
  Process.put(:week_day_names, %{0 => "Sunday", 1 => "Monday", 2 => "Tuesday", 3 => "Wednesday", 4 => "Thursday", 5 => "Friday", 6 => "Saturday"})
  def main() do
    IO.puts(Kernel.inspect(get_week_day(2020, 10, 24)))
    IO.puts(Kernel.inspect(get_week_day(2017, 10, 24)))
    IO.puts(Kernel.inspect(get_week_day(2019, 5, 3)))
    IO.puts(Kernel.inspect(get_week_day(1970, 9, 16)))
    IO.puts(Kernel.inspect(get_week_day(1870, 8, 13)))
    IO.puts(Kernel.inspect(get_week_day(2040, 3, 14)))
  end
end
Main.main()
