# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def move_tower(height, from_pole, to_pole, with_pole) do
    try do
      if height >= 1 do
        move_tower(height - 1, from_pole, with_pole, to_pole)
        move_disk(from_pole, to_pole)
        move_tower(height - 1, with_pole, to_pole, from_pole)
      end
    catch
      {:return, val} -> val
    end
  end
  def move_disk(fp, tp) do
    try do
      IO.puts(((("moving disk from " <> fp) <> " to ") <> tp))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:height, 3)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    move_tower(Process.get(:height), "A", "B", "C")
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
