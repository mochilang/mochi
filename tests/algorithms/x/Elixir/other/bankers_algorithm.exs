# Code generated by Mochi transpiler 2025-08-12 13:41 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def processes_resource_summation(alloc) do
    try do
      resources = _len(Enum.at(alloc, 0, []))
      sums = []
      i = 0
      while_fun = fn while_fun, i, sums ->
        if i < resources do
          total = 0
          j = 0
          while_fun_2 = fn while_fun_2, j, total ->
            if j < _len(alloc) do
              total = total + Enum.at(Enum.at(alloc, j, []), i, 0)
              j = j + 1
              while_fun_2.(while_fun_2, j, total)
            else
              {j, total}
            end
          end
          {j, total} = try do
              while_fun_2.(while_fun_2, j, total)
            catch
              {:break, {j, total}} -> {j, total}
            end

          sums = (sums ++ [total])
          i = i + 1
          while_fun.(while_fun, i, sums)
        else
          {i, sums}
        end
      end
      {i, sums} = try do
          while_fun.(while_fun, i, sums)
        catch
          {:break, {i, sums}} -> {i, sums}
        end

      throw {:return, sums}
    catch
      {:return, val} -> val
    end
  end
  def available_resources(claim, alloc_sum) do
    try do
      avail = []
      i = 0
      while_fun_3 = fn while_fun_3, avail, i ->
        if i < _len(claim) do
          avail = (avail ++ [Enum.at(claim, i, []) - Enum.at(alloc_sum, i, [])])
          i = i + 1
          while_fun_3.(while_fun_3, avail, i)
        else
          {avail, i}
        end
      end
      {avail, i} = try do
          while_fun_3.(while_fun_3, avail, i)
        catch
          {:break, {avail, i}} -> {avail, i}
        end

      throw {:return, avail}
    catch
      {:return, val} -> val
    end
  end
  def need(max, alloc) do
    try do
      needs = []
      i = 0
      while_fun_4 = fn while_fun_4, i, needs ->
        if i < _len(max) do
          row = []
          j = 0
          while_fun_5 = fn while_fun_5, j, row ->
            if j < _len(Enum.at(max, 0, [])) do
              row = (row ++ [Enum.at(Enum.at(max, i, []), j, 0) - Enum.at(Enum.at(alloc, i, []), j, 0)])
              j = j + 1
              while_fun_5.(while_fun_5, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_5.(while_fun_5, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          needs = (needs ++ [row])
          i = i + 1
          while_fun_4.(while_fun_4, i, needs)
        else
          {i, needs}
        end
      end
      {i, needs} = try do
          while_fun_4.(while_fun_4, i, needs)
        catch
          {:break, {i, needs}} -> {i, needs}
        end

      throw {:return, needs}
    catch
      {:return, val} -> val
    end
  end
  def pretty_print(claim, alloc, max) do
    try do
      IO.puts("         Allocated Resource Table")
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(alloc) do
          row = Enum.at(alloc, i, [])
          line = (("P" <> Kernel.to_string(i + 1)) <> "       ")
          j = 0
          while_fun_7 = fn while_fun_7, j, line ->
            if j < _len(row) do
              line = (line <> Kernel.to_string(Enum.at(row, j, [])))
              {line} = if j < _len(row) - 1 do
                line = (line <> "        ")
                {line}
              else
                {line}
              end
              j = j + 1
              while_fun_7.(while_fun_7, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_7.(while_fun_7, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          IO.puts("")
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

      IO.puts("         System Resource Table")
      i = 0
      while_fun_8 = fn while_fun_8, i ->
        if i < _len(max) do
          row = Enum.at(max, i, [])
          line = (("P" <> Kernel.to_string(i + 1)) <> "       ")
          j = 0
          while_fun_9 = fn while_fun_9, j, line ->
            if j < _len(row) do
              line = (line <> Kernel.to_string(Enum.at(row, j, [])))
              {line} = if j < _len(row) - 1 do
                line = (line <> "        ")
                {line}
              else
                {line}
              end
              j = j + 1
              while_fun_9.(while_fun_9, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_9.(while_fun_9, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          IO.puts("")
          i = i + 1
          while_fun_8.(while_fun_8, i)
        else
          i
        end
      end
      i = try do
          while_fun_8.(while_fun_8, i)
        catch
          {:break, {i}} -> i
        end

      usage = ""
      i = 0
      while_fun_10 = fn while_fun_10, i, usage ->
        if i < _len(claim) do
          {usage} = if i > 0 do
            usage = (usage <> " ")
            {usage}
          else
            {usage}
          end
          usage = (usage <> Kernel.to_string(Enum.at(claim, i, [])))
          i = i + 1
          while_fun_10.(while_fun_10, i, usage)
        else
          {i, usage}
        end
      end
      {i, usage} = try do
          while_fun_10.(while_fun_10, i, usage)
        catch
          {:break, {i, usage}} -> {i, usage}
        end

      alloc_sum = processes_resource_summation(alloc)
      avail = available_resources(claim, alloc_sum)
      avail_str = ""
      i = 0
      while_fun_11 = fn while_fun_11, avail_str, i ->
        if i < _len(avail) do
          {avail_str} = if i > 0 do
            avail_str = (avail_str <> " ")
            {avail_str}
          else
            {avail_str}
          end
          avail_str = (avail_str <> Kernel.to_string(Enum.at(avail, i, [])))
          i = i + 1
          while_fun_11.(while_fun_11, avail_str, i)
        else
          {avail_str, i}
        end
      end
      {avail_str, i} = try do
          while_fun_11.(while_fun_11, avail_str, i)
        catch
          {:break, {avail_str, i}} -> {avail_str, i}
        end

      IO.puts(("Current Usage by Active Processes: " <> usage))
      IO.puts(("Initial Available Resources:       " <> avail_str))
    catch
      {:return, val} -> val
    end
  end
  def bankers_algorithm(claim, alloc, max) do
    try do
      need_list = need(max, alloc)
      alloc_sum = processes_resource_summation(alloc)
      avail = available_resources(claim, alloc_sum)
      IO.puts("__________________________________________________")
      IO.puts("")
      finished = []
      i = 0
      while_fun_12 = fn while_fun_12, finished, i ->
        if i < _len(need_list) do
          finished = (finished ++ [false])
          i = i + 1
          while_fun_12.(while_fun_12, finished, i)
        else
          {finished, i}
        end
      end
      {finished, i} = try do
          while_fun_12.(while_fun_12, finished, i)
        catch
          {:break, {finished, i}} -> {finished, i}
        end

      remaining = _len(need_list)
      while_fun_13 = fn while_fun_13, avail, finished, remaining ->
        if remaining > 0 do
          safe = false
          p = 0
          while_fun_14 = fn while_fun_14, avail, finished, p, remaining, safe ->
            if p < _len(need_list) do
              {avail, finished, remaining, safe} = if !Enum.at(finished, p, []) do
                exec = true
                r = 0
                while_fun_15 = fn while_fun_15, exec, r ->
                  if r < _len(avail) do
                    {exec} = if Enum.at(Enum.at(need_list, p, []), r, 0) > Enum.at(avail, r, []) do
                      exec = false
                      throw {:break, {exec, r}}
                      {exec}
                    else
                      {exec}
                    end
                    r = r + 1
                    while_fun_15.(while_fun_15, exec, r)
                  else
                    {exec, r}
                  end
                end
                {exec, r} = try do
                    while_fun_15.(while_fun_15, exec, r)
                  catch
                    {:break, {exec, r}} -> {exec, r}
                  end

                {avail, finished, r, remaining, safe} = if exec do
                  safe = true
                  IO.puts((("Process " <> Kernel.to_string(p + 1)) <> " is executing."))
                  r = 0
                  while_fun_16 = fn while_fun_16, avail, r ->
                    if r < _len(avail) do
                      avail = List.replace_at(avail, r, Enum.at(avail, r, []) + Enum.at(Enum.at(alloc, p, []), r, 0))
                      r = r + 1
                      while_fun_16.(while_fun_16, avail, r)
                    else
                      {avail, r}
                    end
                  end
                  {avail, r} = try do
                      while_fun_16.(while_fun_16, avail, r)
                    catch
                      {:break, {avail, r}} -> {avail, r}
                    end

                  avail_str = ""
                  r = 0
                  while_fun_17 = fn while_fun_17, avail_str, r ->
                    if r < _len(avail) do
                      {avail_str} = if r > 0 do
                        avail_str = (avail_str <> " ")
                        {avail_str}
                      else
                        {avail_str}
                      end
                      avail_str = (avail_str <> Kernel.to_string(Enum.at(avail, r, [])))
                      r = r + 1
                      while_fun_17.(while_fun_17, avail_str, r)
                    else
                      {avail_str, r}
                    end
                  end
                  {avail_str, r} = try do
                      while_fun_17.(while_fun_17, avail_str, r)
                    catch
                      {:break, {avail_str, r}} -> {avail_str, r}
                    end

                  IO.puts(("Updated available resource stack for processes: " <> avail_str))
                  IO.puts("The process is in a safe state.")
                  IO.puts("")
                  finished = List.replace_at(finished, p, true)
                  remaining = remaining - 1
                  {avail, finished, r, remaining, safe}
                else
                  {avail, finished, r, remaining, safe}
                end
                {avail, finished, remaining, safe}
              else
                {avail, finished, remaining, safe}
              end
              p = p + 1
              while_fun_14.(while_fun_14, avail, finished, p, remaining, safe)
            else
              {avail, finished, p, remaining, safe}
            end
          end
          {avail, finished, p, remaining, safe} = try do
              while_fun_14.(while_fun_14, avail, finished, p, remaining, safe)
            catch
              {:break, {avail, finished, p, remaining, safe}} -> {avail, finished, p, remaining, safe}
            end

          if !safe do
            IO.puts("System in unsafe state. Aborting...")
            IO.puts("")
            throw {:break, {avail, finished, remaining}}
          end
          while_fun_13.(while_fun_13, avail, finished, remaining)
        else
          {avail, finished, remaining}
        end
      end
      {avail, finished, remaining} = try do
          while_fun_13.(while_fun_13, avail, finished, remaining)
        catch
          {:break, {avail, finished, remaining}} -> {avail, finished, remaining}
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:claim_vector, [8, 5, 9, 7])
  Process.put(:allocated_resources_table, [[2, 0, 1, 1], [0, 1, 2, 1], [4, 0, 0, 3], [0, 2, 1, 0], [1, 0, 3, 0]])
  Process.put(:maximum_claim_table, [[3, 2, 1, 4], [0, 2, 5, 2], [5, 1, 0, 5], [1, 5, 3, 0], [3, 0, 3, 3]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    pretty_print(Process.get(:claim_vector), Process.get(:allocated_resources_table), Process.get(:maximum_claim_table))
    bankers_algorithm(Process.get(:claim_vector), Process.get(:allocated_resources_table), Process.get(:maximum_claim_table))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
