# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_avg(number_1, number_2) do
    try do
      throw {:return, div((number_1 + number_2), 2)}
    catch
      {:return, val} -> val
    end
  end
  def guess_the_number(lower, higher, to_guess) do
    try do
      if lower > higher do
        raise("argument value for lower and higher must be(lower > higher)")
      end
      if !(lower < to_guess && to_guess < higher) do
        raise("guess value must be within the range of lower and higher value")
      end
      answer = fn number ->
  if number > to_guess do
    throw {:return, "high"}
  else
    if number < to_guess do
      throw {:return, "low"}
    else
      throw {:return, "same"}
    end
  end
end
      IO.puts("started...")
      last_lowest = lower
      last_highest = higher
      last_numbers = []
      while_fun = fn while_fun, last_highest, last_lowest, last_numbers ->
        if true do
          number = get_avg(last_lowest, last_highest)
          last_numbers = (last_numbers ++ [number])
          resp = answer.(number)
          {last_highest, last_lowest} = if resp == "low" do
            last_lowest = number
            {last_highest, last_lowest}
          else
            {last_highest} = if resp == "high" do
              last_highest = number
              {last_highest}
            else
              throw {:break, {last_highest, last_lowest, last_numbers}}
              {last_highest}
            end
            {last_highest, last_lowest}
          end
          while_fun.(while_fun, last_highest, last_lowest, last_numbers)
        else
          {last_highest, last_lowest, last_numbers}
        end
      end
      {last_highest, last_lowest, last_numbers} = try do
          while_fun.(while_fun, last_highest, last_lowest, last_numbers)
        catch
          {:break, {last_highest, last_lowest, last_numbers}} -> {last_highest, last_lowest, last_numbers}
        end

      IO.puts(("guess the number : " <> Kernel.to_string(Enum.at(last_numbers, _len(last_numbers) - 1, []))))
      IO.puts(("details : " <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [last_numbers])), ",", " ")))
      throw {:return, last_numbers}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    guess_the_number(10, 1000, 17)
    guess_the_number(-10000, 10000, 7)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
