# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def min3(a, b, c) do
    try do
      m = a
      {m} = if b < m do
        m = b
        {m}
      else
        {m}
      end
      {m} = if c < m do
        m = c
        {m}
      else
        {m}
      end
      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def helper_top_down(word1, word2, dp, i, j) do
    try do
      if i < 0 do
        throw {:return, j + 1}
      end
      if j < 0 do
        throw {:return, i + 1}
      end
      if Enum.at(Enum.at(dp, i), j) != (0 - 1) do
        throw {:return, Enum.at(Enum.at(dp, i), j)}
      end
      {dp} = if _slice(word1, i, i + 1 - (i)) == _slice(word2, j, j + 1 - (j)) do
        dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, helper_top_down(word1, word2, dp, i - 1, j - 1)))
        {dp}
      else
        insert = helper_top_down(word1, word2, dp, i, j - 1)
        delete = helper_top_down(word1, word2, dp, i - 1, j)
        replace = helper_top_down(word1, word2, dp, i - 1, j - 1)
        dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, 1 + min3(insert, delete, replace)))
        {dp}
      end
      throw {:return, Enum.at(Enum.at(dp, i), j)}
    catch
      {:return, val} -> val
    end
  end
  def min_dist_top_down(word1, word2) do
    try do
      m = _len(word1)
      n = _len(word2)
      dp = []
      {dp} = Enum.reduce((0..(m - 1)), {dp}, fn _, {dp} ->
        row = []
        {row} = Enum.reduce((0..(n - 1)), {row}, fn _2, {row} ->
          row = (row ++ [0 - 1])
          {row}
        end)
        dp = (dp ++ [row])
        {dp}
      end)
      throw {:return, helper_top_down(word1, word2, dp, m - 1, n - 1)}
    catch
      {:return, val} -> val
    end
  end
  def min_dist_bottom_up(word1, word2) do
    try do
      m = _len(word1)
      n = _len(word2)
      dp = []
      {dp} = Enum.reduce((0..((m + 1) - 1)), {dp}, fn _, {dp} ->
        row = []
        {row} = Enum.reduce((0..((n + 1) - 1)), {row}, fn _2, {row} ->
          row = (row ++ [0])
          {row}
        end)
        dp = (dp ++ [row])
        {dp}
      end)
      {dp} = Enum.reduce((0..((m + 1) - 1)), {dp}, fn i, {dp} ->
        {dp} = Enum.reduce((0..((n + 1) - 1)), {dp}, fn j, {dp} ->
          {dp} = if i == 0 do
            dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, j))
            {dp}
          else
            {dp} = if j == 0 do
              dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, i))
              {dp}
            else
              {dp} = if _slice(word1, i - 1, i - (i - 1)) == _slice(word2, j - 1, j - (j - 1)) do
                dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, Enum.at(Enum.at(dp, i - 1), j - 1)))
                {dp}
              else
                insert = Enum.at(Enum.at(dp, i), j - 1)
                delete = Enum.at(Enum.at(dp, i - 1), j)
                replace = Enum.at(Enum.at(dp, i - 1), j - 1)
                dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, 1 + min3(insert, delete, replace)))
                {dp}
              end
              {dp}
            end
            {dp}
          end
          {dp}
        end)
        {dp}
      end)
      throw {:return, Enum.at(Enum.at(dp, m), n)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(min_dist_top_down("intention", "execution")))
    IO.puts(Kernel.inspect(min_dist_top_down("intention", "")))
    IO.puts(Kernel.inspect(min_dist_top_down("", "")))
    IO.puts(Kernel.inspect(min_dist_bottom_up("intention", "execution")))
    IO.puts(Kernel.inspect(min_dist_bottom_up("intention", "")))
    IO.puts(Kernel.inspect(min_dist_bottom_up("", "")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
