# Code generated by Mochi transpiler 2025-08-08 15:37 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def dp_count(s, n) do
    try do
      if n < 0 do
        throw {:return, 0}
      end
      table = []
      i = 0
      while_fun = fn while_fun, i, table ->
        if i <= n do
          table = (table ++ [0])
          i = i + 1
          while_fun.(while_fun, i, table)
        else
          {i, table}
        end
      end
      {i, table} = try do
          while_fun.(while_fun, i, table)
        catch
          {:break, {i, table}} -> {i, table}
        end

      table = List.replace_at(table, 0, 1)
      idx = 0
      while_fun_2 = fn while_fun_2, idx, table ->
        if idx < _len(s) do
          coin_val = Enum.at(s, idx)
          j = coin_val
          while_fun_3 = fn while_fun_3, j, table ->
            if j <= n do
              table = List.replace_at(table, j, Enum.at(table, j) + Enum.at(table, j - coin_val))
              j = j + 1
              while_fun_3.(while_fun_3, j, table)
            else
              {j, table}
            end
          end
          {j, table} = try do
              while_fun_3.(while_fun_3, j, table)
            catch
              {:break, {j, table}} -> {j, table}
            end

          idx = idx + 1
          while_fun_2.(while_fun_2, idx, table)
        else
          {idx, table}
        end
      end
      {idx, table} = try do
          while_fun_2.(while_fun_2, idx, table)
        catch
          {:break, {idx, table}} -> {idx, table}
        end

      throw {:return, Enum.at(table, n)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(dp_count([1, 2, 3], 4)))
    IO.puts(Kernel.inspect(dp_count([1, 2, 3], 7)))
    IO.puts(Kernel.inspect(dp_count([2, 5, 3, 6], 10)))
    IO.puts(Kernel.inspect(dp_count([10], 99)))
    IO.puts(Kernel.inspect(dp_count([4, 5, 6], 0)))
    IO.puts(Kernel.inspect(dp_count([1, 2, 3], -5)))
  end
end
Main.main()
