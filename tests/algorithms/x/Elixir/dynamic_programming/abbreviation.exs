# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      idx = index_of(upper, ch)
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      idx = index_of(lower, ch)
      if idx >= 0 do
        throw {:return, 97 + idx}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def chr(n) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      if n >= 65 && n < 91 do
        throw {:return, _slice(upper, n - 65, (n - 64) - (n - 65))}
      end
      if n >= 97 && n < 123 do
        throw {:return, _slice(lower, n - 97, (n - 96) - (n - 97))}
      end
      throw {:return, "?"}
    catch
      {:return, val} -> val
    end
  end
  def to_upper_char(c) do
    try do
      code = ord(c)
      if code >= 97 && code <= 122 do
        throw {:return, chr(code - 32)}
      end
      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def is_lower(c) do
    try do
      code = ord(c)
      throw {:return, code >= 97 && code <= 122}
    catch
      {:return, val} -> val
    end
  end
  def abbr(a, b) do
    try do
      n = _len(a)
      m = _len(b)
      dp = []
      i = 0
      while_fun_2 = fn while_fun_2, dp, i ->
        if i <= n do
          row = []
          j = 0
          while_fun_3 = fn while_fun_3, j, row ->
            if j <= m do
              row = (row ++ [false])
              j = j + 1
              while_fun_3.(while_fun_3, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_3.(while_fun_3, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dp = (dp ++ [row])
          i = i + 1
          while_fun_2.(while_fun_2, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun_2.(while_fun_2, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      dp = List.replace_at(dp, 0, List.replace_at(Enum.at(dp, 0), 0, true))
      i = 0
      while_fun_4 = fn while_fun_4, dp, i ->
        if i < n do
          j = 0
          while_fun_5 = fn while_fun_5, dp, j ->
            if j <= m do
              {dp} = if Enum.at(Enum.at(dp, i), j) do
                {dp} = if j < m && to_upper_char(String.at(a, i)) == String.at(b, j) do
                  dp = List.replace_at(dp, i + 1, List.replace_at(Enum.at(dp, i + 1), j + 1, true))
                  {dp}
                else
                  {dp}
                end
                {dp} = if is_lower(String.at(a, i)) do
                  dp = List.replace_at(dp, i + 1, List.replace_at(Enum.at(dp, i + 1), j, true))
                  {dp}
                else
                  {dp}
                end
                {dp}
              else
                {dp}
              end
              j = j + 1
              while_fun_5.(while_fun_5, dp, j)
            else
              {dp, j}
            end
          end
          {dp, j} = try do
              while_fun_5.(while_fun_5, dp, j)
            catch
              {:break, {dp, j}} -> {dp, j}
            end

          i = i + 1
          while_fun_4.(while_fun_4, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun_4.(while_fun_4, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      throw {:return, Enum.at(Enum.at(dp, n), m)}
    catch
      {:return, val} -> val
    end
  end
  def print_bool(b) do
    try do
      if b do
        IO.puts(true)
      else
        IO.puts(false)
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    print_bool(abbr("daBcd", "ABC"))
    print_bool(abbr("dBcd", "ABC"))
  end
end
Main.main()
