# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def min_int(a, b) do
    try do
      throw {:return, ((if a < b, do: a, else: b))}
    catch
      {:return, val} -> val
    end
  end
  def minimum_cost_path(matrix) do
    try do
      rows = _len(matrix)
      cols = _len(Enum.at(matrix, 0))
      j = 1
      while_fun = fn while_fun, j, matrix ->
        if j < cols do
          row0 = Enum.at(matrix, 0)
          row0 = List.replace_at(row0, j, Enum.at(row0, j) + Enum.at(row0, j - 1))
          matrix = List.replace_at(matrix, 0, row0)
          j = j + 1
          while_fun.(while_fun, j, matrix)
        else
          {j, matrix}
        end
      end
      {j, matrix} = try do
          while_fun.(while_fun, j, matrix)
        catch
          {:break, {j, matrix}} -> {j, matrix}
        end

      i = 1
      while_fun_2 = fn while_fun_2, i, matrix ->
        if i < rows do
          row = Enum.at(matrix, i)
          row = List.replace_at(row, 0, Enum.at(row, 0) + Enum.at(Enum.at(matrix, i - 1), 0))
          matrix = List.replace_at(matrix, i, row)
          i = i + 1
          while_fun_2.(while_fun_2, i, matrix)
        else
          {i, matrix}
        end
      end
      {i, matrix} = try do
          while_fun_2.(while_fun_2, i, matrix)
        catch
          {:break, {i, matrix}} -> {i, matrix}
        end

      i = 1
      while_fun_3 = fn while_fun_3, i, j, matrix ->
        if i < rows do
          row = Enum.at(matrix, i)
          j = 1
          while_fun_4 = fn while_fun_4, j, row ->
            if j < cols do
              up = Enum.at(Enum.at(matrix, i - 1), j)
              left = Enum.at(row, j - 1)
              best = min_int(up, left)
              row = List.replace_at(row, j, Enum.at(row, j) + best)
              j = j + 1
              while_fun_4.(while_fun_4, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_4.(while_fun_4, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          matrix = List.replace_at(matrix, i, row)
          i = i + 1
          while_fun_3.(while_fun_3, i, j, matrix)
        else
          {i, j, matrix}
        end
      end
      {i, j, matrix} = try do
          while_fun_3.(while_fun_3, i, j, matrix)
        catch
          {:break, {i, j, matrix}} -> {i, j, matrix}
        end

      throw {:return, Enum.at(Enum.at(matrix, rows - 1), cols - 1)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:m1, [[2, 1], [3, 1], [4, 2]])
  Process.put(:m2, [[2, 1, 4], [2, 1, 3], [3, 2, 1]])
  def main() do
    IO.puts(Kernel.inspect(minimum_cost_path(Process.get(:m1))))
    IO.puts(Kernel.inspect(minimum_cost_path(Process.get(:m2))))
  end
end
Main.main()
