# Code generated by Mochi transpiler 2025-08-13 16:11 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def tribonacci(num) do
    try do
      dp = []
      i = 0
      while_fun = fn while_fun, dp, i ->
        if i < num do
          {dp} = if i == 0 || i == 1 do
            dp = (dp ++ [0])
            {dp}
          else
            {dp} = if i == 2 do
              dp = (dp ++ [1])
              {dp}
            else
              t = Enum.at(dp, i - 1, []) + Enum.at(dp, i - 2, []) + Enum.at(dp, i - 3, [])
              dp = (dp ++ [t])
              {dp}
            end
            {dp}
          end
          i = i + 1
          while_fun.(while_fun, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun.(while_fun, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      throw {:return, dp}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(tribonacci(8)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
