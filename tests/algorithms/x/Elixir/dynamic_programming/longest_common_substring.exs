# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def longest_common_substring(text1, text2) do
    try do
      if _len(text1) == 0 || _len(text2) == 0 do
        throw {:return, ""}
      end
      m = _len(text1)
      n = _len(text2)
      dp = []
      i = 0
      while_fun = fn while_fun, dp, i ->
        if i < m + 1 do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < n + 1 do
              row = (row ++ [0])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dp = (dp ++ [row])
          i = i + 1
          while_fun.(while_fun, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun.(while_fun, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      end_pos = 0
      max_len = 0
      ii = 1
      while_fun_3 = fn while_fun_3, dp, end_pos, ii, max_len ->
        if ii <= m do
          jj = 1
          while_fun_4 = fn while_fun_4, dp, end_pos, jj, max_len ->
            if jj <= n do
              {dp, end_pos, max_len} = if _slice(text1, ii - 1, ii - (ii - 1)) == _slice(text2, jj - 1, jj - (jj - 1)) do
                dp = List.replace_at(dp, ii, List.replace_at(Enum.at(dp, ii), jj, 1 + Enum.at(Enum.at(dp, ii - 1), jj - 1)))
                {end_pos, max_len} = if Enum.at(Enum.at(dp, ii), jj) > max_len do
                  max_len = Enum.at(Enum.at(dp, ii), jj)
                  end_pos = ii
                  {end_pos, max_len}
                else
                  {end_pos, max_len}
                end
                {dp, end_pos, max_len}
              else
                {dp, end_pos, max_len}
              end
              jj = jj + 1
              while_fun_4.(while_fun_4, dp, end_pos, jj, max_len)
            else
              {dp, end_pos, jj, max_len}
            end
          end
          {dp, end_pos, jj, max_len} = try do
              while_fun_4.(while_fun_4, dp, end_pos, jj, max_len)
            catch
              {:break, {dp, end_pos, jj, max_len}} -> {dp, end_pos, jj, max_len}
            end

          ii = ii + 1
          while_fun_3.(while_fun_3, dp, end_pos, ii, max_len)
        else
          {dp, end_pos, ii, max_len}
        end
      end
      {dp, end_pos, ii, max_len} = try do
          while_fun_3.(while_fun_3, dp, end_pos, ii, max_len)
        catch
          {:break, {dp, end_pos, ii, max_len}} -> {dp, end_pos, ii, max_len}
        end

      throw {:return, _slice(text1, end_pos - max_len, end_pos - (end_pos - max_len))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(longest_common_substring("abcdef", "xabded")))
    IO.puts("\n")
    IO.puts(Kernel.inspect(longest_common_substring("zxabcdezy", "yzabcdezx")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
