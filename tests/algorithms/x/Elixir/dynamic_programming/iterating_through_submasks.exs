# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def bitwise_and(a, b) do
    try do
      result = 0
      bit = 1
      x = a
      y = b
      while_fun = fn while_fun, bit, result, x, y ->
        if x > 0 || y > 0 do
          abit = rem(x, 2)
          bbit = rem(y, 2)
          {result} = if abit == 1 && bbit == 1 do
            result = result + bit
            {result}
          else
            {result}
          end
          x = div(x, 2)
          y = div(y, 2)
          bit = bit * 2
          while_fun.(while_fun, bit, result, x, y)
        else
          {bit, result, x, y}
        end
      end
      {bit, result, x, y} = try do
          while_fun.(while_fun, bit, result, x, y)
        catch
          {:break, {bit, result, x, y}} -> {bit, result, x, y}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def list_of_submasks(mask) do
    try do
      if mask <= 0 do
        raise(("mask needs to be positive integer, your input " <> Kernel.to_string(mask)))
      end
      all_submasks = []
      submask = mask
      while_fun_2 = fn while_fun_2, all_submasks, submask ->
        if submask != 0 do
          all_submasks = (all_submasks ++ [submask])
          submask = bitwise_and(submask - 1, mask)
          while_fun_2.(while_fun_2, all_submasks, submask)
        else
          {all_submasks, submask}
        end
      end
      {all_submasks, submask} = try do
          while_fun_2.(while_fun_2, all_submasks, submask)
        catch
          {:break, {all_submasks, submask}} -> {all_submasks, submask}
        end

      throw {:return, all_submasks}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(list_of_submasks(15)))
    IO.puts(Kernel.inspect(list_of_submasks(13)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
