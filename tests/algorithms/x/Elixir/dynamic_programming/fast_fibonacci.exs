# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def _fib(n) do
    try do
      if n == 0 do
        throw {:return, %{fn: 0, fn1: 1}}
      end
      half = _fib(div(n, 2))
      a = half.fn
      b = half.fn1
      c = a * (b * 2 - a)
      d = a * a + b * b
      if rem(n, 2) == 0 do
        throw {:return, %{fn: c, fn1: d}}
      end
      throw {:return, %{fn: d, fn1: c + d}}
    catch
      {:return, val} -> val
    end
  end
  def fibonacci(n) do
    try do
      if n < 0 do
        raise("Negative arguments are not supported")
      end
      res = _fib(n)
      throw {:return, res.fn}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:i, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    while_fun = fn while_fun ->
      if Process.get(:i) < 13 do
        IO.puts(Kernel.inspect(fibonacci(Process.get(:i))))
        Process.put(:i, Process.get(:i) + 1)
        while_fun.(while_fun)
      else
        nil
      end
    end
    try do
      while_fun.(while_fun)
    catch
      :break -> nil
    end

    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
