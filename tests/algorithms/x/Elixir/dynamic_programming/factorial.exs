# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def factorial(num) do
    try do
      if num < 0 do
        IO.puts("Number should not be negative.")
        throw {:return, 0}
      end
      m = Process.get(:memo)
      i = _len(m)
      while_fun = fn while_fun, i, m ->
        if i <= num do
          m = (m ++ [i * Enum.at(m, i - 1)])
          i = i + 1
          while_fun.(while_fun, i, m)
        else
          {i, m}
        end
      end
      {i, m} = try do
          while_fun.(while_fun, i, m)
        catch
          {:break, {i, m}} -> {i, m}
        end

      Process.put(:memo, m)
      throw {:return, Enum.at(m, num)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:memo, [1, 1])
  Process.put(:results, [])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(factorial(7)))
    factorial(-1)
    Enum.each((0..(10 - 1)), fn i ->
      Process.put(:results, (Process.get(:results) ++ [factorial(i)]))
    end)
    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:results)])), ",", " "))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
