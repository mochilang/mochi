# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def maximum_non_adjacent_sum(nums) do
    try do
      if _len(nums) == 0 do
        throw {:return, 0}
      end
      max_including = Enum.at(nums, 0)
      max_excluding = 0
      i = 1
      while_fun = fn while_fun, i, max_excluding, max_including ->
        if i < _len(nums) do
          num = Enum.at(nums, i)
          new_including = max_excluding + num
          new_excluding = (if max_including > max_excluding, do: max_including, else: max_excluding)
          max_including = new_including
          max_excluding = new_excluding
          i = i + 1
          while_fun.(while_fun, i, max_excluding, max_including)
        else
          {i, max_excluding, max_including}
        end
      end
      {i, max_excluding, max_including} = try do
          while_fun.(while_fun, i, max_excluding, max_including)
        catch
          {:break, {i, max_excluding, max_including}} -> {i, max_excluding, max_including}
        end

      if max_including > max_excluding do
        throw {:return, max_including}
      end
      throw {:return, max_excluding}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(maximum_non_adjacent_sum([1, 2, 3])))
    IO.puts(Kernel.inspect(maximum_non_adjacent_sum([1, 5, 3, 7, 2, 2, 6])))
    IO.puts(Kernel.inspect(maximum_non_adjacent_sum([-1, -5, -3, -7, -2, -2, -6])))
    IO.puts(Kernel.inspect(maximum_non_adjacent_sum([499, 500, -3, -7, -2, -2, -6])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
