# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def count_assignments(person, task_performed, used) do
    try do
      if person == _len(task_performed) do
        throw {:return, 1}
      end
      total = 0
      tasks = Enum.at(task_performed, person)
      i = 0
      while_fun = fn while_fun, i, total ->
        if i < _len(tasks) do
          t = Enum.at(tasks, i)
          {total} = if !(t in used) do
            total = total + count_assignments(person + 1, task_performed, (used ++ [t]))
            {total}
          else
            {total}
          end
          i = i + 1
          while_fun.(while_fun, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun.(while_fun, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def count_no_of_ways(task_performed) do
    try do
      throw {:return, count_assignments(0, task_performed, [])}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      task_performed = [[1, 3, 4], [1, 2, 5], [3, 4]]
      IO.puts(Kernel.inspect(count_no_of_ways(task_performed)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
