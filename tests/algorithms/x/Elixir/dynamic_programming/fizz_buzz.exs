# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def fizz_buzz(number, iterations) do
    try do
      if number < 1 do
        raise("starting number must be an integer and be more than 0")
      end
      if iterations < 1 do
        raise("Iterations must be done more than 0 times to play FizzBuzz")
      end
      out = ""
      n = number
      while_fun = fn while_fun, n, out ->
        if n <= iterations do
          {out} = if rem(n, 3) == 0 do
            out = (out <> "Fizz")
            {out}
          else
            {out}
          end
          {out} = if rem(n, 5) == 0 do
            out = (out <> "Buzz")
            {out}
          else
            {out}
          end
          {out} = if rem(n, 3) != 0 && rem(n, 5) != 0 do
            out = (out <> Kernel.to_string(n))
            {out}
          else
            {out}
          end
          out = (out <> " ")
          n = n + 1
          while_fun.(while_fun, n, out)
        else
          {n, out}
        end
      end
      {n, out} = try do
          while_fun.(while_fun, n, out)
        catch
          {:break, {n, out}} -> {n, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(fizz_buzz(1, 7)))
    IO.puts(Kernel.inspect(fizz_buzz(1, 15)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
