# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sort_list(nums) do
    try do
      arr = nums
      i = 1
      while_fun = fn while_fun, arr, i ->
        if i < _len(arr) do
          key = Enum.at(arr, i)
          j = i - 1
          while_fun_2 = fn while_fun_2, arr, j ->
            if j >= 0 && Enum.at(arr, j) > key do
              arr = List.replace_at(arr, j + 1, Enum.at(arr, j))
              j = j - 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          arr = List.replace_at(arr, j + 1, key)
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def largest_divisible_subset(items) do
    try do
      if _len(items) == 0 do
        throw {:return, []}
      end
      nums = sort_list(items)
      n = _len(nums)
      memo = []
      prev = []
      i = 0
      while_fun_3 = fn while_fun_3, i, memo, prev ->
        if i < n do
          memo = (memo ++ [1])
          prev = (prev ++ [i])
          i = i + 1
          while_fun_3.(while_fun_3, i, memo, prev)
        else
          {i, memo, prev}
        end
      end
      {i, memo, prev} = try do
          while_fun_3.(while_fun_3, i, memo, prev)
        catch
          {:break, {i, memo, prev}} -> {i, memo, prev}
        end

      i = 0
      while_fun_4 = fn while_fun_4, i, memo, prev ->
        if i < n do
          j = 0
          while_fun_5 = fn while_fun_5, j, memo, prev ->
            if j < i do
              {memo, prev} = if (Enum.at(nums, j) == 0 || rem(Enum.at(nums, i), Enum.at(nums, j)) == 0) && Enum.at(memo, j) + 1 > Enum.at(memo, i) do
                memo = List.replace_at(memo, i, Enum.at(memo, j) + 1)
                prev = List.replace_at(prev, i, j)
                {memo, prev}
              else
                {memo, prev}
              end
              j = j + 1
              while_fun_5.(while_fun_5, j, memo, prev)
            else
              {j, memo, prev}
            end
          end
          {j, memo, prev} = try do
              while_fun_5.(while_fun_5, j, memo, prev)
            catch
              {:break, {j, memo, prev}} -> {j, memo, prev}
            end

          i = i + 1
          while_fun_4.(while_fun_4, i, memo, prev)
        else
          {i, memo, prev}
        end
      end
      {i, memo, prev} = try do
          while_fun_4.(while_fun_4, i, memo, prev)
        catch
          {:break, {i, memo, prev}} -> {i, memo, prev}
        end

      ans = 0 - 1
      last_index = 0 - 1
      i = 0
      while_fun_6 = fn while_fun_6, ans, i, last_index ->
        if i < n do
          {ans, last_index} = if Enum.at(memo, i) > ans do
            ans = Enum.at(memo, i)
            last_index = i
            {ans, last_index}
          else
            {ans, last_index}
          end
          i = i + 1
          while_fun_6.(while_fun_6, ans, i, last_index)
        else
          {ans, i, last_index}
        end
      end
      {ans, i, last_index} = try do
          while_fun_6.(while_fun_6, ans, i, last_index)
        catch
          {:break, {ans, i, last_index}} -> {ans, i, last_index}
        end

      if last_index == 0 - 1 do
        throw {:return, []}
      end
      result = [Enum.at(nums, last_index)]
      while_fun_7 = fn while_fun_7, last_index, result ->
        if Enum.at(prev, last_index) != last_index do
          last_index = Enum.at(prev, last_index)
          result = (result ++ [Enum.at(nums, last_index)])
          while_fun_7.(while_fun_7, last_index, result)
        else
          {last_index, result}
        end
      end
      {last_index, result} = try do
          while_fun_7.(while_fun_7, last_index, result)
        catch
          {:break, {last_index, result}} -> {last_index, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      items = [1, 16, 7, 8, 4]
      subset = largest_divisible_subset(items)
      IO.puts((((("The longest divisible subset of " <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [items])), ",", " ")) <> " is ") <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [subset])), ",", " ")) <> "."))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
