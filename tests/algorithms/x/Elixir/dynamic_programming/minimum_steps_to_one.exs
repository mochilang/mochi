# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  def make_list(len, value) do
    try do
      arr = []
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < len do
          arr = (arr ++ [value])
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def min_int(a, b) do
    try do
      throw {:return, ((if a < b, do: a, else: b))}
    catch
      {:return, val} -> val
    end
  end
  def min_steps_to_one(number) do
    try do
      if number <= 0 do
        throw {:return, 0}
      end
      table = make_list(number + 1, number + 1)
      table = List.replace_at(table, 1, 0)
      i = 1
      while_fun_2 = fn while_fun_2, i, table ->
        if i < number do
          table = List.replace_at(table, i + 1, min_int(Enum.at(table, i + 1), Enum.at(table, i) + 1))
          {table} = if i * 2 <= number do
            table = List.replace_at(table, i * 2, min_int(Enum.at(table, i * 2), Enum.at(table, i) + 1))
            {table}
          else
            {table}
          end
          {table} = if i * 3 <= number do
            table = List.replace_at(table, i * 3, min_int(Enum.at(table, i * 3), Enum.at(table, i) + 1))
            {table}
          else
            {table}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, table)
        else
          {i, table}
        end
      end
      {i, table} = try do
          while_fun_2.(while_fun_2, i, table)
        catch
          {:break, {i, table}} -> {i, table}
        end

      throw {:return, Enum.at(table, number)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(min_steps_to_one(10)))
    IO.puts(Kernel.inspect(min_steps_to_one(15)))
    IO.puts(Kernel.inspect(min_steps_to_one(6)))
  end
end
Main.main()
