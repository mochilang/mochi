# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  def make_list(len, value) do
    try do
      arr = []
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < len do
          arr = (arr ++ [value])
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def int_sqrt(n) do
    try do
      r = 0
      while_fun_2 = fn while_fun_2, r ->
        if (r + 1) * (r + 1) <= n do
          r = r + 1
          while_fun_2.(while_fun_2, r)
        else
          r
        end
      end
      r = try do
          while_fun_2.(while_fun_2, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def minimum_squares_to_represent_a_number(number) do
    try do
      if number < 0 do
        raise("the value of input must not be a negative number")
      end
      if number == 0 do
        throw {:return, 1}
      end
      answers = make_list(number + 1, -1)
      answers = List.replace_at(answers, 0, 0)
      i = 1
      while_fun_3 = fn while_fun_3, answers, i ->
        if i <= number do
          answer = i
          root = int_sqrt(i)
          j = 1
          while_fun_4 = fn while_fun_4, answer, j ->
            if j <= root do
              current_answer = 1 + Enum.at(answers, i - j * j)
              {answer} = if current_answer < answer do
                answer = current_answer
                {answer}
              else
                {answer}
              end
              j = j + 1
              while_fun_4.(while_fun_4, answer, j)
            else
              {answer, j}
            end
          end
          {answer, j} = try do
              while_fun_4.(while_fun_4, answer, j)
            catch
              {:break, {answer, j}} -> {answer, j}
            end

          answers = List.replace_at(answers, i, answer)
          i = i + 1
          while_fun_3.(while_fun_3, answers, i)
        else
          {answers, i}
        end
      end
      {answers, i} = try do
          while_fun_3.(while_fun_3, answers, i)
        catch
          {:break, {answers, i}} -> {answers, i}
        end

      throw {:return, Enum.at(answers, number)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(minimum_squares_to_represent_a_number(25)))
    IO.puts(Kernel.inspect(minimum_squares_to_represent_a_number(21)))
  end
end
Main.main()
