# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def enforce_args(n, prices) do
    try do
      if n < 0 do
        raise("n must be non-negative")
      end
      if n > _len(prices) do
        raise("price list is shorter than n")
      end
    catch
      {:return, val} -> val
    end
  end
  def bottom_up_cut_rod(n, prices) do
    try do
      enforce_args(n, prices)
      max_rev = nil
      i = 0
      while_fun = fn while_fun, i, max_rev ->
        if i <= n do
          max_rev = (if i == 0, do: (max_rev ++ [0]), else: (max_rev ++ [-2147483648]))
          i = i + 1
          while_fun.(while_fun, i, max_rev)
        else
          {i, max_rev}
        end
      end
      {i, max_rev} = try do
          while_fun.(while_fun, i, max_rev)
        catch
          {:break, {i, max_rev}} -> {i, max_rev}
        end

      length = 1
      while_fun_2 = fn while_fun_2, length, max_rev ->
        if length <= n do
          best = Enum.at(max_rev, length)
          j = 1
          while_fun_3 = fn while_fun_3, best, j ->
            if j <= length do
              candidate = Enum.at(prices, j - 1) + Enum.at(max_rev, length - j)
              {best} = if candidate > best do
                best = candidate
                {best}
              else
                {best}
              end
              j = j + 1
              while_fun_3.(while_fun_3, best, j)
            else
              {best, j}
            end
          end
          {best, j} = try do
              while_fun_3.(while_fun_3, best, j)
            catch
              {:break, {best, j}} -> {best, j}
            end

          max_rev = List.replace_at(max_rev, length, best)
          length = length + 1
          while_fun_2.(while_fun_2, length, max_rev)
        else
          {length, max_rev}
        end
      end
      {length, max_rev} = try do
          while_fun_2.(while_fun_2, length, max_rev)
        catch
          {:break, {length, max_rev}} -> {length, max_rev}
        end

      throw {:return, Enum.at(max_rev, n)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:prices, [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])
  def main() do
    IO.puts(Kernel.inspect(bottom_up_cut_rod(4, Process.get(:prices))))
    IO.puts(Kernel.inspect(bottom_up_cut_rod(10, Process.get(:prices))))
  end
end
Main.main()
