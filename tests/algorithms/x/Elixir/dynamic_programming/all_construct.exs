# Code generated by Mochi transpiler 2025-08-09 15:58 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def allConstruct(target, wordBank) do
    try do
      tableSize = _len(target) + 1
      table = []
      idx = 0
      while_fun = fn while_fun, idx, table ->
        if idx < tableSize do
          empty = []
          table = (table ++ [empty])
          idx = idx + 1
          while_fun.(while_fun, idx, table)
        else
          {idx, table}
        end
      end
      {idx, table} = try do
          while_fun.(while_fun, idx, table)
        catch
          {:break, {idx, table}} -> {idx, table}
        end

      base = []
      table = List.replace_at(table, 0, [base])
      i = 0
      while_fun_2 = fn while_fun_2, i, table ->
        if i < tableSize do
          {table} = if _len(Enum.at(table, i)) != 0 do
            w = 0
            while_fun_3 = fn while_fun_3, table, w ->
              if w < _len(wordBank) do
                word = Enum.at(wordBank, w)
                wordLen = _len(word)
                {table} = if _slice(target, i, (i + wordLen) - i) == word do
                  k = 0
                  while_fun_4 = fn while_fun_4, k, table ->
                    if k < _len(Enum.at(table, i)) do
                      way = Enum.at(Enum.at(table, i), k)
                      combination = []
                      m = 0
                      while_fun_5 = fn while_fun_5, combination, m ->
                        if m < _len(way) do
                          combination = (combination ++ [Enum.at(way, m)])
                          m = m + 1
                          while_fun_5.(while_fun_5, combination, m)
                        else
                          {combination, m}
                        end
                      end
                      {combination, m} = try do
                          while_fun_5.(while_fun_5, combination, m)
                        catch
                          {:break, {combination, m}} -> {combination, m}
                        end

                      combination = (combination ++ [word])
                      nextIndex = i + wordLen
                      table = List.replace_at(table, nextIndex, (Enum.at(table, nextIndex) ++ [combination]))
                      k = k + 1
                      while_fun_4.(while_fun_4, k, table)
                    else
                      {k, table}
                    end
                  end
                  {k, table} = try do
                      while_fun_4.(while_fun_4, k, table)
                    catch
                      {:break, {k, table}} -> {k, table}
                    end

                  {table}
                else
                  {table}
                end
                w = w + 1
                while_fun_3.(while_fun_3, table, w)
              else
                {table, w}
              end
            end
            {table, w} = try do
                while_fun_3.(while_fun_3, table, w)
              catch
                {:break, {table, w}} -> {table, w}
              end

            {table}
          else
            {table}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, table)
        else
          {i, table}
        end
      end
      {i, table} = try do
          while_fun_2.(while_fun_2, i, table)
        catch
          {:break, {i, table}} -> {i, table}
        end

      throw {:return, Enum.at(table, _len(target))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(allConstruct("jwajalapa", ["jwa", "j", "w", "a", "la", "lapa"])))
    IO.puts(Kernel.inspect(allConstruct("rajamati", ["s", "raj", "amat", "raja", "ma", "i", "t"])))
    IO.puts(Kernel.inspect(allConstruct("hexagonosaurus", ["h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
