# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def copy_list(xs) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def longest_subsequence(arr) do
    try do
      n = _len(arr)
      lis = []
      i = 0
      while_fun_2 = fn while_fun_2, i, lis ->
        if i < n do
          single = []
          single = (single ++ [Enum.at(arr, i)])
          lis = (lis ++ [single])
          i = i + 1
          while_fun_2.(while_fun_2, i, lis)
        else
          {i, lis}
        end
      end
      {i, lis} = try do
          while_fun_2.(while_fun_2, i, lis)
        catch
          {:break, {i, lis}} -> {i, lis}
        end

      i = 1
      while_fun_3 = fn while_fun_3, i, lis ->
        if i < n do
          prev = 0
          while_fun_4 = fn while_fun_4, lis, prev ->
            if prev < i do
              {lis} = if Enum.at(arr, prev) <= Enum.at(arr, i) && _len(Enum.at(lis, prev)) + 1 > _len(Enum.at(lis, i)) do
                temp = copy_list(Enum.at(lis, prev))
                temp2 = (temp ++ [Enum.at(arr, i)])
                lis = List.replace_at(lis, i, temp2)
                {lis}
              else
                {lis}
              end
              prev = prev + 1
              while_fun_4.(while_fun_4, lis, prev)
            else
              {lis, prev}
            end
          end
          {lis, prev} = try do
              while_fun_4.(while_fun_4, lis, prev)
            catch
              {:break, {lis, prev}} -> {lis, prev}
            end

          i = i + 1
          while_fun_3.(while_fun_3, i, lis)
        else
          {i, lis}
        end
      end
      {i, lis} = try do
          while_fun_3.(while_fun_3, i, lis)
        catch
          {:break, {i, lis}} -> {i, lis}
        end

      result = []
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i < n do
          {result} = if _len(Enum.at(lis, i)) > _len(result) do
            result = Enum.at(lis, i)
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80])))
      IO.puts(Kernel.inspect(longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9])))
      IO.puts(Kernel.inspect(longest_subsequence([9, 8, 7, 6, 5, 7])))
      IO.puts(Kernel.inspect(longest_subsequence([28, 26, 12, 23, 35, 39])))
      IO.puts(Kernel.inspect(longest_subsequence([1, 1, 1])))
      IO.puts(Kernel.inspect(longest_subsequence([])))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
