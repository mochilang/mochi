# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def max_product_subarray(numbers) do
    try do
      if _len(numbers) == 0 do
        throw {:return, 0}
      end
      max_till_now = Enum.at(numbers, 0)
      min_till_now = Enum.at(numbers, 0)
      max_prod = Enum.at(numbers, 0)
      i = 1
      while_fun = fn while_fun, i, max_prod, max_till_now, min_till_now ->
        if i < _len(numbers) do
          number = Enum.at(numbers, i)
          {max_till_now, min_till_now} = if number < 0 do
            temp = max_till_now
            max_till_now = min_till_now
            min_till_now = temp
            {max_till_now, min_till_now}
          else
            {max_till_now, min_till_now}
          end
          prod_max = max_till_now * number
          max_till_now = (if number > prod_max, do: number, else: prod_max)
          prod_min = min_till_now * number
          min_till_now = (if number < prod_min, do: number, else: prod_min)
          {max_prod} = if max_till_now > max_prod do
            max_prod = max_till_now
            {max_prod}
          else
            {max_prod}
          end
          i = i + 1
          while_fun.(while_fun, i, max_prod, max_till_now, min_till_now)
        else
          {i, max_prod, max_till_now, min_till_now}
        end
      end
      {i, max_prod, max_till_now, min_till_now} = try do
          while_fun.(while_fun, i, max_prod, max_till_now, min_till_now)
        catch
          {:break, {i, max_prod, max_till_now, min_till_now}} -> {i, max_prod, max_till_now, min_till_now}
        end

      throw {:return, max_prod}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(max_product_subarray([2, 3, -2, 4])))
    IO.puts(Kernel.inspect(max_product_subarray([-2, 0, -1])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
