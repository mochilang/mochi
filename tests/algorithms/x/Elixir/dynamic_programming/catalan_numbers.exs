# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def panic(msg) do
    try do
      IO.puts(msg)
    catch
      {:return, val} -> val
    end
  end
  def catalan_numbers(upper_limit) do
    try do
      if upper_limit < 0 do
        panic("Limit for the Catalan sequence must be >= 0")
        throw {:return, []}
      end
      catalans = [1]
      n = 1
      while_fun = fn while_fun, catalans, n ->
        if n <= upper_limit do
          next_val = 0
          j = 0
          while_fun_2 = fn while_fun_2, j, next_val ->
            if j < n do
              next_val = next_val + Enum.at(catalans, j) * Enum.at(catalans, n - j - 1)
              j = j + 1
              while_fun_2.(while_fun_2, j, next_val)
            else
              {j, next_val}
            end
          end
          {j, next_val} = try do
              while_fun_2.(while_fun_2, j, next_val)
            catch
              {:break, {j, next_val}} -> {j, next_val}
            end

          catalans = (catalans ++ [next_val])
          n = n + 1
          while_fun.(while_fun, catalans, n)
        else
          {catalans, n}
        end
      end
      {catalans, n} = try do
          while_fun.(while_fun, catalans, n)
        catch
          {:break, {catalans, n}} -> {catalans, n}
        end

      throw {:return, catalans}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(catalan_numbers(5)))
    IO.puts(Kernel.inspect(catalan_numbers(2)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
