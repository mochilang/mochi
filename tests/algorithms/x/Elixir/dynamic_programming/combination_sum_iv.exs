# Code generated by Mochi transpiler 2025-08-09 15:58 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_list(len, value) do
    try do
      arr = []
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < len do
          arr = (arr ++ [value])
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def count_recursive(array, target) do
    try do
      if target < 0 do
        throw {:return, 0}
      end
      if target == 0 do
        throw {:return, 1}
      end
      total = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, total ->
        if i < _len(array) do
          total = total + count_recursive(array, target - Enum.at(array, i))
          i = i + 1
          while_fun_2.(while_fun_2, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_2.(while_fun_2, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def combination_sum_iv(array, target) do
    try do
      throw {:return, count_recursive(array, target)}
    catch
      {:return, val} -> val
    end
  end
  def count_dp(array, target, dp) do
    try do
      if target < 0 do
        throw {:return, 0}
      end
      if target == 0 do
        throw {:return, 1}
      end
      if Enum.at(dp, target) > (0 - 1) do
        throw {:return, Enum.at(dp, target)}
      end
      total = 0
      i = 0
      while_fun_3 = fn while_fun_3, i, total ->
        if i < _len(array) do
          total = total + count_dp(array, target - Enum.at(array, i), dp)
          i = i + 1
          while_fun_3.(while_fun_3, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_3.(while_fun_3, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      dp = List.replace_at(dp, target, total)
      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def combination_sum_iv_dp_array(array, target) do
    try do
      dp = make_list(target + 1, -1)
      throw {:return, count_dp(array, target, dp)}
    catch
      {:return, val} -> val
    end
  end
  def combination_sum_iv_bottom_up(n, array, target) do
    try do
      dp = make_list(target + 1, 0)
      dp = List.replace_at(dp, 0, 1)
      i = 1
      while_fun_4 = fn while_fun_4, dp, i ->
        if i <= target do
          j = 0
          while_fun_5 = fn while_fun_5, dp, j ->
            if j < n do
              {dp} = if i - Enum.at(array, j) >= 0 do
                dp = List.replace_at(dp, i, Enum.at(dp, i) + Enum.at(dp, i - Enum.at(array, j)))
                {dp}
              else
                {dp}
              end
              j = j + 1
              while_fun_5.(while_fun_5, dp, j)
            else
              {dp, j}
            end
          end
          {dp, j} = try do
              while_fun_5.(while_fun_5, dp, j)
            catch
              {:break, {dp, j}} -> {dp, j}
            end

          i = i + 1
          while_fun_4.(while_fun_4, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun_4.(while_fun_4, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      throw {:return, Enum.at(dp, target)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(combination_sum_iv([1, 2, 5], 5)))
    IO.puts(Kernel.inspect(combination_sum_iv_dp_array([1, 2, 5], 5)))
    IO.puts(Kernel.inspect(combination_sum_iv_bottom_up(3, [1, 2, 5], 5)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
