# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def min_partitions(s) do
    try do
      n = _len(s)
      cut = []
      i = 0
      while_fun = fn while_fun, cut, i ->
        if i < n do
          cut = (cut ++ [0])
          i = i + 1
          while_fun.(while_fun, cut, i)
        else
          {cut, i}
        end
      end
      {cut, i} = try do
          while_fun.(while_fun, cut, i)
        catch
          {:break, {cut, i}} -> {cut, i}
        end

      pal = []
      i = 0
      while_fun_2 = fn while_fun_2, i, pal ->
        if i < n do
          row = []
          j = 0
          while_fun_3 = fn while_fun_3, j, row ->
            if j < n do
              row = (row ++ [false])
              j = j + 1
              while_fun_3.(while_fun_3, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_3.(while_fun_3, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          pal = (pal ++ [row])
          i = i + 1
          while_fun_2.(while_fun_2, i, pal)
        else
          {i, pal}
        end
      end
      {i, pal} = try do
          while_fun_2.(while_fun_2, i, pal)
        catch
          {:break, {i, pal}} -> {i, pal}
        end

      i = 0
      while_fun_4 = fn while_fun_4, cut, i, pal ->
        if i < n do
          mincut = i
          j = 0
          while_fun_5 = fn while_fun_5, j, mincut, pal ->
            if j <= i do
              {mincut, pal} = if String.at(s, i) == String.at(s, j) && (i - j < 2 || Enum.at(Enum.at(pal, j + 1), i - 1)) do
                pal = List.replace_at(pal, j, List.replace_at(Enum.at(pal, j), i, true))
                {mincut} = if j == 0 do
                  mincut = 0
                  {mincut}
                else
                  candidate = Enum.at(cut, j - 1) + 1
                  {mincut} = if candidate < mincut do
                    mincut = candidate
                    {mincut}
                  else
                    {mincut}
                  end
                  {mincut}
                end
                {mincut, pal}
              else
                {mincut, pal}
              end
              j = j + 1
              while_fun_5.(while_fun_5, j, mincut, pal)
            else
              {j, mincut, pal}
            end
          end
          {j, mincut, pal} = try do
              while_fun_5.(while_fun_5, j, mincut, pal)
            catch
              {:break, {j, mincut, pal}} -> {j, mincut, pal}
            end

          cut = List.replace_at(cut, i, mincut)
          i = i + 1
          while_fun_4.(while_fun_4, cut, i, pal)
        else
          {cut, i, pal}
        end
      end
      {cut, i, pal} = try do
          while_fun_4.(while_fun_4, cut, i, pal)
        catch
          {:break, {cut, i, pal}} -> {cut, i, pal}
        end

      throw {:return, Enum.at(cut, n - 1)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(min_partitions("aab")))
    IO.puts(Kernel.inspect(min_partitions("aaa")))
    IO.puts(Kernel.inspect(min_partitions("ababbbabbababa")))
  end
end
Main.main()
