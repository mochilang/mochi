# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ceil_index(v, left, right, key) do
    try do
      l = left
      r = right
      while_fun = fn while_fun, l, r ->
        if r - l > 1 do
          middle = div((l + r), 2)
          {l, r} = if Enum.at(v, middle) >= key do
            r = middle
            {l, r}
          else
            l = middle
            {l, r}
          end
          while_fun.(while_fun, l, r)
        else
          {l, r}
        end
      end
      {l, r} = try do
          while_fun.(while_fun, l, r)
        catch
          {:break, {l, r}} -> {l, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def longest_increasing_subsequence_length(v) do
    try do
      if _len(v) == 0 do
        throw {:return, 0}
      end
      tail = []
      i = 0
      while_fun_2 = fn while_fun_2, i, tail ->
        if i < _len(v) do
          tail = (tail ++ [0])
          i = i + 1
          while_fun_2.(while_fun_2, i, tail)
        else
          {i, tail}
        end
      end
      {i, tail} = try do
          while_fun_2.(while_fun_2, i, tail)
        catch
          {:break, {i, tail}} -> {i, tail}
        end

      length = 1
      tail = List.replace_at(tail, 0, Enum.at(v, 0))
      j = 1
      while_fun_3 = fn while_fun_3, j, length, tail ->
        if j < _len(v) do
          {length, tail} = if Enum.at(v, j) < Enum.at(tail, 0) do
            tail = List.replace_at(tail, 0, Enum.at(v, j))
            {length, tail}
          else
            {length, tail} = if Enum.at(v, j) > Enum.at(tail, length - 1) do
              tail = List.replace_at(tail, length, Enum.at(v, j))
              length = length + 1
              {length, tail}
            else
              idx = ceil_index(tail, -1, length - 1, Enum.at(v, j))
              tail = List.replace_at(tail, idx, Enum.at(v, j))
              {length, tail}
            end
            {length, tail}
          end
          j = j + 1
          while_fun_3.(while_fun_3, j, length, tail)
        else
          {j, length, tail}
        end
      end
      {j, length, tail} = try do
          while_fun_3.(while_fun_3, j, length, tail)
        catch
          {:break, {j, length, tail}} -> {j, length, tail}
        end

      throw {:return, length}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      example1 = [2, 5, 3, 7, 11, 8, 10, 13, 6]
      example2 = []
      example3 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
      example4 = [5, 4, 3, 2, 1]
      IO.puts(Kernel.inspect(longest_increasing_subsequence_length(example1)))
      IO.puts(Kernel.inspect(longest_increasing_subsequence_length(example2)))
      IO.puts(Kernel.inspect(longest_increasing_subsequence_length(example3)))
      IO.puts(Kernel.inspect(longest_increasing_subsequence_length(example4)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
