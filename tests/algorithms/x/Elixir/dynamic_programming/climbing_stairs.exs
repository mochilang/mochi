# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def climb_stairs(number_of_steps) do
    try do
      if number_of_steps <= 0 do
        raise("number_of_steps needs to be positive")
      end
      if number_of_steps == 1 do
        throw {:return, 1}
      end
      previous = 1
      current = 1
      i = 0
      while_fun = fn while_fun, current, i, previous ->
        if i < number_of_steps - 1 do
          next = current + previous
          previous = current
          current = next
          i = i + 1
          while_fun.(while_fun, current, i, previous)
        else
          {current, i, previous}
        end
      end
      {current, i, previous} = try do
          while_fun.(while_fun, current, i, previous)
        catch
          {:break, {current, i, previous}} -> {current, i, previous}
        end

      throw {:return, current}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(climb_stairs(3)))
    IO.puts(Kernel.inspect(climb_stairs(1)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
