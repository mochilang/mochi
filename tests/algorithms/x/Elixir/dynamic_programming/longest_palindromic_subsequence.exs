# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def reverse(s) do
    try do
      result = ""
      i = _len(s) - 1
      while_fun = fn while_fun, i, result ->
        if i >= 0 do
          result = (result <> _slice(s, i, (i + 1) - i))
          i = i - 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def max_int(a, b) do
    try do
      throw {:return, ((if a > b, do: a, else: b))}
    catch
      {:return, val} -> val
    end
  end
  def longest_palindromic_subsequence(s) do
    try do
      rev = reverse(s)
      n = _len(s)
      m = _len(rev)
      dp = []
      i = 0
      while_fun_2 = fn while_fun_2, dp, i ->
        if i <= n do
          row = []
          j = 0
          while_fun_3 = fn while_fun_3, j, row ->
            if j <= m do
              row = (row ++ [0])
              j = j + 1
              while_fun_3.(while_fun_3, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_3.(while_fun_3, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dp = (dp ++ [row])
          i = i + 1
          while_fun_2.(while_fun_2, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun_2.(while_fun_2, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      i = 1
      while_fun_4 = fn while_fun_4, dp, i ->
        if i <= n do
          j = 1
          while_fun_5 = fn while_fun_5, dp, j ->
            if j <= m do
              a_char = _slice(s, i - 1, i - (i - 1))
              b_char = _slice(rev, j - 1, j - (j - 1))
              {dp} = if a_char == b_char do
                dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, 1 + Enum.at(Enum.at(dp, i - 1), j - 1)))
                {dp}
              else
                dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, max_int(Enum.at(Enum.at(dp, i - 1), j), Enum.at(Enum.at(dp, i), j - 1))))
                {dp}
              end
              j = j + 1
              while_fun_5.(while_fun_5, dp, j)
            else
              {dp, j}
            end
          end
          {dp, j} = try do
              while_fun_5.(while_fun_5, dp, j)
            catch
              {:break, {dp, j}} -> {dp, j}
            end

          i = i + 1
          while_fun_4.(while_fun_4, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun_4.(while_fun_4, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      throw {:return, Enum.at(Enum.at(dp, n), m)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(longest_palindromic_subsequence("bbbab")))
    IO.puts(Kernel.inspect(longest_palindromic_subsequence("bbabcbcab")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
