# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def create_fibonacci() do
    try do
      throw {:return, %{sequence: [0, 1]}}
    catch
      {:return, val} -> val
    end
  end
  def fib_get(f, index) do
    try do
      seq = f.sequence
      while_fun = fn while_fun, seq ->
        if _len(seq) < index do
          next = Enum.at(seq, _len(seq) - 1) + Enum.at(seq, _len(seq) - 2)
          seq = (seq ++ [next])
          while_fun.(while_fun, seq)
        else
          seq
        end
      end
      seq = try do
          while_fun.(while_fun, seq)
        catch
          {:break, {seq}} -> seq
        end

      f = Map.put(f, :sequence, seq)
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < index do
          result = (result ++ [Enum.at(seq, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, %{fib: f, values: result}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      fib = create_fibonacci()
      res = fib_get(fib, 10)
      fib = res.fib
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [res.values])), ",", " "))
      res = fib_get(fib, 5)
      fib = res.fib
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [res.values])), ",", " "))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
