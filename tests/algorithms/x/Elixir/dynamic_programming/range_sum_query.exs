# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def prefix_sum(arr, queries) do
    try do
      dp = []
      i = 0
      while_fun = fn while_fun, dp, i ->
        if i < _len(arr) do
          dp = (if i == 0, do: (dp ++ [Enum.at(arr, 0)]), else: (dp ++ [Enum.at(dp, i - 1) + Enum.at(arr, i)]))
          i = i + 1
          while_fun.(while_fun, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun.(while_fun, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      result = []
      j = 0
      while_fun_2 = fn while_fun_2, j, result ->
        if j < _len(queries) do
          q = Enum.at(queries, j)
          sum = Enum.at(dp, q.right)
          {sum} = if q.left > 0 do
            sum = sum - Enum.at(dp, q.left - 1)
            {sum}
          else
            {sum}
          end
          result = (result ++ [sum])
          j = j + 1
          while_fun_2.(while_fun_2, j, result)
        else
          {j, result}
        end
      end
      {j, result} = try do
          while_fun_2.(while_fun_2, j, result)
        catch
          {:break, {j, result}} -> {j, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:arr1, [1, 4, 6, 2, 61, 12])
  Process.put(:queries1, [%{left: 2, right: 5}, %{left: 1, right: 5}, %{left: 3, right: 4}])
  Process.put(:arr2, [4, 2, 1, 6, 3])
  Process.put(:queries2, [%{left: 3, right: 4}, %{left: 1, right: 3}, %{left: 0, right: 2}])
  def main() do
    IO.puts(Kernel.inspect(prefix_sum(Process.get(:arr1), Process.get(:queries1))))
    IO.puts(Kernel.inspect(prefix_sum(Process.get(:arr2), Process.get(:queries2))))
  end
end
Main.main()
