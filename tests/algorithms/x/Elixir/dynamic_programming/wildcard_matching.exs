# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_bool_list(n) do
    try do
      row = []
      i = 0
      while_fun = fn while_fun, i, row ->
        if i < n do
          row = (row ++ [false])
          i = i + 1
          while_fun.(while_fun, i, row)
        else
          {i, row}
        end
      end
      {i, row} = try do
          while_fun.(while_fun, i, row)
        catch
          {:break, {i, row}} -> {i, row}
        end

      throw {:return, row}
    catch
      {:return, val} -> val
    end
  end
  def make_bool_matrix(rows, cols) do
    try do
      matrix = []
      i = 0
      while_fun_2 = fn while_fun_2, i, matrix ->
        if i < rows do
          matrix = (matrix ++ [make_bool_list(cols)])
          i = i + 1
          while_fun_2.(while_fun_2, i, matrix)
        else
          {i, matrix}
        end
      end
      {i, matrix} = try do
          while_fun_2.(while_fun_2, i, matrix)
        catch
          {:break, {i, matrix}} -> {i, matrix}
        end

      throw {:return, matrix}
    catch
      {:return, val} -> val
    end
  end
  def is_match(s, p) do
    try do
      n = _len(s)
      m = _len(p)
      dp = make_bool_matrix(n + 1, m + 1)
      dp = List.replace_at(dp, 0, List.replace_at(Enum.at(dp, 0), 0, true))
      j = 1
      while_fun_3 = fn while_fun_3, dp, j ->
        if j <= m do
          {dp} = if _slice(p, j - 1, j - (j - 1)) == "*" do
            dp = List.replace_at(dp, 0, List.replace_at(Enum.at(dp, 0), j, Enum.at(Enum.at(dp, 0, []), j - 1, 0)))
            {dp}
          else
            {dp}
          end
          j = j + 1
          while_fun_3.(while_fun_3, dp, j)
        else
          {dp, j}
        end
      end
      {dp, j} = try do
          while_fun_3.(while_fun_3, dp, j)
        catch
          {:break, {dp, j}} -> {dp, j}
        end

      i = 1
      while_fun_4 = fn while_fun_4, dp, i ->
        if i <= n do
          j2 = 1
          while_fun_5 = fn while_fun_5, dp, j2 ->
            if j2 <= m do
              pc = _slice(p, j2 - 1, j2 - (j2 - 1))
              sc = _slice(s, i - 1, i - (i - 1))
              {dp} = if pc == sc || pc == "?" do
                dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j2, Enum.at(Enum.at(dp, i - 1, []), j2 - 1, 0)))
                {dp}
              else
                {dp} = if pc == "*" do
                  {dp} = if Enum.at(Enum.at(dp, i - 1, []), j2, 0) || Enum.at(Enum.at(dp, i, []), j2 - 1, 0) do
                    dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j2, true))
                    {dp}
                  else
                    {dp}
                  end
                  {dp}
                else
                  {dp}
                end
                {dp}
              end
              j2 = j2 + 1
              while_fun_5.(while_fun_5, dp, j2)
            else
              {dp, j2}
            end
          end
          {dp, j2} = try do
              while_fun_5.(while_fun_5, dp, j2)
            catch
              {:break, {dp, j2}} -> {dp, j2}
            end

          i = i + 1
          while_fun_4.(while_fun_4, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun_4.(while_fun_4, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      throw {:return, Enum.at(Enum.at(dp, n, []), m, 0)}
    catch
      {:return, val} -> val
    end
  end
  def print_bool(b) do
    try do
      if b do
        IO.puts(true)
      else
        IO.puts(false)
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    print_bool(is_match("abc", "a*c"))
    print_bool(is_match("abc", "a*d"))
    print_bool(is_match("baaabab", "*****ba*****ab"))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
