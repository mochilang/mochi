# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def create_bool_matrix(rows, cols) do
    try do
      matrix = []
      i = 0
      while_fun = fn while_fun, i, matrix ->
        if i <= rows do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j <= cols do
              row = (row ++ [false])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          matrix = (matrix ++ [row])
          i = i + 1
          while_fun.(while_fun, i, matrix)
        else
          {i, matrix}
        end
      end
      {i, matrix} = try do
          while_fun.(while_fun, i, matrix)
        catch
          {:break, {i, matrix}} -> {i, matrix}
        end

      throw {:return, matrix}
    catch
      {:return, val} -> val
    end
  end
  def is_sum_subset(arr, required_sum) do
    try do
      arr_len = _len(arr)
      subset = create_bool_matrix(arr_len, required_sum)
      i = 0
      while_fun_3 = fn while_fun_3, i, subset ->
        if i <= arr_len do
          subset = List.replace_at(subset, i, List.replace_at(Enum.at(subset, i), 0, true))
          i = i + 1
          while_fun_3.(while_fun_3, i, subset)
        else
          {i, subset}
        end
      end
      {i, subset} = try do
          while_fun_3.(while_fun_3, i, subset)
        catch
          {:break, {i, subset}} -> {i, subset}
        end

      j = 1
      while_fun_4 = fn while_fun_4, j, subset ->
        if j <= required_sum do
          subset = List.replace_at(subset, 0, List.replace_at(Enum.at(subset, 0), j, false))
          j = j + 1
          while_fun_4.(while_fun_4, j, subset)
        else
          {j, subset}
        end
      end
      {j, subset} = try do
          while_fun_4.(while_fun_4, j, subset)
        catch
          {:break, {j, subset}} -> {j, subset}
        end

      i = 1
      while_fun_5 = fn while_fun_5, i, j, subset ->
        if i <= arr_len do
          j = 1
          while_fun_6 = fn while_fun_6, j, subset ->
            if j <= required_sum do
              {subset} = if Enum.at(arr, i - 1) > j do
                subset = List.replace_at(subset, i, List.replace_at(Enum.at(subset, i), j, Enum.at(Enum.at(subset, i - 1), j)))
                {subset}
              else
                {subset}
              end
              {subset} = if Enum.at(arr, i - 1) <= j do
                subset = List.replace_at(subset, i, List.replace_at(Enum.at(subset, i), j, Enum.at(Enum.at(subset, i - 1), j) || Enum.at(Enum.at(subset, i - 1), j - Enum.at(arr, i - 1))))
                {subset}
              else
                {subset}
              end
              j = j + 1
              while_fun_6.(while_fun_6, j, subset)
            else
              {j, subset}
            end
          end
          {j, subset} = try do
              while_fun_6.(while_fun_6, j, subset)
            catch
              {:break, {j, subset}} -> {j, subset}
            end

          i = i + 1
          while_fun_5.(while_fun_5, i, j, subset)
        else
          {i, j, subset}
        end
      end
      {i, j, subset} = try do
          while_fun_5.(while_fun_5, i, j, subset)
        catch
          {:break, {i, j, subset}} -> {i, j, subset}
        end

      throw {:return, Enum.at(Enum.at(subset, arr_len), required_sum)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(is_sum_subset([2, 4, 6, 8], 5)))
    IO.puts(Kernel.inspect(is_sum_subset([2, 4, 6, 8], 14)))
  end
end
Main.main()
