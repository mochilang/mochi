# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def min3(a, b, c) do
    try do
      m = a
      {m} = if b < m do
        m = b
        {m}
      else
        {m}
      end
      {m} = if c < m do
        m = c
        {m}
      else
        {m}
      end
      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def helper(word1, word2, cache, i, j, len1, len2) do
    try do
      if i >= len1 do
        throw {:return, len2 - j}
      end
      if j >= len2 do
        throw {:return, len1 - i}
      end
      if Enum.at(Enum.at(cache, i), j) != (0 - 1) do
        throw {:return, Enum.at(Enum.at(cache, i), j)}
      end
      diff = 0
      {diff} = if _slice(word1, i, i + 1 - (i)) != _slice(word2, j, j + 1 - (j)) do
        diff = 1
        {diff}
      else
        {diff}
      end
      delete_cost = 1 + helper(word1, word2, cache, i + 1, j, len1, len2)
      insert_cost = 1 + helper(word1, word2, cache, i, j + 1, len1, len2)
      replace_cost = diff + helper(word1, word2, cache, i + 1, j + 1, len1, len2)
      cache = List.replace_at(cache, i, List.replace_at(Enum.at(cache, i), j, min3(delete_cost, insert_cost, replace_cost)))
      throw {:return, Enum.at(Enum.at(cache, i), j)}
    catch
      {:return, val} -> val
    end
  end
  def min_distance_up_bottom(word1, word2) do
    try do
      len1 = _len(word1)
      len2 = _len(word2)
      cache = []
      {cache} = Enum.reduce((0..(len1 - 1)), {cache}, fn _, {cache} ->
        row = []
        {row} = Enum.reduce((0..(len2 - 1)), {row}, fn _2, {row} ->
          row = (row ++ [0 - 1])
          {row}
        end)
        cache = (cache ++ [row])
        {cache}
      end)
      throw {:return, helper(word1, word2, cache, 0, 0, len1, len2)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(min_distance_up_bottom("intention", "execution")))
    IO.puts(Kernel.inspect(min_distance_up_bottom("intention", "")))
    IO.puts(Kernel.inspect(min_distance_up_bottom("", "")))
    IO.puts(Kernel.inspect(min_distance_up_bottom("zooicoarchaeologist", "zoologist")))
  end
end
Main.main()
