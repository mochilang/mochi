# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def max_subarray_sum(nums, allow_empty) do
    try do
      if _len(nums) == 0 do
        throw {:return, 0.0}
      end
      max_sum = 0.0
      curr_sum = 0.0
      {curr_sum, max_sum} = if allow_empty do
        max_sum = 0.0
        curr_sum = 0.0
        i = 0
        while_fun = fn while_fun, curr_sum, i, max_sum ->
          if i < _len(nums) do
            num = Enum.at(nums, i)
            temp = curr_sum + num
            curr_sum = (if temp > 0.0, do: temp, else: 0.0)
            {max_sum} = if curr_sum > max_sum do
              max_sum = curr_sum
              {max_sum}
            else
              {max_sum}
            end
            i = i + 1
            while_fun.(while_fun, curr_sum, i, max_sum)
          else
            {curr_sum, i, max_sum}
          end
        end
        {curr_sum, i, max_sum} = try do
            while_fun.(while_fun, curr_sum, i, max_sum)
          catch
            {:break, {curr_sum, i, max_sum}} -> {curr_sum, i, max_sum}
          end

        {curr_sum, max_sum}
      else
        max_sum = Enum.at(nums, 0)
        curr_sum = Enum.at(nums, 0)
        i = 1
        while_fun_2 = fn while_fun_2, curr_sum, i, max_sum ->
          if i < _len(nums) do
            num = Enum.at(nums, i)
            temp = curr_sum + num
            curr_sum = (if temp > num, do: temp, else: num)
            {max_sum} = if curr_sum > max_sum do
              max_sum = curr_sum
              {max_sum}
            else
              {max_sum}
            end
            i = i + 1
            while_fun_2.(while_fun_2, curr_sum, i, max_sum)
          else
            {curr_sum, i, max_sum}
          end
        end
        {curr_sum, i, max_sum} = try do
            while_fun_2.(while_fun_2, curr_sum, i, max_sum)
          catch
            {:break, {curr_sum, i, max_sum}} -> {curr_sum, i, max_sum}
          end

        {curr_sum, max_sum}
      end
      throw {:return, max_sum}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:empty, [])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(max_subarray_sum([2.0, 8.0, 9.0], false)))
    IO.puts(Kernel.inspect(max_subarray_sum([0.0, 0.0], false)))
    IO.puts(Kernel.inspect(max_subarray_sum([-1.0, 0.0, 1.0], false)))
    IO.puts(Kernel.inspect(max_subarray_sum([1.0, 2.0, 3.0, 4.0, -2.0], false)))
    IO.puts(Kernel.inspect(max_subarray_sum([-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0], false)))
    IO.puts(Kernel.inspect(max_subarray_sum([2.0, 3.0, -9.0, 8.0, -2.0], false)))
    IO.puts(Kernel.inspect(max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], false)))
    IO.puts(Kernel.inspect(max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], true)))
    IO.puts(Kernel.inspect(max_subarray_sum(Process.get(:empty), false)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
