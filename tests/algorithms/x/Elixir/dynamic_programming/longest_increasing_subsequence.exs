# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def longest_subsequence(xs) do
    try do
      n = _len(xs)
      if n <= 1 do
        throw {:return, xs}
      end
      pivot = Enum.at(xs, 0)
      is_found = false
      i = 1
      longest_subseq = []
      while_fun = fn while_fun, i, is_found, longest_subseq ->
        if !is_found && i < n do
          {i, is_found, longest_subseq} = if Enum.at(xs, i) < pivot do
            is_found = true
            temp_array = _slice(xs, i, n - (i))
            temp_array = longest_subsequence(temp_array)
            {longest_subseq} = if _len(temp_array) > _len(longest_subseq) do
              longest_subseq = temp_array
              {longest_subseq}
            else
              {longest_subseq}
            end
            {i, is_found, longest_subseq}
          else
            i = i + 1
            {i, is_found, longest_subseq}
          end
          while_fun.(while_fun, i, is_found, longest_subseq)
        else
          {i, is_found, longest_subseq}
        end
      end
      {i, is_found, longest_subseq} = try do
          while_fun.(while_fun, i, is_found, longest_subseq)
        catch
          {:break, {i, is_found, longest_subseq}} -> {i, is_found, longest_subseq}
        end

      filtered = []
      j = 1
      while_fun_2 = fn while_fun_2, filtered, j ->
        if j < n do
          {filtered} = if Enum.at(xs, j) >= pivot do
            filtered = (filtered ++ [Enum.at(xs, j)])
            {filtered}
          else
            {filtered}
          end
          j = j + 1
          while_fun_2.(while_fun_2, filtered, j)
        else
          {filtered, j}
        end
      end
      {filtered, j} = try do
          while_fun_2.(while_fun_2, filtered, j)
        catch
          {:break, {filtered, j}} -> {filtered, j}
        end

      candidate = []
      candidate = (candidate ++ [pivot])
      candidate = (candidate ++ longest_subsequence(filtered))
      if _len(candidate) > _len(longest_subseq) do
        throw {:return, candidate}
      else
        throw {:return, longest_subseq}
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
