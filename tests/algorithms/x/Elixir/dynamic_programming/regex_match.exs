# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def recursive_match(text, pattern) do
    try do
      if _len(pattern) == 0 do
        throw {:return, _len(text) == 0}
      end
      if _len(text) == 0 do
        if _len(pattern) >= 2 && _slice(pattern, _len(pattern) - 1, _len(pattern) - (_len(pattern) - 1)) == "*" do
          throw {:return, recursive_match(text, _slice(pattern, 0, _len(pattern) - 2 - (0)))}
        end
        throw {:return, false}
      end
      last_text = _slice(text, _len(text) - 1, _len(text) - (_len(text) - 1))
      last_pattern = _slice(pattern, _len(pattern) - 1, _len(pattern) - (_len(pattern) - 1))
      if last_text == last_pattern || last_pattern == "." do
        throw {:return, recursive_match(_slice(text, 0, _len(text) - 1 - (0)), _slice(pattern, 0, _len(pattern) - 1 - (0)))}
      end
      if last_pattern == "*" do
        if recursive_match(_slice(text, 0, _len(text) - 1 - (0)), pattern) do
          throw {:return, true}
        end
        throw {:return, recursive_match(text, _slice(pattern, 0, _len(pattern) - 2 - (0)))}
      end
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def dp_match(text, pattern) do
    try do
      m = _len(text)
      n = _len(pattern)
      dp = []
      i = 0
      while_fun = fn while_fun, dp, i ->
        if i <= m do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j <= n do
              row = (row ++ [false])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dp = (dp ++ [row])
          i = i + 1
          while_fun.(while_fun, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun.(while_fun, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      dp = List.replace_at(dp, 0, List.replace_at(Enum.at(dp, 0), 0, true))
      j = 1
      while_fun_3 = fn while_fun_3, dp, j ->
        if j <= n do
          {dp} = if _slice(pattern, j - 1, j - (j - 1)) == "*" && j >= 2 do
            {dp} = if Enum.at(Enum.at(dp, 0), j - 2) do
              dp = List.replace_at(dp, 0, List.replace_at(Enum.at(dp, 0), j, true))
              {dp}
            else
              {dp}
            end
            {dp}
          else
            {dp}
          end
          j = j + 1
          while_fun_3.(while_fun_3, dp, j)
        else
          {dp, j}
        end
      end
      {dp, j} = try do
          while_fun_3.(while_fun_3, dp, j)
        catch
          {:break, {dp, j}} -> {dp, j}
        end

      i = 1
      while_fun_4 = fn while_fun_4, dp, i, j ->
        if i <= m do
          j = 1
          while_fun_5 = fn while_fun_5, dp, j ->
            if j <= n do
              p_char = _slice(pattern, j - 1, j - (j - 1))
              t_char = _slice(text, i - 1, i - (i - 1))
              {dp} = if p_char == "." || p_char == t_char do
                {dp} = if Enum.at(Enum.at(dp, i - 1), j - 1) do
                  dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, true))
                  {dp}
                else
                  {dp}
                end
                {dp}
              else
                {dp} = if p_char == "*" do
                  {dp} = if j >= 2 do
                    {dp} = if Enum.at(Enum.at(dp, i), j - 2) do
                      dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, true))
                      {dp}
                    else
                      {dp}
                    end
                    prev_p = _slice(pattern, j - 2, j - 1 - (j - 2))
                    {dp} = if prev_p == "." || prev_p == t_char do
                      {dp} = if Enum.at(Enum.at(dp, i - 1), j) do
                        dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, true))
                        {dp}
                      else
                        {dp}
                      end
                      {dp}
                    else
                      {dp}
                    end
                    {dp}
                  else
                    {dp}
                  end
                  {dp}
                else
                  dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, false))
                  {dp}
                end
                {dp}
              end
              j = j + 1
              while_fun_5.(while_fun_5, dp, j)
            else
              {dp, j}
            end
          end
          {dp, j} = try do
              while_fun_5.(while_fun_5, dp, j)
            catch
              {:break, {dp, j}} -> {dp, j}
            end

          i = i + 1
          while_fun_4.(while_fun_4, dp, i, j)
        else
          {dp, i, j}
        end
      end
      {dp, i, j} = try do
          while_fun_4.(while_fun_4, dp, i, j)
        catch
          {:break, {dp, i, j}} -> {dp, i, j}
        end

      throw {:return, Enum.at(Enum.at(dp, m), n)}
    catch
      {:return, val} -> val
    end
  end
  def print_bool(b) do
    try do
      if b do
        IO.puts(true)
      else
        IO.puts(false)
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    print_bool(recursive_match("abc", "a.c"))
    print_bool(recursive_match("abc", "af*.c"))
    print_bool(recursive_match("abc", "a.c*"))
    print_bool(recursive_match("abc", "a.c*d"))
    print_bool(recursive_match("aa", ".*"))
    print_bool(dp_match("abc", "a.c"))
    print_bool(dp_match("abc", "af*.c"))
    print_bool(dp_match("abc", "a.c*"))
    print_bool(dp_match("abc", "a.c*d"))
    print_bool(dp_match("aa", ".*"))
  end
end
Main.main()
