# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def matrix_chain_multiply(arr) do
    try do
      if _len(arr) < 2 do
        throw {:return, 0}
      end
      n = _len(arr)
      dp = []
      i = 0
      while_fun = fn while_fun, dp, i ->
        if i < n do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < n do
              row = (row ++ [Process.get(:inf)])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dp = (dp ++ [row])
          i = i + 1
          while_fun.(while_fun, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun.(while_fun, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      i = n - 1
      while_fun_3 = fn while_fun_3, dp, i ->
        if i > 0 do
          j = i
          while_fun_4 = fn while_fun_4, dp, j ->
            if j < n do
              {dp} = if i == j do
                dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, 0))
                {dp}
              else
                k = i
                while_fun_5 = fn while_fun_5, dp, k ->
                  if k < j do
                    cost = Enum.at(Enum.at(dp, i), k) + Enum.at(Enum.at(dp, k + 1), j) + Enum.at(arr, i - 1) * Enum.at(arr, k) * Enum.at(arr, j)
                    {dp} = if cost < Enum.at(Enum.at(dp, i), j) do
                      dp = List.replace_at(dp, i, List.replace_at(Enum.at(dp, i), j, cost))
                      {dp}
                    else
                      {dp}
                    end
                    k = k + 1
                    while_fun_5.(while_fun_5, dp, k)
                  else
                    {dp, k}
                  end
                end
                {dp, k} = try do
                    while_fun_5.(while_fun_5, dp, k)
                  catch
                    {:break, {dp, k}} -> {dp, k}
                  end

                {dp}
              end
              j = j + 1
              while_fun_4.(while_fun_4, dp, j)
            else
              {dp, j}
            end
          end
          {dp, j} = try do
              while_fun_4.(while_fun_4, dp, j)
            catch
              {:break, {dp, j}} -> {dp, j}
            end

          i = i - 1
          while_fun_3.(while_fun_3, dp, i)
        else
          {dp, i}
        end
      end
      {dp, i} = try do
          while_fun_3.(while_fun_3, dp, i)
        catch
          {:break, {dp, i}} -> {dp, i}
        end

      throw {:return, Enum.at(Enum.at(dp, 1), n - 1)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:inf, 1000000000)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
