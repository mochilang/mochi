# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def build_alphabet() do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(Process.get(:ascii)) do
          result = (result ++ [String.at(Process.get(:ascii), i)])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {_, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def range_list(n) do
    try do
      lst = []
      i = 0
      while_fun_2 = fn while_fun_2, i, lst ->
        if i < n do
          lst = (lst ++ [i])
          i = i + 1
          while_fun_2.(while_fun_2, i, lst)
        else
          {i, lst}
        end
      end
      {_, lst} = try do
          while_fun_2.(while_fun_2, i, lst)
        catch
          {:break, {_, lst}} -> {0, lst}
        end

      throw {:return, lst}
    catch
      {:return, val} -> val
    end
  end
  def reversed_range_list(n) do
    try do
      lst = []
      i = n - 1
      while_fun_3 = fn while_fun_3, i, lst ->
        if i >= 0 do
          lst = (lst ++ [i])
          i = i - 1
          while_fun_3.(while_fun_3, i, lst)
        else
          {i, lst}
        end
      end
      {_, lst} = try do
          while_fun_3.(while_fun_3, i, lst)
        catch
          {:break, {_, lst}} -> {0, lst}
        end

      throw {:return, lst}
    catch
      {:return, val} -> val
    end
  end
  def index_of_char(lst, ch) do
    try do
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(lst) do
          if Enum.at(lst, i, []) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      _ = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def index_of_int(lst, value) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(lst) do
          if Enum.at(lst, i, []) == value do
            throw {:return, i}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      _ = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def enigma_encrypt(message, token) do
    try do
      alphabets = build_alphabet()
      n = _len(alphabets)
      gear_one = range_list(n)
      gear_two = range_list(n)
      gear_three = range_list(n)
      reflector = reversed_range_list(n)
      gear_one_pos = 0
      gear_two_pos = 0
      gear_three_pos = 0
      rotator = fn  ->
  i = Enum.at(gear_one, 0, [])
  gear_one = _slice(gear_one, 1, _len(gear_one) - 1)
  gear_one = (gear_one ++ [i])
  gear_one_pos = gear_one_pos + 1
  {gear_three, gear_three_pos, gear_two, gear_two_pos, i} = if rem(gear_one_pos, n) == 0 do
    i = Enum.at(gear_two, 0, [])
    gear_two = _slice(gear_two, 1, _len(gear_two) - 1)
    gear_two = (gear_two ++ [i])
    gear_two_pos = gear_two_pos + 1
    {gear_three, gear_three_pos, i} = if rem(gear_two_pos, n) == 0 do
      i = Enum.at(gear_three, 0, [])
      gear_three = _slice(gear_three, 1, _len(gear_three) - 1)
      gear_three = (gear_three ++ [i])
      gear_three_pos = gear_three_pos + 1
      {gear_three, gear_three_pos, i}
    else
      {gear_three, gear_three_pos, i}
    end
    {gear_three, gear_three_pos, gear_two, gear_two_pos, i}
  else
    {gear_three, gear_three_pos, gear_two, gear_two_pos, i}
  end
end
      engine = fn ch ->
  try do
    target = index_of_char(alphabets, ch)
    target = Enum.at(gear_one, target, [])
    target = Enum.at(gear_two, target, [])
    target = Enum.at(gear_three, target, [])
    target = Enum.at(reflector, target, [])
    target = index_of_int(gear_three, target)
    target = index_of_int(gear_two, target)
    target = index_of_int(gear_one, target)
    rotator.()
    throw {:return, Enum.at(alphabets, target, [])}
  catch
    {:return, val} -> val
  end
end
      t = 0
      while_fun_6 = fn while_fun_6, t ->
        if t < token do
          rotator.()
          t = t + 1
          while_fun_6.(while_fun_6, t)
        else
          t
        end
      end
      t = try do
          while_fun_6.(while_fun_6, t)
        catch
          {:break, {t}} -> t
        end

      result = ""
      idx = 0
      while_fun_7 = fn while_fun_7, idx, result ->
        if idx < _len(message) do
          result = (result <> engine.(String.at(message, idx)))
          idx = idx + 1
          while_fun_7.(while_fun_7, idx, result)
        else
          {idx, result}
        end
      end
      {idx, result} = try do
          while_fun_7.(while_fun_7, idx, result)
        catch
          {:break, {idx, result}} -> {idx, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:ascii, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}")
  Process.put(:message, "HELLO WORLD")
  Process.put(:token, 123)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:encoded, enigma_encrypt(Process.get(:message), Process.get(:token)))
    IO.puts(Process.get(:encoded))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
