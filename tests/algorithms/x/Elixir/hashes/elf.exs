# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ord(ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:ascii)) do
          if _slice(Process.get(:ascii), i, (i + 1) - i) == ch do
            throw {:return, 32 + i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def bit_and(a, b) do
    try do
      ua = a
      ub = b
      res = 0
      bit = 1
      while_fun_2 = fn while_fun_2, bit, res, ua, ub ->
        if ua > 0 || ub > 0 do
          {res} = if rem(ua, 2) == 1 && rem(ub, 2) == 1 do
            res = res + bit
            {res}
          else
            {res}
          end
          ua = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(ua, 2)))
          ub = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(ub, 2)))
          bit = bit * 2
          while_fun_2.(while_fun_2, bit, res, ua, ub)
        else
          {bit, res, ua, ub}
        end
      end
      {bit, res, ua, ub} = try do
          while_fun_2.(while_fun_2, bit, res, ua, ub)
        catch
          {:break, {bit, res, ua, ub}} -> {bit, res, ua, ub}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bit_xor(a, b) do
    try do
      ua = a
      ub = b
      res = 0
      bit = 1
      while_fun_3 = fn while_fun_3, bit, res, ua, ub ->
        if ua > 0 || ub > 0 do
          abit = rem(ua, 2)
          bbit = rem(ub, 2)
          {res} = if abit != bbit do
            res = res + bit
            {res}
          else
            {res}
          end
          ua = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(ua, 2)))
          ub = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(ub, 2)))
          bit = bit * 2
          while_fun_3.(while_fun_3, bit, res, ua, ub)
        else
          {bit, res, ua, ub}
        end
      end
      {bit, res, ua, ub} = try do
          while_fun_3.(while_fun_3, bit, res, ua, ub)
        catch
          {:break, {bit, res, ua, ub}} -> {bit, res, ua, ub}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bit_not32(x) do
    try do
      ux = x
      res = 0
      bit = 1
      count = 0
      while_fun_4 = fn while_fun_4, bit, count, res, ux ->
        if count < 32 do
          {res} = if rem(ux, 2) == 0 do
            res = res + bit
            {res}
          else
            {res}
          end
          ux = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(ux, 2)))
          bit = bit * 2
          count = count + 1
          while_fun_4.(while_fun_4, bit, count, res, ux)
        else
          {bit, count, res, ux}
        end
      end
      {bit, count, res, ux} = try do
          while_fun_4.(while_fun_4, bit, count, res, ux)
        catch
          {:break, {bit, count, res, ux}} -> {bit, count, res, ux}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def elf_hash(data) do
    try do
      hash_ = 0
      i = 0
      while_fun_5 = fn while_fun_5, hash_, i ->
        if i < _len(data) do
          c = ord(_slice(data, i, (i + 1) - i))
          hash_ = hash_ * 16 + c
          x = bit_and(hash_, 4026531840)
          {hash_} = if x != 0 do
            hash_ = bit_xor(hash_, (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(x, 16777216))))
            {hash_}
          else
            {hash_}
          end
          hash_ = bit_and(hash_, bit_not32(x))
          i = i + 1
          while_fun_5.(while_fun_5, hash_, i)
        else
          {hash_, i}
        end
      end
      {hash_, i} = try do
          while_fun_5.(while_fun_5, hash_, i)
        catch
          {:break, {hash_, i}} -> {hash_, i}
        end

      throw {:return, hash_}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:ascii, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(elf_hash("lorem ipsum")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
