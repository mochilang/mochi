# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      digits = "0123456789"
      idx = index_of(upper, ch)
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      idx = index_of(lower, ch)
      if idx >= 0 do
        throw {:return, 97 + idx}
      end
      idx = index_of(digits, ch)
      if idx >= 0 do
        throw {:return, 48 + idx}
      end
      if ch == " " do
        throw {:return, 32}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def djb2(s) do
    try do
      hash_value = 5381
      i = 0
      while_fun_2 = fn while_fun_2, hash_value, i ->
        if i < _len(s) do
          hash_value = hash_value * 33 + ord(String.at(s, i))
          hash_value = rem(hash_value, 4294967296)
          i = i + 1
          while_fun_2.(while_fun_2, hash_value, i)
        else
          {hash_value, i}
        end
      end
      {hash_value, i} = try do
          while_fun_2.(while_fun_2, hash_value, i)
        catch
          {:break, {hash_value, i}} -> {hash_value, i}
        end

      throw {:return, hash_value}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(djb2("Algorithms")))
    IO.puts(Kernel.inspect(djb2("scramble bits")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
