# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_luhn(s) do
    try do
      n = _len(s)
      if n <= 1 do
        throw {:return, false}
      end
      check_digit = Kernel.trunc(_slice(s, n - 1, n - (n - 1)))
      i = n - 2
      even = true
      while_fun = fn while_fun, check_digit, even, i ->
        if i >= 0 do
          digit = Kernel.trunc(_slice(s, i, i + 1 - (i)))
          check_digit = if even do
            doubled = digit * 2
            doubled = if doubled > 9 do
              doubled = doubled - 9
              doubled
            else
              doubled
            end
            check_digit = check_digit + doubled
            check_digit
          else
            check_digit = check_digit + digit
            check_digit
          end
          even = !even
          i = i - 1
          while_fun.(while_fun, check_digit, even, i)
        else
          {check_digit, even, i}
        end
      end
      {check_digit, even, _} = try do
          while_fun.(while_fun, check_digit, even, i)
        catch
          {:break, {check_digit, even, _}} -> {check_digit, even, 0}
        end

      throw {:return, rem(check_digit, 10) == 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_luhn("79927398713")))
    IO.puts(Kernel.inspect(is_luhn("79927398714")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
