# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ord(ch) do
    try do
      lower = "abcdefghijklmnopqrstuvwxyz"
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      digits = "0123456789"
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(lower) do
          if Enum.at(lower, i, []) == ch do
            throw {:return, 97 + i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(upper) do
          if Enum.at(upper, i, []) == ch do
            throw {:return, 65 + i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      _ = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {_}} -> 0
        end

      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(digits) do
          if String.at(digits, i) == ch do
            throw {:return, 48 + i}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      _ = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {_}} -> 0
        end

      if ch == " " do
        throw {:return, 32}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def adler32(plain_text) do
    try do
      a = 1
      b = 0
      i = 0
      while_fun_4 = fn while_fun_4, a, b, i ->
        if i < _len(plain_text) do
          code = ord(String.at(plain_text, i))
          a = rem((a + code), Process.get(:mod_adler))
          b = rem((b + a), Process.get(:mod_adler))
          i = i + 1
          while_fun_4.(while_fun_4, a, b, i)
        else
          {a, b, i}
        end
      end
      {a, b, _} = try do
          while_fun_4.(while_fun_4, a, b, i)
        catch
          {:break, {a, b, _}} -> {a, b, 0}
        end

      throw {:return, b * 65536 + a}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(adler32("Algorithms")))
      IO.puts(Kernel.inspect(adler32("go adler em all")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    Process.put(:mod_adler, 65521)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
