# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ord(ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:ascii_chars)) do
          if String.at(Process.get(:ascii_chars), i) == ch do
            throw {:return, 32 + i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def fletcher16(text) do
    try do
      sum1 = 0
      sum2 = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, sum1, sum2 ->
        if i < _len(text) do
          code = ord(String.at(text, i))
          sum1 = rem((sum1 + code), 255)
          sum2 = rem((sum1 + sum2), 255)
          i = i + 1
          while_fun_2.(while_fun_2, i, sum1, sum2)
        else
          {i, sum1, sum2}
        end
      end
      {_, sum1, sum2} = try do
          while_fun_2.(while_fun_2, i, sum1, sum2)
        catch
          {:break, {_, sum1, sum2}} -> {0, sum1, sum2}
        end

      throw {:return, sum2 * 256 + sum1}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:ascii_chars, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
