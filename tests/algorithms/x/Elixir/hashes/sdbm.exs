# Code generated by Mochi transpiler 2025-08-08 19:19 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ord(ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:ascii)) do
          if _slice(Process.get(:ascii), i, (i + 1) - i) == ch do
            throw {:return, 32 + i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def sdbm(plain_text) do
    try do
      hash_value = 0
      i = 0
      while_fun_2 = fn while_fun_2, hash_value, i ->
        if i < _len(plain_text) do
          code = ord(_slice(plain_text, i, (i + 1) - i))
          hash_value = hash_value * 65599 + code
          i = i + 1
          while_fun_2.(while_fun_2, hash_value, i)
        else
          {hash_value, i}
        end
      end
      {hash_value, i} = try do
          while_fun_2.(while_fun_2, hash_value, i)
        catch
          {:break, {hash_value, i}} -> {hash_value, i}
        end

      throw {:return, hash_value}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:ascii, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
  def main() do
    IO.puts(Kernel.inspect(sdbm("Algorithms")))
    IO.puts(Kernel.inspect(sdbm("scramble bits")))
  end
end
Main.main()
