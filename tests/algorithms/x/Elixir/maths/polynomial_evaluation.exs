# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pow_float(base, exponent) do
    try do
      exp = exponent
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def evaluate_poly(poly, x) do
    try do
      total = 0.0
      i = 0
      while_fun_2 = fn while_fun_2, i, total ->
        if i < _len(poly) do
          total = total + Enum.at(poly, i) * pow_float(x, i)
          i = i + 1
          while_fun_2.(while_fun_2, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_2.(while_fun_2, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def horner(poly, x) do
    try do
      result = 0.0
      i = _len(poly) - 1
      while_fun_3 = fn while_fun_3, i, result ->
        if i >= 0 do
          result = result * x + Enum.at(poly, i)
          i = i - 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def test_polynomial_evaluation() do
    try do
      poly = [0.0, 0.0, 5.0, 9.3, 7.0]
      x = 10.0
      if evaluate_poly(poly, x) != 79800.0 do
        raise("evaluate_poly failed")
      end
      if horner(poly, x) != 79800.0 do
        raise("horner failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_polynomial_evaluation()
      poly = [0.0, 0.0, 5.0, 9.3, 7.0]
      x = 10.0
      IO.puts(Kernel.inspect(evaluate_poly(poly, x)))
      IO.puts(Kernel.inspect(horner(poly, x)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
