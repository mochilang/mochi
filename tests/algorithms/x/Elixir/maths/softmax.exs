# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def exp_approx(x) do
    try do
      term = 1.0
      sum = 1.0
      i = 1
      while_fun = fn while_fun, i, sum, term ->
        if i < 20 do
          term = term * x / (:erlang.float(i))
          sum = sum + term
          i = i + 1
          while_fun.(while_fun, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, _} = try do
          while_fun.(while_fun, i, sum, term)
        catch
          {:break, {i, sum, _}} -> {i, sum, 0}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def softmax(vec) do
    try do
      exps = []
      i = 0
      while_fun_2 = fn while_fun_2, exps, i ->
        if i < _len(vec) do
          exps = (exps ++ [exp_approx(Enum.at(vec, i, []))])
          i = i + 1
          while_fun_2.(while_fun_2, exps, i)
        else
          {exps, i}
        end
      end
      {exps, i} = try do
          while_fun_2.(while_fun_2, exps, i)
        catch
          {:break, {exps, i}} -> {exps, i}
        end

      total = 0.0
      i = 0
      while_fun_3 = fn while_fun_3, i, total ->
        if i < _len(exps) do
          total = total + Enum.at(exps, i, [])
          i = i + 1
          while_fun_3.(while_fun_3, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_3.(while_fun_3, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      result = []
      i = 0
      while_fun_4 = fn while_fun_4, i, result ->
        if i < _len(exps) do
          result = (result ++ [Enum.at(exps, i, []) / total])
          i = i + 1
          while_fun_4.(while_fun_4, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_4.(while_fun_4, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def abs_val(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def approx_equal(a, b) do
    try do
      throw {:return, abs_val(a - b) < 0.0001}
    catch
      {:return, val} -> val
    end
  end
  def test_softmax() do
    try do
      s1 = softmax([1.0, 2.0, 3.0, 4.0])
      sum1 = 0.0
      i = 0
      while_fun_5 = fn while_fun_5, i, sum1 ->
        if i < _len(s1) do
          sum1 = sum1 + Enum.at(s1, i, [])
          i = i + 1
          while_fun_5.(while_fun_5, i, sum1)
        else
          {i, sum1}
        end
      end
      {i, sum1} = try do
          while_fun_5.(while_fun_5, i, sum1)
        catch
          {:break, {i, sum1}} -> {i, sum1}
        end

      if !approx_equal(sum1, 1.0) do
        raise("sum test failed")
      end
      s2 = softmax([5.0, 5.0])
      if !(approx_equal(Enum.at(s2, 0, []), 0.5) && approx_equal(Enum.at(s2, 1, []), 0.5)) do
        raise("equal elements test failed")
      end
      s3 = softmax([0.0])
      if !approx_equal(Enum.at(s3, 0, []), 1.0) do
        raise("zero vector test failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_softmax()
      IO.puts(Kernel.inspect(softmax([1.0, 2.0, 3.0, 4.0])))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
