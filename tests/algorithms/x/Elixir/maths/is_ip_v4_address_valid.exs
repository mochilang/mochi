# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def split_by_dot(s) do
    try do
      res = []
      current = ""
      i = 0
      while_fun = fn while_fun, current, i, res ->
        if i < _len(s) do
          c = String.at(s, i)
          {current, res} = if c == "." do
            res = (res ++ [current])
            current = ""
            {current, res}
          else
            current = (current <> c)
            {current, res}
          end
          i = i + 1
          while_fun.(while_fun, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun.(while_fun, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      res = (res ++ [current])
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def is_digit_str(s) do
    try do
      if _len(s) == 0 do
        throw {:return, false}
      end
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(s) do
          c = String.at(s, i)
          if c < "0" || c > "9" do
            throw {:return, false}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def parse_decimal(s) do
    try do
      value = 0
      i = 0
      while_fun_3 = fn while_fun_3, i, value ->
        if i < _len(s) do
          c = String.at(s, i)
          value = value * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(c))
          i = i + 1
          while_fun_3.(while_fun_3, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun_3.(while_fun_3, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def is_ip_v4_address_valid(ip) do
    try do
      octets = split_by_dot(ip)
      if _len(octets) != 4 do
        throw {:return, false}
      end
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < 4 do
          oct = Enum.at(octets, i, [])
          if !is_digit_str(oct) do
            throw {:return, false}
          end
          number = parse_decimal(oct)
          if _len(Kernel.to_string(number)) != _len(oct) do
            throw {:return, false}
          end
          if number < 0 || number > 255 do
            throw {:return, false}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("192.168.0.23")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("192.256.15.8")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("172.100.0.8")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("255.256.0.256")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("1.2.33333333.4")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("1.2.-3.4")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("1.2.3")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("1.2.3.4.5")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("1.2.A.4")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("0.0.0.0")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("1.2.3.")))
    IO.puts(Kernel.inspect(is_ip_v4_address_valid("1.2.3.05")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
