# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def floor_div(a, b) do
    try do
      q = div(a, b)
      r = rem(a, b)
      {q} = if r != 0 && ((a < 0 && b > 0) || (a > 0 && b < 0)) do
        q = q - 1
        {q}
      else
        {q}
      end
      throw {:return, q}
    catch
      {:return, val} -> val
    end
  end
  def continued_fraction(numerator, denominator) do
    try do
      num = numerator
      den = denominator
      result = []
      while_fun = fn while_fun, den, num, result ->
        if true do
          integer_part = floor_div(num, den)
          result = (result ++ [integer_part])
          num = num - integer_part * den
          if num == 0 do
            throw {:break, {den, num, result}}
          end
          tmp = num
          num = den
          den = tmp
          while_fun.(while_fun, den, num, result)
        else
          {den, num, result}
        end
      end
      {den, num, result} = try do
          while_fun.(while_fun, den, num, result)
        catch
          {:break, {den, num, result}} -> {den, num, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def list_to_string(lst) do
    try do
      s = "["
      i = 0
      while_fun_2 = fn while_fun_2, i, s ->
        if i < _len(lst) do
          s = (s <> Kernel.to_string(Enum.at(lst, i, [])))
          {s} = if i < _len(lst) - 1 do
            s = (s <> ", ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_2.(while_fun_2, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, (s <> "]")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(("Continued Fraction of 0.84375 is: " <> list_to_string(continued_fraction(27, 32))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
