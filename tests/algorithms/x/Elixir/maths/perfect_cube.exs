# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def perfect_cube(n) do
    try do
      m = n
      {m} = if m < 0 do
        m = -m
        {m}
      else
        {m}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i * i * i < m do
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, i * i * i == m}
    catch
      {:return, val} -> val
    end
  end
  def perfect_cube_binary_search(n) do
    try do
      m = n
      {m} = if m < 0 do
        m = -m
        {m}
      else
        {m}
      end
      left = 0
      right = m
      while_fun_2 = fn while_fun_2, left, right ->
        if left <= right do
          mid = left + div((right - left), 2)
          cube = mid * mid * mid
          if cube == m do
            throw {:return, true}
          end
          {left, right} = if cube < m do
            left = mid + 1
            {left, right}
          else
            right = mid - 1
            {left, right}
          end
          while_fun_2.(while_fun_2, left, right)
        else
          {left, right}
        end
      end
      {left, right} = try do
          while_fun_2.(while_fun_2, left, right)
        catch
          {:break, {left, right}} -> {left, right}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(perfect_cube(27)))
    IO.puts(Kernel.inspect(perfect_cube(4)))
    IO.puts(Kernel.inspect(perfect_cube_binary_search(27)))
    IO.puts(Kernel.inspect(perfect_cube_binary_search(64)))
    IO.puts(Kernel.inspect(perfect_cube_binary_search(4)))
  end
end
Main.main()
