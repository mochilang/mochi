# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains(xs, value) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i, []) == value do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def sumset(set_a, set_b) do
    try do
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(set_a) do
          j = 0
          while_fun_3 = fn while_fun_3, j, result ->
            if j < _len(set_b) do
              s = Enum.at(set_a, i, []) + Enum.at(set_b, j, [])
              result = if !contains(result, s) do
                result = (result ++ [s])
                result
              else
                result
              end
              j = j + 1
              while_fun_3.(while_fun_3, j, result)
            else
              {j, result}
            end
          end
          {_, result} = try do
              while_fun_3.(while_fun_3, j, result)
            catch
              {:break, {_, result}} -> {0, result}
            end

          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      set_a = [1, 2, 3]
      set_b = [4, 5, 6]
      IO.puts(Kernel.inspect(sumset(set_a, set_b)))
      set_c = [4, 5, 6, 7]
      IO.puts(Kernel.inspect(sumset(set_a, set_c)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
