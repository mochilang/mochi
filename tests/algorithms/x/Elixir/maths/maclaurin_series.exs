# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      {i} = if (:erlang.float(i)) > x do
        i = i - 1
        {i}
      else
        {i}
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def pow(x, n) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = result * x
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def factorial(n) do
    try do
      result = 1.0
      i = 2
      while_fun_2 = fn while_fun_2, i, result ->
        if i <= n do
          result = result * (:erlang.float(i))
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def maclaurin_sin(theta, accuracy) do
    try do
      t = theta
      div_ = floor(t / (2.0 * Process.get(:pi)))
      t = t - 2.0 * div_ * Process.get(:pi)
      sum = 0.0
      r = 0
      while_fun_3 = fn while_fun_3, r, sum ->
        if r < accuracy do
          power = 2 * r + 1
          sign = (if rem(r, 2) == 0, do: 1.0, else: -1.0)
          sum = sum + sign * pow(t, power) / factorial(power)
          r = r + 1
          while_fun_3.(while_fun_3, r, sum)
        else
          {r, sum}
        end
      end
      {r, sum} = try do
          while_fun_3.(while_fun_3, r, sum)
        catch
          {:break, {r, sum}} -> {r, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def maclaurin_cos(theta, accuracy) do
    try do
      t = theta
      div_ = floor(t / (2.0 * Process.get(:pi)))
      t = t - 2.0 * div_ * Process.get(:pi)
      sum = 0.0
      r = 0
      while_fun_4 = fn while_fun_4, r, sum ->
        if r < accuracy do
          power = 2 * r
          sign = (if rem(r, 2) == 0, do: 1.0, else: -1.0)
          sum = sum + sign * pow(t, power) / factorial(power)
          r = r + 1
          while_fun_4.(while_fun_4, r, sum)
        else
          {r, sum}
        end
      end
      {r, sum} = try do
          while_fun_4.(while_fun_4, r, sum)
        catch
          {:break, {r, sum}} -> {r, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(maclaurin_sin(10.0, 30)))
    IO.puts(Kernel.inspect(maclaurin_sin(-10.0, 30)))
    IO.puts(Kernel.inspect(maclaurin_sin(10.0, 15)))
    IO.puts(Kernel.inspect(maclaurin_sin(-10.0, 15)))
    IO.puts(Kernel.inspect(maclaurin_cos(5.0, 30)))
    IO.puts(Kernel.inspect(maclaurin_cos(-5.0, 30)))
    IO.puts(Kernel.inspect(maclaurin_cos(10.0, 15)))
    IO.puts(Kernel.inspect(maclaurin_cos(-10.0, 15)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
