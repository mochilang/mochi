# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def signum(num) do
    try do
      if num < 0.0 do
        throw {:return, -1}
      end
      if num > 0.0 do
        throw {:return, 1}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def test_signum() do
    try do
      if signum(5.0) != 1 do
        raise("signum(5) failed")
      end
      if signum(-5.0) != (-1) do
        raise("signum(-5) failed")
      end
      if signum(0.0) != 0 do
        raise("signum(0) failed")
      end
      if signum(10.5) != 1 do
        raise("signum(10.5) failed")
      end
      if signum(-10.5) != (-1) do
        raise("signum(-10.5) failed")
      end
      if signum(0.000001) != 1 do
        raise("signum(1e-6) failed")
      end
      if signum(-0.000001) != (-1) do
        raise("signum(-1e-6) failed")
      end
      if signum(123456789.0) != 1 do
        raise("signum(123456789) failed")
      end
      if signum(-123456789.0) != (-1) do
        raise("signum(-123456789) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_signum()
      IO.puts(Kernel.inspect(signum(12.0)))
      IO.puts(Kernel.inspect(signum(-12.0)))
      IO.puts(Kernel.inspect(signum(0.0)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
