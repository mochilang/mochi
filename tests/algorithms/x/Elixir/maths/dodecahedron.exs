# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def sqrtApprox(x) do
    try do
      guess = x / 2.0
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def abs_val(num) do
    try do
      throw {:return, ((if num < 0.0, do: -num, else: num))}
    catch
      {:return, val} -> val
    end
  end
  def approx_equal(a, b, eps) do
    try do
      throw {:return, abs_val(a - b) < eps}
    catch
      {:return, val} -> val
    end
  end
  def dodecahedron_surface_area(edge) do
    try do
      if edge <= 0 do
        raise("Length must be a positive.")
      end
      term = sqrtApprox(25.0 + 10.0 * sqrtApprox(5.0))
      e = :erlang.float(edge)
      throw {:return, 3.0 * term * e * e}
    catch
      {:return, val} -> val
    end
  end
  def dodecahedron_volume(edge) do
    try do
      if edge <= 0 do
        raise("Length must be a positive.")
      end
      term = (15.0 + 7.0 * sqrtApprox(5.0)) / 4.0
      e = :erlang.float(edge)
      throw {:return, term * e * e * e}
    catch
      {:return, val} -> val
    end
  end
  def test_dodecahedron() do
    try do
      if !approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001) do
        raise("surface area 5 failed")
      end
      if !approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001) do
        raise("surface area 10 failed")
      end
      if !approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001) do
        raise("volume 5 failed")
      end
      if !approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001) do
        raise("volume 10 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_dodecahedron()
      IO.puts(Kernel.inspect(dodecahedron_surface_area(5)))
      IO.puts(Kernel.inspect(dodecahedron_volume(5)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
