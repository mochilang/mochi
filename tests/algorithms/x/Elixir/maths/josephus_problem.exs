# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def josephus_recursive(num_people, step_size) do
    try do
      if num_people <= 0 || step_size <= 0 do
        raise("num_people or step_size is not a positive integer.")
      end
      if num_people == 1 do
        throw {:return, 0}
      end
      throw {:return, rem((josephus_recursive(num_people - 1, step_size) + step_size), num_people)}
    catch
      {:return, val} -> val
    end
  end
  def find_winner(num_people, step_size) do
    try do
      throw {:return, josephus_recursive(num_people, step_size) + 1}
    catch
      {:return, val} -> val
    end
  end
  def remove_at(xs, idx) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          {res} = if i != idx do
            res = (res ++ [Enum.at(xs, i)])
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def josephus_iterative(num_people, step_size) do
    try do
      if num_people <= 0 || step_size <= 0 do
        raise("num_people or step_size is not a positive integer.")
      end
      circle = []
      i = 1
      while_fun_2 = fn while_fun_2, circle, i ->
        if i <= num_people do
          circle = (circle ++ [i])
          i = i + 1
          while_fun_2.(while_fun_2, circle, i)
        else
          {circle, i}
        end
      end
      {circle, i} = try do
          while_fun_2.(while_fun_2, circle, i)
        catch
          {:break, {circle, i}} -> {circle, i}
        end

      current = 0
      while_fun_3 = fn while_fun_3, circle, current ->
        if _len(circle) > 1 do
          current = rem((current + step_size - 1), _len(circle))
          circle = remove_at(circle, current)
          while_fun_3.(while_fun_3, circle, current)
        else
          {circle, current}
        end
      end
      {circle, current} = try do
          while_fun_3.(while_fun_3, circle, current)
        catch
          {:break, {circle, current}} -> {circle, current}
        end

      throw {:return, Enum.at(circle, 0)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:r, josephus_recursive(7, 3))
    IO.puts(Kernel.to_string(Process.get(:r)))
    IO.puts(Kernel.inspect(find_winner(7, 3)))
    IO.puts(Kernel.inspect(josephus_iterative(7, 3)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
