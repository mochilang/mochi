# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def collatz_sequence(n) do
    try do
      if n < 1 do
        raise("Sequence only defined for positive integers")
      end
      seq = [n]
      current = n
      while_fun = fn while_fun, current, seq ->
        if current != 1 do
          current = (if rem(current, 2) == 0, do: div(current, 2), else: 3 * current + 1)
          seq = (seq ++ [current])
          while_fun.(while_fun, current, seq)
        else
          {current, seq}
        end
      end
      {current, seq} = try do
          while_fun.(while_fun, current, seq)
        catch
          {:break, {current, seq}} -> {current, seq}
        end

      throw {:return, seq}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = 11
      seq = collatz_sequence(n)
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [seq])), ",", " "))
      IO.puts((((("Collatz sequence from " <> Kernel.to_string(n)) <> " took ") <> Kernel.inspect(_len(seq))) <> " steps."))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
