# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sqrtApprox(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def euclidean_distance(v1, v2) do
    try do
      sum = 0.0
      i = 0
      while_fun_2 = fn while_fun_2, i, sum ->
        if i < _len(v1) do
          diff = Enum.at(v1, i, []) - Enum.at(v2, i, [])
          sum = sum + diff * diff
          i = i + 1
          while_fun_2.(while_fun_2, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun_2.(while_fun_2, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, sqrtApprox(sum)}
    catch
      {:return, val} -> val
    end
  end
  def euclidean_distance_no_np(v1, v2) do
    try do
      throw {:return, euclidean_distance(v1, v2)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(euclidean_distance([0.0, 0.0], [2.0, 2.0])))
      IO.puts(Kernel.inspect(euclidean_distance([0.0, 0.0, 0.0], [2.0, 2.0, 2.0])))
      IO.puts(Kernel.inspect(euclidean_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0])))
      IO.puts(Kernel.inspect(euclidean_distance_no_np([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0])))
      IO.puts(Kernel.inspect(euclidean_distance_no_np([0.0, 0.0], [2.0, 2.0])))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
