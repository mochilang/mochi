# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def pow_float(base, exp) do
    try do
      result = 1.0
      exponent = exp
      {exponent, result} = if exponent < 0 do
        exponent = -exponent
        i = 0
        while_fun = fn while_fun, i, result ->
          if i < exponent do
            result = result * base
            i = i + 1
            while_fun.(while_fun, i, result)
          else
            {i, result}
          end
        end
        {i, result} = try do
            while_fun.(while_fun, i, result)
          catch
            {:break, {i, result}} -> {i, result}
          end

        throw {:return, 1.0 / result}
        {exponent, result}
      else
        {exponent, result}
      end
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < exponent do
          result = result * base
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def sum_of_geometric_progression(first_term, common_ratio, num_of_terms) do
    try do
      if common_ratio == 1 do
        throw {:return, :erlang.float((num_of_terms * first_term))}
      end
      a = :erlang.float(first_term)
      r = :erlang.float(common_ratio)
      throw {:return, (a / (1.0 - r)) * (1.0 - pow_float(r, num_of_terms))}
    catch
      {:return, val} -> val
    end
  end
  def test_sum() do
    try do
      if sum_of_geometric_progression(1, 2, 10) != 1023.0 do
        raise("example1 failed")
      end
      if sum_of_geometric_progression(1, 10, 5) != 11111.0 do
        raise("example2 failed")
      end
      if sum_of_geometric_progression(-1, 2, 10) != (-1023.0) do
        raise("example3 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_sum()
      IO.puts(Kernel.inspect(sum_of_geometric_progression(1, 2, 10)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
