# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ceil_float(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      if x > (:erlang.float(i)) do
        throw {:return, i + 1}
      end
      throw {:return, i}
    catch
      {:return, val} -> val
    end
  end
  def exp_approx(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n < 20 do
          term = term * x / (:erlang.float(n))
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def euler_modified(ode_func, y0, x0, step, x_end) do
    try do
      n = ceil_float((x_end - x0) / step)
      y = [y0]
      x = x0
      k = 0
      while_fun_2 = fn while_fun_2, k, x, y ->
        if k < n do
          y_predict = Enum.at(y, k) + step * ode_func.(x, Enum.at(y, k))
          slope1 = ode_func.(x, Enum.at(y, k))
          slope2 = ode_func.(x + step, y_predict)
          y_next = Enum.at(y, k) + (step / 2.0) * (slope1 + slope2)
          y = (y ++ [y_next])
          x = x + step
          k = k + 1
          while_fun_2.(while_fun_2, k, x, y)
        else
          {k, x, y}
        end
      end
      {k, x, y} = try do
          while_fun_2.(while_fun_2, k, x, y)
        catch
          {:break, {k, x, y}} -> {k, x, y}
        end

      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def f1(x, y) do
    try do
      throw {:return, -2.0 * x * y * y}
    catch
      {:return, val} -> val
    end
  end
  def f2(x, y) do
    try do
      throw {:return, -2.0 * y + (x * x * x) * exp_approx(-2.0 * x)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      y1 = euler_modified(&f1/2, 1.0, 0.0, 0.2, 1.0)
      IO.puts(Enum.at(y1, _len(y1) - 1))
      y2 = euler_modified(&f2/2, 1.0, 0.0, 0.1, 0.3)
      IO.puts(Enum.at(y2, _len(y2) - 1))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
