# Code generated by Mochi transpiler 2025-08-17 09:08 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def exact_prime_factor_count(n) do
    try do
      count = 0
      num = n
      {count, num} = if rem(num, 2) == 0 do
        count = count + 1
        while_fun = fn while_fun, num ->
          if rem(num, 2) == 0 do
            num = div(num, 2)
            while_fun.(while_fun, num)
          else
            num
          end
        end
        num = try do
            while_fun.(while_fun, num)
          catch
            {:break, {num}} -> num
          end

        {count, num}
      else
        {count, num}
      end
      i = 3
      while_fun_2 = fn while_fun_2, count, i, num ->
        if i * i <= num do
          {count, num} = if rem(num, i) == 0 do
            count = count + 1
            while_fun_3 = fn while_fun_3, num ->
              if rem(num, i) == 0 do
                num = div(num, i)
                while_fun_3.(while_fun_3, num)
              else
                num
              end
            end
            num = try do
                while_fun_3.(while_fun_3, num)
              catch
                {:break, {num}} -> num
              end

            {count, num}
          else
            {count, num}
          end
          i = i + 2
          while_fun_2.(while_fun_2, count, i, num)
        else
          {count, i, num}
        end
      end
      {count, _, num} = try do
          while_fun_2.(while_fun_2, count, i, num)
        catch
          {:break, {count, _, num}} -> {count, 0, num}
        end

      count = if num > 2 do
        count = count + 1
        count
      else
        count
      end
      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def ln(x) do
    try do
      ln2 = 0.6931471805599453
      y = x
      k = 0.0
      while_fun_4 = fn while_fun_4, k, y ->
        if y > 2.0 do
          y = y / 2.0
          k = k + ln2
          while_fun_4.(while_fun_4, k, y)
        else
          {k, y}
        end
      end
      {k, y} = try do
          while_fun_4.(while_fun_4, k, y)
        catch
          {:break, {k, y}} -> {k, y}
        end

      while_fun_5 = fn while_fun_5, k, y ->
        if y < 1.0 do
          y = y * 2.0
          k = k - ln2
          while_fun_5.(while_fun_5, k, y)
        else
          {k, y}
        end
      end
      {k, y} = try do
          while_fun_5.(while_fun_5, k, y)
        catch
          {:break, {k, y}} -> {k, y}
        end

      t = (y - 1.0) / (y + 1.0)
      term = t
      sum = 0.0
      n = 1
      while_fun_6 = fn while_fun_6, n, sum, term ->
        if n <= 19 do
          sum = sum + term / (:erlang.float(n))
          term = term * t * t
          n = n + 2
          while_fun_6.(while_fun_6, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {_, sum, _} = try do
          while_fun_6.(while_fun_6, n, sum, term)
        catch
          {:break, {_, sum, _}} -> {0, sum, 0}
        end

      throw {:return, k + 2.0 * sum}
    catch
      {:return, val} -> val
    end
  end
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      i = if (:erlang.float(i)) > x do
        i = i - 1
        i
      else
        i
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def round4(x) do
    try do
      m = 10000.0
      throw {:return, floor(x * m + 0.5) / m}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = 51242183
      count = exact_prime_factor_count(n)
      IO.puts(("The number of distinct prime factors is/are " <> Kernel.inspect(count)))
      loglog = ln(ln(:erlang.float(n)))
      IO.puts(("The value of log(log(n)) is " <> Kernel.inspect(round4(loglog))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
