# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def sqrt(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 10 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def powf(x, n) do
    try do
      res = 1.0
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < n do
          res = res * x
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def roundf(x) do
    try do
      throw {:return, ((if x >= 0.0, do: (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((x + 0.5)), else: (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((x - 0.5))))}
    catch
      {:return, val} -> val
    end
  end
  def fib_iterative(n) do
    try do
      if n < 0 do
        raise("n is negative")
      end
      if n == 0 do
        throw {:return, [0]}
      end
      fib = [0, 1]
      i = 2
      while_fun_3 = fn while_fun_3, fib, i ->
        if i <= n do
          fib = (fib ++ [Enum.at(fib, i - 1, []) + Enum.at(fib, i - 2, [])])
          i = i + 1
          while_fun_3.(while_fun_3, fib, i)
        else
          {fib, i}
        end
      end
      {fib, i} = try do
          while_fun_3.(while_fun_3, fib, i)
        catch
          {:break, {fib, i}} -> {fib, i}
        end

      throw {:return, fib}
    catch
      {:return, val} -> val
    end
  end
  def fib_recursive_term(i) do
    try do
      if i < 0 do
        raise("n is negative")
      end
      if i < 2 do
        throw {:return, i}
      end
      throw {:return, fib_recursive_term(i - 1) + fib_recursive_term(i - 2)}
    catch
      {:return, val} -> val
    end
  end
  def fib_recursive(n) do
    try do
      if n < 0 do
        raise("n is negative")
      end
      res = []
      i = 0
      while_fun_4 = fn while_fun_4, i, res ->
        if i <= n do
          res = (res ++ [fib_recursive_term(i)])
          i = i + 1
          while_fun_4.(while_fun_4, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_4.(while_fun_4, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def fib_recursive_cached_term(i) do
    try do
      if i < 0 do
        raise("n is negative")
      end
      if i < 2 do
        throw {:return, i}
      end
      if Map.has_key?(Process.get(:fib_cache_global), i) do
        throw {:return, Process.get(:fib_cache_global)[i]}
      end
      val = fib_recursive_cached_term(i - 1) + fib_recursive_cached_term(i - 2)
      Process.put(:fib_cache_global, Map.put(Process.get(:fib_cache_global), i, val))
      throw {:return, val}
    catch
      {:return, val} -> val
    end
  end
  def fib_recursive_cached(n) do
    try do
      if n < 0 do
        raise("n is negative")
      end
      res = []
      j = 0
      while_fun_5 = fn while_fun_5, j, res ->
        if j <= n do
          res = (res ++ [fib_recursive_cached_term(j)])
          j = j + 1
          while_fun_5.(while_fun_5, j, res)
        else
          {j, res}
        end
      end
      {j, res} = try do
          while_fun_5.(while_fun_5, j, res)
        catch
          {:break, {j, res}} -> {j, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def fib_memoization_term(num) do
    try do
      if Map.has_key?(Process.get(:fib_memo_cache), num) do
        throw {:return, Process.get(:fib_memo_cache)[num]}
      end
      value = fib_memoization_term(num - 1) + fib_memoization_term(num - 2)
      Process.put(:fib_memo_cache, Map.put(Process.get(:fib_memo_cache), num, value))
      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def fib_memoization(n) do
    try do
      if n < 0 do
        raise("n is negative")
      end
      out = []
      i = 0
      while_fun_6 = fn while_fun_6, i, out ->
        if i <= n do
          out = (out ++ [fib_memoization_term(i)])
          i = i + 1
          while_fun_6.(while_fun_6, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_6.(while_fun_6, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def fib_binet(n) do
    try do
      if n < 0 do
        raise("n is negative")
      end
      if n >= 1475 do
        raise("n is too large")
      end
      sqrt5 = sqrt(5.0)
      phi = (1.0 + sqrt5) / 2.0
      res = []
      i = 0
      while_fun_7 = fn while_fun_7, i, res ->
        if i <= n do
          val = roundf(powf(phi, i) / sqrt5)
          res = (res ++ [val])
          i = i + 1
          while_fun_7.(while_fun_7, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_7.(while_fun_7, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def matrix_mul(a, b) do
    try do
      a00 = Enum.at(Enum.at(a, 0, []), 0, 0) * Enum.at(Enum.at(b, 0, []), 0, 0) + Enum.at(Enum.at(a, 0, []), 1, 0) * Enum.at(Enum.at(b, 1, []), 0, 0)
      a01 = Enum.at(Enum.at(a, 0, []), 0, 0) * Enum.at(Enum.at(b, 0, []), 1, 0) + Enum.at(Enum.at(a, 0, []), 1, 0) * Enum.at(Enum.at(b, 1, []), 1, 0)
      a10 = Enum.at(Enum.at(a, 1, []), 0, 0) * Enum.at(Enum.at(b, 0, []), 0, 0) + Enum.at(Enum.at(a, 1, []), 1, 0) * Enum.at(Enum.at(b, 1, []), 0, 0)
      a11 = Enum.at(Enum.at(a, 1, []), 0, 0) * Enum.at(Enum.at(b, 0, []), 1, 0) + Enum.at(Enum.at(a, 1, []), 1, 0) * Enum.at(Enum.at(b, 1, []), 1, 0)
      throw {:return, [[a00, a01], [a10, a11]]}
    catch
      {:return, val} -> val
    end
  end
  def matrix_pow(m, power) do
    try do
      if power < 0 do
        raise("power is negative")
      end
      result = [[1, 0], [0, 1]]
      base = m
      p = power
      while_fun_8 = fn while_fun_8, base, p, result ->
        if p > 0 do
          {result} = if rem(p, 2) == 1 do
            result = matrix_mul(result, base)
            {result}
          else
            {result}
          end
          base = matrix_mul(base, base)
          p = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(p, 2)))
          while_fun_8.(while_fun_8, base, p, result)
        else
          {base, p, result}
        end
      end
      {base, p, result} = try do
          while_fun_8.(while_fun_8, base, p, result)
        catch
          {:break, {base, p, result}} -> {base, p, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def fib_matrix(n) do
    try do
      if n < 0 do
        raise("n is negative")
      end
      if n == 0 do
        throw {:return, 0}
      end
      m = [[1, 1], [1, 0]]
      res = matrix_pow(m, n - 1)
      throw {:return, Enum.at(Enum.at(res, 0, []), 0, 0)}
    catch
      {:return, val} -> val
    end
  end
  def run_tests() do
    try do
      expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
      it = fib_iterative(10)
      rec = fib_recursive(10)
      cache = fib_recursive_cached(10)
      memo = fib_memoization(10)
      bin = fib_binet(10)
      m = fib_matrix(10)
      if it != expected do
        raise("iterative failed")
      end
      if rec != expected do
        raise("recursive failed")
      end
      if cache != expected do
        raise("cached failed")
      end
      if memo != expected do
        raise("memoization failed")
      end
      if bin != expected do
        raise("binet failed")
      end
      if m != 55 do
        raise("matrix failed")
      end
      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:fib_cache_global, %{})
  Process.put(:fib_memo_cache, %{0 => 0, 1 => 1, 2 => 1})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(run_tests()))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
