# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          t = rem(x, y)
          x = y
          y = t
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      if x < 0 do
        throw {:return, -x}
      end
      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def proper_fractions(den) do
    try do
      if den < 0 do
        raise("The Denominator Cannot be less than 0")
      end
      res = []
      n = 1
      while_fun_2 = fn while_fun_2, n, res ->
        if n < den do
          {res} = if gcd(n, den) == 1 do
            res = (res ++ [((Kernel.to_string(n) <> "/") <> Kernel.to_string(den))])
            {res}
          else
            {res}
          end
          n = n + 1
          while_fun_2.(while_fun_2, n, res)
        else
          {n, res}
        end
      end
      {n, res} = try do
          while_fun_2.(while_fun_2, n, res)
        catch
          {:break, {n, res}} -> {n, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def test_proper_fractions() do
    try do
      a = proper_fractions(10)
      if a != ["1/10", "3/10", "7/10", "9/10"] do
        raise("test 10 failed")
      end
      b = proper_fractions(5)
      if b != ["1/5", "2/5", "3/5", "4/5"] do
        raise("test 5 failed")
      end
      c = proper_fractions(0)
      if c != [] do
        raise("test 0 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_proper_fractions()
      IO.puts(Kernel.inspect(proper_fractions(10)))
      IO.puts(Kernel.inspect(proper_fractions(5)))
      IO.puts(Kernel.inspect(proper_fractions(0)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
