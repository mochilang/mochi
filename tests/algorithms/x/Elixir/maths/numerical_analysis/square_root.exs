# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def fx(x, a) do
    try do
      throw {:return, x * x - a}
    catch
      {:return, val} -> val
    end
  end
  def fx_derivative(x) do
    try do
      throw {:return, 2.0 * x}
    catch
      {:return, val} -> val
    end
  end
  def get_initial_point(a) do
    try do
      start = 2.0
      while_fun = fn while_fun, start ->
        if start <= a do
          start = start * start
          while_fun.(while_fun, start)
        else
          start
        end
      end
      start = try do
          while_fun.(while_fun, start)
        catch
          {:break, {start}} -> start
        end

      throw {:return, start}
    catch
      {:return, val} -> val
    end
  end
  def abs_float(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def square_root_iterative(a, max_iter, tolerance) do
    try do
      if a < 0.0 do
        raise("math domain error")
      end
      value = get_initial_point(a)
      i = 0
      while_fun_2 = fn while_fun_2, i, value ->
        if i < max_iter do
          prev_value = value
          value = value - fx(value, a) / fx_derivative(value)
          if abs_float(prev_value - value) < tolerance do
            throw {:return, value}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun_2.(while_fun_2, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:r1, square_root_iterative(4.0, 9999, 0.00000000000001))
    IO.puts(Kernel.to_string(Process.get(:r1)))
    Process.put(:r2, square_root_iterative(3.2, 9999, 0.00000000000001))
    IO.puts(Kernel.to_string(Process.get(:r2)))
    Process.put(:r3, square_root_iterative(140.0, 9999, 0.00000000000001))
    IO.puts(Kernel.to_string(Process.get(:r3)))
  end
end
Main.main()
