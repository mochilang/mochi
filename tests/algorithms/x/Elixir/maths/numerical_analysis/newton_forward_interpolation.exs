# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ucal(u, p) do
    try do
      temp = u
      i = 1
      while_fun = fn while_fun, i, temp ->
        if i < p do
          temp = temp * (u - (:erlang.float(i)))
          i = i + 1
          while_fun.(while_fun, i, temp)
        else
          {i, temp}
        end
      end
      {i, temp} = try do
          while_fun.(while_fun, i, temp)
        catch
          {:break, {i, temp}} -> {i, temp}
        end

      throw {:return, temp}
    catch
      {:return, val} -> val
    end
  end
  def factorial(n) do
    try do
      result = 1.0
      i = 2
      while_fun_2 = fn while_fun_2, i, result ->
        if i <= n do
          result = result * (:erlang.float(i))
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def newton_forward_interpolation(x, y0, value) do
    try do
      n = _len(x)
      y = []
      i = 0
      while_fun_3 = fn while_fun_3, i, y ->
        if i < n do
          row = []
          j = 0
          while_fun_4 = fn while_fun_4, j, row ->
            if j < n do
              row = (row ++ [0.0])
              j = j + 1
              while_fun_4.(while_fun_4, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_4.(while_fun_4, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          y = (y ++ [row])
          i = i + 1
          while_fun_3.(while_fun_3, i, y)
        else
          {i, y}
        end
      end
      {i, y} = try do
          while_fun_3.(while_fun_3, i, y)
        catch
          {:break, {i, y}} -> {i, y}
        end

      i = 0
      while_fun_5 = fn while_fun_5, i, y ->
        if i < n do
          y = List.replace_at(y, i, List.replace_at(Enum.at(y, i), 0, Enum.at(y0, i)))
          i = i + 1
          while_fun_5.(while_fun_5, i, y)
        else
          {i, y}
        end
      end
      {i, y} = try do
          while_fun_5.(while_fun_5, i, y)
        catch
          {:break, {i, y}} -> {i, y}
        end

      i1 = 1
      while_fun_6 = fn while_fun_6, i1, y ->
        if i1 < n do
          j1 = 0
          while_fun_7 = fn while_fun_7, j1, y ->
            if j1 < n - i1 do
              y = List.replace_at(y, j1, List.replace_at(Enum.at(y, j1), i1, Enum.at(Enum.at(y, j1 + 1), i1 - 1) - Enum.at(Enum.at(y, j1), i1 - 1)))
              j1 = j1 + 1
              while_fun_7.(while_fun_7, j1, y)
            else
              {j1, y}
            end
          end
          {j1, y} = try do
              while_fun_7.(while_fun_7, j1, y)
            catch
              {:break, {j1, y}} -> {j1, y}
            end

          i1 = i1 + 1
          while_fun_6.(while_fun_6, i1, y)
        else
          {i1, y}
        end
      end
      {i1, y} = try do
          while_fun_6.(while_fun_6, i1, y)
        catch
          {:break, {i1, y}} -> {i1, y}
        end

      u = (value - Enum.at(x, 0)) / (Enum.at(x, 1) - Enum.at(x, 0))
      sum = Enum.at(Enum.at(y, 0), 0)
      k = 1
      while_fun_8 = fn while_fun_8, k, sum ->
        if k < n do
          sum = sum + (ucal(u, k) * Enum.at(Enum.at(y, 0), k)) / factorial(k)
          k = k + 1
          while_fun_8.(while_fun_8, k, sum)
        else
          {k, sum}
        end
      end
      {k, sum} = try do
          while_fun_8.(while_fun_8, k, sum)
        catch
          {:break, {k, sum}} -> {k, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:x_points, [0.0, 1.0, 2.0, 3.0])
  Process.put(:y_points, [0.0, 1.0, 8.0, 27.0])
  def main() do
    IO.puts(Kernel.inspect(newton_forward_interpolation(Process.get(:x_points), Process.get(:y_points), 1.5)))
  end
end
Main.main()
