# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def runge_kutta_fehlberg_45(func, x_initial, y_initial, step_size, x_final) do
    try do
      if x_initial >= x_final do
        raise("The final value of x must be greater than initial value of x.")
      end
      if step_size <= 0.0 do
        raise("Step size must be positive.")
      end
      n = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(((x_final - x_initial) / step_size))
      ys = []
      x = x_initial
      y = y_initial
      ys = (ys ++ [y])
      i = 0
      while_fun = fn while_fun, i, x, y, ys ->
        if i < n do
          k1 = step_size * func.(x, y)
          k2 = step_size * func.(x + step_size / 4.0, y + k1 / 4.0)
          k3 = step_size * func.(x + (3.0 / 8.0) * step_size, y + (3.0 / 32.0) * k1 + (9.0 / 32.0) * k2)
          k4 = step_size * func.(x + (12.0 / 13.0) * step_size, y + (1932.0 / 2197.0) * k1 - (7200.0 / 2197.0) * k2 + (7296.0 / 2197.0) * k3)
          k5 = step_size * func.(x + step_size, y + (439.0 / 216.0) * k1 - 8.0 * k2 + (3680.0 / 513.0) * k3 - (845.0 / 4104.0) * k4)
          k6 = step_size * func.(x + step_size / 2.0, y - (8.0 / 27.0) * k1 + 2.0 * k2 - (3544.0 / 2565.0) * k3 + (1859.0 / 4104.0) * k4 - (11.0 / 40.0) * k5)
          y = y + (16.0 / 135.0) * k1 + (6656.0 / 12825.0) * k3 + (28561.0 / 56430.0) * k4 - (9.0 / 50.0) * k5 + (2.0 / 55.0) * k6
          x = x + step_size
          ys = (ys ++ [y])
          i = i + 1
          while_fun.(while_fun, i, x, y, ys)
        else
          {i, x, y, ys}
        end
      end
      {i, x, y, ys} = try do
          while_fun.(while_fun, i, x, y, ys)
        catch
          {:break, {i, x, y, ys}} -> {i, x, y, ys}
        end

      throw {:return, ys}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      f1 = fn x, y ->
  throw {:return, 1.0 + y * y}
end
      y1 = runge_kutta_fehlberg_45(f1, 0.0, 0.0, 0.2, 1.0)
      IO.puts(Enum.at(y1, 1))
      f2 = fn x, y ->
  throw {:return, x}
end
      y2 = runge_kutta_fehlberg_45(f2, -1.0, 0.0, 0.2, 0.0)
      IO.puts(Enum.at(y2, 1))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
