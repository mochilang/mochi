# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def abs_float(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def intersection(function, x0, x1) do
    try do
      x_n = x0
      x_n1 = x1
      while_fun = fn while_fun, x_n, x_n1 ->
        if true do
          if x_n == x_n1 || function.(x_n1) == function.(x_n) do
            raise("float division by zero, could not find root")
          end
          numerator = function.(x_n1)
          denominator = (function.(x_n1) - function.(x_n)) / (x_n1 - x_n)
          x_n2 = x_n1 - numerator / denominator
          if abs_float(x_n2 - x_n1) < 0.00001 do
            throw {:return, x_n2}
          end
          x_n = x_n1
          x_n1 = x_n2
          while_fun.(while_fun, x_n, x_n1)
        else
          {x_n, x_n1}
        end
      end
      {x_n, x_n1} = try do
          while_fun.(while_fun, x_n, x_n1)
        catch
          {:break, {x_n, x_n1}} -> {x_n, x_n1}
        end

    catch
      {:return, val} -> val
    end
  end
  def f(x) do
    try do
      throw {:return, x * x * x - 2.0 * x - 5.0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(intersection(&f/1, 3.0, 3.5)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
