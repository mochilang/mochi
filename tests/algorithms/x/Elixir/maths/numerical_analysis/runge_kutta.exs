# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def runge_kutta(f, y0, x0, h, x_end) do
    try do
      span = (x_end - x0) / h
      n = Kernel.trunc(span)
      {n} = if :erlang.float(n) < span do
        n = n + 1
        {n}
      else
        {n}
      end
      y = []
      i = 0
      while_fun = fn while_fun, i, y ->
        if i < n + 1 do
          y = (y ++ [0.0])
          i = i + 1
          while_fun.(while_fun, i, y)
        else
          {i, y}
        end
      end
      {i, y} = try do
          while_fun.(while_fun, i, y)
        catch
          {:break, {i, y}} -> {i, y}
        end

      y = List.replace_at(y, 0, y0)
      x = x0
      k = 0
      while_fun_2 = fn while_fun_2, k, x, y ->
        if k < n do
          k1 = f.(x, Enum.at(y, k))
          k2 = f.(x + 0.5 * h, Enum.at(y, k) + 0.5 * h * k1)
          k3 = f.(x + 0.5 * h, Enum.at(y, k) + 0.5 * h * k2)
          k4 = f.(x + h, Enum.at(y, k) + h * k3)
          y = List.replace_at(y, k + 1, Enum.at(y, k) + (1.0 / 6.0) * h * (k1 + 2.0 * k2 + 2.0 * k3 + k4))
          x = x + h
          k = k + 1
          while_fun_2.(while_fun_2, k, x, y)
        else
          {k, x, y}
        end
      end
      {k, x, y} = try do
          while_fun_2.(while_fun_2, k, x, y)
        catch
          {:break, {k, x, y}} -> {k, x, y}
        end

      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def test_runge_kutta() do
    try do
      f = fn x, y ->
  throw {:return, y}
end
      result = runge_kutta(f, 1.0, 0.0, 0.01, 5.0)
      last = Enum.at(result, _len(result) - 1)
      expected = 148.41315904125113
      diff = last - expected
      {diff} = if diff < 0.0 do
        diff = -diff
        {diff}
      else
        {diff}
      end
      if diff > 0.000001 do
        raise("runge_kutta failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_runge_kutta()
      f = fn x, y ->
  throw {:return, y}
end
      r = runge_kutta(f, 1.0, 0.0, 0.1, 1.0)
      IO.puts(Kernel.to_string(Enum.at(r, _len(r) - 1)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
