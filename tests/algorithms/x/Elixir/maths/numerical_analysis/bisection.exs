# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def abs_float(x) do
    try do
      if x < 0.0 do
        throw {:return, -x}
      else
        throw {:return, x}
      end
    catch
      {:return, val} -> val
    end
  end
  def bisection(f, a, b) do
    try do
      start = a
      end_ = b
      if f(a) == 0.0 do
        throw {:return, a}
      end
      if f(b) == 0.0 do
        throw {:return, b}
      end
      if f(a) * f(b) > 0.0 do
        raise("could not find root in given interval.")
      end
      mid = start + (end_ - start) / 2.0
      while_fun = fn while_fun, end_, mid, start ->
        if abs_float(start - mid) > 0.0000001 do
          fmid = f(mid)
          if fmid == 0.0 do
            throw {:return, mid}
          end
          {end_, start} = if fmid * f(start) < 0.0 do
            end_ = mid
            {end_, start}
          else
            start = mid
            {end_, start}
          end
          mid = start + (end_ - start) / 2.0
          while_fun.(while_fun, end_, mid, start)
        else
          {end_, mid, start}
        end
      end
      {end_, mid, start} = try do
          while_fun.(while_fun, end_, mid, start)
        catch
          {:break, {end_, mid, start}} -> {end_, mid, start}
        end

      throw {:return, mid}
    catch
      {:return, val} -> val
    end
  end
  def f(x) do
    try do
      throw {:return, x * x * x - 2.0 * x - 5.0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(bisection(&f/1, 1.0, 1000.0)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
