# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def f(x) do
    try do
      throw {:return, (x - 0.0) * (x - 0.0)}
    catch
      {:return, val} -> val
    end
  end
  def make_points(a, b, h) do
    try do
      points = []
      x = a + h
      while_fun = fn while_fun, points, x ->
        if x < (b - h) do
          points = (points ++ [x])
          x = x + h
          while_fun.(while_fun, points, x)
        else
          {points, x}
        end
      end
      {points, x} = try do
          while_fun.(while_fun, points, x)
        catch
          {:break, {points, x}} -> {points, x}
        end

      throw {:return, points}
    catch
      {:return, val} -> val
    end
  end
  def simpson_rule(boundary, steps) do
    try do
      if steps <= 0 do
        raise("Number of steps must be greater than zero")
      end
      a = Enum.at(boundary, 0)
      b = Enum.at(boundary, 1)
      h = (b - a) / (:erlang.float(steps))
      pts = make_points(a, b, h)
      y = (h / 3.0) * f(a)
      cnt = 2
      i = 0
      while_fun_2 = fn while_fun_2, cnt, i, y ->
        if i < _len(pts) do
          coeff = 4.0 - 2.0 * (:erlang.float((rem(cnt, 2))))
          y = y + (h / 3.0) * coeff * f(Enum.at(pts, i))
          cnt = cnt + 1
          i = i + 1
          while_fun_2.(while_fun_2, cnt, i, y)
        else
          {cnt, i, y}
        end
      end
      {cnt, i, y} = try do
          while_fun_2.(while_fun_2, cnt, i, y)
        catch
          {:break, {cnt, i, y}} -> {cnt, i, y}
        end

      y = y + (h / 3.0) * f(b)
      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:result, simpson_rule([0.0, 1.0], 10))
    IO.puts(Kernel.to_string(Process.get(:result)))
  end
end
Main.main()
