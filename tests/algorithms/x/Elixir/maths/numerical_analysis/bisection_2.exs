# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def equation(x) do
    try do
      throw {:return, 10.0 - x * x}
    catch
      {:return, val} -> val
    end
  end
  def bisection(a, b) do
    try do
      if equation(a) * equation(b) >= 0.0 do
        raise("Wrong space!")
      end
      left = a
      right = b
      c = left
      while_fun = fn while_fun, c, left, right ->
        if (right - left) >= 0.01 do
          c = (left + right) / 2.0
          if equation(c) == 0.0 do
            throw {:break, {c, left, right}}
          end
          {left, right} = if equation(c) * equation(left) < 0.0 do
            right = c
            {left, right}
          else
            left = c
            {left, right}
          end
          while_fun.(while_fun, c, left, right)
        else
          {c, left, right}
        end
      end
      {c, left, right} = try do
          while_fun.(while_fun, c, left, right)
        catch
          {:break, {c, left, right}} -> {c, left, right}
        end

      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(bisection(-2.0, 5.0)))
    IO.puts(Kernel.inspect(bisection(0.0, 6.0)))
  end
end
Main.main()
