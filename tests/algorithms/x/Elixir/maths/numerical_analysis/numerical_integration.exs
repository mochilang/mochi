# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def abs_float(x) do
    try do
      if x < 0.0 do
        throw {:return, -x}
      else
        throw {:return, x}
      end
    catch
      {:return, val} -> val
    end
  end
  def trapezoidal_area(f, x_start, x_end, steps) do
    try do
      step = (x_end - x_start) / (:erlang.float(steps))
      x1 = x_start
      fx1 = f(x_start)
      area = 0.0
      i = 0
      while_fun = fn while_fun, area, fx1, x1 ->
        if i < steps do
          x2 = x1 + step
          fx2 = f(x2)
          area = area + abs_float(fx2 + fx1) * step / 2.0
          x1 = x2
          fx1 = fx2
          i = i + 1
          while_fun.(while_fun, area, fx1, x1)
        else
          {area, fx1, x1}
        end
      end
      {area, fx1, x1} = try do
          while_fun.(while_fun, area, fx1, x1)
        catch
          {:break, {area, fx1, x1}} -> {area, fx1, x1}
        end

      throw {:return, area}
    catch
      {:return, val} -> val
    end
  end
  def f(x) do
    try do
      throw {:return, x * x * x}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:i, 10)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts("f(x) = x^3")
    IO.puts("The area between the curve, x = -10, x = 10 and the x axis is:")
    while_fun_2 = fn while_fun_2 ->
      if Process.get(:i) <= 100000 do
        area = trapezoidal_area(&f/1, -5.0, 5.0, Process.get(:i))
        IO.puts(((("with " <> Kernel.to_string(Process.get(:i))) <> " steps: ") <> Kernel.to_string(area)))
        Process.put(:i, Process.get(:i) * 10)
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
