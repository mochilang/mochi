# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def ln(x) do
    try do
      t = (x - 1.0) / (x + 1.0)
      term = t
      sum = 0.0
      k = 1
      while_fun = fn while_fun, k, sum, term ->
        if k <= 99 do
          sum = sum + term / (:erlang.float(k))
          term = term * t * t
          k = k + 2
          while_fun.(while_fun, k, sum, term)
        else
          {k, sum, term}
        end
      end
      {k, sum, term} = try do
          while_fun.(while_fun, k, sum, term)
        catch
          {:break, {k, sum, term}} -> {k, sum, term}
        end

      throw {:return, 2.0 * sum}
    catch
      {:return, val} -> val
    end
  end
  def log10(x) do
    try do
      throw {:return, ln(x) / ln(10.0)}
    catch
      {:return, val} -> val
    end
  end
  def absf(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def res(x, y) do
    try do
      if x == 0 do
        throw {:return, 0.0}
      end
      if y == 0 do
        throw {:return, 1.0}
      end
      if x < 0 do
        raise("math domain error")
      end
      throw {:return, (:erlang.float(y)) * log10(:erlang.float(x))}
    catch
      {:return, val} -> val
    end
  end
  def test_res() do
    try do
      if absf(res(5, 7) - 4.892790030352132) > 0.0000001 do
        raise("res(5,7) failed")
      end
      if res(0, 5) != 0.0 do
        raise("res(0,5) failed")
      end
      if res(3, 0) != 1.0 do
        raise("res(3,0) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def compare(x1, y1, x2, y2) do
    try do
      r1 = res(x1, y1)
      r2 = res(x2, y2)
      if r1 > r2 do
        throw {:return, ((("Largest number is " <> Kernel.to_string(x1)) <> " ^ ") <> Kernel.to_string(y1))}
      end
      if r2 > r1 do
        throw {:return, ((("Largest number is " <> Kernel.to_string(x2)) <> " ^ ") <> Kernel.to_string(y2))}
      end
      throw {:return, "Both are equal"}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    test_res()
    IO.puts(Kernel.inspect(compare(5, 7, 4, 8)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
