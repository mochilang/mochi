# Code generated by Mochi transpiler 2025-08-08 20:44 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def mod_pow(base, exponent, modulus) do
    try do
      result = 1
      b = rem(base, modulus)
      e = exponent
      while_fun = fn while_fun, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), modulus)
            {result}
          else
            {result}
          end
          b = rem((b * b), modulus)
          e = div(e, 2)
          while_fun.(while_fun, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun.(while_fun, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def pow_float(base, exponent) do
    try do
      exp = exponent
      result = 1.0
      {exp} = if exp < 0 do
        exp = -exp
        {exp}
      else
        {exp}
      end
      i = 0
      while_fun_2 = fn while_fun_2, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun_2.(while_fun_2, result)
        else
          result
        end
      end
      result = try do
          while_fun_2.(while_fun_2, result)
        catch
          {:break, {result}} -> result
        end

      {result} = if exponent < 0 do
        result = 1.0 / result
        {result}
      else
        {result}
      end
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def hex_digit(n) do
    try do
      if n < 10 do
        throw {:return, Kernel.to_string(n)}
      end
      letters = ["a", "b", "c", "d", "e", "f"]
      throw {:return, Enum.at(letters, n - 10)}
    catch
      {:return, val} -> val
    end
  end
  def floor_float(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      if (:erlang.float(i)) > x do
        i = i - 1
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def subsum(digit_pos_to_extract, denominator_addend, precision) do
    try do
      total = 0.0
      sum_index = 0
      while_fun_3 = fn while_fun_3, sum_index, total ->
        if sum_index < digit_pos_to_extract + precision do
          denominator = 8 * sum_index + denominator_addend
          {total} = if sum_index < digit_pos_to_extract do
            exponent = digit_pos_to_extract - 1 - sum_index
            exponential_term = mod_pow(16, exponent, denominator)
            total = total + (:erlang.float(exponential_term)) / (:erlang.float(denominator))
            {total}
          else
            exponent = digit_pos_to_extract - 1 - sum_index
            exponential_term = pow_float(16.0, exponent)
            total = total + exponential_term / (:erlang.float(denominator))
            {total}
          end
          sum_index = sum_index + 1
          while_fun_3.(while_fun_3, sum_index, total)
        else
          {sum_index, total}
        end
      end
      {sum_index, total} = try do
          while_fun_3.(while_fun_3, sum_index, total)
        catch
          {:break, {sum_index, total}} -> {sum_index, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def bailey_borwein_plouffe(digit_position, precision) do
    try do
      if digit_position <= 0 do
        raise("Digit position must be a positive integer")
      end
      if precision < 0 do
        raise("Precision must be a nonnegative integer")
      end
      sum_result = 4.0 * subsum(digit_position, 1, precision) - 2.0 * subsum(digit_position, 4, precision) - 1.0 * subsum(digit_position, 5, precision) - 1.0 * subsum(digit_position, 6, precision)
      fraction = sum_result - floor_float(sum_result)
      digit = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((fraction * 16.0))
      hd = hex_digit(digit)
      throw {:return, hd}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:digits, "")
  Process.put(:i, 1)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    while_fun_4 = fn while_fun_4 ->
      if Process.get(:i) <= 10 do
        Process.put(:digits, (Process.get(:digits) <> bailey_borwein_plouffe(Process.get(:i), 1000)))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_4.(while_fun_4)
      else
        nil
      end
    end
    try do
      while_fun_4.(while_fun_4)
    catch
      :break -> nil
    end

    IO.puts(Process.get(:digits))
    IO.puts(Kernel.inspect(bailey_borwein_plouffe(5, 10000)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
