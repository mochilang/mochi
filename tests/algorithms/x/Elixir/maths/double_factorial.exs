# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def double_factorial_recursive(n) do
    try do
      if n < 0 do
        raise("double_factorial_recursive() not defined for negative values")
      end
      if n <= 1 do
        throw {:return, 1}
      end
      throw {:return, n * double_factorial_recursive(n - 2)}
    catch
      {:return, val} -> val
    end
  end
  def double_factorial_iterative(n) do
    try do
      if n < 0 do
        raise("double_factorial_iterative() not defined for negative values")
      end
      result = 1
      i = n
      while_fun = fn while_fun, i, result ->
        if i > 0 do
          result = result * i
          i = i - 2
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def test_double_factorial() do
    try do
      if double_factorial_recursive(0) != 1 do
        raise("0!! recursive failed")
      end
      if double_factorial_iterative(0) != 1 do
        raise("0!! iterative failed")
      end
      if double_factorial_recursive(1) != 1 do
        raise("1!! recursive failed")
      end
      if double_factorial_iterative(1) != 1 do
        raise("1!! iterative failed")
      end
      if double_factorial_recursive(5) != 15 do
        raise("5!! recursive failed")
      end
      if double_factorial_iterative(5) != 15 do
        raise("5!! iterative failed")
      end
      if double_factorial_recursive(6) != 48 do
        raise("6!! recursive failed")
      end
      if double_factorial_iterative(6) != 48 do
        raise("6!! iterative failed")
      end
      n = 0
      while_fun_2 = fn while_fun_2, n ->
        if n <= 10 do
          if double_factorial_recursive(n) != double_factorial_iterative(n) do
            raise("double factorial mismatch")
          end
          n = n + 1
          while_fun_2.(while_fun_2, n)
        else
          n
        end
      end
      n = try do
          while_fun_2.(while_fun_2, n)
        catch
          {:break, {n}} -> n
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_double_factorial()
      IO.puts(Kernel.inspect(double_factorial_iterative(10)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
