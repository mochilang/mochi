# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def radians(degree) do
    try do
      throw {:return, degree / (180.0 / Process.get(:pi))}
    catch
      {:return, val} -> val
    end
  end
  def abs_float(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def almost_equal(a, b) do
    try do
      throw {:return, abs_float(a - b) <= 0.00000001}
    catch
      {:return, val} -> val
    end
  end
  def test_radians() do
    try do
      if !almost_equal(radians(180.0), Process.get(:pi)) do
        raise("radians 180 failed")
      end
      if !almost_equal(radians(92.0), 1.6057029118347832) do
        raise("radians 92 failed")
      end
      if !almost_equal(radians(274.0), 4.782202150464463) do
        raise("radians 274 failed")
      end
      if !almost_equal(radians(109.82), 1.9167205845401725) do
        raise("radians 109.82 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_radians()
      IO.puts(Kernel.inspect(radians(180.0)))
      IO.puts(Kernel.inspect(radians(92.0)))
      IO.puts(Kernel.inspect(radians(274.0)))
      IO.puts(Kernel.inspect(radians(109.82)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
end
Main.main()
