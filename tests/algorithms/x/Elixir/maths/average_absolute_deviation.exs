# Code generated by Mochi transpiler 2025-08-08 20:44 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def abs_float(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def average_absolute_deviation(nums) do
    try do
      if _len(nums) == 0 do
        raise("List is empty")
      end
      sum = 0
      {sum} = Enum.reduce(nums, {sum}, fn x, {sum} ->
        sum = sum + x
        {sum}
      end)
      n = :erlang.float(_len(nums))
      mean = (:erlang.float(sum)) / n
      dev_sum = 0.0
      {dev_sum} = Enum.reduce(nums, {dev_sum}, fn x, {dev_sum} ->
        dev_sum = dev_sum + abs_float((:erlang.float(x)) - mean)
        {dev_sum}
      end)
      throw {:return, dev_sum / n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(average_absolute_deviation([0])))
    IO.puts(Kernel.inspect(average_absolute_deviation([4, 1, 3, 2])))
    IO.puts(Kernel.inspect(average_absolute_deviation([2, 70, 6, 50, 20, 8, 4, 0])))
    IO.puts(Kernel.inspect(average_absolute_deviation([-20, 0, 30, 15])))
  end
end
Main.main()
