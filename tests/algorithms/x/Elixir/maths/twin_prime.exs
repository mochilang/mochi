# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def is_prime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      if rem(n, 2) == 0 do
        throw {:return, n == 2}
      end
      i = 3
      while_fun = fn while_fun, i ->
        if i * i <= n do
          if rem(n, i) == 0 do
            throw {:return, false}
          end
          i = i + 2
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def twin_prime(number) do
    try do
      throw {:return, ((if is_prime(number) && is_prime(number + 2), do: number + 2, else: -1))}
    catch
      {:return, val} -> val
    end
  end
  def test_twin_prime() do
    try do
      if twin_prime(3) != 5 do
        raise("twin_prime(3) failed")
      end
      if twin_prime(4) != (-1) do
        raise("twin_prime(4) failed")
      end
      if twin_prime(5) != 7 do
        raise("twin_prime(5) failed")
      end
      if twin_prime(17) != 19 do
        raise("twin_prime(17) failed")
      end
      if twin_prime(0) != (-1) do
        raise("twin_prime(0) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_twin_prime()
      IO.puts(Kernel.inspect(twin_prime(3)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
