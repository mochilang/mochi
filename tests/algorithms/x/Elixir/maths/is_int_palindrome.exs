# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def is_int_palindrome(num) do
    try do
      if num < 0 do
        throw {:return, false}
      end
      n = num
      rev = 0
      while_fun = fn while_fun, n, rev ->
        if n > 0 do
          rev = rev * 10 + (rem(n, 10))
          n = div(n, 10)
          while_fun.(while_fun, n, rev)
        else
          {n, rev}
        end
      end
      {n, rev} = try do
          while_fun.(while_fun, n, rev)
        catch
          {:break, {n, rev}} -> {n, rev}
        end

      throw {:return, rev == num}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(is_int_palindrome(-121)))
      IO.puts(Kernel.inspect(is_int_palindrome(0)))
      IO.puts(Kernel.inspect(is_int_palindrome(10)))
      IO.puts(Kernel.inspect(is_int_palindrome(11)))
      IO.puts(Kernel.inspect(is_int_palindrome(101)))
      IO.puts(Kernel.inspect(is_int_palindrome(120)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
