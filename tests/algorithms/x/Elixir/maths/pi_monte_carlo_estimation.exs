# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def next_seed(x) do
    try do
      throw {:return, rem((x * 1103515245 + 12345), 2147483648)}
    catch
      {:return, val} -> val
    end
  end
  def rand_unit() do
    try do
      Process.put(:seed, next_seed(Process.get(:seed)))
      throw {:return, (:erlang.float(Process.get(:seed))) / 2147483648.0}
    catch
      {:return, val} -> val
    end
  end
  def is_in_unit_circle(p) do
    try do
      throw {:return, p.x * p.x + p.y * p.y <= 1.0}
    catch
      {:return, val} -> val
    end
  end
  def random_unit_square() do
    try do
      throw {:return, %{x: rand_unit(), y: rand_unit()}}
    catch
      {:return, val} -> val
    end
  end
  def estimate_pi(simulations) do
    try do
      if simulations < 1 do
        raise("At least one simulation is necessary to estimate PI.")
      end
      inside = 0
      i = 0
      while_fun = fn while_fun, i, inside ->
        if i < simulations do
          p = random_unit_square()
          {inside} = if is_in_unit_circle(p) do
            inside = inside + 1
            {inside}
          else
            {inside}
          end
          i = i + 1
          while_fun.(while_fun, i, inside)
        else
          {i, inside}
        end
      end
      {i, inside} = try do
          while_fun.(while_fun, i, inside)
        catch
          {:break, {i, inside}} -> {i, inside}
        end

      throw {:return, 4.0 * (:erlang.float(inside)) / (:erlang.float(simulations))}
    catch
      {:return, val} -> val
    end
  end
  def abs_float(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = 10000
      my_pi = estimate_pi(n)
      error = abs_float(my_pi - Process.get(:pi))
      IO.puts(((("An estimate of PI is " <> Kernel.to_string(my_pi)) <> " with an error of ") <> Kernel.to_string(error)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:seed, 1)
end
Main.main()
