# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def normalize_index(index, n) do
    try do
      throw {:return, ((if index < 0, do: n + index, else: index))}
    catch
      {:return, val} -> val
    end
  end
  def find_max_iterative(nums) do
    try do
      if _len(nums) == 0 do
        raise("find_max_iterative() arg is an empty sequence")
      end
      max_num = Enum.at(nums, 0, [])
      i = 0
      while_fun = fn while_fun, i, max_num ->
        if i < _len(nums) do
          x = Enum.at(nums, i, [])
          {max_num} = if x > max_num do
            max_num = x
            {max_num}
          else
            {max_num}
          end
          i = i + 1
          while_fun.(while_fun, i, max_num)
        else
          {i, max_num}
        end
      end
      {i, max_num} = try do
          while_fun.(while_fun, i, max_num)
        catch
          {:break, {i, max_num}} -> {i, max_num}
        end

      throw {:return, max_num}
    catch
      {:return, val} -> val
    end
  end
  def find_max_recursive(nums, left, right) do
    try do
      n = _len(nums)
      if n == 0 do
        raise("find_max_recursive() arg is an empty sequence")
      end
      if left >= n || left < (0 - n) || right >= n || right < (0 - n) do
        raise("list index out of range")
      end
      l = normalize_index(left, n)
      r = normalize_index(right, n)
      if l == r do
        throw {:return, Enum.at(nums, l, [])}
      end
      mid = div((l + r), 2)
      left_max = find_max_recursive(nums, l, mid)
      right_max = find_max_recursive(nums, mid + 1, r)
      if left_max >= right_max do
        throw {:return, left_max}
      end
      throw {:return, right_max}
    catch
      {:return, val} -> val
    end
  end
  def test_find_max() do
    try do
      arr = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0]
      if find_max_iterative(arr) != 94.0 do
        raise("find_max_iterative failed")
      end
      if find_max_recursive(arr, 0, _len(arr) - 1) != 94.0 do
        raise("find_max_recursive failed")
      end
      if find_max_recursive(arr, -_len(arr), -1) != 94.0 do
        raise("negative index handling failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_find_max()
      nums = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0]
      IO.puts(Kernel.inspect(find_max_iterative(nums)))
      IO.puts(Kernel.inspect(find_max_recursive(nums, 0, _len(nums) - 1)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
