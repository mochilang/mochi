# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def abs_(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def factorial(n) do
    try do
      if n < 0 do
        raise("factorial is undefined for negative numbers")
      end
      result = 1
      i = 2
      while_fun = fn while_fun, i, result ->
        if i <= n do
          result = result * i
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def pow_float(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def binomial_distribution(successes, trials, prob) do
    try do
      if successes > trials do
        raise("successes must be lower or equal to trials")
      end
      if trials < 0 || successes < 0 do
        raise("the function is defined for non-negative integers")
      end
      if !(0.0 < prob && prob < 1.0) do
        raise("prob has to be in range of 1 - 0")
      end
      probability = pow_float(prob, successes) * pow_float(1.0 - prob, trials - successes)
      numerator = :erlang.float(factorial(trials))
      denominator = :erlang.float((factorial(successes) * factorial(trials - successes)))
      coefficient = numerator / denominator
      throw {:return, probability * coefficient}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
