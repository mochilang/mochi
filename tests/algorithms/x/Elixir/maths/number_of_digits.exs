# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def abs_int(n) do
    try do
      throw {:return, ((if n < 0, do: -n, else: n))}
    catch
      {:return, val} -> val
    end
  end
  def num_digits(n) do
    try do
      x = abs_int(n)
      digits = 1
      while_fun = fn while_fun, digits, x ->
        if x >= 10 do
          x = div(x, 10)
          digits = digits + 1
          while_fun.(while_fun, digits, x)
        else
          {digits, x}
        end
      end
      {digits, x} = try do
          while_fun.(while_fun, digits, x)
        catch
          {:break, {digits, x}} -> {digits, x}
        end

      throw {:return, digits}
    catch
      {:return, val} -> val
    end
  end
  def num_digits_fast(n) do
    try do
      x = abs_int(n)
      digits = 1
      power = 10
      while_fun_2 = fn while_fun_2, digits, power ->
        if x >= power do
          power = power * 10
          digits = digits + 1
          while_fun_2.(while_fun_2, digits, power)
        else
          {digits, power}
        end
      end
      {digits, power} = try do
          while_fun_2.(while_fun_2, digits, power)
        catch
          {:break, {digits, power}} -> {digits, power}
        end

      throw {:return, digits}
    catch
      {:return, val} -> val
    end
  end
  def num_digits_faster(n) do
    try do
      s = Kernel.inspect(abs_int(n))
      throw {:return, _len(s)}
    catch
      {:return, val} -> val
    end
  end
  def test_num_digits() do
    try do
      if num_digits(12345) != 5 do
        raise("num_digits 12345 failed")
      end
      if num_digits(123) != 3 do
        raise("num_digits 123 failed")
      end
      if num_digits(0) != 1 do
        raise("num_digits 0 failed")
      end
      if num_digits(-1) != 1 do
        raise("num_digits -1 failed")
      end
      if num_digits(-123456) != 6 do
        raise("num_digits -123456 failed")
      end
      if num_digits_fast(12345) != 5 do
        raise("num_digits_fast 12345 failed")
      end
      if num_digits_fast(123) != 3 do
        raise("num_digits_fast 123 failed")
      end
      if num_digits_fast(0) != 1 do
        raise("num_digits_fast 0 failed")
      end
      if num_digits_fast(-1) != 1 do
        raise("num_digits_fast -1 failed")
      end
      if num_digits_fast(-123456) != 6 do
        raise("num_digits_fast -123456 failed")
      end
      if num_digits_faster(12345) != 5 do
        raise("num_digits_faster 12345 failed")
      end
      if num_digits_faster(123) != 3 do
        raise("num_digits_faster 123 failed")
      end
      if num_digits_faster(0) != 1 do
        raise("num_digits_faster 0 failed")
      end
      if num_digits_faster(-1) != 1 do
        raise("num_digits_faster -1 failed")
      end
      if num_digits_faster(-123456) != 6 do
        raise("num_digits_faster -123456 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_num_digits()
      IO.puts(Kernel.inspect(num_digits(12345)))
      IO.puts(Kernel.inspect(num_digits_fast(12345)))
      IO.puts(Kernel.inspect(num_digits_faster(12345)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
