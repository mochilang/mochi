# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def abs_(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      i = if (:erlang.float(i)) > x do
        i = i - 1
        i
      else
        i
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def pow(x, n) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = result * x
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def factorial(n) do
    try do
      result = 1.0
      i = 2
      while_fun_2 = fn while_fun_2, i, result ->
        if i <= n do
          result = result * (:erlang.float(i))
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def radians(deg) do
    try do
      throw {:return, deg * Process.get(:pi) / 180.0}
    catch
      {:return, val} -> val
    end
  end
  def taylor_sin(angle_in_degrees, accuracy, rounded_values_count) do
    try do
      k = floor(angle_in_degrees / 360.0)
      angle = angle_in_degrees - (k * 360.0)
      angle_in_radians = radians(angle)
      result = angle_in_radians
      a = 3
      sign = -1.0
      i = 0
      while_fun_3 = fn while_fun_3, a, i, result, sign ->
        if i < accuracy do
          result = result + (sign * pow(angle_in_radians, a)) / factorial(a)
          sign = -sign
          a = a + 2
          i = i + 1
          while_fun_3.(while_fun_3, a, i, result, sign)
        else
          {a, i, result, sign}
        end
      end
      {a, i, result, sign} = try do
          while_fun_3.(while_fun_3, a, i, result, sign)
        catch
          {:break, {a, i, result, sign}} -> {a, i, result, sign}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def test_sin() do
    try do
      eps = 0.0000001
      if abs_(taylor_sin(0.0, 18, 10) - 0.0) > eps do
        raise("sin(0) failed")
      end
      if abs_(taylor_sin(90.0, 18, 10) - 1.0) > eps do
        raise("sin(90) failed")
      end
      if abs_(taylor_sin(180.0, 18, 10) - 0.0) > eps do
        raise("sin(180) failed")
      end
      if abs_(taylor_sin(270.0, 18, 10) - (-1.0)) > eps do
        raise("sin(270) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_sin()
      res = taylor_sin(64.0, 18, 10)
      IO.puts(res)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    Process.put(:pi, 3.141592653589793)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
