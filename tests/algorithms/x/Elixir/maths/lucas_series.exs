# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def recursive_lucas_number(n) do
    try do
      if n == 0 do
        throw {:return, 2}
      end
      if n == 1 do
        throw {:return, 1}
      end
      throw {:return, recursive_lucas_number(n - 1) + recursive_lucas_number(n - 2)}
    catch
      {:return, val} -> val
    end
  end
  def dynamic_lucas_number(n) do
    try do
      a = 2
      b = 1
      i = 0
      while_fun = fn while_fun, a, b, i ->
        if i < n do
          next = a + b
          a = b
          b = next
          i = i + 1
          while_fun.(while_fun, a, b, i)
        else
          {a, b, i}
        end
      end
      {a, b, i} = try do
          while_fun.(while_fun, a, b, i)
        catch
          {:break, {a, b, i}} -> {a, b, i}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(recursive_lucas_number(1)))
    IO.puts(Kernel.inspect(recursive_lucas_number(20)))
    IO.puts(Kernel.inspect(recursive_lucas_number(0)))
    IO.puts(Kernel.inspect(recursive_lucas_number(5)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(1)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(20)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(0)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(25)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
