# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def recursive_lucas_number(n) do
    try do
      if n == 0 do
        throw {:return, 2}
      end
      if n == 1 do
        throw {:return, 1}
      end
      throw {:return, recursive_lucas_number(n - 1) + recursive_lucas_number(n - 2)}
    catch
      {:return, val} -> val
    end
  end
  def dynamic_lucas_number(n) do
    try do
      a = 2
      b = 1
      i = 0
      while_fun = fn while_fun, a, b, i ->
        if i < n do
          next = a + b
          a = b
          b = next
          i = i + 1
          while_fun.(while_fun, a, b, i)
        else
          {a, b, i}
        end
      end
      {a, b, i} = try do
          while_fun.(while_fun, a, b, i)
        catch
          {:break, {a, b, i}} -> {a, b, i}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(recursive_lucas_number(1)))
    IO.puts(Kernel.inspect(recursive_lucas_number(20)))
    IO.puts(Kernel.inspect(recursive_lucas_number(0)))
    IO.puts(Kernel.inspect(recursive_lucas_number(5)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(1)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(20)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(0)))
    IO.puts(Kernel.inspect(dynamic_lucas_number(25)))
  end
end
Main.main()
