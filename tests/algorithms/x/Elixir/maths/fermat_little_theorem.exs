# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def binary_exponentiation(a, n, mod) do
    try do
      if n == 0 do
        throw {:return, 1}
      end
      if rem(n, 2) == 1 do
        throw {:return, rem((binary_exponentiation(a, n - 1, mod) * a), mod)}
      end
      b = binary_exponentiation(a, div(n, 2), mod)
      throw {:return, rem((b * b), mod)}
    catch
      {:return, val} -> val
    end
  end
  def naive_exponent_mod(a, n, mod) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = rem((result * a), mod)
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def print_bool(b) do
    try do
      if b do
        IO.puts(true)
      else
        IO.puts(false)
      end
    catch
      {:return, val} -> val
    end
  end
  Process.put(:p, 701)
  Process.put(:a, 1000000000)
  Process.put(:b, 10)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:left, rem((div(Process.get(:a), Process.get(:b))), Process.get(:p)))
    Process.put(:right_fast, rem((Process.get(:a) * binary_exponentiation(Process.get(:b), Process.get(:p) - 2, Process.get(:p))), Process.get(:p)))
    print_bool(Process.get(:left) == Process.get(:right_fast))
    Process.put(:right_naive, rem((Process.get(:a) * naive_exponent_mod(Process.get(:b), Process.get(:p) - 2, Process.get(:p))), Process.get(:p)))
    print_bool(Process.get(:left) == Process.get(:right_naive))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
