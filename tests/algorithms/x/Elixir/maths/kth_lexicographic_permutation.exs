# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def remove_at(xs, idx) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          {res} = if i != idx do
            res = (res ++ [Enum.at(xs, i, [])])
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def kth_permutation(k, n) do
    try do
      if n <= 0 do
        raise("n must be positive")
      end
      factorials = [1]
      i = 2
      while_fun_2 = fn while_fun_2, factorials, i ->
        if i < n do
          factorials = (factorials ++ [Enum.at(factorials, _len(factorials) - 1, []) * i])
          i = i + 1
          while_fun_2.(while_fun_2, factorials, i)
        else
          {factorials, i}
        end
      end
      {factorials, i} = try do
          while_fun_2.(while_fun_2, factorials, i)
        catch
          {:break, {factorials, i}} -> {factorials, i}
        end

      total = Enum.at(factorials, _len(factorials) - 1, []) * n
      if (k < 0) || (k >= total) do
        raise("k out of bounds")
      end
      elements = []
      e = 0
      while_fun_3 = fn while_fun_3, e, elements ->
        if e < n do
          elements = (elements ++ [e])
          e = e + 1
          while_fun_3.(while_fun_3, e, elements)
        else
          {e, elements}
        end
      end
      {e, elements} = try do
          while_fun_3.(while_fun_3, e, elements)
        catch
          {:break, {e, elements}} -> {e, elements}
        end

      permutation = []
      idx = _len(factorials) - 1
      while_fun_4 = fn while_fun_4, elements, idx, k, permutation ->
        if idx >= 0 do
          factorial = Enum.at(factorials, idx, [])
          number = div(k, factorial)
          k = rem(k, factorial)
          permutation = (permutation ++ [Enum.at(elements, number, [])])
          elements = remove_at(elements, number)
          idx = idx - 1
          while_fun_4.(while_fun_4, elements, idx, k, permutation)
        else
          {elements, idx, k, permutation}
        end
      end
      {elements, idx, k, permutation} = try do
          while_fun_4.(while_fun_4, elements, idx, k, permutation)
        catch
          {:break, {elements, idx, k, permutation}} -> {elements, idx, k, permutation}
        end

      permutation = (permutation ++ [Enum.at(elements, 0, [])])
      throw {:return, permutation}
    catch
      {:return, val} -> val
    end
  end
  def list_equal(a, b) do
    try do
      if _len(a) != _len(b) do
        throw {:return, false}
      end
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(a) do
          if Enum.at(a, i, []) != Enum.at(b, i, []) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def list_to_string(xs) do
    try do
      if _len(xs) == 0 do
        throw {:return, "[]"}
      end
      s = ("[" <> Kernel.to_string(Enum.at(xs, 0, [])))
      i = 1
      while_fun_6 = fn while_fun_6, i, s ->
        if i < _len(xs) do
          s = ((s <> ", ") <> Kernel.to_string(Enum.at(xs, i, [])))
          i = i + 1
          while_fun_6.(while_fun_6, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_6.(while_fun_6, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      s = (s <> "]")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def test_kth_permutation() do
    try do
      expected1 = [0, 1, 2, 3, 4]
      res1 = kth_permutation(0, 5)
      if !list_equal(res1, expected1) do
        raise("test case 1 failed")
      end
      expected2 = [1, 3, 0, 2]
      res2 = kth_permutation(10, 4)
      if !list_equal(res2, expected2) do
        raise("test case 2 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_kth_permutation()
      res = kth_permutation(10, 4)
      IO.puts(Kernel.inspect(list_to_string(res)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
