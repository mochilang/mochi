# Code generated by Mochi transpiler 2025-08-08 20:44 +0700
defmodule Main do
  def allocation_num(number_of_bytes, partitions) do
    try do
      if partitions <= 0 do
        raise("partitions must be a positive number!")
      end
      if partitions > number_of_bytes do
        raise("partitions can not > number_of_bytes!")
      end
      bytes_per_partition = div(number_of_bytes, partitions)
      allocation_list = []
      i = 0
      while_fun = fn while_fun, allocation_list, i ->
        if i < partitions do
          start_bytes = i * bytes_per_partition + 1
          end_bytes = (if i == partitions - 1, do: number_of_bytes, else: (i + 1) * bytes_per_partition)
          allocation_list = (allocation_list ++ [((Kernel.to_string(start_bytes) <> "-") <> Kernel.to_string(end_bytes))])
          i = i + 1
          while_fun.(while_fun, allocation_list, i)
        else
          {allocation_list, i}
        end
      end
      {allocation_list, i} = try do
          while_fun.(while_fun, allocation_list, i)
        catch
          {:break, {allocation_list, i}} -> {allocation_list, i}
        end

      throw {:return, allocation_list}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(allocation_num(16647, 4)))
    IO.puts(Kernel.inspect(allocation_num(50000, 5)))
  end
end
Main.main()
