# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def pow2(p) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < p do
          result = result * 2
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def lucas_lehmer_test(p) do
    try do
      if p < 2 do
        raise("p should not be less than 2!")
      end
      if p == 2 do
        throw {:return, true}
      end
      s = 4
      m = pow2(p) - 1
      i = 0
      while_fun_2 = fn while_fun_2, i, s ->
        if i < p - 2 do
          s = rem(((s * s) - 2), m)
          i = i + 1
          while_fun_2.(while_fun_2, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_2.(while_fun_2, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s == 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(lucas_lehmer_test(7)))
      IO.puts(Kernel.inspect(lucas_lehmer_test(11)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
