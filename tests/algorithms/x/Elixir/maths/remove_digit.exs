# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def remove_digit(num) do
    try do
      n = num
      {n} = if n < 0 do
        n = -n
        {n}
      else
        {n}
      end
      max_val = 0
      divisor = 1
      while_fun = fn while_fun, divisor, max_val ->
        if divisor <= n do
          higher = div(n, (divisor * 10))
          lower = rem(n, divisor)
          candidate = higher * divisor + lower
          {max_val} = if candidate > max_val do
            max_val = candidate
            {max_val}
          else
            {max_val}
          end
          divisor = divisor * 10
          while_fun.(while_fun, divisor, max_val)
        else
          {divisor, max_val}
        end
      end
      {divisor, max_val} = try do
          while_fun.(while_fun, divisor, max_val)
        catch
          {:break, {divisor, max_val}} -> {divisor, max_val}
        end

      throw {:return, max_val}
    catch
      {:return, val} -> val
    end
  end
  def test_remove_digit() do
    try do
      if remove_digit(152) != 52 do
        raise("remove_digit(152) failed")
      end
      if remove_digit(6385) != 685 do
        raise("remove_digit(6385) failed")
      end
      if remove_digit(-11) != 1 do
        raise("remove_digit(-11) failed")
      end
      if remove_digit(2222222) != 222222 do
        raise("remove_digit(2222222) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_remove_digit()
      IO.puts(Kernel.inspect(remove_digit(152)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
