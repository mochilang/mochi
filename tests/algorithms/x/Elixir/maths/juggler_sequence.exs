# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def to_float(x) do
    try do
      throw {:return, x * 1.0}
    catch
      {:return, val} -> val
    end
  end
  def sqrt(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 10 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def floor(x) do
    try do
      n = 0
      y = x
      while_fun_2 = fn while_fun_2, n, y ->
        if y >= 1.0 do
          y = y - 1.0
          n = n + 1
          while_fun_2.(while_fun_2, n, y)
        else
          {n, y}
        end
      end
      {n, y} = try do
          while_fun_2.(while_fun_2, n, y)
        catch
          {:break, {n, y}} -> {n, y}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def juggler_sequence(n) do
    try do
      if n < 1 do
        raise("number must be a positive integer")
      end
      seq = [n]
      current = n
      while_fun_3 = fn while_fun_3, current, seq ->
        if current != 1 do
          {current} = if rem(current, 2) == 0 do
            current = floor(sqrt(to_float(current)))
            {current}
          else
            r = sqrt(to_float(current))
            current = floor(r * r * r)
            {current}
          end
          seq = (seq ++ [current])
          while_fun_3.(while_fun_3, current, seq)
        else
          {current, seq}
        end
      end
      {current, seq} = try do
          while_fun_3.(while_fun_3, current, seq)
        catch
          {:break, {current, seq}} -> {current, seq}
        end

      throw {:return, seq}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(juggler_sequence(3)))
    IO.puts(Kernel.inspect(juggler_sequence(10)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
