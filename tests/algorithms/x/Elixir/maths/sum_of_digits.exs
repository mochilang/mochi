# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def abs_int(n) do
    try do
      throw {:return, ((if n < 0, do: -n, else: n))}
    catch
      {:return, val} -> val
    end
  end
  def sum_of_digits(n) do
    try do
      m = abs_int(n)
      res = 0
      while_fun = fn while_fun, m, res ->
        if m > 0 do
          res = res + (rem(m, 10))
          m = div(m, 10)
          while_fun.(while_fun, m, res)
        else
          {m, res}
        end
      end
      {_, res} = try do
          while_fun.(while_fun, m, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def sum_of_digits_recursion(n) do
    try do
      m = abs_int(n)
      if m < 10 do
        throw {:return, m}
      end
      throw {:return, (rem(m, 10)) + sum_of_digits_recursion(div(m, 10))}
    catch
      {:return, val} -> val
    end
  end
  def sum_of_digits_compact(n) do
    try do
      s = Kernel.inspect(abs_int(n))
      res = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(s) do
          res = res + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(String.at(s, i)))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def test_sum_of_digits() do
    try do
      if sum_of_digits(12345) != 15 do
        raise("sum_of_digits 12345 failed")
      end
      if sum_of_digits(123) != 6 do
        raise("sum_of_digits 123 failed")
      end
      if sum_of_digits(-123) != 6 do
        raise("sum_of_digits -123 failed")
      end
      if sum_of_digits(0) != 0 do
        raise("sum_of_digits 0 failed")
      end
      if sum_of_digits_recursion(12345) != 15 do
        raise("recursion 12345 failed")
      end
      if sum_of_digits_recursion(123) != 6 do
        raise("recursion 123 failed")
      end
      if sum_of_digits_recursion(-123) != 6 do
        raise("recursion -123 failed")
      end
      if sum_of_digits_recursion(0) != 0 do
        raise("recursion 0 failed")
      end
      if sum_of_digits_compact(12345) != 15 do
        raise("compact 12345 failed")
      end
      if sum_of_digits_compact(123) != 6 do
        raise("compact 123 failed")
      end
      if sum_of_digits_compact(-123) != 6 do
        raise("compact -123 failed")
      end
      if sum_of_digits_compact(0) != 0 do
        raise("compact 0 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_sum_of_digits()
      IO.puts(Kernel.inspect(sum_of_digits(12345)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
