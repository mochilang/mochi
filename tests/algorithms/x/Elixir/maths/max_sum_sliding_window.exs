# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def max_sum_sliding_window(arr, k) do
    try do
      if k < 0 || _len(arr) < k do
        raise("Invalid Input")
      end
      idx = 0
      current_sum = 0
      while_fun = fn while_fun, current_sum, idx ->
        if idx < k do
          current_sum = current_sum + Enum.at(arr, idx)
          idx = idx + 1
          while_fun.(while_fun, current_sum, idx)
        else
          {current_sum, idx}
        end
      end
      {current_sum, idx} = try do
          while_fun.(while_fun, current_sum, idx)
        catch
          {:break, {current_sum, idx}} -> {current_sum, idx}
        end

      max_sum = current_sum
      i = 0
      while_fun_2 = fn while_fun_2, current_sum, i, max_sum ->
        if i < _len(arr) - k do
          current_sum = current_sum - Enum.at(arr, i) + Enum.at(arr, i + k)
          {max_sum} = if current_sum > max_sum do
            max_sum = current_sum
            {max_sum}
          else
            {max_sum}
          end
          i = i + 1
          while_fun_2.(while_fun_2, current_sum, i, max_sum)
        else
          {current_sum, i, max_sum}
        end
      end
      {current_sum, i, max_sum} = try do
          while_fun_2.(while_fun_2, current_sum, i, max_sum)
        catch
          {:break, {current_sum, i, max_sum}} -> {current_sum, i, max_sum}
        end

      throw {:return, max_sum}
    catch
      {:return, val} -> val
    end
  end
  def test_max_sum_sliding_window() do
    try do
      arr1 = [1, 4, 2, 10, 2, 3, 1, 0, 20]
      if max_sum_sliding_window(arr1, 4) != 24 do
        raise("test1 failed")
      end
      arr2 = [1, 4, 2, 10, 2, 13, 1, 0, 2]
      if max_sum_sliding_window(arr2, 4) != 27 do
        raise("test2 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_max_sum_sliding_window()
      sample = [1, 4, 2, 10, 2, 3, 1, 0, 20]
      IO.puts(Kernel.inspect(max_sum_sliding_window(sample, 4)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
