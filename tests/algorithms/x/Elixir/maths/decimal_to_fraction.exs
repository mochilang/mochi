# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pow10(n) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = result * 10
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      {x} = if x < 0 do
        x = -x
        {x}
      else
        {x}
      end
      {y} = if y < 0 do
        y = -y
        {y}
      else
        {y}
      end
      while_fun_2 = fn while_fun_2, x, y ->
        if y != 0 do
          r = rem(x, y)
          x = y
          y = r
          while_fun_2.(while_fun_2, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun_2.(while_fun_2, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def parse_decimal(s) do
    try do
      if _len(s) == 0 do
        raise("invalid number")
      end
      idx = 0
      sign = 1
      first = _slice(s, 0, 1 - (0))
      {idx, sign} = if first == "-" do
        sign = -1
        idx = 1
        {idx, sign}
      else
        {idx} = if first == "+" do
          idx = 1
          {idx}
        else
          {idx}
        end
        {idx, sign}
      end
      int_part = ""
      while_fun_3 = fn while_fun_3, idx, int_part ->
        if idx < _len(s) do
          c = _slice(s, idx, idx + 1 - (idx))
          {idx, int_part} = if c >= "0" && c <= "9" do
            int_part = (int_part <> c)
            idx = idx + 1
            {idx, int_part}
          else
            throw {:break, {idx, int_part}}
            {idx, int_part}
          end
          while_fun_3.(while_fun_3, idx, int_part)
        else
          {idx, int_part}
        end
      end
      {idx, int_part} = try do
          while_fun_3.(while_fun_3, idx, int_part)
        catch
          {:break, {idx, int_part}} -> {idx, int_part}
        end

      frac_part = ""
      {frac_part, idx} = if idx < _len(s) && _slice(s, idx, idx + 1 - (idx)) == "." do
        idx = idx + 1
        while_fun_4 = fn while_fun_4, frac_part, idx ->
          if idx < _len(s) do
            c = _slice(s, idx, idx + 1 - (idx))
            {frac_part, idx} = if c >= "0" && c <= "9" do
              frac_part = (frac_part <> c)
              idx = idx + 1
              {frac_part, idx}
            else
              throw {:break, {frac_part, idx}}
              {frac_part, idx}
            end
            while_fun_4.(while_fun_4, frac_part, idx)
          else
            {frac_part, idx}
          end
        end
        {frac_part, idx} = try do
            while_fun_4.(while_fun_4, frac_part, idx)
          catch
            {:break, {frac_part, idx}} -> {frac_part, idx}
          end

        {frac_part, idx}
      else
        {frac_part, idx}
      end
      exp = 0
      {exp, idx} = if idx < _len(s) && (_slice(s, idx, idx + 1 - (idx)) == "e" || _slice(s, idx, idx + 1 - (idx)) == "E") do
        idx = idx + 1
        exp_sign = 1
        {exp_sign, idx} = if idx < _len(s) && _slice(s, idx, idx + 1 - (idx)) == "-" do
          exp_sign = -1
          idx = idx + 1
          {exp_sign, idx}
        else
          {idx} = if idx < _len(s) && _slice(s, idx, idx + 1 - (idx)) == "+" do
            idx = idx + 1
            {idx}
          else
            {idx}
          end
          {exp_sign, idx}
        end
        exp_str = ""
        while_fun_5 = fn while_fun_5, exp_str, idx ->
          if idx < _len(s) do
            c = _slice(s, idx, idx + 1 - (idx))
            {exp_str, idx} = if c >= "0" && c <= "9" do
              exp_str = (exp_str <> c)
              idx = idx + 1
              {exp_str, idx}
            else
              raise("invalid number")
              {exp_str, idx}
            end
            while_fun_5.(while_fun_5, exp_str, idx)
          else
            {exp_str, idx}
          end
        end
        {exp_str, idx} = try do
            while_fun_5.(while_fun_5, exp_str, idx)
          catch
            {:break, {exp_str, idx}} -> {exp_str, idx}
          end

        if _len(exp_str) == 0 do
          raise("invalid number")
        end
        exp = exp_sign * String.to_integer(exp_str)
        {exp, idx}
      else
        {exp, idx}
      end
      if idx != _len(s) do
        raise("invalid number")
      end
      {int_part} = if _len(int_part) == 0 do
        int_part = "0"
        {int_part}
      else
        {int_part}
      end
      num_str = (int_part <> frac_part)
      numerator = String.to_integer(num_str)
      {numerator} = if sign == (0 - 1) do
        numerator = (0 - numerator)
        {numerator}
      else
        {numerator}
      end
      denominator = pow10(_len(frac_part))
      {denominator, numerator} = if exp > 0 do
        numerator = numerator * pow10(exp)
        {denominator, numerator}
      else
        {denominator} = if exp < 0 do
          denominator = denominator * pow10(-exp)
          {denominator}
        else
          {denominator}
        end
        {denominator, numerator}
      end
      throw {:return, %{numerator: numerator, denominator: denominator}}
    catch
      {:return, val} -> val
    end
  end
  def reduce(fr) do
    try do
      g = gcd(fr.numerator, fr.denominator)
      throw {:return, %{numerator: div(fr.numerator, g), denominator: div(fr.denominator, g)}}
    catch
      {:return, val} -> val
    end
  end
  def decimal_to_fraction_str(s) do
    try do
      throw {:return, reduce(parse_decimal(s))}
    catch
      {:return, val} -> val
    end
  end
  def decimal_to_fraction(x) do
    try do
      throw {:return, decimal_to_fraction_str(Kernel.to_string(x))}
    catch
      {:return, val} -> val
    end
  end
  def assert_fraction(name, fr, num, den) do
    try do
      if fr.numerator != num || fr.denominator != den do
        raise(name)
      end
    catch
      {:return, val} -> val
    end
  end
  def test_decimal_to_fraction() do
    try do
      assert_fraction("case1", decimal_to_fraction(2.0), 2, 1)
      assert_fraction("case2", decimal_to_fraction(89.0), 89, 1)
      assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1)
      assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1)
      assert_fraction("case5", decimal_to_fraction(1.5), 3, 2)
      assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4)
      assert_fraction("case7", decimal_to_fraction(0.0), 0, 1)
      assert_fraction("case8", decimal_to_fraction(-2.5), -5, 2)
      assert_fraction("case9", decimal_to_fraction(0.125), 1, 8)
      assert_fraction("case10", decimal_to_fraction(1000000.25), 4000001, 4)
      assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000)
      assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1)
      assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2)
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_decimal_to_fraction()
      fr = decimal_to_fraction(1.5)
      IO.puts(((Kernel.to_string(fr.numerator) <> "/") <> Kernel.to_string(fr.denominator)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
