# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def primeFactors(n) do
    try do
      i = 2
      factors = []
      while_fun = fn while_fun, factors, i, n ->
        if ((i * i) <= n) do
          {factors, i, n} = if ((rem(n, i)) == 0) do
            factors = (factors ++ [i])
            n = (div(n, i))
            {factors, i, n}
          else
            i = (i + 1)
            {factors, i, n}
          end
          while_fun.(while_fun, factors, i, n)
        else
          {factors, i, n}
        end
      end
      {factors, i, n} = try do
          while_fun.(while_fun, factors, i, n)
        catch
          {:break, {factors, i, n}} -> {factors, i, n}
        end

      {factors} = if (n > 1) do
        factors = (factors ++ [n])
        {factors}
      else
        {factors}
      end
      throw {:return, factors}
    catch
      {:return, val} -> val
    end
  end
  def isSquareFree(factors) do
    try do
      seen = %{}
      {seen} = Enum.reduce(factors, {seen}, fn f, {seen} ->
        if (Map.has_key?(seen, f)) do
          throw {:return, false}
        end
        seen = Map.put(seen, f, true)
        {seen}
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def mobius(n) do
    try do
      factors = primeFactors(n)
      if (isSquareFree(factors)) do
        throw {:return, ((if ((rem(_len(factors), 2)) == 0), do: 1, else: (-1)))}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(mobius(24)))
    IO.puts(Kernel.inspect(mobius(-1)))
  end
end
Main.main()
