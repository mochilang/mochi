# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def factorial(n) do
    try do
      if n < 0 do
        raise("factorial() not defined for negative values")
      end
      value = 1
      i = 1
      while_fun = fn while_fun, i, value ->
        if i <= n do
          value = value * i
          i = i + 1
          while_fun.(while_fun, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun.(while_fun, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def factorial_recursive(n) do
    try do
      if n < 0 do
        raise("factorial() not defined for negative values")
      end
      if n <= 1 do
        throw {:return, 1}
      end
      throw {:return, n * factorial_recursive(n - 1)}
    catch
      {:return, val} -> val
    end
  end
  def test_factorial() do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i <= 10 do
          if factorial(i) != factorial_recursive(i) do
            raise("mismatch between factorial and factorial_recursive")
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      if factorial(6) != 720 do
        raise("factorial(6) should be 720")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_factorial()
      IO.puts(Kernel.inspect(factorial(6)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
