# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def combinations(n, k) do
    try do
      if k < 0 || n < k do
        raise("Please enter positive integers for n and k where n >= k")
      end
      res = 1
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < k do
          res = res * (n - i)
          res = div(res, (i + 1))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(("The number of five-card hands possible from a standard fifty-two card deck is: " <> Kernel.inspect(combinations(52, 5))))
    IO.puts("")
    IO.puts((("If a class of 40 students must be arranged into groups of 4 for group projects, there are " <> Kernel.inspect(combinations(40, 4))) <> " ways to arrange them."))
    IO.puts("")
    IO.puts((("If 10 teams are competing in a Formula One race, there are " <> Kernel.inspect(combinations(10, 3))) <> " ways that first, second and third place can be awarded."))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
