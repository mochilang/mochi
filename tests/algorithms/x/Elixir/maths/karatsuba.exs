# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def int_pow(base, exp) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def karatsuba(a, b) do
    try do
      if _len(Kernel.to_string(a)) == 1 || _len(Kernel.to_string(b)) == 1 do
        throw {:return, a * b}
      end
      m1 = _len(Kernel.to_string(a))
      lb = _len(Kernel.to_string(b))
      {m1} = if lb > m1 do
        m1 = lb
        {m1}
      else
        {m1}
      end
      m2 = div(m1, 2)
      power = int_pow(10, m2)
      a1 = div(a, power)
      a2 = rem(a, power)
      b1 = div(b, power)
      b2 = rem(b, power)
      x = karatsuba(a2, b2)
      y = karatsuba(a1 + a2, b1 + b2)
      z = karatsuba(a1, b1)
      result = z * int_pow(10, 2 * m2) + (y - z - x) * power + x
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(karatsuba(15463, 23489)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
