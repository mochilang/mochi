# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def bubble_sort(nums) do
    try do
      arr = nums
      n = _len(arr)
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < n do
          j = 0
          while_fun_2 = fn while_fun_2, arr, j ->
            if j < n - 1 do
              arr = if Enum.at(arr, j, []) > Enum.at(arr, j + 1, []) do
                temp = Enum.at(arr, j, [])
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1, []))
                arr = List.replace_at(arr, j + 1, temp)
                arr
              else
                arr
              end
              j = j + 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, _} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, _}} -> {arr, 0}
            end

          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def three_sum(nums) do
    try do
      sorted = bubble_sort(nums)
      res = []
      n = _len(sorted)
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < n - 2 do
          res = if i == 0 || Enum.at(sorted, i, []) != Enum.at(sorted, i - 1, []) do
            low = i + 1
            high = n - 1
            c = 0 - Enum.at(sorted, i, [])
            while_fun_4 = fn while_fun_4, high, low, res ->
              if low < high do
                s = Enum.at(sorted, low, []) + Enum.at(sorted, high, [])
                {high, low, res} = if s == c do
                  triple = [Enum.at(sorted, i, []), Enum.at(sorted, low, []), Enum.at(sorted, high, [])]
                  res = (res ++ [triple])
                  while_fun_5 = fn while_fun_5, low ->
                    if low < high && Enum.at(sorted, low, []) == Enum.at(sorted, low + 1, []) do
                      low = low + 1
                      while_fun_5.(while_fun_5, low)
                    else
                      low
                    end
                  end
                  low = try do
                      while_fun_5.(while_fun_5, low)
                    catch
                      {:break, {low}} -> low
                    end

                  while_fun_6 = fn while_fun_6, high ->
                    if low < high && Enum.at(sorted, high, []) == Enum.at(sorted, high - 1, []) do
                      high = high - 1
                      while_fun_6.(while_fun_6, high)
                    else
                      high
                    end
                  end
                  high = try do
                      while_fun_6.(while_fun_6, high)
                    catch
                      {:break, {high}} -> high
                    end

                  low = low + 1
                  high = high - 1
                  {high, low, res}
                else
                  {high, low} = if s < c do
                    low = low + 1
                    {high, low}
                  else
                    high = high - 1
                    {high, low}
                  end
                  {high, low, res}
                end
                while_fun_4.(while_fun_4, high, low, res)
              else
                {high, low, res}
              end
            end
            {high, low, res} = try do
                while_fun_4.(while_fun_4, high, low, res)
              catch
                {:break, {high, low, res}} -> {high, low, res}
              end

            res
          else
            res
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(three_sum([-1, 0, 1, 2, -1, -4])))
    IO.puts(Kernel.inspect(three_sum([1, 2, 3, 4])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
