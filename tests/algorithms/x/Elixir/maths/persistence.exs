# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def multiplicative_persistence(num) do
    try do
      if num < 0 do
        raise("multiplicative_persistence() does not accept negative values")
      end
      steps = 0
      n = num
      while_fun = fn while_fun, n, steps ->
        if n >= 10 do
          product = 1
          temp = n
          while_fun_2 = fn while_fun_2, product, temp ->
            if temp > 0 do
              digit = rem(temp, 10)
              product = product * digit
              temp = div(temp, 10)
              while_fun_2.(while_fun_2, product, temp)
            else
              {product, temp}
            end
          end
          {product, temp} = try do
              while_fun_2.(while_fun_2, product, temp)
            catch
              {:break, {product, temp}} -> {product, temp}
            end

          n = product
          steps = steps + 1
          while_fun.(while_fun, n, steps)
        else
          {n, steps}
        end
      end
      {n, steps} = try do
          while_fun.(while_fun, n, steps)
        catch
          {:break, {n, steps}} -> {n, steps}
        end

      throw {:return, steps}
    catch
      {:return, val} -> val
    end
  end
  def additive_persistence(num) do
    try do
      if num < 0 do
        raise("additive_persistence() does not accept negative values")
      end
      steps = 0
      n = num
      while_fun_3 = fn while_fun_3, n, steps ->
        if n >= 10 do
          total = 0
          temp = n
          while_fun_4 = fn while_fun_4, temp, total ->
            if temp > 0 do
              digit = rem(temp, 10)
              total = total + digit
              temp = div(temp, 10)
              while_fun_4.(while_fun_4, temp, total)
            else
              {temp, total}
            end
          end
          {temp, total} = try do
              while_fun_4.(while_fun_4, temp, total)
            catch
              {:break, {temp, total}} -> {temp, total}
            end

          n = total
          steps = steps + 1
          while_fun_3.(while_fun_3, n, steps)
        else
          {n, steps}
        end
      end
      {n, steps} = try do
          while_fun_3.(while_fun_3, n, steps)
        catch
          {:break, {n, steps}} -> {n, steps}
        end

      throw {:return, steps}
    catch
      {:return, val} -> val
    end
  end
  def test_persistence() do
    try do
      if multiplicative_persistence(217) != 2 do
        raise("multiplicative_persistence failed")
      end
      if additive_persistence(199) != 3 do
        raise("additive_persistence failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_persistence()
      IO.puts(Kernel.inspect(multiplicative_persistence(217)))
      IO.puts(Kernel.inspect(additive_persistence(199)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
