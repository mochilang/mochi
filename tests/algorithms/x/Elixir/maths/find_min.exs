# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def find_min_iterative(nums) do
    try do
      if _len(nums) == 0 do
        raise("find_min_iterative() arg is an empty sequence")
      end
      min_num = Enum.at(nums, 0, [])
      i = 0
      while_fun = fn while_fun, i, min_num ->
        if i < _len(nums) do
          num = Enum.at(nums, i, [])
          {min_num} = if num < min_num do
            min_num = num
            {min_num}
          else
            {min_num}
          end
          i = i + 1
          while_fun.(while_fun, i, min_num)
        else
          {i, min_num}
        end
      end
      {i, min_num} = try do
          while_fun.(while_fun, i, min_num)
        catch
          {:break, {i, min_num}} -> {i, min_num}
        end

      throw {:return, min_num}
    catch
      {:return, val} -> val
    end
  end
  def find_min_recursive(nums, left, right) do
    try do
      n = _len(nums)
      if n == 0 do
        raise("find_min_recursive() arg is an empty sequence")
      end
      if left >= n || left < (0 - n) || right >= n || right < (0 - n) do
        raise("list index out of range")
      end
      l = left
      r = right
      {l} = if l < 0 do
        l = n + l
        {l}
      else
        {l}
      end
      {r} = if r < 0 do
        r = n + r
        {r}
      else
        {r}
      end
      if l == r do
        throw {:return, Enum.at(nums, l, [])}
      end
      mid = div((l + r), 2)
      left_min = find_min_recursive(nums, l, mid)
      right_min = find_min_recursive(nums, mid + 1, r)
      if left_min <= right_min do
        throw {:return, left_min}
      end
      throw {:return, right_min}
    catch
      {:return, val} -> val
    end
  end
  def test_find_min() do
    try do
      a = [3.0, 2.0, 1.0]
      if find_min_iterative(a) != 1.0 do
        raise("iterative test1 failed")
      end
      if find_min_recursive(a, 0, _len(a) - 1) != 1.0 do
        raise("recursive test1 failed")
      end
      b = [-3.0, -2.0, -1.0]
      if find_min_iterative(b) != (-3.0) do
        raise("iterative test2 failed")
      end
      if find_min_recursive(b, 0, _len(b) - 1) != (-3.0) do
        raise("recursive test2 failed")
      end
      c = [3.0, -3.0, 0.0]
      if find_min_iterative(c) != (-3.0) do
        raise("iterative test3 failed")
      end
      if find_min_recursive(c, 0, _len(c) - 1) != (-3.0) do
        raise("recursive test3 failed")
      end
      d = [1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0]
      if find_min_recursive(d, (0 - _len(d)), (0 - 1)) != 1.0 do
        raise("negative index test failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_find_min()
      sample = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0]
      IO.puts(Kernel.inspect(find_min_iterative(sample)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
