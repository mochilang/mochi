# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def harmonic_series(n_term) do
    try do
      if n_term <= 0.0 do
        throw {:return, []}
      end
      limit = Kernel.trunc(n_term)
      series = []
      i = 0
      while_fun = fn while_fun, i, series ->
        if i < limit do
          series = (if i == 0, do: (series ++ ["1"]), else: (series ++ [("1/" <> Kernel.to_string(i + 1))]))
          i = i + 1
          while_fun.(while_fun, i, series)
        else
          {i, series}
        end
      end
      {i, series} = try do
          while_fun.(while_fun, i, series)
        catch
          {:break, {i, series}} -> {i, series}
        end

      throw {:return, series}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(harmonic_series(5.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
