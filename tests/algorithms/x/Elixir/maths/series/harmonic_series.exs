# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def harmonic_series(n_term) do
    try do
      if n_term <= 0.0 do
        throw {:return, []}
      end
      limit = Kernel.trunc(n_term)
      series = []
      i = 0
      while_fun = fn while_fun, i, series ->
        if i < limit do
          series = (if i == 0, do: (series ++ ["1"]), else: (series ++ [("1/" <> Kernel.to_string(i + 1))]))
          i = i + 1
          while_fun.(while_fun, i, series)
        else
          {i, series}
        end
      end
      {i, series} = try do
          while_fun.(while_fun, i, series)
        catch
          {:break, {i, series}} -> {i, series}
        end

      throw {:return, series}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(harmonic_series(5.0)))
  end
end
Main.main()
