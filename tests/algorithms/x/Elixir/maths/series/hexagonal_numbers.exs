# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def hexagonal_numbers(length) do
    try do
      if length <= 0 do
        raise("Length must be a positive integer.")
      end
      res = []
      n = 0
      while_fun = fn while_fun, n, res ->
        if n < length do
          res = (res ++ [n * (2 * n - 1)])
          n = n + 1
          while_fun.(while_fun, n, res)
        else
          {n, res}
        end
      end
      {n, res} = try do
          while_fun.(while_fun, n, res)
        catch
          {:break, {n, res}} -> {n, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def test_hexagonal_numbers() do
    try do
      expected5 = [0, 1, 6, 15, 28]
      result5 = hexagonal_numbers(5)
      if result5 != expected5 do
        raise("hexagonal_numbers(5) failed")
      end
      expected10 = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153]
      result10 = hexagonal_numbers(10)
      if result10 != expected10 do
        raise("hexagonal_numbers(10) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    test_hexagonal_numbers()
    IO.puts(Kernel.inspect(hexagonal_numbers(5)))
    IO.puts(Kernel.inspect(hexagonal_numbers(10)))
  end
end
Main.main()
