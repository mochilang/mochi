# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_geometric_series(series) do
    try do
      if _len(series) == 0 do
        raise("Input list must be a non empty list")
      end
      if _len(series) == 1 do
        throw {:return, true}
      end
      if Enum.at(series, 0, []) == 0.0 do
        throw {:return, false}
      end
      ratio = Enum.at(series, 1, []) / Enum.at(series, 0, [])
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(series) - 1 do
          if Enum.at(series, i, []) == 0.0 do
            throw {:return, false}
          end
          if Enum.at(series, i + 1, []) / Enum.at(series, i, []) != ratio do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def geometric_mean(series) do
    try do
      if _len(series) == 0 do
        raise("Input list must be a non empty list")
      end
      product = 1.0
      i = 0
      while_fun_2 = fn while_fun_2, i, product ->
        if i < _len(series) do
          product = product * Enum.at(series, i, [])
          i = i + 1
          while_fun_2.(while_fun_2, i, product)
        else
          {i, product}
        end
      end
      {i, product} = try do
          while_fun_2.(while_fun_2, i, product)
        catch
          {:break, {i, product}} -> {i, product}
        end

      n = _len(series)
      throw {:return, nth_root(product, n)}
    catch
      {:return, val} -> val
    end
  end
  def pow_float(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def nth_root(value, n) do
    try do
      if value == 0.0 do
        throw {:return, 0.0}
      end
      low = 0.0
      high = value
      high = if value < 1.0 do
        high = 1.0
        high
      else
        high
      end
      mid = (low + high) / 2.0
      i = 0
      while_fun_4 = fn while_fun_4, high, i, low, mid ->
        if i < 40 do
          mp = pow_float(mid, n)
          {high, low} = if mp > value do
            high = mid
            {high, low}
          else
            low = mid
            {high, low}
          end
          mid = (low + high) / 2.0
          i = i + 1
          while_fun_4.(while_fun_4, high, i, low, mid)
        else
          {high, i, low, mid}
        end
      end
      {high, i, low, mid} = try do
          while_fun_4.(while_fun_4, high, i, low, mid)
        catch
          {:break, {high, i, low, mid}} -> {high, i, low, mid}
        end

      throw {:return, mid}
    catch
      {:return, val} -> val
    end
  end
  def test_geometric() do
    try do
      a = [2.0, 4.0, 8.0]
      if !is_geometric_series(a) do
        raise("expected geometric series")
      end
      b = [1.0, 2.0, 3.0]
      if is_geometric_series(b) do
        raise("expected non geometric series")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_geometric()
      IO.puts(Kernel.inspect(geometric_mean([2.0, 4.0, 8.0])))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
