# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def geometric_series(nth_term, start_term_a, common_ratio_r) do
    try do
      n = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(nth_term)
      if n <= 0 || start_term_a == 0.0 || common_ratio_r == 0.0 do
        throw {:return, []}
      end
      series = []
      current = start_term_a
      i = 0
      while_fun = fn while_fun, current, i, series ->
        if i < n do
          series = (series ++ [current])
          current = current * common_ratio_r
          i = i + 1
          while_fun.(while_fun, current, i, series)
        else
          {current, i, series}
        end
      end
      {current, i, series} = try do
          while_fun.(while_fun, current, i, series)
        catch
          {:break, {current, i, series}} -> {current, i, series}
        end

      throw {:return, series}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(geometric_series(4.0, 2.0, 2.0)))
    IO.puts(Kernel.inspect(geometric_series(4.0, 2.0, -2.0)))
    IO.puts(Kernel.inspect(geometric_series(4.0, -2.0, 2.0)))
    IO.puts(Kernel.inspect(geometric_series(-4.0, 2.0, 2.0)))
    IO.puts(Kernel.inspect(geometric_series(0.0, 100.0, 500.0)))
    IO.puts(Kernel.inspect(geometric_series(1.0, 1.0, 1.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
