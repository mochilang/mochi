# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def geometric_series(nth_term, start_term_a, common_ratio_r) do
    try do
      n = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(nth_term)
      if n <= 0 || start_term_a == 0.0 || common_ratio_r == 0.0 do
        throw {:return, []}
      end
      series = []
      current = start_term_a
      i = 0
      while_fun = fn while_fun, current, i, series ->
        if i < n do
          series = (series ++ [current])
          current = current * common_ratio_r
          i = i + 1
          while_fun.(while_fun, current, i, series)
        else
          {current, i, series}
        end
      end
      {current, i, series} = try do
          while_fun.(while_fun, current, i, series)
        catch
          {:break, {current, i, series}} -> {current, i, series}
        end

      throw {:return, series}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(geometric_series(4.0, 2.0, 2.0)))
    IO.puts(Kernel.inspect(geometric_series(4.0, 2.0, -2.0)))
    IO.puts(Kernel.inspect(geometric_series(4.0, -2.0, 2.0)))
    IO.puts(Kernel.inspect(geometric_series(-4.0, 2.0, 2.0)))
    IO.puts(Kernel.inspect(geometric_series(0.0, 100.0, 500.0)))
    IO.puts(Kernel.inspect(geometric_series(1.0, 1.0, 1.0)))
  end
end
Main.main()
