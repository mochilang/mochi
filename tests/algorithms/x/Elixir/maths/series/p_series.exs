# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def pow_string(base, exp) do
    try do
      if exp >= 0 do
        res = 1
        i = 0
        while_fun = fn while_fun, i, res ->
          if i < exp do
            res = res * base
            i = i + 1
            while_fun.(while_fun, i, res)
          else
            {i, res}
          end
        end
        {i, res} = try do
            while_fun.(while_fun, i, res)
          catch
            {:break, {i, res}} -> {i, res}
          end

        throw {:return, Kernel.to_string(res)}
      end
      e = -exp
      res = 1.0
      b = base * 1.0
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < e do
          res = res * b
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      value = 1.0 / res
      throw {:return, String.trim_trailing(Kernel.to_string(value), ".0")}
    catch
      {:return, val} -> val
    end
  end
  def p_series(nth_term, power) do
    try do
      series = []
      if nth_term <= 0 do
        throw {:return, series}
      end
      i = 1
      while_fun_3 = fn while_fun_3, i, series ->
        if i <= nth_term do
          series = (if i == 1, do: (series ++ ["1"]), else: (series ++ [("1 / " <> pow_string(i, power))]))
          i = i + 1
          while_fun_3.(while_fun_3, i, series)
        else
          {i, series}
        end
      end
      {i, series} = try do
          while_fun_3.(while_fun_3, i, series)
        catch
          {:break, {i, series}} -> {i, series}
        end

      throw {:return, series}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(p_series(5, 2)))
    IO.puts(Kernel.inspect(p_series(-5, 2)))
    IO.puts(Kernel.inspect(p_series(5, -2)))
    IO.puts(Kernel.inspect(p_series(0, 0)))
    IO.puts(Kernel.inspect(p_series(1, 1)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
