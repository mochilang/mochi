# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_harmonic_series(series) do
    try do
      if _len(series) == 0 do
        raise("Input list must be a non empty list")
      end
      if _len(series) == 1 do
        if Enum.at(series, 0, []) == 0.0 do
          raise("Input series cannot have 0 as an element")
        end
        throw {:return, true}
      end
      rec_series = []
      i = 0
      while_fun = fn while_fun, i, rec_series ->
        if i < _len(series) do
          val = Enum.at(series, i, [])
          if val == 0.0 do
            raise("Input series cannot have 0 as an element")
          end
          rec_series = (rec_series ++ [1.0 / val])
          i = i + 1
          while_fun.(while_fun, i, rec_series)
        else
          {i, rec_series}
        end
      end
      {i, rec_series} = try do
          while_fun.(while_fun, i, rec_series)
        catch
          {:break, {i, rec_series}} -> {i, rec_series}
        end

      common_diff = Enum.at(rec_series, 1, []) - Enum.at(rec_series, 0, [])
      idx = 2
      while_fun_2 = fn while_fun_2, idx ->
        if idx < _len(rec_series) do
          if Enum.at(rec_series, idx, []) - Enum.at(rec_series, idx - 1, []) != common_diff do
            throw {:return, false}
          end
          idx = idx + 1
          while_fun_2.(while_fun_2, idx)
        else
          idx
        end
      end
      _ = try do
          while_fun_2.(while_fun_2, idx)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def harmonic_mean(series) do
    try do
      if _len(series) == 0 do
        raise("Input list must be a non empty list")
      end
      total = 0.0
      i = 0
      while_fun_3 = fn while_fun_3, i, total ->
        if i < _len(series) do
          total = total + 1.0 / Enum.at(series, i, [])
          i = i + 1
          while_fun_3.(while_fun_3, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_3.(while_fun_3, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, (:erlang.float(_len(series))) / total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_harmonic_series([1.0, 2.0 / 3.0, 1.0 / 2.0, 2.0 / 5.0, 1.0 / 3.0])))
    IO.puts(Kernel.inspect(is_harmonic_series([1.0, 2.0 / 3.0, 2.0 / 5.0, 1.0 / 3.0])))
    IO.puts(Kernel.inspect(harmonic_mean([1.0, 4.0, 4.0])))
    IO.puts(Kernel.inspect(harmonic_mean([3.0, 6.0, 9.0, 12.0])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
