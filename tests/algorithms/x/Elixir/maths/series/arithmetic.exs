# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_arithmetic_series(xs) do
    try do
      if _len(xs) == 0 do
        raise("Input list must be a non empty list")
      end
      if _len(xs) == 1 do
        throw {:return, true}
      end
      diff = Enum.at(xs, 1, []) - Enum.at(xs, 0, [])
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) - 1 do
          if Enum.at(xs, i + 1, []) - Enum.at(xs, i, []) != diff do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def arithmetic_mean(xs) do
    try do
      if _len(xs) == 0 do
        raise("Input list must be a non empty list")
      end
      total = 0.0
      i = 0
      while_fun_2 = fn while_fun_2, i, total ->
        if i < _len(xs) do
          total = total + Enum.at(xs, i, [])
          i = i + 1
          while_fun_2.(while_fun_2, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_2.(while_fun_2, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, total / (:erlang.float(_len(xs)))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_arithmetic_series([2.0, 4.0, 6.0])))
    IO.puts(Kernel.inspect(is_arithmetic_series([3.0, 6.0, 12.0, 24.0])))
    IO.puts(Kernel.inspect(arithmetic_mean([2.0, 4.0, 6.0])))
    IO.puts(Kernel.inspect(arithmetic_mean([3.0, 6.0, 9.0, 12.0])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
