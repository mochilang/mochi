# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def floor(x) do
    try do
      i = Kernel.trunc(x)
      if x - :erlang.float(i) >= 0.0 do
        throw {:return, i}
      end
      throw {:return, i - 1}
    catch
      {:return, val} -> val
    end
  end
  def test_floor() do
    try do
      nums = [1.0, -1.0, 0.0, 0.0, 1.1, -1.1, 1.0, -1.0, 1000000000.0]
      expected = [1, -1, 0, 0, 1, -2, 1, -1, 1000000000]
      idx = 0
      while_fun = fn while_fun, idx ->
        if idx < _len(nums) do
          if floor(Enum.at(nums, idx, [])) != Enum.at(expected, idx, []) do
            raise("floor test failed")
          end
          idx = idx + 1
          while_fun.(while_fun, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun.(while_fun, idx)
        catch
          {:break, {idx}} -> idx
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_floor()
      IO.puts(Kernel.inspect(floor(-1.1)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
