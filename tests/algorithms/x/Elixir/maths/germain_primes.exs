# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def is_prime(n) do
    try do
      if n <= 1 do
        throw {:return, false}
      end
      if n <= 3 do
        throw {:return, true}
      end
      if rem(n, 2) == 0 do
        throw {:return, false}
      end
      i = 3
      while_fun = fn while_fun, i ->
        if i * i <= n do
          if rem(n, i) == 0 do
            throw {:return, false}
          end
          i = i + 2
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def is_germain_prime(number) do
    try do
      if number < 1 do
        raise("Input value must be a positive integer")
      end
      throw {:return, is_prime(number) && is_prime(2 * number + 1)}
    catch
      {:return, val} -> val
    end
  end
  def is_safe_prime(number) do
    try do
      if number < 1 do
        raise("Input value must be a positive integer")
      end
      if rem((number - 1), 2) != 0 do
        throw {:return, false}
      end
      throw {:return, is_prime(number) && is_prime(div((number - 1), 2))}
    catch
      {:return, val} -> val
    end
  end
  def test_is_germain_prime() do
    try do
      if !is_germain_prime(3) do
        raise("is_germain_prime(3) failed")
      end
      if !is_germain_prime(11) do
        raise("is_germain_prime(11) failed")
      end
      if is_germain_prime(4) do
        raise("is_germain_prime(4) failed")
      end
      if !is_germain_prime(23) do
        raise("is_germain_prime(23) failed")
      end
      if is_germain_prime(13) do
        raise("is_germain_prime(13) failed")
      end
      if is_germain_prime(20) do
        raise("is_germain_prime(20) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def test_is_safe_prime() do
    try do
      if !is_safe_prime(5) do
        raise("is_safe_prime(5) failed")
      end
      if !is_safe_prime(11) do
        raise("is_safe_prime(11) failed")
      end
      if is_safe_prime(1) do
        raise("is_safe_prime(1) failed")
      end
      if is_safe_prime(2) do
        raise("is_safe_prime(2) failed")
      end
      if is_safe_prime(3) do
        raise("is_safe_prime(3) failed")
      end
      if !is_safe_prime(47) do
        raise("is_safe_prime(47) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_is_germain_prime()
      test_is_safe_prime()
      IO.puts(Kernel.inspect(is_germain_prime(23)))
      IO.puts(Kernel.inspect(is_safe_prime(47)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
