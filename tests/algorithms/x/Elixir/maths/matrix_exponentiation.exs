# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def identity(n) do
    try do
      i = 0
      mat = []
      while_fun = fn while_fun, i, mat ->
        if i < n do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < n do
              row = (if i == j, do: (row ++ [1]), else: (row ++ [0]))
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          mat = (mat ++ [row])
          i = i + 1
          while_fun.(while_fun, i, mat)
        else
          {i, mat}
        end
      end
      {i, mat} = try do
          while_fun.(while_fun, i, mat)
        catch
          {:break, {i, mat}} -> {i, mat}
        end

      throw {:return, mat}
    catch
      {:return, val} -> val
    end
  end
  def matrix_mul(a, b) do
    try do
      n = _len(a)
      result = []
      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < n do
          row = []
          j = 0
          while_fun_4 = fn while_fun_4, j, row ->
            if j < n do
              cell = 0
              k = 0
              while_fun_5 = fn while_fun_5, cell, k ->
                if k < n do
                  cell = cell + Enum.at(Enum.at(a, i), k) * Enum.at(Enum.at(b, k), j)
                  k = k + 1
                  while_fun_5.(while_fun_5, cell, k)
                else
                  {cell, k}
                end
              end
              {cell, k} = try do
                  while_fun_5.(while_fun_5, cell, k)
                catch
                  {:break, {cell, k}} -> {cell, k}
                end

              row = (row ++ [cell])
              j = j + 1
              while_fun_4.(while_fun_4, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_4.(while_fun_4, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def matrix_pow(base, exp) do
    try do
      result = identity(_len(base))
      b = base
      e = exp
      while_fun_6 = fn while_fun_6, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = matrix_mul(result, b)
            {result}
          else
            {result}
          end
          b = matrix_mul(b, b)
          e = div(e, 2)
          while_fun_6.(while_fun_6, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun_6.(while_fun_6, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def fibonacci_with_matrix_exponentiation(n, f1, f2) do
    try do
      if n == 1 do
        throw {:return, f1}
      end
      if n == 2 do
        throw {:return, f2}
      end
      base = [[1, 1], [1, 0]]
      m = matrix_pow(base, n - 2)
      throw {:return, f2 * Enum.at(Enum.at(m, 0), 0) + f1 * Enum.at(Enum.at(m, 0), 1)}
    catch
      {:return, val} -> val
    end
  end
  def simple_fibonacci(n, f1, f2) do
    try do
      if n == 1 do
        throw {:return, f1}
      end
      if n == 2 do
        throw {:return, f2}
      end
      a = f1
      b = f2
      count = n - 2
      while_fun_7 = fn while_fun_7, a, b, count ->
        if count > 0 do
          tmp = a + b
          a = b
          b = tmp
          count = count - 1
          while_fun_7.(while_fun_7, a, b, count)
        else
          {a, b, count}
        end
      end
      {a, b, count} = try do
          while_fun_7.(while_fun_7, a, b, count)
        catch
          {:break, {a, b, count}} -> {a, b, count}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(fibonacci_with_matrix_exponentiation(1, 5, 6)))
    IO.puts(Kernel.inspect(fibonacci_with_matrix_exponentiation(2, 10, 11)))
    IO.puts(Kernel.inspect(fibonacci_with_matrix_exponentiation(13, 0, 1)))
    IO.puts(Kernel.inspect(fibonacci_with_matrix_exponentiation(10, 5, 9)))
    IO.puts(Kernel.inspect(fibonacci_with_matrix_exponentiation(9, 2, 3)))
    IO.puts(Kernel.inspect(simple_fibonacci(1, 5, 6)))
    IO.puts(Kernel.inspect(simple_fibonacci(2, 10, 11)))
    IO.puts(Kernel.inspect(simple_fibonacci(13, 0, 1)))
    IO.puts(Kernel.inspect(simple_fibonacci(10, 5, 9)))
    IO.puts(Kernel.inspect(simple_fibonacci(9, 2, 3)))
  end
end
Main.main()
