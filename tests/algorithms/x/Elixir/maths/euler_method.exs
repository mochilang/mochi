# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ceil_int(x) do
    try do
      n = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      {n} = if :erlang.float(n) < x do
        n = n + 1
        {n}
      else
        {n}
      end
      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def explicit_euler(ode_func, y0, x0, step_size, x_end) do
    try do
      n = ceil_int((x_end - x0) / step_size)
      y = []
      i = 0
      while_fun = fn while_fun, i, y ->
        if i <= n do
          y = (y ++ [0.0])
          i = i + 1
          while_fun.(while_fun, i, y)
        else
          {i, y}
        end
      end
      {i, y} = try do
          while_fun.(while_fun, i, y)
        catch
          {:break, {i, y}} -> {i, y}
        end

      y = List.replace_at(y, 0, y0)
      x = x0
      k = 0
      while_fun_2 = fn while_fun_2, k, x, y ->
        if k < n do
          y = List.replace_at(y, k + 1, Enum.at(y, k, []) + step_size * ode_func.(x, Enum.at(y, k, [])))
          x = x + step_size
          k = k + 1
          while_fun_2.(while_fun_2, k, x, y)
        else
          {k, x, y}
        end
      end
      {k, x, y} = try do
          while_fun_2.(while_fun_2, k, x, y)
        catch
          {:break, {k, x, y}} -> {k, x, y}
        end

      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  def abs_float(a) do
    try do
      throw {:return, ((if a < 0.0, do: -a, else: a))}
    catch
      {:return, val} -> val
    end
  end
  def test_explicit_euler() do
    try do
      f = fn x, y -> y end
      ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
      last = Enum.at(ys, _len(ys) - 1, [])
      if abs_float(last - 144.77277243257308) > 0.001 do
        raise("explicit_euler failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_explicit_euler()
      f = fn x, y -> y end
      ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
      IO.puts(Enum.at(ys, _len(ys) - 1, []))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
