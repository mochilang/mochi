# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def abs_val(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def pow_float(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def nth_root(value, n) do
    try do
      if value == 0.0 do
        throw {:return, 0.0}
      end
      x = value / (:erlang.float(n))
      i = 0
      while_fun_2 = fn while_fun_2, i, x ->
        if i < 20 do
          num = (:erlang.float((n - 1))) * x + value / pow_float(x, n - 1)
          x = num / (:erlang.float(n))
          i = i + 1
          while_fun_2.(while_fun_2, i, x)
        else
          {i, x}
        end
      end
      {i, x} = try do
          while_fun_2.(while_fun_2, i, x)
        catch
          {:break, {i, x}} -> {i, x}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def minkowski_distance(point_a, point_b, order) do
    try do
      if order < 1 do
        raise("The order must be greater than or equal to 1.")
      end
      if _len(point_a) != _len(point_b) do
        raise("Both points must have the same dimension.")
      end
      total = 0.0
      idx = 0
      while_fun_3 = fn while_fun_3, idx, total ->
        if idx < _len(point_a) do
          diff = abs_val(Enum.at(point_a, idx) - Enum.at(point_b, idx))
          total = total + pow_float(diff, order)
          idx = idx + 1
          while_fun_3.(while_fun_3, idx, total)
        else
          {idx, total}
        end
      end
      {idx, total} = try do
          while_fun_3.(while_fun_3, idx, total)
        catch
          {:break, {idx, total}} -> {idx, total}
        end

      throw {:return, nth_root(total, order)}
    catch
      {:return, val} -> val
    end
  end
  def test_minkowski() do
    try do
      if abs_val(minkowski_distance([1.0, 1.0], [2.0, 2.0], 1) - 2.0) > 0.0001 do
        raise("minkowski_distance test1 failed")
      end
      if abs_val(minkowski_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], 2) - 8.0) > 0.0001 do
        raise("minkowski_distance test2 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_minkowski()
      IO.puts(Kernel.inspect(minkowski_distance([5.0], [0.0], 3)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
