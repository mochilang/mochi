# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  import Kernel, except: [ceil: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def ceil(x) do
    try do
      truncated = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      frac = x - (:erlang.float(truncated))
      if frac <= 0.0 do
        throw {:return, truncated}
      end
      throw {:return, truncated + 1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:values, [1.0, -1.0, 0.0, -0.0, 1.1, -1.1, 1.0, -1.0, 1000000000.0])
    Enum.each(Process.get(:values), fn v ->
      IO.puts(Kernel.inspect(ceil(v)))
    end)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
