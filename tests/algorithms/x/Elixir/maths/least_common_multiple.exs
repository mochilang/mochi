# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def gcd(a, b) do
    try do
      x = (if a >= 0, do: a, else: -a)
      y = (if b >= 0, do: b, else: -b)
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          temp = rem(x, y)
          x = y
          y = temp
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def lcm_slow(a, b) do
    try do
      max = (if a >= b, do: a, else: b)
      multiple = max
      while_fun_2 = fn while_fun_2, multiple ->
        if (rem(multiple, a) != 0) || (rem(multiple, b) != 0) do
          multiple = multiple + max
          while_fun_2.(while_fun_2, multiple)
        else
          multiple
        end
      end
      multiple = try do
          while_fun_2.(while_fun_2, multiple)
        catch
          {:break, {multiple}} -> multiple
        end

      throw {:return, multiple}
    catch
      {:return, val} -> val
    end
  end
  def lcm_fast(a, b) do
    try do
      throw {:return, (div(a, gcd(a, b))) * b}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(lcm_slow(5, 2)))
    IO.puts(Kernel.inspect(lcm_slow(12, 76)))
    IO.puts(Kernel.inspect(lcm_fast(5, 2)))
    IO.puts(Kernel.inspect(lcm_fast(12, 76)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
