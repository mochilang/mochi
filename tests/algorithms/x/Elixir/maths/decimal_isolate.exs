# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      {i} = if (:erlang.float(i)) > x do
        i = i - 1
        {i}
      else
        {i}
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def pow10(n) do
    try do
      p = 1.0
      i = 0
      while_fun = fn while_fun, i, p ->
        if i < n do
          p = p * 10.0
          i = i + 1
          while_fun.(while_fun, i, p)
        else
          {i, p}
        end
      end
      {i, p} = try do
          while_fun.(while_fun, i, p)
        catch
          {:break, {i, p}} -> {i, p}
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def round(x, n) do
    try do
      m = pow10(n)
      throw {:return, floor(x * m + 0.5) / m}
    catch
      {:return, val} -> val
    end
  end
  def decimal_isolate(number, digit_amount) do
    try do
      whole = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(number)
      frac = number - (:erlang.float(whole))
      if digit_amount > 0 do
        throw {:return, round(frac, digit_amount)}
      end
      throw {:return, frac}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(decimal_isolate(1.53, 0)))
      IO.puts(Kernel.inspect(decimal_isolate(35.345, 1)))
      IO.puts(Kernel.inspect(decimal_isolate(35.345, 2)))
      IO.puts(Kernel.inspect(decimal_isolate(35.345, 3)))
      IO.puts(Kernel.inspect(decimal_isolate(-14.789, 3)))
      IO.puts(Kernel.inspect(decimal_isolate(0.0, 2)))
      IO.puts(Kernel.inspect(decimal_isolate(-14.123, 1)))
      IO.puts(Kernel.inspect(decimal_isolate(-14.123, 2)))
      IO.puts(Kernel.inspect(decimal_isolate(-14.123, 3)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
