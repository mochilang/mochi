# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def perfect_square(num) do
    try do
      if num < 0 do
        throw {:return, false}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i * i <= num do
          if i * i == num do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def perfect_square_binary_search(n) do
    try do
      if n < 0 do
        throw {:return, false}
      end
      left = 0
      right = n
      while_fun_2 = fn while_fun_2, left, right ->
        if left <= right do
          mid = div((left + right), 2)
          sq = mid * mid
          if sq == n do
            throw {:return, true}
          end
          {left, right} = if sq > n do
            right = mid - 1
            {left, right}
          else
            left = mid + 1
            {left, right}
          end
          while_fun_2.(while_fun_2, left, right)
        else
          {left, right}
        end
      end
      {left, right} = try do
          while_fun_2.(while_fun_2, left, right)
        catch
          {:break, {left, right}} -> {left, right}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(perfect_square(9)))
    IO.puts(Kernel.inspect(perfect_square(10)))
    IO.puts(Kernel.inspect(perfect_square_binary_search(16)))
    IO.puts(Kernel.inspect(perfect_square_binary_search(10)))
    IO.puts(Kernel.inspect(perfect_square_binary_search(-1)))
  end
end
Main.main()
