# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def check_polygon(nums) do
    try do
      if _len(nums) < 2 do
        raise("Monogons and Digons are not polygons in the Euclidean space")
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(nums) do
          if Enum.at(nums, i) <= 0.0 do
            raise("All values must be greater than 0")
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      total = 0.0
      max_side = 0.0
      i = 0
      while_fun_2 = fn while_fun_2, i, max_side, total ->
        if i < _len(nums) do
          v = Enum.at(nums, i)
          total = total + v
          {max_side} = if v > max_side do
            max_side = v
            {max_side}
          else
            {max_side}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, max_side, total)
        else
          {i, max_side, total}
        end
      end
      {i, max_side, total} = try do
          while_fun_2.(while_fun_2, i, max_side, total)
        catch
          {:break, {i, max_side, total}} -> {i, max_side, total}
        end

      throw {:return, max_side < (total - max_side)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:nums, [3.0, 7.0, 13.0, 2.0])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(check_polygon([6.0, 10.0, 5.0])))
    IO.puts(Kernel.inspect(check_polygon([3.0, 7.0, 13.0, 2.0])))
    IO.puts(Kernel.inspect(check_polygon([1.0, 4.3, 5.2, 12.2])))
    Process.put(:_, check_polygon(Process.get(:nums)))
    IO.puts(Kernel.inspect(Process.get(:nums)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
