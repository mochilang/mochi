# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def slow_primes(max_n) do
    try do
      result = []
      i = 2
      while_fun = fn while_fun, i, result ->
        if i <= max_n do
          j = 2
          is_prime = true
          while_fun_2 = fn while_fun_2, is_prime, j ->
            if j < i do
              {is_prime} = if rem(i, j) == 0 do
                is_prime = false
                throw {:break, {is_prime, j}}
                {is_prime}
              else
                {is_prime}
              end
              j = j + 1
              while_fun_2.(while_fun_2, is_prime, j)
            else
              {is_prime, j}
            end
          end
          {is_prime, j} = try do
              while_fun_2.(while_fun_2, is_prime, j)
            catch
              {:break, {is_prime, j}} -> {is_prime, j}
            end

          {result} = if is_prime do
            result = (result ++ [i])
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def primes(max_n) do
    try do
      result = []
      i = 2
      while_fun_3 = fn while_fun_3, i, result ->
        if i <= max_n do
          j = 2
          is_prime = true
          while_fun_4 = fn while_fun_4, is_prime, j ->
            if j * j <= i do
              {is_prime} = if rem(i, j) == 0 do
                is_prime = false
                throw {:break, {is_prime, j}}
                {is_prime}
              else
                {is_prime}
              end
              j = j + 1
              while_fun_4.(while_fun_4, is_prime, j)
            else
              {is_prime, j}
            end
          end
          {is_prime, j} = try do
              while_fun_4.(while_fun_4, is_prime, j)
            catch
              {:break, {is_prime, j}} -> {is_prime, j}
            end

          {result} = if is_prime do
            result = (result ++ [i])
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def fast_primes(max_n) do
    try do
      result = []
      {result} = if max_n >= 2 do
        result = (result ++ [2])
        {result}
      else
        {result}
      end
      i = 3
      while_fun_5 = fn while_fun_5, i, result ->
        if i <= max_n do
          j = 3
          is_prime = true
          while_fun_6 = fn while_fun_6, is_prime, j ->
            if j * j <= i do
              {is_prime} = if rem(i, j) == 0 do
                is_prime = false
                throw {:break, {is_prime, j}}
                {is_prime}
              else
                {is_prime}
              end
              j = j + 2
              while_fun_6.(while_fun_6, is_prime, j)
            else
              {is_prime, j}
            end
          end
          {is_prime, j} = try do
              while_fun_6.(while_fun_6, is_prime, j)
            catch
              {:break, {is_prime, j}} -> {is_prime, j}
            end

          {result} = if is_prime do
            result = (result ++ [i])
            {result}
          else
            {result}
          end
          i = i + 2
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(slow_primes(25)))
    IO.puts(Kernel.inspect(primes(25)))
    IO.puts(Kernel.inspect(fast_primes(25)))
  end
end
Main.main()
