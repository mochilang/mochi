# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def two_pointer(nums, target) do
    try do
      i = 0
      j = _len(nums) - 1
      while_fun = fn while_fun, i, j ->
        if i < j do
          s = Enum.at(nums, i) + Enum.at(nums, j)
          if s == target do
            throw {:return, [i, j]}
          end
          {i, j} = if s < target do
            i = i + 1
            {i, j}
          else
            j = j - 1
            {i, j}
          end
          while_fun.(while_fun, i, j)
        else
          {i, j}
        end
      end
      {i, j} = try do
          while_fun.(while_fun, i, j)
        catch
          {:break, {i, j}} -> {i, j}
        end

      throw {:return, []}
    catch
      {:return, val} -> val
    end
  end
  def test_two_pointer() do
    try do
      if two_pointer([2, 7, 11, 15], 9) != [0, 1] do
        raise("case1")
      end
      if two_pointer([2, 7, 11, 15], 17) != [0, 3] do
        raise("case2")
      end
      if two_pointer([2, 7, 11, 15], 18) != [1, 2] do
        raise("case3")
      end
      if two_pointer([2, 7, 11, 15], 26) != [2, 3] do
        raise("case4")
      end
      if two_pointer([1, 3, 3], 6) != [1, 2] do
        raise("case5")
      end
      if _len(two_pointer([2, 7, 11, 15], 8)) != 0 do
        raise("case6")
      end
      if _len(two_pointer([0, 3, 6, 9, 12, 15, 18, 21, 24, 27], 19)) != 0 do
        raise("case7")
      end
      if _len(two_pointer([1, 2, 3], 6)) != 0 do
        raise("case8")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_two_pointer()
      IO.puts(Kernel.inspect(two_pointer([2, 7, 11, 15], 9)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
