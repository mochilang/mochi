# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def prime_factors(n) do
    try do
      if n < 2 do
        throw {:return, []}
      end
      num = n
      i = 2
      factors = []
      while_fun = fn while_fun, factors, i, num ->
        if i * i <= num do
          {factors, i, num} = if rem(num, i) == 0 do
            factors = (factors ++ [i])
            num = div(num, i)
            {factors, i, num}
          else
            i = i + 1
            {factors, i, num}
          end
          while_fun.(while_fun, factors, i, num)
        else
          {factors, i, num}
        end
      end
      {factors, i, num} = try do
          while_fun.(while_fun, factors, i, num)
        catch
          {:break, {factors, i, num}} -> {factors, i, num}
        end

      {factors} = if num > 1 do
        factors = (factors ++ [num])
        {factors}
      else
        {factors}
      end
      throw {:return, factors}
    catch
      {:return, val} -> val
    end
  end
  def list_eq(a, b) do
    try do
      if _len(a) != _len(b) do
        throw {:return, false}
      end
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(a) do
          if Enum.at(a, i) != Enum.at(b, i) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def test_prime_factors() do
    try do
      if !list_eq(prime_factors(0), []) do
        raise("prime_factors(0) failed")
      end
      if !list_eq(prime_factors(100), [2, 2, 5, 5]) do
        raise("prime_factors(100) failed")
      end
      if !list_eq(prime_factors(2560), [2, 2, 2, 2, 2, 2, 2, 2, 2, 5]) do
        raise("prime_factors(2560) failed")
      end
      if !list_eq(prime_factors(97), [97]) do
        raise("prime_factors(97) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_prime_factors()
      IO.puts(Kernel.inspect(prime_factors(100)))
      IO.puts(Kernel.inspect(prime_factors(2560)))
      IO.puts(Kernel.inspect(prime_factors(97)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
