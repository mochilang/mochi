# Code generated by Mochi transpiler 2025-08-12 08:15 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def abs_val(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def validate_point(p) do
    try do
      if _len(p) == 0 do
        raise("Missing an input")
      end
    catch
      {:return, val} -> val
    end
  end
  def manhattan_distance(a, b) do
    try do
      validate_point(a)
      validate_point(b)
      if _len(a) != _len(b) do
        raise("Both points must be in the same n-dimensional space")
      end
      total = 0.0
      i = 0
      while_fun = fn while_fun, i, total ->
        if i < _len(a) do
          total = total + abs_val(Enum.at(a, i, []) - Enum.at(b, i, []))
          i = i + 1
          while_fun.(while_fun, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun.(while_fun, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def manhattan_distance_one_liner(a, b) do
    try do
      throw {:return, manhattan_distance(a, b)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(manhattan_distance([1.0, 1.0], [2.0, 2.0])))
    IO.puts(Kernel.inspect(manhattan_distance([1.5, 1.5], [2.0, 2.0])))
    IO.puts(Kernel.inspect(manhattan_distance_one_liner([1.5, 1.5], [2.5, 2.0])))
    IO.puts(Kernel.inspect(manhattan_distance_one_liner([-3.0, -3.0, -3.0], [0.0, 0.0, 0.0])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
