# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def abs_int(n) do
    try do
      throw {:return, ((if n < 0, do: -n, else: n))}
    catch
      {:return, val} -> val
    end
  end
  def greatest_common_divisor(a, b) do
    try do
      x = abs_int(a)
      y = abs_int(b)
      if x == 0 do
        throw {:return, y}
      end
      throw {:return, greatest_common_divisor(rem(y, x), x)}
    catch
      {:return, val} -> val
    end
  end
  def gcd_by_iterative(x, y) do
    try do
      a = abs_int(x)
      b = abs_int(y)
      while_fun = fn while_fun, a, b ->
        if b != 0 do
          temp = b
          b = rem(a, b)
          a = temp
          while_fun.(while_fun, a, b)
        else
          {a, b}
        end
      end
      {a, b} = try do
          while_fun.(while_fun, a, b)
        catch
          {:break, {a, b}} -> {a, b}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(greatest_common_divisor(24, 40)))
    IO.puts(Kernel.inspect(greatest_common_divisor(1, 1)))
    IO.puts(Kernel.inspect(greatest_common_divisor(1, 800)))
    IO.puts(Kernel.inspect(greatest_common_divisor(11, 37)))
    IO.puts(Kernel.inspect(greatest_common_divisor(3, 5)))
    IO.puts(Kernel.inspect(greatest_common_divisor(16, 4)))
    IO.puts(Kernel.inspect(greatest_common_divisor(-3, 9)))
    IO.puts(Kernel.inspect(greatest_common_divisor(9, -3)))
    IO.puts(Kernel.inspect(greatest_common_divisor(3, -9)))
    IO.puts(Kernel.inspect(greatest_common_divisor(-3, -9)))
    IO.puts(Kernel.inspect(gcd_by_iterative(24, 40)))
    IO.puts(Kernel.inspect(greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)))
    IO.puts(Kernel.inspect(gcd_by_iterative(-3, -9)))
    IO.puts(Kernel.inspect(gcd_by_iterative(3, -9)))
    IO.puts(Kernel.inspect(gcd_by_iterative(1, -800)))
    IO.puts(Kernel.inspect(gcd_by_iterative(11, 37)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
