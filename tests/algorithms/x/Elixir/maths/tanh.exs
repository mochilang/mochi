# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def expApprox(x) do
    try do
      neg = false
      y = x
      {neg, y} = if x < 0.0 do
        neg = true
        y = -x
        {neg, y}
      else
        {neg, y}
      end
      term = 1.0
      sum = 1.0
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n < 30 do
          term = term * y / (:erlang.float(n))
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, _} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          {:break, {n, sum, _}} -> {n, sum, 0}
        end

      if neg do
        throw {:return, 1.0 / sum}
      end
      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def tangent_hyperbolic(vector) do
    try do
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(vector) do
          x = Enum.at(vector, i, [])
          t = (2.0 / (1.0 + expApprox(-2.0 * x))) - 1.0
          result = (result ++ [t])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      v1 = [1.0, 5.0, 6.0, -0.67]
      v2 = [8.0, 10.0, 2.0, -0.98, 13.0]
      IO.puts(Kernel.inspect(tangent_hyperbolic(v1)))
      IO.puts(Kernel.inspect(tangent_hyperbolic(v2)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
