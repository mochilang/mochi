# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  def binomial_coefficient(n, r) do
    try do
      if n < 0 || r < 0 do
        raise("n and r must be non-negative integers")
      end
      if n == 0 || r == 0 do
        throw {:return, 1}
      end
      c = []
      {c} = Enum.reduce((0..((r + 1) - 1)//1), {c}, fn _, {c} ->
        c = (c ++ [0])
        {c}
      end)
      c = List.replace_at(c, 0, 1)
      i = 1
      while_fun = fn while_fun, c, i ->
        if i <= n do
          j = (if i < r, do: i, else: r)
          while_fun_2 = fn while_fun_2, c, j ->
            if j > 0 do
              c = List.replace_at(c, j, Enum.at(c, j) + Enum.at(c, j - 1))
              j = j - 1
              while_fun_2.(while_fun_2, c, j)
            else
              {c, j}
            end
          end
          {c, j} = try do
              while_fun_2.(while_fun_2, c, j)
            catch
              {:break, {c, j}} -> {c, j}
            end

          i = i + 1
          while_fun.(while_fun, c, i)
        else
          {c, i}
        end
      end
      {c, i} = try do
          while_fun.(while_fun, c, i)
        catch
          {:break, {c, i}} -> {c, i}
        end

      throw {:return, Enum.at(c, r)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(binomial_coefficient(10, 5)))
  end
end
Main.main()
