# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          r = rem(x, y)
          x = y
          y = r
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      if x < 0 do
        throw {:return, -x}
      end
      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def get_greatest_common_divisor(nums) do
    try do
      if _len(nums) == 0 do
        raise("at least one number is required")
      end
      g = Enum.at(nums, 0, [])
      if g <= 0 do
        raise("numbers must be integer and greater than zero")
      end
      i = 1
      while_fun_2 = fn while_fun_2, g, i ->
        if i < _len(nums) do
          n = Enum.at(nums, i, [])
          if n <= 0 do
            raise("numbers must be integer and greater than zero")
          end
          g = gcd(g, n)
          i = i + 1
          while_fun_2.(while_fun_2, g, i)
        else
          {g, i}
        end
      end
      {g, i} = try do
          while_fun_2.(while_fun_2, g, i)
        catch
          {:break, {g, i}} -> {g, i}
        end

      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(get_greatest_common_divisor([18, 45])))
    IO.puts(Kernel.inspect(get_greatest_common_divisor([23, 37])))
    IO.puts(Kernel.inspect(get_greatest_common_divisor([2520, 8350])))
    IO.puts(Kernel.inspect(get_greatest_common_divisor([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
