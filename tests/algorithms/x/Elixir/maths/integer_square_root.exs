# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def integer_square_root(num) do
    try do
      if num < 0 do
        raise("num must be non-negative integer")
      end
      if num < 2 do
        throw {:return, num}
      end
      left_bound = 0
      right_bound = div(num, 2)
      while_fun = fn while_fun, left_bound, right_bound ->
        if left_bound <= right_bound do
          mid = left_bound + div((right_bound - left_bound), 2)
          mid_squared = mid * mid
          if mid_squared == num do
            throw {:return, mid}
          end
          {left_bound, right_bound} = if mid_squared < num do
            left_bound = mid + 1
            {left_bound, right_bound}
          else
            right_bound = mid - 1
            {left_bound, right_bound}
          end
          while_fun.(while_fun, left_bound, right_bound)
        else
          {left_bound, right_bound}
        end
      end
      {left_bound, right_bound} = try do
          while_fun.(while_fun, left_bound, right_bound)
        catch
          {:break, {left_bound, right_bound}} -> {left_bound, right_bound}
        end

      throw {:return, right_bound}
    catch
      {:return, val} -> val
    end
  end
  def test_integer_square_root() do
    try do
      expected = [0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4]
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(expected) do
          result = integer_square_root(i)
          if result != Enum.at(expected, i) do
            raise(("test failed at index " <> Kernel.to_string(i)))
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      if integer_square_root(625) != 25 do
        raise("sqrt of 625 incorrect")
      end
      if integer_square_root(2147483647) != 46340 do
        raise("sqrt of max int incorrect")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_integer_square_root()
      IO.puts(Kernel.inspect(integer_square_root(625)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
