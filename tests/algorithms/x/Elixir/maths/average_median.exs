# Code generated by Mochi transpiler 2025-08-08 20:44 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def bubble_sort(nums) do
    try do
      arr = nums
      n = _len(arr)
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < n do
          j = 0
          while_fun_2 = fn while_fun_2, arr, j ->
            if j < n - 1 do
              a = Enum.at(arr, j)
              b = Enum.at(arr, j + 1)
              {arr} = if a > b do
                arr = List.replace_at(arr, j, b)
                arr = List.replace_at(arr, j + 1, a)
                {arr}
              else
                {arr}
              end
              j = j + 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def median(nums) do
    try do
      sorted_list = bubble_sort(nums)
      length = _len(sorted_list)
      mid_index = div(length, 2)
      if rem(length, 2) == 0 do
        throw {:return, (:erlang.float((Enum.at(sorted_list, mid_index) + Enum.at(sorted_list, mid_index - 1)))) / 2.0}
      else
        throw {:return, :erlang.float(Enum.at(sorted_list, mid_index))}
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(median([0])))
    IO.puts(Kernel.inspect(median([4, 1, 3, 2])))
    IO.puts(Kernel.inspect(median([2, 70, 6, 50, 20, 8, 4])))
  end
end
Main.main()
