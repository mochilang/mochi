# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sum_of_harmonic_progression(first_term, common_difference, number_of_terms) do
    try do
      arithmetic_progression = [1.0 / first_term]
      term = 1.0 / first_term
      i = 0
      while_fun = fn while_fun, arithmetic_progression, i, term ->
        if i < number_of_terms - 1 do
          term = term + common_difference
          arithmetic_progression = (arithmetic_progression ++ [term])
          i = i + 1
          while_fun.(while_fun, arithmetic_progression, i, term)
        else
          {arithmetic_progression, i, term}
        end
      end
      {arithmetic_progression, i, term} = try do
          while_fun.(while_fun, arithmetic_progression, i, term)
        catch
          {:break, {arithmetic_progression, i, term}} -> {arithmetic_progression, i, term}
        end

      total = 0.0
      j = 0
      while_fun_2 = fn while_fun_2, j, total ->
        if j < _len(arithmetic_progression) do
          total = total + (1.0 / Enum.at(arithmetic_progression, j))
          j = j + 1
          while_fun_2.(while_fun_2, j, total)
        else
          {j, total}
        end
      end
      {j, total} = try do
          while_fun_2.(while_fun_2, j, total)
        catch
          {:break, {j, total}} -> {j, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def abs_val(num) do
    try do
      throw {:return, ((if num < 0.0, do: -num, else: num))}
    catch
      {:return, val} -> val
    end
  end
  def test_sum_of_harmonic_progression() do
    try do
      result1 = sum_of_harmonic_progression(0.5, 2.0, 2)
      if abs_val(result1 - 0.75) > 0.0000001 do
        raise("test1 failed")
      end
      result2 = sum_of_harmonic_progression(0.2, 5.0, 5)
      if abs_val(result2 - 0.45666666666666667) > 0.0000001 do
        raise("test2 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_sum_of_harmonic_progression()
      IO.puts(Kernel.inspect(sum_of_harmonic_progression(0.5, 2.0, 2)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
