# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def sum_of_series(first_term, common_diff, num_of_terms) do
    try do
      total = div(num_of_terms * (2 * first_term + (num_of_terms - 1) * common_diff), 2)
      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def test_sum_of_series() do
    try do
      if sum_of_series(1, 1, 10) != 55 do
        raise("sum_of_series(1, 1, 10) failed")
      end
      if sum_of_series(1, 10, 100) != 49600 do
        raise("sum_of_series(1, 10, 100) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_sum_of_series()
      IO.puts(Kernel.inspect(sum_of_series(1, 1, 10)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
