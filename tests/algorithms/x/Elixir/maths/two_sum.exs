# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def two_sum(nums, target) do
    try do
      chk_map = %{}
      idx = 0
      while_fun = fn while_fun, chk_map, idx ->
        if idx < _len(nums) do
          val = Enum.at(nums, idx)
          compl = target - val
          if Map.has_key?(chk_map, compl) do
            throw {:return, [chk_map[compl] - 1, idx]}
          end
          chk_map = Map.put(chk_map, val, idx + 1)
          idx = idx + 1
          while_fun.(while_fun, chk_map, idx)
        else
          {chk_map, idx}
        end
      end
      {chk_map, idx} = try do
          while_fun.(while_fun, chk_map, idx)
        catch
          {:break, {chk_map, idx}} -> {chk_map, idx}
        end

      throw {:return, []}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(two_sum([2, 7, 11, 15], 9)))
  end
end
Main.main()
