# Code generated by Mochi transpiler 2025-08-08 20:44 +0700
defmodule Main do
  def aliquot_sum(n) do
    try do
      if n <= 0 do
        raise("Input must be positive")
      end
      total = 0
      divisor = 1
      while_fun = fn while_fun, divisor, total ->
        if divisor <= div(n, 2) do
          {total} = if rem(n, divisor) == 0 do
            total = total + divisor
            {total}
          else
            {total}
          end
          divisor = divisor + 1
          while_fun.(while_fun, divisor, total)
        else
          {divisor, total}
        end
      end
      {divisor, total} = try do
          while_fun.(while_fun, divisor, total)
        catch
          {:break, {divisor, total}} -> {divisor, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(aliquot_sum(15)))
    IO.puts(Kernel.inspect(aliquot_sum(6)))
    IO.puts(Kernel.inspect(aliquot_sum(12)))
    IO.puts(Kernel.inspect(aliquot_sum(1)))
    IO.puts(Kernel.inspect(aliquot_sum(19)))
  end
end
Main.main()
