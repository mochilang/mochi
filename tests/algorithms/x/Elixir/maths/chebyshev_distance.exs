# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def abs_(x) do
    try do
      if x >= 0.0 do
        throw {:return, x}
      else
        throw {:return, -x}
      end
    catch
      {:return, val} -> val
    end
  end
  def chebyshev_distance(point_a, point_b) do
    try do
      if _len(point_a) != _len(point_b) do
        raise("Both points must have the same dimension.")
      end
      max_diff = 0.0
      i = 0
      while_fun = fn while_fun, i, max_diff ->
        if i < _len(point_a) do
          diff = abs_(Enum.at(point_a, i) - Enum.at(point_b, i))
          {max_diff} = if diff > max_diff do
            max_diff = diff
            {max_diff}
          else
            {max_diff}
          end
          i = i + 1
          while_fun.(while_fun, i, max_diff)
        else
          {i, max_diff}
        end
      end
      {i, max_diff} = try do
          while_fun.(while_fun, i, max_diff)
        catch
          {:break, {i, max_diff}} -> {i, max_diff}
        end

      throw {:return, max_diff}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(chebyshev_distance([1.0, 1.0], [2.0, 2.0])))
    IO.puts(Kernel.inspect(chebyshev_distance([1.0, 1.0, 9.0], [2.0, 2.0, -5.2])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
