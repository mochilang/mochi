# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def sqrtApprox(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def factorial_float(n) do
    try do
      result = 1.0
      i = 2
      while_fun_2 = fn while_fun_2, i, result ->
        if i <= n do
          result = result * (:erlang.float(i))
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def pi(n) do
    try do
      if n < 1 do
        raise("Undefined for non-natural numbers")
      end
      iterations = div((n + 13), 14)
      constant_term = 426880.0 * sqrtApprox(10005.0)
      exponential_term = 1.0
      linear_term = 13591409.0
      partial_sum = linear_term
      k = 1
      while_fun_3 = fn while_fun_3, exponential_term, k, linear_term, partial_sum ->
        if k < iterations do
          k6 = 6 * k
          k3 = 3 * k
          fact6k = factorial_float(k6)
          fact3k = factorial_float(k3)
          factk = factorial_float(k)
          multinomial = fact6k / (fact3k * factk * factk * factk)
          linear_term = linear_term + 545140134.0
          exponential_term = exponential_term * (-262537412640768000.0)
          partial_sum = partial_sum + multinomial * linear_term / exponential_term
          k = k + 1
          while_fun_3.(while_fun_3, exponential_term, k, linear_term, partial_sum)
        else
          {exponential_term, k, linear_term, partial_sum}
        end
      end
      {exponential_term, k, linear_term, partial_sum} = try do
          while_fun_3.(while_fun_3, exponential_term, k, linear_term, partial_sum)
        catch
          {:break, {exponential_term, k, linear_term, partial_sum}} -> {exponential_term, k, linear_term, partial_sum}
        end

      throw {:return, constant_term / partial_sum}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:n, 50)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(((("The first " <> Kernel.to_string(Process.get(:n))) <> " digits of pi is: ") <> Kernel.inspect(pi(Process.get(:n)))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
