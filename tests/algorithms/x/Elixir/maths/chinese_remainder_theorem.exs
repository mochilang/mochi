# Code generated by Mochi transpiler 2025-08-09 10:14 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def extended_euclid(a, b) do
    try do
      if b == 0 do
        throw {:return, %{x: 1, y: 0}}
      end
      res = extended_euclid(b, rem(a, b))
      k = div(a, b)
      throw {:return, %{x: res.y, y: res.x - k * res.y}}
    catch
      {:return, val} -> val
    end
  end
  def chinese_remainder_theorem(n1, r1, n2, r2) do
    try do
      res = extended_euclid(n1, n2)
      x = res.x
      y = res.y
      m = n1 * n2
      n = r2 * x * n1 + r1 * y * n2
      throw {:return, rem(((rem(n, m)) + m), m)}
    catch
      {:return, val} -> val
    end
  end
  def invert_modulo(a, n) do
    try do
      res = extended_euclid(a, n)
      b = res.x
      {b} = if b < 0 do
        b = rem((rem(b, n) + n), n)
        {b}
      else
        {b}
      end
      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def chinese_remainder_theorem2(n1, r1, n2, r2) do
    try do
      x = invert_modulo(n1, n2)
      y = invert_modulo(n2, n1)
      m = n1 * n2
      n = r2 * x * n1 + r1 * y * n2
      throw {:return, rem(((rem(n, m)) + m), m)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:e1, extended_euclid(10, 6))
    IO.puts(((Kernel.to_string(Process.get(:e1).x) <> ",") <> Kernel.to_string(Process.get(:e1).y)))
    Process.put(:e2, extended_euclid(7, 5))
    IO.puts(((Kernel.to_string(Process.get(:e2).x) <> ",") <> Kernel.to_string(Process.get(:e2).y)))
    IO.puts(Kernel.inspect(chinese_remainder_theorem(5, 1, 7, 3)))
    IO.puts(Kernel.inspect(chinese_remainder_theorem(6, 1, 4, 3)))
    IO.puts(Kernel.inspect(invert_modulo(2, 5)))
    IO.puts(Kernel.inspect(invert_modulo(8, 7)))
    IO.puts(Kernel.inspect(chinese_remainder_theorem2(5, 1, 7, 3)))
    IO.puts(Kernel.inspect(chinese_remainder_theorem2(6, 1, 4, 3)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
