# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  def minf(a, b) do
    try do
      throw {:return, ((if a < b, do: a, else: b))}
    catch
      {:return, val} -> val
    end
  end
  def maxf(a, b) do
    try do
      throw {:return, ((if a > b, do: a, else: b))}
    catch
      {:return, val} -> val
    end
  end
  def vol_cube(side_length) do
    try do
      if side_length < 0.0 do
        raise("vol_cube() only accepts non-negative values")
      end
      throw {:return, side_length * side_length * side_length}
    catch
      {:return, val} -> val
    end
  end
  def vol_spherical_cap(height, radius) do
    try do
      if height < 0.0 || radius < 0.0 do
        raise("vol_spherical_cap() only accepts non-negative values")
      end
      throw {:return, (1.0 / 3.0) * Process.get(:pi) * height * height * (3.0 * radius - height)}
    catch
      {:return, val} -> val
    end
  end
  def vol_sphere(radius) do
    try do
      if radius < 0.0 do
        raise("vol_sphere() only accepts non-negative values")
      end
      throw {:return, (4.0 / 3.0) * Process.get(:pi) * radius * radius * radius}
    catch
      {:return, val} -> val
    end
  end
  def vol_spheres_intersect(radius_1, radius_2, centers_distance) do
    try do
      if radius_1 < 0.0 || radius_2 < 0.0 || centers_distance < 0.0 do
        raise("vol_spheres_intersect() only accepts non-negative values")
      end
      if centers_distance == 0.0 do
        throw {:return, vol_sphere(minf(radius_1, radius_2))}
      end
      h1 = (radius_1 - radius_2 + centers_distance) * (radius_1 + radius_2 - centers_distance) / (2.0 * centers_distance)
      h2 = (radius_2 - radius_1 + centers_distance) * (radius_2 + radius_1 - centers_distance) / (2.0 * centers_distance)
      throw {:return, vol_spherical_cap(h1, radius_2) + vol_spherical_cap(h2, radius_1)}
    catch
      {:return, val} -> val
    end
  end
  def vol_spheres_union(radius_1, radius_2, centers_distance) do
    try do
      if radius_1 <= 0.0 || radius_2 <= 0.0 || centers_distance < 0.0 do
        raise("vol_spheres_union() only accepts non-negative values, non-zero radius")
      end
      if centers_distance == 0.0 do
        throw {:return, vol_sphere(maxf(radius_1, radius_2))}
      end
      throw {:return, vol_sphere(radius_1) + vol_sphere(radius_2) - vol_spheres_intersect(radius_1, radius_2, centers_distance)}
    catch
      {:return, val} -> val
    end
  end
  def vol_cuboid(width, height, length) do
    try do
      if width < 0.0 || height < 0.0 || length < 0.0 do
        raise("vol_cuboid() only accepts non-negative values")
      end
      throw {:return, width * height * length}
    catch
      {:return, val} -> val
    end
  end
  def vol_cone(area_of_base, height) do
    try do
      if height < 0.0 || area_of_base < 0.0 do
        raise("vol_cone() only accepts non-negative values")
      end
      throw {:return, area_of_base * height / 3.0}
    catch
      {:return, val} -> val
    end
  end
  def vol_right_circ_cone(radius, height) do
    try do
      if height < 0.0 || radius < 0.0 do
        raise("vol_right_circ_cone() only accepts non-negative values")
      end
      throw {:return, Process.get(:pi) * radius * radius * height / 3.0}
    catch
      {:return, val} -> val
    end
  end
  def vol_prism(area_of_base, height) do
    try do
      if height < 0.0 || area_of_base < 0.0 do
        raise("vol_prism() only accepts non-negative values")
      end
      throw {:return, area_of_base * height}
    catch
      {:return, val} -> val
    end
  end
  def vol_pyramid(area_of_base, height) do
    try do
      if height < 0.0 || area_of_base < 0.0 do
        raise("vol_pyramid() only accepts non-negative values")
      end
      throw {:return, area_of_base * height / 3.0}
    catch
      {:return, val} -> val
    end
  end
  def vol_hemisphere(radius) do
    try do
      if radius < 0.0 do
        raise("vol_hemisphere() only accepts non-negative values")
      end
      throw {:return, radius * radius * radius * Process.get(:pi) * 2.0 / 3.0}
    catch
      {:return, val} -> val
    end
  end
  def vol_circular_cylinder(radius, height) do
    try do
      if height < 0.0 || radius < 0.0 do
        raise("vol_circular_cylinder() only accepts non-negative values")
      end
      throw {:return, radius * radius * height * Process.get(:pi)}
    catch
      {:return, val} -> val
    end
  end
  def vol_hollow_circular_cylinder(inner_radius, outer_radius, height) do
    try do
      if inner_radius < 0.0 || outer_radius < 0.0 || height < 0.0 do
        raise("vol_hollow_circular_cylinder() only accepts non-negative values")
      end
      if outer_radius <= inner_radius do
        raise("outer_radius must be greater than inner_radius")
      end
      throw {:return, Process.get(:pi) * (outer_radius * outer_radius - inner_radius * inner_radius) * height}
    catch
      {:return, val} -> val
    end
  end
  def vol_conical_frustum(height, radius_1, radius_2) do
    try do
      if radius_1 < 0.0 || radius_2 < 0.0 || height < 0.0 do
        raise("vol_conical_frustum() only accepts non-negative values")
      end
      throw {:return, (1.0 / 3.0) * Process.get(:pi) * height * (radius_1 * radius_1 + radius_2 * radius_2 + radius_1 * radius_2)}
    catch
      {:return, val} -> val
    end
  end
  def vol_torus(torus_radius, tube_radius) do
    try do
      if torus_radius < 0.0 || tube_radius < 0.0 do
        raise("vol_torus() only accepts non-negative values")
      end
      throw {:return, 2.0 * Process.get(:pi) * Process.get(:pi) * torus_radius * tube_radius * tube_radius}
    catch
      {:return, val} -> val
    end
  end
  def vol_icosahedron(tri_side) do
    try do
      if tri_side < 0.0 do
        raise("vol_icosahedron() only accepts non-negative values")
      end
      throw {:return, tri_side * tri_side * tri_side * (3.0 + Process.get(:sqrt5)) * 5.0 / 12.0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("Volumes:")
      IO.puts(("Cube: " <> Kernel.inspect(vol_cube(2.0))))
      IO.puts(("Cuboid: " <> Kernel.inspect(vol_cuboid(2.0, 2.0, 2.0))))
      IO.puts(("Cone: " <> Kernel.inspect(vol_cone(2.0, 2.0))))
      IO.puts(("Right Circular Cone: " <> Kernel.inspect(vol_right_circ_cone(2.0, 2.0))))
      IO.puts(("Prism: " <> Kernel.inspect(vol_prism(2.0, 2.0))))
      IO.puts(("Pyramid: " <> Kernel.inspect(vol_pyramid(2.0, 2.0))))
      IO.puts(("Sphere: " <> Kernel.inspect(vol_sphere(2.0))))
      IO.puts(("Hemisphere: " <> Kernel.inspect(vol_hemisphere(2.0))))
      IO.puts(("Circular Cylinder: " <> Kernel.inspect(vol_circular_cylinder(2.0, 2.0))))
      IO.puts(("Torus: " <> Kernel.inspect(vol_torus(2.0, 2.0))))
      IO.puts(("Conical Frustum: " <> Kernel.inspect(vol_conical_frustum(2.0, 2.0, 4.0))))
      IO.puts(("Spherical cap: " <> Kernel.inspect(vol_spherical_cap(1.0, 2.0))))
      IO.puts(("Spheres intersection: " <> Kernel.inspect(vol_spheres_intersect(2.0, 2.0, 1.0))))
      IO.puts(("Spheres union: " <> Kernel.inspect(vol_spheres_union(2.0, 2.0, 1.0))))
      IO.puts(("Hollow Circular Cylinder: " <> Kernel.inspect(vol_hollow_circular_cylinder(1.0, 2.0, 3.0))))
      IO.puts(("Icosahedron: " <> Kernel.inspect(vol_icosahedron(2.5))))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:sqrt5, 2.23606797749979)
end
Main.main()
