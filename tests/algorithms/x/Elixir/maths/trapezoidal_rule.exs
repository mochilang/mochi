# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def f(x) do
    try do
      throw {:return, x * x}
    catch
      {:return, val} -> val
    end
  end
  def make_points(a, b, h) do
    try do
      xs = []
      x = a + h
      while_fun = fn while_fun, x, xs ->
        if x <= (b - h) do
          xs = (xs ++ [x])
          x = x + h
          while_fun.(while_fun, x, xs)
        else
          {x, xs}
        end
      end
      {x, xs} = try do
          while_fun.(while_fun, x, xs)
        catch
          {:break, {x, xs}} -> {x, xs}
        end

      throw {:return, xs}
    catch
      {:return, val} -> val
    end
  end
  def trapezoidal_rule(boundary, steps) do
    try do
      h = (Enum.at(boundary, 1) - Enum.at(boundary, 0)) / steps
      a = Enum.at(boundary, 0)
      b = Enum.at(boundary, 1)
      xs = make_points(a, b, h)
      y = (h / 2.0) * f(a)
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(xs) do
          y = y + h * f(Enum.at(xs, i))
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      y = y + (h / 2.0) * f(b)
      throw {:return, y}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:a, 0.0)
  Process.put(:b, 1.0)
  Process.put(:steps, 10.0)
  def main() do
    Process.put(:boundary, [Process.get(:a), Process.get(:b)])
    Process.put(:y, trapezoidal_rule(Process.get(:boundary), Process.get(:steps)))
    IO.puts(("y = " <> Kernel.to_string(Process.get(:y))))
  end
end
Main.main()
