# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def factorial(n) do
    try do
      if n < 0 do
        raise("factorial() not defined for negative values")
      end
      value = 1
      i = 1
      while_fun = fn while_fun, i, value ->
        if i <= n do
          value = value * i
          i = i + 1
          while_fun.(while_fun, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun.(while_fun, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def factorial_recursive(n) do
    try do
      if n < 0 do
        raise("factorial() not defined for negative values")
      end
      if n <= 1 do
        throw {:return, 1}
      end
      throw {:return, n * factorial_recursive(n - 1)}
    catch
      {:return, val} -> val
    end
  end
  def test_zero() do
    try do
      if factorial(0) != 1 do
        raise("factorial(0) failed")
      end
      if factorial_recursive(0) != 1 do
        raise("factorial_recursive(0) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def test_positive_integers() do
    try do
      if factorial(1) != 1 do
        raise("factorial(1) failed")
      end
      if factorial_recursive(1) != 1 do
        raise("factorial_recursive(1) failed")
      end
      if factorial(5) != 120 do
        raise("factorial(5) failed")
      end
      if factorial_recursive(5) != 120 do
        raise("factorial_recursive(5) failed")
      end
      if factorial(7) != 5040 do
        raise("factorial(7) failed")
      end
      if factorial_recursive(7) != 5040 do
        raise("factorial_recursive(7) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def test_large_number() do
    try do
      if factorial(10) != 3628800 do
        raise("factorial(10) failed")
      end
      if factorial_recursive(10) != 3628800 do
        raise("factorial_recursive(10) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def run_tests() do
    try do
      test_zero()
      test_positive_integers()
      test_large_number()
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      run_tests()
      IO.puts(Kernel.inspect(factorial(6)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
