# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def catalan(n) do
    try do
      if n < 1 do
        raise((("Input value of [number=" <> Kernel.to_string(n)) <> "] must be > 0"))
      end
      current = 1
      i = 1
      while_fun = fn while_fun, current, i ->
        if i < n do
          current = current * (4 * i - 2)
          current = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(current, (i + 1))))
          i = i + 1
          while_fun.(while_fun, current, i)
        else
          {current, i}
        end
      end
      {current, i} = try do
          while_fun.(while_fun, current, i)
        catch
          {:break, {current, i}} -> {current, i}
        end

      throw {:return, current}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      if catalan(1) != 1 do
        raise("catalan(1) should be 1")
      end
      if catalan(5) != 14 do
        raise("catalan(5) should be 14")
      end
      IO.puts(Kernel.inspect(catalan(5)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
