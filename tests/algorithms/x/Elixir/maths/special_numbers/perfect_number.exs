# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def perfect(n) do
    try do
      if n <= 0 do
        throw {:return, false}
      end
      limit = div(n, 2)
      sum = 0
      i = 1
      while_fun = fn while_fun, i, sum ->
        if i <= limit do
          {sum} = if rem(n, i) == 0 do
            sum = sum + i
            {sum}
          else
            {sum}
          end
          i = i + 1
          while_fun.(while_fun, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun.(while_fun, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, sum == n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      numbers = [6, 28, 29, 12, 496, 8128, 0, -1]
      idx = 0
      while_fun_2 = fn while_fun_2, idx ->
        if idx < _len(numbers) do
          num = Enum.at(numbers, idx)
          if perfect(num) do
            IO.puts((Kernel.inspect(num) <> " is a Perfect Number."))
          else
            IO.puts((Kernel.inspect(num) <> " is not a Perfect Number."))
          end
          idx = idx + 1
          while_fun_2.(while_fun_2, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun_2.(while_fun_2, idx)
        catch
          {:break, {idx}} -> idx
        end

    catch
      {:return, val} -> val
    end
  end
end
Main.main()
