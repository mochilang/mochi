# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def int_sqrt(n) do
    try do
      r = 0
      while_fun = fn while_fun, r ->
        if (r + 1) * (r + 1) <= n do
          r = r + 1
          while_fun.(while_fun, r)
        else
          r
        end
      end
      r = try do
          while_fun.(while_fun, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def is_pronic(n) do
    try do
      if n < 0 do
        throw {:return, false}
      end
      if rem(n, 2) != 0 do
        throw {:return, false}
      end
      root = int_sqrt(n)
      throw {:return, n == root * (root + 1)}
    catch
      {:return, val} -> val
    end
  end
  def test_is_pronic() do
    try do
      if is_pronic(-1) do
        raise("-1 should not be pronic")
      end
      if !is_pronic(0) do
        raise("0 should be pronic")
      end
      if !is_pronic(2) do
        raise("2 should be pronic")
      end
      if is_pronic(5) do
        raise("5 should not be pronic")
      end
      if !is_pronic(6) do
        raise("6 should be pronic")
      end
      if is_pronic(8) do
        raise("8 should not be pronic")
      end
      if !is_pronic(30) do
        raise("30 should be pronic")
      end
      if is_pronic(32) do
        raise("32 should not be pronic")
      end
      if !is_pronic(2147441940) do
        raise("2147441940 should be pronic")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_is_pronic()
      IO.puts(Kernel.inspect(is_pronic(56)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
