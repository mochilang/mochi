# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def factorial(digit) do
    try do
      throw {:return, ((if digit == 0 || digit == 1, do: 1, else: digit * factorial(digit - 1)))}
    catch
      {:return, val} -> val
    end
  end
  def is_krishnamurthy(n) do
    try do
      duplicate = n
      fact_sum = 0
      while_fun = fn while_fun, duplicate, fact_sum ->
        if duplicate > 0 do
          digit = rem(duplicate, 10)
          fact_sum = fact_sum + factorial(digit)
          duplicate = div(duplicate, 10)
          while_fun.(while_fun, duplicate, fact_sum)
        else
          {duplicate, fact_sum}
        end
      end
      {duplicate, fact_sum} = try do
          while_fun.(while_fun, duplicate, fact_sum)
        catch
          {:break, {duplicate, fact_sum}} -> {duplicate, fact_sum}
        end

      throw {:return, fact_sum == n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(is_krishnamurthy(145)))
    IO.puts(Kernel.inspect(is_krishnamurthy(240)))
    IO.puts(Kernel.inspect(is_krishnamurthy(1)))
  end
end
Main.main()
