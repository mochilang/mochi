# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def factorial(digit) do
    try do
      throw {:return, ((if digit == 0 || digit == 1, do: 1, else: digit * factorial(digit - 1)))}
    catch
      {:return, val} -> val
    end
  end
  def is_krishnamurthy(n) do
    try do
      duplicate = n
      fact_sum = 0
      while_fun = fn while_fun, duplicate, fact_sum ->
        if duplicate > 0 do
          digit = rem(duplicate, 10)
          fact_sum = fact_sum + factorial(digit)
          duplicate = div(duplicate, 10)
          while_fun.(while_fun, duplicate, fact_sum)
        else
          {duplicate, fact_sum}
        end
      end
      {duplicate, fact_sum} = try do
          while_fun.(while_fun, duplicate, fact_sum)
        catch
          {:break, {duplicate, fact_sum}} -> {duplicate, fact_sum}
        end

      throw {:return, fact_sum == n}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_krishnamurthy(145)))
    IO.puts(Kernel.inspect(is_krishnamurthy(240)))
    IO.puts(Kernel.inspect(is_krishnamurthy(1)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
