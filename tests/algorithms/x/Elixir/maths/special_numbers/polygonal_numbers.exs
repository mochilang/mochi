# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def polygonal_num(n, sides) do
    try do
      if n < 0 || sides < 3 do
        raise("Invalid input: num must be >= 0 and sides must be >= 3.")
      end
      term1 = (sides - 2) * n * n
      term2 = (sides - 4) * n
      throw {:return, div((term1 - term2), 2)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = 5
      sides = 4
      result = polygonal_num(n, sides)
      IO.puts(Kernel.to_string(result))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
