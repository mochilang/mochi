# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def is_automorphic_number(number) do
    try do
      if number < 0 do
        throw {:return, false}
      end
      n = number
      sq = number * number
      while_fun = fn while_fun, n, sq ->
        if n > 0 do
          if rem(n, 10) != rem(sq, 10) do
            throw {:return, false}
          end
          n = div(n, 10)
          sq = div(sq, 10)
          while_fun.(while_fun, n, sq)
        else
          {n, sq}
        end
      end
      {n, sq} = try do
          while_fun.(while_fun, n, sq)
        catch
          {:break, {n, sq}} -> {n, sq}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_automorphic_number(0)))
    IO.puts(Kernel.inspect(is_automorphic_number(1)))
    IO.puts(Kernel.inspect(is_automorphic_number(5)))
    IO.puts(Kernel.inspect(is_automorphic_number(6)))
    IO.puts(Kernel.inspect(is_automorphic_number(7)))
    IO.puts(Kernel.inspect(is_automorphic_number(25)))
    IO.puts(Kernel.inspect(is_automorphic_number(376)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
