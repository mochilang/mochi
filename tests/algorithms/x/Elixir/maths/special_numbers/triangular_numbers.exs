# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def triangular_number(position) do
    try do
      if position < 0 do
        raise("position must be non-negative")
      end
      throw {:return, div(position * (position + 1), 2)}
    catch
      {:return, val} -> val
    end
  end
  def test_triangular_number() do
    try do
      if triangular_number(1) != 1 do
        raise("triangular_number(1) failed")
      end
      if triangular_number(3) != 6 do
        raise("triangular_number(3) failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_triangular_number()
      IO.puts(Kernel.inspect(triangular_number(10)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
