# Code generated by Mochi transpiler 2025-08-09 16:15 +0700
defmodule Main do
  def abs_int(x) do
    try do
      throw {:return, ((if x < 0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def gcd(a, b) do
    try do
      throw {:return, ((if a == 0, do: abs_int(b), else: gcd(rem(b, a), a)))}
    catch
      {:return, val} -> val
    end
  end
  def power(x, y, m) do
    try do
      if y == 0 do
        throw {:return, rem(1, m)}
      end
      temp = rem(power(x, div(y, 2), m), m)
      temp = rem((temp * temp), m)
      {temp} = if rem(y, 2) == 1 do
        temp = rem((temp * x), m)
        {temp}
      else
        {temp}
      end
      throw {:return, temp}
    catch
      {:return, val} -> val
    end
  end
  def is_carmichael_number(n) do
    try do
      if n <= 0 do
        raise("Number must be positive")
      end
      b = 2
      while_fun = fn while_fun, b ->
        if b < n do
          if gcd(b, n) == 1 do
            if power(b, n - 1, n) != 1 do
              throw {:return, false}
            end
          end
          b = b + 1
          while_fun.(while_fun, b)
        else
          b
        end
      end
      b = try do
          while_fun.(while_fun, b)
        catch
          {:break, {b}} -> b
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(power(2, 15, 3)))
    IO.puts(Kernel.inspect(power(5, 1, 30)))
    IO.puts(Kernel.inspect(is_carmichael_number(4)))
    IO.puts(Kernel.inspect(is_carmichael_number(561)))
    IO.puts(Kernel.inspect(is_carmichael_number(562)))
    IO.puts(Kernel.inspect(is_carmichael_number(1105)))
  end
end
Main.main()
