# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def panic(msg) do
    try do
    catch
      {:return, val} -> val
    end
  end
  def char_to_value(c) do
    try do
      digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(digits) do
          if String.at(digits, i) == c do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      panic("invalid digit")
    catch
      {:return, val} -> val
    end
  end
  def int_to_base(number, base) do
    try do
      if base < 2 || base > 36 do
        panic("'base' must be between 2 and 36 inclusive")
      end
      if number < 0 do
        panic("number must be a positive integer")
      end
      digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      n = number
      result = ""
      while_fun_2 = fn while_fun_2, n, result ->
        if n > 0 do
          remainder = rem(n, base)
          result = (String.at(digits, remainder) <> result)
          n = div(n, base)
          while_fun_2.(while_fun_2, n, result)
        else
          {n, result}
        end
      end
      {n, result} = try do
          while_fun_2.(while_fun_2, n, result)
        catch
          {:break, {n, result}} -> {n, result}
        end

      result = if result == "" do
        result = "0"
        result
      else
        result
      end
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def base_to_int(num_str, base) do
    try do
      value = 0
      i = 0
      while_fun_3 = fn while_fun_3, i, value ->
        if i < _len(num_str) do
          c = String.at(num_str, i)
          value = value * base + char_to_value(c)
          i = i + 1
          while_fun_3.(while_fun_3, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun_3.(while_fun_3, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def sum_of_digits(num, base) do
    try do
      if base < 2 || base > 36 do
        panic("'base' must be between 2 and 36 inclusive")
      end
      num_str = int_to_base(num, base)
      total = 0
      i = 0
      while_fun_4 = fn while_fun_4, i, total ->
        if i < _len(num_str) do
          c = String.at(num_str, i)
          total = total + char_to_value(c)
          i = i + 1
          while_fun_4.(while_fun_4, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_4.(while_fun_4, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, int_to_base(total, base)}
    catch
      {:return, val} -> val
    end
  end
  def harshad_numbers_in_base(limit, base) do
    try do
      if base < 2 || base > 36 do
        panic("'base' must be between 2 and 36 inclusive")
      end
      if limit < 0 do
        throw {:return, []}
      end
      numbers = []
      i = 1
      while_fun_5 = fn while_fun_5, i, numbers ->
        if i < limit do
          s = sum_of_digits(i, base)
          divisor = base_to_int(s, base)
          numbers = if rem(i, divisor) == 0 do
            numbers = (numbers ++ [int_to_base(i, base)])
            numbers
          else
            numbers
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, numbers)
        else
          {i, numbers}
        end
      end
      {i, numbers} = try do
          while_fun_5.(while_fun_5, i, numbers)
        catch
          {:break, {i, numbers}} -> {i, numbers}
        end

      throw {:return, numbers}
    catch
      {:return, val} -> val
    end
  end
  def is_harshad_number_in_base(num, base) do
    try do
      if base < 2 || base > 36 do
        panic("'base' must be between 2 and 36 inclusive")
      end
      if num < 0 do
        throw {:return, false}
      end
      n = int_to_base(num, base)
      d = sum_of_digits(num, base)
      n_val = base_to_int(n, base)
      d_val = base_to_int(d, base)
      throw {:return, rem(n_val, d_val) == 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(int_to_base(0, 21)))
      IO.puts(Kernel.inspect(int_to_base(23, 2)))
      IO.puts(Kernel.inspect(int_to_base(58, 5)))
      IO.puts(Kernel.inspect(int_to_base(167, 16)))
      IO.puts(Kernel.inspect(sum_of_digits(103, 12)))
      IO.puts(Kernel.inspect(sum_of_digits(1275, 4)))
      IO.puts(Kernel.inspect(sum_of_digits(6645, 2)))
      IO.puts(Kernel.inspect(harshad_numbers_in_base(15, 2)))
      IO.puts(Kernel.inspect(harshad_numbers_in_base(12, 34)))
      IO.puts(Kernel.inspect(harshad_numbers_in_base(12, 4)))
      IO.puts(Kernel.inspect(is_harshad_number_in_base(18, 10)))
      IO.puts(Kernel.inspect(is_harshad_number_in_base(21, 10)))
      IO.puts(Kernel.inspect(is_harshad_number_in_base(-21, 5)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
