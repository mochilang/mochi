# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_happy_number(num) do
    try do
      if num <= 0 do
        raise("num must be a positive integer")
      end
      seen = []
      n = num
      while_fun = fn while_fun, n, seen ->
        if n != 1 do
          i = 0
          while_fun_2 = fn while_fun_2, i ->
            if i < _len(seen) do
              if Enum.at(seen, i, []) == n do
                throw {:return, false}
              end
              i = i + 1
              while_fun_2.(while_fun_2, i)
            else
              i
            end
          end
          i = try do
              while_fun_2.(while_fun_2, i)
            catch
              {:break, {i}} -> i
            end

          seen = (seen ++ [n])
          total = 0
          temp = n
          while_fun_3 = fn while_fun_3, temp, total ->
            if temp > 0 do
              digit = rem(temp, 10)
              total = total + digit * digit
              temp = div(temp, 10)
              while_fun_3.(while_fun_3, temp, total)
            else
              {temp, total}
            end
          end
          {temp, total} = try do
              while_fun_3.(while_fun_3, temp, total)
            catch
              {:break, {temp, total}} -> {temp, total}
            end

          n = total
          while_fun.(while_fun, n, seen)
        else
          {n, seen}
        end
      end
      {n, seen} = try do
          while_fun.(while_fun, n, seen)
        catch
          {:break, {n, seen}} -> {n, seen}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def test_is_happy_number() do
    try do
      if !is_happy_number(19) do
        raise("19 should be happy")
      end
      if is_happy_number(2) do
        raise("2 should be unhappy")
      end
      if !is_happy_number(23) do
        raise("23 should be happy")
      end
      if !is_happy_number(1) do
        raise("1 should be happy")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_is_happy_number()
      IO.puts(Kernel.inspect(is_happy_number(19)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
