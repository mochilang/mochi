# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def hexagonal(n) do
    try do
      if n < 1 do
        raise("Input must be a positive integer")
      end
      throw {:return, n * (2 * n - 1)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:samples, [4, 11, 22])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Enum.each(Process.get(:samples), fn s ->
      IO.puts(Kernel.inspect(hexagonal(s)))
    end)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
