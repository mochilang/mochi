# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def binomial_coefficient(total_elements, elements_to_choose) do
    try do
      if elements_to_choose == 0 || elements_to_choose == total_elements do
        throw {:return, 1}
      end
      k = elements_to_choose
      k = if k > total_elements - k do
        k = total_elements - k
        k
      else
        k
      end
      coefficient = 1
      i = 0
      while_fun = fn while_fun, coefficient, i ->
        if i < k do
          coefficient = coefficient * (total_elements - i)
          coefficient = div(coefficient, (i + 1))
          i = i + 1
          while_fun.(while_fun, coefficient, i)
        else
          {coefficient, i}
        end
      end
      {coefficient, i} = try do
          while_fun.(while_fun, coefficient, i)
        catch
          {:break, {coefficient, i}} -> {coefficient, i}
        end

      throw {:return, coefficient}
    catch
      {:return, val} -> val
    end
  end
  def bell_numbers(max_set_length) do
    try do
      if max_set_length < 0 do
        raise("max_set_length must be non-negative")
      end
      bell = []
      i = 0
      while_fun_2 = fn while_fun_2, bell, i ->
        if i <= max_set_length do
          bell = (bell ++ [0])
          i = i + 1
          while_fun_2.(while_fun_2, bell, i)
        else
          {bell, i}
        end
      end
      {bell, i} = try do
          while_fun_2.(while_fun_2, bell, i)
        catch
          {:break, {bell, i}} -> {bell, i}
        end

      bell = List.replace_at(bell, 0, 1)
      i = 1
      while_fun_3 = fn while_fun_3, bell, i ->
        if i <= max_set_length do
          j = 0
          while_fun_4 = fn while_fun_4, bell, j ->
            if j < i do
              bell = List.replace_at(bell, i, Enum.at(bell, i, []) + binomial_coefficient(i - 1, j) * Enum.at(bell, j, []))
              j = j + 1
              while_fun_4.(while_fun_4, bell, j)
            else
              {bell, j}
            end
          end
          {bell, _} = try do
              while_fun_4.(while_fun_4, bell, j)
            catch
              {:break, {bell, _}} -> {bell, 0}
            end

          i = i + 1
          while_fun_3.(while_fun_3, bell, i)
        else
          {bell, i}
        end
      end
      {bell, i} = try do
          while_fun_3.(while_fun_3, bell, i)
        catch
          {:break, {bell, i}} -> {bell, i}
        end

      throw {:return, bell}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(bell_numbers(5)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
