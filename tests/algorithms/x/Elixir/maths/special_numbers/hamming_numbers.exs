# Code generated by Mochi transpiler 2025-08-17 13:17 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def hamming(n) do
    try do
      if n < 1 do
        raise("n_element should be a positive number")
      end
      hamming_list = [1]
      i = 0
      j = 0
      k = 0
      index = 1
      while_fun = fn while_fun, hamming_list, i, index, j, k ->
        if index < n do
          while_fun_2 = fn while_fun_2, i ->
            if Enum.at(hamming_list, i, []) * 2 <= Enum.at(hamming_list, _len(hamming_list) - 1, []) do
              i = i + 1
              while_fun_2.(while_fun_2, i)
            else
              i
            end
          end
          i = try do
              while_fun_2.(while_fun_2, i)
            catch
              {:break, {i}} -> i
            end

          while_fun_3 = fn while_fun_3, j ->
            if Enum.at(hamming_list, j, []) * 3 <= Enum.at(hamming_list, _len(hamming_list) - 1, []) do
              j = j + 1
              while_fun_3.(while_fun_3, j)
            else
              j
            end
          end
          _ = try do
              while_fun_3.(while_fun_3, j)
            catch
              {:break, {_}} -> 0
            end

          while_fun_4 = fn while_fun_4, k ->
            if Enum.at(hamming_list, k, []) * 5 <= Enum.at(hamming_list, _len(hamming_list) - 1, []) do
              k = k + 1
              while_fun_4.(while_fun_4, k)
            else
              k
            end
          end
          k = try do
              while_fun_4.(while_fun_4, k)
            catch
              {:break, {k}} -> k
            end

          m1 = Enum.at(hamming_list, i, []) * 2
          m2 = Enum.at(hamming_list, j, []) * 3
          m3 = Enum.at(hamming_list, k, []) * 5
          next = m1
          next = if m2 < next do
            next = m2
            next
          else
            next
          end
          next = if m3 < next do
            next = m3
            next
          else
            next
          end
          hamming_list = (hamming_list ++ [next])
          index = index + 1
          while_fun.(while_fun, hamming_list, i, index, j, k)
        else
          {hamming_list, i, index, j, k}
        end
      end
      {hamming_list, i, index, _, k} = try do
          while_fun.(while_fun, hamming_list, i, index, j, k)
        catch
          {:break, {hamming_list, i, index, _, k}} -> {hamming_list, i, index, 0, k}
        end

      throw {:return, hamming_list}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(hamming(5)))
    IO.puts(Kernel.inspect(hamming(10)))
    IO.puts(Kernel.inspect(hamming(15)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
