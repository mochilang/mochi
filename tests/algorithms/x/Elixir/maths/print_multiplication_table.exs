# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  def multiplication_table(number, number_of_terms) do
    try do
      i = 1
      result = ""
      while_fun = fn while_fun, i, result ->
        if i <= number_of_terms do
          result = (((((result <> Kernel.to_string(number)) <> " * ") <> Kernel.to_string(i)) <> " = ") <> Kernel.to_string(number * i))
          {result} = if i < number_of_terms do
            result = (result <> "\n")
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(multiplication_table(5, 10)))
  end
end
Main.main()
