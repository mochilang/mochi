# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def prime_factors(n) do
    try do
      i = 2
      x = n
      factors = []
      while_fun = fn while_fun, factors, i, x ->
        if i * i <= x do
          {factors, i, x} = if rem(x, i) == 0 do
            factors = (factors ++ [i])
            x = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(x, i)))
            {factors, i, x}
          else
            i = i + 1
            {factors, i, x}
          end
          while_fun.(while_fun, factors, i, x)
        else
          {factors, i, x}
        end
      end
      {factors, i, x} = try do
          while_fun.(while_fun, factors, i, x)
        catch
          {:break, {factors, i, x}} -> {factors, i, x}
        end

      {factors} = if x > 1 do
        factors = (factors ++ [x])
        {factors}
      else
        {factors}
      end
      throw {:return, factors}
    catch
      {:return, val} -> val
    end
  end
  def liouville_lambda(n) do
    try do
      if n < 1 do
        raise("Input must be a positive integer")
      end
      cnt = _len(prime_factors(n))
      if rem(cnt, 2) == 0 do
        throw {:return, 1}
      end
      throw {:return, 0 - 1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(liouville_lambda(10)))
    IO.puts(Kernel.inspect(liouville_lambda(11)))
  end
end
Main.main()
