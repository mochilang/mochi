# Code generated by Mochi transpiler 2025-08-08 20:44 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def mean(nums) do
    try do
      if _len(nums) == 0 do
        raise("List is empty")
      end
      total = 0.0
      i = 0
      while_fun = fn while_fun, i, total ->
        if i < _len(nums) do
          total = total + Enum.at(nums, i)
          i = i + 1
          while_fun.(while_fun, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun.(while_fun, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      throw {:return, total / (:erlang.float(_len(nums)))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(mean([3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0])))
    IO.puts(Kernel.inspect(mean([5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0])))
    IO.puts(Kernel.inspect(mean([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])))
  end
end
Main.main()
