# Code generated by Mochi transpiler 2025-08-12 07:47 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def reverse(xs) do
    try do
      res = []
      i = _len(xs) - 1
      while_fun = fn while_fun, i, res ->
        if i >= 0 do
          res = (res ++ [Enum.at(xs, i, [])])
          i = i - 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def factors_of_a_number(num) do
    try do
      facs = []
      if num < 1 do
        throw {:return, facs}
      end
      small = []
      large = []
      i = 1
      while_fun_2 = fn while_fun_2, i, large, small ->
        if i * i <= num do
          {large, small} = if rem(num, i) == 0 do
            small = (small ++ [i])
            d = div(num, i)
            {large} = if d != i do
              large = (large ++ [d])
              {large}
            else
              {large}
            end
            {large, small}
          else
            {large, small}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, large, small)
        else
          {i, large, small}
        end
      end
      {i, large, small} = try do
          while_fun_2.(while_fun_2, i, large, small)
        catch
          {:break, {i, large, small}} -> {i, large, small}
        end

      facs = (small ++ reverse(large))
      throw {:return, facs}
    catch
      {:return, val} -> val
    end
  end
  def run_tests() do
    try do
      if factors_of_a_number(1) != [1] do
        raise("case1 failed")
      end
      if factors_of_a_number(5) != [1, 5] do
        raise("case2 failed")
      end
      if factors_of_a_number(24) != [1, 2, 3, 4, 6, 8, 12, 24] do
        raise("case3 failed")
      end
      if factors_of_a_number(-24) != [] do
        raise("case4 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      run_tests()
      IO.puts(Kernel.inspect(factors_of_a_number(24)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
