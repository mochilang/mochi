# Code generated by Mochi transpiler 2025-08-09 10:54 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def calculate_pi(limit) do
    try do
      if limit < 0 || limit > _len(Process.get(:pi_digits)) do
        raise("limit out of range")
      end
      throw {:return, ("3." <> _slice(Process.get(:pi_digits), 0, limit - (0)))}
    catch
      {:return, val} -> val
    end
  end
  def test_pi_generator() do
    try do
      if calculate_pi(15) != "3.141592653589793" do
        raise("calculate_pi 15 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_pi_generator()
      IO.puts(Kernel.inspect(calculate_pi(50)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi_digits, "1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679")
end
Main.main()
