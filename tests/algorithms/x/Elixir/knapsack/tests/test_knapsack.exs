# Code generated by Mochi transpiler 2025-08-08 19:19 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def knapsack(capacity, weights, values, counter) do
    try do
      if counter == 0 || capacity == 0 do
        throw {:return, 0}
      end
      if Enum.at(weights, counter - 1) > capacity do
        throw {:return, knapsack(capacity, weights, values, counter - 1)}
      end
      left_capacity = capacity - Enum.at(weights, counter - 1)
      include_val = Enum.at(values, counter - 1) + knapsack(left_capacity, weights, values, counter - 1)
      exclude_val = knapsack(capacity, weights, values, counter - 1)
      if include_val > exclude_val do
        throw {:return, include_val}
      end
      throw {:return, exclude_val}
    catch
      {:return, val} -> val
    end
  end
  def test_base_case() do
    try do
      cap = 0
      val = [0]
      w = [0]
      c = _len(val)
      if knapsack(cap, w, val, c) != 0 do
        throw {:return, false}
      end
      val2 = [60]
      w2 = [10]
      c2 = _len(val2)
      throw {:return, knapsack(cap, w2, val2, c2) == 0}
    catch
      {:return, val} -> val
    end
  end
  def test_easy_case() do
    try do
      cap = 3
      val = [1, 2, 3]
      w = [3, 2, 1]
      c = _len(val)
      throw {:return, knapsack(cap, w, val, c) == 5}
    catch
      {:return, val} -> val
    end
  end
  def test_knapsack() do
    try do
      cap = 50
      val = [60, 100, 120]
      w = [10, 20, 30]
      c = _len(val)
      throw {:return, knapsack(cap, w, val, c) == 220}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(test_base_case()))
    IO.puts(Kernel.inspect(test_easy_case()))
    IO.puts(Kernel.inspect(test_knapsack()))
    IO.puts(true)
  end
end
Main.main()
