# Code generated by Mochi transpiler 2025-08-08 19:19 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def calc_profit(profit, weight, max_weight) do
    try do
      if _len(profit) != _len(weight) do
        throw {:return, %{ok: false, value: 0.0, error: "The length of profit and weight must be same."}}
      end
      if max_weight <= 0 do
        throw {:return, %{ok: false, value: 0.0, error: "max_weight must greater than zero."}}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(profit) do
          if Enum.at(profit, i) < 0 do
            throw {:return, %{ok: false, value: 0.0, error: "Profit can not be negative."}}
          end
          if Enum.at(weight, i) < 0 do
            throw {:return, %{ok: false, value: 0.0, error: "Weight can not be negative."}}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      used = []
      j = 0
      while_fun_2 = fn while_fun_2, j, used ->
        if j < _len(profit) do
          used = (used ++ [false])
          j = j + 1
          while_fun_2.(while_fun_2, j, used)
        else
          {j, used}
        end
      end
      {j, used} = try do
          while_fun_2.(while_fun_2, j, used)
        catch
          {:break, {j, used}} -> {j, used}
        end

      limit = 0
      gain = 0.0
      while_fun_3 = fn while_fun_3, gain, limit, used ->
        if limit < max_weight do
          max_ratio = -1.0
          idx = 0 - 1
          k = 0
          while_fun_4 = fn while_fun_4, idx, k, max_ratio ->
            if k < _len(profit) do
              {idx, max_ratio} = if !Enum.at(used, k) do
                ratio = (:erlang.float(Enum.at(profit, k))) / (:erlang.float(Enum.at(weight, k)))
                {idx, max_ratio} = if ratio > max_ratio do
                  max_ratio = ratio
                  idx = k
                  {idx, max_ratio}
                else
                  {idx, max_ratio}
                end
                {idx, max_ratio}
              else
                {idx, max_ratio}
              end
              k = k + 1
              while_fun_4.(while_fun_4, idx, k, max_ratio)
            else
              {idx, k, max_ratio}
            end
          end
          {idx, k, max_ratio} = try do
              while_fun_4.(while_fun_4, idx, k, max_ratio)
            catch
              {:break, {idx, k, max_ratio}} -> {idx, k, max_ratio}
            end

          if idx == 0 - 1 do
            throw {:break, {gain, limit, used}}
          end
          used = List.replace_at(used, idx, true)
          {gain, limit} = if max_weight - limit >= Enum.at(weight, idx) do
            limit = limit + Enum.at(weight, idx)
            gain = gain + (:erlang.float(Enum.at(profit, idx)))
            {gain, limit}
          else
            gain = gain + ((:erlang.float((max_weight - limit))) / (:erlang.float(Enum.at(weight, idx)))) * (:erlang.float(Enum.at(profit, idx)))
            throw {:break, {gain, limit, used}}
            {gain, limit}
          end
          while_fun_3.(while_fun_3, gain, limit, used)
        else
          {gain, limit, used}
        end
      end
      {gain, limit, used} = try do
          while_fun_3.(while_fun_3, gain, limit, used)
        catch
          {:break, {gain, limit, used}} -> {gain, limit, used}
        end

      throw {:return, %{ok: true, value: gain, error: ""}}
    catch
      {:return, val} -> val
    end
  end
  def test_sorted() do
    try do
      profit = [10, 20, 30, 40, 50, 60]
      weight = [2, 4, 6, 8, 10, 12]
      res = calc_profit(profit, weight, 100)
      throw {:return, res.ok && res.value == 210.0}
    catch
      {:return, val} -> val
    end
  end
  def test_negative_max_weight() do
    try do
      profit = [10, 20, 30, 40, 50, 60]
      weight = [2, 4, 6, 8, 10, 12]
      res = calc_profit(profit, weight, -15)
      throw {:return, !res.ok && res.error == "max_weight must greater than zero."}
    catch
      {:return, val} -> val
    end
  end
  def test_negative_profit_value() do
    try do
      profit = [10, -20, 30, 40, 50, 60]
      weight = [2, 4, 6, 8, 10, 12]
      res = calc_profit(profit, weight, 15)
      throw {:return, !res.ok && res.error == "Profit can not be negative."}
    catch
      {:return, val} -> val
    end
  end
  def test_negative_weight_value() do
    try do
      profit = [10, 20, 30, 40, 50, 60]
      weight = [2, -4, 6, -8, 10, 12]
      res = calc_profit(profit, weight, 15)
      throw {:return, !res.ok && res.error == "Weight can not be negative."}
    catch
      {:return, val} -> val
    end
  end
  def test_null_max_weight() do
    try do
      profit = [10, 20, 30, 40, 50, 60]
      weight = [2, 4, 6, 8, 10, 12]
      res = calc_profit(profit, weight, 0)
      throw {:return, !res.ok && res.error == "max_weight must greater than zero."}
    catch
      {:return, val} -> val
    end
  end
  def test_unequal_list_length() do
    try do
      profit = [10, 20, 30, 40, 50]
      weight = [2, 4, 6, 8, 10, 12]
      res = calc_profit(profit, weight, 100)
      throw {:return, !res.ok && res.error == "The length of profit and weight must be same."}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(test_sorted()))
    IO.puts(Kernel.inspect(test_negative_max_weight()))
    IO.puts(Kernel.inspect(test_negative_profit_value()))
    IO.puts(Kernel.inspect(test_negative_weight_value()))
    IO.puts(Kernel.inspect(test_null_max_weight()))
    IO.puts(Kernel.inspect(test_unequal_list_length()))
    IO.puts(true)
  end
end
Main.main()
