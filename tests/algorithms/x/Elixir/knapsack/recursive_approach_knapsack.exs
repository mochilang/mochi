# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def knapsack(weights, values, number_of_items, max_weight, index) do
    try do
      if index == number_of_items do
        throw {:return, 0}
      end
      ans1 = knapsack(weights, values, number_of_items, max_weight, index + 1)
      ans2 = 0
      {ans2} = if Enum.at(weights, index, []) <= max_weight do
        ans2 = Enum.at(values, index, []) + knapsack(weights, values, number_of_items, max_weight - Enum.at(weights, index, []), index + 1)
        {ans2}
      else
        {ans2}
      end
      if ans1 > ans2 do
        throw {:return, ans1}
      end
      throw {:return, ans2}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      w1 = [1, 2, 4, 5]
      v1 = [5, 4, 8, 6]
      r1 = knapsack(w1, v1, 4, 5, 0)
      IO.puts(Kernel.to_string(r1))
      w2 = [3, 4, 5]
      v2 = [10, 9, 8]
      r2 = knapsack(w2, v2, 3, 25, 0)
      IO.puts(Kernel.to_string(r2))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
