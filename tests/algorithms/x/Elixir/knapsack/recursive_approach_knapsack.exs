# Code generated by Mochi transpiler 2025-08-08 19:19 +0700
defmodule Main do
  def knapsack(weights, values, number_of_items, max_weight, index) do
    try do
      if index == number_of_items do
        throw {:return, 0}
      end
      ans1 = knapsack(weights, values, number_of_items, max_weight, index + 1)
      ans2 = 0
      {ans2} = if Enum.at(weights, index) <= max_weight do
        ans2 = Enum.at(values, index) + knapsack(weights, values, number_of_items, max_weight - Enum.at(weights, index), index + 1)
        {ans2}
      else
        {ans2}
      end
      if ans1 > ans2 do
        throw {:return, ans1}
      end
      throw {:return, ans2}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      w1 = [1, 2, 4, 5]
      v1 = [5, 4, 8, 6]
      r1 = knapsack(w1, v1, 4, 5, 0)
      IO.puts(Kernel.to_string(r1))
      w2 = [3, 4, 5]
      v2 = [10, 9, 8]
      r2 = knapsack(w2, v2, 3, 25, 0)
      IO.puts(Kernel.to_string(r2))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
