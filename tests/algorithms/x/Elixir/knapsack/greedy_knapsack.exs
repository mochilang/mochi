# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def calc_profit(profit, weight, max_weight) do
    try do
      if _len(profit) != _len(weight) do
        raise("The length of profit and weight must be same.")
      end
      if max_weight <= 0 do
        raise("max_weight must greater than zero.")
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(profit) do
          if Enum.at(profit, i, []) < 0 do
            raise("Profit can not be negative.")
          end
          if Enum.at(weight, i, []) < 0 do
            raise("Weight can not be negative.")
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      n = _len(profit)
      used = []
      j = 0
      while_fun_2 = fn while_fun_2, j, used ->
        if j < n do
          used = (used ++ [false])
          j = j + 1
          while_fun_2.(while_fun_2, j, used)
        else
          {j, used}
        end
      end
      {j, used} = try do
          while_fun_2.(while_fun_2, j, used)
        catch
          {:break, {j, used}} -> {j, used}
        end

      limit = 0
      gain = 0.0
      count = 0
      while_fun_3 = fn while_fun_3, count, gain, limit, used ->
        if limit < max_weight && count < n do
          maxRatio = -1.0
          maxIndex = -1
          k = 0
          while_fun_4 = fn while_fun_4, k, maxIndex, maxRatio ->
            if k < n do
              {maxIndex, maxRatio} = if !Enum.at(used, k, []) do
                ratio = (:erlang.float(Enum.at(profit, k, []))) / (:erlang.float(Enum.at(weight, k, [])))
                {maxIndex, maxRatio} = if ratio > maxRatio do
                  maxRatio = ratio
                  maxIndex = k
                  {maxIndex, maxRatio}
                else
                  {maxIndex, maxRatio}
                end
                {maxIndex, maxRatio}
              else
                {maxIndex, maxRatio}
              end
              k = k + 1
              while_fun_4.(while_fun_4, k, maxIndex, maxRatio)
            else
              {k, maxIndex, maxRatio}
            end
          end
          {k, maxIndex, maxRatio} = try do
              while_fun_4.(while_fun_4, k, maxIndex, maxRatio)
            catch
              {:break, {k, maxIndex, maxRatio}} -> {k, maxIndex, maxRatio}
            end

          if maxIndex < 0 do
            throw {:break, {count, gain, limit, used}}
          end
          used = List.replace_at(used, maxIndex, true)
          {gain, limit} = if max_weight - limit >= Enum.at(weight, maxIndex, []) do
            limit = limit + Enum.at(weight, maxIndex, [])
            gain = gain + (:erlang.float(Enum.at(profit, maxIndex, [])))
            {gain, limit}
          else
            gain = gain + (:erlang.float((max_weight - limit)) / (:erlang.float(Enum.at(weight, maxIndex, [])))) * (:erlang.float(Enum.at(profit, maxIndex, [])))
            throw {:break, {count, gain, limit, used}}
            {gain, limit}
          end
          count = count + 1
          while_fun_3.(while_fun_3, count, gain, limit, used)
        else
          {count, gain, limit, used}
        end
      end
      {count, gain, limit, used} = try do
          while_fun_3.(while_fun_3, count, gain, limit, used)
        catch
          {:break, {count, gain, limit, used}} -> {count, gain, limit, used}
        end

      throw {:return, gain}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(calc_profit([1, 2, 3], [3, 4, 5], 15)))
      IO.puts(Kernel.inspect(calc_profit([10, 9, 8], [3, 4, 5], 25)))
      IO.puts(Kernel.inspect(calc_profit([10, 9, 8], [3, 4, 5], 5)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
