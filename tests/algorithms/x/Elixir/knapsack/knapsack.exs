# Code generated by Mochi transpiler 2025-08-08 19:19 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def knapsack(capacity, weights, values, counter) do
    try do
      if counter == 0 || capacity == 0 do
        throw {:return, 0}
      end
      if Enum.at(weights, counter - 1) > capacity do
        throw {:return, knapsack(capacity, weights, values, counter - 1)}
      else
        left_capacity = capacity - Enum.at(weights, counter - 1)
        new_value_included = Enum.at(values, counter - 1) + knapsack(left_capacity, weights, values, counter - 1)
        without_new_value = knapsack(capacity, weights, values, counter - 1)
        if new_value_included > without_new_value do
          throw {:return, new_value_included}
        else
          throw {:return, without_new_value}
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      weights = [10, 20, 30]
      values = [60, 100, 120]
      cap = 50
      count = _len(values)
      result = knapsack(cap, weights, values, count)
      IO.puts(Kernel.to_string(result))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
