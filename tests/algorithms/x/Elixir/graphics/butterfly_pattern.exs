# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def repeat_char(ch, count) do
    try do
      result = ""
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < count do
          result = (result <> ch)
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def butterfly_pattern(n) do
    try do
      lines = []
      i = 1
      while_fun_2 = fn while_fun_2, i, lines ->
        if i < n do
          left = repeat_char("*", i)
          mid = repeat_char(" ", 2 * (n - i) - 1)
          right = repeat_char("*", i)
          lines = (lines ++ [((left <> mid) <> right)])
          i = i + 1
          while_fun_2.(while_fun_2, i, lines)
        else
          {i, lines}
        end
      end
      {i, lines} = try do
          while_fun_2.(while_fun_2, i, lines)
        catch
          {:break, {i, lines}} -> {i, lines}
        end

      lines = (lines ++ [repeat_char("*", 2 * n - 1)])
      j = n - 1
      while_fun_3 = fn while_fun_3, j, lines ->
        if j > 0 do
          left = repeat_char("*", j)
          mid = repeat_char(" ", 2 * (n - j) - 1)
          right = repeat_char("*", j)
          lines = (lines ++ [((left <> mid) <> right)])
          j = j - 1
          while_fun_3.(while_fun_3, j, lines)
        else
          {j, lines}
        end
      end
      {j, lines} = try do
          while_fun_3.(while_fun_3, j, lines)
        catch
          {:break, {j, lines}} -> {j, lines}
        end

      out = ""
      k = 0
      while_fun_4 = fn while_fun_4, k, out ->
        if k < _len(lines) do
          {out} = if k > 0 do
            out = (out <> "\n")
            {out}
          else
            {out}
          end
          out = (out <> Enum.at(lines, k))
          k = k + 1
          while_fun_4.(while_fun_4, k, out)
        else
          {k, out}
        end
      end
      {k, out} = try do
          while_fun_4.(while_fun_4, k, out)
        catch
          {:break, {k, out}} -> {k, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(butterfly_pattern(3)))
    IO.puts(Kernel.inspect(butterfly_pattern(5)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
