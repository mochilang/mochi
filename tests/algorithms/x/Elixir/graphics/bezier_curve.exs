# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def n_choose_k(n, k) do
    try do
      if k < 0 || k > n do
        throw {:return, 0.0}
      end
      if k == 0 || k == n do
        throw {:return, 1.0}
      end
      result = 1.0
      i = 1
      while_fun = fn while_fun, i, result ->
        if i <= k do
          result = result * (1.0 * (n - k + i)) / (1.0 * i)
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def pow_float(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def basis_function(points, t) do
    try do
      degree = _len(points) - 1
      res = []
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i <= degree do
          coef = n_choose_k(degree, i)
          term = pow_float(1.0 - t, degree - i) * pow_float(t, i)
          res = (res ++ [coef * term])
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bezier_point(points, t) do
    try do
      basis = basis_function(points, t)
      x = 0.0
      y = 0.0
      i = 0
      while_fun_4 = fn while_fun_4, i, x, y ->
        if i < _len(points) do
          x = x + Enum.at(basis, i, []) * Enum.at(Enum.at(points, i, []), 0, 0)
          y = y + Enum.at(basis, i, []) * Enum.at(Enum.at(points, i, []), 1, 0)
          i = i + 1
          while_fun_4.(while_fun_4, i, x, y)
        else
          {i, x, y}
        end
      end
      {i, x, y} = try do
          while_fun_4.(while_fun_4, i, x, y)
        catch
          {:break, {i, x, y}} -> {i, x, y}
        end

      throw {:return, [x, y]}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:control, [[1.0, 1.0], [1.0, 2.0]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(basis_function(Process.get(:control), 0.0)))
    IO.puts(Kernel.inspect(basis_function(Process.get(:control), 1.0)))
    IO.puts(Kernel.inspect(bezier_point(Process.get(:control), 0.0)))
    IO.puts(Kernel.inspect(bezier_point(Process.get(:control), 1.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
