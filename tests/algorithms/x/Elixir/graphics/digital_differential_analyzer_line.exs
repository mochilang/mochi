# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def abs_int(n) do
    try do
      throw {:return, ((if n < 0, do: -n, else: n))}
    catch
      {:return, val} -> val
    end
  end
  def round_int(x) do
    try do
      throw {:return, (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((x + 0.5))}
    catch
      {:return, val} -> val
    end
  end
  def digital_differential_analyzer_line(p1, p2) do
    try do
      dx = p2.x - p1.x
      dy = p2.y - p1.y
      abs_dx = abs_int(dx)
      abs_dy = abs_int(dy)
      steps = (if abs_dx > abs_dy, do: abs_dx, else: abs_dy)
      x_increment = (:erlang.float(dx)) / (:erlang.float(steps))
      y_increment = (:erlang.float(dy)) / (:erlang.float(steps))
      coordinates = []
      x = :erlang.float(p1.x)
      y = :erlang.float(p1.y)
      i = 0
      while_fun = fn while_fun, coordinates, i, x, y ->
        if i < steps do
          x = x + x_increment
          y = y + y_increment
          point = %{x: round_int(x), y: round_int(y)}
          coordinates = (coordinates ++ [point])
          i = i + 1
          while_fun.(while_fun, coordinates, i, x, y)
        else
          {coordinates, i, x, y}
        end
      end
      {coordinates, i, x, y} = try do
          while_fun.(while_fun, coordinates, i, x, y)
        catch
          {:break, {coordinates, i, x, y}} -> {coordinates, i, x, y}
        end

      throw {:return, coordinates}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      result = digital_differential_analyzer_line(%{x: 1, y: 1}, %{x: 4, y: 4})
      IO.puts(Kernel.inspect(result))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
