# Code generated by Mochi transpiler 2025-08-06 21:03 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def compare_string(string1, string2) do
    try do
      result = ""
      count = 0
      i = 0
      while_fun = fn while_fun, count, i, result ->
        if i < _len(string1) do
          c1 = _slice(string1, i, i + 1 - (i))
          c2 = _slice(string2, i, i + 1 - (i))
          {count, result} = if c1 != c2 do
            count = count + 1
            result = (result <> "_")
            {count, result}
          else
            result = (result <> c1)
            {count, result}
          end
          i = i + 1
          while_fun.(while_fun, count, i, result)
        else
          {count, i, result}
        end
      end
      {count, i, result} = try do
          while_fun.(while_fun, count, i, result)
        catch
          {:break, {count, i, result}} -> {count, i, result}
        end

      if count > 1 do
        throw {:return, ""}
      end
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def contains_string(arr, value) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(arr) do
          if Enum.at(arr, i) == value do
            throw {:return, true}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def unique_strings(arr) do
    try do
      res = []
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(arr) do
          {res} = if !contains_string(res, Enum.at(arr, i)) do
            res = (res ++ [Enum.at(arr, i)])
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def check(binary) do
    try do
      pi = []
      current = binary
      while_fun_4 = fn while_fun_4, current, pi ->
        if true do
          check1 = []
          i = 0
          while_fun_5 = fn while_fun_5, check1, i ->
            if i < _len(current) do
              check1 = (check1 ++ ["$"])
              i = i + 1
              while_fun_5.(while_fun_5, check1, i)
            else
              {check1, i}
            end
          end
          {check1, i} = try do
              while_fun_5.(while_fun_5, check1, i)
            catch
              {:break, {check1, i}} -> {check1, i}
            end

          temp = []
          i = 0
          while_fun_6 = fn while_fun_6, check1, i, temp ->
            if i < _len(current) do
              j = i + 1
              while_fun_7 = fn while_fun_7, check1, j, temp ->
                if j < _len(current) do
                  k = compare_string(Enum.at(current, i), Enum.at(current, j))
                  {check1, temp} = if k == "" do
                    check1 = List.replace_at(check1, i, "*")
                    check1 = List.replace_at(check1, j, "*")
                    temp = (temp ++ ["X"])
                    {check1, temp}
                  else
                    {check1, temp}
                  end
                  j = j + 1
                  while_fun_7.(while_fun_7, check1, j, temp)
                else
                  {check1, j, temp}
                end
              end
              {check1, j, temp} = try do
                  while_fun_7.(while_fun_7, check1, j, temp)
                catch
                  {:break, {check1, j, temp}} -> {check1, j, temp}
                end

              i = i + 1
              while_fun_6.(while_fun_6, check1, i, temp)
            else
              {check1, i, temp}
            end
          end
          {check1, i, temp} = try do
              while_fun_6.(while_fun_6, check1, i, temp)
            catch
              {:break, {check1, i, temp}} -> {check1, i, temp}
            end

          i = 0
          while_fun_8 = fn while_fun_8, i, pi ->
            if i < _len(current) do
              {pi} = if Enum.at(check1, i) == "$" do
                pi = (pi ++ [Enum.at(current, i)])
                {pi}
              else
                {pi}
              end
              i = i + 1
              while_fun_8.(while_fun_8, i, pi)
            else
              {i, pi}
            end
          end
          {i, pi} = try do
              while_fun_8.(while_fun_8, i, pi)
            catch
              {:break, {i, pi}} -> {i, pi}
            end

          if _len(temp) == 0 do
            throw {:return, pi}
          end
          current = unique_strings(temp)
          while_fun_4.(while_fun_4, current, pi)
        else
          {current, pi}
        end
      end
      {current, pi} = try do
          while_fun_4.(while_fun_4, current, pi)
        catch
          {:break, {current, pi}} -> {current, pi}
        end

    catch
      {:return, val} -> val
    end
  end
  def decimal_to_binary(no_of_variable, minterms) do
    try do
      temp = []
      idx = 0
      while_fun_9 = fn while_fun_9, idx, temp ->
        if idx < _len(minterms) do
          minterm = Enum.at(minterms, idx)
          string = ""
          i = 0
          while_fun_10 = fn while_fun_10, i, minterm, string ->
            if i < no_of_variable do
              string = (Kernel.to_string(rem(minterm, 2)) <> string)
              minterm = div(minterm, 2)
              i = i + 1
              while_fun_10.(while_fun_10, i, minterm, string)
            else
              {i, minterm, string}
            end
          end
          {i, minterm, string} = try do
              while_fun_10.(while_fun_10, i, minterm, string)
            catch
              {:break, {i, minterm, string}} -> {i, minterm, string}
            end

          temp = (temp ++ [string])
          idx = idx + 1
          while_fun_9.(while_fun_9, idx, temp)
        else
          {idx, temp}
        end
      end
      {idx, temp} = try do
          while_fun_9.(while_fun_9, idx, temp)
        catch
          {:break, {idx, temp}} -> {idx, temp}
        end

      throw {:return, temp}
    catch
      {:return, val} -> val
    end
  end
  def is_for_table(string1, string2, count) do
    try do
      count_n = 0
      i = 0
      while_fun_11 = fn while_fun_11, count_n, i ->
        if i < _len(string1) do
          c1 = _slice(string1, i, i + 1 - (i))
          c2 = _slice(string2, i, i + 1 - (i))
          {count_n} = if c1 != c2 do
            count_n = count_n + 1
            {count_n}
          else
            {count_n}
          end
          i = i + 1
          while_fun_11.(while_fun_11, count_n, i)
        else
          {count_n, i}
        end
      end
      {count_n, i} = try do
          while_fun_11.(while_fun_11, count_n, i)
        catch
          {:break, {count_n, i}} -> {count_n, i}
        end

      throw {:return, count_n == count}
    catch
      {:return, val} -> val
    end
  end
  def count_ones(row) do
    try do
      c = 0
      j = 0
      while_fun_12 = fn while_fun_12, c, j ->
        if j < _len(row) do
          {c} = if Enum.at(row, j) == 1 do
            c = c + 1
            {c}
          else
            {c}
          end
          j = j + 1
          while_fun_12.(while_fun_12, c, j)
        else
          {c, j}
        end
      end
      {c, j} = try do
          while_fun_12.(while_fun_12, c, j)
        catch
          {:break, {c, j}} -> {c, j}
        end

      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def selection(chart, prime_implicants) do
    try do
      temp = []
      select = []
      i = 0
      while_fun_13 = fn while_fun_13, i, select ->
        if i < _len(chart) do
          select = (select ++ [0])
          i = i + 1
          while_fun_13.(while_fun_13, i, select)
        else
          {i, select}
        end
      end
      {i, select} = try do
          while_fun_13.(while_fun_13, i, select)
        catch
          {:break, {i, select}} -> {i, select}
        end

      col = 0
      while_fun_14 = fn while_fun_14, col, select ->
        if col < _len(Enum.at(chart, 0)) do
          count = 0
          row = 0
          while_fun_15 = fn while_fun_15, count, row ->
            if row < _len(chart) do
              {count} = if Enum.at(Enum.at(chart, row), col) == 1 do
                count = count + 1
                {count}
              else
                {count}
              end
              row = row + 1
              while_fun_15.(while_fun_15, count, row)
            else
              {count, row}
            end
          end
          {count, row} = try do
              while_fun_15.(while_fun_15, count, row)
            catch
              {:break, {count, row}} -> {count, row}
            end

          {row, select} = if count == 1 do
            rem_ = 0
            row = 0
            while_fun_16 = fn while_fun_16, rem_, row ->
              if row < _len(chart) do
                {rem_} = if Enum.at(Enum.at(chart, row), col) == 1 do
                  rem_ = row
                  {rem_}
                else
                  {rem_}
                end
                row = row + 1
                while_fun_16.(while_fun_16, rem_, row)
              else
                {rem_, row}
              end
            end
            {rem_, row} = try do
                while_fun_16.(while_fun_16, rem_, row)
              catch
                {:break, {rem_, row}} -> {rem_, row}
              end

            select = List.replace_at(select, rem_, 1)
            {row, select}
          else
            {row, select}
          end
          col = col + 1
          while_fun_14.(while_fun_14, col, select)
        else
          {col, select}
        end
      end
      {col, select} = try do
          while_fun_14.(while_fun_14, col, select)
        catch
          {:break, {col, select}} -> {col, select}
        end

      i = 0
      while_fun_17 = fn while_fun_17, chart, i, temp ->
        if i < _len(select) do
          {chart, temp} = if Enum.at(select, i) == 1 do
            j = 0
            while_fun_18 = fn while_fun_18, chart, j ->
              if j < _len(Enum.at(chart, 0)) do
                {chart} = if Enum.at(Enum.at(chart, i), j) == 1 do
                  r = 0
                  while_fun_19 = fn while_fun_19, chart, r ->
                    if r < _len(chart) do
                      chart = List.replace_at(chart, r, List.replace_at(Enum.at(chart, r), j, 0))
                      r = r + 1
                      while_fun_19.(while_fun_19, chart, r)
                    else
                      {chart, r}
                    end
                  end
                  {chart, r} = try do
                      while_fun_19.(while_fun_19, chart, r)
                    catch
                      {:break, {chart, r}} -> {chart, r}
                    end

                  {chart}
                else
                  {chart}
                end
                j = j + 1
                while_fun_18.(while_fun_18, chart, j)
              else
                {chart, j}
              end
            end
            {chart, j} = try do
                while_fun_18.(while_fun_18, chart, j)
              catch
                {:break, {chart, j}} -> {chart, j}
              end

            temp = (temp ++ [Enum.at(prime_implicants, i)])
            {chart, temp}
          else
            {chart, temp}
          end
          i = i + 1
          while_fun_17.(while_fun_17, chart, i, temp)
        else
          {chart, i, temp}
        end
      end
      {chart, i, temp} = try do
          while_fun_17.(while_fun_17, chart, i, temp)
        catch
          {:break, {chart, i, temp}} -> {chart, i, temp}
        end

      while_fun_20 = fn while_fun_20, chart, temp ->
        if true do
          counts = []
          r = 0
          while_fun_21 = fn while_fun_21, counts, r ->
            if r < _len(chart) do
              counts = (counts ++ [count_ones(Enum.at(chart, r))])
              r = r + 1
              while_fun_21.(while_fun_21, counts, r)
            else
              {counts, r}
            end
          end
          {counts, r} = try do
              while_fun_21.(while_fun_21, counts, r)
            catch
              {:break, {counts, r}} -> {counts, r}
            end

          max_n = Enum.at(counts, 0)
          rem_ = 0
          k = 1
          while_fun_22 = fn while_fun_22, k, max_n, rem_ ->
            if k < _len(counts) do
              {max_n, rem_} = if Enum.at(counts, k) > max_n do
                max_n = Enum.at(counts, k)
                rem_ = k
                {max_n, rem_}
              else
                {max_n, rem_}
              end
              k = k + 1
              while_fun_22.(while_fun_22, k, max_n, rem_)
            else
              {k, max_n, rem_}
            end
          end
          {k, max_n, rem_} = try do
              while_fun_22.(while_fun_22, k, max_n, rem_)
            catch
              {:break, {k, max_n, rem_}} -> {k, max_n, rem_}
            end

          if max_n == 0 do
            throw {:return, temp}
          end
          temp = (temp ++ [Enum.at(prime_implicants, rem_)])
          j = 0
          while_fun_23 = fn while_fun_23, chart, j ->
            if j < _len(Enum.at(chart, 0)) do
              {chart} = if Enum.at(Enum.at(chart, rem_), j) == 1 do
                r2 = 0
                while_fun_24 = fn while_fun_24, chart, r2 ->
                  if r2 < _len(chart) do
                    chart = List.replace_at(chart, r2, List.replace_at(Enum.at(chart, r2), j, 0))
                    r2 = r2 + 1
                    while_fun_24.(while_fun_24, chart, r2)
                  else
                    {chart, r2}
                  end
                end
                {chart, r2} = try do
                    while_fun_24.(while_fun_24, chart, r2)
                  catch
                    {:break, {chart, r2}} -> {chart, r2}
                  end

                {chart}
              else
                {chart}
              end
              j = j + 1
              while_fun_23.(while_fun_23, chart, j)
            else
              {chart, j}
            end
          end
          {chart, j} = try do
              while_fun_23.(while_fun_23, chart, j)
            catch
              {:break, {chart, j}} -> {chart, j}
            end

          while_fun_20.(while_fun_20, chart, temp)
        else
          {chart, temp}
        end
      end
      {chart, temp} = try do
          while_fun_20.(while_fun_20, chart, temp)
        catch
          {:break, {chart, temp}} -> {chart, temp}
        end

    catch
      {:return, val} -> val
    end
  end
  def count_char(s, ch) do
    try do
      cnt = 0
      i = 0
      while_fun_25 = fn while_fun_25, cnt, i ->
        if i < _len(s) do
          {cnt} = if _slice(s, i, i + 1 - (i)) == ch do
            cnt = cnt + 1
            {cnt}
          else
            {cnt}
          end
          i = i + 1
          while_fun_25.(while_fun_25, cnt, i)
        else
          {cnt, i}
        end
      end
      {cnt, i} = try do
          while_fun_25.(while_fun_25, cnt, i)
        catch
          {:break, {cnt, i}} -> {cnt, i}
        end

      throw {:return, cnt}
    catch
      {:return, val} -> val
    end
  end
  def prime_implicant_chart(prime_implicants, binary) do
    try do
      chart = []
      i = 0
      while_fun_26 = fn while_fun_26, chart, i ->
        if i < _len(prime_implicants) do
          row = []
          j = 0
          while_fun_27 = fn while_fun_27, j, row ->
            if j < _len(binary) do
              row = (row ++ [0])
              j = j + 1
              while_fun_27.(while_fun_27, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_27.(while_fun_27, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          chart = (chart ++ [row])
          i = i + 1
          while_fun_26.(while_fun_26, chart, i)
        else
          {chart, i}
        end
      end
      {chart, i} = try do
          while_fun_26.(while_fun_26, chart, i)
        catch
          {:break, {chart, i}} -> {chart, i}
        end

      i = 0
      while_fun_28 = fn while_fun_28, chart, i ->
        if i < _len(prime_implicants) do
          count = count_char(Enum.at(prime_implicants, i), "_")
          j = 0
          while_fun_29 = fn while_fun_29, chart, j ->
            if j < _len(binary) do
              {chart} = if is_for_table(Enum.at(prime_implicants, i), Enum.at(binary, j), count) do
                chart = List.replace_at(chart, i, List.replace_at(Enum.at(chart, i), j, 1))
                {chart}
              else
                {chart}
              end
              j = j + 1
              while_fun_29.(while_fun_29, chart, j)
            else
              {chart, j}
            end
          end
          {chart, j} = try do
              while_fun_29.(while_fun_29, chart, j)
            catch
              {:break, {chart, j}} -> {chart, j}
            end

          i = i + 1
          while_fun_28.(while_fun_28, chart, i)
        else
          {chart, i}
        end
      end
      {chart, i} = try do
          while_fun_28.(while_fun_28, chart, i)
        catch
          {:break, {chart, i}} -> {chart, i}
        end

      throw {:return, chart}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      no_of_variable = 3
      minterms = [1, 5, 7]
      binary = decimal_to_binary(no_of_variable, minterms)
      prime_implicants = check(binary)
      IO.puts("Prime Implicants are:")
      IO.puts(Kernel.to_string(prime_implicants))
      chart = prime_implicant_chart(prime_implicants, binary)
      essential_prime_implicants = selection(chart, prime_implicants)
      IO.puts("Essential Prime Implicants are:")
      IO.puts(Kernel.to_string(essential_prime_implicants))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
