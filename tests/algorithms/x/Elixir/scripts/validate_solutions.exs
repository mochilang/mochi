# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _sha256(bs) do
    bin = if is_binary(bs), do: bs, else: :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  def byte_to_hex(b) do
    try do
      hi = div(b, 16)
      lo = rem(b, 16)
      throw {:return, (String.at(Process.get(:hex), hi) <> String.at(Process.get(:hex), lo))}
    catch
      {:return, val} -> val
    end
  end
  def bytes_to_hex(bs) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(bs) do
          res = (res <> byte_to_hex(Enum.at(bs, i, [])))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def sha256_hex(s) do
    try do
      throw {:return, bytes_to_hex(_sha256(s))}
    catch
      {:return, val} -> val
    end
  end
  def solution_001() do
    try do
      total = 0
      n = 0
      while_fun_2 = fn while_fun_2, n, total ->
        if n < 1000 do
          total = if rem(n, 3) == 0 || rem(n, 5) == 0 do
            total = total + n
            total
          else
            total
          end
          n = n + 1
          while_fun_2.(while_fun_2, n, total)
        else
          {n, total}
        end
      end
      {_, total} = try do
          while_fun_2.(while_fun_2, n, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, Kernel.to_string(total)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:hex, "0123456789abcdef")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:expected, sha256_hex("233168"))
    Process.put(:answer, solution_001())
    Process.put(:computed, sha256_hex(Process.get(:answer)))
    if Process.get(:computed) == Process.get(:expected) do
      IO.puts("Problem 001 passed")
    else
      IO.puts(((("Problem 001 failed: " <> Process.get(:computed)) <> " != ") <> Process.get(:expected)))
    end
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
