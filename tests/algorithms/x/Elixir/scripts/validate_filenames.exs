# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def indexOf(s, sub) do
    try do
      n = _len(s)
      m = _len(sub)
      i = 0
      while_fun = fn while_fun, i ->
        if i <= n - m do
          if _slice(s, i, i + m - (i)) == sub do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def contains(s, sub) do
    try do
      throw {:return, indexOf(s, sub) >= 0}
    catch
      {:return, val} -> val
    end
  end
  def validate(files) do
    try do
      upper = []
      space = []
      hyphen = []
      nodir = []
      {hyphen, nodir, space, upper} = Enum.reduce(files, {hyphen, nodir, space, upper}, fn f, {hyphen, nodir, space, upper} ->
        upper = if f != String.downcase(f) do
          upper = (upper ++ [f])
          upper
        else
          upper
        end
        space = if contains(f, " ") do
          space = (space ++ [f])
          space
        else
          space
        end
        hyphen = if contains(f, "-") && contains(f, "/site-packages/") == false do
          hyphen = (hyphen ++ [f])
          hyphen
        else
          hyphen
        end
        nodir = if !contains(f, "/") do
          nodir = (nodir ++ [f])
          nodir
        else
          nodir
        end
        {hyphen, nodir, space, upper}
      end)
      if _len(upper) > 0 do
        IO.puts((Kernel.inspect(_len(upper)) <> " files contain uppercase characters:"))
        Enum.each(upper, fn f ->
          IO.puts(Kernel.inspect(f))
        end)
        IO.puts("")
      end
      if _len(space) > 0 do
        IO.puts((Kernel.inspect(_len(space)) <> " files contain space characters:"))
        Enum.each(space, fn f ->
          IO.puts(f)
        end)
        IO.puts("")
      end
      if _len(hyphen) > 0 do
        IO.puts((Kernel.inspect(_len(hyphen)) <> " files contain hyphen characters:"))
        Enum.each(hyphen, fn f ->
          IO.puts(f)
        end)
        IO.puts("")
      end
      if _len(nodir) > 0 do
        IO.puts((Kernel.inspect(_len(nodir)) <> " files are not in a directory:"))
        Enum.each(nodir, fn f ->
          IO.puts(f)
        end)
        IO.puts("")
      end
      throw {:return, _len(upper) + _len(space) + _len(hyphen) + _len(nodir)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      files = ["scripts/Validate_filenames.py", "good/file.txt", "bad file.txt", "/site-packages/pkg-name.py", "nopath", "src/hyphen-name.py"]
      bad = validate(files)
      IO.puts(Kernel.to_string(bad))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
