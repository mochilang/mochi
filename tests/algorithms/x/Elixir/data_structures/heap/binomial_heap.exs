# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def new_heap() do
    try do
      throw {:return, %{data: []}}
    catch
      {:return, val} -> val
    end
  end
  def swap(data, i, j) do
    try do
      tmp = Enum.at(data, i)
      data = List.replace_at(data, i, Enum.at(data, j))
      data = List.replace_at(data, j, tmp)
    catch
      {:return, val} -> val
    end
  end
  def sift_up(data, idx) do
    try do
      i = idx
      while_fun = fn while_fun, i ->
        if i > 0 do
          parent = div((i - 1), 2)
          if Enum.at(data, parent) <= Enum.at(data, i) do
            throw {:break, {i}}
          end
          swap(data, parent, i)
          i = parent
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def sift_down(data, idx) do
    try do
      i = idx
      n = _len(data)
      while_fun_2 = fn while_fun_2, i ->
        if true do
          left = 2 * i + 1
          right = left + 1
          smallest = i
          {smallest} = if left < n && Enum.at(data, left) < Enum.at(data, smallest) do
            smallest = left
            {smallest}
          else
            {smallest}
          end
          {smallest} = if right < n && Enum.at(data, right) < Enum.at(data, smallest) do
            smallest = right
            {smallest}
          else
            {smallest}
          end
          if smallest == i do
            throw {:break, {i}}
          end
          swap(data, i, smallest)
          i = smallest
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def insert(heap, v) do
    try do
      d = heap.data
      d = (d ++ [v])
      sift_up(d, _len(d) - 1)
      throw {:return, %{data: d}}
    catch
      {:return, val} -> val
    end
  end
  def peek(heap) do
    try do
      throw {:return, Enum.at(heap.data, 0)}
    catch
      {:return, val} -> val
    end
  end
  def is_empty(heap) do
    try do
      throw {:return, _len(Map.get(heap, :data, [])) == 0}
    catch
      {:return, val} -> val
    end
  end
  def delete_min(heap) do
    try do
      d = heap.data
      min = Enum.at(d, 0)
      d = List.replace_at(d, 0, Enum.at(d, _len(d) - 1))
      d = _slice(d, 0, (_len(d) - 1) - 0)
      if _len(d) > 0 do
        sift_down(d, 0)
      end
      throw {:return, %{heap: %{data: d}, value: min}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      h = new_heap()
      h = insert(h, 10)
      h = insert(h, 3)
      h = insert(h, 7)
      IO.puts(Kernel.inspect(peek(h)))
      d1 = delete_min(h)
      h = d1.heap
      IO.puts(Kernel.to_string(d1.value))
      d2 = delete_min(h)
      h = d2.heap
      IO.puts(Kernel.to_string(d2.value))
      d3 = delete_min(h)
      h = d3.heap
      IO.puts(Kernel.to_string(d3.value))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
