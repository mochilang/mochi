# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def set_seed(s) do
    try do
      Process.put(:seed, s)
    catch
      {:return, val} -> val
    end
  end
  def randint(a, b) do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483648))
      throw {:return, (rem(Process.get(:seed), (b - a + 1))) + a}
    catch
      {:return, val} -> val
    end
  end
  def rand_bool() do
    try do
      throw {:return, randint(0, 1) == 1}
    catch
      {:return, val} -> val
    end
  end
  def new_heap() do
    try do
      Process.put(:nodes, [])
      Process.put(:root, Process.get(:nil))
    catch
      {:return, val} -> val
    end
  end
  def merge(r1, r2) do
    try do
      if r1 == Process.get(:nil) do
        throw {:return, r2}
      end
      if r2 == Process.get(:nil) do
        throw {:return, r1}
      end
      {r1, r2} = if Enum.at(Process.get(:nodes), r1)["value"] > Enum.at(Process.get(:nodes), r2)["value"] do
        tmp = r1
        r1 = r2
        r2 = tmp
        {r1, r2}
      else
        {r1, r2}
      end
      if rand_bool() do
        tmp = Enum.at(Process.get(:nodes), r1)["left"]
        Process.put(:nodes, List.replace_at(Process.get(:nodes), r1, Map.put(Enum.at(Process.get(:nodes), r1), "left", Enum.at(Process.get(:nodes), r1)["right"])))
        Process.put(:nodes, List.replace_at(Process.get(:nodes), r1, Map.put(Enum.at(Process.get(:nodes), r1), "right", tmp)))
      end
      Process.put(:nodes, List.replace_at(Process.get(:nodes), r1, Map.put(Enum.at(Process.get(:nodes), r1), "left", merge(Enum.at(Process.get(:nodes), r1)["left"], r2))))
      throw {:return, r1}
    catch
      {:return, val} -> val
    end
  end
  def insert(value) do
    try do
      node_ = %{"value" => value, "left" => Process.get(:nil), "right" => Process.get(:nil)}
      Process.put(:nodes, (Process.get(:nodes) ++ [node_]))
      idx = _len(Process.get(:nodes)) - 1
      Process.put(:root, merge(Process.get(:root), idx))
    catch
      {:return, val} -> val
    end
  end
  def top() do
    try do
      throw {:return, ((if Process.get(:root) == Process.get(:nil), do: 0, else: Enum.at(Process.get(:nodes), Process.get(:root))["value"]))}
    catch
      {:return, val} -> val
    end
  end
  def pop() do
    try do
      result = top()
      l = Enum.at(Process.get(:nodes), Process.get(:root))["left"]
      r = Enum.at(Process.get(:nodes), Process.get(:root))["right"]
      Process.put(:root, merge(l, r))
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def is_empty() do
    try do
      throw {:return, Process.get(:root) == Process.get(:nil)}
    catch
      {:return, val} -> val
    end
  end
  def to_sorted_list() do
    try do
      res = []
      while_fun = fn while_fun, res ->
        if !is_empty() do
          res = (res ++ [pop()])
          while_fun.(while_fun, res)
        else
          res
        end
      end
      res = try do
          while_fun.(while_fun, res)
        catch
          {:break, {res}} -> res
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  Process.put(:nodes, [])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:nil, 0 - 1)
    Process.put(:root, Process.get(:nil))
    set_seed(1)
    new_heap()
    insert(2)
    insert(3)
    insert(1)
    insert(5)
    insert(1)
    insert(7)
    IO.puts(Kernel.inspect(to_sorted_list()))
    new_heap()
    insert(1)
    insert(-1)
    insert(0)
    IO.puts(Kernel.inspect(to_sorted_list()))
    new_heap()
    insert(3)
    insert(1)
    insert(3)
    insert(7)
    IO.puts(Kernel.inspect(pop()))
    IO.puts(Kernel.inspect(pop()))
    IO.puts(Kernel.inspect(pop()))
    IO.puts(Kernel.inspect(pop()))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
