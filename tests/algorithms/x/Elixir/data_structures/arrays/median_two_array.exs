# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sortFloats(xs) do
    try do
      arr = xs
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < _len(arr) do
          j = 0
          while_fun_2 = fn while_fun_2, arr, j ->
            if j < _len(arr) - 1 do
              arr = if Enum.at(arr, j, []) > Enum.at(arr, j + 1, []) do
                t = Enum.at(arr, j, [])
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1, []))
                arr = List.replace_at(arr, j + 1, t)
                arr
              else
                arr
              end
              j = j + 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, _} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, _}} -> {arr, 0}
            end

          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, _} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, _}} -> {arr, 0}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def find_median_sorted_arrays(nums1, nums2) do
    try do
      if _len(nums1) == 0 && _len(nums2) == 0 do
        raise("Both input arrays are empty.")
      end
      merged = []
      i = 0
      while_fun_3 = fn while_fun_3, i, merged ->
        if i < _len(nums1) do
          merged = (merged ++ [Enum.at(nums1, i, [])])
          i = i + 1
          while_fun_3.(while_fun_3, i, merged)
        else
          {i, merged}
        end
      end
      {_, merged} = try do
          while_fun_3.(while_fun_3, i, merged)
        catch
          {:break, {_, merged}} -> {0, merged}
        end

      j = 0
      while_fun_4 = fn while_fun_4, j, merged ->
        if j < _len(nums2) do
          merged = (merged ++ [Enum.at(nums2, j, [])])
          j = j + 1
          while_fun_4.(while_fun_4, j, merged)
        else
          {j, merged}
        end
      end
      {_, merged} = try do
          while_fun_4.(while_fun_4, j, merged)
        catch
          {:break, {_, merged}} -> {0, merged}
        end

      sorted = sortFloats(merged)
      total = _len(sorted)
      if rem(total, 2) == 1 do
        throw {:return, Enum.at(sorted, div(total, 2), [])}
      end
      middle1 = Enum.at(sorted, div(total, 2) - 1, [])
      middle2 = Enum.at(sorted, div(total, 2), [])
      throw {:return, (middle1 + middle2) / 2.0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(find_median_sorted_arrays([1.0, 3.0], [2.0])))
    IO.puts(Kernel.inspect(find_median_sorted_arrays([1.0, 2.0], [3.0, 4.0])))
    IO.puts(Kernel.inspect(find_median_sorted_arrays([0.0, 0.0], [0.0, 0.0])))
    IO.puts(Kernel.inspect(find_median_sorted_arrays([], [1.0])))
    IO.puts(Kernel.inspect(find_median_sorted_arrays([-1000.0], [1000.0])))
    IO.puts(Kernel.inspect(find_median_sorted_arrays([-1.1, -2.2], [-3.3, -4.4])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
