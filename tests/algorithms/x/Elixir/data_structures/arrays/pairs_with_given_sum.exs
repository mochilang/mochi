# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pairs_with_sum(arr, req_sum) do
    try do
      n = _len(arr)
      count = 0
      i = 0
      while_fun = fn while_fun, count, i ->
        if i < n do
          j = i + 1
          while_fun_2 = fn while_fun_2, count, j ->
            if j < n do
              count = if Enum.at(arr, i, []) + Enum.at(arr, j, []) == req_sum do
                count = count + 1
                count
              else
                count
              end
              j = j + 1
              while_fun_2.(while_fun_2, count, j)
            else
              {count, j}
            end
          end
          {count, _} = try do
              while_fun_2.(while_fun_2, count, j)
            catch
              {:break, {count, _}} -> {count, 0}
            end

          i = i + 1
          while_fun.(while_fun, count, i)
        else
          {count, i}
        end
      end
      {count, _} = try do
          while_fun.(while_fun, count, i)
        catch
          {:break, {count, _}} -> {count, 0}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(pairs_with_sum([1, 5, 7, 1], 6)))
    IO.puts(Kernel.inspect(pairs_with_sum([1, 1, 1, 1, 1, 1, 1, 1], 2)))
    IO.puts(Kernel.inspect(pairs_with_sum([1, 7, 6, 2, 5, 4, 3, 1, 9, 8], 7)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
