# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pairs_with_sum(arr, req_sum) do
    try do
      n = _len(arr)
      count = 0
      i = 0
      while_fun = fn while_fun, count, i ->
        if i < n do
          j = i + 1
          while_fun_2 = fn while_fun_2, count, j ->
            if j < n do
              {count} = if Enum.at(arr, i) + Enum.at(arr, j) == req_sum do
                count = count + 1
                {count}
              else
                {count}
              end
              j = j + 1
              while_fun_2.(while_fun_2, count, j)
            else
              {count, j}
            end
          end
          {count, j} = try do
              while_fun_2.(while_fun_2, count, j)
            catch
              {:break, {count, j}} -> {count, j}
            end

          i = i + 1
          while_fun.(while_fun, count, i)
        else
          {count, i}
        end
      end
      {count, i} = try do
          while_fun.(while_fun, count, i)
        catch
          {:break, {count, i}} -> {count, i}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(pairs_with_sum([1, 5, 7, 1], 6)))
    IO.puts(Kernel.inspect(pairs_with_sum([1, 1, 1, 1, 1, 1, 1, 1], 2)))
    IO.puts(Kernel.inspect(pairs_with_sum([1, 7, 6, 2, 5, 4, 3, 1, 9, 8], 7)))
  end
end
Main.main()
