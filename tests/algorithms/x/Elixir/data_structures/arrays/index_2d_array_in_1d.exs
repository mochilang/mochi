# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def iterator_values(matrix) do
    try do
      result = []
      {result} = Enum.reduce(matrix, {result}, fn row, {result} ->
        {result} = Enum.reduce(row, {result}, fn value, {result} ->
          result = (result ++ [value])
          {result}
        end)
        {result}
      end)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def index_2d_array_in_1d(array, index) do
    try do
      rows = _len(array)
      cols = _len(Enum.at(array, 0))
      if rows == 0 || cols == 0 do
        raise("no items in array")
      end
      if index < 0 || index >= rows * cols do
        raise("index out of range")
      end
      throw {:return, Enum.at(Enum.at(array, Kernel.trunc(div(index, cols))), rem(index, cols))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(iterator_values([[5], [-523], [-1], [34], [0]])))
    IO.puts(Kernel.inspect(iterator_values([[5, -523, -1], [34, 0]])))
    IO.puts(Kernel.inspect(index_2d_array_in_1d([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]], 5)))
  end
end
Main.main()
