# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def product_sum(arr, depth) do
    try do
      total = 0
      i = 0
      while_fun = fn while_fun, i, total ->
        if i < _len(arr) do
          el = Enum.at(arr, i, [])
          total = (if Enum.any?(el), do: total + product_sum(el, depth + 1), else: total + (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(el))
          i = i + 1
          while_fun.(while_fun, i, total)
        else
          {i, total}
        end
      end
      {_, total} = try do
          while_fun.(while_fun, i, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total * depth}
    catch
      {:return, val} -> val
    end
  end
  def product_sum_array(array) do
    try do
      res = product_sum(array, 1)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:example, [5, 2, [-7, 1], 3, [6, [-13, 8], 4]])
    IO.puts(Kernel.inspect(product_sum_array(Process.get(:example))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
