# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_monotonic(nums) do
    try do
      if _len(nums) <= 2 do
        throw {:return, true}
      end
      increasing = true
      decreasing = true
      i = 0
      while_fun = fn while_fun, decreasing, i, increasing ->
        if i < _len(nums) - 1 do
          {increasing} = if Enum.at(nums, i) > Enum.at(nums, i + 1) do
            increasing = false
            {increasing}
          else
            {increasing}
          end
          {decreasing} = if Enum.at(nums, i) < Enum.at(nums, i + 1) do
            decreasing = false
            {decreasing}
          else
            {decreasing}
          end
          i = i + 1
          while_fun.(while_fun, decreasing, i, increasing)
        else
          {decreasing, i, increasing}
        end
      end
      {decreasing, i, increasing} = try do
          while_fun.(while_fun, decreasing, i, increasing)
        catch
          {:break, {decreasing, i, increasing}} -> {decreasing, i, increasing}
        end

      throw {:return, increasing || decreasing}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(is_monotonic([1, 2, 2, 3])))
    IO.puts(Kernel.inspect(is_monotonic([6, 5, 4, 4])))
    IO.puts(Kernel.inspect(is_monotonic([1, 3, 2])))
  end
end
Main.main()
