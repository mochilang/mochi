# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_monotonic(nums) do
    try do
      if _len(nums) <= 2 do
        throw {:return, true}
      end
      increasing = true
      decreasing = true
      i = 0
      while_fun = fn while_fun, decreasing, i, increasing ->
        if i < _len(nums) - 1 do
          increasing = if Enum.at(nums, i, []) > Enum.at(nums, i + 1, []) do
            increasing = false
            increasing
          else
            increasing
          end
          decreasing = if Enum.at(nums, i, []) < Enum.at(nums, i + 1, []) do
            decreasing = false
            decreasing
          else
            decreasing
          end
          i = i + 1
          while_fun.(while_fun, decreasing, i, increasing)
        else
          {decreasing, i, increasing}
        end
      end
      {decreasing, _, increasing} = try do
          while_fun.(while_fun, decreasing, i, increasing)
        catch
          {:break, {decreasing, _, increasing}} -> {decreasing, 0, increasing}
        end

      throw {:return, increasing || decreasing}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_monotonic([1, 2, 2, 3])))
    IO.puts(Kernel.inspect(is_monotonic([6, 5, 4, 4])))
    IO.puts(Kernel.inspect(is_monotonic([1, 3, 2])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
