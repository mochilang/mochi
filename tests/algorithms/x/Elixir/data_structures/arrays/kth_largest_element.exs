# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def partition(arr, low, high) do
    try do
      pivot = Enum.at(arr, high, [])
      i = low - 1
      j = low
      while_fun = fn while_fun, arr, i, j ->
        if j < high do
          {arr, i} = if Enum.at(arr, j, []) >= pivot do
            i = i + 1
            tmp = Enum.at(arr, i, [])
            arr = List.replace_at(arr, i, Enum.at(arr, j, []))
            arr = List.replace_at(arr, j, tmp)
            {arr, i}
          else
            {arr, i}
          end
          j = j + 1
          while_fun.(while_fun, arr, i, j)
        else
          {arr, i, j}
        end
      end
      {arr, _, _} = try do
          while_fun.(while_fun, arr, i, j)
        catch
          {:break, {arr, _, _}} -> {arr, 0, 0}
        end

      k = i + 1
      tmp = Enum.at(arr, k, [])
      arr = List.replace_at(arr, k, Enum.at(arr, high, []))
      arr = List.replace_at(arr, high, tmp)
      throw {:return, k}
    catch
      {:return, val} -> val
    end
  end
  def kth_largest_element(arr, position) do
    try do
      if _len(arr) == 0 do
        throw {:return, -1}
      end
      if position < 1 || position > _len(arr) do
        throw {:return, -1}
      end
      low = 0
      high = _len(arr) - 1
      while_fun_2 = fn while_fun_2, high, low ->
        if low <= high do
          if low > _len(arr) - 1 || high < 0 do
            throw {:return, -1}
          end
          pivot_index = partition(arr, low, high)
          {high, low} = if pivot_index == position - 1 do
            throw {:return, Enum.at(arr, pivot_index, [])}
            {high, low}
          else
            {high, low} = if pivot_index > position - 1 do
              high = pivot_index - 1
              {high, low}
            else
              low = pivot_index + 1
              {high, low}
            end
            {high, low}
          end
          while_fun_2.(while_fun_2, high, low)
        else
          {high, low}
        end
      end
      {high, low} = try do
          while_fun_2.(while_fun_2, high, low)
        catch
          {:break, {high, low}} -> {high, low}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:arr1, [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
  Process.put(:arr2, [2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(kth_largest_element(Process.get(:arr1), 3)))
    IO.puts("\n")
    IO.puts(Kernel.inspect(kth_largest_element(Process.get(:arr2), 1)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
