# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sort_triplet(a, b, c) do
    try do
      x = a
      y = b
      z = c
      {x, y} = if x > y do
        t = x
        x = y
        y = t
        {x, y}
      else
        {x, y}
      end
      {y, z} = if y > z do
        t = y
        y = z
        z = t
        {y, z}
      else
        {y, z}
      end
      {x, y} = if x > y do
        t = x
        x = y
        y = t
        {x, y}
      else
        {x, y}
      end
      throw {:return, [x, y, z]}
    catch
      {:return, val} -> val
    end
  end
  def contains_triplet(arr, target) do
    try do
      try do
        for i <- (0..(_len(arr) - 1)) do
          try do
            item = Enum.at(arr, i, [])
            same = true
            try do
              for j <- (0..(_len(target) - 1)) do
                try do
                  same = if Enum.at(item, j, []) != Enum.at(target, j, []) do
                    same = false
                    throw {:break, {same}}
                    same
                  else
                    same
                  end
                catch
                  :continue -> nil
                  {:continue, _} -> nil
                end
              end
            catch
              :break -> nil
              {:break, _} -> nil
            end
            if same do
              throw {:return, true}
            end
          catch
            :continue -> nil
            {:continue, _} -> nil
          end
        end
      catch
        :break -> nil
        {:break, _} -> nil
      end
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def contains_int(arr, value) do
    try do
      Enum.each((0..(_len(arr) - 1)), fn i ->
        if Enum.at(arr, i, []) == value do
          throw {:return, true}
        end
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def find_triplets_with_0_sum(nums) do
    try do
      n = _len(nums)
      result = []
      {result} = Enum.reduce((0..(n - 1)//1), {result}, fn i, {result} ->
        {result} = Enum.reduce(((i + 1)..(n - 1)//1), {result}, fn j, {result} ->
          {result} = Enum.reduce(((j + 1)..(n - 1)//1), {result}, fn k, {result} ->
            a = Enum.at(nums, i, [])
            b = Enum.at(nums, j, [])
            c = Enum.at(nums, k, [])
            result = if a + b + c == 0 do
              trip = sort_triplet(a, b, c)
              result = if !contains_triplet(result, trip) do
                result = (result ++ [trip])
                result
              else
                result
              end
              result
            else
              result
            end
            {result}
          end)
          {result}
        end)
        {result}
      end)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def find_triplets_with_0_sum_hashing(arr) do
    try do
      target_sum = 0
      output = []
      {output} = Enum.reduce((0..(_len(arr) - 1)//1), {output}, fn i, {output} ->
        seen = []
        current_sum = target_sum - Enum.at(arr, i, [])
        {output, seen} = Enum.reduce(((i + 1)..(_len(arr) - 1)//1), {output, seen}, fn j, {output, seen} ->
          other = Enum.at(arr, j, [])
          required = current_sum - other
          output = if contains_int(seen, required) do
            trip = sort_triplet(Enum.at(arr, i, []), other, required)
            output = if !contains_triplet(output, trip) do
              output = (output ++ [trip])
              output
            else
              output
            end
            output
          else
            output
          end
          seen = (seen ++ [other])
          {output, seen}
        end)
        {output}
      end)
      throw {:return, output}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(find_triplets_with_0_sum([-1, 0, 1, 2, -1, -4])))
    IO.puts(Kernel.inspect(find_triplets_with_0_sum([])))
    IO.puts(Kernel.inspect(find_triplets_with_0_sum([0, 0, 0])))
    IO.puts(Kernel.inspect(find_triplets_with_0_sum([1, 2, 3, 0, -1, -2, -3])))
    IO.puts(Kernel.inspect(find_triplets_with_0_sum_hashing([-1, 0, 1, 2, -1, -4])))
    IO.puts(Kernel.inspect(find_triplets_with_0_sum_hashing([])))
    IO.puts(Kernel.inspect(find_triplets_with_0_sum_hashing([0, 0, 0])))
    IO.puts(Kernel.inspect(find_triplets_with_0_sum_hashing([1, 2, 3, 0, -1, -2, -3])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
