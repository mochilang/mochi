# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_prefix_sum(arr) do
    try do
      prefix = []
      running = 0
      i = 0
      while_fun = fn while_fun, i, prefix, running ->
        if i < _len(arr) do
          running = running + Enum.at(arr, i, [])
          prefix = (prefix ++ [running])
          i = i + 1
          while_fun.(while_fun, i, prefix, running)
        else
          {i, prefix, running}
        end
      end
      {_, prefix, running} = try do
          while_fun.(while_fun, i, prefix, running)
        catch
          {:break, {_, prefix, running}} -> {0, prefix, running}
        end

      throw {:return, %{prefix_sum: prefix}}
    catch
      {:return, val} -> val
    end
  end
  def get_sum(ps, start, end_) do
    try do
      prefix = ps.prefix_sum
      if _len(prefix) == 0 do
        raise("The array is empty.")
      end
      if start < 0 || end_ >= _len(prefix) || start > end_ do
        raise("Invalid range specified.")
      end
      if start == 0 do
        throw {:return, Enum.at(prefix, end_, [])}
      end
      throw {:return, Enum.at(prefix, end_, []) - Enum.at(prefix, start - 1, [])}
    catch
      {:return, val} -> val
    end
  end
  def contains_sum(ps, target_sum) do
    try do
      prefix = ps.prefix_sum
      sums = [0]
      i = 0
      while_fun_2 = fn while_fun_2, i, sums ->
        if i < _len(prefix) do
          sum_item = Enum.at(prefix, i, [])
          j = 0
          while_fun_3 = fn while_fun_3, j ->
            if j < _len(sums) do
              if Enum.at(sums, j, []) == sum_item - target_sum do
                throw {:return, true}
              end
              j = j + 1
              while_fun_3.(while_fun_3, j)
            else
              j
            end
          end
          _ = try do
              while_fun_3.(while_fun_3, j)
            catch
              {:break, {_}} -> 0
            end

          sums = (sums ++ [sum_item])
          i = i + 1
          while_fun_2.(while_fun_2, i, sums)
        else
          {i, sums}
        end
      end
      {_, sums} = try do
          while_fun_2.(while_fun_2, i, sums)
        catch
          {:break, {_, sums}} -> {0, sums}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:ps, make_prefix_sum([1, 2, 3]))
    IO.puts(Kernel.inspect(get_sum(Process.get(:ps), 0, 2)))
    IO.puts(Kernel.inspect(get_sum(Process.get(:ps), 1, 2)))
    IO.puts(Kernel.inspect(get_sum(Process.get(:ps), 2, 2)))
    IO.puts(Kernel.inspect(contains_sum(Process.get(:ps), 6)))
    IO.puts(Kernel.inspect(contains_sum(Process.get(:ps), 5)))
    IO.puts(Kernel.inspect(contains_sum(Process.get(:ps), 3)))
    IO.puts(Kernel.inspect(contains_sum(Process.get(:ps), 4)))
    IO.puts(Kernel.inspect(contains_sum(Process.get(:ps), 7)))
    Process.put(:ps2, make_prefix_sum([1, -2, 3]))
    IO.puts(Kernel.inspect(contains_sum(Process.get(:ps2), 2)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
