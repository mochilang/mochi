# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def string_to_grid(s) do
    try do
      grid = []
      i = 0
      while_fun = fn while_fun, grid, i ->
        if i < 9 do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < 9 do
              ch = _slice(s, i * 9 + j, i * 9 + j + 1 - (i * 9 + j))
              val = 0
              {val} = if ch != "0" && ch != "." do
                val = String.to_integer(ch)
                {val}
              else
                {val}
              end
              row = (row ++ [val])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          grid = (grid ++ [row])
          i = i + 1
          while_fun.(while_fun, grid, i)
        else
          {grid, i}
        end
      end
      {grid, i} = try do
          while_fun.(while_fun, grid, i)
        catch
          {:break, {grid, i}} -> {grid, i}
        end

      throw {:return, grid}
    catch
      {:return, val} -> val
    end
  end
  def print_grid(grid) do
    try do
      Enum.each((0..(9 - 1)), fn r ->
        line = ""
        {line} = Enum.reduce((0..(9 - 1)), {line}, fn c, {line} ->
          line = (line <> Kernel.to_string(Enum.at(Enum.at(grid, r), c)))
          {line} = if c < 8 do
            line = (line <> " ")
            {line}
          else
            {line}
          end
          {line}
        end)
        IO.puts(line)
      end)
    catch
      {:return, val} -> val
    end
  end
  def is_safe(grid, row, column, n) do
    try do
      Enum.each((0..(9 - 1)), fn i ->
        if Enum.at(Enum.at(grid, row), i) == n || Enum.at(Enum.at(grid, i), column) == n do
          throw {:return, false}
        end
      end)
      Enum.each((0..(3 - 1)), fn i ->
        Enum.each((0..(3 - 1)), fn j ->
          if Enum.at(Enum.at(grid, (row - rem(row, 3)) + i), (column - rem(column, 3)) + j) == n do
            throw {:return, false}
          end
        end)
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def find_empty(grid) do
    try do
      Enum.each((0..(9 - 1)), fn i ->
        Enum.each((0..(9 - 1)), fn j ->
          if Enum.at(Enum.at(grid, i), j) == 0 do
            throw {:return, [i, j]}
          end
        end)
      end)
      throw {:return, []}
    catch
      {:return, val} -> val
    end
  end
  def solve(grid) do
    try do
      loc = find_empty(grid)
      if _len(loc) == 0 do
        throw {:return, true}
      end
      row = Enum.at(loc, 0)
      column = Enum.at(loc, 1)
      {grid} = Enum.reduce((1..(10 - 1)), {grid}, fn digit, {grid} ->
        {grid} = if is_safe(grid, row, column, digit) do
          grid = List.replace_at(grid, row, List.replace_at(Enum.at(grid, row), column, digit))
          if solve(grid) do
            throw {:return, true}
          end
          grid = List.replace_at(grid, row, List.replace_at(Enum.at(grid, row), column, 0))
          {grid}
        else
          {grid}
        end
        {grid}
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:puzzle, "003020600900305001001806400008102900700000008006708200002609500800203009005010300")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:grid, string_to_grid(Process.get(:puzzle)))
    IO.puts("Original grid:")
    print_grid(Process.get(:grid))
    if solve(Process.get(:grid)) do
      IO.puts("\nSolved grid:")
      print_grid(Process.get(:grid))
    else
      IO.puts("\nNo solution found")
    end
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
