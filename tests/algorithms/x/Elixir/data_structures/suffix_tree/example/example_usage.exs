# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def new_suffix_tree(text) do
    try do
      throw {:return, %{text: text}}
    catch
      {:return, val} -> val
    end
  end
  def search(tree, pattern) do
    try do
      n = _len(Map.get(tree, :text, ""))
      m = _len(pattern)
      if m == 0 do
        throw {:return, true}
      end
      if m > n do
        throw {:return, false}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i <= n - m do
          if _slice(tree.text, i, (i + m) - i) == pattern do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      text = "monkey banana"
      suffix_tree = new_suffix_tree(text)
      patterns = ["ana", "ban", "na", "xyz", "mon"]
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(patterns) do
          pattern = Enum.at(patterns, i)
          found = search(suffix_tree, pattern)
          IO.puts(((("Pattern '" <> pattern) <> "' found: ") <> Kernel.to_string(found)))
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
