# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  def new_suffix_tree_node(children, is_end_of_string, start, end_, suffix_link) do
    try do
      throw {:return, %{children: children, is_end_of_string: is_end_of_string, start: start, end: end_, suffix_link: suffix_link}}
    catch
      {:return, val} -> val
    end
  end
  def empty_suffix_tree_node() do
    try do
      throw {:return, new_suffix_tree_node(%{}, false, 0 - 1, 0 - 1, 0 - 1)}
    catch
      {:return, val} -> val
    end
  end
  def has_key(m, k) do
    try do
      Enum.each(Map.keys(m), fn key ->
        if key == k do
          throw {:return, true}
        end
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:root, new_suffix_tree_node(%{"a" => 1}, false, 0 - 1, 0 - 1, 0 - 1))
    Process.put(:leaf, new_suffix_tree_node(%{}, true, 0, 2, 0))
    Process.put(:nodes, [Process.get(:root), Process.get(:leaf)])
    Process.put(:root_check, Enum.at(Process.get(:nodes), 0))
    Process.put(:leaf_check, Enum.at(Process.get(:nodes), 1))
    IO.puts(Kernel.inspect(has_key(Process.get(:root_check).children, "a")))
    IO.puts(Kernel.to_string(Process.get(:leaf_check).is_end_of_string))
    IO.puts(Kernel.to_string(Process.get(:leaf_check).start))
    IO.puts(Kernel.to_string(Process.get(:leaf_check).end))
    IO.puts(Kernel.to_string(Process.get(:leaf_check).suffix_link))
  end
end
Main.main()
