# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_prime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      i = 2
      while_fun = fn while_fun, i ->
        if i * i <= n do
          if rem(n, i) == 0 do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def prev_prime(n) do
    try do
      p = n - 1
      while_fun_2 = fn while_fun_2, p ->
        if p >= 2 do
          if is_prime(p) do
            throw {:return, p}
          end
          p = p - 1
          while_fun_2.(while_fun_2, p)
        else
          p
        end
      end
      p = try do
          while_fun_2.(while_fun_2, p)
        catch
          {:break, {p}} -> p
        end

      throw {:return, 1}
    catch
      {:return, val} -> val
    end
  end
  def create_table(size) do
    try do
      vals = []
      i = 0
      while_fun_3 = fn while_fun_3, i, vals ->
        if i < size do
          vals = (vals ++ [(-1)])
          i = i + 1
          while_fun_3.(while_fun_3, i, vals)
        else
          {i, vals}
        end
      end
      {i, vals} = try do
          while_fun_3.(while_fun_3, i, vals)
        catch
          {:break, {i, vals}} -> {i, vals}
        end

      throw {:return, vals}
    catch
      {:return, val} -> val
    end
  end
  def hash1(size, key) do
    try do
      throw {:return, rem(key, size)}
    catch
      {:return, val} -> val
    end
  end
  def hash2(prime, key) do
    try do
      throw {:return, prime - (rem(key, prime))}
    catch
      {:return, val} -> val
    end
  end
  def insert_double_hash(values, size, prime, value) do
    try do
      vals = values
      idx = hash1(size, value)
      step = hash2(prime, value)
      count = 0
      while_fun_4 = fn while_fun_4, count, idx ->
        if Enum.at(vals, idx) != (-1) && count < size do
          idx = rem((idx + step), size)
          count = count + 1
          while_fun_4.(while_fun_4, count, idx)
        else
          {count, idx}
        end
      end
      {count, idx} = try do
          while_fun_4.(while_fun_4, count, idx)
        catch
          {:break, {count, idx}} -> {count, idx}
        end

      {vals} = if Enum.at(vals, idx) == (-1) do
        vals = List.replace_at(vals, idx, value)
        {vals}
      else
        {vals}
      end
      throw {:return, vals}
    catch
      {:return, val} -> val
    end
  end
  def table_keys(values) do
    try do
      res = %{}
      i = 0
      while_fun_5 = fn while_fun_5, i, res ->
        if i < _len(values) do
          {res} = if Enum.at(values, i) != (-1) do
            res = Map.put(res, i, Enum.at(values, i))
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_5.(while_fun_5, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def run_example(size, data) do
    try do
      prime = prev_prime(size)
      table = create_table(size)
      i = 0
      while_fun_6 = fn while_fun_6, i, table ->
        if i < _len(data) do
          table = insert_double_hash(table, size, prime, Enum.at(data, i))
          i = i + 1
          while_fun_6.(while_fun_6, i, table)
        else
          {i, table}
        end
      end
      {i, table} = try do
          while_fun_6.(while_fun_6, i, table)
        catch
          {:break, {i, table}} -> {i, table}
        end

      IO.puts(Kernel.inspect(table_keys(table)))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    run_example(3, [10, 20, 30])
    run_example(4, [10, 20, 30])
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
