# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def isPrime(number) do
    try do
      if number < 2 do
        throw {:return, false}
      end
      if number < 4 do
        throw {:return, true}
      end
      if rem(number, 2) == 0 do
        throw {:return, false}
      end
      i = 3
      while_fun = fn while_fun, i ->
        if i * i <= number do
          if rem(number, i) == 0 do
            throw {:return, false}
          end
          i = i + 2
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def nextPrime(value, factor, desc) do
    try do
      v = value * factor
      firstValue = v
      while_fun_2 = fn while_fun_2, v ->
        if !isPrime(v) do
          v = (if desc, do: v - 1, else: v + 1)
          while_fun_2.(while_fun_2, v)
        else
          v
        end
      end
      v = try do
          while_fun_2.(while_fun_2, v)
        catch
          {:break, {v}} -> v
        end

      if v == firstValue do
        if desc do
          throw {:return, nextPrime(v - 1, 1, desc)}
        else
          throw {:return, nextPrime(v + 1, 1, desc)}
        end
      end
      throw {:return, v}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(isPrime(0)))
    IO.puts(Kernel.inspect(isPrime(1)))
    IO.puts(Kernel.inspect(isPrime(2)))
    IO.puts(Kernel.inspect(isPrime(3)))
    IO.puts(Kernel.inspect(isPrime(27)))
    IO.puts(Kernel.inspect(isPrime(87)))
    IO.puts(Kernel.inspect(isPrime(563)))
    IO.puts(Kernel.inspect(isPrime(2999)))
    IO.puts(Kernel.inspect(isPrime(67483)))
    IO.puts(Kernel.inspect(nextPrime(14, 1, false)))
    IO.puts(Kernel.inspect(nextPrime(14, 1, true)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
