# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def create_queue(capacity) do
    try do
      arr = []
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < capacity do
          arr = (arr ++ [0])
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, %{data: arr, front: 0, rear: 0, size: 0, capacity: capacity}}
    catch
      {:return, val} -> val
    end
  end
  def length(q) do
    try do
      throw {:return, q.size}
    catch
      {:return, val} -> val
    end
  end
  def is_empty(q) do
    try do
      throw {:return, q.size == 0}
    catch
      {:return, val} -> val
    end
  end
  def front(q) do
    try do
      throw {:return, ((if is_empty(q), do: 0, else: Enum.at(q.data, q.front)))}
    catch
      {:return, val} -> val
    end
  end
  def enqueue(q, value) do
    try do
      if q.size >= q.capacity do
        raise("QUEUE IS FULL")
      end
      arr = q.data
      arr = List.replace_at(arr, q.rear, value)
      q = Map.put(q, :data, arr)
      q = Map.put(q, :rear, rem((q.rear + 1), q.capacity))
      q = Map.put(q, :size, q.size + 1)
      throw {:return, q}
    catch
      {:return, val} -> val
    end
  end
  def dequeue(q) do
    try do
      if q.size == 0 do
        raise("UNDERFLOW")
      end
      value = Enum.at(q.data, q.front)
      arr2 = q.data
      arr2 = List.replace_at(arr2, q.front, 0)
      q = Map.put(q, :data, arr2)
      q = Map.put(q, :front, rem((q.front + 1), q.capacity))
      q = Map.put(q, :size, q.size - 1)
      throw {:return, %{queue: q, value: value}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      q = create_queue(5)
      IO.puts(Kernel.inspect(is_empty(q)))
      q = enqueue(q, 10)
      IO.puts(Kernel.inspect(is_empty(q)))
      q = enqueue(q, 20)
      q = enqueue(q, 30)
      IO.puts(Kernel.inspect(front(q)))
      r = dequeue(q)
      q = r.queue
      IO.puts(r.value)
      IO.puts(Kernel.inspect(front(q)))
      IO.puts(Kernel.inspect(length(q)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
