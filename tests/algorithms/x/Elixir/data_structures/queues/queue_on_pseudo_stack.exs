# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def empty_queue() do
    try do
      throw {:return, %{stack: [], length: 0}}
    catch
      {:return, val} -> val
    end
  end
  def put(q, item) do
    try do
      s = (q.stack ++ [item])
      throw {:return, %{stack: s, length: q.length + 1}}
    catch
      {:return, val} -> val
    end
  end
  def drop_first(xs) do
    try do
      res = []
      i = 1
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def drop_last(xs) do
    try do
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(xs) - 1 do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def rotate(q, rotation) do
    try do
      s = q.stack
      i = 0
      while_fun_3 = fn while_fun_3, i, s ->
        if i < rotation && _len(s) > 0 do
          temp = Enum.at(s, 0)
          s = drop_first(s)
          s = (s ++ [temp])
          i = i + 1
          while_fun_3.(while_fun_3, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_3.(while_fun_3, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, %{stack: s, length: q.length}}
    catch
      {:return, val} -> val
    end
  end
  def get(q) do
    try do
      if q.length == 0 do
        raise("queue empty")
      end
      q1 = rotate(q, 1)
      v = Enum.at(q1.stack, q1.length - 1)
      s = drop_last(q1.stack)
      q2 = %{stack: s, length: q1.length}
      q2 = rotate(q2, q2.length - 1)
      q2 = %{stack: q2.stack, length: q2.length - 1}
      throw {:return, %{queue: q2, value: v}}
    catch
      {:return, val} -> val
    end
  end
  def front(q) do
    try do
      r = get(q)
      q2 = put(r.queue, r.value)
      q2 = rotate(q2, q2.length - 1)
      throw {:return, %{queue: q2, value: r.value}}
    catch
      {:return, val} -> val
    end
  end
  def size(q) do
    try do
      throw {:return, q.length}
    catch
      {:return, val} -> val
    end
  end
  def to_string(q) do
    try do
      s = "<"
      {s} = if q.length > 0 do
        s = (s <> Kernel.to_string(Enum.at(q.stack, 0)))
        i = 1
        while_fun_4 = fn while_fun_4, i, s ->
          if i < q.length do
            s = ((s <> ", ") <> Kernel.to_string(Enum.at(q.stack, i)))
            i = i + 1
            while_fun_4.(while_fun_4, i, s)
          else
            {i, s}
          end
        end
        {i, s} = try do
            while_fun_4.(while_fun_4, i, s)
          catch
            {:break, {i, s}} -> {i, s}
          end

        {s}
      else
        {s}
      end
      s = (s <> ">")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      q = empty_queue()
      q = put(q, 1)
      q = put(q, 2)
      q = put(q, 3)
      IO.puts(to_string(q))
      g = get(q)
      q = g.queue
      IO.puts(g.value)
      IO.puts(to_string(q))
      f = front(q)
      q = f.queue
      IO.puts(f.value)
      IO.puts(to_string(q))
      IO.puts(Kernel.inspect(size(q)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
