# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def empty_deque() do
    try do
      throw {:return, %{data: []}}
    catch
      {:return, val} -> val
    end
  end
  def push_back(dq, value) do
    try do
      throw {:return, %{data: (dq.data ++ [value])}}
    catch
      {:return, val} -> val
    end
  end
  def push_front(dq, value) do
    try do
      res = [value]
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(Map.get(dq, :data, [])) do
          res = (res ++ [Enum.at(dq.data, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def extend_back(dq, values) do
    try do
      res = dq.data
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(values) do
          res = (res ++ [Enum.at(values, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def extend_front(dq, values) do
    try do
      res = []
      i = _len(values) - 1
      while_fun_3 = fn while_fun_3, i, res ->
        if i >= 0 do
          res = (res ++ [Enum.at(values, i)])
          i = i - 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      j = 0
      while_fun_4 = fn while_fun_4, j, res ->
        if j < _len(Map.get(dq, :data, [])) do
          res = (res ++ [Enum.at(dq.data, j)])
          j = j + 1
          while_fun_4.(while_fun_4, j, res)
        else
          {j, res}
        end
      end
      {j, res} = try do
          while_fun_4.(while_fun_4, j, res)
        catch
          {:break, {j, res}} -> {j, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def pop_back(dq) do
    try do
      if _len(Map.get(dq, :data, [])) == 0 do
        raise("pop from empty deque")
      end
      res = []
      i = 0
      while_fun_5 = fn while_fun_5, i, res ->
        if i < _len(Map.get(dq, :data, [])) - 1 do
          res = (res ++ [Enum.at(dq.data, i)])
          i = i + 1
          while_fun_5.(while_fun_5, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_5.(while_fun_5, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{deque: %{data: res}, value: Enum.at(dq.data, _len(Map.get(dq, :data, [])) - 1)}}
    catch
      {:return, val} -> val
    end
  end
  def pop_front(dq) do
    try do
      if _len(Map.get(dq, :data, [])) == 0 do
        raise("popleft from empty deque")
      end
      res = []
      i = 1
      while_fun_6 = fn while_fun_6, i, res ->
        if i < _len(Map.get(dq, :data, [])) do
          res = (res ++ [Enum.at(dq.data, i)])
          i = i + 1
          while_fun_6.(while_fun_6, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_6.(while_fun_6, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{deque: %{data: res}, value: Enum.at(dq.data, 0)}}
    catch
      {:return, val} -> val
    end
  end
  def is_empty(dq) do
    try do
      throw {:return, _len(Map.get(dq, :data, [])) == 0}
    catch
      {:return, val} -> val
    end
  end
  def length(dq) do
    try do
      throw {:return, _len(Map.get(dq, :data, []))}
    catch
      {:return, val} -> val
    end
  end
  def to_string(dq) do
    try do
      if _len(Map.get(dq, :data, [])) == 0 do
        throw {:return, "[]"}
      end
      s = ("[" <> Kernel.to_string(Enum.at(dq.data, 0)))
      i = 1
      while_fun_7 = fn while_fun_7, i, s ->
        if i < _len(Map.get(dq, :data, [])) do
          s = ((s <> ", ") <> Kernel.to_string(Enum.at(dq.data, i)))
          i = i + 1
          while_fun_7.(while_fun_7, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_7.(while_fun_7, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, (s <> "]")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      dq = empty_deque()
      dq = push_back(dq, 2)
      dq = push_front(dq, 1)
      dq = extend_back(dq, [3, 4])
      dq = extend_front(dq, [0])
      IO.puts(to_string(dq))
      r = pop_back(dq)
      dq = r.deque
      IO.puts(r.value)
      r = pop_front(dq)
      dq = r.deque
      IO.puts(r.value)
      IO.puts(to_string(dq))
      IO.puts(Kernel.inspect(is_empty(empty_deque())))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
