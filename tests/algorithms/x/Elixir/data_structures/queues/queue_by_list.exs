# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def new_queue(items) do
    try do
      throw {:return, %{entries: items}}
    catch
      {:return, val} -> val
    end
  end
  def len_queue(q) do
    try do
      throw {:return, _len(Map.get(q, :entries, []))}
    catch
      {:return, val} -> val
    end
  end
  def str_queue(q) do
    try do
      s = "Queue(("
      i = 0
      while_fun = fn while_fun, i, s ->
        if i < _len(Map.get(q, :entries, [])) do
          s = (s <> Kernel.to_string(Enum.at(q.entries, i)))
          {s} = if i < _len(Map.get(q, :entries, [])) - 1 do
            s = (s <> ", ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      s = (s <> "))")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def put(q, item) do
    try do
      e = q.entries
      e = (e ++ [item])
      throw {:return, %{entries: e}}
    catch
      {:return, val} -> val
    end
  end
  def get(q) do
    try do
      if _len(Map.get(q, :entries, [])) == 0 do
        raise("Queue is empty")
      end
      value = Enum.at(q.entries, 0)
      new_entries = []
      i = 1
      while_fun_2 = fn while_fun_2, i, new_entries ->
        if i < _len(Map.get(q, :entries, [])) do
          new_entries = (new_entries ++ [Enum.at(q.entries, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, new_entries)
        else
          {i, new_entries}
        end
      end
      {i, new_entries} = try do
          while_fun_2.(while_fun_2, i, new_entries)
        catch
          {:break, {i, new_entries}} -> {i, new_entries}
        end

      throw {:return, %{queue: %{entries: new_entries}, value: value}}
    catch
      {:return, val} -> val
    end
  end
  def rotate(q, rotation) do
    try do
      e = q.entries
      r = 0
      while_fun_3 = fn while_fun_3, e, r ->
        if r < rotation do
          {e} = if _len(e) > 0 do
            first = Enum.at(e, 0)
            rest = []
            i = 1
            while_fun_4 = fn while_fun_4, i, rest ->
              if i < _len(e) do
                rest = (rest ++ [Enum.at(e, i)])
                i = i + 1
                while_fun_4.(while_fun_4, i, rest)
              else
                {i, rest}
              end
            end
            {i, rest} = try do
                while_fun_4.(while_fun_4, i, rest)
              catch
                {:break, {i, rest}} -> {i, rest}
              end

            rest = (rest ++ [first])
            e = rest
            {e}
          else
            {e}
          end
          r = r + 1
          while_fun_3.(while_fun_3, e, r)
        else
          {e, r}
        end
      end
      {e, r} = try do
          while_fun_3.(while_fun_3, e, r)
        catch
          {:break, {e, r}} -> {e, r}
        end

      throw {:return, %{entries: e}}
    catch
      {:return, val} -> val
    end
  end
  def get_front(q) do
    try do
      throw {:return, Enum.at(q.entries, 0)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:q, new_queue([]))
    IO.puts(Kernel.inspect(len_queue(Process.get(:q))))
    Process.put(:q, put(Process.get(:q), 10))
    Process.put(:q, put(Process.get(:q), 20))
    Process.put(:q, put(Process.get(:q), 30))
    Process.put(:q, put(Process.get(:q), 40))
    IO.puts(Kernel.inspect(str_queue(Process.get(:q))))
    Process.put(:res, get(Process.get(:q)))
    Process.put(:q, Process.get(:res).queue)
    IO.puts(Process.get(:res).value)
    IO.puts(Kernel.inspect(str_queue(Process.get(:q))))
    Process.put(:q, rotate(Process.get(:q), 2))
    IO.puts(Kernel.inspect(str_queue(Process.get(:q))))
    Process.put(:front, get_front(Process.get(:q)))
    IO.puts(Process.get(:front))
    IO.puts(Kernel.inspect(str_queue(Process.get(:q))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
