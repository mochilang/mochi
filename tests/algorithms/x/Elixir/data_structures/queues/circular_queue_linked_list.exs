# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def create_queue(capacity) do
    try do
      data = []
      next = []
      prev = []
      i = 0
      while_fun = fn while_fun, data, i, next, prev ->
        if i < capacity do
          data = (data ++ [""])
          next = (next ++ [rem((i + 1), capacity)])
          prev = (prev ++ [rem((i - 1 + capacity), capacity)])
          i = i + 1
          while_fun.(while_fun, data, i, next, prev)
        else
          {data, i, next, prev}
        end
      end
      {data, i, next, prev} = try do
          while_fun.(while_fun, data, i, next, prev)
        catch
          {:break, {data, i, next, prev}} -> {data, i, next, prev}
        end

      throw {:return, %{data: data, next: next, prev: prev, front: 0, rear: 0}}
    catch
      {:return, val} -> val
    end
  end
  def is_empty(q) do
    try do
      throw {:return, q.front == q.rear && Enum.at(q.data, q.front) == ""}
    catch
      {:return, val} -> val
    end
  end
  def check_can_perform(q) do
    try do
      if is_empty(q) do
        raise("Empty Queue")
      end
    catch
      {:return, val} -> val
    end
  end
  def check_is_full(q) do
    try do
      if Enum.at(q.next, q.rear) == q.front do
        raise("Full Queue")
      end
    catch
      {:return, val} -> val
    end
  end
  def peek(q) do
    try do
      check_can_perform(q)
      throw {:return, Enum.at(q.data, q.front)}
    catch
      {:return, val} -> val
    end
  end
  def enqueue(q, value) do
    try do
      check_is_full(q)
      {q} = if !is_empty(q) do
        q = Map.put(q, :rear, Enum.at(q.next, q.rear))
        {q}
      else
        {q}
      end
      data = q.data
      data = List.replace_at(data, q.rear, value)
      q = Map.put(q, :data, data)
      throw {:return, q}
    catch
      {:return, val} -> val
    end
  end
  def dequeue(q) do
    try do
      check_can_perform(q)
      data = q.data
      val = Enum.at(data, q.front)
      data = List.replace_at(data, q.front, "")
      q = Map.put(q, :data, data)
      {q} = if q.front != q.rear do
        q = Map.put(q, :front, Enum.at(q.next, q.front))
        {q}
      else
        {q}
      end
      throw {:return, %{queue: q, value: val}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      q = create_queue(3)
      IO.puts(Kernel.inspect(is_empty(q)))
      q = enqueue(q, "a")
      q = enqueue(q, "b")
      IO.puts(Kernel.inspect(peek(q)))
      res = dequeue(q)
      q = res.queue
      IO.puts(res.value)
      res = dequeue(q)
      q = res.queue
      IO.puts(res.value)
      IO.puts(Kernel.inspect(is_empty(q)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
