# Code generated by Mochi transpiler 2025-08-24 16:59 +0700
defmodule Main do
  @data_dir nil
  def dfs(node_, target, current) do
    try do
      throw {:return, case node_ do
  :empty -> 0
  %{left: l, value: v, right: r} -> ((if current + v == target, do: 1, else: 0)) + dfs(l, target, current + v) + dfs(r, target, current + v)
end}
    catch
      {:return, val} -> val
    end
  end
  def path_sum(node_, target) do
    try do
      throw {:return, case node_ do
  :empty -> 0
  %{left: l, value: v, right: r} -> dfs(node_, target, 0) + path_sum(l, target) + path_sum(r, target)
end}
    catch
      {:return, val} -> val
    end
  end
  def sample_tree_one() do
    try do
      throw {:return, %{value: 10, left: %{value: 5, left: %{value: 3, left: %{value: 3, left: :empty, right: :empty}, right: %{value: -2, left: :empty, right: :empty}}, right: %{value: 2, left: :empty, right: %{value: 1, left: :empty, right: :empty}}}, right: %{value: -3, left: :empty, right: %{value: 11, left: :empty, right: :empty}}}}
    catch
      {:return, val} -> val
    end
  end
  def sample_tree_two() do
    try do
      throw {:return, %{value: 10, left: %{value: 5, left: %{value: 3, left: %{value: 3, left: :empty, right: :empty}, right: %{value: -2, left: :empty, right: :empty}}, right: %{value: 2, left: :empty, right: %{value: 1, left: :empty, right: :empty}}}, right: %{value: -3, left: :empty, right: %{value: 10, left: :empty, right: :empty}}}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      tree1 = sample_tree_one()
      IO.puts(Kernel.inspect(path_sum(tree1, 8)))
      IO.puts(Kernel.inspect(path_sum(tree1, 7)))
      tree2 = sample_tree_two()
      IO.puts(Kernel.inspect(path_sum(tree2, 8)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
