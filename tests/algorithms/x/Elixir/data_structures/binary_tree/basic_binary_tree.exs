# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def inorder(nodes, index, acc) do
    try do
      if index == 0 - 1 do
        throw {:return, acc}
      end
      node_ = Enum.at(nodes, index)
      res = inorder(nodes, node_.left, acc)
      res = (res ++ [node_.data])
      res = inorder(nodes, node_.right, res)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def size(nodes, index) do
    try do
      if index == 0 - 1 do
        throw {:return, 0}
      end
      node_ = Enum.at(nodes, index)
      throw {:return, 1 + size(nodes, node_.left) + size(nodes, node_.right)}
    catch
      {:return, val} -> val
    end
  end
  def depth(nodes, index) do
    try do
      if index == 0 - 1 do
        throw {:return, 0}
      end
      node_ = Enum.at(nodes, index)
      left_depth = depth(nodes, node_.left)
      right_depth = depth(nodes, node_.right)
      if left_depth > right_depth do
        throw {:return, left_depth + 1}
      end
      throw {:return, right_depth + 1}
    catch
      {:return, val} -> val
    end
  end
  def is_full(nodes, index) do
    try do
      if index == 0 - 1 do
        throw {:return, true}
      end
      node_ = Enum.at(nodes, index)
      if node_.left == 0 - 1 && node_.right == 0 - 1 do
        throw {:return, true}
      end
      if node_.left != 0 - 1 && node_.right != 0 - 1 do
        throw {:return, is_full(nodes, node_.left) && is_full(nodes, node_.right)}
      end
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def small_tree() do
    try do
      arr = []
      arr = (arr ++ [%{data: 2, left: 1, right: 2}])
      arr = (arr ++ [%{data: 1, left: 0 - 1, right: 0 - 1}])
      arr = (arr ++ [%{data: 3, left: 0 - 1, right: 0 - 1}])
      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def medium_tree() do
    try do
      arr = []
      arr = (arr ++ [%{data: 4, left: 1, right: 4}])
      arr = (arr ++ [%{data: 2, left: 2, right: 3}])
      arr = (arr ++ [%{data: 1, left: 0 - 1, right: 0 - 1}])
      arr = (arr ++ [%{data: 3, left: 0 - 1, right: 0 - 1}])
      arr = (arr ++ [%{data: 5, left: 0 - 1, right: 5}])
      arr = (arr ++ [%{data: 6, left: 0 - 1, right: 6}])
      arr = (arr ++ [%{data: 7, left: 0 - 1, right: 0 - 1}])
      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:small, small_tree())
    IO.puts(Kernel.inspect(size(Process.get(:small), 0)))
    IO.puts(Kernel.inspect(inorder(Process.get(:small), 0, [])))
    IO.puts(Kernel.inspect(depth(Process.get(:small), 0)))
    IO.puts(Kernel.inspect(is_full(Process.get(:small), 0)))
    Process.put(:medium, medium_tree())
    IO.puts(Kernel.inspect(size(Process.get(:medium), 0)))
    IO.puts(Kernel.inspect(inorder(Process.get(:medium), 0, [])))
    IO.puts(Kernel.inspect(depth(Process.get(:medium), 0)))
    IO.puts(Kernel.inspect(is_full(Process.get(:medium), 0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
