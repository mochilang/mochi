# Code generated by Mochi transpiler 2025-08-24 16:59 +0700
defmodule Main do
  @data_dir nil
  def node_sum(tree, index) do
    try do
      if index == (-1) do
        throw {:return, 0}
      end
      node_ = Enum.at(tree, index, [])
      throw {:return, node_.value + node_sum(tree, node_.left) + node_sum(tree, node_.right)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:example, [%{value: 10, left: 1, right: 2}, %{value: 5, left: 3, right: -1}, %{value: -3, left: 4, right: 5}, %{value: 12, left: -1, right: -1}, %{value: 8, left: -1, right: -1}, %{value: 0, left: -1, right: -1}])
    IO.puts(Kernel.inspect(node_sum(Process.get(:example), 0)))
  end
end
Main.main()
