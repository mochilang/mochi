# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def node_sum(tree, index) do
    try do
      if index == (-1) do
        throw {:return, 0}
      end
      node_ = Enum.at(tree, index)
      throw {:return, node_.value + node_sum(tree, node_.left) + node_sum(tree, node_.right)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:example, [%{value: 10, left: 1, right: 2}, %{value: 5, left: 3, right: -1}, %{value: -3, left: 4, right: 5}, %{value: 12, left: -1, right: -1}, %{value: 8, left: -1, right: -1}, %{value: 0, left: -1, right: -1}])
    IO.puts(Kernel.inspect(node_sum(Process.get(:example), 0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
