# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def new_node(value) do
    try do
      Process.put(:node_data, (Process.get(:node_data) ++ [value]))
      Process.put(:left_child, (Process.get(:left_child) ++ [0]))
      Process.put(:right_child, (Process.get(:right_child) ++ [0]))
      throw {:return, _len(Process.get(:node_data)) - 1}
    catch
      {:return, val} -> val
    end
  end
  def build_tree() do
    try do
      root = new_node(1)
      n2 = new_node(2)
      n5 = new_node(5)
      n3 = new_node(3)
      n4 = new_node(4)
      n6 = new_node(6)
      Process.put(:left_child, List.replace_at(Process.get(:left_child), root, n2))
      Process.put(:right_child, List.replace_at(Process.get(:right_child), root, n5))
      Process.put(:left_child, List.replace_at(Process.get(:left_child), n2, n3))
      Process.put(:right_child, List.replace_at(Process.get(:right_child), n2, n4))
      Process.put(:right_child, List.replace_at(Process.get(:right_child), n5, n6))
      throw {:return, root}
    catch
      {:return, val} -> val
    end
  end
  def flatten(root) do
    try do
      if root == 0 do
        throw {:return, []}
      end
      res = [Enum.at(Process.get(:node_data), root)]
      left_vals = flatten(Enum.at(Process.get(:left_child), root))
      right_vals = flatten(Enum.at(Process.get(:right_child), root))
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(left_vals) do
          res = (res ++ [Enum.at(left_vals, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(right_vals) do
          res = (res ++ [Enum.at(right_vals, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def display(values) do
    try do
      s = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, s ->
        if i < _len(values) do
          s = (if i == 0, do: Kernel.to_string(Enum.at(values, i)), else: ((s <> " ") <> Kernel.to_string(Enum.at(values, i))))
          i = i + 1
          while_fun_3.(while_fun_3, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_3.(while_fun_3, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      IO.puts(s)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:node_data, [0])
  Process.put(:left_child, [0])
  Process.put(:right_child, [0])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts("Flattened Linked List:")
    Process.put(:root, build_tree())
    Process.put(:vals, flatten(Process.get(:root)))
    display(Process.get(:vals))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
