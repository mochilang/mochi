# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def zeros(n) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < n do
          res = (res ++ [0])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def update(arr, idx, value) do
    try do
      arr = List.replace_at(arr, idx, value)
    catch
      {:return, val} -> val
    end
  end
  def query(arr, left, right) do
    try do
      result = 0
      i = left
      while_fun_2 = fn while_fun_2, i, result ->
        if i < right do
          {result} = if Enum.at(arr, i) > result do
            result = Enum.at(arr, i)
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:arr, [0, 0, 0, 0, 0])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(query(Process.get(:arr), 0, 5)))
    update(Process.get(:arr), 4, 100)
    IO.puts(Kernel.inspect(query(Process.get(:arr), 0, 5)))
    update(Process.get(:arr), 4, 0)
    update(Process.get(:arr), 2, 20)
    IO.puts(Kernel.inspect(query(Process.get(:arr), 0, 5)))
    update(Process.get(:arr), 4, 10)
    IO.puts(Kernel.inspect(query(Process.get(:arr), 2, 5)))
    IO.puts(Kernel.inspect(query(Process.get(:arr), 1, 5)))
    update(Process.get(:arr), 2, 0)
    IO.puts(Kernel.inspect(query(Process.get(:arr), 0, 5)))
    Process.put(:arr, zeros(10000))
    update(Process.get(:arr), 255, 30)
    IO.puts(Kernel.inspect(query(Process.get(:arr), 0, 10000)))
    Process.put(:arr, zeros(6))
    update(Process.get(:arr), 5, 1)
    IO.puts(Kernel.inspect(query(Process.get(:arr), 5, 6)))
    Process.put(:arr, zeros(6))
    update(Process.get(:arr), 0, 1000)
    IO.puts(Kernel.inspect(query(Process.get(:arr), 0, 1)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
