# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def merge_two_binary_trees(t1, t2) do
    try do
      throw {:return, case t1 do
  leaf -> t2
  %{left: l1, value: v1, right: r1} -> case t2 do
  leaf -> t1
  %{left: l2, value: v2, right: r2} -> %{left: merge_two_binary_trees(l1, l2), value: v1 + v2, right: merge_two_binary_trees(r1, r2)}
end
end}
    catch
      {:return, val} -> val
    end
  end
  def is_leaf(t) do
    try do
      throw {:return, case t do
  leaf -> true
  _ -> false
end}
    catch
      {:return, val} -> val
    end
  end
  def get_left(t) do
    try do
      throw {:return, case t do
  %{left: l, value: _, right: _} -> l
  _ -> %{}
end}
    catch
      {:return, val} -> val
    end
  end
  def get_right(t) do
    try do
      throw {:return, case t do
  %{left: _, value: _, right: r} -> r
  _ -> %{}
end}
    catch
      {:return, val} -> val
    end
  end
  def get_value(t) do
    try do
      throw {:return, case t do
  %{left: _, value: v, right: _} -> v
  _ -> 0
end}
    catch
      {:return, val} -> val
    end
  end
  def print_preorder(t) do
    try do
      if !is_leaf(t) do
        v = get_value(t)
        l = get_left(t)
        r = get_right(t)
        IO.puts(v)
        print_preorder(l)
        print_preorder(r)
      end
    catch
      {:return, val} -> val
    end
  end
  Process.put(:tree1, %{left: %{left: %{left: %{}, value: 4, right: %{}}, value: 2, right: %{}}, value: 1, right: %{left: %{}, value: 3, right: %{}}})
  Process.put(:tree2, %{left: %{left: %{}, value: 4, right: %{left: %{}, value: 9, right: %{}}}, value: 2, right: %{left: %{}, value: 6, right: %{left: %{}, value: 5, right: %{}}}})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts("Tree1 is:")
    print_preorder(Process.get(:tree1))
    IO.puts("Tree2 is:")
    print_preorder(Process.get(:tree2))
    Process.put(:merged_tree, merge_two_binary_trees(Process.get(:tree1), Process.get(:tree2)))
    IO.puts("Merged Tree is:")
    print_preorder(Process.get(:merged_tree))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
