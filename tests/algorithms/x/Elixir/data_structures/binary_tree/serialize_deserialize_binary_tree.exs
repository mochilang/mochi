# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def digit(ch) do
    try do
      digits = "0123456789"
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(digits) do
          if _slice(digits, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def to_int(s) do
    try do
      i = 0
      sign = 1
      {i, sign} = if _len(s) > 0 && _slice(s, 0, 1 - (0)) == "-" do
        sign = -1
        i = 1
        {i, sign}
      else
        {i, sign}
      end
      num = 0
      while_fun_2 = fn while_fun_2, i, num ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          num = num * 10 + digit(ch)
          i = i + 1
          while_fun_2.(while_fun_2, i, num)
        else
          {i, num}
        end
      end
      {i, num} = try do
          while_fun_2.(while_fun_2, i, num)
        catch
          {:break, {i, num}} -> {i, num}
        end

      throw {:return, sign * num}
    catch
      {:return, val} -> val
    end
  end
  def split(s, sep) do
    try do
      res = []
      current = ""
      i = 0
      while_fun_3 = fn while_fun_3, current, i, res ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {current, res} = if ch == sep do
            res = (res ++ [current])
            current = ""
            {current, res}
          else
            current = (current <> ch)
            {current, res}
          end
          i = i + 1
          while_fun_3.(while_fun_3, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun_3.(while_fun_3, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      res = (res ++ [current])
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def serialize(node_) do
    try do
      throw {:return, case node_ do
  empty -> "null"
  %{left: l, value: v, right: r} -> ((((Kernel.inspect(v) <> ",") <> serialize(l)) <> ",") <> serialize(r))
end}
    catch
      {:return, val} -> val
    end
  end
  def build(nodes, idx) do
    try do
      value = Enum.at(nodes, idx)
      if value == "null" do
        throw {:return, %{node: %{}, next: idx + 1}}
      end
      left_res = build(nodes, idx + 1)
      right_res = build(nodes, left_res.next)
      node_ = %{left: left_res.node, value: to_int(value), right: right_res.node}
      throw {:return, %{node: node_, next: right_res.next}}
    catch
      {:return, val} -> val
    end
  end
  def deserialize(data) do
    try do
      nodes = split(data, ",")
      res = build(nodes, 0)
      throw {:return, res.node}
    catch
      {:return, val} -> val
    end
  end
  def five_tree() do
    try do
      left_child = %{value: 2, left: %{}, right: %{}}
      right_left = %{value: 4, left: %{}, right: %{}}
      right_right = %{value: 5, left: %{}, right: %{}}
      right_child = %{value: 3, left: right_left, right: right_right}
      throw {:return, %{value: 1, left: left_child, right: right_child}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      root = five_tree()
      serial = serialize(root)
      IO.puts(serial)
      rebuilt = deserialize(serial)
      serial2 = serialize(rebuilt)
      IO.puts(serial2)
      IO.puts(serial == serial2)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
