# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def binary_tree_mirror_dict(tree, root) do
    try do
      if (root == 0) || (!(Map.has_key?(tree, root))) do
        throw {:return, nil}
      end
      children = tree[root]
      left = Enum.at(children, 0)
      right = Enum.at(children, 1)
      tree = Map.put(tree, root, [right, left])
      binary_tree_mirror_dict(tree, left)
      binary_tree_mirror_dict(tree, right)
    catch
      {:return, val} -> val
    end
  end
  def binary_tree_mirror(binary_tree, root) do
    try do
      if map_size(binary_tree) == 0 do
        raise("binary tree cannot be empty")
      end
      if !(Map.has_key?(binary_tree, root)) do
        raise((("root " <> Kernel.to_string(root)) <> " is not present in the binary_tree"))
      end
      tree_copy = %{}
      {tree_copy} = Enum.reduce(Map.keys(binary_tree), {tree_copy}, fn k, {tree_copy} ->
        tree_copy = Map.put(tree_copy, k, binary_tree[k])
        {tree_copy}
      end)
      binary_tree_mirror_dict(tree_copy, root)
      throw {:return, tree_copy}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      binary_tree = %{1 => [2, 3], 2 => [4, 5], 3 => [6, 7], 7 => [8, 9]}
      IO.puts(("Binary tree: " <> Kernel.inspect(binary_tree)))
      mirrored = binary_tree_mirror(binary_tree, 1)
      IO.puts(("Binary tree mirror: " <> Kernel.inspect(mirrored)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
