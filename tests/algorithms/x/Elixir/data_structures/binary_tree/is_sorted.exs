# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def inorder(tree, index) do
    try do
      res = []
      if index == Process.get(:none) do
        throw {:return, res}
      end
      left_idx = Enum.at(tree.left, index)
      {res} = if left_idx != Process.get(:none) do
        res = concat.(res, inorder(tree, left_idx))
        {res}
      else
        {res}
      end
      res = (res ++ [Enum.at(tree.data, index)])
      right_idx = Enum.at(tree.right, index)
      {res} = if right_idx != Process.get(:none) do
        res = concat.(res, inorder(tree, right_idx))
        {res}
      else
        {res}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def is_sorted(tree, index) do
    try do
      if index == Process.get(:none) do
        throw {:return, true}
      end
      left_idx = Enum.at(tree.left, index)
      if left_idx != Process.get(:none) do
        if Enum.at(tree.data, index) < Enum.at(tree.data, left_idx) do
          throw {:return, false}
        end
        if !is_sorted(tree, left_idx) do
          throw {:return, false}
        end
      end
      right_idx = Enum.at(tree.right, index)
      if right_idx != Process.get(:none) do
        if Enum.at(tree.data, index) > Enum.at(tree.data, right_idx) do
          throw {:return, false}
        end
        if !is_sorted(tree, right_idx) do
          throw {:return, false}
        end
      end
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:none, 0 - 1)
    Process.put(:tree1, %{data: [2.1, 2.0, 2.2], left: [1, Process.get(:none), Process.get(:none)], right: [2, Process.get(:none), Process.get(:none)]})
    IO.puts(((("Tree " <> Kernel.inspect(inorder(Process.get(:tree1), 0))) <> " is sorted: ") <> Kernel.inspect(is_sorted(Process.get(:tree1), 0))))
    Process.put(:tree2, %{data: [2.1, 2.0, 2.0], left: [1, Process.get(:none), Process.get(:none)], right: [2, Process.get(:none), Process.get(:none)]})
    IO.puts(((("Tree " <> Kernel.inspect(inorder(Process.get(:tree2), 0))) <> " is sorted: ") <> Kernel.inspect(is_sorted(Process.get(:tree2), 0))))
    Process.put(:tree3, %{data: [2.1, 2.0, 2.1], left: [1, Process.get(:none), Process.get(:none)], right: [2, Process.get(:none), Process.get(:none)]})
    IO.puts(((("Tree " <> Kernel.inspect(inorder(Process.get(:tree3), 0))) <> " is sorted: ") <> Kernel.inspect(is_sorted(Process.get(:tree3), 0))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
