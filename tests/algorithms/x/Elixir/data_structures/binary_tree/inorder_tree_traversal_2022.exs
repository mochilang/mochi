# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def new_node(state, value) do
    try do
      state = Map.put(state, :nodes, (state.nodes ++ [%{data: value, left: (-1), right: (-1)}]))
      throw {:return, _len(Map.get(state, :nodes, [])) - 1}
    catch
      {:return, val} -> val
    end
  end
  def insert(state, value) do
    try do
      {state} = if state.root == (-1) do
        state = Map.put(state, :root, new_node(state, value))
        throw {:return, nil}
        {state}
      else
        {state}
      end
      current = state.root
      nodes = state.nodes
      while_fun = fn while_fun, current, nodes, state ->
        if true do
          node_ = Enum.at(nodes, current)
          {current, node_, nodes, state} = if value < node_.data do
            {node_, nodes, state} = if node_.left == (-1) do
              node_ = Map.put(node_, :left, new_node(state, value))
              nodes = List.replace_at(nodes, current, node_)
              state = Map.put(state, :nodes, nodes)
              throw {:return, nil}
              {node_, nodes, state}
            else
              {node_, nodes, state}
            end
            current = node_.left
            {current, node_, nodes, state}
          else
            {node_, nodes, state} = if node_.right == (-1) do
              node_ = Map.put(node_, :right, new_node(state, value))
              nodes = List.replace_at(nodes, current, node_)
              state = Map.put(state, :nodes, nodes)
              throw {:return, nil}
              {node_, nodes, state}
            else
              {node_, nodes, state}
            end
            current = node_.right
            {current, node_, nodes, state}
          end
          while_fun.(while_fun, current, nodes, state)
        else
          {current, nodes, state}
        end
      end
      {current, nodes, state} = try do
          while_fun.(while_fun, current, nodes, state)
        catch
          {:break, {current, nodes, state}} -> {current, nodes, state}
        end

    catch
      {:return, val} -> val
    end
  end
  def inorder(state, idx) do
    try do
      if idx == (-1) do
        throw {:return, []}
      end
      node_ = Enum.at(state.nodes, idx)
      result = inorder(state, node_.left)
      result = (result ++ [node_.data])
      right_part = inorder(state, node_.right)
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(right_part) do
          result = (result ++ [Enum.at(right_part, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def make_tree() do
    try do
      state = %{nodes: [], root: (-1)}
      insert(state, 15)
      insert(state, 10)
      insert(state, 25)
      insert(state, 6)
      insert(state, 14)
      insert(state, 20)
      insert(state, 60)
      throw {:return, state}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      state = make_tree()
      IO.puts("Printing values of binary search tree in Inorder Traversal.")
      IO.puts(Kernel.inspect(inorder(state, state.root)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
