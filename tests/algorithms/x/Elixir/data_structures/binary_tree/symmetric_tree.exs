# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_symmetric_tree() do
    try do
      throw {:return, [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [4, -1, -1], [3, -1, -1]]}
    catch
      {:return, val} -> val
    end
  end
  def make_asymmetric_tree() do
    try do
      throw {:return, [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [3, -1, -1], [4, -1, -1]]}
    catch
      {:return, val} -> val
    end
  end
  def is_symmetric_tree(tree) do
    try do
      stack = [Enum.at(Enum.at(tree, 0, []), 1, 0), Enum.at(Enum.at(tree, 0, []), 2, 0)]
      while_fun = fn while_fun, stack ->
        if _len(stack) >= 2 do
          {stack} = try do
            left = Enum.at(stack, _len(stack) - 2, [])
            right = Enum.at(stack, _len(stack) - 1, [])
            stack = _slice(stack, 0, (_len(stack) - 2) - 0)
            if left == (-1) && right == (-1) do
              throw {:continue, {stack}}
            end
            if left == (-1) || right == (-1) do
              throw {:return, false}
            end
            lnode = Enum.at(tree, left, [])
            rnode = Enum.at(tree, right, [])
            if Enum.at(lnode, 0, []) != Enum.at(rnode, 0, []) do
              throw {:return, false}
            end
            stack = (stack ++ [Enum.at(lnode, 1, [])])
            stack = (stack ++ [Enum.at(rnode, 2, [])])
            stack = (stack ++ [Enum.at(lnode, 2, [])])
            stack = (stack ++ [Enum.at(rnode, 1, [])])
            {stack}
          catch
            {:continue, {stack}} -> {stack}
          end
          while_fun.(while_fun, stack)
        else
          stack
        end
      end
      stack = try do
          while_fun.(while_fun, stack)
        catch
          {:break, {stack}} -> stack
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:symmetric_tree, make_symmetric_tree())
    Process.put(:asymmetric_tree, make_asymmetric_tree())
    IO.puts(Kernel.inspect(is_symmetric_tree(Process.get(:symmetric_tree))))
    IO.puts(Kernel.inspect(is_symmetric_tree(Process.get(:asymmetric_tree))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
