# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_tree() do
    try do
      throw {:return, %{values: [3, 9, 20, 15, 7], lefts: [1, Process.get(:nil), 3, Process.get(:nil), Process.get(:nil)], rights: [2, Process.get(:nil), 4, Process.get(:nil), Process.get(:nil)], root: 0}}
    catch
      {:return, val} -> val
    end
  end
  def index_of(xs, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == x do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, Process.get(:nil)}
    catch
      {:return, val} -> val
    end
  end
  def sort_pairs(hds, vals) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, hds, i, vals ->
        if i < _len(hds) do
          j = i
          while_fun_3 = fn while_fun_3, hds, j, vals ->
            if j > 0 && Enum.at(hds, j - 1) > Enum.at(hds, j) do
              hd_tmp = Enum.at(hds, j - 1)
              hds = List.replace_at(hds, j - 1, Enum.at(hds, j))
              hds = List.replace_at(hds, j, hd_tmp)
              val_tmp = Enum.at(vals, j - 1)
              vals = List.replace_at(vals, j - 1, Enum.at(vals, j))
              vals = List.replace_at(vals, j, val_tmp)
              j = j - 1
              while_fun_3.(while_fun_3, hds, j, vals)
            else
              {hds, j, vals}
            end
          end
          {hds, j, vals} = try do
              while_fun_3.(while_fun_3, hds, j, vals)
            catch
              {:break, {hds, j, vals}} -> {hds, j, vals}
            end

          i = i + 1
          while_fun_2.(while_fun_2, hds, i, vals)
        else
          {hds, i, vals}
        end
      end
      {hds, i, vals} = try do
          while_fun_2.(while_fun_2, hds, i, vals)
        catch
          {:break, {hds, i, vals}} -> {hds, i, vals}
        end

    catch
      {:return, val} -> val
    end
  end
  def right_view(t) do
    try do
      res = []
      queue = [t.root]
      while_fun_4 = fn while_fun_4, queue, res ->
        if _len(queue) > 0 do
          size = _len(queue)
          i = 0
          while_fun_5 = fn while_fun_5, i, queue ->
            if i < size do
              idx = Enum.at(queue, i)
              {queue} = if Enum.at(t.lefts, idx) != Process.get(:nil) do
                queue = (queue ++ [Enum.at(t.lefts, idx)])
                {queue}
              else
                {queue}
              end
              {queue} = if Enum.at(t.rights, idx) != Process.get(:nil) do
                queue = (queue ++ [Enum.at(t.rights, idx)])
                {queue}
              else
                {queue}
              end
              i = i + 1
              while_fun_5.(while_fun_5, i, queue)
            else
              {i, queue}
            end
          end
          {i, queue} = try do
              while_fun_5.(while_fun_5, i, queue)
            catch
              {:break, {i, queue}} -> {i, queue}
            end

          res = (res ++ [Enum.at(t.values, Enum.at(queue, size - 1))])
          queue = _slice(queue, size, _len(queue) - size)
          while_fun_4.(while_fun_4, queue, res)
        else
          {queue, res}
        end
      end
      {queue, res} = try do
          while_fun_4.(while_fun_4, queue, res)
        catch
          {:break, {queue, res}} -> {queue, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def left_view(t) do
    try do
      res = []
      queue = [t.root]
      while_fun_6 = fn while_fun_6, queue, res ->
        if _len(queue) > 0 do
          size = _len(queue)
          i = 0
          while_fun_7 = fn while_fun_7, i, queue ->
            if i < size do
              idx = Enum.at(queue, i)
              {queue} = if Enum.at(t.lefts, idx) != Process.get(:nil) do
                queue = (queue ++ [Enum.at(t.lefts, idx)])
                {queue}
              else
                {queue}
              end
              {queue} = if Enum.at(t.rights, idx) != Process.get(:nil) do
                queue = (queue ++ [Enum.at(t.rights, idx)])
                {queue}
              else
                {queue}
              end
              i = i + 1
              while_fun_7.(while_fun_7, i, queue)
            else
              {i, queue}
            end
          end
          {i, queue} = try do
              while_fun_7.(while_fun_7, i, queue)
            catch
              {:break, {i, queue}} -> {i, queue}
            end

          res = (res ++ [Enum.at(t.values, Enum.at(queue, 0))])
          queue = _slice(queue, size, _len(queue) - size)
          while_fun_6.(while_fun_6, queue, res)
        else
          {queue, res}
        end
      end
      {queue, res} = try do
          while_fun_6.(while_fun_6, queue, res)
        catch
          {:break, {queue, res}} -> {queue, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def top_view(t) do
    try do
      hds = []
      vals = []
      queue_idx = [t.root]
      queue_hd = [0]
      while_fun_8 = fn while_fun_8, hds, queue_hd, queue_idx, vals ->
        if _len(queue_idx) > 0 do
          idx = Enum.at(queue_idx, 0)
          queue_idx = _slice(queue_idx, 1, _len(queue_idx) - 1)
          hd = Enum.at(queue_hd, 0)
          queue_hd = _slice(queue_hd, 1, _len(queue_hd) - 1)
          {hds, vals} = if index_of(hds, hd) == Process.get(:nil) do
            hds = (hds ++ [hd])
            vals = (vals ++ [Enum.at(t.values, idx)])
            {hds, vals}
          else
            {hds, vals}
          end
          {queue_hd, queue_idx} = if Enum.at(t.lefts, idx) != Process.get(:nil) do
            queue_idx = (queue_idx ++ [Enum.at(t.lefts, idx)])
            queue_hd = (queue_hd ++ [hd - 1])
            {queue_hd, queue_idx}
          else
            {queue_hd, queue_idx}
          end
          {queue_hd, queue_idx} = if Enum.at(t.rights, idx) != Process.get(:nil) do
            queue_idx = (queue_idx ++ [Enum.at(t.rights, idx)])
            queue_hd = (queue_hd ++ [hd + 1])
            {queue_hd, queue_idx}
          else
            {queue_hd, queue_idx}
          end
          while_fun_8.(while_fun_8, hds, queue_hd, queue_idx, vals)
        else
          {hds, queue_hd, queue_idx, vals}
        end
      end
      {hds, queue_hd, queue_idx, vals} = try do
          while_fun_8.(while_fun_8, hds, queue_hd, queue_idx, vals)
        catch
          {:break, {hds, queue_hd, queue_idx, vals}} -> {hds, queue_hd, queue_idx, vals}
        end

      sort_pairs(hds, vals)
      throw {:return, vals}
    catch
      {:return, val} -> val
    end
  end
  def bottom_view(t) do
    try do
      hds = []
      vals = []
      queue_idx = [t.root]
      queue_hd = [0]
      while_fun_9 = fn while_fun_9, hds, queue_hd, queue_idx, vals ->
        if _len(queue_idx) > 0 do
          idx = Enum.at(queue_idx, 0)
          queue_idx = _slice(queue_idx, 1, _len(queue_idx) - 1)
          hd = Enum.at(queue_hd, 0)
          queue_hd = _slice(queue_hd, 1, _len(queue_hd) - 1)
          pos = index_of(hds, hd)
          {hds, vals} = if pos == Process.get(:nil) do
            hds = (hds ++ [hd])
            vals = (vals ++ [Enum.at(t.values, idx)])
            {hds, vals}
          else
            vals = List.replace_at(vals, pos, Enum.at(t.values, idx))
            {hds, vals}
          end
          {queue_hd, queue_idx} = if Enum.at(t.lefts, idx) != Process.get(:nil) do
            queue_idx = (queue_idx ++ [Enum.at(t.lefts, idx)])
            queue_hd = (queue_hd ++ [hd - 1])
            {queue_hd, queue_idx}
          else
            {queue_hd, queue_idx}
          end
          {queue_hd, queue_idx} = if Enum.at(t.rights, idx) != Process.get(:nil) do
            queue_idx = (queue_idx ++ [Enum.at(t.rights, idx)])
            queue_hd = (queue_hd ++ [hd + 1])
            {queue_hd, queue_idx}
          else
            {queue_hd, queue_idx}
          end
          while_fun_9.(while_fun_9, hds, queue_hd, queue_idx, vals)
        else
          {hds, queue_hd, queue_idx, vals}
        end
      end
      {hds, queue_hd, queue_idx, vals} = try do
          while_fun_9.(while_fun_9, hds, queue_hd, queue_idx, vals)
        catch
          {:break, {hds, queue_hd, queue_idx, vals}} -> {hds, queue_hd, queue_idx, vals}
        end

      sort_pairs(hds, vals)
      throw {:return, vals}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:nil, 0 - 1)
    Process.put(:tree, make_tree())
    IO.puts(Kernel.inspect(right_view(Process.get(:tree))))
    IO.puts(Kernel.inspect(left_view(Process.get(:tree))))
    IO.puts(Kernel.inspect(top_view(Process.get(:tree))))
    IO.puts(Kernel.inspect(bottom_view(Process.get(:tree))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
