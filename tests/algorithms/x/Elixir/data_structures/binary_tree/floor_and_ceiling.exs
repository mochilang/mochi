# Code generated by Mochi transpiler 2025-08-07 08:27 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def inorder(nodes, idx) do
    try do
      if idx == (-1) do
        throw {:return, []}
      end
      node_ = Enum.at(nodes, idx)
      result = inorder(nodes, node_.left)
      result = (result ++ [node_.key])
      result = concat.(result, inorder(nodes, node_.right))
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def floor_ceiling(nodes, idx, key) do
    try do
      floor_val = nil
      ceiling_val = nil
      current = idx
      while_fun = fn while_fun, ceiling_val, current, floor_val ->
        if current != (-1) do
          node_ = Enum.at(nodes, current)
          {ceiling_val, floor_val} = if node_.key == key do
            floor_val = node_.key
            ceiling_val = node_.key
            throw {:break, {ceiling_val, current, floor_val}}
            {ceiling_val, floor_val}
          else
            {ceiling_val, floor_val}
          end
          {ceiling_val, current, floor_val} = if key < node_.key do
            ceiling_val = node_.key
            current = node_.left
            {ceiling_val, current, floor_val}
          else
            floor_val = node_.key
            current = node_.right
            {ceiling_val, current, floor_val}
          end
          while_fun.(while_fun, ceiling_val, current, floor_val)
        else
          {ceiling_val, current, floor_val}
        end
      end
      {ceiling_val, current, floor_val} = try do
          while_fun.(while_fun, ceiling_val, current, floor_val)
        catch
          {:break, {ceiling_val, current, floor_val}} -> {ceiling_val, current, floor_val}
        end

      throw {:return, [floor_val, ceiling_val]}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:tree, [%{key: 10, left: 1, right: 2}, %{key: 5, left: 3, right: 4}, %{key: 20, left: 5, right: 6}, %{key: 3, left: -1, right: -1}, %{key: 7, left: -1, right: -1}, %{key: 15, left: -1, right: -1}, %{key: 25, left: -1, right: -1}])
    IO.puts(Kernel.inspect(inorder(Process.get(:tree), 0)))
    IO.puts(Kernel.inspect(floor_ceiling(Process.get(:tree), 0, 8)))
    IO.puts(Kernel.inspect(floor_ceiling(Process.get(:tree), 0, 14)))
    IO.puts(Kernel.inspect(floor_ceiling(Process.get(:tree), 0, -1)))
    IO.puts(Kernel.inspect(floor_ceiling(Process.get(:tree), 0, 30)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
