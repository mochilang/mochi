# Code generated by Mochi transpiler 2025-08-07 11:03 +0700
defmodule Main do
  defp _input() do
    case IO.gets("") do
      nil -> ""
      :eof -> ""
      line -> String.trim(line)
    end
  end
  def binomial_coefficient(n, k) do
    try do
      result = 1
      kk = k
      {kk} = if k > n - k do
        kk = n - k
        {kk}
      else
        {kk}
      end
      {result} = Enum.reduce((0..(kk - 1)), {result}, fn i, {result} ->
        result = result * (n - i)
        result = div(result, (i + 1))
        {result}
      end)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def catalan_number(node_count) do
    try do
      throw {:return, div(binomial_coefficient(2 * node_count, node_count), (node_count + 1))}
    catch
      {:return, val} -> val
    end
  end
  def factorial(n) do
    try do
      if n < 0 do
        IO.puts("factorial() not defined for negative values")
        throw {:return, 0}
      end
      result = 1
      {result} = Enum.reduce((1..((n + 1) - 1)), {result}, fn i, {result} ->
        result = result * i
        {result}
      end)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def binary_tree_count(node_count) do
    try do
      throw {:return, catalan_number(node_count) * factorial(node_count)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts("Enter the number of nodes:")
    Process.put(:input_str, _input())
    Process.put(:node_count, String.to_integer(Process.get(:input_str)))
    if Process.get(:node_count) <= 0 do
      IO.puts("We need some nodes to work with.")
    else
      bst = catalan_number(Process.get(:node_count))
      bt = binary_tree_count(Process.get(:node_count))
      IO.puts("Given #{Process.get(:node_count)} nodes, there are #{bt} binary trees and #{bst} binary search trees.")
    end
  end
end
Main.main()
