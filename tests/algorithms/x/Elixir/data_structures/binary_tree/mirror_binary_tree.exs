# Code generated by Mochi transpiler 2025-08-07 08:45 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def mirror_node(left, right, idx) do
    try do
      if idx == (-1) do
        throw {:return, nil}
      end
      temp = Enum.at(left, idx)
      left = List.replace_at(left, idx, Enum.at(right, idx))
      right = List.replace_at(right, idx, temp)
      mirror_node(left, right, Enum.at(left, idx))
      mirror_node(left, right, Enum.at(right, idx))
    catch
      {:return, val} -> val
    end
  end
  def mirror(tree) do
    try do
      mirror_node(tree.left, tree.right, tree.root)
      throw {:return, tree}
    catch
      {:return, val} -> val
    end
  end
  def inorder(tree, idx) do
    try do
      if idx == (-1) do
        throw {:return, []}
      end
      left_vals = inorder(tree, Enum.at(tree.left, idx))
      right_vals = inorder(tree, Enum.at(tree.right, idx))
      throw {:return, ((left_vals ++ [Enum.at(tree.values, idx)]) ++ right_vals)}
    catch
      {:return, val} -> val
    end
  end
  def make_tree_zero() do
    try do
      throw {:return, %{values: [0], left: [-1], right: [-1], root: 0}}
    catch
      {:return, val} -> val
    end
  end
  def make_tree_seven() do
    try do
      throw {:return, %{values: [1, 2, 3, 4, 5, 6, 7], left: [1, 3, 5, -1, -1, -1, -1], right: [2, 4, 6, -1, -1, -1, -1], root: 0}}
    catch
      {:return, val} -> val
    end
  end
  def make_tree_nine() do
    try do
      throw {:return, %{values: [1, 2, 3, 4, 5, 6, 7, 8, 9], left: [1, 3, -1, 6, -1, -1, -1, -1, -1], right: [2, 4, 5, 7, 8, -1, -1, -1, -1], root: 0}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      names = ["zero", "seven", "nine"]
      trees = [make_tree_zero(), make_tree_seven(), make_tree_nine()]
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(trees) do
          tree = Enum.at(trees, i)
          IO.puts(((("      The " <> Enum.at(names, i)) <> " tree: ") <> Kernel.inspect(inorder(tree, tree.root))))
          mirrored = mirror(tree)
          IO.puts(((("Mirror of " <> Enum.at(names, i)) <> " tree: ") <> Kernel.inspect(inorder(mirrored, mirrored.root))))
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
end
Main.main()
