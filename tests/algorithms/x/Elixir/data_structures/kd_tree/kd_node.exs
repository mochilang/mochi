# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def make_kd_node(point, left, right) do
    try do
      throw {:return, %{point: point, left: left, right: right}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:nodes, [])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:nodes, (Process.get(:nodes) ++ [make_kd_node([2.0, 3.0], 1, 2)]))
    Process.put(:nodes, (Process.get(:nodes) ++ [make_kd_node([1.0, 5.0], -1, -1)]))
    Process.put(:nodes, (Process.get(:nodes) ++ [make_kd_node([4.0, 2.0], -1, -1)]))
    Process.put(:root, Enum.at(Process.get(:nodes), 0))
    Process.put(:left_child, Enum.at(Process.get(:nodes), 1))
    Process.put(:right_child, Enum.at(Process.get(:nodes), 2))
    IO.puts(Kernel.to_string(Process.get(:root).point))
    IO.puts(Kernel.to_string(Process.get(:root).left))
    IO.puts(Kernel.to_string(Process.get(:root).right))
    IO.puts(Kernel.to_string(Process.get(:left_child).point))
    IO.puts(Kernel.to_string(Process.get(:right_child).point))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
