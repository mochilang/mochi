# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sort_points(points, axis) do
    try do
      arr = points
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < _len(arr) do
          j = 0
          while_fun_2 = fn while_fun_2, arr, j ->
            if j < _len(arr) - 1 do
              {arr} = if Enum.at(Enum.at(arr, j), axis) > Enum.at(Enum.at(arr, j + 1), axis) do
                tmp = Enum.at(arr, j)
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1))
                arr = List.replace_at(arr, j + 1, tmp)
                {arr}
              else
                {arr}
              end
              j = j + 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def build_kdtree(points, depth) do
    try do
      if _len(points) == 0 do
        throw {:return, 0 - 1}
      end
      k = _len(Enum.at(points, 0))
      axis = rem(depth, k)
      sorted = sort_points(points, axis)
      median_idx = div(_len(sorted), 2)
      left_points = _slice(sorted, 0, median_idx - 0)
      right_points = _slice(sorted, median_idx + 1, _len(sorted) - (median_idx + 1))
      idx = _len(Process.get(:tree))
      Process.put(:tree, (Process.get(:tree) ++ [%{point: Enum.at(sorted, median_idx), left: 0 - 1, right: 0 - 1}]))
      left_idx = build_kdtree(left_points, depth + 1)
      right_idx = build_kdtree(right_points, depth + 1)
      node_ = Enum.at(Process.get(:tree), idx)
      node_ = Map.put(node_, :left, left_idx)
      node_ = Map.put(node_, :right, right_idx)
      Process.put(:tree, List.replace_at(Process.get(:tree), idx, node_))
      throw {:return, idx}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:tree, [])
  Process.put(:pts, [[2.0, 3.0], [5.0, 4.0], [9.0, 6.0], [4.0, 7.0], [8.0, 1.0], [7.0, 2.0]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:root, build_kdtree(Process.get(:pts), 0))
    IO.puts(Kernel.to_string(Process.get(:tree)))
    IO.puts(Process.get(:root))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
