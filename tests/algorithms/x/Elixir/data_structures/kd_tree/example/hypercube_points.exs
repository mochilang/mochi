# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def rand() do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483648))
      throw {:return, Process.get(:seed)}
    catch
      {:return, val} -> val
    end
  end
  def random() do
    try do
      throw {:return, (:erlang.float(rand())) / 2147483648.0}
    catch
      {:return, val} -> val
    end
  end
  def hypercube_points(num_points, hypercube_size, num_dimensions) do
    try do
      points = []
      i = 0
      while_fun = fn while_fun, i, points ->
        if i < num_points do
          point = []
          j = 0
          while_fun_2 = fn while_fun_2, j, point ->
            if j < num_dimensions do
              value = hypercube_size * random()
              point = (point ++ [value])
              j = j + 1
              while_fun_2.(while_fun_2, j, point)
            else
              {j, point}
            end
          end
          {j, point} = try do
              while_fun_2.(while_fun_2, j, point)
            catch
              {:break, {j, point}} -> {j, point}
            end

          points = (points ++ [point])
          i = i + 1
          while_fun.(while_fun, i, points)
        else
          {i, points}
        end
      end
      {i, points} = try do
          while_fun.(while_fun, i, points)
        catch
          {:break, {i, points}} -> {i, points}
        end

      throw {:return, points}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:pts, hypercube_points(3, 1.0, 2))
    IO.puts(Kernel.inspect(Process.get(:pts)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
