# Code generated by Mochi transpiler 2025-08-24 23:57 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> Kernel.length(x)
    end
  end
  def lexical_order(max_number) do
    try do
      result = []
      stack = [1]
      while_fun = fn while_fun, result, stack ->
        if _len(stack) > 0 do
          {result, stack} = try do
            idx = _len(stack) - 1
            num = Enum.at(stack, idx, [])
            stack = _slice(stack, 0, idx - 0)
            if num > max_number do
              throw {:continue, {result, stack}}
            end
            result = (result ++ [num])
            stack = if rem(num, 10) != 9 do
              stack = (stack ++ [num + 1])
              stack
            else
              stack
            end
            stack = (stack ++ [num * 10])
            {result, stack}
          catch
            {:continue, {result, stack}} -> {result, stack}
          end
          while_fun.(while_fun, result, stack)
        else
          {result, stack}
        end
      end
      {result, stack} = try do
          while_fun.(while_fun, result, stack)
        catch
          {:break, {result, stack}} -> {result, stack}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def join_ints(xs) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(xs) do
          res = if i > 0 do
            res = (res <> " ")
            res
          else
            res
          end
          res = (res <> Kernel.to_string(Enum.at(xs, i, [])))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(join_ints(lexical_order(13))))
    IO.puts(Kernel.inspect(lexical_order(1)))
    IO.puts(Kernel.inspect(join_ints(lexical_order(20))))
    IO.puts(Kernel.inspect(join_ints(lexical_order(25))))
    IO.puts(Kernel.inspect(lexical_order(12)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
