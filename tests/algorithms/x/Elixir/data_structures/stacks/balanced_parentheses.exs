# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pop_last(xs) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) - 1 do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def balanced_parentheses(s) do
    try do
      stack = []
      pairs = %{"(" => ")", "[" => "]", "{" => "}"}
      i = 0
      while_fun_2 = fn while_fun_2, i, stack ->
        if i < _len(s) do
          ch = String.at(s, i)
          {stack} = if Map.has_key?(pairs, ch) do
            stack = (stack ++ [ch])
            {stack}
          else
            {stack} = if ch == ")" || ch == "]" || ch == "}" do
              if _len(stack) == 0 do
                throw {:return, false}
              end
              top = Enum.at(stack, _len(stack) - 1)
              if Map.get(pairs, top, "") != ch do
                throw {:return, false}
              end
              stack = pop_last(stack)
              {stack}
            else
              {stack}
            end
            {stack}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, stack)
        else
          {i, stack}
        end
      end
      {i, stack} = try do
          while_fun_2.(while_fun_2, i, stack)
        catch
          {:break, {i, stack}} -> {i, stack}
        end

      throw {:return, _len(stack) == 0}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:tests, ["([]{})", "[()]{}{[()()]()}", "[(])", "1+2*3-4", ""])
  Process.put(:idx, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    while_fun_3 = fn while_fun_3 ->
      if Process.get(:idx) < _len(Process.get(:tests)) do
        IO.puts(Kernel.inspect(balanced_parentheses(Enum.at(Process.get(:tests), Process.get(:idx)))))
        Process.put(:idx, Process.get(:idx) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
