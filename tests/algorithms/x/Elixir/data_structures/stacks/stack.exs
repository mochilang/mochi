# Code generated by Mochi transpiler 2025-08-24 23:57 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> Kernel.length(x)
    end
  end
  def make_stack(limit) do
    try do
      throw {:return, %{items: [], limit: limit}}
    catch
      {:return, val} -> val
    end
  end
  def is_empty(s) do
    try do
      throw {:return, _len(Map.get(s, :items, [])) == 0}
    catch
      {:return, val} -> val
    end
  end
  def size(s) do
    try do
      throw {:return, _len(Map.get(s, :items, []))}
    catch
      {:return, val} -> val
    end
  end
  def is_full(s) do
    try do
      throw {:return, _len(Map.get(s, :items, [])) >= s.limit}
    catch
      {:return, val} -> val
    end
  end
  def push(s, item) do
    try do
      if is_full(s) do
        raise("stack overflow")
      end
      s = Map.put(s, :items, (s.items ++ [item]))
    catch
      {:return, val} -> val
    end
  end
  def pop(s) do
    try do
      if is_empty(s) do
        raise("stack underflow")
      end
      n = _len(Map.get(s, :items, []))
      val = Enum.at(s.items, n - 1, 0)
      s = Map.put(s, :items, _slice(s.items, 0, (n - 1) - 0))
      throw {:return, val}
    catch
      {:return, val} -> val
    end
  end
  def peek(s) do
    try do
      if is_empty(s) do
        raise("peek from empty stack")
      end
      throw {:return, Enum.at(s.items, _len(Map.get(s, :items, [])) - 1, 0)}
    catch
      {:return, val} -> val
    end
  end
  def contains(s, item) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Map.get(s, :items, [])) do
          if Enum.at(s.items, i, 0) == item do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def stack_repr(s) do
    try do
      throw {:return, String.replace(IO.iodata_to_binary(:io_lib.format("~w", [s.items])), ",", " ")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      s = make_stack(5)
      IO.puts(Kernel.inspect(is_empty(s)))
      s = push(s, 0)
      s = push(s, 1)
      s = push(s, 2)
      IO.puts(Kernel.inspect(peek(s)))
      IO.puts(Kernel.inspect(size(s)))
      IO.puts(Kernel.inspect(is_full(s)))
      s = push(s, 3)
      s = push(s, 4)
      IO.puts(Kernel.inspect(is_full(s)))
      IO.puts(Kernel.inspect(stack_repr(s)))
      IO.puts(Kernel.inspect(pop(s)))
      IO.puts(Kernel.inspect(peek(s)))
      IO.puts(Kernel.inspect(contains(s, 1)))
      IO.puts(Kernel.inspect(contains(s, 9)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
