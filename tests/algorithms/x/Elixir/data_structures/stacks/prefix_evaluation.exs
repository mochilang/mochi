# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def split_custom(s, sep) do
    try do
      res = []
      current = ""
      i = 0
      while_fun = fn while_fun, current, i, res ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {current, res} = if ch == sep do
            res = (res ++ [current])
            current = ""
            {current, res}
          else
            current = (current <> ch)
            {current, res}
          end
          i = i + 1
          while_fun.(while_fun, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun.(while_fun, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      res = (res ++ [current])
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def tokenize(s) do
    try do
      parts = split_custom(s, " ")
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(parts) do
          p = Enum.at(parts, i)
          {res} = if p != "" do
            res = (res ++ [p])
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def is_digit(ch) do
    try do
      throw {:return, ch >= "0" && ch <= "9"}
    catch
      {:return, val} -> val
    end
  end
  def is_operand(token) do
    try do
      if token == "" do
        throw {:return, false}
      end
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(token) do
          ch = _slice(token, i, i + 1 - (i))
          if !is_digit(ch) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def to_int(token) do
    try do
      res = 0
      i = 0
      while_fun_4 = fn while_fun_4, i, res ->
        if i < _len(token) do
          res = res * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(_slice(token, i, i + 1 - (i))))
          i = i + 1
          while_fun_4.(while_fun_4, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_4.(while_fun_4, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def apply_op(op, a, b) do
    try do
      if op == "+" do
        throw {:return, a + b}
      end
      if op == "-" do
        throw {:return, a - b}
      end
      if op == "*" do
        throw {:return, a * b}
      end
      if op == "/" do
        throw {:return, a / b}
      end
      throw {:return, 0.0}
    catch
      {:return, val} -> val
    end
  end
  def evaluate(expression) do
    try do
      tokens = tokenize(expression)
      stack = []
      i = _len(tokens) - 1
      while_fun_5 = fn while_fun_5, i, stack ->
        if i >= 0 do
          token = Enum.at(tokens, i)
          {stack} = if token != "" do
            {stack} = if is_operand(token) do
              stack = (stack ++ [(:erlang.float(to_int(token)))])
              {stack}
            else
              o1 = Enum.at(stack, _len(stack) - 1)
              o2 = Enum.at(stack, _len(stack) - 2)
              stack = _slice(stack, 0, (_len(stack) - 2) - 0)
              res = apply_op(token, o1, o2)
              stack = (stack ++ [res])
              {stack}
            end
            {stack}
          else
            {stack}
          end
          i = i - 1
          while_fun_5.(while_fun_5, i, stack)
        else
          {i, stack}
        end
      end
      {i, stack} = try do
          while_fun_5.(while_fun_5, i, stack)
        catch
          {:break, {i, stack}} -> {i, stack}
        end

      throw {:return, Enum.at(stack, 0)}
    catch
      {:return, val} -> val
    end
  end
  def eval_rec(tokens, pos) do
    try do
      token = Enum.at(tokens, pos)
      next = pos + 1
      if is_operand(token) do
        throw {:return, [(:erlang.float(to_int(token))), (:erlang.float(next))]}
      end
      left = eval_rec(tokens, next)
      a = Enum.at(left, 0)
      p1 = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(Enum.at(left, 1))
      right = eval_rec(tokens, p1)
      b = Enum.at(right, 0)
      p2 = Enum.at(right, 1)
      throw {:return, [apply_op(token, a, b), p2]}
    catch
      {:return, val} -> val
    end
  end
  def evaluate_recursive(expression) do
    try do
      tokens = tokenize(expression)
      res = eval_rec(tokens, 0)
      throw {:return, Enum.at(res, 0)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:test_expression, "+ 9 * 2 6")
  Process.put(:test_expression2, "/ * 10 2 + 4 1 ")
  Process.put(:test_expression3, "+ * 2 3 / 8 4")
  def main() do
    IO.puts(Kernel.inspect(evaluate(Process.get(:test_expression))))
    IO.puts(Kernel.inspect(evaluate(Process.get(:test_expression2))))
    IO.puts(Kernel.inspect(evaluate_recursive(Process.get(:test_expression3))))
  end
end
Main.main()
