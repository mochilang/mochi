# Code generated by Mochi transpiler 2025-08-24 23:57 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> Kernel.length(x)
    end
  end
  def make_stack() do
    try do
      throw {:return, %{main_queue: [], temp_queue: []}}
    catch
      {:return, val} -> val
    end
  end
  def push(s, item) do
    try do
      s = Map.put(s, :temp_queue, (s.temp_queue ++ [item]))
      while_fun = fn while_fun, s ->
        if _len(Map.get(s, :main_queue, [])) > 0 do
          s = Map.put(s, :temp_queue, (s.temp_queue ++ [Enum.at(s.main_queue, 0, 0)]))
          s = Map.put(s, :main_queue, _slice(s.main_queue, 1, _len(Map.get(s, :main_queue, [])) - 1))
          while_fun.(while_fun, s)
        else
          s
        end
      end
      s = try do
          while_fun.(while_fun, s)
        catch
          {:break, {s}} -> s
        end

      new_main = s.temp_queue
      s = Map.put(s, :temp_queue, s.main_queue)
      s = Map.put(s, :main_queue, new_main)
    catch
      {:return, val} -> val
    end
  end
  def pop(s) do
    try do
      if _len(Map.get(s, :main_queue, [])) == 0 do
        raise("pop from empty stack")
      end
      item = Enum.at(s.main_queue, 0, 0)
      s = Map.put(s, :main_queue, _slice(s.main_queue, 1, _len(Map.get(s, :main_queue, [])) - 1))
      throw {:return, item}
    catch
      {:return, val} -> val
    end
  end
  def peek(s) do
    try do
      if _len(Map.get(s, :main_queue, [])) == 0 do
        raise("peek from empty stack")
      end
      throw {:return, Enum.at(s.main_queue, 0, 0)}
    catch
      {:return, val} -> val
    end
  end
  def is_empty(s) do
    try do
      throw {:return, _len(Map.get(s, :main_queue, [])) == 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:stack, make_stack())
    Process.put(:stack, push(Process.get(:stack), 1))
    Process.put(:stack, push(Process.get(:stack), 2))
    Process.put(:stack, push(Process.get(:stack), 3))
    IO.puts(Kernel.inspect(peek(Process.get(:stack))))
    IO.puts(Kernel.inspect(pop(Process.get(:stack))))
    IO.puts(Kernel.inspect(peek(Process.get(:stack))))
    IO.puts(Kernel.inspect(pop(Process.get(:stack))))
    IO.puts(Kernel.inspect(pop(Process.get(:stack))))
    IO.puts(Kernel.inspect(is_empty(Process.get(:stack))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
