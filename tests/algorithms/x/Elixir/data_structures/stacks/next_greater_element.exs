# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def next_greatest_element_slow(xs) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          next = -1.0
          j = i + 1
          while_fun_2 = fn while_fun_2, j, next ->
            if j < _len(xs) do
              {next} = if Enum.at(xs, i) < Enum.at(xs, j) do
                next = Enum.at(xs, j)
                throw {:break, {j, next}}
                {next}
              else
                {next}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, next)
            else
              {j, next}
            end
          end
          {j, next} = try do
              while_fun_2.(while_fun_2, j, next)
            catch
              {:break, {j, next}} -> {j, next}
            end

          res = (res ++ [next])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def next_greatest_element_fast(xs) do
    try do
      res = []
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(xs) do
          next = -1.0
          j = i + 1
          while_fun_4 = fn while_fun_4, j, next ->
            if j < _len(xs) do
              inner = Enum.at(xs, j)
              {next} = if Enum.at(xs, i) < inner do
                next = inner
                throw {:break, {j, next}}
                {next}
              else
                {next}
              end
              j = j + 1
              while_fun_4.(while_fun_4, j, next)
            else
              {j, next}
            end
          end
          {j, next} = try do
              while_fun_4.(while_fun_4, j, next)
            catch
              {:break, {j, next}} -> {j, next}
            end

          res = (res ++ [next])
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def set_at_float(xs, idx, value) do
    try do
      i = 0
      res = []
      while_fun_5 = fn while_fun_5, i, res ->
        if i < _len(xs) do
          res = (if i == idx, do: (res ++ [value]), else: (res ++ [Enum.at(xs, i)]))
          i = i + 1
          while_fun_5.(while_fun_5, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_5.(while_fun_5, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def next_greatest_element(xs) do
    try do
      res = []
      k = 0
      while_fun_6 = fn while_fun_6, k, res ->
        if k < _len(xs) do
          res = (res ++ [-1.0])
          k = k + 1
          while_fun_6.(while_fun_6, k, res)
        else
          {k, res}
        end
      end
      {k, res} = try do
          while_fun_6.(while_fun_6, k, res)
        catch
          {:break, {k, res}} -> {k, res}
        end

      stack = []
      i = 0
      while_fun_7 = fn while_fun_7, i, res, stack ->
        if i < _len(xs) do
          while_fun_8 = fn while_fun_8, res, stack ->
            if _len(stack) > 0 && Enum.at(xs, i) > Enum.at(xs, Enum.at(stack, _len(stack) - 1)) do
              idx = Enum.at(stack, _len(stack) - 1)
              stack = _slice(stack, 0, (_len(stack) - 1) - 0)
              res = set_at_float(res, idx, Enum.at(xs, i))
              while_fun_8.(while_fun_8, res, stack)
            else
              {res, stack}
            end
          end
          {res, stack} = try do
              while_fun_8.(while_fun_8, res, stack)
            catch
              {:break, {res, stack}} -> {res, stack}
            end

          stack = (stack ++ [i])
          i = i + 1
          while_fun_7.(while_fun_7, i, res, stack)
        else
          {i, res, stack}
        end
      end
      {i, res, stack} = try do
          while_fun_7.(while_fun_7, i, res, stack)
        catch
          {:break, {i, res, stack}} -> {i, res, stack}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:arr, [-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0])
    Process.put(:expected, [-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0])
    IO.puts(Kernel.inspect(next_greatest_element_slow(Process.get(:arr))))
    IO.puts(Kernel.inspect(next_greatest_element_fast(Process.get(:arr))))
    IO.puts(Kernel.inspect(next_greatest_element(Process.get(:arr))))
  end
end
Main.main()
