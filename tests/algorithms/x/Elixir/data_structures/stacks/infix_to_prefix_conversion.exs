# Code generated by Mochi transpiler 2025-08-24 23:57 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> Kernel.length(x)
    end
  end
  def is_alpha(ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:letters)) do
          if String.at(Process.get(:letters), i) == ch do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def is_digit(ch) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(Process.get(:digits)) do
          if String.at(Process.get(:digits), i) == ch do
            throw {:return, true}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      _ = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def reverse_string(s) do
    try do
      out = ""
      i = _len(s) - 1
      while_fun_3 = fn while_fun_3, i, out ->
        if i >= 0 do
          out = (out <> String.at(s, i))
          i = i - 1
          while_fun_3.(while_fun_3, i, out)
        else
          {i, out}
        end
      end
      {_, out} = try do
          while_fun_3.(while_fun_3, i, out)
        catch
          {:break, {_, out}} -> {0, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def infix_to_postfix(infix) do
    try do
      stack = []
      post = []
      i = 0
      while_fun_4 = fn while_fun_4, i, post, stack ->
        if i < _len(infix) do
          x = String.at(infix, i)
          {post, stack} = if is_alpha(x) || is_digit(x) do
            post = (post ++ [x])
            {post, stack}
          else
            {post, stack} = if x == "(" do
              stack = (stack ++ [x])
              {post, stack}
            else
              {post, stack} = if x == ")" do
                if _len(stack) == 0 do
                  raise("list index out of range")
                end
                while_fun_5 = fn while_fun_5, post, stack ->
                  if Enum.at(stack, _len(stack) - 1, []) != "(" do
                    post = (post ++ [Enum.at(stack, _len(stack) - 1, [])])
                    stack = _slice(stack, 0, (_len(stack) - 1) - 0)
                    while_fun_5.(while_fun_5, post, stack)
                  else
                    {post, stack}
                  end
                end
                {post, stack} = try do
                    while_fun_5.(while_fun_5, post, stack)
                  catch
                    {:break, {post, stack}} -> {post, stack}
                  end

                stack = _slice(stack, 0, (_len(stack) - 1) - 0)
                {post, stack}
              else
                {post, stack} = if _len(stack) == 0 do
                  stack = (stack ++ [x])
                  {post, stack}
                else
                  while_fun_6 = fn while_fun_6, post, stack ->
                    if _len(stack) > 0 && Enum.at(stack, _len(stack) - 1, []) != "(" && Process.get(:priority)[x] <= Process.get(:priority)[Enum.at(stack, _len(stack) - 1, [])] do
                      post = (post ++ [Enum.at(stack, _len(stack) - 1, [])])
                      stack = _slice(stack, 0, (_len(stack) - 1) - 0)
                      while_fun_6.(while_fun_6, post, stack)
                    else
                      {post, stack}
                    end
                  end
                  {post, stack} = try do
                      while_fun_6.(while_fun_6, post, stack)
                    catch
                      {:break, {post, stack}} -> {post, stack}
                    end

                  stack = (stack ++ [x])
                  {post, stack}
                end
                {post, stack}
              end
              {post, stack}
            end
            {post, stack}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, post, stack)
        else
          {i, post, stack}
        end
      end
      {_, post, stack} = try do
          while_fun_4.(while_fun_4, i, post, stack)
        catch
          {:break, {_, post, stack}} -> {0, post, stack}
        end

      while_fun_7 = fn while_fun_7, post, stack ->
        if _len(stack) > 0 do
          if Enum.at(stack, _len(stack) - 1, []) == "(" do
            raise("invalid expression")
          end
          post = (post ++ [Enum.at(stack, _len(stack) - 1, [])])
          stack = _slice(stack, 0, (_len(stack) - 1) - 0)
          while_fun_7.(while_fun_7, post, stack)
        else
          {post, stack}
        end
      end
      {post, stack} = try do
          while_fun_7.(while_fun_7, post, stack)
        catch
          {:break, {post, stack}} -> {post, stack}
        end

      res = ""
      j = 0
      while_fun_8 = fn while_fun_8, j, res ->
        if j < _len(post) do
          res = (res <> Enum.at(post, j, []))
          j = j + 1
          while_fun_8.(while_fun_8, j, res)
        else
          {j, res}
        end
      end
      {_, res} = try do
          while_fun_8.(while_fun_8, j, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def infix_to_prefix(infix) do
    try do
      reversed = ""
      i = _len(infix) - 1
      while_fun_9 = fn while_fun_9, i, reversed ->
        if i >= 0 do
          ch = String.at(infix, i)
          reversed = if ch == "(" do
            reversed = (reversed <> ")")
            reversed
          else
            reversed = if ch == ")" do
              reversed = (reversed <> "(")
              reversed
            else
              reversed = (reversed <> ch)
              reversed
            end
            reversed
          end
          i = i - 1
          while_fun_9.(while_fun_9, i, reversed)
        else
          {i, reversed}
        end
      end
      {_, reversed} = try do
          while_fun_9.(while_fun_9, i, reversed)
        catch
          {:break, {_, reversed}} -> {0, reversed}
        end

      postfix = infix_to_postfix(reversed)
      prefix = reverse_string(postfix)
      throw {:return, prefix}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:priority, %{"^" => 3, "*" => 2, "/" => 2, "%" => 2, "+" => 1, "-" => 1})
  Process.put(:letters, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:digits, "0123456789")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
