# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_digit(ch) do
    try do
      throw {:return, ch == "0" || ch == "1" || ch == "2" || ch == "3" || ch == "4" || ch == "5" || ch == "6" || ch == "7" || ch == "8" || ch == "9"}
    catch
      {:return, val} -> val
    end
  end
  def slice_without_last_int(xs) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) - 1 do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def slice_without_last_string(xs) do
    try do
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(xs) - 1 do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def dijkstras_two_stack_algorithm(equation) do
    try do
      operand_stack = []
      operator_stack = []
      idx = 0
      while_fun_3 = fn while_fun_3, idx, operand_stack, operator_stack ->
        if idx < _len(equation) do
          ch = _slice(equation, idx, idx + 1 - (idx))
          {operand_stack, operator_stack} = if is_digit(ch) do
            operand_stack = (operand_stack ++ [String.to_integer(ch)])
            {operand_stack, operator_stack}
          else
            {operand_stack, operator_stack} = if ch == "+" || ch == "-" || ch == "*" || ch == "/" do
              operator_stack = (operator_stack ++ [ch])
              {operand_stack, operator_stack}
            else
              {operand_stack, operator_stack} = if ch == ")" do
                opr = Enum.at(operator_stack, _len(operator_stack) - 1)
                operator_stack = slice_without_last_string(operator_stack)
                num1 = Enum.at(operand_stack, _len(operand_stack) - 1)
                operand_stack = slice_without_last_int(operand_stack)
                num2 = Enum.at(operand_stack, _len(operand_stack) - 1)
                operand_stack = slice_without_last_int(operand_stack)
                total = (if opr == "+", do: num2 + num1, else: (if opr == "-", do: num2 - num1, else: (if opr == "*", do: num2 * num1, else: div(num2, num1))))
                operand_stack = (operand_stack ++ [total])
                {operand_stack, operator_stack}
              else
                {operand_stack, operator_stack}
              end
              {operand_stack, operator_stack}
            end
            {operand_stack, operator_stack}
          end
          idx = idx + 1
          while_fun_3.(while_fun_3, idx, operand_stack, operator_stack)
        else
          {idx, operand_stack, operator_stack}
        end
      end
      {idx, operand_stack, operator_stack} = try do
          while_fun_3.(while_fun_3, idx, operand_stack, operator_stack)
        catch
          {:break, {idx, operand_stack, operator_stack}} -> {idx, operand_stack, operator_stack}
        end

      throw {:return, Enum.at(operand_stack, _len(operand_stack) - 1)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:equation, "(5 + ((4 * 2) * (2 + 3)))")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(((Process.get(:equation) <> " = ") <> Kernel.inspect(dijkstras_two_stack_algorithm(Process.get(:equation)))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
