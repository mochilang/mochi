# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def calculation_span(price) do
    try do
      n = _len(price)
      st = []
      span = []
      st = (st ++ [0])
      span = (span ++ [1])
      {span, st} = Enum.reduce((1..(n - 1)), {span, st}, fn i, {span, st} ->
        while_fun = fn while_fun, st ->
          if _len(st) > 0 && Enum.at(price, Enum.at(st, _len(st) - 1)) <= Enum.at(price, i) do
            st = _slice(st, 0, _len(st) - 1 - (0))
            while_fun.(while_fun, st)
          else
            st
          end
        end
        st = try do
            while_fun.(while_fun, st)
          catch
            {:break, {st}} -> st
          end

        s = (if _len(st) <= 0, do: i + 1, else: i - Enum.at(st, _len(st) - 1))
        span = (span ++ [s])
        st = (st ++ [i])
        {span, st}
      end)
      throw {:return, span}
    catch
      {:return, val} -> val
    end
  end
  def print_array(arr) do
    try do
      Enum.each((0..(_len(arr) - 1)), fn i ->
        IO.puts(Enum.at(arr, i))
      end)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:price, [10, 4, 5, 90, 120, 80])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:spans, calculation_span(Process.get(:price)))
    print_array(Process.get(:spans))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
