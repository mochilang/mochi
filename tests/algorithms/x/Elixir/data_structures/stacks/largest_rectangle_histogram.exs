# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def largest_rectangle_area(heights) do
    try do
      stack = []
      max_area = 0
      hs = heights
      hs = (hs ++ [0])
      i = 0
      while_fun = fn while_fun, i, max_area, stack ->
        if i < _len(hs) do
          while_fun_2 = fn while_fun_2, max_area, stack ->
            if _len(stack) > 0 && Enum.at(hs, i) < Enum.at(hs, Enum.at(stack, _len(stack) - 1)) do
              top = Enum.at(stack, _len(stack) - 1)
              stack = _slice(stack, 0, (_len(stack) - 1) - 0)
              height = Enum.at(hs, top)
              width = i
              {width} = if _len(stack) > 0 do
                width = i - Enum.at(stack, _len(stack) - 1) - 1
                {width}
              else
                {width}
              end
              area = height * width
              {max_area} = if area > max_area do
                max_area = area
                {max_area}
              else
                {max_area}
              end
              while_fun_2.(while_fun_2, max_area, stack)
            else
              {max_area, stack}
            end
          end
          {max_area, stack} = try do
              while_fun_2.(while_fun_2, max_area, stack)
            catch
              {:break, {max_area, stack}} -> {max_area, stack}
            end

          stack = (stack ++ [i])
          i = i + 1
          while_fun.(while_fun, i, max_area, stack)
        else
          {i, max_area, stack}
        end
      end
      {i, max_area, stack} = try do
          while_fun.(while_fun, i, max_area, stack)
        catch
          {:break, {i, max_area, stack}} -> {i, max_area, stack}
        end

      throw {:return, max_area}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(largest_rectangle_area([2, 1, 5, 6, 2, 3])))
    IO.puts(Kernel.inspect(largest_rectangle_area([2, 4])))
    IO.puts(Kernel.inspect(largest_rectangle_area([6, 2, 5, 4, 5, 1, 6])))
    IO.puts(Kernel.inspect(largest_rectangle_area([1])))
  end
end
Main.main()
