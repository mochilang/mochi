# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_linked_list(elements) do
    try do
      if _len(elements) == 0 do
        raise("The Elements List is empty")
      end
      Process.put(:nodes, [])
      Process.put(:nodes, (Process.get(:nodes) ++ [%{data: Enum.at(elements, 0), next: Process.get(:nil)}]))
      head = 0
      current = head
      i = 1
      while_fun = fn while_fun, current, i ->
        if i < _len(elements) do
          Process.put(:nodes, (Process.get(:nodes) ++ [%{data: Enum.at(elements, i), next: Process.get(:nil)}]))
          Process.put(:nodes, List.replace_at(Process.get(:nodes), current, Map.put(Enum.at(Process.get(:nodes), current), :next, _len(Process.get(:nodes)) - 1)))
          current = _len(Process.get(:nodes)) - 1
          i = i + 1
          while_fun.(while_fun, current, i)
        else
          {current, i}
        end
      end
      {current, i} = try do
          while_fun.(while_fun, current, i)
        catch
          {:break, {current, i}} -> {current, i}
        end

      throw {:return, head}
    catch
      {:return, val} -> val
    end
  end
  def node_to_string(head) do
    try do
      s = ""
      index = head
      while_fun_2 = fn while_fun_2, index, s ->
        if index != Process.get(:nil) do
          node_ = Enum.at(Process.get(:nodes), index)
          s = (((s <> "<") <> Kernel.to_string(node_.data)) <> "> ---> ")
          index = node_.next
          while_fun_2.(while_fun_2, index, s)
        else
          {index, s}
        end
      end
      {index, s} = try do
          while_fun_2.(while_fun_2, index, s)
        catch
          {:break, {index, s}} -> {index, s}
        end

      s = (s <> "<END>")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      list_data = [1, 3, 5, 32, 44, 12, 43]
      IO.puts(("List: " <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [list_data])), ",", " ")))
      IO.puts("Creating Linked List from List.")
      head = make_linked_list(list_data)
      IO.puts("Linked List:")
      IO.puts(Kernel.inspect(node_to_string(head)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:nodes, [])
  def bench_main() do
    Process.put(:nodes, [])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Process.put(:nil, 0 - 1)
Main.bench_main()
