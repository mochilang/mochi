# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def empty_list() do
    try do
      throw {:return, %{data: []}}
    catch
      {:return, val} -> val
    end
  end
  def append_value(list, value) do
    try do
      d = list.data
      d = (d ++ [value])
      throw {:return, %{data: d}}
    catch
      {:return, val} -> val
    end
  end
  def extend_list(list, items) do
    try do
      result = list
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(items) do
          result = append_value(result, Enum.at(items, i))
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def to_string(list) do
    try do
      if _len(Map.get(list, :data, [])) == 0 do
        throw {:return, ""}
      end
      s = Kernel.to_string(Enum.at(list.data, 0))
      i = 1
      while_fun_2 = fn while_fun_2, i, s ->
        if i < _len(Map.get(list, :data, [])) do
          s = ((s <> " -> ") <> Kernel.to_string(Enum.at(list.data, i)))
          i = i + 1
          while_fun_2.(while_fun_2, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_2.(while_fun_2, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def make_linked_list(items) do
    try do
      if _len(items) == 0 do
        raise("The Elements List is empty")
      end
      ll = empty_list()
      ll = extend_list(ll, items)
      throw {:return, ll}
    catch
      {:return, val} -> val
    end
  end
  def in_reverse(list) do
    try do
      if _len(Map.get(list, :data, [])) == 0 do
        throw {:return, ""}
      end
      i = _len(Map.get(list, :data, [])) - 1
      s = Kernel.to_string(Enum.at(list.data, i))
      i = i - 1
      while_fun_3 = fn while_fun_3, i, s ->
        if i >= 0 do
          s = ((s <> " <- ") <> Kernel.to_string(Enum.at(list.data, i)))
          i = i - 1
          while_fun_3.(while_fun_3, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_3.(while_fun_3, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      linked_list = make_linked_list([14, 52, 14, 12, 43])
      IO.puts(("Linked List:  " <> to_string(linked_list)))
      IO.puts(("Reverse List: " <> in_reverse(linked_list)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
