# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def empty_list() do
    try do
      throw {:return, %{data: []}}
    catch
      {:return, val} -> val
    end
  end
  def length(list) do
    try do
      throw {:return, _len(Map.get(list, :data, []))}
    catch
      {:return, val} -> val
    end
  end
  def is_empty(list) do
    try do
      throw {:return, _len(Map.get(list, :data, [])) == 0}
    catch
      {:return, val} -> val
    end
  end
  def to_string(list) do
    try do
      if _len(Map.get(list, :data, [])) == 0 do
        throw {:return, ""}
      end
      s = Kernel.to_string(Enum.at(list.data, 0))
      i = 1
      while_fun = fn while_fun, i, s ->
        if i < _len(Map.get(list, :data, [])) do
          s = ((s <> " -> ") <> Kernel.to_string(Enum.at(list.data, i)))
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def insert_nth(list, index, value) do
    try do
      if index < 0 || index > _len(Map.get(list, :data, [])) do
        raise("index out of range")
      end
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < index do
          res = (res ++ [Enum.at(list.data, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      res = (res ++ [value])
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(Map.get(list, :data, [])) do
          res = (res ++ [Enum.at(list.data, i)])
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def insert_head(list, value) do
    try do
      throw {:return, insert_nth(list, 0, value)}
    catch
      {:return, val} -> val
    end
  end
  def insert_tail(list, value) do
    try do
      throw {:return, insert_nth(list, _len(Map.get(list, :data, [])), value)}
    catch
      {:return, val} -> val
    end
  end
  def delete_nth(list, index) do
    try do
      if index < 0 || index >= _len(Map.get(list, :data, [])) do
        raise("index out of range")
      end
      res = []
      val = 0
      i = 0
      while_fun_4 = fn while_fun_4, i, res, val ->
        if i < _len(Map.get(list, :data, [])) do
          {res, val} = if i == index do
            val = Enum.at(list.data, i)
            {res, val}
          else
            res = (res ++ [Enum.at(list.data, i)])
            {res, val}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, res, val)
        else
          {i, res, val}
        end
      end
      {i, res, val} = try do
          while_fun_4.(while_fun_4, i, res, val)
        catch
          {:break, {i, res, val}} -> {i, res, val}
        end

      throw {:return, %{list: %{data: res}, value: val}}
    catch
      {:return, val} -> val
    end
  end
  def delete_head(list) do
    try do
      throw {:return, delete_nth(list, 0)}
    catch
      {:return, val} -> val
    end
  end
  def delete_tail(list) do
    try do
      throw {:return, delete_nth(list, _len(Map.get(list, :data, [])) - 1)}
    catch
      {:return, val} -> val
    end
  end
  def get_item(list, index) do
    try do
      if index < 0 || index >= _len(Map.get(list, :data, [])) do
        raise("index out of range")
      end
      throw {:return, Enum.at(list.data, index)}
    catch
      {:return, val} -> val
    end
  end
  def set_item(list, index, value) do
    try do
      if index < 0 || index >= _len(Map.get(list, :data, [])) do
        raise("index out of range")
      end
      res = []
      i = 0
      while_fun_5 = fn while_fun_5, i, res ->
        if i < _len(Map.get(list, :data, [])) do
          res = (if i == index, do: (res ++ [value]), else: (res ++ [Enum.at(list.data, i)]))
          i = i + 1
          while_fun_5.(while_fun_5, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_5.(while_fun_5, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def reverse_list(list) do
    try do
      res = []
      i = _len(Map.get(list, :data, [])) - 1
      while_fun_6 = fn while_fun_6, i, res ->
        if i >= 0 do
          res = (res ++ [Enum.at(list.data, i)])
          i = i - 1
          while_fun_6.(while_fun_6, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_6.(while_fun_6, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      lst = empty_list()
      i = 1
      while_fun_7 = fn while_fun_7, i, lst ->
        if i <= 5 do
          lst = insert_tail(lst, i)
          i = i + 1
          while_fun_7.(while_fun_7, i, lst)
        else
          {i, lst}
        end
      end
      {i, lst} = try do
          while_fun_7.(while_fun_7, i, lst)
        catch
          {:break, {i, lst}} -> {i, lst}
        end

      IO.puts(to_string(lst))
      lst = insert_head(lst, 0)
      IO.puts(to_string(lst))
      del = delete_head(lst)
      lst = del.list
      IO.puts(Kernel.to_string(del.value))
      del = delete_tail(lst)
      lst = del.list
      IO.puts(Kernel.to_string(del.value))
      del = delete_nth(lst, 2)
      lst = del.list
      IO.puts(Kernel.to_string(del.value))
      lst = set_item(lst, 1, 99)
      IO.puts(Kernel.inspect(get_item(lst, 1)))
      lst = reverse_list(lst)
      IO.puts(to_string(lst))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
