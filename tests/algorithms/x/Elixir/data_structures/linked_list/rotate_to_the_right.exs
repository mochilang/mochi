# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def list_to_string(xs) do
    try do
      if _len(xs) == 0 do
        throw {:return, ""}
      end
      s = Kernel.to_string(Enum.at(xs, 0))
      i = 1
      while_fun = fn while_fun, i, s ->
        if i < _len(xs) do
          s = ((s <> "->") <> Kernel.to_string(Enum.at(xs, i)))
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def insert_node(xs, data) do
    try do
      throw {:return, (xs ++ [data])}
    catch
      {:return, val} -> val
    end
  end
  def rotate_to_the_right(xs, places) do
    try do
      if _len(xs) == 0 do
        raise("The linked list is empty.")
      end
      n = _len(xs)
      k = rem(places, n)
      if k == 0 do
        throw {:return, xs}
      end
      split = n - k
      res = []
      i = split
      while_fun_2 = fn while_fun_2, i, res ->
        if i < n do
          res = (res ++ [Enum.at(xs, i)])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      j = 0
      while_fun_3 = fn while_fun_3, j, res ->
        if j < split do
          res = (res ++ [Enum.at(xs, j)])
          j = j + 1
          while_fun_3.(while_fun_3, j, res)
        else
          {j, res}
        end
      end
      {j, res} = try do
          while_fun_3.(while_fun_3, j, res)
        catch
          {:break, {j, res}} -> {j, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      head = []
      head = insert_node(head, 5)
      head = insert_node(head, 1)
      head = insert_node(head, 2)
      head = insert_node(head, 4)
      head = insert_node(head, 3)
      IO.puts(("Original list: " <> list_to_string(head)))
      places = 3
      new_head = rotate_to_the_right(head, places)
      IO.puts(((("After " <> Kernel.to_string(places)) <> " iterations: ") <> list_to_string(new_head)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
