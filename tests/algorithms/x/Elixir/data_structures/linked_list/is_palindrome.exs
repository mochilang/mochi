# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_palindrome(values) do
    try do
      stack = []
      fast = 0
      slow = 0
      n = _len(values)
      while_fun = fn while_fun, fast, slow, stack ->
        if fast < n && fast + 1 < n do
          stack = (stack ++ [Enum.at(values, slow)])
          slow = slow + 1
          fast = fast + 2
          while_fun.(while_fun, fast, slow, stack)
        else
          {fast, slow, stack}
        end
      end
      {fast, slow, stack} = try do
          while_fun.(while_fun, fast, slow, stack)
        catch
          {:break, {fast, slow, stack}} -> {fast, slow, stack}
        end

      {slow} = if fast == n - 1 do
        slow = slow + 1
        {slow}
      else
        {slow}
      end
      i = _len(stack) - 1
      while_fun_2 = fn while_fun_2, i, slow ->
        if slow < n do
          if Enum.at(stack, i) != Enum.at(values, slow) do
            throw {:return, false}
          end
          i = i - 1
          slow = slow + 1
          while_fun_2.(while_fun_2, i, slow)
        else
          {i, slow}
        end
      end
      {i, slow} = try do
          while_fun_2.(while_fun_2, i, slow)
        catch
          {:break, {i, slow}} -> {i, slow}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(is_palindrome([])))
      IO.puts(Kernel.inspect(is_palindrome([1])))
      IO.puts(Kernel.inspect(is_palindrome([1, 2])))
      IO.puts(Kernel.inspect(is_palindrome([1, 2, 1])))
      IO.puts(Kernel.inspect(is_palindrome([1, 2, 2, 1])))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
