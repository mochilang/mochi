# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def empty_list() do
    try do
      throw {:return, %{data: []}}
    catch
      {:return, val} -> val
    end
  end
  def push(list, value) do
    try do
      res = [value]
      res = (res ++ list.data)
      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def swap_nodes(list, v1, v2) do
    try do
      if v1 == v2 do
        throw {:return, list}
      end
      idx1 = 0 - 1
      idx2 = 0 - 1
      i = 0
      while_fun = fn while_fun, i, idx1, idx2 ->
        if i < _len(Map.get(list, :data, [])) do
          {idx1} = if Enum.at(list.data, i) == v1 && idx1 == 0 - 1 do
            idx1 = i
            {idx1}
          else
            {idx1}
          end
          {idx2} = if Enum.at(list.data, i) == v2 && idx2 == 0 - 1 do
            idx2 = i
            {idx2}
          else
            {idx2}
          end
          i = i + 1
          while_fun.(while_fun, i, idx1, idx2)
        else
          {i, idx1, idx2}
        end
      end
      {i, idx1, idx2} = try do
          while_fun.(while_fun, i, idx1, idx2)
        catch
          {:break, {i, idx1, idx2}} -> {i, idx1, idx2}
        end

      if idx1 == 0 - 1 || idx2 == 0 - 1 do
        throw {:return, list}
      end
      res = list.data
      temp = Enum.at(res, idx1)
      res = List.replace_at(res, idx1, Enum.at(res, idx2))
      res = List.replace_at(res, idx2, temp)
      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def to_string(list) do
    try do
      throw {:return, String.replace(IO.iodata_to_binary(:io_lib.format("~w", [list.data])), ",", " ")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      ll = empty_list()
      i = 5
      while_fun_2 = fn while_fun_2, i, ll ->
        if i > 0 do
          ll = push(ll, i)
          i = i - 1
          while_fun_2.(while_fun_2, i, ll)
        else
          {i, ll}
        end
      end
      {i, ll} = try do
          while_fun_2.(while_fun_2, i, ll)
        catch
          {:break, {i, ll}} -> {i, ll}
        end

      IO.puts(("Original Linked List: " <> to_string(ll)))
      ll = swap_nodes(ll, 1, 4)
      IO.puts(("Modified Linked List: " <> to_string(ll)))
      IO.puts("After swapping the nodes whose data is 1 and 4.")
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
