# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def empty_list() do
    try do
      throw {:return, %{next: [], head: Process.get(:null)}}
    catch
      {:return, val} -> val
    end
  end
  def add_node(list, value) do
    try do
      nexts = list.next
      new_index = _len(nexts)
      nexts = (nexts ++ [Process.get(:null)])
      if list.head == Process.get(:null) do
        throw {:return, %{next: nexts, head: new_index}}
      end
      last = list.head
      while_fun = fn while_fun, last ->
        if Enum.at(nexts, last) != Process.get(:null) do
          last = Enum.at(nexts, last)
          while_fun.(while_fun, last)
        else
          last
        end
      end
      last = try do
          while_fun.(while_fun, last)
        catch
          {:break, {last}} -> last
        end

      new_nexts = []
      i = 0
      while_fun_2 = fn while_fun_2, i, new_nexts ->
        if i < _len(nexts) do
          new_nexts = (if i == last, do: (new_nexts ++ [new_index]), else: (new_nexts ++ [Enum.at(nexts, i)]))
          i = i + 1
          while_fun_2.(while_fun_2, i, new_nexts)
        else
          {i, new_nexts}
        end
      end
      {i, new_nexts} = try do
          while_fun_2.(while_fun_2, i, new_nexts)
        catch
          {:break, {i, new_nexts}} -> {i, new_nexts}
        end

      throw {:return, %{next: new_nexts, head: list.head}}
    catch
      {:return, val} -> val
    end
  end
  def set_next(list, index, next_index) do
    try do
      nexts = list.next
      new_nexts = []
      i = 0
      while_fun_3 = fn while_fun_3, i, new_nexts ->
        if i < _len(nexts) do
          new_nexts = (if i == index, do: (new_nexts ++ [next_index]), else: (new_nexts ++ [Enum.at(nexts, i)]))
          i = i + 1
          while_fun_3.(while_fun_3, i, new_nexts)
        else
          {i, new_nexts}
        end
      end
      {i, new_nexts} = try do
          while_fun_3.(while_fun_3, i, new_nexts)
        catch
          {:break, {i, new_nexts}} -> {i, new_nexts}
        end

      throw {:return, %{next: new_nexts, head: list.head}}
    catch
      {:return, val} -> val
    end
  end
  def detect_cycle(list) do
    try do
      if list.head == Process.get(:null) do
        throw {:return, false}
      end
      nexts = list.next
      slow = list.head
      fast = list.head
      while_fun_4 = fn while_fun_4, fast, slow ->
        if fast != Process.get(:null) && Enum.at(nexts, fast) != Process.get(:null) do
          slow = Enum.at(nexts, slow)
          fast = Enum.at(nexts, Enum.at(nexts, fast))
          if slow == fast do
            throw {:return, true}
          end
          while_fun_4.(while_fun_4, fast, slow)
        else
          {fast, slow}
        end
      end
      {fast, slow} = try do
          while_fun_4.(while_fun_4, fast, slow)
        catch
          {:break, {fast, slow}} -> {fast, slow}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      ll = empty_list()
      ll = add_node(ll, 1)
      ll = add_node(ll, 2)
      ll = add_node(ll, 3)
      ll = add_node(ll, 4)
      ll = set_next(ll, 3, 1)
      IO.puts(Kernel.inspect(detect_cycle(ll)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Process.put(:null, 0 - 1)
Main.bench_main()
