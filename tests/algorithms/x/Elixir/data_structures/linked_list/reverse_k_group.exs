# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def to_string(list) do
    try do
      if _len(Map.get(list, :data, [])) == 0 do
        throw {:return, ""}
      end
      s = Kernel.to_string(Enum.at(list.data, 0))
      i = 1
      while_fun = fn while_fun, i, s ->
        if i < _len(Map.get(list, :data, [])) do
          s = ((s <> " -> ") <> Kernel.to_string(Enum.at(list.data, i)))
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def reverse_k_nodes(list, k) do
    try do
      if k <= 1 do
        throw {:return, list}
      end
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(Map.get(list, :data, [])) do
          j = 0
          group = []
          while_fun_3 = fn while_fun_3, group, j ->
            if j < k && i + j < _len(Map.get(list, :data, [])) do
              group = (group ++ [Enum.at(list.data, i + j)])
              j = j + 1
              while_fun_3.(while_fun_3, group, j)
            else
              {group, j}
            end
          end
          {group, j} = try do
              while_fun_3.(while_fun_3, group, j)
            catch
              {:break, {group, j}} -> {group, j}
            end

          {res} = if _len(group) == k do
            g = k - 1
            while_fun_4 = fn while_fun_4, g, res ->
              if g >= 0 do
                res = (res ++ [Enum.at(group, g)])
                g = g - 1
                while_fun_4.(while_fun_4, g, res)
              else
                {g, res}
              end
            end
            {g, res} = try do
                while_fun_4.(while_fun_4, g, res)
              catch
                {:break, {g, res}} -> {g, res}
              end

            {res}
          else
            g = 0
            while_fun_5 = fn while_fun_5, g, res ->
              if g < _len(group) do
                res = (res ++ [Enum.at(group, g)])
                g = g + 1
                while_fun_5.(while_fun_5, g, res)
              else
                {g, res}
              end
            end
            {g, res} = try do
                while_fun_5.(while_fun_5, g, res)
              catch
                {:break, {g, res}} -> {g, res}
              end

            {res}
          end
          i = i + k
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      ll = %{data: [1, 2, 3, 4, 5]}
      IO.puts(("Original Linked List: " <> to_string(ll)))
      k = 2
      ll = reverse_k_nodes(ll, k)
      IO.puts(((("After reversing groups of size " <> Kernel.to_string(k)) <> ": ") <> to_string(ll)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
