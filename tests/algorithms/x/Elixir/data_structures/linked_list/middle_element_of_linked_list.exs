# Code generated by Mochi transpiler 2025-08-07 16:23 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def empty_list() do
    try do
      throw {:return, %{data: []}}
    catch
      {:return, val} -> val
    end
  end
  def push(lst, value) do
    try do
      res = [value]
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(Map.get(lst, :data, [])) do
          res = (res ++ [Enum.at(lst.data, i)])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, %{data: res}}
    catch
      {:return, val} -> val
    end
  end
  def middle_element(lst) do
    try do
      n = _len(Map.get(lst, :data, []))
      if n == 0 do
        IO.puts("No element found.")
        throw {:return, 0}
      end
      slow = 0
      fast = 0
      while_fun_2 = fn while_fun_2, fast, slow ->
        if fast + 1 < n do
          fast = fast + 2
          slow = slow + 1
          while_fun_2.(while_fun_2, fast, slow)
        else
          {fast, slow}
        end
      end
      {fast, slow} = try do
          while_fun_2.(while_fun_2, fast, slow)
        catch
          {:break, {fast, slow}} -> {fast, slow}
        end

      throw {:return, Enum.at(lst.data, slow)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      lst = empty_list()
      middle_element(lst)
      lst = push(lst, 5)
      IO.puts(5)
      lst = push(lst, 6)
      IO.puts(6)
      lst = push(lst, 8)
      IO.puts(8)
      lst = push(lst, 8)
      IO.puts(8)
      lst = push(lst, 10)
      IO.puts(10)
      lst = push(lst, 12)
      IO.puts(12)
      lst = push(lst, 17)
      IO.puts(17)
      lst = push(lst, 7)
      IO.puts(7)
      lst = push(lst, 3)
      IO.puts(3)
      lst = push(lst, 20)
      IO.puts(20)
      lst = push(lst, -20)
      IO.puts(-20)
      IO.puts(Kernel.inspect(middle_element(lst)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
