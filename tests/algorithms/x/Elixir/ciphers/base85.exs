# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def indexOf(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      idx = indexOf(Process.get(:ascii85_chars), ch)
      if idx >= 0 do
        throw {:return, 33 + idx}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def chr(n) do
    try do
      throw {:return, ((if n >= 33 && n <= 117, do: _slice(Process.get(:ascii85_chars), n - 33, (n - 32) - (n - 33)), else: "?"))}
    catch
      {:return, val} -> val
    end
  end
  def to_binary(n, bits) do
    try do
      b = ""
      val = n
      while_fun_2 = fn while_fun_2, b, val ->
        if val > 0 do
          b = (Kernel.to_string(rem(val, 2)) <> b)
          val = div(val, 2)
          while_fun_2.(while_fun_2, b, val)
        else
          {b, val}
        end
      end
      {b, val} = try do
          while_fun_2.(while_fun_2, b, val)
        catch
          {:break, {b, val}} -> {b, val}
        end

      while_fun_3 = fn while_fun_3, b ->
        if _len(b) < bits do
          b = ("0" <> b)
          while_fun_3.(while_fun_3, b)
        else
          b
        end
      end
      b = try do
          while_fun_3.(while_fun_3, b)
        catch
          {:break, {b}} -> b
        end

      {b} = if _len(b) == 0 do
        b = "0"
        {b}
      else
        {b}
      end
      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def bin_to_int(bits) do
    try do
      n = 0
      i = 0
      while_fun_4 = fn while_fun_4, i, n ->
        if i < _len(bits) do
          n = (if String.at(bits, i) == "1", do: n * 2 + 1, else: n * 2)
          i = i + 1
          while_fun_4.(while_fun_4, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_4.(while_fun_4, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def reverse(s) do
    try do
      res = ""
      i = _len(s) - 1
      while_fun_5 = fn while_fun_5, i, res ->
        if i >= 0 do
          res = (res <> String.at(s, i))
          i = i - 1
          while_fun_5.(while_fun_5, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_5.(while_fun_5, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def base10_to_85(d) do
    try do
      throw {:return, ((if d > 0, do: (chr(rem(d, 85) + 33) <> base10_to_85(div(d, 85))), else: ""))}
    catch
      {:return, val} -> val
    end
  end
  def base85_to_10(digits) do
    try do
      value = 0
      i = 0
      while_fun_6 = fn while_fun_6, i, value ->
        if i < _len(digits) do
          value = value * 85 + (ord(String.at(digits, i)) - 33)
          i = i + 1
          while_fun_6.(while_fun_6, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun_6.(while_fun_6, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def ascii85_encode(data) do
    try do
      binary_data = ""
      {binary_data} = Enum.reduce(String.graphemes(data), {binary_data}, fn ch, {binary_data} ->
        binary_data = (binary_data <> to_binary(ord(ch), 8))
        {binary_data}
      end)
      null_values = div((32 * ((div(_len(binary_data), 32)) + 1) - _len(binary_data)), 8)
      total_bits = 32 * ((div(_len(binary_data), 32)) + 1)
      while_fun_7 = fn while_fun_7, binary_data ->
        if _len(binary_data) < total_bits do
          binary_data = (binary_data <> "0")
          while_fun_7.(while_fun_7, binary_data)
        else
          binary_data
        end
      end
      binary_data = try do
          while_fun_7.(while_fun_7, binary_data)
        catch
          {:break, {binary_data}} -> binary_data
        end

      result = ""
      i = 0
      while_fun_8 = fn while_fun_8, i, result ->
        if i < _len(binary_data) do
          chunk_bits = _slice(binary_data, i, (i + 32) - i)
          chunk_val = bin_to_int(chunk_bits)
          encoded = reverse(base10_to_85(chunk_val))
          result = (result <> encoded)
          i = i + 32
          while_fun_8.(while_fun_8, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_8.(while_fun_8, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      {result} = if rem(null_values, 4) != 0 do
        result = _slice(result, 0, (_len(result) - null_values) - 0)
        {result}
      else
        {result}
      end
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def ascii85_decode(data) do
    try do
      null_values = 5 * ((div(_len(data), 5)) + 1) - _len(data)
      binary_data = data
      i = 0
      while_fun_9 = fn while_fun_9, binary_data, i ->
        if i < null_values do
          binary_data = (binary_data <> "u")
          i = i + 1
          while_fun_9.(while_fun_9, binary_data, i)
        else
          {binary_data, i}
        end
      end
      {binary_data, i} = try do
          while_fun_9.(while_fun_9, binary_data, i)
        catch
          {:break, {binary_data, i}} -> {binary_data, i}
        end

      result = ""
      i = 0
      while_fun_10 = fn while_fun_10, i, result ->
        if i < _len(binary_data) do
          chunk = _slice(binary_data, i, (i + 5) - i)
          value = base85_to_10(chunk)
          bits = to_binary(value, 32)
          j = 0
          while_fun_11 = fn while_fun_11, j, result ->
            if j < 32 do
              byte_bits = _slice(bits, j, (j + 8) - j)
              c = chr(bin_to_int(byte_bits))
              result = (result <> c)
              j = j + 8
              while_fun_11.(while_fun_11, j, result)
            else
              {j, result}
            end
          end
          {j, result} = try do
              while_fun_11.(while_fun_11, j, result)
            catch
              {:break, {j, result}} -> {j, result}
            end

          i = i + 5
          while_fun_10.(while_fun_10, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_10.(while_fun_10, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      trim = null_values
      {trim} = if rem(null_values, 5) == 0 do
        trim = null_values - 1
        {trim}
      else
        {trim}
      end
      throw {:return, _slice(result, 0, (_len(result) - trim) - 0)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:ascii85_chars, "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(ascii85_encode("")))
    IO.puts(Kernel.inspect(ascii85_encode("12345")))
    IO.puts(Kernel.inspect(ascii85_encode("base 85")))
    IO.puts(Kernel.inspect(ascii85_decode("")))
    IO.puts(Kernel.inspect(ascii85_decode("0etOA2#")))
    IO.puts(Kernel.inspect(ascii85_decode("@UX=h+?24")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
