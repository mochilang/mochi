# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def index_in_string(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def contains_char(s, ch) do
    try do
      throw {:return, index_in_string(s, ch) >= 0}
    catch
      {:return, val} -> val
    end
  end
  def is_alpha(ch) do
    try do
      lower = "abcdefghijklmnopqrstuvwxyz"
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      throw {:return, contains_char(lower, ch) || contains_char(upper, ch)}
    catch
      {:return, val} -> val
    end
  end
  def to_upper(s) do
    try do
      lower = "abcdefghijklmnopqrstuvwxyz"
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(s) do
          ch = String.at(s, i)
          idx = index_in_string(lower, ch)
          res = (if idx >= 0, do: (res <> Enum.at(upper, idx)), else: (res <> ch))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def remove_duplicates(key) do
    try do
      res = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(key) do
          ch = String.at(key, i)
          {res} = if ch == " " || (is_alpha(ch) && contains_char(res, ch) == false) do
            res = (res <> ch)
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def create_cipher_map(key) do
    try do
      alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      cleaned = remove_duplicates(to_upper(key))
      cipher = []
      i = 0
      while_fun_4 = fn while_fun_4, cipher, i ->
        if i < _len(cleaned) do
          cipher = (cipher ++ [String.at(cleaned, i)])
          i = i + 1
          while_fun_4.(while_fun_4, cipher, i)
        else
          {cipher, i}
        end
      end
      {cipher, i} = try do
          while_fun_4.(while_fun_4, cipher, i)
        catch
          {:break, {cipher, i}} -> {cipher, i}
        end

      offset = _len(cleaned)
      j = _len(cipher)
      while_fun_5 = fn while_fun_5, cipher, j, offset ->
        if j < 26 do
          char = String.at(alphabet, j - offset)
          while_fun_6 = fn while_fun_6, char, offset ->
            if contains_char(cleaned, char) do
              offset = offset - 1
              char = String.at(alphabet, j - offset)
              while_fun_6.(while_fun_6, char, offset)
            else
              {char, offset}
            end
          end
          {char, offset} = try do
              while_fun_6.(while_fun_6, char, offset)
            catch
              {:break, {char, offset}} -> {char, offset}
            end

          cipher = (cipher ++ [char])
          j = j + 1
          while_fun_5.(while_fun_5, cipher, j, offset)
        else
          {cipher, j, offset}
        end
      end
      {cipher, j, offset} = try do
          while_fun_5.(while_fun_5, cipher, j, offset)
        catch
          {:break, {cipher, j, offset}} -> {cipher, j, offset}
        end

      throw {:return, cipher}
    catch
      {:return, val} -> val
    end
  end
  def index_in_list(lst, ch) do
    try do
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(lst) do
          if Enum.at(lst, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def encipher(message, cipher) do
    try do
      alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      msg = to_upper(message)
      res = ""
      i = 0
      while_fun_8 = fn while_fun_8, i, res ->
        if i < _len(msg) do
          ch = String.at(msg, i)
          idx = index_in_string(alphabet, ch)
          res = (if idx >= 0, do: (res <> Enum.at(cipher, idx)), else: (res <> ch))
          i = i + 1
          while_fun_8.(while_fun_8, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_8.(while_fun_8, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def decipher(message, cipher) do
    try do
      alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      msg = to_upper(message)
      res = ""
      i = 0
      while_fun_9 = fn while_fun_9, i, res ->
        if i < _len(msg) do
          ch = String.at(msg, i)
          idx = index_in_list(cipher, ch)
          res = (if idx >= 0, do: (res <> String.at(alphabet, idx)), else: (res <> ch))
          i = i + 1
          while_fun_9.(while_fun_9, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_9.(while_fun_9, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:cipher_map, create_cipher_map("Goodbye!!"))
    Process.put(:encoded, encipher("Hello World!!", Process.get(:cipher_map)))
    IO.puts(Process.get(:encoded))
    IO.puts(Kernel.inspect(decipher(Process.get(:encoded), Process.get(:cipher_map))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
