# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def to_upper(s) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          j = 0
          replaced = false
          while_fun_2 = fn while_fun_2, j, replaced, res ->
            if j < _len(Process.get(:lower)) do
              {replaced, res} = if _slice(Process.get(:lower), j, j + 1 - (j)) == ch do
                res = (res <> _slice(Process.get(:upper), j, j + 1 - (j)))
                replaced = true
                throw {:break, {j, replaced, res}}
                {replaced, res}
              else
                {replaced, res}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, replaced, res)
            else
              {j, replaced, res}
            end
          end
          {j, replaced, res} = try do
              while_fun_2.(while_fun_2, j, replaced, res)
            catch
              {:break, {j, replaced, res}} -> {j, replaced, res}
            end

          {res} = if !replaced do
            res = (res <> ch)
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def char_index(c) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(Process.get(:upper)) do
          if _slice(Process.get(:upper), i, i + 1 - (i)) == c do
            throw {:return, i}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def rotate_right(s, k) do
    try do
      n = _len(s)
      shift = rem(k, n)
      throw {:return, (_slice(s, n - shift, n - (n - shift)) <> _slice(s, 0, n - shift - (0)))}
    catch
      {:return, val} -> val
    end
  end
  def table_for(c) do
    try do
      idx = char_index(c)
      shift = div(idx, 2)
      row1 = rotate_right(Process.get(:base_bottom), shift)
      pair = [Process.get(:base_top), row1]
      throw {:return, pair}
    catch
      {:return, val} -> val
    end
  end
  def generate_table(key) do
    try do
      up = to_upper(key)
      i = 0
      result = []
      while_fun_4 = fn while_fun_4, i, result ->
        if i < _len(up) do
          ch = _slice(up, i, i + 1 - (i))
          pair = table_for(ch)
          result = (result ++ [pair])
          i = i + 1
          while_fun_4.(while_fun_4, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_4.(while_fun_4, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def str_index(s, ch) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0 - 1}
    catch
      {:return, val} -> val
    end
  end
  def get_position(table, ch) do
    try do
      row = 0
      {row} = if str_index(Enum.at(table, 0), ch) == 0 - 1 do
        row = 1
        {row}
      else
        {row}
      end
      col = str_index(Enum.at(table, row), ch)
      throw {:return, [row, col]}
    catch
      {:return, val} -> val
    end
  end
  def get_opponent(table, ch) do
    try do
      pos = get_position(table, ch)
      row = Enum.at(pos, 0)
      col = Enum.at(pos, 1)
      if col == 0 - 1 do
        throw {:return, ch}
      end
      if row == 1 do
        throw {:return, _slice(Enum.at(table, 0), col, col + 1 - (col))}
      end
      throw {:return, _slice(Enum.at(table, 1), col, col + 1 - (col))}
    catch
      {:return, val} -> val
    end
  end
  def encrypt(key, words) do
    try do
      table = generate_table(key)
      up_words = to_upper(words)
      cipher = ""
      count = 0
      i = 0
      while_fun_6 = fn while_fun_6, cipher, count, i ->
        if i < _len(up_words) do
          ch = _slice(up_words, i, i + 1 - (i))
          cipher = (cipher <> get_opponent(Enum.at(table, count), ch))
          count = rem((count + 1), _len(table))
          i = i + 1
          while_fun_6.(while_fun_6, cipher, count, i)
        else
          {cipher, count, i}
        end
      end
      {cipher, count, i} = try do
          while_fun_6.(while_fun_6, cipher, count, i)
        catch
          {:break, {cipher, count, i}} -> {cipher, count, i}
        end

      throw {:return, cipher}
    catch
      {:return, val} -> val
    end
  end
  def decrypt(key, words) do
    try do
      res = encrypt(key, words)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(encrypt("marvin", "jessica")))
      IO.puts(Kernel.inspect(decrypt("marvin", "QRACRWU")))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:upper, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:lower, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:base_top, "ABCDEFGHIJKLM")
  Process.put(:base_bottom, "NOPQRSTUVWXYZ")
  def bench_main() do
    Process.put(:upper, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    Process.put(:lower, "abcdefghijklmnopqrstuvwxyz")
    Process.put(:base_top, "ABCDEFGHIJKLM")
    Process.put(:base_bottom, "NOPQRSTUVWXYZ")
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
