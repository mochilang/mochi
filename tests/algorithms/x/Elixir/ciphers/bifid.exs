# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def index_of(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def to_lower_without_spaces(message, replace_j) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(message) do
          ch = String.at(message, i)
          pos = index_of(upper, ch)
          {ch} = if pos >= 0 do
            ch = Enum.at(lower, pos)
            {ch}
          else
            {ch}
          end
          {ch, res} = if ch != " " do
            {ch} = if replace_j && ch == "j" do
              ch = "i"
              {ch}
            else
              {ch}
            end
            res = (res <> ch)
            {ch, res}
          else
            {ch, res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def letter_to_numbers(letter) do
    try do
      r = 0
      while_fun_3 = fn while_fun_3, r ->
        if r < _len(Process.get(:square)) do
          c = 0
          while_fun_4 = fn while_fun_4, c ->
            if c < _len(Enum.at(Process.get(:square), r)) do
              if Enum.at(Enum.at(Process.get(:square), r), c) == letter do
                throw {:return, [r + 1, c + 1]}
              end
              c = c + 1
              while_fun_4.(while_fun_4, c)
            else
              c
            end
          end
          c = try do
              while_fun_4.(while_fun_4, c)
            catch
              {:break, {c}} -> c
            end

          r = r + 1
          while_fun_3.(while_fun_3, r)
        else
          r
        end
      end
      r = try do
          while_fun_3.(while_fun_3, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, [0, 0]}
    catch
      {:return, val} -> val
    end
  end
  def numbers_to_letter(row, col) do
    try do
      throw {:return, Enum.at(Enum.at(Process.get(:square), row - 1), col - 1)}
    catch
      {:return, val} -> val
    end
  end
  def encode(message) do
    try do
      clean = to_lower_without_spaces(message, true)
      l = _len(clean)
      rows = []
      cols = []
      i = 0
      while_fun_5 = fn while_fun_5, cols, i, rows ->
        if i < l do
          nums = letter_to_numbers(String.at(clean, i))
          rows = (rows ++ [Enum.at(nums, 0)])
          cols = (cols ++ [Enum.at(nums, 1)])
          i = i + 1
          while_fun_5.(while_fun_5, cols, i, rows)
        else
          {cols, i, rows}
        end
      end
      {cols, i, rows} = try do
          while_fun_5.(while_fun_5, cols, i, rows)
        catch
          {:break, {cols, i, rows}} -> {cols, i, rows}
        end

      seq = []
      i = 0
      while_fun_6 = fn while_fun_6, i, seq ->
        if i < l do
          seq = (seq ++ [Enum.at(rows, i)])
          i = i + 1
          while_fun_6.(while_fun_6, i, seq)
        else
          {i, seq}
        end
      end
      {i, seq} = try do
          while_fun_6.(while_fun_6, i, seq)
        catch
          {:break, {i, seq}} -> {i, seq}
        end

      i = 0
      while_fun_7 = fn while_fun_7, i, seq ->
        if i < l do
          seq = (seq ++ [Enum.at(cols, i)])
          i = i + 1
          while_fun_7.(while_fun_7, i, seq)
        else
          {i, seq}
        end
      end
      {i, seq} = try do
          while_fun_7.(while_fun_7, i, seq)
        catch
          {:break, {i, seq}} -> {i, seq}
        end

      encoded = ""
      i = 0
      while_fun_8 = fn while_fun_8, encoded, i ->
        if i < l do
          r = Enum.at(seq, 2 * i)
          c = Enum.at(seq, 2 * i + 1)
          encoded = (encoded <> numbers_to_letter(r, c))
          i = i + 1
          while_fun_8.(while_fun_8, encoded, i)
        else
          {encoded, i}
        end
      end
      {encoded, i} = try do
          while_fun_8.(while_fun_8, encoded, i)
        catch
          {:break, {encoded, i}} -> {encoded, i}
        end

      throw {:return, encoded}
    catch
      {:return, val} -> val
    end
  end
  def decode(message) do
    try do
      clean = to_lower_without_spaces(message, false)
      l = _len(clean)
      first = []
      i = 0
      while_fun_9 = fn while_fun_9, first, i ->
        if i < l do
          nums = letter_to_numbers(String.at(clean, i))
          first = (first ++ [Enum.at(nums, 0)])
          first = (first ++ [Enum.at(nums, 1)])
          i = i + 1
          while_fun_9.(while_fun_9, first, i)
        else
          {first, i}
        end
      end
      {first, i} = try do
          while_fun_9.(while_fun_9, first, i)
        catch
          {:break, {first, i}} -> {first, i}
        end

      top = []
      bottom = []
      i = 0
      while_fun_10 = fn while_fun_10, bottom, i, top ->
        if i < l do
          top = (top ++ [Enum.at(first, i)])
          bottom = (bottom ++ [Enum.at(first, i + l)])
          i = i + 1
          while_fun_10.(while_fun_10, bottom, i, top)
        else
          {bottom, i, top}
        end
      end
      {bottom, i, top} = try do
          while_fun_10.(while_fun_10, bottom, i, top)
        catch
          {:break, {bottom, i, top}} -> {bottom, i, top}
        end

      decoded = ""
      i = 0
      while_fun_11 = fn while_fun_11, decoded, i ->
        if i < l do
          r = Enum.at(top, i)
          c = Enum.at(bottom, i)
          decoded = (decoded <> numbers_to_letter(r, c))
          i = i + 1
          while_fun_11.(while_fun_11, decoded, i)
        else
          {decoded, i}
        end
      end
      {decoded, i} = try do
          while_fun_11.(while_fun_11, decoded, i)
        catch
          {:break, {decoded, i}} -> {decoded, i}
        end

      throw {:return, decoded}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:square, [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(encode("testmessage")))
    IO.puts(Kernel.inspect(encode("Test Message")))
    IO.puts(Kernel.inspect(encode("test j")))
    IO.puts(Kernel.inspect(encode("test i")))
    IO.puts(Kernel.inspect(decode("qtltbdxrxlk")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
