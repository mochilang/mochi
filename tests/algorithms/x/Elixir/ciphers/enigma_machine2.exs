# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def list_contains(xs, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == x do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def index_in_string(s, ch) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def contains_char(s, ch) do
    try do
      throw {:return, index_in_string(s, ch) >= 0}
    catch
      {:return, val} -> val
    end
  end
  def to_uppercase(s) do
    try do
      res = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          idx = index_in_string(Process.get(:low_abc), ch)
          res = (if idx >= 0, do: (res <> _slice(Process.get(:abc), idx, idx + 1 - (idx))), else: (res <> ch))
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def plugboard_map(pb, ch) do
    try do
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(pb) do
          pair = Enum.at(pb, i)
          a = _slice(pair, 0, 1 - (0))
          b = _slice(pair, 1, 2 - (1))
          if ch == a do
            throw {:return, b}
          end
          if ch == b do
            throw {:return, a}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, ch}
    catch
      {:return, val} -> val
    end
  end
  def reflector_map(ch) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(Process.get(:reflector_pairs)) do
          pair = Enum.at(Process.get(:reflector_pairs), i)
          a = _slice(pair, 0, 1 - (0))
          b = _slice(pair, 1, 2 - (1))
          if ch == a do
            throw {:return, b}
          end
          if ch == b do
            throw {:return, a}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, ch}
    catch
      {:return, val} -> val
    end
  end
  def count_unique(xs) do
    try do
      unique = []
      i = 0
      while_fun_6 = fn while_fun_6, i, unique ->
        if i < _len(xs) do
          {unique} = if !list_contains(unique, Enum.at(xs, i)) do
            unique = (unique ++ [Enum.at(xs, i)])
            {unique}
          else
            {unique}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i, unique)
        else
          {i, unique}
        end
      end
      {i, unique} = try do
          while_fun_6.(while_fun_6, i, unique)
        catch
          {:break, {i, unique}} -> {i, unique}
        end

      throw {:return, _len(unique)}
    catch
      {:return, val} -> val
    end
  end
  def build_plugboard(pbstring) do
    try do
      if _len(pbstring) == 0 do
        throw {:return, []}
      end
      if rem(_len(pbstring), 2) != 0 do
        raise((("Odd number of symbols(" <> Kernel.inspect(_len(pbstring))) <> ")"))
      end
      pbstring_nospace = ""
      i = 0
      while_fun_7 = fn while_fun_7, i, pbstring_nospace ->
        if i < _len(pbstring) do
          ch = _slice(pbstring, i, i + 1 - (i))
          {pbstring_nospace} = if ch != " " do
            pbstring_nospace = (pbstring_nospace <> ch)
            {pbstring_nospace}
          else
            {pbstring_nospace}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i, pbstring_nospace)
        else
          {i, pbstring_nospace}
        end
      end
      {i, pbstring_nospace} = try do
          while_fun_7.(while_fun_7, i, pbstring_nospace)
        catch
          {:break, {i, pbstring_nospace}} -> {i, pbstring_nospace}
        end

      seen = []
      i = 0
      while_fun_8 = fn while_fun_8, i, seen ->
        if i < _len(pbstring_nospace) do
          ch = _slice(pbstring_nospace, i, i + 1 - (i))
          if !contains_char(Process.get(:abc), ch) do
            raise((("'" <> ch) <> "' not in list of symbols"))
          end
          if list_contains(seen, ch) do
            raise((("Duplicate symbol(" <> ch) <> ")"))
          end
          seen = (seen ++ [ch])
          i = i + 1
          while_fun_8.(while_fun_8, i, seen)
        else
          {i, seen}
        end
      end
      {i, seen} = try do
          while_fun_8.(while_fun_8, i, seen)
        catch
          {:break, {i, seen}} -> {i, seen}
        end

      pb = []
      i = 0
      while_fun_9 = fn while_fun_9, i, pb ->
        if i < _len(pbstring_nospace) - 1 do
          a = _slice(pbstring_nospace, i, i + 1 - (i))
          b = _slice(pbstring_nospace, i + 1, i + 2 - (i + 1))
          pb = (pb ++ [(a <> b)])
          i = i + 2
          while_fun_9.(while_fun_9, i, pb)
        else
          {i, pb}
        end
      end
      {i, pb} = try do
          while_fun_9.(while_fun_9, i, pb)
        catch
          {:break, {i, pb}} -> {i, pb}
        end

      throw {:return, pb}
    catch
      {:return, val} -> val
    end
  end
  def validator(rotpos, rotsel, pb) do
    try do
      if count_unique(rotsel) < 3 do
        raise((("Please use 3 unique rotors (not " <> Kernel.inspect(count_unique(rotsel))) <> ")"))
      end
      if _len(rotpos) != 3 do
        raise("Rotor position must have 3 values")
      end
      r1 = Enum.at(rotpos, 0)
      r2 = Enum.at(rotpos, 1)
      r3 = Enum.at(rotpos, 2)
      if !(0 < r1 && r1 <= _len(Process.get(:abc))) do
        raise((("First rotor position is not within range of 1..26 (" <> Kernel.to_string(r1)) <> ")"))
      end
      if !(0 < r2 && r2 <= _len(Process.get(:abc))) do
        raise((("Second rotor position is not within range of 1..26 (" <> Kernel.to_string(r2)) <> ")"))
      end
      if !(0 < r3 && r3 <= _len(Process.get(:abc))) do
        raise((("Third rotor position is not within range of 1..26 (" <> Kernel.to_string(r3)) <> ")"))
      end
    catch
      {:return, val} -> val
    end
  end
  def enigma(text, rotor_position, rotor_selection, plugb) do
    try do
      up_text = to_uppercase(text)
      up_pb = to_uppercase(plugb)
      validator(rotor_position, rotor_selection, up_pb)
      plugboard = build_plugboard(up_pb)
      rotorpos1 = Enum.at(rotor_position, 0) - 1
      rotorpos2 = Enum.at(rotor_position, 1) - 1
      rotorpos3 = Enum.at(rotor_position, 2) - 1
      rotor_a = Enum.at(rotor_selection, 0)
      rotor_b = Enum.at(rotor_selection, 1)
      rotor_c = Enum.at(rotor_selection, 2)
      result = ""
      i = 0
      while_fun_10 = fn while_fun_10, i, result, rotorpos1, rotorpos2, rotorpos3 ->
        if i < _len(up_text) do
          symbol = _slice(up_text, i, i + 1 - (i))
          {rotorpos1, rotorpos2, rotorpos3, symbol} = if contains_char(Process.get(:abc), symbol) do
            symbol = plugboard_map(plugboard, symbol)
            index = index_in_string(Process.get(:abc), symbol) + rotorpos1
            symbol = _slice(rotor_a, rem(index, _len(Process.get(:abc))), rem(index, _len(Process.get(:abc))) + 1 - (rem(index, _len(Process.get(:abc)))))
            index = index_in_string(Process.get(:abc), symbol) + rotorpos2
            symbol = _slice(rotor_b, rem(index, _len(Process.get(:abc))), rem(index, _len(Process.get(:abc))) + 1 - (rem(index, _len(Process.get(:abc)))))
            index = index_in_string(Process.get(:abc), symbol) + rotorpos3
            symbol = _slice(rotor_c, rem(index, _len(Process.get(:abc))), rem(index, _len(Process.get(:abc))) + 1 - (rem(index, _len(Process.get(:abc)))))
            symbol = reflector_map(symbol)
            index = index_in_string(rotor_c, symbol) - rotorpos3
            {index} = if index < 0 do
              index = index + _len(Process.get(:abc))
              {index}
            else
              {index}
            end
            symbol = _slice(Process.get(:abc), index, index + 1 - (index))
            index = index_in_string(rotor_b, symbol) - rotorpos2
            {index} = if index < 0 do
              index = index + _len(Process.get(:abc))
              {index}
            else
              {index}
            end
            symbol = _slice(Process.get(:abc), index, index + 1 - (index))
            index = index_in_string(rotor_a, symbol) - rotorpos1
            {index} = if index < 0 do
              index = index + _len(Process.get(:abc))
              {index}
            else
              {index}
            end
            symbol = _slice(Process.get(:abc), index, index + 1 - (index))
            symbol = plugboard_map(plugboard, symbol)
            rotorpos1 = rotorpos1 + 1
            {rotorpos1, rotorpos2} = if rotorpos1 >= _len(Process.get(:abc)) do
              rotorpos1 = 0
              rotorpos2 = rotorpos2 + 1
              {rotorpos1, rotorpos2}
            else
              {rotorpos1, rotorpos2}
            end
            {rotorpos2, rotorpos3} = if rotorpos2 >= _len(Process.get(:abc)) do
              rotorpos2 = 0
              rotorpos3 = rotorpos3 + 1
              {rotorpos2, rotorpos3}
            else
              {rotorpos2, rotorpos3}
            end
            {rotorpos3} = if rotorpos3 >= _len(Process.get(:abc)) do
              rotorpos3 = 0
              {rotorpos3}
            else
              {rotorpos3}
            end
            {rotorpos1, rotorpos2, rotorpos3, symbol}
          else
            {rotorpos1, rotorpos2, rotorpos3, symbol}
          end
          result = (result <> symbol)
          i = i + 1
          while_fun_10.(while_fun_10, i, result, rotorpos1, rotorpos2, rotorpos3)
        else
          {i, result, rotorpos1, rotorpos2, rotorpos3}
        end
      end
      {i, result, rotorpos1, rotorpos2, rotorpos3} = try do
          while_fun_10.(while_fun_10, i, result, rotorpos1, rotorpos2, rotorpos3)
        catch
          {:break, {i, result, rotorpos1, rotorpos2, rotorpos3}} -> {i, result, rotorpos1, rotorpos2, rotorpos3}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      message = "This is my Python script that emulates the Enigma machine from WWII."
      rotor_pos = [1, 1, 1]
      pb = "pictures"
      rotor_sel = [Process.get(:rotor2), Process.get(:rotor4), Process.get(:rotor8)]
      en = enigma(message, rotor_pos, rotor_sel, pb)
      IO.puts(("Encrypted message: " <> en))
      IO.puts(("Decrypted message: " <> enigma(en, rotor_pos, rotor_sel, pb)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:abc, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:low_abc, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:rotor1, "EGZWVONAHDCLFQMSIPJBYUKXTR")
  Process.put(:rotor2, "FOBHMDKEXQNRAULPGSJVTYICZW")
  Process.put(:rotor3, "ZJXESIUQLHAVRMDOYGTNFWPBKC")
  Process.put(:rotor4, "RMDJXFUWGISLHVTCQNKYPBEZOA")
  Process.put(:rotor5, "SGLCPQWZHKXAREONTFBVIYJUDM")
  Process.put(:rotor6, "HVSICLTYKQUBXDWAJZOMFGPREN")
  Process.put(:rotor7, "RZWQHFMVDBKICJLNTUXAGYPSOE")
  Process.put(:rotor8, "LFKIJODBEGAMQPXVUHYSTCZRWN")
  Process.put(:rotor9, "KOAEGVDHXPQZMLFTYWJNBRCIUS")
  Process.put(:reflector_pairs, ["AN", "BO", "CP", "DQ", "ER", "FS", "GT", "HU", "IV", "JW", "KX", "LY", "MZ"])
  def bench_main() do
    Process.put(:abc, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    Process.put(:low_abc, "abcdefghijklmnopqrstuvwxyz")
    Process.put(:rotor1, "EGZWVONAHDCLFQMSIPJBYUKXTR")
    Process.put(:rotor2, "FOBHMDKEXQNRAULPGSJVTYICZW")
    Process.put(:rotor3, "ZJXESIUQLHAVRMDOYGTNFWPBKC")
    Process.put(:rotor4, "RMDJXFUWGISLHVTCQNKYPBEZOA")
    Process.put(:rotor5, "SGLCPQWZHKXAREONTFBVIYJUDM")
    Process.put(:rotor6, "HVSICLTYKQUBXDWAJZOMFGPREN")
    Process.put(:rotor7, "RZWQHFMVDBKICJLNTUXAGYPSOE")
    Process.put(:rotor8, "LFKIJODBEGAMQPXVUHYSTCZRWN")
    Process.put(:rotor9, "KOAEGVDHXPQZMLFTYWJNBRCIUS")
    Process.put(:reflector_pairs, ["AN", "BO", "CP", "DQ", "ER", "FS", "GT", "HU", "IV", "JW", "KX", "LY", "MZ"])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
