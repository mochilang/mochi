# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def pow_int(base, exp) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def mod_pow(base, exponent, modulus) do
    try do
      result = 1
      b = rem(base, modulus)
      e = exponent
      while_fun_2 = fn while_fun_2, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), modulus)
            {result}
          else
            {result}
          end
          e = div(e, 2)
          b = rem((b * b), modulus)
          while_fun_2.(while_fun_2, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun_2.(while_fun_2, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      if ch == " " do
        throw {:return, 32}
      end
      if ch == "a" do
        throw {:return, 97}
      end
      if ch == "b" do
        throw {:return, 98}
      end
      if ch == "c" do
        throw {:return, 99}
      end
      if ch == "d" do
        throw {:return, 100}
      end
      if ch == "e" do
        throw {:return, 101}
      end
      if ch == "f" do
        throw {:return, 102}
      end
      if ch == "g" do
        throw {:return, 103}
      end
      if ch == "h" do
        throw {:return, 104}
      end
      if ch == "i" do
        throw {:return, 105}
      end
      if ch == "j" do
        throw {:return, 106}
      end
      if ch == "k" do
        throw {:return, 107}
      end
      if ch == "l" do
        throw {:return, 108}
      end
      if ch == "m" do
        throw {:return, 109}
      end
      if ch == "n" do
        throw {:return, 110}
      end
      if ch == "o" do
        throw {:return, 111}
      end
      if ch == "p" do
        throw {:return, 112}
      end
      if ch == "q" do
        throw {:return, 113}
      end
      if ch == "r" do
        throw {:return, 114}
      end
      if ch == "s" do
        throw {:return, 115}
      end
      if ch == "t" do
        throw {:return, 116}
      end
      if ch == "u" do
        throw {:return, 117}
      end
      if ch == "v" do
        throw {:return, 118}
      end
      if ch == "w" do
        throw {:return, 119}
      end
      if ch == "x" do
        throw {:return, 120}
      end
      if ch == "y" do
        throw {:return, 121}
      end
      if ch == "z" do
        throw {:return, 122}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def chr(code) do
    try do
      if code == 32 do
        throw {:return, " "}
      end
      if code == 97 do
        throw {:return, "a"}
      end
      if code == 98 do
        throw {:return, "b"}
      end
      if code == 99 do
        throw {:return, "c"}
      end
      if code == 100 do
        throw {:return, "d"}
      end
      if code == 101 do
        throw {:return, "e"}
      end
      if code == 102 do
        throw {:return, "f"}
      end
      if code == 103 do
        throw {:return, "g"}
      end
      if code == 104 do
        throw {:return, "h"}
      end
      if code == 105 do
        throw {:return, "i"}
      end
      if code == 106 do
        throw {:return, "j"}
      end
      if code == 107 do
        throw {:return, "k"}
      end
      if code == 108 do
        throw {:return, "l"}
      end
      if code == 109 do
        throw {:return, "m"}
      end
      if code == 110 do
        throw {:return, "n"}
      end
      if code == 111 do
        throw {:return, "o"}
      end
      if code == 112 do
        throw {:return, "p"}
      end
      if code == 113 do
        throw {:return, "q"}
      end
      if code == 114 do
        throw {:return, "r"}
      end
      if code == 115 do
        throw {:return, "s"}
      end
      if code == 116 do
        throw {:return, "t"}
      end
      if code == 117 do
        throw {:return, "u"}
      end
      if code == 118 do
        throw {:return, "v"}
      end
      if code == 119 do
        throw {:return, "w"}
      end
      if code == 120 do
        throw {:return, "x"}
      end
      if code == 121 do
        throw {:return, "y"}
      end
      if code == 122 do
        throw {:return, "z"}
      end
      throw {:return, ""}
    catch
      {:return, val} -> val
    end
  end
  def get_blocks_from_text(message, block_size) do
    try do
      block_ints = []
      block_start = 0
      while_fun_3 = fn while_fun_3, block_ints, block_start ->
        if block_start < _len(message) do
          block_int = 0
          i = block_start
          while_fun_4 = fn while_fun_4, block_int, i ->
            if i < block_start + block_size && i < _len(message) do
              block_int = block_int + ord(String.at(message, i)) * pow_int(Process.get(:byte_size), i - block_start)
              i = i + 1
              while_fun_4.(while_fun_4, block_int, i)
            else
              {block_int, i}
            end
          end
          {block_int, i} = try do
              while_fun_4.(while_fun_4, block_int, i)
            catch
              {:break, {block_int, i}} -> {block_int, i}
            end

          block_ints = (block_ints ++ [block_int])
          block_start = block_start + block_size
          while_fun_3.(while_fun_3, block_ints, block_start)
        else
          {block_ints, block_start}
        end
      end
      {block_ints, block_start} = try do
          while_fun_3.(while_fun_3, block_ints, block_start)
        catch
          {:break, {block_ints, block_start}} -> {block_ints, block_start}
        end

      throw {:return, block_ints}
    catch
      {:return, val} -> val
    end
  end
  def get_text_from_blocks(block_ints, message_length, block_size) do
    try do
      message = ""
      {message} = Enum.reduce(block_ints, {message}, fn block_int, {message} ->
        block = block_int
        i = block_size - 1
        block_message = ""
        while_fun_5 = fn while_fun_5, block, block_message, i ->
          if i >= 0 do
            {block, block_message} = if _len(message) + i < message_length do
              ascii_number = div(block, pow_int(Process.get(:byte_size), i))
              block = rem(block, pow_int(Process.get(:byte_size), i))
              block_message = (chr(ascii_number) <> block_message)
              {block, block_message}
            else
              {block, block_message}
            end
            i = i - 1
            while_fun_5.(while_fun_5, block, block_message, i)
          else
            {block, block_message, i}
          end
        end
        {block, block_message, i} = try do
            while_fun_5.(while_fun_5, block, block_message, i)
          catch
            {:break, {block, block_message, i}} -> {block, block_message, i}
          end

        message = (message <> block_message)
        {message}
      end)
      throw {:return, message}
    catch
      {:return, val} -> val
    end
  end
  def encrypt_message(message, n, e, block_size) do
    try do
      encrypted = []
      blocks = get_blocks_from_text(message, block_size)
      {encrypted} = Enum.reduce(blocks, {encrypted}, fn block, {encrypted} ->
        encrypted = (encrypted ++ [mod_pow(block, e, n)])
        {encrypted}
      end)
      throw {:return, encrypted}
    catch
      {:return, val} -> val
    end
  end
  def decrypt_message(blocks, message_length, n, d, block_size) do
    try do
      decrypted_blocks = []
      {decrypted_blocks} = Enum.reduce(blocks, {decrypted_blocks}, fn block, {decrypted_blocks} ->
        decrypted_blocks = (decrypted_blocks ++ [mod_pow(block, d, n)])
        {decrypted_blocks}
      end)
      message = ""
      {message} = Enum.reduce(decrypted_blocks, {message}, fn num, {message} ->
        message = (message <> chr(num))
        {message}
      end)
      throw {:return, message}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      message = "hello world"
      n = 3233
      e = 17
      d = 2753
      block_size = 1
      encrypted = encrypt_message(message, n, e, block_size)
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [encrypted])), ",", " "))
      decrypted = decrypt_message(encrypted, _len(message), n, d, block_size)
      IO.puts(decrypted)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:byte_size, 256)
  def bench_main() do
    Process.put(:byte_size, 256)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
