# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def rand(max) do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483647))
      throw {:return, rem(Process.get(:seed), max)}
    catch
      {:return, val} -> val
    end
  end
  def generate_valid_block_size(message_length) do
    try do
      factors = []
      i = 2
      while_fun = fn while_fun, factors, i ->
        if i <= message_length do
          {factors} = if rem(message_length, i) == 0 do
            factors = (factors ++ [i])
            {factors}
          else
            {factors}
          end
          i = i + 1
          while_fun.(while_fun, factors, i)
        else
          {factors, i}
        end
      end
      {factors, i} = try do
          while_fun.(while_fun, factors, i)
        catch
          {:break, {factors, i}} -> {factors, i}
        end

      idx = rand(_len(factors))
      throw {:return, Enum.at(factors, idx)}
    catch
      {:return, val} -> val
    end
  end
  def generate_permutation_key(block_size) do
    try do
      digits = []
      i = 0
      while_fun_2 = fn while_fun_2, digits, i ->
        if i < block_size do
          digits = (digits ++ [i])
          i = i + 1
          while_fun_2.(while_fun_2, digits, i)
        else
          {digits, i}
        end
      end
      {digits, i} = try do
          while_fun_2.(while_fun_2, digits, i)
        catch
          {:break, {digits, i}} -> {digits, i}
        end

      j = block_size - 1
      while_fun_3 = fn while_fun_3, digits, j ->
        if j > 0 do
          k = rand(j + 1)
          temp = Enum.at(digits, j)
          digits = List.replace_at(digits, j, Enum.at(digits, k))
          digits = List.replace_at(digits, k, temp)
          j = j - 1
          while_fun_3.(while_fun_3, digits, j)
        else
          {digits, j}
        end
      end
      {digits, j} = try do
          while_fun_3.(while_fun_3, digits, j)
        catch
          {:break, {digits, j}} -> {digits, j}
        end

      throw {:return, digits}
    catch
      {:return, val} -> val
    end
  end
  def encrypt(message, key, block_size) do
    try do
      encrypted = ""
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(message) do
          block = _slice(message, i, i + block_size - (i))
          j = 0
          while_fun_5 = fn while_fun_5, j ->
            if j < block_size do
              encrypted = (encrypted <> _slice(block, Enum.at(key, j), Enum.at(key, j) + 1 - (Enum.at(key, j))))
              j = j + 1
              while_fun_5.(while_fun_5, j)
            else
              j
            end
          end
          j = try do
              while_fun_5.(while_fun_5, j)
            catch
              {:break, {j}} -> j
            end

          i = i + block_size
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, encrypted}
    catch
      {:return, val} -> val
    end
  end
  def repeat_string(times) do
    try do
      res = []
      i = 0
      while_fun_6 = fn while_fun_6, i, res ->
        if i < times do
          res = (res ++ [""])
          i = i + 1
          while_fun_6.(while_fun_6, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_6.(while_fun_6, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def decrypt(encrypted, key) do
    try do
      klen = _len(key)
      decrypted = ""
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(encrypted) do
          block = _slice(encrypted, i, i + klen - (i))
          original = repeat_string(klen)
          j = 0
          while_fun_8 = fn while_fun_8, j, original ->
            if j < klen do
              original = List.replace_at(original, Enum.at(key, j), _slice(block, j, j + 1 - (j)))
              j = j + 1
              while_fun_8.(while_fun_8, j, original)
            else
              {j, original}
            end
          end
          {j, original} = try do
              while_fun_8.(while_fun_8, j, original)
            catch
              {:break, {j, original}} -> {j, original}
            end

          j = 0
          while_fun_9 = fn while_fun_9, j ->
            if j < klen do
              decrypted = (decrypted <> Enum.at(original, j))
              j = j + 1
              while_fun_9.(while_fun_9, j)
            else
              j
            end
          end
          j = try do
              while_fun_9.(while_fun_9, j)
            catch
              {:break, {j}} -> j
            end

          i = i + klen
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, decrypted}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  Process.put(:message, "HELLO WORLD")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:block_size, generate_valid_block_size(_len(Process.get(:message))))
    Process.put(:key, generate_permutation_key(Process.get(:block_size)))
    Process.put(:encrypted, encrypt(Process.get(:message), Process.get(:key), Process.get(:block_size)))
    Process.put(:decrypted, decrypt(Process.get(:encrypted), Process.get(:key)))
    IO.puts(("Block size: " <> Kernel.to_string(Process.get(:block_size))))
    IO.puts(("Key: " <> String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:key)])), ",", " ")))
    IO.puts(("Encrypted: " <> Process.get(:encrypted)))
    IO.puts(("Decrypted: " <> Process.get(:decrypted)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
