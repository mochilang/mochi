# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def default_alphabet() do
    try do
      throw {:return, ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]}
    catch
      {:return, val} -> val
    end
  end
  def default_frequencies() do
    try do
      throw {:return, %{"a" => 0.08497, "b" => 0.01492, "c" => 0.02202, "d" => 0.04253, "e" => 0.11162, "f" => 0.02228, "g" => 0.02015, "h" => 0.06094, "i" => 0.07546, "j" => 0.00153, "k" => 0.01292, "l" => 0.04025, "m" => 0.02406, "n" => 0.06749, "o" => 0.07507, "p" => 0.01929, "q" => 0.00095, "r" => 0.07587, "s" => 0.06327, "t" => 0.09356, "u" => 0.02758, "v" => 0.00978, "w" => 0.0256, "x" => 0.0015, "y" => 0.01994, "z" => 0.00077}}
    catch
      {:return, val} -> val
    end
  end
  def index_of(xs, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def count_char(s, ch) do
    try do
      count = 0
      i = 0
      while_fun_2 = fn while_fun_2, count, i ->
        if i < _len(s) do
          {count} = if _slice(s, i, i + 1 - (i)) == ch do
            count = count + 1
            {count}
          else
            {count}
          end
          i = i + 1
          while_fun_2.(while_fun_2, count, i)
        else
          {count, i}
        end
      end
      {count, i} = try do
          while_fun_2.(while_fun_2, count, i)
        catch
          {:break, {count, i}} -> {count, i}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def decrypt_caesar_with_chi_squared(ciphertext, cipher_alphabet, frequencies_dict, case_sensitive) do
    try do
      alphabet_letters = cipher_alphabet
      {alphabet_letters} = if _len(alphabet_letters) == 0 do
        alphabet_letters = default_alphabet()
        {alphabet_letters}
      else
        {alphabet_letters}
      end
      frequencies = frequencies_dict
      {frequencies} = if map_size(frequencies) == 0 do
        frequencies = default_frequencies()
        {frequencies}
      else
        {frequencies}
      end
      {ciphertext} = if !case_sensitive do
        ciphertext = String.downcase(ciphertext)
        {ciphertext}
      else
        {ciphertext}
      end
      best_shift = 0
      best_chi = 0.0
      best_text = ""
      shift = 0
      while_fun_3 = fn while_fun_3, best_chi, best_shift, best_text, shift ->
        if shift < _len(alphabet_letters) do
          decrypted = ""
          i = 0
          while_fun_4 = fn while_fun_4, decrypted, i ->
            if i < _len(ciphertext) do
              ch = _slice(ciphertext, i, i + 1 - (i))
              idx = index_of(alphabet_letters, String.downcase(ch))
              {decrypted} = if idx >= 0 do
                m = _len(alphabet_letters)
                new_idx = rem((idx - shift), m)
                {new_idx} = if new_idx < 0 do
                  new_idx = new_idx + m
                  {new_idx}
                else
                  {new_idx}
                end
                new_char = Enum.at(alphabet_letters, new_idx)
                decrypted = (if case_sensitive && ch != String.downcase(ch), do: (decrypted <> String.upcase(new_char)), else: (decrypted <> new_char))
                {decrypted}
              else
                decrypted = (decrypted <> ch)
                {decrypted}
              end
              i = i + 1
              while_fun_4.(while_fun_4, decrypted, i)
            else
              {decrypted, i}
            end
          end
          {decrypted, i} = try do
              while_fun_4.(while_fun_4, decrypted, i)
            catch
              {:break, {decrypted, i}} -> {decrypted, i}
            end

          chi = 0.0
          lowered = (if case_sensitive, do: String.downcase(decrypted), else: decrypted)
          j = 0
          while_fun_5 = fn while_fun_5, chi, j ->
            if j < _len(alphabet_letters) do
              letter = Enum.at(alphabet_letters, j)
              occ = count_char(lowered, letter)
              {chi} = if occ > 0 do
                occf = :erlang.float(occ)
                expected = frequencies[letter] * occf
                diff = occf - expected
                chi = chi + ((diff * diff) / expected) * occf
                {chi}
              else
                {chi}
              end
              j = j + 1
              while_fun_5.(while_fun_5, chi, j)
            else
              {chi, j}
            end
          end
          {chi, j} = try do
              while_fun_5.(while_fun_5, chi, j)
            catch
              {:break, {chi, j}} -> {chi, j}
            end

          {best_chi, best_shift, best_text} = if shift == 0 || chi < best_chi do
            best_shift = shift
            best_chi = chi
            best_text = decrypted
            {best_chi, best_shift, best_text}
          else
            {best_chi, best_shift, best_text}
          end
          shift = shift + 1
          while_fun_3.(while_fun_3, best_chi, best_shift, best_text, shift)
        else
          {best_chi, best_shift, best_text, shift}
        end
      end
      {best_chi, best_shift, best_text, shift} = try do
          while_fun_3.(while_fun_3, best_chi, best_shift, best_text, shift)
        catch
          {:break, {best_chi, best_shift, best_text, shift}} -> {best_chi, best_shift, best_text, shift}
        end

      throw {:return, %{shift: best_shift, chi: best_chi, decoded: best_text}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:r1, decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", [], %{}, false))
    IO.puts(((((Kernel.to_string(Process.get(:r1).shift) <> ", ") <> Kernel.to_string(Process.get(:r1).chi)) <> ", ") <> Process.get(:r1).decoded))
    Process.put(:r2, decrypt_caesar_with_chi_squared("crybd cdbsxq", [], %{}, false))
    IO.puts(((((Kernel.to_string(Process.get(:r2).shift) <> ", ") <> Kernel.to_string(Process.get(:r2).chi)) <> ", ") <> Process.get(:r2).decoded))
    Process.put(:r3, decrypt_caesar_with_chi_squared("Crybd Cdbsxq", [], %{}, true))
    IO.puts(((((Kernel.to_string(Process.get(:r3).shift) <> ", ") <> Kernel.to_string(Process.get(:r3).chi)) <> ", ") <> Process.get(:r3).decoded))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
