# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def ord(ch) do
    try do
      digits = "0123456789"
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(digits) do
          if _slice(digits, i, i + 1 - (i)) == ch do
            throw {:return, 48 + i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(upper) do
          if _slice(upper, i, i + 1 - (i)) == ch do
            throw {:return, 65 + i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      lower = "abcdefghijklmnopqrstuvwxyz"
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(lower) do
          if _slice(lower, i, i + 1 - (i)) == ch do
            throw {:return, 97 + i}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def neg_pos(iterlist) do
    try do
      i = 1
      while_fun_4 = fn while_fun_4, i, iterlist ->
        if i < _len(iterlist) do
          iterlist = List.replace_at(iterlist, i, -Enum.at(iterlist, i))
          i = i + 2
          while_fun_4.(while_fun_4, i, iterlist)
        else
          {i, iterlist}
        end
      end
      {i, iterlist} = try do
          while_fun_4.(while_fun_4, i, iterlist)
        catch
          {:break, {i, iterlist}} -> {i, iterlist}
        end

      throw {:return, iterlist}
    catch
      {:return, val} -> val
    end
  end
  def passcode_creator() do
    try do
      choices = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
      seed = _now()
      length = 10 + (rem(seed, 11))
      password = []
      i = 0
      while_fun_5 = fn while_fun_5, i, password, seed ->
        if i < length do
          seed = rem((seed * 1103515245 + 12345), 2147483647)
          idx = rem(seed, _len(choices))
          password = (password ++ [_slice(choices, idx, idx + 1 - (idx))])
          i = i + 1
          while_fun_5.(while_fun_5, i, password, seed)
        else
          {i, password, seed}
        end
      end
      {i, password, seed} = try do
          while_fun_5.(while_fun_5, i, password, seed)
        catch
          {:break, {i, password, seed}} -> {i, password, seed}
        end

      throw {:return, password}
    catch
      {:return, val} -> val
    end
  end
  def unique_sorted(chars) do
    try do
      uniq = []
      i = 0
      while_fun_6 = fn while_fun_6, i, uniq ->
        if i < _len(chars) do
          ch = Enum.at(chars, i)
          {uniq} = if !(ch in uniq) do
            uniq = (uniq ++ [ch])
            {uniq}
          else
            {uniq}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i, uniq)
        else
          {i, uniq}
        end
      end
      {i, uniq} = try do
          while_fun_6.(while_fun_6, i, uniq)
        catch
          {:break, {i, uniq}} -> {i, uniq}
        end

      j = 0
      while_fun_7 = fn while_fun_7, j, uniq ->
        if j < _len(uniq) do
          k = j + 1
          min_idx = j
          while_fun_8 = fn while_fun_8, k, min_idx ->
            if k < _len(uniq) do
              {min_idx} = if Enum.at(uniq, k) < Enum.at(uniq, min_idx) do
                min_idx = k
                {min_idx}
              else
                {min_idx}
              end
              k = k + 1
              while_fun_8.(while_fun_8, k, min_idx)
            else
              {k, min_idx}
            end
          end
          {k, min_idx} = try do
              while_fun_8.(while_fun_8, k, min_idx)
            catch
              {:break, {k, min_idx}} -> {k, min_idx}
            end

          {uniq} = if min_idx != j do
            tmp = Enum.at(uniq, j)
            uniq = List.replace_at(uniq, j, Enum.at(uniq, min_idx))
            uniq = List.replace_at(uniq, min_idx, tmp)
            {uniq}
          else
            {uniq}
          end
          j = j + 1
          while_fun_7.(while_fun_7, j, uniq)
        else
          {j, uniq}
        end
      end
      {j, uniq} = try do
          while_fun_7.(while_fun_7, j, uniq)
        catch
          {:break, {j, uniq}} -> {j, uniq}
        end

      throw {:return, uniq}
    catch
      {:return, val} -> val
    end
  end
  def make_key_list(passcode) do
    try do
      key_list_options = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n"
      breakpoints = unique_sorted(passcode)
      keys_l = []
      temp_list = []
      i = 0
      while_fun_9 = fn while_fun_9, i, keys_l, temp_list ->
        if i < _len(key_list_options) do
          ch = _slice(key_list_options, i, i + 1 - (i))
          temp_list = (temp_list ++ [ch])
          {keys_l, temp_list} = if ch in breakpoints || i == _len(key_list_options) - 1 do
            k = _len(temp_list) - 1
            while_fun_10 = fn while_fun_10, k, keys_l ->
              if k >= 0 do
                keys_l = (keys_l ++ [Enum.at(temp_list, k)])
                k = k - 1
                while_fun_10.(while_fun_10, k, keys_l)
              else
                {k, keys_l}
              end
            end
            {k, keys_l} = try do
                while_fun_10.(while_fun_10, k, keys_l)
              catch
                {:break, {k, keys_l}} -> {k, keys_l}
              end

            temp_list = []
            {keys_l, temp_list}
          else
            {keys_l, temp_list}
          end
          i = i + 1
          while_fun_9.(while_fun_9, i, keys_l, temp_list)
        else
          {i, keys_l, temp_list}
        end
      end
      {i, keys_l, temp_list} = try do
          while_fun_9.(while_fun_9, i, keys_l, temp_list)
        catch
          {:break, {i, keys_l, temp_list}} -> {i, keys_l, temp_list}
        end

      throw {:return, keys_l}
    catch
      {:return, val} -> val
    end
  end
  def make_shift_key(passcode) do
    try do
      codes = []
      i = 0
      while_fun_11 = fn while_fun_11, codes, i ->
        if i < _len(passcode) do
          codes = (codes ++ [ord(Enum.at(passcode, i))])
          i = i + 1
          while_fun_11.(while_fun_11, codes, i)
        else
          {codes, i}
        end
      end
      {codes, i} = try do
          while_fun_11.(while_fun_11, codes, i)
        catch
          {:break, {codes, i}} -> {codes, i}
        end

      codes = neg_pos(codes)
      total = 0
      i = 0
      while_fun_12 = fn while_fun_12, i, total ->
        if i < _len(codes) do
          total = total + Enum.at(codes, i)
          i = i + 1
          while_fun_12.(while_fun_12, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun_12.(while_fun_12, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      if total > 0 do
        throw {:return, total}
      end
      throw {:return, _len(passcode)}
    catch
      {:return, val} -> val
    end
  end
  def new_cipher(passcode_str) do
    try do
      passcode = []
      {passcode} = if _len(passcode_str) == 0 do
        passcode = passcode_creator()
        {passcode}
      else
        i = 0
        while_fun_13 = fn while_fun_13, i, passcode ->
          if i < _len(passcode_str) do
            passcode = (passcode ++ [_slice(passcode_str, i, i + 1 - (i))])
            i = i + 1
            while_fun_13.(while_fun_13, i, passcode)
          else
            {i, passcode}
          end
        end
        {i, passcode} = try do
            while_fun_13.(while_fun_13, i, passcode)
          catch
            {:break, {i, passcode}} -> {i, passcode}
          end

        {passcode}
      end
      key_list = make_key_list(passcode)
      shift_key = make_shift_key(passcode)
      throw {:return, %{passcode: passcode, key_list: key_list, shift_key: shift_key}}
    catch
      {:return, val} -> val
    end
  end
  def index_of(lst, ch) do
    try do
      i = 0
      while_fun_14 = fn while_fun_14, i ->
        if i < _len(lst) do
          if Enum.at(lst, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_14.(while_fun_14, i)
        else
          i
        end
      end
      i = try do
          while_fun_14.(while_fun_14, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def encrypt(c, plaintext) do
    try do
      encoded = ""
      i = 0
      n = _len(Map.get(c, :key_list, []))
      while_fun_15 = fn while_fun_15, i ->
        if i < _len(plaintext) do
          ch = _slice(plaintext, i, i + 1 - (i))
          position = index_of(c.key_list, ch)
          new_pos = rem((position + c.shift_key), n)
          encoded = (encoded <> Enum.at(c.key_list, new_pos))
          i = i + 1
          while_fun_15.(while_fun_15, i)
        else
          i
        end
      end
      i = try do
          while_fun_15.(while_fun_15, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, encoded}
    catch
      {:return, val} -> val
    end
  end
  def decrypt(c, encoded_message) do
    try do
      decoded = ""
      i = 0
      n = _len(Map.get(c, :key_list, []))
      while_fun_16 = fn while_fun_16, decoded, i ->
        if i < _len(encoded_message) do
          ch = _slice(encoded_message, i, i + 1 - (i))
          position = index_of(c.key_list, ch)
          new_pos = rem((position - c.shift_key), n)
          {new_pos} = if new_pos < 0 do
            new_pos = new_pos + n
            {new_pos}
          else
            {new_pos}
          end
          decoded = (decoded <> Enum.at(c.key_list, new_pos))
          i = i + 1
          while_fun_16.(while_fun_16, decoded, i)
        else
          {decoded, i}
        end
      end
      {decoded, i} = try do
          while_fun_16.(while_fun_16, decoded, i)
        catch
          {:break, {decoded, i}} -> {decoded, i}
        end

      throw {:return, decoded}
    catch
      {:return, val} -> val
    end
  end
  def test_end_to_end() do
    try do
      msg = "Hello, this is a modified Caesar cipher"
      cip = new_cipher("")
      throw {:return, decrypt(cip, encrypt(cip, msg))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:ssc, new_cipher("4PYIXyqeQZr44"))
    Process.put(:encoded, encrypt(Process.get(:ssc), "Hello, this is a modified Caesar cipher"))
    IO.puts(Process.get(:encoded))
    IO.puts(Kernel.inspect(decrypt(Process.get(:ssc), Process.get(:encoded))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
