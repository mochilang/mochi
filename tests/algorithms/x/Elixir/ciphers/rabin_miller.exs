# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def int_pow(base, exp) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def pow_mod(base, exp, mod) do
    try do
      result = 1
      b = rem(base, mod)
      e = exp
      while_fun_2 = fn while_fun_2, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), mod)
            {result}
          else
            {result}
          end
          e = div(e, 2)
          b = rem((b * b), mod)
          while_fun_2.(while_fun_2, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun_2.(while_fun_2, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def rand_range(low, high) do
    try do
      throw {:return, (rem(_now(), (high - low))) + low}
    catch
      {:return, val} -> val
    end
  end
  def rabin_miller(num) do
    try do
      s = num - 1
      t = 0
      while_fun_3 = fn while_fun_3, s, t ->
        if rem(s, 2) == 0 do
          s = div(s, 2)
          t = t + 1
          while_fun_3.(while_fun_3, s, t)
        else
          {s, t}
        end
      end
      {s, t} = try do
          while_fun_3.(while_fun_3, s, t)
        catch
          {:break, {s, t}} -> {s, t}
        end

      k = 0
      while_fun_4 = fn while_fun_4, k ->
        if k < 5 do
          a = rand_range(2, num - 1)
          v = pow_mod(a, s, num)
          {v} = if v != 1 do
            i = 0
            while_fun_5 = fn while_fun_5, i, v ->
              if v != (num - 1) do
                if i == t - 1 do
                  throw {:return, false}
                end
                i = i + 1
                v = rem((v * v), num)
                while_fun_5.(while_fun_5, i, v)
              else
                {i, v}
              end
            end
            {i, v} = try do
                while_fun_5.(while_fun_5, i, v)
              catch
                {:break, {i, v}} -> {i, v}
              end

            {v}
          else
            {v}
          end
          k = k + 1
          while_fun_4.(while_fun_4, k)
        else
          k
        end
      end
      k = try do
          while_fun_4.(while_fun_4, k)
        catch
          {:break, {k}} -> k
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def is_prime_low_num(num) do
    try do
      if num < 2 do
        throw {:return, false}
      end
      low_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
      if num in low_primes do
        throw {:return, true}
      end
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(low_primes) do
          p = Enum.at(low_primes, i)
          if rem(num, Process.get(:p)) == 0 do
            throw {:return, false}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, rabin_miller(num)}
    catch
      {:return, val} -> val
    end
  end
  def generate_large_prime(keysize) do
    try do
      start = int_pow(2, keysize - 1)
      end_ = int_pow(2, keysize)
      while_fun_7 = fn while_fun_7 ->
        if true do
          num = rand_range(start, end_)
          if is_prime_low_num(num) do
            throw {:return, num}
          end
          while_fun_7.(while_fun_7)
        else
          nil
        end
      end
      try do
        while_fun_7.(while_fun_7)
      catch
        :break -> nil
      end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:p, generate_large_prime(16))
    IO.puts(("Prime number: " <> Kernel.to_string(Process.get(:p))))
    IO.puts(("is_prime_low_num: " <> Kernel.inspect(is_prime_low_num(Process.get(:p)))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
