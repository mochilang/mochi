# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def remove_spaces(s) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(s) do
          c = _slice(s, i, i + 1 - (i))
          {res} = if c != " " do
            res = (res <> c)
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def char_to_trigram(ch, alphabet) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(alphabet) do
          if _slice(alphabet, i, i + 1 - (i)) == ch do
            throw {:return, Enum.at(Process.get(:triagrams), i)}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, ""}
    catch
      {:return, val} -> val
    end
  end
  def trigram_to_char(tri, alphabet) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(Process.get(:triagrams)) do
          if Enum.at(Process.get(:triagrams), i) == tri do
            throw {:return, _slice(alphabet, i, i + 1 - (i))}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, ""}
    catch
      {:return, val} -> val
    end
  end
  def encrypt_part(part, alphabet) do
    try do
      one = ""
      two = ""
      three = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, one, three, two ->
        if i < _len(part) do
          tri = char_to_trigram(_slice(part, i, i + 1 - (i)), alphabet)
          one = (one <> _slice(tri, 0, 1 - (0)))
          two = (two <> _slice(tri, 1, 2 - (1)))
          three = (three <> _slice(tri, 2, 3 - (2)))
          i = i + 1
          while_fun_4.(while_fun_4, i, one, three, two)
        else
          {i, one, three, two}
        end
      end
      {i, one, three, two} = try do
          while_fun_4.(while_fun_4, i, one, three, two)
        catch
          {:break, {i, one, three, two}} -> {i, one, three, two}
        end

      throw {:return, ((one <> two) <> three)}
    catch
      {:return, val} -> val
    end
  end
  def encrypt_message(message, alphabet, period) do
    try do
      msg = remove_spaces(message)
      alpha = remove_spaces(alphabet)
      if _len(alpha) != 27 do
        throw {:return, ""}
      end
      encrypted_numeric = ""
      i = 0
      while_fun_5 = fn while_fun_5, encrypted_numeric, i ->
        if i < _len(msg) do
          end_ = i + period
          {end_} = if end_ > _len(msg) do
            end_ = _len(msg)
            {end_}
          else
            {end_}
          end
          part = _slice(msg, i, end_ - (i))
          encrypted_numeric = (encrypted_numeric <> encrypt_part(part, alpha))
          i = i + period
          while_fun_5.(while_fun_5, encrypted_numeric, i)
        else
          {encrypted_numeric, i}
        end
      end
      {encrypted_numeric, i} = try do
          while_fun_5.(while_fun_5, encrypted_numeric, i)
        catch
          {:break, {encrypted_numeric, i}} -> {encrypted_numeric, i}
        end

      encrypted = ""
      j = 0
      while_fun_6 = fn while_fun_6, encrypted, j ->
        if j < _len(encrypted_numeric) do
          tri = _slice(encrypted_numeric, j, j + 3 - (j))
          encrypted = (encrypted <> trigram_to_char(tri, alpha))
          j = j + 3
          while_fun_6.(while_fun_6, encrypted, j)
        else
          {encrypted, j}
        end
      end
      {encrypted, j} = try do
          while_fun_6.(while_fun_6, encrypted, j)
        catch
          {:break, {encrypted, j}} -> {encrypted, j}
        end

      throw {:return, encrypted}
    catch
      {:return, val} -> val
    end
  end
  def decrypt_part(part, alphabet) do
    try do
      converted = ""
      i = 0
      while_fun_7 = fn while_fun_7, converted, i ->
        if i < _len(part) do
          tri = char_to_trigram(_slice(part, i, i + 1 - (i)), alphabet)
          converted = (converted <> tri)
          i = i + 1
          while_fun_7.(while_fun_7, converted, i)
        else
          {converted, i}
        end
      end
      {converted, i} = try do
          while_fun_7.(while_fun_7, converted, i)
        catch
          {:break, {converted, i}} -> {converted, i}
        end

      result = []
      tmp = ""
      j = 0
      while_fun_8 = fn while_fun_8, j, result, tmp ->
        if j < _len(converted) do
          tmp = (tmp <> _slice(converted, j, j + 1 - (j)))
          {result, tmp} = if _len(tmp) == _len(part) do
            result = (result ++ [tmp])
            tmp = ""
            {result, tmp}
          else
            {result, tmp}
          end
          j = j + 1
          while_fun_8.(while_fun_8, j, result, tmp)
        else
          {j, result, tmp}
        end
      end
      {j, result, tmp} = try do
          while_fun_8.(while_fun_8, j, result, tmp)
        catch
          {:break, {j, result, tmp}} -> {j, result, tmp}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def decrypt_message(message, alphabet, period) do
    try do
      msg = remove_spaces(message)
      alpha = remove_spaces(alphabet)
      if _len(alpha) != 27 do
        throw {:return, ""}
      end
      decrypted_numeric = []
      i = 0
      while_fun_9 = fn while_fun_9, decrypted_numeric, i ->
        if i < _len(msg) do
          end_ = i + period
          {end_} = if end_ > _len(msg) do
            end_ = _len(msg)
            {end_}
          else
            {end_}
          end
          part = _slice(msg, i, end_ - (i))
          groups = decrypt_part(part, alpha)
          k = 0
          while_fun_10 = fn while_fun_10, decrypted_numeric, k ->
            if k < _len(Enum.at(groups, 0)) do
              tri = ((_slice(Enum.at(groups, 0), k, k + 1 - (k)) <> _slice(Enum.at(groups, 1), k, k + 1 - (k))) <> _slice(Enum.at(groups, 2), k, k + 1 - (k)))
              decrypted_numeric = (decrypted_numeric ++ [tri])
              k = k + 1
              while_fun_10.(while_fun_10, decrypted_numeric, k)
            else
              {decrypted_numeric, k}
            end
          end
          {decrypted_numeric, k} = try do
              while_fun_10.(while_fun_10, decrypted_numeric, k)
            catch
              {:break, {decrypted_numeric, k}} -> {decrypted_numeric, k}
            end

          i = i + period
          while_fun_9.(while_fun_9, decrypted_numeric, i)
        else
          {decrypted_numeric, i}
        end
      end
      {decrypted_numeric, i} = try do
          while_fun_9.(while_fun_9, decrypted_numeric, i)
        catch
          {:break, {decrypted_numeric, i}} -> {decrypted_numeric, i}
        end

      decrypted = ""
      j = 0
      while_fun_11 = fn while_fun_11, decrypted, j ->
        if j < _len(decrypted_numeric) do
          decrypted = (decrypted <> trigram_to_char(Enum.at(decrypted_numeric, j), alpha))
          j = j + 1
          while_fun_11.(while_fun_11, decrypted, j)
        else
          {decrypted, j}
        end
      end
      {decrypted, j} = try do
          while_fun_11.(while_fun_11, decrypted, j)
        catch
          {:break, {decrypted, j}} -> {decrypted, j}
        end

      throw {:return, decrypted}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      msg = "DEFEND THE EAST WALL OF THE CASTLE."
      alphabet = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ"
      encrypted = encrypt_message(msg, alphabet, 5)
      decrypted = decrypt_message(encrypted, alphabet, 5)
      IO.puts(("Encrypted: " <> encrypted))
      IO.puts(("Decrypted: " <> decrypted))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:triagrams, ["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"])
  def bench_main() do
    Process.put(:triagrams, ["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
