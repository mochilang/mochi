# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def to_binary(n) do
    try do
      if n == 0 do
        throw {:return, "0"}
      end
      num = n
      res = ""
      while_fun = fn while_fun, num, res ->
        if num > 0 do
          bit = rem(num, 2)
          res = (Kernel.inspect(bit) <> res)
          num = div(num, 2)
          while_fun.(while_fun, num, res)
        else
          {num, res}
        end
      end
      {num, res} = try do
          while_fun.(while_fun, num, res)
        catch
          {:break, {num, res}} -> {num, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def zfill(s, width) do
    try do
      res = s
      pad = width - _len(s)
      while_fun_2 = fn while_fun_2, pad, res ->
        if pad > 0 do
          res = ("0" <> res)
          pad = pad - 1
          while_fun_2.(while_fun_2, pad, res)
        else
          {pad, res}
        end
      end
      {pad, res} = try do
          while_fun_2.(while_fun_2, pad, res)
        catch
          {:break, {pad, res}} -> {pad, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def from_binary(s) do
    try do
      i = 0
      result = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < _len(s) do
          result = result * 2
          {result} = if _slice(s, i, i + 1 - (i)) == "1" do
            result = result + 1
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def repeat(ch, times) do
    try do
      res = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, res ->
        if i < times do
          res = (res <> ch)
          i = i + 1
          while_fun_4.(while_fun_4, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_4.(while_fun_4, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def char_index(s, c) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == c do
            throw {:return, i}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def base64_encode(data) do
    try do
      bits = ""
      i = 0
      while_fun_6 = fn while_fun_6, bits, i ->
        if i < _len(data) do
          bits = (bits <> zfill(to_binary(Enum.at(data, i)), 8))
          i = i + 1
          while_fun_6.(while_fun_6, bits, i)
        else
          {bits, i}
        end
      end
      {bits, i} = try do
          while_fun_6.(while_fun_6, bits, i)
        catch
          {:break, {bits, i}} -> {bits, i}
        end

      pad_bits = 0
      {bits, pad_bits} = if rem(_len(bits), 6) != 0 do
        pad_bits = 6 - rem(_len(bits), 6)
        bits = (bits <> repeat("0", pad_bits))
        {bits, pad_bits}
      else
        {bits, pad_bits}
      end
      j = 0
      encoded = ""
      while_fun_7 = fn while_fun_7, encoded, j ->
        if j < _len(bits) do
          chunk = _slice(bits, j, j + 6 - (j))
          idx = from_binary(chunk)
          encoded = (encoded <> _slice(Process.get(:b64_charset), idx, idx + 1 - (idx)))
          j = j + 6
          while_fun_7.(while_fun_7, encoded, j)
        else
          {encoded, j}
        end
      end
      {encoded, j} = try do
          while_fun_7.(while_fun_7, encoded, j)
        catch
          {:break, {encoded, j}} -> {encoded, j}
        end

      pad = div(pad_bits, 2)
      while_fun_8 = fn while_fun_8, encoded, pad ->
        if pad > 0 do
          encoded = (encoded <> "=")
          pad = pad - 1
          while_fun_8.(while_fun_8, encoded, pad)
        else
          {encoded, pad}
        end
      end
      {encoded, pad} = try do
          while_fun_8.(while_fun_8, encoded, pad)
        catch
          {:break, {encoded, pad}} -> {encoded, pad}
        end

      throw {:return, encoded}
    catch
      {:return, val} -> val
    end
  end
  def base64_decode(s) do
    try do
      padding = 0
      end_ = _len(s)
      while_fun_9 = fn while_fun_9, end_, padding ->
        if end_ > 0 && _slice(s, end_ - 1, end_ - (end_ - 1)) == "=" do
          padding = padding + 1
          end_ = end_ - 1
          while_fun_9.(while_fun_9, end_, padding)
        else
          {end_, padding}
        end
      end
      {end_, padding} = try do
          while_fun_9.(while_fun_9, end_, padding)
        catch
          {:break, {end_, padding}} -> {end_, padding}
        end

      bits = ""
      k = 0
      while_fun_10 = fn while_fun_10, bits, k ->
        if k < end_ do
          c = _slice(s, k, k + 1 - (k))
          idx = char_index(Process.get(:b64_charset), c)
          bits = (bits <> zfill(to_binary(idx), 6))
          k = k + 1
          while_fun_10.(while_fun_10, bits, k)
        else
          {bits, k}
        end
      end
      {bits, k} = try do
          while_fun_10.(while_fun_10, bits, k)
        catch
          {:break, {bits, k}} -> {bits, k}
        end

      {bits} = if padding > 0 do
        bits = _slice(bits, 0, _len(bits) - padding * 2 - (0))
        {bits}
      else
        {bits}
      end
      bytes = []
      m = 0
      while_fun_11 = fn while_fun_11, bytes, m ->
        if m < _len(bits) do
          byte = from_binary(_slice(bits, m, m + 8 - (m)))
          bytes = (bytes ++ [byte])
          m = m + 8
          while_fun_11.(while_fun_11, bytes, m)
        else
          {bytes, m}
        end
      end
      {bytes, m} = try do
          while_fun_11.(while_fun_11, bytes, m)
        catch
          {:break, {bytes, m}} -> {bytes, m}
        end

      throw {:return, bytes}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      data = [77, 111, 99, 104, 105]
      encoded = base64_encode(data)
      IO.puts(encoded)
      IO.puts(Jason.encode!(base64_decode(encoded)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:b64_charset, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
  def bench_main() do
    Process.put(:b64_charset, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
