# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def make_decode_map() do
    try do
      m = %{}
      {m} = Enum.reduce(Map.keys(Process.get(:encode_map)), {m}, fn k, {m} ->
        m = Map.put(m, Map.get(Process.get(:encode_map), k, ""), k)
        {m}
      end)
      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def split_spaces(s) do
    try do
      parts = []
      current = ""
      i = 0
      while_fun = fn while_fun, current, i, parts ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {current, parts} = if ch == " " do
            parts = (parts ++ [current])
            current = ""
            {current, parts}
          else
            current = (current <> ch)
            {current, parts}
          end
          i = i + 1
          while_fun.(while_fun, current, i, parts)
        else
          {current, i, parts}
        end
      end
      {current, i, parts} = try do
          while_fun.(while_fun, current, i, parts)
        catch
          {:break, {current, i, parts}} -> {current, i, parts}
        end

      parts = (parts ++ [current])
      throw {:return, parts}
    catch
      {:return, val} -> val
    end
  end
  def encode(word) do
    try do
      w = String.downcase(word)
      encoded = ""
      i = 0
      while_fun_2 = fn while_fun_2, encoded, i ->
        if i < _len(w) do
          ch = _slice(w, i, i + 1 - (i))
          {encoded} = if Map.has_key?(Process.get(:encode_map), ch) do
            encoded = (encoded <> Map.get(Process.get(:encode_map), ch, ""))
            {encoded}
          else
            raise("encode() accepts only letters of the alphabet and spaces")
            {encoded}
          end
          i = i + 1
          while_fun_2.(while_fun_2, encoded, i)
        else
          {encoded, i}
        end
      end
      {encoded, i} = try do
          while_fun_2.(while_fun_2, encoded, i)
        catch
          {:break, {encoded, i}} -> {encoded, i}
        end

      throw {:return, encoded}
    catch
      {:return, val} -> val
    end
  end
  def decode(coded) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(coded) do
          ch = _slice(coded, i, i + 1 - (i))
          if ch != "A" && ch != "B" && ch != " " do
            raise("decode() accepts only 'A', 'B' and spaces")
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      words = split_spaces(coded)
      decoded = ""
      w = 0
      while_fun_4 = fn while_fun_4, decoded, w ->
        if w < _len(words) do
          word = Enum.at(words, w)
          j = 0
          while_fun_5 = fn while_fun_5, decoded, j ->
            if j < _len(word) do
              segment = _slice(word, j, j + 5 - (j))
              decoded = (decoded <> Map.get(Process.get(:decode_map), segment, ""))
              j = j + 5
              while_fun_5.(while_fun_5, decoded, j)
            else
              {decoded, j}
            end
          end
          {decoded, j} = try do
              while_fun_5.(while_fun_5, decoded, j)
            catch
              {:break, {decoded, j}} -> {decoded, j}
            end

          {decoded} = if w < _len(words) - 1 do
            decoded = (decoded <> " ")
            {decoded}
          else
            {decoded}
          end
          w = w + 1
          while_fun_4.(while_fun_4, decoded, w)
        else
          {decoded, w}
        end
      end
      {decoded, w} = try do
          while_fun_4.(while_fun_4, decoded, w)
        catch
          {:break, {decoded, w}} -> {decoded, w}
        end

      throw {:return, decoded}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:encode_map, %{"a" => "AAAAA", "b" => "AAAAB", "c" => "AAABA", "d" => "AAABB", "e" => "AABAA", "f" => "AABAB", "g" => "AABBA", "h" => "AABBB", "i" => "ABAAA", "j" => "BBBAA", "k" => "ABAAB", "l" => "ABABA", "m" => "ABABB", "n" => "ABBAA", "o" => "ABBAB", "p" => "ABBBA", "q" => "ABBBB", "r" => "BAAAA", "s" => "BAAAB", "t" => "BAABA", "u" => "BAABB", "v" => "BBBAB", "w" => "BABAA", "x" => "BABAB", "y" => "BABBA", "z" => "BABBB", " " => " "})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:decode_map, make_decode_map())
    IO.puts(Kernel.inspect(encode("hello")))
    IO.puts(Kernel.inspect(encode("hello world")))
    IO.puts(Kernel.inspect(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB")))
    IO.puts(Kernel.inspect(decode("AABBBAABAAABABAABABAABBAB")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
