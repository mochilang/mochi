# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def indexOfChar(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      digits = "0123456789"
      idx = indexOfChar(upper, ch)
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      idx = indexOfChar(lower, ch)
      if idx >= 0 do
        throw {:return, 97 + idx}
      end
      idx = indexOfChar(digits, ch)
      if idx >= 0 do
        throw {:return, 48 + idx}
      end
      if ch == " " do
        throw {:return, 32}
      end
      if ch == "!" do
        throw {:return, 33}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def chr(code) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      digits = "0123456789"
      if code == 32 do
        throw {:return, " "}
      end
      if code == 33 do
        throw {:return, "!"}
      end
      idx = code - 65
      if idx >= 0 && idx < _len(upper) do
        throw {:return, Enum.at(upper, idx)}
      end
      idx = code - 97
      if idx >= 0 && idx < _len(lower) do
        throw {:return, Enum.at(lower, idx)}
      end
      idx = code - 48
      if idx >= 0 && idx < _len(digits) do
        throw {:return, String.at(digits, idx)}
      end
      throw {:return, ""}
    catch
      {:return, val} -> val
    end
  end
  def repeat(s, n) do
    try do
      out = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, out ->
        if i < n do
          out = (out <> s)
          i = i + 1
          while_fun_2.(while_fun_2, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_2.(while_fun_2, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def to_binary(n, bits) do
    try do
      v = n
      out = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, out, v ->
        if i < bits do
          out = (Kernel.to_string(rem(v, 2)) <> out)
          v = div(v, 2)
          i = i + 1
          while_fun_3.(while_fun_3, i, out, v)
        else
          {i, out, v}
        end
      end
      {i, out, v} = try do
          while_fun_3.(while_fun_3, i, out, v)
        catch
          {:break, {i, out, v}} -> {i, out, v}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def binary_to_int(bits) do
    try do
      n = 0
      i = 0
      while_fun_4 = fn while_fun_4, i, n ->
        if i < _len(bits) do
          n = n * 2
          {n} = if String.at(bits, i) == "1" do
            n = n + 1
            {n}
          else
            {n}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_4.(while_fun_4, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def base32_encode(data) do
    try do
      binary_data = ""
      i = 0
      while_fun_5 = fn while_fun_5, binary_data, i ->
        if i < _len(data) do
          binary_data = (binary_data <> to_binary(ord(String.at(data, i)), 8))
          i = i + 1
          while_fun_5.(while_fun_5, binary_data, i)
        else
          {binary_data, i}
        end
      end
      {binary_data, i} = try do
          while_fun_5.(while_fun_5, binary_data, i)
        catch
          {:break, {binary_data, i}} -> {binary_data, i}
        end

      remainder = rem(_len(binary_data), 5)
      {binary_data} = if remainder != 0 do
        binary_data = (binary_data <> repeat("0", 5 - remainder))
        {binary_data}
      else
        {binary_data}
      end
      b32_result = ""
      j = 0
      while_fun_6 = fn while_fun_6, b32_result, j ->
        if j < _len(binary_data) do
          chunk = _slice(binary_data, j, (j + 5) - j)
          index = binary_to_int(chunk)
          b32_result = (b32_result <> String.at(Process.get(:b32_charset), index))
          j = j + 5
          while_fun_6.(while_fun_6, b32_result, j)
        else
          {b32_result, j}
        end
      end
      {b32_result, j} = try do
          while_fun_6.(while_fun_6, b32_result, j)
        catch
          {:break, {b32_result, j}} -> {b32_result, j}
        end

      rem_ = rem(_len(b32_result), 8)
      {b32_result} = if rem_ != 0 do
        b32_result = (b32_result <> repeat("=", 8 - rem_))
        {b32_result}
      else
        {b32_result}
      end
      throw {:return, b32_result}
    catch
      {:return, val} -> val
    end
  end
  def base32_decode(data) do
    try do
      clean = ""
      i = 0
      while_fun_7 = fn while_fun_7, clean, i ->
        if i < _len(data) do
          ch = String.at(data, i)
          {clean} = if ch != "=" do
            clean = (clean <> ch)
            {clean}
          else
            {clean}
          end
          i = i + 1
          while_fun_7.(while_fun_7, clean, i)
        else
          {clean, i}
        end
      end
      {clean, i} = try do
          while_fun_7.(while_fun_7, clean, i)
        catch
          {:break, {clean, i}} -> {clean, i}
        end

      binary_chunks = ""
      i = 0
      while_fun_8 = fn while_fun_8, binary_chunks, i ->
        if i < _len(clean) do
          idx = indexOfChar(Process.get(:b32_charset), String.at(clean, i))
          binary_chunks = (binary_chunks <> to_binary(idx, 5))
          i = i + 1
          while_fun_8.(while_fun_8, binary_chunks, i)
        else
          {binary_chunks, i}
        end
      end
      {binary_chunks, i} = try do
          while_fun_8.(while_fun_8, binary_chunks, i)
        catch
          {:break, {binary_chunks, i}} -> {binary_chunks, i}
        end

      result = ""
      j = 0
      while_fun_9 = fn while_fun_9, j, result ->
        if j + 8 <= _len(binary_chunks) do
          byte_bits = _slice(binary_chunks, j, (j + 8) - j)
          code = binary_to_int(byte_bits)
          result = (result <> chr(code))
          j = j + 8
          while_fun_9.(while_fun_9, j, result)
        else
          {j, result}
        end
      end
      {j, result} = try do
          while_fun_9.(while_fun_9, j, result)
        catch
          {:break, {j, result}} -> {j, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:b32_charset, "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(base32_encode("Hello World!")))
    IO.puts(Kernel.inspect(base32_encode("123456")))
    IO.puts(Kernel.inspect(base32_encode("some long complex string")))
    IO.puts(Kernel.inspect(base32_decode("JBSWY3DPEBLW64TMMQQQ====")))
    IO.puts(Kernel.inspect(base32_decode("GEZDGNBVGY======")))
    IO.puts(Kernel.inspect(base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
