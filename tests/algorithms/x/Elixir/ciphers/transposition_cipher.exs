# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def join_strings(xs) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          res = (res <> Enum.at(xs, i))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def encrypt_message(key, message) do
    try do
      result = ""
      col = 0
      while_fun_2 = fn while_fun_2, col, result ->
        if col < key do
          pointer = col
          while_fun_3 = fn while_fun_3, pointer, result ->
            if pointer < _len(message) do
              result = (result <> _slice(message, pointer, pointer + 1 - (pointer)))
              pointer = pointer + key
              while_fun_3.(while_fun_3, pointer, result)
            else
              {pointer, result}
            end
          end
          {pointer, result} = try do
              while_fun_3.(while_fun_3, pointer, result)
            catch
              {:break, {pointer, result}} -> {pointer, result}
            end

          col = col + 1
          while_fun_2.(while_fun_2, col, result)
        else
          {col, result}
        end
      end
      {col, result} = try do
          while_fun_2.(while_fun_2, col, result)
        catch
          {:break, {col, result}} -> {col, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def decrypt_message(key, message) do
    try do
      num_cols = div((_len(message) + key - 1), key)
      num_rows = key
      num_shaded_boxes = (num_cols * num_rows) - _len(message)
      plain_text = []
      i = 0
      while_fun_4 = fn while_fun_4, i, plain_text ->
        if i < num_cols do
          plain_text = (plain_text ++ [""])
          i = i + 1
          while_fun_4.(while_fun_4, i, plain_text)
        else
          {i, plain_text}
        end
      end
      {i, plain_text} = try do
          while_fun_4.(while_fun_4, i, plain_text)
        catch
          {:break, {i, plain_text}} -> {i, plain_text}
        end

      col = 0
      row = 0
      index = 0
      while_fun_5 = fn while_fun_5, col, index, plain_text, row ->
        if index < _len(message) do
          plain_text = List.replace_at(plain_text, col, (Enum.at(plain_text, col) <> _slice(message, index, index + 1 - (index))))
          col = col + 1
          {col, row} = if col == num_cols || (col == num_cols - 1 && row >= num_rows - num_shaded_boxes) do
            col = 0
            row = row + 1
            {col, row}
          else
            {col, row}
          end
          index = index + 1
          while_fun_5.(while_fun_5, col, index, plain_text, row)
        else
          {col, index, plain_text, row}
        end
      end
      {col, index, plain_text, row} = try do
          while_fun_5.(while_fun_5, col, index, plain_text, row)
        catch
          {:break, {col, index, plain_text, row}} -> {col, index, plain_text, row}
        end

      throw {:return, join_strings(plain_text)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("Enter message: ")
      message = case IO.gets("") do
  nil -> ""
  :eof -> ""
  line -> String.trim(line)
end
      max_key = _len(message) - 1
      IO.puts((("Enter key [2-" <> Kernel.to_string(max_key)) <> "]: "))
      key = String.to_integer(case IO.gets("") do
  nil -> ""
  :eof -> ""
  line -> String.trim(line)
end)
      IO.puts("Encryption/Decryption [e/d]: ")
      mode = case IO.gets("") do
  nil -> ""
  :eof -> ""
  line -> String.trim(line)
end
      text = ""
      first = _slice(mode, 0, 1 - (0))
      {text} = if first == "e" || first == "E" do
        text = encrypt_message(key, message)
        {text}
      else
        {text} = if first == "d" || first == "D" do
          text = decrypt_message(key, message)
          {text}
        else
          {text}
        end
        {text}
      end
      IO.puts((("Output:\n" <> text) <> "|"))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
