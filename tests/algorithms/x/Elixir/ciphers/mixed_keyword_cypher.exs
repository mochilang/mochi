# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def to_upper(s) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(s) do
          ch = String.at(s, i)
          j = 0
          found = false
          while_fun_2 = fn while_fun_2, found, j, res ->
            if j < 26 do
              {found, res} = if ch == String.at(Process.get(:lower), j) do
                res = (res <> String.at(Process.get(:upper), j))
                found = true
                throw {:break, {found, j, res}}
                {found, res}
              else
                {found, res}
              end
              j = j + 1
              while_fun_2.(while_fun_2, found, j, res)
            else
              {found, j, res}
            end
          end
          {found, j, res} = try do
              while_fun_2.(while_fun_2, found, j, res)
            catch
              {:break, {found, j, res}} -> {found, j, res}
            end

          {res} = if found == false do
            res = (res <> ch)
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def contains(xs, x) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == x do
            throw {:return, true}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def contains_char(s, ch) do
    try do
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, true}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def get_value(keys, values, key) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(keys) do
          if Enum.at(keys, i) == key do
            throw {:return, Enum.at(values, i)}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, nil}
    catch
      {:return, val} -> val
    end
  end
  def print_mapping(keys, values) do
    try do
      s = "{"
      i = 0
      while_fun_6 = fn while_fun_6, i, s ->
        if i < _len(keys) do
          s = (((((s <> "'") <> Enum.at(keys, i)) <> "': '") <> Enum.at(values, i)) <> "'")
          {s} = if i + 1 < _len(keys) do
            s = (s <> ", ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_6.(while_fun_6, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      s = (s <> "}")
      IO.puts(s)
    catch
      {:return, val} -> val
    end
  end
  def mixed_keyword(keyword, plaintext, verbose) do
    try do
      alphabet = Process.get(:upper)
      keyword_u = to_upper(keyword)
      plaintext_u = to_upper(plaintext)
      unique = []
      i = 0
      while_fun_7 = fn while_fun_7, i, unique ->
        if i < _len(keyword_u) do
          ch = String.at(keyword_u, i)
          {unique} = if contains_char(alphabet, ch) && contains(unique, ch) == false do
            unique = (unique ++ [ch])
            {unique}
          else
            {unique}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i, unique)
        else
          {i, unique}
        end
      end
      {i, unique} = try do
          while_fun_7.(while_fun_7, i, unique)
        catch
          {:break, {i, unique}} -> {i, unique}
        end

      num_unique = _len(unique)
      shifted = []
      i = 0
      while_fun_8 = fn while_fun_8, i, shifted ->
        if i < _len(unique) do
          shifted = (shifted ++ [Enum.at(unique, i)])
          i = i + 1
          while_fun_8.(while_fun_8, i, shifted)
        else
          {i, shifted}
        end
      end
      {i, shifted} = try do
          while_fun_8.(while_fun_8, i, shifted)
        catch
          {:break, {i, shifted}} -> {i, shifted}
        end

      i = 0
      while_fun_9 = fn while_fun_9, i, shifted ->
        if i < _len(alphabet) do
          ch = String.at(alphabet, i)
          {shifted} = if contains(unique, ch) == false do
            shifted = (shifted ++ [ch])
            {shifted}
          else
            {shifted}
          end
          i = i + 1
          while_fun_9.(while_fun_9, i, shifted)
        else
          {i, shifted}
        end
      end
      {i, shifted} = try do
          while_fun_9.(while_fun_9, i, shifted)
        catch
          {:break, {i, shifted}} -> {i, shifted}
        end

      modified = []
      k = 0
      while_fun_10 = fn while_fun_10, k, modified ->
        if k < _len(shifted) do
          row = []
          r = 0
          while_fun_11 = fn while_fun_11, r, row ->
            if r < num_unique && k + r < _len(shifted) do
              row = (row ++ [Enum.at(shifted, k + r)])
              r = r + 1
              while_fun_11.(while_fun_11, r, row)
            else
              {r, row}
            end
          end
          {r, row} = try do
              while_fun_11.(while_fun_11, r, row)
            catch
              {:break, {r, row}} -> {r, row}
            end

          modified = (modified ++ [row])
          k = k + num_unique
          while_fun_10.(while_fun_10, k, modified)
        else
          {k, modified}
        end
      end
      {k, modified} = try do
          while_fun_10.(while_fun_10, k, modified)
        catch
          {:break, {k, modified}} -> {k, modified}
        end

      keys = []
      values = []
      column = 0
      letter_index = 0
      while_fun_12 = fn while_fun_12, column, keys, letter_index, values ->
        if column < num_unique do
          row_idx = 0
          while_fun_13 = fn while_fun_13, keys, letter_index, row_idx, values ->
            if row_idx < _len(modified) do
              row = Enum.at(modified, row_idx)
              if _len(row) <= column do
                throw {:break, {keys, letter_index, row_idx, values}}
              end
              keys = (keys ++ [String.at(alphabet, letter_index)])
              values = (values ++ [Enum.at(row, column)])
              letter_index = letter_index + 1
              row_idx = row_idx + 1
              while_fun_13.(while_fun_13, keys, letter_index, row_idx, values)
            else
              {keys, letter_index, row_idx, values}
            end
          end
          {keys, letter_index, row_idx, values} = try do
              while_fun_13.(while_fun_13, keys, letter_index, row_idx, values)
            catch
              {:break, {keys, letter_index, row_idx, values}} -> {keys, letter_index, row_idx, values}
            end

          column = column + 1
          while_fun_12.(while_fun_12, column, keys, letter_index, values)
        else
          {column, keys, letter_index, values}
        end
      end
      {column, keys, letter_index, values} = try do
          while_fun_12.(while_fun_12, column, keys, letter_index, values)
        catch
          {:break, {column, keys, letter_index, values}} -> {column, keys, letter_index, values}
        end

      if verbose do
        print_mapping(keys, values)
      end
      result = ""
      i = 0
      while_fun_14 = fn while_fun_14, i, result ->
        if i < _len(plaintext_u) do
          ch = String.at(plaintext_u, i)
          mapped = get_value(keys, values, ch)
          result = (if mapped == nil, do: (result <> ch), else: (result <> mapped))
          i = i + 1
          while_fun_14.(while_fun_14, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_14.(while_fun_14, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:upper, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:lower, "abcdefghijklmnopqrstuvwxyz")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(mixed_keyword("college", "UNIVERSITY", true)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
