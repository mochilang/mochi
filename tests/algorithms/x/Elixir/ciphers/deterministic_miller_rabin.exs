# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def mod_pow(base, exp, mod) do
    try do
      result = 1
      b = rem(base, mod)
      e = exp
      while_fun = fn while_fun, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), mod)
            {result}
          else
            {result}
          end
          b = rem((b * b), mod)
          e = div(e, 2)
          while_fun.(while_fun, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun.(while_fun, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def miller_rabin(n, allow_probable) do
    try do
      if n == 2 do
        throw {:return, true}
      end
      if n < 2 || rem(n, 2) == 0 do
        throw {:return, false}
      end
      if n > 5 do
        last = rem(n, 10)
        if !(last == 1 || last == 3 || last == 7 || last == 9) do
          throw {:return, false}
        end
      end
      limit = 3825123056546413051
      if n > limit && (!allow_probable) do
        raise("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.")
      end
      bounds = [2047, 1373653, 25326001, 3215031751, 2152302898747, 3474749660383, 341550071728321, limit]
      primes = [2, 3, 5, 7, 11, 13, 17, 19]
      i = 0
      plist_len = _len(primes)
      while_fun_2 = fn while_fun_2, i, plist_len ->
        if i < _len(bounds) do
          {i, plist_len} = if n < Enum.at(bounds, i) do
            plist_len = i + 1
            i = _len(bounds)
            {i, plist_len}
          else
            i = i + 1
            {i, plist_len}
          end
          while_fun_2.(while_fun_2, i, plist_len)
        else
          {i, plist_len}
        end
      end
      {i, plist_len} = try do
          while_fun_2.(while_fun_2, i, plist_len)
        catch
          {:break, {i, plist_len}} -> {i, plist_len}
        end

      d = n - 1
      s = 0
      while_fun_3 = fn while_fun_3, d, s ->
        if rem(d, 2) == 0 do
          d = div(d, 2)
          s = s + 1
          while_fun_3.(while_fun_3, d, s)
        else
          {d, s}
        end
      end
      {d, s} = try do
          while_fun_3.(while_fun_3, d, s)
        catch
          {:break, {d, s}} -> {d, s}
        end

      j = 0
      while_fun_4 = fn while_fun_4, j ->
        if j < plist_len do
          prime = Enum.at(primes, j)
          x = mod_pow(prime, d, n)
          pr = false
          {pr, x} = if x == 1 || x == n - 1 do
            pr = true
            {pr, x}
          else
            r = 1
            while_fun_5 = fn while_fun_5, pr, r, x ->
              if r < s && (!pr) do
                x = rem((x * x), n)
                {pr} = if x == n - 1 do
                  pr = true
                  {pr}
                else
                  {pr}
                end
                r = r + 1
                while_fun_5.(while_fun_5, pr, r, x)
              else
                {pr, r, x}
              end
            end
            {pr, r, x} = try do
                while_fun_5.(while_fun_5, pr, r, x)
              catch
                {:break, {pr, r, x}} -> {pr, r, x}
              end

            {pr, x}
          end
          if !pr do
            throw {:return, false}
          end
          j = j + 1
          while_fun_4.(while_fun_4, j)
        else
          j
        end
      end
      j = try do
          while_fun_4.(while_fun_4, j)
        catch
          {:break, {j}} -> j
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(miller_rabin(561, false)))
    IO.puts(Kernel.inspect(miller_rabin(563, false)))
    IO.puts(Kernel.inspect(miller_rabin(838201, false)))
    IO.puts(Kernel.inspect(miller_rabin(838207, false)))
    IO.puts(Kernel.inspect(miller_rabin(17316001, false)))
    IO.puts(Kernel.inspect(miller_rabin(17316017, false)))
    IO.puts(Kernel.inspect(miller_rabin(3078386641, false)))
    IO.puts(Kernel.inspect(miller_rabin(3078386653, false)))
    IO.puts(Kernel.inspect(miller_rabin(1713045574801, false)))
    IO.puts(Kernel.inspect(miller_rabin(1713045574819, false)))
    IO.puts(Kernel.inspect(miller_rabin(2779799728307, false)))
    IO.puts(Kernel.inspect(miller_rabin(2779799728327, false)))
    IO.puts(Kernel.inspect(miller_rabin(113850023909441, false)))
    IO.puts(Kernel.inspect(miller_rabin(113850023909527, false)))
    IO.puts(Kernel.inspect(miller_rabin(1275041018848804351, false)))
    IO.puts(Kernel.inspect(miller_rabin(1275041018848804391, false)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
