# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def contains(xs, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == x do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def index_of(xs, x) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == x do
            throw {:return, i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def prepare_input(dirty) do
    try do
      letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      upper_dirty = String.upcase(dirty)
      filtered = ""
      i = 0
      while_fun_3 = fn while_fun_3, filtered, i ->
        if i < _len(upper_dirty) do
          c = _slice(upper_dirty, i, i + 1 - (i))
          {filtered} = if c in letters do
            filtered = (filtered <> c)
            {filtered}
          else
            {filtered}
          end
          i = i + 1
          while_fun_3.(while_fun_3, filtered, i)
        else
          {filtered, i}
        end
      end
      {filtered, i} = try do
          while_fun_3.(while_fun_3, filtered, i)
        catch
          {:break, {filtered, i}} -> {filtered, i}
        end

      if _len(filtered) < 2 do
        throw {:return, filtered}
      end
      clean = ""
      i = 0
      while_fun_4 = fn while_fun_4, clean, i ->
        if i < _len(filtered) - 1 do
          c1 = _slice(filtered, i, i + 1 - (i))
          c2 = _slice(filtered, i + 1, i + 2 - (i + 1))
          clean = (clean <> c1)
          {clean} = if c1 == c2 do
            clean = (clean <> "X")
            {clean}
          else
            {clean}
          end
          i = i + 1
          while_fun_4.(while_fun_4, clean, i)
        else
          {clean, i}
        end
      end
      {clean, i} = try do
          while_fun_4.(while_fun_4, clean, i)
        catch
          {:break, {clean, i}} -> {clean, i}
        end

      clean = (clean <> _slice(filtered, _len(filtered) - 1, _len(filtered) - (_len(filtered) - 1)))
      {clean} = if rem(_len(clean), 2) == 1 do
        clean = (clean <> "X")
        {clean}
      else
        {clean}
      end
      throw {:return, clean}
    catch
      {:return, val} -> val
    end
  end
  def generate_table(key) do
    try do
      alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
      table = []
      upper_key = String.upcase(key)
      i = 0
      while_fun_5 = fn while_fun_5, i, table ->
        if i < _len(upper_key) do
          c = _slice(upper_key, i, i + 1 - (i))
          {table} = if c in alphabet do
            {table} = if !(contains(table, c)) do
              table = (table ++ [c])
              {table}
            else
              {table}
            end
            {table}
          else
            {table}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, table)
        else
          {i, table}
        end
      end
      {i, table} = try do
          while_fun_5.(while_fun_5, i, table)
        catch
          {:break, {i, table}} -> {i, table}
        end

      i = 0
      while_fun_6 = fn while_fun_6, i, table ->
        if i < _len(alphabet) do
          c = _slice(alphabet, i, i + 1 - (i))
          {table} = if !(contains(table, c)) do
            table = (table ++ [c])
            {table}
          else
            {table}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i, table)
        else
          {i, table}
        end
      end
      {i, table} = try do
          while_fun_6.(while_fun_6, i, table)
        catch
          {:break, {i, table}} -> {i, table}
        end

      throw {:return, table}
    catch
      {:return, val} -> val
    end
  end
  def encode(plaintext, key) do
    try do
      table = generate_table(key)
      text = prepare_input(plaintext)
      cipher = ""
      i = 0
      while_fun_7 = fn while_fun_7, cipher, i ->
        if i < _len(text) do
          c1 = _slice(text, i, i + 1 - (i))
          c2 = _slice(text, i + 1, i + 2 - (i + 1))
          idx1 = index_of(table, c1)
          idx2 = index_of(table, c2)
          row1 = div(idx1, 5)
          col1 = rem(idx1, 5)
          row2 = div(idx2, 5)
          col2 = rem(idx2, 5)
          {cipher} = if row1 == row2 do
            cipher = (cipher <> Enum.at(table, row1 * 5 + rem((col1 + 1), 5)))
            cipher = (cipher <> Enum.at(table, row2 * 5 + rem((col2 + 1), 5)))
            {cipher}
          else
            {cipher} = if col1 == col2 do
              cipher = (cipher <> Enum.at(table, (rem((row1 + 1), 5)) * 5 + col1))
              cipher = (cipher <> Enum.at(table, (rem((row2 + 1), 5)) * 5 + col2))
              {cipher}
            else
              cipher = (cipher <> Enum.at(table, row1 * 5 + col2))
              cipher = (cipher <> Enum.at(table, row2 * 5 + col1))
              {cipher}
            end
            {cipher}
          end
          i = i + 2
          while_fun_7.(while_fun_7, cipher, i)
        else
          {cipher, i}
        end
      end
      {cipher, i} = try do
          while_fun_7.(while_fun_7, cipher, i)
        catch
          {:break, {cipher, i}} -> {cipher, i}
        end

      throw {:return, cipher}
    catch
      {:return, val} -> val
    end
  end
  def decode(cipher, key) do
    try do
      table = generate_table(key)
      plain = ""
      i = 0
      while_fun_8 = fn while_fun_8, i, plain ->
        if i < _len(cipher) do
          c1 = _slice(cipher, i, i + 1 - (i))
          c2 = _slice(cipher, i + 1, i + 2 - (i + 1))
          idx1 = index_of(table, c1)
          idx2 = index_of(table, c2)
          row1 = div(idx1, 5)
          col1 = rem(idx1, 5)
          row2 = div(idx2, 5)
          col2 = rem(idx2, 5)
          {plain} = if row1 == row2 do
            plain = (plain <> Enum.at(table, row1 * 5 + rem((col1 + 4), 5)))
            plain = (plain <> Enum.at(table, row2 * 5 + rem((col2 + 4), 5)))
            {plain}
          else
            {plain} = if col1 == col2 do
              plain = (plain <> Enum.at(table, (rem((row1 + 4), 5)) * 5 + col1))
              plain = (plain <> Enum.at(table, (rem((row2 + 4), 5)) * 5 + col2))
              {plain}
            else
              plain = (plain <> Enum.at(table, row1 * 5 + col2))
              plain = (plain <> Enum.at(table, row2 * 5 + col1))
              {plain}
            end
            {plain}
          end
          i = i + 2
          while_fun_8.(while_fun_8, i, plain)
        else
          {i, plain}
        end
      end
      {i, plain} = try do
          while_fun_8.(while_fun_8, i, plain)
        catch
          {:break, {i, plain}} -> {i, plain}
        end

      throw {:return, plain}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("Encoded: #{Kernel.inspect(encode("BYE AND THANKS", "GREETING"))}")
      IO.puts("Decoded: #{Kernel.inspect(decode("CXRBANRLBALQ", "GREETING"))}")
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
