# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def find_index(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun)
        else
          nil
        end
      end
      try do
        while_fun.(while_fun)
      catch
        :break -> nil
      end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def to_upper_char(ch) do
    try do
      idx = find_index(Process.get(:letters_lower), ch)
      if idx >= 0 do
        throw {:return, String.at(Process.get(:letters), idx)}
      end
      throw {:return, ch}
    catch
      {:return, val} -> val
    end
  end
  def to_lower_char(ch) do
    try do
      idx = find_index(Process.get(:letters), ch)
      if idx >= 0 do
        throw {:return, String.at(Process.get(:letters_lower), idx)}
      end
      throw {:return, ch}
    catch
      {:return, val} -> val
    end
  end
  def is_upper(ch) do
    try do
      throw {:return, find_index(Process.get(:letters), ch) >= 0}
    catch
      {:return, val} -> val
    end
  end
  def to_upper_string(s) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, res ->
        if i < _len(s) do
          res = (res <> to_upper_char(String.at(s, i)))
          i = i + 1
          while_fun_2.(while_fun_2, res)
        else
          res
        end
      end
      res = try do
          while_fun_2.(while_fun_2, res)
        catch
          {:break, {res}} -> res
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:letters, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:letters_lower, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:key, "HDarji")
  Process.put(:message, "This is Harshil Darji from Dharmaj.")
  Process.put(:encrypted, "")
  Process.put(:key_index, 0)
  Process.put(:i, 0)
  Process.put(:decrypted, "")
  def main() do
    Process.put(:key_up, to_upper_string(Process.get(:key)))
    while_fun_3 = fn while_fun_3 ->
      if Process.get(:i) < _len(Process.get(:message)) do
        symbol = String.at(Process.get(:message), Process.get(:i))
        upper_symbol = to_upper_char(symbol)
        num = find_index(Process.get(:letters), upper_symbol)
        {num} = if num >= 0 do
          num = num + find_index(Process.get(:letters), String.at(Process.get(:key_up), Process.get(:key_index)))
          num = rem(num, _len(Process.get(:letters)))
          Process.put(:encrypted, (if is_upper(symbol), do: (Process.get(:encrypted) <> String.at(Process.get(:letters), num)), else: (Process.get(:encrypted) <> to_lower_char(String.at(Process.get(:letters), num)))))
          Process.put(:key_index, Process.get(:key_index) + 1)
          if Process.get(:key_index) == _len(Process.get(:key_up)) do
            Process.put(:key_index, 0)
          end
          {num}
        else
          Process.put(:encrypted, (Process.get(:encrypted) <> symbol))
          {num}
        end
        Process.put(:i, Process.get(:i) + 1)
        while_fun_3.(while_fun_3)
      else
        nil
      end
    end
    try do
      while_fun_3.(while_fun_3)
    catch
      :break -> nil
    end

    IO.puts(Process.get(:encrypted))
    Process.put(:key_index, 0)
    Process.put(:i, 0)
    while_fun_4 = fn while_fun_4 ->
      if Process.get(:i) < _len(Process.get(:encrypted)) do
        symbol = String.at(Process.get(:encrypted), Process.get(:i))
        upper_symbol = to_upper_char(symbol)
        num = find_index(Process.get(:letters), upper_symbol)
        {num} = if num >= 0 do
          num = num - find_index(Process.get(:letters), String.at(Process.get(:key_up), Process.get(:key_index)))
          num = rem(num, _len(Process.get(:letters)))
          Process.put(:decrypted, (if is_upper(symbol), do: (Process.get(:decrypted) <> String.at(Process.get(:letters), num)), else: (Process.get(:decrypted) <> to_lower_char(String.at(Process.get(:letters), num)))))
          Process.put(:key_index, Process.get(:key_index) + 1)
          if Process.get(:key_index) == _len(Process.get(:key_up)) do
            Process.put(:key_index, 0)
          end
          {num}
        else
          Process.put(:decrypted, (Process.get(:decrypted) <> symbol))
          {num}
        end
        Process.put(:i, Process.get(:i) + 1)
        while_fun_4.(while_fun_4)
      else
        nil
      end
    end
    try do
      while_fun_4.(while_fun_4)
    catch
      :break -> nil
    end

    IO.puts(Process.get(:decrypted))
  end
end
Main.main()
