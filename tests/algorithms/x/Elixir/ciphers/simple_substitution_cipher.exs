# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def rand(n) do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1664525 + 1013904223), 2147483647))
      throw {:return, rem(Process.get(:seed), n)}
    catch
      {:return, val} -> val
    end
  end
  def get_random_key() do
    try do
      chars = nil
      i = 0
      while_fun = fn while_fun, chars, i ->
        if i < _len(Process.get(:letters)) do
          chars = (chars ++ [String.at(Process.get(:letters), i)])
          i = i + 1
          while_fun.(while_fun, chars, i)
        else
          {chars, i}
        end
      end
      {chars, i} = try do
          while_fun.(while_fun, chars, i)
        catch
          {:break, {chars, i}} -> {chars, i}
        end

      j = _len(chars) - 1
      while_fun_2 = fn while_fun_2, chars, j ->
        if j > 0 do
          k = rand(j + 1)
          tmp = Enum.at(chars, j)
          chars = List.replace_at(chars, j, Enum.at(chars, k))
          chars = List.replace_at(chars, k, tmp)
          j = j - 1
          while_fun_2.(while_fun_2, chars, j)
        else
          {chars, j}
        end
      end
      {chars, j} = try do
          while_fun_2.(while_fun_2, chars, j)
        catch
          {:break, {chars, j}} -> {chars, j}
        end

      res = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(chars) do
          res = (res <> Enum.at(chars, i))
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def check_valid_key(key) do
    try do
      if _len(key) != _len(Process.get(:letters)) do
        throw {:return, false}
      end
      used = %{}
      i = 0
      while_fun_4 = fn while_fun_4, i, used ->
        if i < _len(key) do
          ch = String.at(key, i)
          if used[ch] do
            throw {:return, false}
          end
          used = Map.put(used, ch, true)
          i = i + 1
          while_fun_4.(while_fun_4, i, used)
        else
          {i, used}
        end
      end
      {i, used} = try do
          while_fun_4.(while_fun_4, i, used)
        catch
          {:break, {i, used}} -> {i, used}
        end

      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(Process.get(:letters)) do
          ch = String.at(Process.get(:letters), i)
          if !used[ch] do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def index_in(s, ch) do
    try do
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def char_to_upper(c) do
    try do
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(Process.get(:lowercase)) do
          if c == String.at(Process.get(:lowercase), i) do
            throw {:return, String.at(Process.get(:letters), i)}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def char_to_lower(c) do
    try do
      i = 0
      while_fun_8 = fn while_fun_8, i ->
        if i < _len(Process.get(:letters)) do
          if c == String.at(Process.get(:letters), i) do
            throw {:return, String.at(Process.get(:lowercase), i)}
          end
          i = i + 1
          while_fun_8.(while_fun_8, i)
        else
          i
        end
      end
      i = try do
          while_fun_8.(while_fun_8, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def is_upper(c) do
    try do
      i = 0
      while_fun_9 = fn while_fun_9, i ->
        if i < _len(Process.get(:letters)) do
          if c == String.at(Process.get(:letters), i) do
            throw {:return, true}
          end
          i = i + 1
          while_fun_9.(while_fun_9, i)
        else
          i
        end
      end
      i = try do
          while_fun_9.(while_fun_9, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def translate_message(key, message, mode) do
    try do
      chars_a = Process.get(:letters)
      chars_b = key
      {chars_a, chars_b} = if mode == "decrypt" do
        tmp = chars_a
        chars_a = chars_b
        chars_b = tmp
        {chars_a, chars_b}
      else
        {chars_a, chars_b}
      end
      translated = ""
      i = 0
      while_fun_10 = fn while_fun_10, i, translated ->
        if i < _len(message) do
          symbol = String.at(message, i)
          upper_symbol = char_to_upper(symbol)
          idx = index_in(chars_a, upper_symbol)
          {translated} = if idx >= 0 do
            mapped = String.at(chars_b, idx)
            translated = (if is_upper(symbol), do: (translated <> mapped), else: (translated <> char_to_lower(mapped)))
            {translated}
          else
            translated = (translated <> symbol)
            {translated}
          end
          i = i + 1
          while_fun_10.(while_fun_10, i, translated)
        else
          {i, translated}
        end
      end
      {i, translated} = try do
          while_fun_10.(while_fun_10, i, translated)
        catch
          {:break, {i, translated}} -> {i, translated}
        end

      throw {:return, translated}
    catch
      {:return, val} -> val
    end
  end
  def encrypt_message(key, message) do
    try do
      res = translate_message(key, message, "encrypt")
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def decrypt_message(key, message) do
    try do
      res = translate_message(key, message, "decrypt")
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:letters, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:lowercase, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:seed, 1)
  Process.put(:key, "LFWOAYUISVKMNXPBDCRJTQEGHZ")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(encrypt_message(Process.get(:key), "Harshil Darji")))
    IO.puts(Kernel.inspect(decrypt_message(Process.get(:key), "Ilcrism Olcvs")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
