# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def letter_to_numbers(letter) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:square)) do
          j = 0
          while_fun_2 = fn while_fun_2, j ->
            if j < _len(Enum.at(Process.get(:square), i)) do
              if Enum.at(Enum.at(Process.get(:square), i), j) == letter do
                throw {:return, [i + 1, j + 1]}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j)
            else
              j
            end
          end
          j = try do
              while_fun_2.(while_fun_2, j)
            catch
              {:break, {j}} -> j
            end

          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, [0, 0]}
    catch
      {:return, val} -> val
    end
  end
  def numbers_to_letter(index1, index2) do
    try do
      throw {:return, Enum.at(Enum.at(Process.get(:square), index1 - 1), index2 - 1)}
    catch
      {:return, val} -> val
    end
  end
  def char_to_int(ch) do
    try do
      if ch == "1" do
        throw {:return, 1}
      end
      if ch == "2" do
        throw {:return, 2}
      end
      if ch == "3" do
        throw {:return, 3}
      end
      if ch == "4" do
        throw {:return, 4}
      end
      if ch == "5" do
        throw {:return, 5}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def encode(message) do
    try do
      message = String.downcase(message)
      encoded = ""
      i = 0
      while_fun_3 = fn while_fun_3, encoded, i ->
        if i < _len(message) do
          ch = String.at(message, i)
          {ch} = if ch == "j" do
            ch = "i"
            {ch}
          else
            {ch}
          end
          {encoded} = if ch != " " do
            nums = letter_to_numbers(ch)
            encoded = ((encoded <> Kernel.to_string(Enum.at(nums, 0))) <> Kernel.to_string(Enum.at(nums, 1)))
            {encoded}
          else
            encoded = (encoded <> " ")
            {encoded}
          end
          i = i + 1
          while_fun_3.(while_fun_3, encoded, i)
        else
          {encoded, i}
        end
      end
      {encoded, i} = try do
          while_fun_3.(while_fun_3, encoded, i)
        catch
          {:break, {encoded, i}} -> {encoded, i}
        end

      throw {:return, encoded}
    catch
      {:return, val} -> val
    end
  end
  def decode(message) do
    try do
      decoded = ""
      i = 0
      while_fun_4 = fn while_fun_4, decoded, i ->
        if i < _len(message) do
          {decoded, i} = if String.at(message, i) == " " do
            decoded = (decoded <> " ")
            i = i + 1
            {decoded, i}
          else
            index1 = char_to_int(String.at(message, i))
            index2 = char_to_int(String.at(message, i + 1))
            letter = numbers_to_letter(index1, index2)
            decoded = (decoded <> letter)
            i = i + 2
            {decoded, i}
          end
          while_fun_4.(while_fun_4, decoded, i)
        else
          {decoded, i}
        end
      end
      {decoded, i} = try do
          while_fun_4.(while_fun_4, decoded, i)
        catch
          {:break, {decoded, i}} -> {decoded, i}
        end

      throw {:return, decoded}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:square, [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(encode("test message")))
    IO.puts(Kernel.inspect(encode("Test Message")))
    IO.puts(Kernel.inspect(decode("44154344 32154343112215")))
    IO.puts(Kernel.inspect(decode("4415434432154343112215")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
