# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def base16_encode(data) do
    try do
      digits = "0123456789ABCDEF"
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(data) do
          b = Enum.at(data, i)
          if b < 0 || b > 255 do
            raise("byte out of range")
          end
          hi = div(b, 16)
          lo = rem(b, 16)
          res = ((res <> _slice(digits, hi, (hi + 1) - hi)) <> _slice(digits, lo, (lo + 1) - lo))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def base16_decode(data) do
    try do
      digits = "0123456789ABCDEF"
      if rem(_len(data), 2) != 0 do
        raise("Base16 encoded data is invalid: Data does not have an even number of hex digits.")
      end
      hex_value = fn ch ->
  j = 0
  while_fun_2 = fn while_fun_2, j ->
    if j < 16 do
      if _slice(digits, j, (j + 1) - j) == ch do
        throw {:return, j}
      end
      j = j + 1
      while_fun_2.(while_fun_2, j)
    else
      j
    end
  end
  j = try do
      while_fun_2.(while_fun_2, j)
    catch
      {:break, {j}} -> j
    end

  throw {:return, -1}
end
      out = []
      i = 0
      while_fun_3 = fn while_fun_3, i, out ->
        if i < _len(data) do
          hi_char = _slice(data, i, (i + 1) - i)
          lo_char = _slice(data, i + 1, (i + 2) - (i + 1))
          hi = hex_value.(hi_char)
          lo = hex_value.(lo_char)
          if hi < 0 || lo < 0 do
            raise("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.")
          end
          out = (out ++ [hi * 16 + lo])
          i = i + 2
          while_fun_3.(while_fun_3, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_3.(while_fun_3, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:example1, [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])
  Process.put(:example2, [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(base16_encode(Process.get(:example1))))
    IO.puts(Kernel.inspect(base16_encode(Process.get(:example2))))
    IO.puts(Kernel.inspect(base16_encode([])))
    IO.puts(Kernel.inspect(base16_decode("48656C6C6F20576F726C6421")))
    IO.puts(Kernel.inspect(base16_decode("48454C4C4F20574F524C4421")))
    IO.puts(Kernel.inspect(base16_decode("")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
