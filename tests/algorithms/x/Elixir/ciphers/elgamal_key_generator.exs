# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def rand() do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483647))
      throw {:return, Process.get(:seed)}
    catch
      {:return, val} -> val
    end
  end
  def rand_range(min, max) do
    try do
      throw {:return, min + rem(rand(), (max - min + 1))}
    catch
      {:return, val} -> val
    end
  end
  def mod_pow(base, exponent, modulus) do
    try do
      result = 1
      b = rem(base, modulus)
      e = exponent
      while_fun = fn while_fun, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), modulus)
            {result}
          else
            {result}
          end
          e = div(e, 2)
          b = rem((b * b), modulus)
          while_fun.(while_fun, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun.(while_fun, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def extended_gcd(a, b) do
    try do
      if b == 0 do
        throw {:return, %{g: a, x: 1, y: 0}}
      end
      res = extended_gcd(b, rem(a, b))
      throw {:return, %{g: res.g, x: res.y, y: res.x - (div(a, b)) * res.y}}
    catch
      {:return, val} -> val
    end
  end
  def mod_inverse(a, m) do
    try do
      res = extended_gcd(a, m)
      if res.g != 1 do
        raise("inverse does not exist")
      end
      r = rem(res.x, m)
      if r < 0 do
        throw {:return, r + m}
      end
      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def pow2(n) do
    try do
      r = 1
      i = 0
      while_fun_2 = fn while_fun_2, i, r ->
        if i < n do
          r = r * 2
          i = i + 1
          while_fun_2.(while_fun_2, i, r)
        else
          {i, r}
        end
      end
      {i, r} = try do
          while_fun_2.(while_fun_2, i, r)
        catch
          {:break, {i, r}} -> {i, r}
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def is_probable_prime(n, k) do
    try do
      if n <= 1 do
        throw {:return, false}
      end
      if n <= 3 do
        throw {:return, true}
      end
      if rem(n, 2) == 0 do
        throw {:return, false}
      end
      r = 0
      d = n - 1
      while_fun_3 = fn while_fun_3, d, r ->
        if rem(d, 2) == 0 do
          d = div(d, 2)
          r = r + 1
          while_fun_3.(while_fun_3, d, r)
        else
          {d, r}
        end
      end
      {d, r} = try do
          while_fun_3.(while_fun_3, d, r)
        catch
          {:break, {d, r}} -> {d, r}
        end

      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < k do
          try do
            a = rand_range(2, n - 2)
            x = mod_pow(a, d, n)
            {i} = if x == 1 || x == n - 1 do
              i = i + 1
              throw :continue
              {i}
            else
              {i}
            end
            j = 1
            found = false
            while_fun_5 = fn while_fun_5, found, j, x ->
              if j < r do
                x = mod_pow(x, 2, n)
                {found} = if x == n - 1 do
                  found = true
                  throw {:break, {found, j, x}}
                  {found}
                else
                  {found}
                end
                j = j + 1
                while_fun_5.(while_fun_5, found, j, x)
              else
                {found, j, x}
              end
            end
            {found, j, x} = try do
                while_fun_5.(while_fun_5, found, j, x)
              catch
                {:break, {found, j, x}} -> {found, j, x}
              end

            if !found do
              throw {:return, false}
            end
            i = i + 1
          catch
            :continue -> nil
          end
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def generate_large_prime(bits) do
    try do
      min = pow2(bits - 1)
      max = pow2(bits) - 1
      p = rand_range(min, max)
      {p} = if rem(p, 2) == 0 do
        p = p + 1
        {p}
      else
        {p}
      end
      while_fun_6 = fn while_fun_6, p ->
        if !is_probable_prime(p, 5) do
          p = p + 2
          {p} = if p > max do
            p = min + 1
            {p}
          else
            {p}
          end
          while_fun_6.(while_fun_6, p)
        else
          p
        end
      end
      p = try do
          while_fun_6.(while_fun_6, p)
        catch
          {:break, {p}} -> p
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def primitive_root(p) do
    try do
      while_fun_7 = fn while_fun_7 ->
        if true do
          try do
            g = rand_range(3, p - 1)
            if mod_pow(g, 2, p) == 1 do
              throw :continue
            end
            if mod_pow(g, p, p) == 1 do
              throw :continue
            end
            throw {:return, g}
          catch
            :continue -> nil
          end
          while_fun_7.(while_fun_7)
        else
          nil
        end
      end
      try do
        while_fun_7.(while_fun_7)
      catch
        :break -> nil
      end

    catch
      {:return, val} -> val
    end
  end
  def generate_key(key_size) do
    try do
      p = generate_large_prime(key_size)
      e1 = primitive_root(p)
      d = rand_range(3, p - 1)
      e2 = mod_inverse(mod_pow(e1, d, p), p)
      public_key = %{key_size: key_size, g: e1, e2: e2, p: p}
      private_key = %{key_size: key_size, d: d}
      throw {:return, %{public_key: public_key, private_key: private_key}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      key_size = 16
      kp = generate_key(key_size)
      pub = kp.public_key
      priv = kp.private_key
      IO.puts((((((((("public key: (" <> Kernel.to_string(pub.key_size)) <> ", ") <> Kernel.to_string(pub.g)) <> ", ") <> Kernel.to_string(pub.e2)) <> ", ") <> Kernel.to_string(pub.p)) <> ")"))
      IO.puts((((("private key: (" <> Kernel.to_string(priv.key_size)) <> ", ") <> Kernel.to_string(priv.d)) <> ")"))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 123456789)
end
Main.main()
