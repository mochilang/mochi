# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def mod_pow(base, exp, mod) do
    try do
      result = 1
      b = rem(base, mod)
      e = exp
      while_fun = fn while_fun, b, e, result ->
        if e > 0 do
          {result} = if rem(e, 2) == 1 do
            result = rem((result * b), mod)
            {result}
          else
            {result}
          end
          e = div(e, 2)
          b = rem((b * b), mod)
          while_fun.(while_fun, b, e, result)
        else
          {b, e, result}
        end
      end
      {b, e, result} = try do
          while_fun.(while_fun, b, e, result)
        catch
          {:break, {b, e, result}} -> {b, e, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def contains(xs, val) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == val do
            throw {:return, true}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def find_primitive(modulus) do
    try do
      r = 1
      while_fun_3 = fn while_fun_3, r ->
        if r < modulus do
          li = []
          x = 0
          valid = true
          while_fun_4 = fn while_fun_4, li, valid, x ->
            if x < modulus - 1 && valid do
              value = mod_pow(r, x, modulus)
              {li, valid, x} = if contains(li, value) do
                valid = false
                {li, valid, x}
              else
                li = (li ++ [value])
                x = x + 1
                {li, valid, x}
              end
              while_fun_4.(while_fun_4, li, valid, x)
            else
              {li, valid, x}
            end
          end
          {li, valid, x} = try do
              while_fun_4.(while_fun_4, li, valid, x)
            catch
              {:break, {li, valid, x}} -> {li, valid, x}
            end

          if valid do
            throw {:return, r}
          end
          r = r + 1
          while_fun_3.(while_fun_3, r)
        else
          r
        end
      end
      r = try do
          while_fun_3.(while_fun_3, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:prime, 23)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(find_primitive(7)))
    IO.puts(Kernel.inspect(find_primitive(11)))
    IO.puts(Kernel.inspect(find_primitive(8)))
    Process.put(:primitive_root, find_primitive(Process.get(:prime)))
    if Process.get(:primitive_root) == (0 - 1) do
      IO.puts("Cannot find the primitive for the value: -1")
    else
      a_private = 6
      b_private = 15
      a_public = mod_pow(Process.get(:primitive_root), a_private, Process.get(:prime))
      b_public = mod_pow(Process.get(:primitive_root), b_private, Process.get(:prime))
      a_secret = mod_pow(b_public, a_private, Process.get(:prime))
      b_secret = mod_pow(a_public, b_private, Process.get(:prime))
      IO.puts(("The key value generated by A is: " <> Kernel.to_string(a_secret)))
      IO.puts(("The key value generated by B is: " <> Kernel.to_string(b_secret)))
    end
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
