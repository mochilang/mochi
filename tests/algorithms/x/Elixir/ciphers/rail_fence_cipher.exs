# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def encrypt(input_string, key) do
    try do
      if key <= 0 do
        raise("Height of grid can't be 0 or negative")
      end
      if key == 1 || _len(input_string) <= key do
        throw {:return, input_string}
      end
      lowest = key - 1
      temp_grid = []
      i = 0
      while_fun = fn while_fun, i, temp_grid ->
        if i < key do
          temp_grid = (temp_grid ++ [[]])
          i = i + 1
          while_fun.(while_fun, i, temp_grid)
        else
          {i, temp_grid}
        end
      end
      {i, temp_grid} = try do
          while_fun.(while_fun, i, temp_grid)
        catch
          {:break, {i, temp_grid}} -> {i, temp_grid}
        end

      position = 0
      while_fun_2 = fn while_fun_2, position, temp_grid ->
        if position < _len(input_string) do
          num = rem(position, (lowest * 2))
          alt = lowest * 2 - num
          {num} = if num > alt do
            num = alt
            {num}
          else
            {num}
          end
          row = Enum.at(temp_grid, num)
          row = (row ++ [_slice(input_string, position, position + 1 - (position))])
          temp_grid = List.replace_at(temp_grid, num, row)
          position = position + 1
          while_fun_2.(while_fun_2, position, temp_grid)
        else
          {position, temp_grid}
        end
      end
      {position, temp_grid} = try do
          while_fun_2.(while_fun_2, position, temp_grid)
        catch
          {:break, {position, temp_grid}} -> {position, temp_grid}
        end

      output = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, output ->
        if i < key do
          row = Enum.at(temp_grid, i)
          j = 0
          while_fun_4 = fn while_fun_4, j, output ->
            if j < _len(row) do
              output = (output <> Enum.at(row, j))
              j = j + 1
              while_fun_4.(while_fun_4, j, output)
            else
              {j, output}
            end
          end
          {j, output} = try do
              while_fun_4.(while_fun_4, j, output)
            catch
              {:break, {j, output}} -> {j, output}
            end

          i = i + 1
          while_fun_3.(while_fun_3, i, output)
        else
          {i, output}
        end
      end
      {i, output} = try do
          while_fun_3.(while_fun_3, i, output)
        catch
          {:break, {i, output}} -> {i, output}
        end

      throw {:return, output}
    catch
      {:return, val} -> val
    end
  end
  def decrypt(input_string, key) do
    try do
      if key <= 0 do
        raise("Height of grid can't be 0 or negative")
      end
      if key == 1 do
        throw {:return, input_string}
      end
      lowest = key - 1
      counts = []
      i = 0
      while_fun_5 = fn while_fun_5, counts, i ->
        if i < key do
          counts = (counts ++ [0])
          i = i + 1
          while_fun_5.(while_fun_5, counts, i)
        else
          {counts, i}
        end
      end
      {counts, i} = try do
          while_fun_5.(while_fun_5, counts, i)
        catch
          {:break, {counts, i}} -> {counts, i}
        end

      pos = 0
      while_fun_6 = fn while_fun_6, counts, pos ->
        if pos < _len(input_string) do
          num = rem(pos, (lowest * 2))
          alt = lowest * 2 - num
          {num} = if num > alt do
            num = alt
            {num}
          else
            {num}
          end
          counts = List.replace_at(counts, num, Enum.at(counts, num) + 1)
          pos = pos + 1
          while_fun_6.(while_fun_6, counts, pos)
        else
          {counts, pos}
        end
      end
      {counts, pos} = try do
          while_fun_6.(while_fun_6, counts, pos)
        catch
          {:break, {counts, pos}} -> {counts, pos}
        end

      grid = []
      counter = 0
      i = 0
      while_fun_7 = fn while_fun_7, counter, grid, i ->
        if i < key do
          length = Enum.at(counts, i)
          slice = _slice(input_string, counter, counter + length - (counter))
          row = []
          j = 0
          while_fun_8 = fn while_fun_8, j, row ->
            if j < _len(slice) do
              row = (row ++ [String.at(slice, j)])
              j = j + 1
              while_fun_8.(while_fun_8, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_8.(while_fun_8, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          grid = (grid ++ [row])
          counter = counter + length
          i = i + 1
          while_fun_7.(while_fun_7, counter, grid, i)
        else
          {counter, grid, i}
        end
      end
      {counter, grid, i} = try do
          while_fun_7.(while_fun_7, counter, grid, i)
        catch
          {:break, {counter, grid, i}} -> {counter, grid, i}
        end

      indices = []
      i = 0
      while_fun_9 = fn while_fun_9, i, indices ->
        if i < key do
          indices = (indices ++ [0])
          i = i + 1
          while_fun_9.(while_fun_9, i, indices)
        else
          {i, indices}
        end
      end
      {i, indices} = try do
          while_fun_9.(while_fun_9, i, indices)
        catch
          {:break, {i, indices}} -> {i, indices}
        end

      output = ""
      pos = 0
      while_fun_10 = fn while_fun_10, indices, output, pos ->
        if pos < _len(input_string) do
          num = rem(pos, (lowest * 2))
          alt = lowest * 2 - num
          {num} = if num > alt do
            num = alt
            {num}
          else
            {num}
          end
          output = (output <> Enum.at(Enum.at(grid, num), Enum.at(indices, num)))
          indices = List.replace_at(indices, num, Enum.at(indices, num) + 1)
          pos = pos + 1
          while_fun_10.(while_fun_10, indices, output, pos)
        else
          {indices, output, pos}
        end
      end
      {indices, output, pos} = try do
          while_fun_10.(while_fun_10, indices, output, pos)
        catch
          {:break, {indices, output, pos}} -> {indices, output, pos}
        end

      throw {:return, output}
    catch
      {:return, val} -> val
    end
  end
  def bruteforce(input_string) do
    try do
      results = %{}
      key_guess = 1
      while_fun_11 = fn while_fun_11, key_guess, results ->
        if key_guess < _len(input_string) do
          results = Map.put(results, key_guess, decrypt(input_string, key_guess))
          key_guess = key_guess + 1
          while_fun_11.(while_fun_11, key_guess, results)
        else
          {key_guess, results}
        end
      end
      {key_guess, results} = try do
          while_fun_11.(while_fun_11, key_guess, results)
        catch
          {:break, {key_guess, results}} -> {key_guess, results}
        end

      throw {:return, results}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(encrypt("Hello World", 4)))
    IO.puts(Kernel.inspect(decrypt("HWe olordll", 4)))
    Process.put(:bf, bruteforce("HWe olordll"))
    IO.puts(Map.get(Process.get(:bf), 4, ""))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
