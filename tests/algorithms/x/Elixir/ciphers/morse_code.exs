# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def to_upper_char(c) do
    try do
      if c == "a" do
        throw {:return, "A"}
      end
      if c == "b" do
        throw {:return, "B"}
      end
      if c == "c" do
        throw {:return, "C"}
      end
      if c == "d" do
        throw {:return, "D"}
      end
      if c == "e" do
        throw {:return, "E"}
      end
      if c == "f" do
        throw {:return, "F"}
      end
      if c == "g" do
        throw {:return, "G"}
      end
      if c == "h" do
        throw {:return, "H"}
      end
      if c == "i" do
        throw {:return, "I"}
      end
      if c == "j" do
        throw {:return, "J"}
      end
      if c == "k" do
        throw {:return, "K"}
      end
      if c == "l" do
        throw {:return, "L"}
      end
      if c == "m" do
        throw {:return, "M"}
      end
      if c == "n" do
        throw {:return, "N"}
      end
      if c == "o" do
        throw {:return, "O"}
      end
      if c == "p" do
        throw {:return, "P"}
      end
      if c == "q" do
        throw {:return, "Q"}
      end
      if c == "r" do
        throw {:return, "R"}
      end
      if c == "s" do
        throw {:return, "S"}
      end
      if c == "t" do
        throw {:return, "T"}
      end
      if c == "u" do
        throw {:return, "U"}
      end
      if c == "v" do
        throw {:return, "V"}
      end
      if c == "w" do
        throw {:return, "W"}
      end
      if c == "x" do
        throw {:return, "X"}
      end
      if c == "y" do
        throw {:return, "Y"}
      end
      if c == "z" do
        throw {:return, "Z"}
      end
      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def to_upper(s) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(s) do
          res = (res <> to_upper_char(String.at(s, i)))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def index_of(xs, target) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == target do
            throw {:return, i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def encrypt(message) do
    try do
      msg = to_upper(message)
      res = ""
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(msg) do
          c = String.at(msg, i)
          idx = index_of(Process.get(:chars), c)
          {res} = if idx >= 0 do
            {res} = if res != "" do
              res = (res <> " ")
              {res}
            else
              {res}
            end
            res = (res <> Enum.at(Process.get(:codes), idx))
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def split_spaces(s) do
    try do
      res = []
      current = ""
      i = 0
      while_fun_4 = fn while_fun_4, current, i, res ->
        if i < _len(s) do
          ch = String.at(s, i)
          {current, res} = if ch == " " do
            {current, res} = if current != "" do
              res = (res ++ [current])
              current = ""
              {current, res}
            else
              {current, res}
            end
            {current, res}
          else
            current = (current <> ch)
            {current, res}
          end
          i = i + 1
          while_fun_4.(while_fun_4, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun_4.(while_fun_4, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      {res} = if current != "" do
        res = (res ++ [current])
        {res}
      else
        {res}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def decrypt(message) do
    try do
      parts = split_spaces(message)
      res = ""
      {res} = Enum.reduce(parts, {res}, fn code, {res} ->
        idx = index_of(Process.get(:codes), code)
        {res} = if idx >= 0 do
          res = (res <> Enum.at(Process.get(:chars), idx))
          {res}
        else
          {res}
        end
        {res}
      end)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:chars, ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "])
  Process.put(:codes, [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"])
  Process.put(:msg, "Morse code here!")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Process.get(:msg))
    Process.put(:enc, encrypt(Process.get(:msg)))
    IO.puts(Process.get(:enc))
    Process.put(:dec, decrypt(Process.get(:enc)))
    IO.puts(Process.get(:dec))
    IO.puts(Kernel.inspect(encrypt("Sos!")))
    IO.puts(Kernel.inspect(decrypt("... --- ... -.-.--")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
