# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def pow2(exp) do
    try do
      res = 1
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < exp do
          res = res * 2
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def next_seed(x) do
    try do
      throw {:return, rem((x * 1103515245 + 12345), 2147483648)}
    catch
      {:return, val} -> val
    end
  end
  def rand_range(min, max) do
    try do
      Process.put(:seed, next_seed(Process.get(:seed)))
      throw {:return, min + rem(Process.get(:seed), (max - min))}
    catch
      {:return, val} -> val
    end
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun_2 = fn while_fun_2, x, y ->
        if y != 0 do
          temp = rem(x, y)
          x = y
          y = temp
          while_fun_2.(while_fun_2, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun_2.(while_fun_2, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def mod_inverse(e, phi) do
    try do
      t = 0
      newt = 1
      r = phi
      newr = e
      while_fun_3 = fn while_fun_3, newr, newt, r, t ->
        if newr != 0 do
          quotient = div(r, newr)
          tmp = newt
          newt = t - quotient * newt
          t = tmp
          tmp_r = newr
          newr = r - quotient * newr
          r = tmp_r
          while_fun_3.(while_fun_3, newr, newt, r, t)
        else
          {newr, newt, r, t}
        end
      end
      {newr, newt, r, t} = try do
          while_fun_3.(while_fun_3, newr, newt, r, t)
        catch
          {:break, {newr, newt, r, t}} -> {newr, newt, r, t}
        end

      if r > 1 do
        throw {:return, 0}
      end
      {t} = if t < 0 do
        t = t + phi
        {t}
      else
        {t}
      end
      throw {:return, t}
    catch
      {:return, val} -> val
    end
  end
  def is_prime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      i = 2
      while_fun_4 = fn while_fun_4, i ->
        if i * i <= n do
          if rem(n, i) == 0 do
            throw {:return, false}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def generate_prime(bits) do
    try do
      min = pow2(bits - 1)
      max = pow2(bits)
      p = rand_range(min, max)
      {p} = if rem(p, 2) == 0 do
        p = p + 1
        {p}
      else
        {p}
      end
      while_fun_5 = fn while_fun_5, p ->
        if !is_prime(p) do
          p = p + 2
          {p} = if p >= max do
            p = min + 1
            {p}
          else
            {p}
          end
          while_fun_5.(while_fun_5, p)
        else
          p
        end
      end
      p = try do
          while_fun_5.(while_fun_5, p)
        catch
          {:break, {p}} -> p
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def generate_key(bits) do
    try do
      p = generate_prime(bits)
      q = generate_prime(bits)
      n = p * q
      phi = (p - 1) * (q - 1)
      e = rand_range(2, phi)
      while_fun_6 = fn while_fun_6, e ->
        if gcd(e, phi) != 1 do
          e = e + 1
          {e} = if e >= phi do
            e = 2
            {e}
          else
            {e}
          end
          while_fun_6.(while_fun_6, e)
        else
          e
        end
      end
      e = try do
          while_fun_6.(while_fun_6, e)
        catch
          {:break, {e}} -> e
        end

      d = mod_inverse(e, phi)
      throw {:return, %{public_key: [n, e], private_key: [n, d]}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:keys, generate_key(8))
    Process.put(:pub, Process.get(:keys).public_key)
    Process.put(:priv, Process.get(:keys).private_key)
    IO.puts((((("Public key: (" <> Kernel.to_string(Enum.at(Process.get(:pub), 0))) <> ", ") <> Kernel.to_string(Enum.at(Process.get(:pub), 1))) <> ")"))
    IO.puts((((("Private key: (" <> Kernel.to_string(Enum.at(Process.get(:priv), 0))) <> ", ") <> Kernel.to_string(Enum.at(Process.get(:priv), 1))) <> ")"))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
