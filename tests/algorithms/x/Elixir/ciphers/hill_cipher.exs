# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def mod36(n) do
    try do
      r = rem(n, 36)
      {r} = if r < 0 do
        r = r + 36
        {r}
      else
        {r}
      end
      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          t = y
          y = rem(x, y)
          x = t
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      {x} = if x < 0 do
        x = -x
        {x}
      else
        {x}
      end
      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def replace_letters(letter) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(Process.get(:key_string)) do
          if String.at(Process.get(:key_string), i) == letter do
            throw {:return, i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def replace_digits(num) do
    try do
      idx = mod36(num)
      throw {:return, String.at(Process.get(:key_string), idx)}
    catch
      {:return, val} -> val
    end
  end
  def to_upper(c) do
    try do
      lower = "abcdefghijklmnopqrstuvwxyz"
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(lower) do
          if c == Enum.at(lower, i) do
            throw {:return, Enum.at(upper, i)}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def process_text(text, break_key) do
    try do
      chars = []
      i = 0
      while_fun_4 = fn while_fun_4, chars, i ->
        if i < _len(text) do
          c = to_upper(String.at(text, i))
          j = 0
          ok = false
          while_fun_5 = fn while_fun_5, j, ok ->
            if j < _len(Process.get(:key_string)) do
              {ok} = if String.at(Process.get(:key_string), j) == c do
                ok = true
                throw {:break, {j, ok}}
                {ok}
              else
                {ok}
              end
              j = j + 1
              while_fun_5.(while_fun_5, j, ok)
            else
              {j, ok}
            end
          end
          {j, ok} = try do
              while_fun_5.(while_fun_5, j, ok)
            catch
              {:break, {j, ok}} -> {j, ok}
            end

          {chars} = if ok do
            chars = (chars ++ [c])
            {chars}
          else
            {chars}
          end
          i = i + 1
          while_fun_4.(while_fun_4, chars, i)
        else
          {chars, i}
        end
      end
      {chars, i} = try do
          while_fun_4.(while_fun_4, chars, i)
        catch
          {:break, {chars, i}} -> {chars, i}
        end

      if _len(chars) == 0 do
        throw {:return, ""}
      end
      last = Enum.at(chars, _len(chars) - 1)
      while_fun_6 = fn while_fun_6, chars ->
        if rem(_len(chars), break_key) != 0 do
          chars = (chars ++ [last])
          while_fun_6.(while_fun_6, chars)
        else
          chars
        end
      end
      chars = try do
          while_fun_6.(while_fun_6, chars)
        catch
          {:break, {chars}} -> chars
        end

      res = ""
      k = 0
      while_fun_7 = fn while_fun_7, k, res ->
        if k < _len(chars) do
          res = (res <> Enum.at(chars, k))
          k = k + 1
          while_fun_7.(while_fun_7, k, res)
        else
          {k, res}
        end
      end
      {k, res} = try do
          while_fun_7.(while_fun_7, k, res)
        catch
          {:break, {k, res}} -> {k, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def matrix_minor(m, row, col) do
    try do
      res = []
      i = 0
      while_fun_8 = fn while_fun_8, i, res ->
        if i < _len(m) do
          {res} = if i != row do
            r = []
            j = 0
            while_fun_9 = fn while_fun_9, j, r ->
              if j < _len(Enum.at(m, i)) do
                {r} = if j != col do
                  r = (r ++ [Enum.at(Enum.at(m, i), j)])
                  {r}
                else
                  {r}
                end
                j = j + 1
                while_fun_9.(while_fun_9, j, r)
              else
                {j, r}
              end
            end
            {j, r} = try do
                while_fun_9.(while_fun_9, j, r)
              catch
                {:break, {j, r}} -> {j, r}
              end

            res = (res ++ [r])
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_8.(while_fun_8, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_8.(while_fun_8, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def determinant(m) do
    try do
      n = _len(m)
      if n == 1 do
        throw {:return, Enum.at(Enum.at(m, 0), 0)}
      end
      if n == 2 do
        throw {:return, Enum.at(Enum.at(m, 0), 0) * Enum.at(Enum.at(m, 1), 1) - Enum.at(Enum.at(m, 0), 1) * Enum.at(Enum.at(m, 1), 0)}
      end
      det = 0
      col = 0
      while_fun_10 = fn while_fun_10, col, det ->
        if col < n do
          minor_mat = matrix_minor(m, 0, col)
          sign = 1
          {sign} = if rem(col, 2) == 1 do
            sign = -1
            {sign}
          else
            {sign}
          end
          det = det + sign * Enum.at(Enum.at(m, 0), col) * determinant(minor_mat)
          col = col + 1
          while_fun_10.(while_fun_10, col, det)
        else
          {col, det}
        end
      end
      {col, det} = try do
          while_fun_10.(while_fun_10, col, det)
        catch
          {:break, {col, det}} -> {col, det}
        end

      throw {:return, det}
    catch
      {:return, val} -> val
    end
  end
  def cofactor_matrix(m) do
    try do
      n = _len(m)
      res = []
      i = 0
      while_fun_11 = fn while_fun_11, i, res ->
        if i < n do
          row = []
          j = 0
          while_fun_12 = fn while_fun_12, j, row ->
            if j < n do
              minor_mat = matrix_minor(m, i, j)
              det_minor = determinant(minor_mat)
              sign = 1
              {sign} = if rem((i + j), 2) == 1 do
                sign = -1
                {sign}
              else
                {sign}
              end
              row = (row ++ [sign * det_minor])
              j = j + 1
              while_fun_12.(while_fun_12, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_12.(while_fun_12, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          res = (res ++ [row])
          i = i + 1
          while_fun_11.(while_fun_11, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_11.(while_fun_11, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def transpose(m) do
    try do
      rows = _len(m)
      cols = _len(Enum.at(m, 0))
      res = []
      j = 0
      while_fun_13 = fn while_fun_13, j, res ->
        if j < cols do
          row = []
          i = 0
          while_fun_14 = fn while_fun_14, i, row ->
            if i < rows do
              row = (row ++ [Enum.at(Enum.at(m, i), j)])
              i = i + 1
              while_fun_14.(while_fun_14, i, row)
            else
              {i, row}
            end
          end
          {i, row} = try do
              while_fun_14.(while_fun_14, i, row)
            catch
              {:break, {i, row}} -> {i, row}
            end

          res = (res ++ [row])
          j = j + 1
          while_fun_13.(while_fun_13, j, res)
        else
          {j, res}
        end
      end
      {j, res} = try do
          while_fun_13.(while_fun_13, j, res)
        catch
          {:break, {j, res}} -> {j, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def matrix_mod(m) do
    try do
      res = []
      i = 0
      while_fun_15 = fn while_fun_15, i, res ->
        if i < _len(m) do
          row = []
          j = 0
          while_fun_16 = fn while_fun_16, j, row ->
            if j < _len(Enum.at(m, i)) do
              row = (row ++ [mod36(Enum.at(Enum.at(m, i), j))])
              j = j + 1
              while_fun_16.(while_fun_16, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_16.(while_fun_16, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          res = (res ++ [row])
          i = i + 1
          while_fun_15.(while_fun_15, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_15.(while_fun_15, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def scalar_matrix_mult(s, m) do
    try do
      res = []
      i = 0
      while_fun_17 = fn while_fun_17, i, res ->
        if i < _len(m) do
          row = []
          j = 0
          while_fun_18 = fn while_fun_18, j, row ->
            if j < _len(Enum.at(m, i)) do
              row = (row ++ [mod36(s * Enum.at(Enum.at(m, i), j))])
              j = j + 1
              while_fun_18.(while_fun_18, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_18.(while_fun_18, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          res = (res ++ [row])
          i = i + 1
          while_fun_17.(while_fun_17, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_17.(while_fun_17, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def adjugate(m) do
    try do
      cof = cofactor_matrix(m)
      n = _len(cof)
      res = []
      i = 0
      while_fun_19 = fn while_fun_19, i, res ->
        if i < n do
          row = []
          j = 0
          while_fun_20 = fn while_fun_20, j, row ->
            if j < n do
              row = (row ++ [Enum.at(Enum.at(cof, j), i)])
              j = j + 1
              while_fun_20.(while_fun_20, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_20.(while_fun_20, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          res = (res ++ [row])
          i = i + 1
          while_fun_19.(while_fun_19, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_19.(while_fun_19, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def multiply_matrix_vector(m, v) do
    try do
      n = _len(m)
      res = []
      i = 0
      while_fun_21 = fn while_fun_21, i, res ->
        if i < n do
          sum = 0
          j = 0
          while_fun_22 = fn while_fun_22, j, sum ->
            if j < n do
              sum = sum + Enum.at(Enum.at(m, i), j) * Enum.at(v, j)
              j = j + 1
              while_fun_22.(while_fun_22, j, sum)
            else
              {j, sum}
            end
          end
          {j, sum} = try do
              while_fun_22.(while_fun_22, j, sum)
            catch
              {:break, {j, sum}} -> {j, sum}
            end

          res = (res ++ [mod36(sum)])
          i = i + 1
          while_fun_21.(while_fun_21, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_21.(while_fun_21, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def inverse_key(key) do
    try do
      det_val = determinant(key)
      det_mod = mod36(det_val)
      det_inv = 0
      i = 0
      while_fun_23 = fn while_fun_23, det_inv, i ->
        if i < 36 do
          {det_inv} = if rem((det_mod * i), 36) == 1 do
            det_inv = i
            throw {:break, {det_inv, i}}
            {det_inv}
          else
            {det_inv}
          end
          i = i + 1
          while_fun_23.(while_fun_23, det_inv, i)
        else
          {det_inv, i}
        end
      end
      {det_inv, i} = try do
          while_fun_23.(while_fun_23, det_inv, i)
        catch
          {:break, {det_inv, i}} -> {det_inv, i}
        end

      adj = adjugate(key)
      tmp = scalar_matrix_mult(det_inv, adj)
      res = matrix_mod(tmp)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def hill_encrypt(key, text) do
    try do
      break_key = _len(key)
      processed = process_text(text, break_key)
      encrypted = ""
      i = 0
      while_fun_24 = fn while_fun_24, encrypted, i ->
        if i < _len(processed) do
          vec = []
          j = 0
          while_fun_25 = fn while_fun_25, j, vec ->
            if j < break_key do
              vec = (vec ++ [replace_letters(String.at(processed, i + j))])
              j = j + 1
              while_fun_25.(while_fun_25, j, vec)
            else
              {j, vec}
            end
          end
          {j, vec} = try do
              while_fun_25.(while_fun_25, j, vec)
            catch
              {:break, {j, vec}} -> {j, vec}
            end

          enc_vec = multiply_matrix_vector(key, vec)
          k = 0
          while_fun_26 = fn while_fun_26, encrypted, k ->
            if k < break_key do
              encrypted = (encrypted <> replace_digits(Enum.at(enc_vec, k)))
              k = k + 1
              while_fun_26.(while_fun_26, encrypted, k)
            else
              {encrypted, k}
            end
          end
          {encrypted, k} = try do
              while_fun_26.(while_fun_26, encrypted, k)
            catch
              {:break, {encrypted, k}} -> {encrypted, k}
            end

          i = i + break_key
          while_fun_24.(while_fun_24, encrypted, i)
        else
          {encrypted, i}
        end
      end
      {encrypted, i} = try do
          while_fun_24.(while_fun_24, encrypted, i)
        catch
          {:break, {encrypted, i}} -> {encrypted, i}
        end

      throw {:return, encrypted}
    catch
      {:return, val} -> val
    end
  end
  def hill_decrypt(key, text) do
    try do
      break_key = _len(key)
      decrypt_key = inverse_key(key)
      processed = process_text(text, break_key)
      decrypted = ""
      i = 0
      while_fun_27 = fn while_fun_27, decrypted, i ->
        if i < _len(processed) do
          vec = []
          j = 0
          while_fun_28 = fn while_fun_28, j, vec ->
            if j < break_key do
              vec = (vec ++ [replace_letters(String.at(processed, i + j))])
              j = j + 1
              while_fun_28.(while_fun_28, j, vec)
            else
              {j, vec}
            end
          end
          {j, vec} = try do
              while_fun_28.(while_fun_28, j, vec)
            catch
              {:break, {j, vec}} -> {j, vec}
            end

          dec_vec = multiply_matrix_vector(decrypt_key, vec)
          k = 0
          while_fun_29 = fn while_fun_29, decrypted, k ->
            if k < break_key do
              decrypted = (decrypted <> replace_digits(Enum.at(dec_vec, k)))
              k = k + 1
              while_fun_29.(while_fun_29, decrypted, k)
            else
              {decrypted, k}
            end
          end
          {decrypted, k} = try do
              while_fun_29.(while_fun_29, decrypted, k)
            catch
              {:break, {decrypted, k}} -> {decrypted, k}
            end

          i = i + break_key
          while_fun_27.(while_fun_27, decrypted, i)
        else
          {decrypted, i}
        end
      end
      {decrypted, i} = try do
          while_fun_27.(while_fun_27, decrypted, i)
        catch
          {:break, {decrypted, i}} -> {decrypted, i}
        end

      throw {:return, decrypted}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:key_string, "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
  Process.put(:key, [[2, 5], [1, 6]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(hill_encrypt(Process.get(:key), "testing hill cipher")))
    IO.puts(Kernel.inspect(hill_encrypt(Process.get(:key), "hello")))
    IO.puts(Kernel.inspect(hill_decrypt(Process.get(:key), "WHXYJOLM9C6XT085LL")))
    IO.puts(Kernel.inspect(hill_decrypt(Process.get(:key), "85FF00")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
