# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          temp = rem(x, y)
          x = y
          y = temp
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def mod_inverse(a, m) do
    try do
      if gcd(a, m) != 1 do
        raise((((("mod inverse of " <> Kernel.to_string(a)) <> " and ") <> Kernel.to_string(m)) <> " does not exist"))
      end
      u1 = 1
      u2 = 0
      u3 = a
      v1 = 0
      v2 = 1
      v3 = m
      while_fun_2 = fn while_fun_2, u1, u2, u3, v1, v2, v3 ->
        if v3 != 0 do
          q = div(u3, v3)
          t1 = u1 - q * v1
          t2 = u2 - q * v2
          t3 = u3 - q * v3
          u1 = v1
          u2 = v2
          u3 = v3
          v1 = t1
          v2 = t2
          v3 = t3
          while_fun_2.(while_fun_2, u1, u2, u3, v1, v2, v3)
        else
          {u1, u2, u3, v1, v2, v3}
        end
      end
      {u1, u2, u3, v1, v2, v3} = try do
          while_fun_2.(while_fun_2, u1, u2, u3, v1, v2, v3)
        catch
          {:break, {u1, u2, u3, v1, v2, v3}} -> {u1, u2, u3, v1, v2, v3}
        end

      res = rem(u1, m)
      if res < 0 do
        throw {:return, res + m}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def find_symbol(ch) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(Process.get(:symbols)) do
          if String.at(Process.get(:symbols), i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def check_keys(key_a, key_b, mode) do
    try do
      m = _len(Process.get(:symbols))
      if mode == "encrypt" do
        if key_a == 1 do
          raise("The affine cipher becomes weak when key A is set to 1. Choose different key")
        end
        if key_b == 0 do
          raise("The affine cipher becomes weak when key B is set to 0. Choose different key")
        end
      end
      if key_a < 0 || key_b < 0 || key_b > m - 1 do
        raise(("Key A must be greater than 0 and key B must be between 0 and " <> Kernel.to_string(m - 1)))
      end
      if gcd(key_a, m) != 1 do
        raise((((("Key A " <> Kernel.to_string(key_a)) <> " and the symbol set size ") <> Kernel.to_string(m)) <> " are not relatively prime. Choose a different key."))
      end
    catch
      {:return, val} -> val
    end
  end
  def encrypt_message(key, message) do
    try do
      m = _len(Process.get(:symbols))
      key_a = div(key, m)
      key_b = rem(key, m)
      check_keys(key_a, key_b, "encrypt")
      cipher_text = ""
      i = 0
      while_fun_4 = fn while_fun_4, cipher_text, i ->
        if i < _len(message) do
          ch = String.at(message, i)
          index = find_symbol(ch)
          cipher_text = (if index >= 0, do: (cipher_text <> String.at(Process.get(:symbols), rem((index * key_a + key_b), m))), else: (cipher_text <> ch))
          i = i + 1
          while_fun_4.(while_fun_4, cipher_text, i)
        else
          {cipher_text, i}
        end
      end
      {cipher_text, i} = try do
          while_fun_4.(while_fun_4, cipher_text, i)
        catch
          {:break, {cipher_text, i}} -> {cipher_text, i}
        end

      throw {:return, cipher_text}
    catch
      {:return, val} -> val
    end
  end
  def decrypt_message(key, message) do
    try do
      m = _len(Process.get(:symbols))
      key_a = div(key, m)
      key_b = rem(key, m)
      check_keys(key_a, key_b, "decrypt")
      inv = mod_inverse(key_a, m)
      plain_text = ""
      i = 0
      while_fun_5 = fn while_fun_5, i, plain_text ->
        if i < _len(message) do
          ch = String.at(message, i)
          index = find_symbol(ch)
          {plain_text} = if index >= 0 do
            n = (index - key_b) * inv
            pos = rem(n, m)
            final = (if pos < 0, do: pos + m, else: pos)
            plain_text = (plain_text <> String.at(Process.get(:symbols), final))
            {plain_text}
          else
            plain_text = (plain_text <> ch)
            {plain_text}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, plain_text)
        else
          {i, plain_text}
        end
      end
      {i, plain_text} = try do
          while_fun_5.(while_fun_5, i, plain_text)
        catch
          {:break, {i, plain_text}} -> {i, plain_text}
        end

      throw {:return, plain_text}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      key = 4545
      msg = "The affine cipher is a type of monoalphabetic substitution cipher."
      enc = encrypt_message(key, msg)
      IO.puts(enc)
      IO.puts(Kernel.inspect(decrypt_message(key, enc)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:symbols, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
  def bench_main() do
    Process.put(:symbols, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
