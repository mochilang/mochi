# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_freq(n) do
    try do
      throw {:return, case n do
  %{symbol: _, freq: f} -> f
  %{freq: f, left: _, right: _} -> f
end}
    catch
      {:return, val} -> val
    end
  end
  def sort_nodes(nodes) do
    try do
      arr = nodes
      i = 1
      while_fun = fn while_fun, arr, i ->
        if i < _len(arr) do
          key = Enum.at(arr, i)
          j = i - 1
          while_fun_2 = fn while_fun_2, arr, j ->
            if j >= 0 && get_freq(Enum.at(arr, j)) > get_freq(key) do
              arr = List.replace_at(arr, j + 1, Enum.at(arr, j))
              j = j - 1
              while_fun_2.(while_fun_2, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_2.(while_fun_2, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          arr = List.replace_at(arr, j + 1, key)
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def rest(nodes) do
    try do
      res = []
      i = 1
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(nodes) do
          res = (res ++ [Enum.at(nodes, i)])
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def count_freq(text) do
    try do
      chars = []
      freqs = []
      i = 0
      while_fun_4 = fn while_fun_4, chars, freqs, i ->
        if i < _len(text) do
          c = _slice(text, i, i + 1 - (i))
          j = 0
          found = false
          while_fun_5 = fn while_fun_5, found, freqs, j ->
            if j < _len(chars) do
              {found, freqs} = if Enum.at(chars, j) == c do
                freqs = List.replace_at(freqs, j, Enum.at(freqs, j) + 1)
                found = true
                throw {:break, {found, freqs, j}}
                {found, freqs}
              else
                {found, freqs}
              end
              j = j + 1
              while_fun_5.(while_fun_5, found, freqs, j)
            else
              {found, freqs, j}
            end
          end
          {found, freqs, j} = try do
              while_fun_5.(while_fun_5, found, freqs, j)
            catch
              {:break, {found, freqs, j}} -> {found, freqs, j}
            end

          {chars, freqs} = if !found do
            chars = (chars ++ [c])
            freqs = (freqs ++ [1])
            {chars, freqs}
          else
            {chars, freqs}
          end
          i = i + 1
          while_fun_4.(while_fun_4, chars, freqs, i)
        else
          {chars, freqs, i}
        end
      end
      {chars, freqs, i} = try do
          while_fun_4.(while_fun_4, chars, freqs, i)
        catch
          {:break, {chars, freqs, i}} -> {chars, freqs, i}
        end

      leaves = []
      k = 0
      while_fun_6 = fn while_fun_6, k, leaves ->
        if k < _len(chars) do
          leaves = (leaves ++ [%{symbol: Enum.at(chars, k), freq: Enum.at(freqs, k)}])
          k = k + 1
          while_fun_6.(while_fun_6, k, leaves)
        else
          {k, leaves}
        end
      end
      {k, leaves} = try do
          while_fun_6.(while_fun_6, k, leaves)
        catch
          {:break, {k, leaves}} -> {k, leaves}
        end

      throw {:return, sort_nodes(leaves)}
    catch
      {:return, val} -> val
    end
  end
  def build_tree(nodes) do
    try do
      arr = nodes
      while_fun_7 = fn while_fun_7, arr ->
        if _len(arr) > 1 do
          left = Enum.at(arr, 0)
          arr = rest(arr)
          right = Enum.at(arr, 0)
          arr = rest(arr)
          node_ = %{freq: get_freq(left) + get_freq(right), left: left, right: right}
          arr = (arr ++ [node_])
          arr = sort_nodes(arr)
          while_fun_7.(while_fun_7, arr)
        else
          arr
        end
      end
      arr = try do
          while_fun_7.(while_fun_7, arr)
        catch
          {:break, {arr}} -> arr
        end

      throw {:return, Enum.at(arr, 0)}
    catch
      {:return, val} -> val
    end
  end
  def concat_pairs(a, b) do
    try do
      res = a
      i = 0
      while_fun_8 = fn while_fun_8, i, res ->
        if i < _len(b) do
          res = (res ++ [Enum.at(b, i)])
          i = i + 1
          while_fun_8.(while_fun_8, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_8.(while_fun_8, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def collect_codes(tree, prefix) do
    try do
      throw {:return, case tree do
  %{symbol: s, freq: _} -> [[s, prefix]]
  %{freq: _, left: l, right: r} -> concat_pairs(collect_codes(l, (prefix <> "0")), collect_codes(r, (prefix <> "1")))
end}
    catch
      {:return, val} -> val
    end
  end
  def find_code(pairs, ch) do
    try do
      i = 0
      while_fun_9 = fn while_fun_9, i ->
        if i < _len(pairs) do
          if Enum.at(Enum.at(pairs, i), 0) == ch do
            throw {:return, Enum.at(Enum.at(pairs, i), 1)}
          end
          i = i + 1
          while_fun_9.(while_fun_9, i)
        else
          i
        end
      end
      i = try do
          while_fun_9.(while_fun_9, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, ""}
    catch
      {:return, val} -> val
    end
  end
  def huffman_encode(text) do
    try do
      if text == "" do
        throw {:return, ""}
      end
      leaves = count_freq(text)
      tree = build_tree(leaves)
      codes = collect_codes(tree, "")
      encoded = ""
      i = 0
      while_fun_10 = fn while_fun_10, encoded, i ->
        if i < _len(text) do
          c = _slice(text, i, i + 1 - (i))
          encoded = ((encoded <> find_code(codes, c)) <> " ")
          i = i + 1
          while_fun_10.(while_fun_10, encoded, i)
        else
          {encoded, i}
        end
      end
      {encoded, i} = try do
          while_fun_10.(while_fun_10, encoded, i)
        catch
          {:break, {encoded, i}} -> {encoded, i}
        end

      throw {:return, encoded}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(huffman_encode("beep boop beer!")))
  end
end
Main.main()
