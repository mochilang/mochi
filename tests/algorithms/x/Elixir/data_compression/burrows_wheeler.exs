# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def all_rotations(s) do
    try do
      n = _len(s)
      rotations = []
      i = 0
      while_fun = fn while_fun, i, rotations ->
        if i < n do
          rotation = (_slice(s, i, n - (i)) <> _slice(s, 0, i - (0)))
          rotations = (rotations ++ [rotation])
          i = i + 1
          while_fun.(while_fun, i, rotations)
        else
          {i, rotations}
        end
      end
      {_, rotations} = try do
          while_fun.(while_fun, i, rotations)
        catch
          {:break, {_, rotations}} -> {0, rotations}
        end

      throw {:return, rotations}
    catch
      {:return, val} -> val
    end
  end
  def sort_strings(arr) do
    try do
      n = _len(arr)
      i = 1
      while_fun_2 = fn while_fun_2, arr, i ->
        if i < n do
          key = Enum.at(arr, i, [])
          j = i - 1
          while_fun_3 = fn while_fun_3, arr, j ->
            if j >= 0 && Enum.at(arr, j, []) > key do
              arr = List.replace_at(arr, j + 1, Enum.at(arr, j, []))
              j = j - 1
              while_fun_3.(while_fun_3, arr, j)
            else
              {arr, j}
            end
          end
          {arr, _} = try do
              while_fun_3.(while_fun_3, arr, j)
            catch
              {:break, {arr, _}} -> {arr, 0}
            end

          arr = List.replace_at(arr, j + 1, key)
          i = i + 1
          while_fun_2.(while_fun_2, arr, i)
        else
          {arr, i}
        end
      end
      {arr, _} = try do
          while_fun_2.(while_fun_2, arr, i)
        catch
          {:break, {arr, _}} -> {arr, 0}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def join_strings(arr) do
    try do
      res = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, res ->
        if i < _len(arr) do
          res = (res <> Enum.at(arr, i, []))
          i = i + 1
          while_fun_4.(while_fun_4, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun_4.(while_fun_4, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bwt_transform(s) do
    try do
      if s == "" do
        raise("input string must not be empty")
      end
      rotations = all_rotations(s)
      rotations = sort_strings(rotations)
      last_col = []
      i = 0
      while_fun_5 = fn while_fun_5, i, last_col ->
        if i < _len(rotations) do
          word = Enum.at(rotations, i, [])
          last_col = (last_col ++ [_slice(word, _len(word) - 1, _len(word) - (_len(word) - 1))])
          i = i + 1
          while_fun_5.(while_fun_5, i, last_col)
        else
          {i, last_col}
        end
      end
      {_, last_col} = try do
          while_fun_5.(while_fun_5, i, last_col)
        catch
          {:break, {_, last_col}} -> {0, last_col}
        end

      bwt_string = join_strings(last_col)
      idx = index_of(rotations, s)
      throw {:return, %{bwt_string: bwt_string, idx_original_string: idx}}
    catch
      {:return, val} -> val
    end
  end
  def index_of(arr, target) do
    try do
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(arr) do
          if Enum.at(arr, i, []) == target do
            throw {:return, i}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      _ = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def reverse_bwt(bwt_string, idx_original_string) do
    try do
      if bwt_string == "" do
        raise("bwt string must not be empty")
      end
      n = _len(bwt_string)
      if idx_original_string < 0 || idx_original_string >= n do
        raise("index out of range")
      end
      ordered_rotations = []
      i = 0
      while_fun_7 = fn while_fun_7, i, ordered_rotations ->
        if i < n do
          ordered_rotations = (ordered_rotations ++ [""])
          i = i + 1
          while_fun_7.(while_fun_7, i, ordered_rotations)
        else
          {i, ordered_rotations}
        end
      end
      {_, ordered_rotations} = try do
          while_fun_7.(while_fun_7, i, ordered_rotations)
        catch
          {:break, {_, ordered_rotations}} -> {0, ordered_rotations}
        end

      iter = 0
      while_fun_8 = fn while_fun_8, iter, ordered_rotations ->
        if iter < n do
          j = 0
          while_fun_9 = fn while_fun_9, j, ordered_rotations ->
            if j < n do
              ch = _slice(bwt_string, j, j + 1 - (j))
              ordered_rotations = List.replace_at(ordered_rotations, j, (ch <> Enum.at(ordered_rotations, j, [])))
              j = j + 1
              while_fun_9.(while_fun_9, j, ordered_rotations)
            else
              {j, ordered_rotations}
            end
          end
          {_, ordered_rotations} = try do
              while_fun_9.(while_fun_9, j, ordered_rotations)
            catch
              {:break, {_, ordered_rotations}} -> {0, ordered_rotations}
            end

          ordered_rotations = sort_strings(ordered_rotations)
          iter = iter + 1
          while_fun_8.(while_fun_8, iter, ordered_rotations)
        else
          {iter, ordered_rotations}
        end
      end
      {iter, ordered_rotations} = try do
          while_fun_8.(while_fun_8, iter, ordered_rotations)
        catch
          {:break, {iter, ordered_rotations}} -> {iter, ordered_rotations}
        end

      throw {:return, Enum.at(ordered_rotations, idx_original_string, [])}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:s, "^BANANA")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:result, bwt_transform(Process.get(:s)))
    IO.puts(Process.get(:result).bwt_string)
    IO.puts(Process.get(:result).idx_original_string)
    IO.puts(Kernel.inspect(reverse_bwt(Process.get(:result).bwt_string, Process.get(:result).idx_original_string)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
