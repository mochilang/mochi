# Code generated by Mochi transpiler 2025-08-24 15:35 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def list_contains(xs, v) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i, []) == v do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def is_power_of_two(n) do
    try do
      if n < 1 do
        throw {:return, false}
      end
      x = n
      while_fun_2 = fn while_fun_2, x ->
        if x > 1 do
          if rem(x, 2) != 0 do
            throw {:return, false}
          end
          x = div(x, 2)
          while_fun_2.(while_fun_2, x)
        else
          x
        end
      end
      x = try do
          while_fun_2.(while_fun_2, x)
        catch
          {:break, {x}} -> x
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def bin_string(n) do
    try do
      if n == 0 do
        throw {:return, "0"}
      end
      res = ""
      x = n
      while_fun_3 = fn while_fun_3, res, x ->
        if x > 0 do
          bit = rem(x, 2)
          res = (Kernel.to_string(bit) <> res)
          x = div(x, 2)
          while_fun_3.(while_fun_3, res, x)
        else
          {res, x}
        end
      end
      {res, x} = try do
          while_fun_3.(while_fun_3, res, x)
        catch
          {:break, {res, x}} -> {res, x}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def decompress_data(data_bits) do
    try do
      lexicon = %{"0" => "0", "1" => "1"}
      keys = ["0", "1"]
      result = ""
      curr_string = ""
      index = 2
      i = 0
      while_fun_4 = fn while_fun_4, curr_string, i, index, keys, lexicon, result ->
        if i < _len(data_bits) do
          {curr_string, _, index, keys, lexicon, result} = try do
            curr_string = (curr_string <> _slice(data_bits, i, i + 1 - (i)))
            i = if !list_contains(keys, curr_string) do
              i = i + 1
              throw {:continue, {curr_string, i, index, keys, lexicon, result}}
              i
            else
              i
            end
            last_match_id = Map.get(lexicon, curr_string, "")
            result = (result <> last_match_id)
            lexicon = Map.put(lexicon, curr_string, (last_match_id <> "0"))
            {keys, lexicon} = if is_power_of_two(index) do
              new_lex = %{}
              new_keys = []
              j = 0
              while_fun_5 = fn while_fun_5, j, new_keys, new_lex ->
                if j < _len(keys) do
                  curr_key = Enum.at(keys, j, [])
                  new_lex = Map.put(new_lex, ("0" <> curr_key), Map.get(lexicon, curr_key, ""))
                  new_keys = (new_keys ++ [("0" <> curr_key)])
                  j = j + 1
                  while_fun_5.(while_fun_5, j, new_keys, new_lex)
                else
                  {j, new_keys, new_lex}
                end
              end
              {_, new_keys, new_lex} = try do
                  while_fun_5.(while_fun_5, j, new_keys, new_lex)
                catch
                  {:break, {_, new_keys, new_lex}} -> {0, new_keys, new_lex}
                end

              lexicon = new_lex
              keys = new_keys
              {keys, lexicon}
            else
              {keys, lexicon}
            end
            new_key = bin_string(index)
            lexicon = Map.put(lexicon, new_key, (last_match_id <> "1"))
            keys = (keys ++ [new_key])
            index = index + 1
            curr_string = ""
            i = i + 1
            {curr_string, _, index, keys, lexicon, result}
          catch
            {:continue, {curr_string, _, index, keys, lexicon, result}} -> {curr_string, 0, index, keys, lexicon, result}
          end
          while_fun_4.(while_fun_4, curr_string, i, index, keys, lexicon, result)
        else
          {curr_string, i, index, keys, lexicon, result}
        end
      end
      {curr_string, _, index, keys, lexicon, result} = try do
          while_fun_4.(while_fun_4, curr_string, i, index, keys, lexicon, result)
        catch
          {:break, {curr_string, _, index, keys, lexicon, result}} -> {curr_string, 0, index, keys, lexicon, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:sample, "1011001")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:decompressed, decompress_data(Process.get(:sample)))
    Process.put(:decompressed, IO.puts(Process.get(:decompressed)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
