# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def _mod(x, m) do
    try do
      throw {:return, x - (:erlang.float(Kernel.trunc(x / m))) * m}
    catch
      {:return, val} -> val
    end
  end
  def sin(x) do
    try do
      y = _mod(x + Process.get(:pi), Process.get(:two_pi)) - Process.get(:pi)
      y2 = y * y
      y3 = y2 * y
      y5 = y3 * y2
      y7 = y5 * y2
      throw {:return, y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0}
    catch
      {:return, val} -> val
    end
  end
  def deg_to_rad(deg) do
    try do
      throw {:return, deg * Process.get(:pi) / 180.0}
    catch
      {:return, val} -> val
    end
  end
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      {i} = if (:erlang.float(i)) > x do
        i = i - 1
        {i}
      else
        {i}
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def pow10(n) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = result * 10.0
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def round(x, n) do
    try do
      m = pow10(n)
      y = floor(x * m + 0.5)
      throw {:return, y / m}
    catch
      {:return, val} -> val
    end
  end
  def check_args(init_velocity, angle) do
    try do
      if angle > 90.0 || angle < 1.0 do
        raise("Invalid angle. Range is 1-90 degrees.")
      end
      if init_velocity < 0.0 do
        raise("Invalid velocity. Should be a positive number.")
      end
    catch
      {:return, val} -> val
    end
  end
  def horizontal_distance(init_velocity, angle) do
    try do
      check_args(init_velocity, angle)
      radians = deg_to_rad(2.0 * angle)
      throw {:return, round((init_velocity * init_velocity * sin(radians)) / Process.get(:g), 2)}
    catch
      {:return, val} -> val
    end
  end
  def max_height(init_velocity, angle) do
    try do
      check_args(init_velocity, angle)
      radians = deg_to_rad(angle)
      s = sin(radians)
      throw {:return, round((init_velocity * init_velocity * s * s) / (2.0 * Process.get(:g)), 2)}
    catch
      {:return, val} -> val
    end
  end
  def total_time(init_velocity, angle) do
    try do
      check_args(init_velocity, angle)
      radians = deg_to_rad(angle)
      throw {:return, round((2.0 * init_velocity * sin(radians)) / Process.get(:g), 2)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:two_pi, 6.283185307179586)
  Process.put(:g, 9.80665)
  Process.put(:v0, 25.0)
  Process.put(:angle, 20.0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(horizontal_distance(Process.get(:v0), Process.get(:angle))))
    IO.puts(Kernel.inspect(max_height(Process.get(:v0), Process.get(:angle))))
    IO.puts(Kernel.inspect(total_time(Process.get(:v0), Process.get(:angle))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
