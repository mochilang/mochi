# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  def format2(x) do
    try do
      sign = (if x < 0.0, do: "-", else: "")
      y = (if x < 0.0, do: -x, else: x)
      m = 100.0
      scaled = y * m
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(scaled)
      {i} = if scaled - (:erlang.float(i)) >= 0.5 do
        i = i + 1
        {i}
      else
        {i}
      end
      int_part = div(i, 100)
      frac_part = rem(i, 100)
      frac_str = Kernel.to_string(frac_part)
      {frac_str} = if frac_part < 10 do
        frac_str = ("0" <> frac_str)
        {frac_str}
      else
        {frac_str}
      end
      throw {:return, (((sign <> Kernel.to_string(int_part)) <> ".") <> frac_str)}
    catch
      {:return, val} -> val
    end
  end
  def coulombs_law(q1, q2, radius) do
    try do
      if radius <= 0.0 do
        raise("radius must be positive")
      end
      force = Process.get(:k) * q1 * q2 / (radius * radius)
      throw {:return, force}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:k, 8987551792.3)
  def main() do
    IO.puts(Kernel.inspect(format2(coulombs_law(15.5, 20.0, 15.0))))
    IO.puts(Kernel.inspect(format2(coulombs_law(1.0, 15.0, 5.0))))
    IO.puts(Kernel.inspect(format2(coulombs_law(20.0, -50.0, 15.0))))
    IO.puts(Kernel.inspect(format2(coulombs_law(-5.0, -8.0, 10.0))))
    IO.puts(Kernel.inspect(format2(coulombs_law(50.0, 100.0, 50.0))))
  end
end
Main.main()
