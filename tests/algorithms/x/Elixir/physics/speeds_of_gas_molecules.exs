# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def sqrt(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def avg_speed_of_molecule(temperature, molar_mass) do
    try do
      if temperature < 0.0 do
        raise("Absolute temperature cannot be less than 0 K")
      end
      if molar_mass <= 0.0 do
        raise("Molar mass should be greater than 0 kg/mol")
      end
      expr = 8.0 * Process.get(:r) * temperature / (Process.get(:pi) * molar_mass)
      s = sqrt(expr)
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def mps_speed_of_molecule(temperature, molar_mass) do
    try do
      if temperature < 0.0 do
        raise("Absolute temperature cannot be less than 0 K")
      end
      if molar_mass <= 0.0 do
        raise("Molar mass should be greater than 0 kg/mol")
      end
      expr = 2.0 * Process.get(:r) * temperature / molar_mass
      s = sqrt(expr)
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:r, 8.31446261815324)
  def main() do
    IO.puts(Kernel.inspect(avg_speed_of_molecule(273.0, 0.028)))
    IO.puts(Kernel.inspect(avg_speed_of_molecule(300.0, 0.032)))
    IO.puts(Kernel.inspect(mps_speed_of_molecule(273.0, 0.028)))
    IO.puts(Kernel.inspect(mps_speed_of_molecule(300.0, 0.032)))
  end
end
Main.main()
