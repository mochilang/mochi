# Code generated by Mochi transpiler 2025-08-12 10:04 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  def centripetal(mass, velocity, radius) do
    try do
      if mass < 0.0 do
        raise("The mass of the body cannot be negative")
      end
      if radius <= 0.0 do
        raise("The radius is always a positive non zero integer")
      end
      throw {:return, mass * velocity * velocity / radius}
    catch
      {:return, val} -> val
    end
  end
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      {i} = if (:erlang.float(i)) > x do
        i = i - 1
        {i}
      else
        {i}
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def pow10(n) do
    try do
      p = 1.0
      i = 0
      while_fun = fn while_fun, i, p ->
        if i < n do
          p = p * 10.0
          i = i + 1
          while_fun.(while_fun, i, p)
        else
          {i, p}
        end
      end
      {i, p} = try do
          while_fun.(while_fun, i, p)
        catch
          {:break, {i, p}} -> {i, p}
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def round(x, n) do
    try do
      m = pow10(n)
      throw {:return, floor(x * m + 0.5) / m}
    catch
      {:return, val} -> val
    end
  end
  def show(mass, velocity, radius) do
    try do
      f = centripetal(mass, velocity, radius)
      IO.puts(Kernel.inspect(round(f, 2)))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    show(15.5, -30.0, 10.0)
    show(10.0, 15.0, 5.0)
    show(20.0, -50.0, 15.0)
    show(12.25, 40.0, 25.0)
    show(50.0, 100.0, 50.0)
  end
end
Main.main()
