# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def sqrtApprox(x) do
    try do
      if x == 0.0 do
        throw {:return, 0.0}
      end
      guess = x / 2.0
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def speed_of_sound_in_a_fluid(density, bulk_modulus) do
    try do
      if density <= 0.0 do
        raise("Impossible fluid density")
      end
      if bulk_modulus <= 0.0 do
        raise("Impossible bulk modulus")
      end
      throw {:return, sqrtApprox(bulk_modulus / density)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(speed_of_sound_in_a_fluid(998.0, 2150000000.0)))
    IO.puts(Kernel.inspect(speed_of_sound_in_a_fluid(13600.0, 28500000000.0)))
  end
end
Main.main()
