# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def archimedes_principle(fluid_density, volume, gravity) do
    try do
      if fluid_density <= 0.0 do
        raise("Impossible fluid density")
      end
      if volume <= 0.0 do
        raise("Impossible object volume")
      end
      if gravity < 0.0 do
        raise("Impossible gravity")
      end
      throw {:return, fluid_density * volume * gravity}
    catch
      {:return, val} -> val
    end
  end
  def archimedes_principle_default(fluid_density, volume) do
    try do
      res = archimedes_principle(fluid_density, volume, Process.get(:g))
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g, 9.80665)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
