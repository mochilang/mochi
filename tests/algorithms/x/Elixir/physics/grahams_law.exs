# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def to_float(x) do
    try do
      throw {:return, x * 1.0}
    catch
      {:return, val} -> val
    end
  end
  def round6(x) do
    try do
      factor = 1000000.0
      throw {:return, to_float(Kernel.trunc(x * factor + 0.5)) / factor}
    catch
      {:return, val} -> val
    end
  end
  def sqrtApprox(x) do
    try do
      guess = x / 2.0
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def validate(values) do
    try do
      if _len(values) == 0 do
        throw {:return, false}
      end
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(values) do
          if Enum.at(values, i, []) <= 0.0 do
            throw {:return, false}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def effusion_ratio(m1, m2) do
    try do
      if !validate([m1, m2]) do
        IO.puts("ValueError: Molar mass values must greater than 0.")
        throw {:return, 0.0}
      end
      throw {:return, round6(sqrtApprox(m2 / m1))}
    catch
      {:return, val} -> val
    end
  end
  def first_effusion_rate(rate, m1, m2) do
    try do
      if !validate([rate, m1, m2]) do
        IO.puts("ValueError: Molar mass and effusion rate values must greater than 0.")
        throw {:return, 0.0}
      end
      throw {:return, round6(rate * sqrtApprox(m2 / m1))}
    catch
      {:return, val} -> val
    end
  end
  def second_effusion_rate(rate, m1, m2) do
    try do
      if !validate([rate, m1, m2]) do
        IO.puts("ValueError: Molar mass and effusion rate values must greater than 0.")
        throw {:return, 0.0}
      end
      throw {:return, round6(rate / sqrtApprox(m2 / m1))}
    catch
      {:return, val} -> val
    end
  end
  def first_molar_mass(mass, r1, r2) do
    try do
      if !validate([mass, r1, r2]) do
        IO.puts("ValueError: Molar mass and effusion rate values must greater than 0.")
        throw {:return, 0.0}
      end
      ratio = r1 / r2
      throw {:return, round6(mass / (ratio * ratio))}
    catch
      {:return, val} -> val
    end
  end
  def second_molar_mass(mass, r1, r2) do
    try do
      if !validate([mass, r1, r2]) do
        IO.puts("ValueError: Molar mass and effusion rate values must greater than 0.")
        throw {:return, 0.0}
      end
      ratio = r1 / r2
      throw {:return, round6((ratio * ratio) / mass)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(effusion_ratio(2.016, 4.002)))
    IO.puts(Kernel.inspect(first_effusion_rate(1.0, 2.016, 4.002)))
    IO.puts(Kernel.inspect(second_effusion_rate(1.0, 2.016, 4.002)))
    IO.puts(Kernel.inspect(first_molar_mass(2.0, 1.408943, 0.709752)))
    IO.puts(Kernel.inspect(second_molar_mass(2.0, 1.408943, 0.709752)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
