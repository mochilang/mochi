# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def pressure_of_gas_system(moles, kelvin, volume) do
    try do
      if moles < 0 || kelvin < 0 || volume < 0 do
        raise("Invalid inputs. Enter positive value.")
      end
      throw {:return, moles * kelvin * Process.get(:universal_gas_constant) / volume}
    catch
      {:return, val} -> val
    end
  end
  def volume_of_gas_system(moles, kelvin, pressure) do
    try do
      if moles < 0 || kelvin < 0 || pressure < 0 do
        raise("Invalid inputs. Enter positive value.")
      end
      throw {:return, moles * kelvin * Process.get(:universal_gas_constant) / pressure}
    catch
      {:return, val} -> val
    end
  end
  def temperature_of_gas_system(moles, volume, pressure) do
    try do
      if moles < 0 || volume < 0 || pressure < 0 do
        raise("Invalid inputs. Enter positive value.")
      end
      throw {:return, pressure * volume / (moles * Process.get(:universal_gas_constant))}
    catch
      {:return, val} -> val
    end
  end
  def moles_of_gas_system(kelvin, volume, pressure) do
    try do
      if kelvin < 0 || volume < 0 || pressure < 0 do
        raise("Invalid inputs. Enter positive value.")
      end
      throw {:return, pressure * volume / (kelvin * Process.get(:universal_gas_constant))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:universal_gas_constant, 8.314462)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(pressure_of_gas_system(2.0, 100.0, 5.0)))
    IO.puts(Kernel.inspect(volume_of_gas_system(0.5, 273.0, 0.004)))
    IO.puts(Kernel.inspect(temperature_of_gas_system(2.0, 100.0, 5.0)))
    IO.puts(Kernel.inspect(moles_of_gas_system(100.0, 5.0, 10.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
