# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  def pow10(n) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = result * 10.0
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def sqrt(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun_2 = fn while_fun_2, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun_2.(while_fun_2, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun_2.(while_fun_2, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def abs_(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def capture_radii(target_body_radius, target_body_mass, projectile_velocity) do
    try do
      if target_body_mass < 0.0 do
        raise("Mass cannot be less than 0")
      end
      if target_body_radius < 0.0 do
        raise("Radius cannot be less than 0")
      end
      if projectile_velocity > Process.get(:c) do
        raise("Cannot go beyond speed of light")
      end
      escape_velocity_squared = (2.0 * Process.get(:g) * target_body_mass) / target_body_radius
      denom = projectile_velocity * projectile_velocity
      capture_radius = target_body_radius * sqrt(1.0 + escape_velocity_squared / denom)
      throw {:return, capture_radius}
    catch
      {:return, val} -> val
    end
  end
  def capture_area(capture_radius) do
    try do
      if capture_radius < 0.0 do
        raise("Cannot have a capture radius less than 0")
      end
      sigma = Process.get(:pi) * capture_radius * capture_radius
      throw {:return, sigma}
    catch
      {:return, val} -> val
    end
  end
  def run_tests() do
    try do
      r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0)
      if abs_(r - 1.720959069143714 * pow10(10)) > 1.0 do
        raise("capture_radii failed")
      end
      a = capture_area(r)
      if abs_(a - 9.304455331801812 * pow10(20)) > 1.0 do
        raise("capture_area failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      run_tests()
      r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0)
      IO.puts(Kernel.to_string(r))
      IO.puts(Kernel.inspect(capture_area(r)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g, 0.000000000066743)
  Process.put(:c, 299792458.0)
  Process.put(:pi, 3.141592653589793)
end
Main.main()
