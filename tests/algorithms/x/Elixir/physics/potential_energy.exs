# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def potential_energy(mass, height) do
    try do
      if mass < 0.0 do
        raise("The mass of a body cannot be negative")
      end
      if height < 0.0 do
        raise("The height above the ground cannot be negative")
      end
      throw {:return, mass * Process.get(:g) * height}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g, 9.80665)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(potential_energy(10.0, 10.0)))
    IO.puts(Kernel.inspect(potential_energy(10.0, 5.0)))
    IO.puts(Kernel.inspect(potential_energy(2.0, 8.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
