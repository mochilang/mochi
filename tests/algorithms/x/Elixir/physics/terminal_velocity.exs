# Code generated by Mochi transpiler 2025-08-12 10:04 +0700
defmodule Main do
  def sqrt(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 10 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def terminal_velocity(mass, density, area, drag_coefficient) do
    try do
      if mass <= 0.0 || density <= 0.0 || area <= 0.0 || drag_coefficient <= 0.0 do
        raise("mass, density, area and the drag coefficient all need to be positive")
      end
      numerator = 2.0 * mass * Process.get(:g)
      denominator = density * area * drag_coefficient
      result = sqrt(numerator / denominator)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g, 9.80665)
  def main() do
    IO.puts(Kernel.inspect(terminal_velocity(1.0, 25.0, 0.6, 0.77)))
    IO.puts(Kernel.inspect(terminal_velocity(2.0, 100.0, 0.45, 0.23)))
    IO.puts(Kernel.inspect(terminal_velocity(5.0, 50.0, 0.2, 0.5)))
  end
end
Main.main()
