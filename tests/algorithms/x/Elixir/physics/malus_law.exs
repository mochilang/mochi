# Code generated by Mochi transpiler 2025-08-12 10:04 +0700
defmodule Main do
  def _mod(x, m) do
    try do
      throw {:return, x - Kernel.floor(x / m) * m}
    catch
      {:return, val} -> val
    end
  end
  def cos(x) do
    try do
      y = _mod(x + Process.get(:pi), Process.get(:two_pi)) - Process.get(:pi)
      y2 = y * y
      y4 = y2 * y2
      y6 = y4 * y2
      throw {:return, 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0}
    catch
      {:return, val} -> val
    end
  end
  def radians(deg) do
    try do
      throw {:return, deg * Process.get(:pi) / 180.0}
    catch
      {:return, val} -> val
    end
  end
  def abs_val(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def malus_law(initial_intensity, angle) do
    try do
      if initial_intensity < 0.0 do
        raise("The value of intensity cannot be negative")
      end
      if angle < 0.0 || angle > 360.0 do
        raise("In Malus Law, the angle is in the range 0-360 degrees")
      end
      theta = radians(angle)
      c = cos(theta)
      throw {:return, initial_intensity * (c * c)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(malus_law(100.0, 60.0)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:two_pi, 6.283185307179586)
end
Main.main()
