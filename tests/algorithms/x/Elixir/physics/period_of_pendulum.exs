# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def sqrt(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 10 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def period_of_pendulum(length) do
    try do
      if length < 0.0 do
        raise("The length should be non-negative")
      end
      throw {:return, 2.0 * Process.get(:pi) * sqrt(length / Process.get(:g))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:g, 9.80665)
  def main() do
    IO.puts(Kernel.inspect(period_of_pendulum(1.23)))
    IO.puts(Kernel.inspect(period_of_pendulum(2.37)))
    IO.puts(Kernel.inspect(period_of_pendulum(5.63)))
    IO.puts(Kernel.inspect(period_of_pendulum(0.0)))
  end
end
Main.main()
