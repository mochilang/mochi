# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def newtons_second_law_of_motion(mass, acceleration) do
    try do
      throw {:return, ((if mass < 0.0 || acceleration < 0.0, do: 0.0, else: mass * acceleration))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:mass, 12.5)
  Process.put(:acceleration, 10.0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:force, newtons_second_law_of_motion(Process.get(:mass), Process.get(:acceleration)))
    IO.puts((("The force is " <> String.trim_trailing(Kernel.to_string(Process.get(:force)), ".0")) <> " N"))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
