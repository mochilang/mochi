# Code generated by Mochi transpiler 2025-08-12 10:04 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pow(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def sqrt_approx(x) do
    try do
      if x == 0.0 do
        throw {:return, 0.0}
      end
      guess = x / 2.0
      i = 0
      while_fun_2 = fn while_fun_2, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun_2.(while_fun_2, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun_2.(while_fun_2, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def hubble_parameter(hubble_constant, radiation_density, matter_density, dark_energy, redshift) do
    try do
      parameters = [redshift, radiation_density, matter_density, dark_energy]
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(parameters) do
          if Enum.at(parameters, i, []) < 0.0 do
            raise("All input parameters must be positive")
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      i = 1
      while_fun_4 = fn while_fun_4, i ->
        if i < 4 do
          if Enum.at(parameters, i, []) > 1.0 do
            raise("Relative densities cannot be greater than one")
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      curvature = 1.0 - (matter_density + radiation_density + dark_energy)
      zp1 = redshift + 1.0
      e2 = radiation_density * pow(zp1, 4) + matter_density * pow(zp1, 3) + curvature * pow(zp1, 2) + dark_energy
      throw {:return, hubble_constant * sqrt_approx(e2)}
    catch
      {:return, val} -> val
    end
  end
  def test_hubble_parameter() do
    try do
      h = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)
      if h < 68.2999 || h > 68.3001 do
        raise("hubble_parameter test failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_hubble_parameter()
      IO.puts(Kernel.inspect(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
