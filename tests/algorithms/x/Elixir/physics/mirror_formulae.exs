# Code generated by Mochi transpiler 2025-08-12 10:04 +0700
defmodule Main do
  def abs_float(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def isclose(a, b, tolerance) do
    try do
      throw {:return, abs_float(a - b) < tolerance}
    catch
      {:return, val} -> val
    end
  end
  def focal_length(distance_of_object, distance_of_image) do
    try do
      if distance_of_object == 0.0 || distance_of_image == 0.0 do
        raise("Invalid inputs. Enter non zero values with respect to the sign convention.")
      end
      throw {:return, 1.0 / ((1.0 / distance_of_object) + (1.0 / distance_of_image))}
    catch
      {:return, val} -> val
    end
  end
  def object_distance(focal_length, distance_of_image) do
    try do
      if distance_of_image == 0.0 || focal_length == 0.0 do
        raise("Invalid inputs. Enter non zero values with respect to the sign convention.")
      end
      throw {:return, 1.0 / ((1.0 / focal_length) - (1.0 / distance_of_image))}
    catch
      {:return, val} -> val
    end
  end
  def image_distance(focal_length, distance_of_object) do
    try do
      if distance_of_object == 0.0 || focal_length == 0.0 do
        raise("Invalid inputs. Enter non zero values with respect to the sign convention.")
      end
      throw {:return, 1.0 / ((1.0 / focal_length) - (1.0 / distance_of_object))}
    catch
      {:return, val} -> val
    end
  end
  def test_focal_length() do
    try do
      f1 = focal_length(10.0, 20.0)
      if !isclose(f1, 6.66666666666666, 0.00000001) do
        raise("focal_length test1 failed")
      end
      f2 = focal_length(9.5, 6.7)
      if !isclose(f2, 3.929012346, 0.00000001) do
        raise("focal_length test2 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def test_object_distance() do
    try do
      u1 = object_distance(30.0, 20.0)
      if !isclose(u1, -60.0, 0.00000001) do
        raise("object_distance test1 failed")
      end
      u2 = object_distance(10.5, 11.7)
      if !isclose(u2, 102.375, 0.00000001) do
        raise("object_distance test2 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def test_image_distance() do
    try do
      v1 = image_distance(10.0, 40.0)
      if !isclose(v1, 13.33333333, 0.00000001) do
        raise("image_distance test1 failed")
      end
      v2 = image_distance(1.5, 6.7)
      if !isclose(v2, 1.932692308, 0.00000001) do
        raise("image_distance test2 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_focal_length()
      test_object_distance()
      test_image_distance()
      IO.puts(Kernel.inspect(focal_length(10.0, 20.0)))
      IO.puts(Kernel.inspect(object_distance(30.0, 20.0)))
      IO.puts(Kernel.inspect(image_distance(10.0, 40.0)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
