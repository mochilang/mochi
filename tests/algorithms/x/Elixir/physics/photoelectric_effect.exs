# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def pow10(exp) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * 10.0
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def maximum_kinetic_energy(frequency, work_function, in_ev) do
    try do
      if frequency < 0.0 do
        raise("Frequency can't be negative.")
      end
      energy = (if in_ev, do: Process.get(:planck_constant_evs) * frequency - work_function, else: Process.get(:planck_constant_js) * frequency - work_function)
      if energy > 0.0 do
        throw {:return, energy}
      end
      throw {:return, 0.0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:planck_constant_js, 6.6261 / pow10(34))
    Process.put(:planck_constant_evs, 4.1357 / pow10(15))
    IO.puts(Kernel.inspect(maximum_kinetic_energy(1000000.0, 2.0, false)))
    IO.puts(Kernel.inspect(maximum_kinetic_energy(1000000.0, 2.0, true)))
    IO.puts(Kernel.inspect(maximum_kinetic_energy(10000000000000000.0, 2.0, true)))
  end
end
Main.main()
