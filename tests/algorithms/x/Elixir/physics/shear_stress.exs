# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def shear_stress(stress, tangential_force, area) do
    try do
      zeros = 0
      zeros = if stress == 0.0 do
        zeros = zeros + 1
        zeros
      else
        zeros
      end
      zeros = if tangential_force == 0.0 do
        zeros = zeros + 1
        zeros
      else
        zeros
      end
      zeros = if area == 0.0 do
        zeros = zeros + 1
        zeros
      else
        zeros
      end
      if zeros != 1 do
        raise("You cannot supply more or less than 2 values")
      else
        if stress < 0.0 do
          raise("Stress cannot be negative")
        else
          if tangential_force < 0.0 do
            raise("Tangential Force cannot be negative")
          else
            if area < 0.0 do
              raise("Area cannot be negative")
            else
              if stress == 0.0 do
                throw {:return, %{name: "stress", value: tangential_force / area}}
              else
                if tangential_force == 0.0 do
                  throw {:return, %{name: "tangential_force", value: stress * area}}
                else
                  throw {:return, %{name: "area", value: tangential_force / stress}}
                end
              end
            end
          end
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def str_result(r) do
    try do
      throw {:return, (((("Result(name='" <> r.name) <> "', value=") <> String.trim_trailing(Kernel.to_string(r.value), ".0")) <> ")")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:r1, shear_stress(25.0, 100.0, 0.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r1))))
    Process.put(:r2, shear_stress(0.0, 1600.0, 200.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r2))))
    Process.put(:r3, shear_stress(1000.0, 0.0, 1200.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r3))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
