# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def to_float(x) do
    try do
      throw {:return, x * 1.0}
    catch
      {:return, val} -> val
    end
  end
  def ln(x) do
    try do
      if x <= 0.0 do
        raise("ln domain error")
      end
      y = (x - 1.0) / (x + 1.0)
      y2 = y * y
      term = y
      sum = 0.0
      k = 0
      while_fun = fn while_fun, k, sum, term ->
        if k < 10 do
          denom = to_float(2 * k + 1)
          sum = sum + term / denom
          term = term * y2
          k = k + 1
          while_fun.(while_fun, k, sum, term)
        else
          {k, sum, term}
        end
      end
      {k, sum, term} = try do
          while_fun.(while_fun, k, sum, term)
        catch
          {:break, {k, sum, term}} -> {k, sum, term}
        end

      throw {:return, 2.0 * sum}
    catch
      {:return, val} -> val
    end
  end
  def exp(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun_2 = fn while_fun_2, n, sum, term ->
        if n < 20 do
          term = term * x / to_float(n)
          sum = sum + term
          n = n + 1
          while_fun_2.(while_fun_2, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun_2.(while_fun_2, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def pow_float(base, exponent) do
    try do
      throw {:return, exp(exponent * ln(base))}
    catch
      {:return, val} -> val
    end
  end
  def get_altitude_at_pressure(pressure) do
    try do
      if pressure > 101325.0 do
        raise("Value Higher than Pressure at Sea Level !")
      end
      if pressure < 0.0 do
        raise("Atmospheric Pressure can not be negative !")
      end
      ratio = pressure / 101325.0
      throw {:return, 44330.0 * (1.0 - pow_float(ratio, 1.0 / 5.5255))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(get_altitude_at_pressure(100000.0)))
    IO.puts(Kernel.inspect(get_altitude_at_pressure(101325.0)))
    IO.puts(Kernel.inspect(get_altitude_at_pressure(80000.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
