# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def fabs(x) do
    try do
      if x < 0.0 do
        throw {:return, -x}
      else
        throw {:return, x}
      end
    catch
      {:return, val} -> val
    end
  end
  def reynolds_number(density, velocity, diameter, viscosity) do
    try do
      if density <= 0.0 || diameter <= 0.0 || viscosity <= 0.0 do
        raise("please ensure that density, diameter and viscosity are positive")
      end
      throw {:return, (density * fabs(velocity) * diameter) / viscosity}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(reynolds_number(900.0, 2.5, 0.05, 0.4)))
    IO.puts(Kernel.inspect(reynolds_number(450.0, 3.86, 0.078, 0.23)))
    IO.puts(Kernel.inspect(reynolds_number(234.0, -4.5, 0.3, 0.44)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
