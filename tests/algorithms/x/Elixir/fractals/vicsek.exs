# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def repeat_char(c, count) do
    try do
      s = ""
      i = 0
      while_fun = fn while_fun, i, s ->
        if i < count do
          s = (s <> c)
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def vicsek(order) do
    try do
      if order == 0 do
        throw {:return, ["#"]}
      end
      prev = vicsek(order - 1)
      size = _len(prev)
      blank = repeat_char(" ", size)
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < size do
          result = (result ++ [((blank <> Enum.at(prev, i, [])) <> blank)])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < size do
          result = (result ++ [((Enum.at(prev, i, []) <> Enum.at(prev, i, [])) <> Enum.at(prev, i, []))])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      i = 0
      while_fun_4 = fn while_fun_4, i, result ->
        if i < size do
          result = (result ++ [((blank <> Enum.at(prev, i, [])) <> blank)])
          i = i + 1
          while_fun_4.(while_fun_4, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_4.(while_fun_4, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def print_pattern(pattern) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(pattern) do
          IO.puts(Enum.at(pattern, i, []))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      depth = 3
      pattern = vicsek(depth)
      print_pattern(pattern)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
