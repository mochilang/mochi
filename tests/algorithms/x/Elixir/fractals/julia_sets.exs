# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def complex_add(a, b) do
    try do
      throw {:return, %{re: a.re + b.re, im: a.im + b.im}}
    catch
      {:return, val} -> val
    end
  end
  def complex_mul(a, b) do
    try do
      real = a.re * b.re - a.im * b.im
      imag = a.re * b.im + a.im * b.re
      throw {:return, %{re: real, im: imag}}
    catch
      {:return, val} -> val
    end
  end
  def sqrtApprox(x) do
    try do
      guess = x / 2.0
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def complex_abs(a) do
    try do
      throw {:return, sqrtApprox(a.re * a.re + a.im * a.im)}
    catch
      {:return, val} -> val
    end
  end
  def sin_taylor(x) do
    try do
      term = x
      sum = x
      i = 1
      while_fun_2 = fn while_fun_2, i, sum, term ->
        if i < 10 do
          k1 = 2.0 * (:erlang.float(i))
          k2 = 2.0 * (:erlang.float(i)) + 1.0
          term = -term * x * x / (k1 * k2)
          sum = sum + term
          i = i + 1
          while_fun_2.(while_fun_2, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_2.(while_fun_2, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def cos_taylor(x) do
    try do
      term = 1.0
      sum = 1.0
      i = 1
      while_fun_3 = fn while_fun_3, i, sum, term ->
        if i < 10 do
          k1 = 2.0 * (:erlang.float(i)) - 1.0
          k2 = 2.0 * (:erlang.float(i))
          term = -term * x * x / (k1 * k2)
          sum = sum + term
          i = i + 1
          while_fun_3.(while_fun_3, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_3.(while_fun_3, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def exp_taylor(x) do
    try do
      term = 1.0
      sum = 1.0
      i = 1.0
      while_fun_4 = fn while_fun_4, i, sum, term ->
        if i < 20.0 do
          term = term * x / i
          sum = sum + term
          i = i + 1.0
          while_fun_4.(while_fun_4, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_4.(while_fun_4, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def complex_exp(z) do
    try do
      e = exp_taylor(z.re)
      throw {:return, %{re: e * cos_taylor(z.im), im: e * sin_taylor(z.im)}}
    catch
      {:return, val} -> val
    end
  end
  def eval_quadratic(c, z) do
    try do
      throw {:return, complex_add(complex_mul(z, z), c)}
    catch
      {:return, val} -> val
    end
  end
  def eval_exponential(c, z) do
    try do
      throw {:return, complex_add(complex_exp(z), c)}
    catch
      {:return, val} -> val
    end
  end
  def iterate_function(eval_function, c, nb_iterations, z0, infinity) do
    try do
      z_n = z0
      i = 0
      while_fun_5 = fn while_fun_5, i, z_n ->
        if i < nb_iterations do
          z_n = eval_function.(c, z_n)
          if complex_abs(z_n) > infinity do
            throw {:return, z_n}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, z_n)
        else
          {i, z_n}
        end
      end
      {i, z_n} = try do
          while_fun_5.(while_fun_5, i, z_n)
        catch
          {:break, {i, z_n}} -> {i, z_n}
        end

      throw {:return, z_n}
    catch
      {:return, val} -> val
    end
  end
  def prepare_grid(window_size, nb_pixels) do
    try do
      grid = []
      i = 0
      while_fun_6 = fn while_fun_6, grid, i ->
        if i < nb_pixels do
          row = []
          j = 0
          while_fun_7 = fn while_fun_7, j, row ->
            if j < nb_pixels do
              real = -window_size + 2.0 * window_size * (:erlang.float(i)) / (:erlang.float((nb_pixels - 1)))
              imag = -window_size + 2.0 * window_size * (:erlang.float(j)) / (:erlang.float((nb_pixels - 1)))
              row = (row ++ [%{re: real, im: imag}])
              j = j + 1
              while_fun_7.(while_fun_7, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_7.(while_fun_7, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          grid = (grid ++ [row])
          i = i + 1
          while_fun_6.(while_fun_6, grid, i)
        else
          {grid, i}
        end
      end
      {grid, i} = try do
          while_fun_6.(while_fun_6, grid, i)
        catch
          {:break, {grid, i}} -> {grid, i}
        end

      throw {:return, grid}
    catch
      {:return, val} -> val
    end
  end
  def julia_demo() do
    try do
      grid = prepare_grid(1.0, 5)
      c_poly = %{re: -0.4, im: 0.6}
      c_exp = %{re: -2.0, im: 0.0}
      poly_result = []
      exp_result = []
      y = 0
      while_fun_8 = fn while_fun_8, exp_result, poly_result, y ->
        if y < _len(grid) do
          row_poly = []
          row_exp = []
          x = 0
          while_fun_9 = fn while_fun_9, row_exp, row_poly, x ->
            if x < _len(Enum.at(grid, y, [])) do
              z0 = Enum.at(Enum.at(grid, y, []), x, 0)
              z_poly = iterate_function(&eval_quadratic/2, c_poly, 20, z0, 4.0)
              z_exp = iterate_function(&eval_exponential/2, c_exp, 10, z0, 10000000000.0)
              row_poly = (row_poly ++ [(if complex_abs(z_poly) < 2.0, do: 1, else: 0)])
              row_exp = (row_exp ++ [(if complex_abs(z_exp) < 10000.0, do: 1, else: 0)])
              x = x + 1
              while_fun_9.(while_fun_9, row_exp, row_poly, x)
            else
              {row_exp, row_poly, x}
            end
          end
          {row_exp, row_poly, x} = try do
              while_fun_9.(while_fun_9, row_exp, row_poly, x)
            catch
              {:break, {row_exp, row_poly, x}} -> {row_exp, row_poly, x}
            end

          poly_result = (poly_result ++ [row_poly])
          exp_result = (exp_result ++ [row_exp])
          y = y + 1
          while_fun_8.(while_fun_8, exp_result, poly_result, y)
        else
          {exp_result, poly_result, y}
        end
      end
      {exp_result, poly_result, y} = try do
          while_fun_8.(while_fun_8, exp_result, poly_result, y)
        catch
          {:break, {exp_result, poly_result, y}} -> {exp_result, poly_result, y}
        end

      IO.puts(Kernel.inspect(poly_result))
      IO.puts(Kernel.inspect(exp_result))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    julia_demo()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
