# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def get_mid(p1, p2) do
    try do
      throw {:return, %{x: div((p1.x + p2.x), 2), y: div((p1.y + p2.y), 2)}}
    catch
      {:return, val} -> val
    end
  end
  def point_to_string(p) do
    try do
      throw {:return, (((("(" <> Kernel.to_string(p.x)) <> ",") <> Kernel.to_string(p.y)) <> ")")}
    catch
      {:return, val} -> val
    end
  end
  def triangle(v1, v2, v3, depth) do
    try do
      IO.puts(Kernel.inspect(((((point_to_string(v1) <> " ") <> point_to_string(v2)) <> " ") <> point_to_string(v3))))
      if depth == 0 do
        throw {:return, nil}
      end
      triangle(v1, get_mid(v1, v2), get_mid(v1, v3), depth - 1)
      triangle(v2, get_mid(v1, v2), get_mid(v2, v3), depth - 1)
      triangle(v3, get_mid(v3, v2), get_mid(v1, v3), depth - 1)
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    triangle(%{x: -175, y: -125}, %{x: 0, y: 175}, %{x: 175, y: -125}, 2)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
