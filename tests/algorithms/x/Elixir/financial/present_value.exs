# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def powf(base, exponent) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exponent do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def round2(value) do
    try do
      if value >= 0.0 do
        scaled = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((value * 100.0 + 0.5))
        throw {:return, (:erlang.float(scaled)) / 100.0}
      end
      scaled = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((value * 100.0 - 0.5))
      throw {:return, (:erlang.float(scaled)) / 100.0}
    catch
      {:return, val} -> val
    end
  end
  def present_value(discount_rate, cash_flows) do
    try do
      if discount_rate < 0.0 do
        raise("Discount rate cannot be negative")
      end
      if _len(cash_flows) == 0 do
        raise("Cash flows list cannot be empty")
      end
      pv = 0.0
      i = 0
      factor = 1.0 + discount_rate
      while_fun_2 = fn while_fun_2, i, pv ->
        if i < _len(cash_flows) do
          cf = Enum.at(cash_flows, i, [])
          pv = pv + cf / powf(factor, i)
          i = i + 1
          while_fun_2.(while_fun_2, i, pv)
        else
          {i, pv}
        end
      end
      {i, pv} = try do
          while_fun_2.(while_fun_2, i, pv)
        catch
          {:break, {i, pv}} -> {i, pv}
        end

      throw {:return, round2(pv)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(present_value(0.13, [10.0, 20.7, -293.0, 297.0])))
    IO.puts(Kernel.inspect(present_value(0.07, [-109129.39, 30923.23, 15098.93, 29734.0, 39.0])))
    IO.puts(Kernel.inspect(present_value(0.07, [109129.39, 30923.23, 15098.93, 29734.0, 39.0])))
  end
end
Main.main()
