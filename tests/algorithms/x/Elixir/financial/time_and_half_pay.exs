# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def pay(hours_worked, pay_rate, hours) do
    try do
      normal_pay = hours_worked * pay_rate
      over_time = hours_worked - hours
      over_time = if over_time < 0.0 do
        over_time = 0.0
        over_time
      else
        over_time
      end
      over_time_pay = over_time * pay_rate / 2.0
      throw {:return, normal_pay + over_time_pay}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(pay(41.0, 1.0, 40.0)))
      IO.puts(Kernel.inspect(pay(65.0, 19.0, 40.0)))
      IO.puts(Kernel.inspect(pay(10.0, 1.0, 40.0)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
