# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  def panic(msg) do
    try do
      IO.puts(msg)
    catch
      {:return, val} -> val
    end
  end
  def powf(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(exp) do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def simple_interest(principal, daily_rate, days) do
    try do
      if days <= 0.0 do
        panic("days_between_payments must be > 0")
        throw {:return, 0.0}
      end
      if daily_rate < 0.0 do
        panic("daily_interest_rate must be >= 0")
        throw {:return, 0.0}
      end
      if principal <= 0.0 do
        panic("principal must be > 0")
        throw {:return, 0.0}
      end
      throw {:return, principal * daily_rate * days}
    catch
      {:return, val} -> val
    end
  end
  def compound_interest(principal, nominal_rate, periods) do
    try do
      if periods <= 0.0 do
        panic("number_of_compounding_periods must be > 0")
        throw {:return, 0.0}
      end
      if nominal_rate < 0.0 do
        panic("nominal_annual_interest_rate_percentage must be >= 0")
        throw {:return, 0.0}
      end
      if principal <= 0.0 do
        panic("principal must be > 0")
        throw {:return, 0.0}
      end
      throw {:return, principal * (powf(1.0 + nominal_rate, periods) - 1.0)}
    catch
      {:return, val} -> val
    end
  end
  def apr_interest(principal, apr, years) do
    try do
      if years <= 0.0 do
        panic("number_of_years must be > 0")
        throw {:return, 0.0}
      end
      if apr < 0.0 do
        panic("nominal_annual_percentage_rate must be >= 0")
        throw {:return, 0.0}
      end
      if principal <= 0.0 do
        panic("principal must be > 0")
        throw {:return, 0.0}
      end
      throw {:return, compound_interest(principal, apr / 365.0, years * 365.0)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(simple_interest(18000.0, 0.06, 3.0)))
      IO.puts(Kernel.inspect(simple_interest(0.5, 0.06, 3.0)))
      IO.puts(Kernel.inspect(simple_interest(18000.0, 0.01, 10.0)))
      IO.puts(Kernel.inspect(compound_interest(10000.0, 0.05, 3.0)))
      IO.puts(Kernel.inspect(compound_interest(10000.0, 0.05, 1.0)))
      IO.puts(Kernel.inspect(apr_interest(10000.0, 0.05, 3.0)))
      IO.puts(Kernel.inspect(apr_interest(10000.0, 0.05, 1.0)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
