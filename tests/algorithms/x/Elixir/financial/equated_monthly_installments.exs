# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def pow_float(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def equated_monthly_installments(principal, rate_per_annum, years_to_repay) do
    try do
      if principal <= 0.0 do
        raise("Principal borrowed must be > 0")
      end
      if rate_per_annum < 0.0 do
        raise("Rate of interest must be >= 0")
      end
      if years_to_repay <= 0 do
        raise("Years to repay must be an integer > 0")
      end
      rate_per_month = rate_per_annum / 12.0
      number_of_payments = years_to_repay * 12
      factor = pow_float(1.0 + rate_per_month, number_of_payments)
      throw {:return, principal * rate_per_month * factor / (factor - 1.0)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(equated_monthly_installments(25000.0, 0.12, 3)))
    IO.puts(Kernel.inspect(equated_monthly_installments(25000.0, 0.12, 10)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
