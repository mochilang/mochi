# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def price_plus_tax(price, tax_rate) do
    try do
      throw {:return, price * (1.0 + tax_rate)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(("price_plus_tax(100, 0.25) = " <> Kernel.inspect(price_plus_tax(100.0, 0.25))))
    IO.puts(("price_plus_tax(125.50, 0.05) = " <> Kernel.inspect(price_plus_tax(125.5, 0.05))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
