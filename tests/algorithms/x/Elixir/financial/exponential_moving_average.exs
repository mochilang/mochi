# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def exponential_moving_average(stock_prices, window_size) do
    try do
      if window_size <= 0 do
        raise("window_size must be > 0")
      end
      alpha = 2.0 / (1.0 + (:erlang.float(window_size)))
      moving_average = 0.0
      result = []
      i = 0
      while_fun = fn while_fun, i, moving_average ->
        if i < _len(stock_prices) do
          price = Enum.at(stock_prices, i)
          {moving_average} = if i <= window_size do
            moving_average = (if i == 0, do: price, else: (moving_average + price) * 0.5)
            {moving_average}
          else
            moving_average = alpha * price + (1.0 - alpha) * moving_average
            {moving_average}
          end
          result = (result ++ [moving_average])
          i = i + 1
          while_fun.(while_fun, i, moving_average)
        else
          {i, moving_average}
        end
      end
      {i, moving_average} = try do
          while_fun.(while_fun, i, moving_average)
        catch
          {:break, {i, moving_average}} -> {i, moving_average}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:stock_prices, [2.0, 5.0, 3.0, 8.2, 6.0, 9.0, 10.0])
  Process.put(:window_size, 3)
  def main() do
    Process.put(:result, exponential_moving_average(Process.get(:stock_prices), Process.get(:window_size)))
    IO.puts(Kernel.to_string(Process.get(:result)))
  end
end
Main.main()
