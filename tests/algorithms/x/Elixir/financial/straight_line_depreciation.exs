# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def straight_line_depreciation(useful_years, purchase_value, residual_value) do
    try do
      if useful_years < 1 do
        raise("Useful years cannot be less than 1")
      end
      if purchase_value < 0.0 do
        raise("Purchase value cannot be less than zero")
      end
      if purchase_value < residual_value do
        raise("Purchase value cannot be less than residual value")
      end
      depreciable_cost = purchase_value - residual_value
      annual_expense = depreciable_cost / (1.0 * useful_years)
      expenses = []
      accumulated = 0.0
      period = 0
      while_fun = fn while_fun, accumulated, expenses, period ->
        if period < useful_years do
          {accumulated, expenses} = if period != useful_years - 1 do
            accumulated = accumulated + annual_expense
            expenses = (expenses ++ [annual_expense])
            {accumulated, expenses}
          else
            end_year_expense = depreciable_cost - accumulated
            expenses = (expenses ++ [end_year_expense])
            {accumulated, expenses}
          end
          period = period + 1
          while_fun.(while_fun, accumulated, expenses, period)
        else
          {accumulated, expenses, period}
        end
      end
      {accumulated, expenses, period} = try do
          while_fun.(while_fun, accumulated, expenses, period)
        catch
          {:break, {accumulated, expenses, period}} -> {accumulated, expenses, period}
        end

      throw {:return, expenses}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(straight_line_depreciation(10, 1100.0, 100.0)))
    IO.puts(Kernel.inspect(straight_line_depreciation(6, 1250.0, 50.0)))
    IO.puts(Kernel.inspect(straight_line_depreciation(4, 1001.0, 0.0)))
    IO.puts(Kernel.inspect(straight_line_depreciation(11, 380.0, 50.0)))
    IO.puts(Kernel.inspect(straight_line_depreciation(1, 4985.0, 100.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
