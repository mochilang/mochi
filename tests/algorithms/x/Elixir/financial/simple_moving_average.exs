# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def simple_moving_average(data, window_size) do
    try do
      if window_size < 1 do
        raise("Window size must be a positive integer")
      end
      result = []
      window_sum = 0.0
      i = 0
      while_fun = fn while_fun, i, result, window_sum ->
        if i < _len(data) do
          window_sum = window_sum + Enum.at(data, i)
          {window_sum} = if i >= window_size do
            window_sum = window_sum - Enum.at(data, i - window_size)
            {window_sum}
          else
            {window_sum}
          end
          {result} = if i >= window_size - 1 do
            avg = window_sum / window_size
            result = (result ++ [%{value: avg, ok: true}])
            {result}
          else
            result = (result ++ [%{value: 0.0, ok: false}])
            {result}
          end
          i = i + 1
          while_fun.(while_fun, i, result, window_sum)
        else
          {i, result, window_sum}
        end
      end
      {i, result, window_sum} = try do
          while_fun.(while_fun, i, result, window_sum)
        catch
          {:break, {i, result, window_sum}} -> {i, result, window_sum}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:data, [10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0])
  Process.put(:window_size, 3)
  Process.put(:idx, 0)
  def main() do
    Process.put(:sma_values, simple_moving_average(Process.get(:data), Process.get(:window_size)))
    while_fun_2 = fn while_fun_2 ->
      if Process.get(:idx) < _len(Process.get(:sma_values)) do
        item = Enum.at(Process.get(:sma_values), Process.get(:idx))
        if item.ok do
          IO.puts(((("Day " <> Kernel.to_string(Process.get(:idx) + 1)) <> ": ") <> Kernel.to_string(item.value)))
        else
          IO.puts((("Day " <> Kernel.to_string(Process.get(:idx) + 1)) <> ": Not enough data for SMA"))
        end
        Process.put(:idx, Process.get(:idx) + 1)
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

  end
end
Main.main()
