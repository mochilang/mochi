# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def calculate_waitingtime(arrival_time, burst_time, no_of_processes) do
    try do
      remaining_time = []
      i = 0
      while_fun = fn while_fun, i, remaining_time ->
        if i < no_of_processes do
          remaining_time = (remaining_time ++ [Enum.at(burst_time, i, [])])
          i = i + 1
          while_fun.(while_fun, i, remaining_time)
        else
          {i, remaining_time}
        end
      end
      {_, remaining_time} = try do
          while_fun.(while_fun, i, remaining_time)
        catch
          {:break, {_, remaining_time}} -> {0, remaining_time}
        end

      waiting_time = []
      i = 0
      while_fun_2 = fn while_fun_2, i, waiting_time ->
        if i < no_of_processes do
          waiting_time = (waiting_time ++ [0])
          i = i + 1
          while_fun_2.(while_fun_2, i, waiting_time)
        else
          {i, waiting_time}
        end
      end
      {_, waiting_time} = try do
          while_fun_2.(while_fun_2, i, waiting_time)
        catch
          {:break, {_, waiting_time}} -> {0, waiting_time}
        end

      complete = 0
      increment_time = 0
      minm = 1000000000
      short = 0
      check = false
      while_fun_3 = fn while_fun_3, check, complete, increment_time, minm, remaining_time, short, waiting_time ->
        if complete != no_of_processes do
          {check, complete, increment_time, minm, remaining_time, short, waiting_time} = try do
            j = 0
            while_fun_4 = fn while_fun_4, check, j, minm, short ->
              if j < no_of_processes do
                {check, minm, short} = if Enum.at(arrival_time, j, []) <= increment_time && Enum.at(remaining_time, j, []) > 0 && Enum.at(remaining_time, j, []) < minm do
                  minm = Enum.at(remaining_time, j, [])
                  short = j
                  check = true
                  {check, minm, short}
                else
                  {check, minm, short}
                end
                j = j + 1
                while_fun_4.(while_fun_4, check, j, minm, short)
              else
                {check, j, minm, short}
              end
            end
            {check, _, minm, short} = try do
                while_fun_4.(while_fun_4, check, j, minm, short)
              catch
                {:break, {check, _, minm, short}} -> {check, 0, minm, short}
              end

            increment_time = if !check do
              increment_time = increment_time + 1
              throw {:continue, {check, complete, increment_time, minm, remaining_time, short, waiting_time}}
              increment_time
            else
              increment_time
            end
            remaining_time = List.replace_at(remaining_time, short, Enum.at(remaining_time, short, []) - 1)
            minm = Enum.at(remaining_time, short, [])
            minm = if minm == 0 do
              minm = 1000000000
              minm
            else
              minm
            end
            {check, complete, waiting_time} = if Enum.at(remaining_time, short, []) == 0 do
              complete = complete + 1
              check = false
              finish_time = increment_time + 1
              finar = finish_time - Enum.at(arrival_time, short, [])
              waiting_time = List.replace_at(waiting_time, short, finar - Enum.at(burst_time, short, []))
              waiting_time = if Enum.at(waiting_time, short, []) < 0 do
                waiting_time = List.replace_at(waiting_time, short, 0)
                waiting_time
              else
                waiting_time
              end
              {check, complete, waiting_time}
            else
              {check, complete, waiting_time}
            end
            increment_time = increment_time + 1
            {check, complete, increment_time, minm, remaining_time, short, waiting_time}
          catch
            {:continue, {check, complete, increment_time, minm, remaining_time, short, waiting_time}} -> {check, complete, increment_time, minm, remaining_time, short, waiting_time}
          end
          while_fun_3.(while_fun_3, check, complete, increment_time, minm, remaining_time, short, waiting_time)
        else
          {check, complete, increment_time, minm, remaining_time, short, waiting_time}
        end
      end
      {check, complete, increment_time, minm, remaining_time, short, waiting_time} = try do
          while_fun_3.(while_fun_3, check, complete, increment_time, minm, remaining_time, short, waiting_time)
        catch
          {:break, {check, complete, increment_time, minm, remaining_time, short, waiting_time}} -> {check, complete, increment_time, minm, remaining_time, short, waiting_time}
        end

      throw {:return, waiting_time}
    catch
      {:return, val} -> val
    end
  end
  def calculate_turnaroundtime(burst_time, no_of_processes, waiting_time) do
    try do
      turn_around_time = []
      i = 0
      while_fun_5 = fn while_fun_5, i, turn_around_time ->
        if i < no_of_processes do
          turn_around_time = (turn_around_time ++ [Enum.at(burst_time, i, []) + Enum.at(waiting_time, i, [])])
          i = i + 1
          while_fun_5.(while_fun_5, i, turn_around_time)
        else
          {i, turn_around_time}
        end
      end
      {_, turn_around_time} = try do
          while_fun_5.(while_fun_5, i, turn_around_time)
        catch
          {:break, {_, turn_around_time}} -> {0, turn_around_time}
        end

      throw {:return, turn_around_time}
    catch
      {:return, val} -> val
    end
  end
  def to_float(x) do
    try do
      throw {:return, x * 1.0}
    catch
      {:return, val} -> val
    end
  end
  def calculate_average_times(waiting_time, turn_around_time, no_of_processes) do
    try do
      total_waiting_time = 0
      total_turn_around_time = 0
      i = 0
      while_fun_6 = fn while_fun_6, i, total_turn_around_time, total_waiting_time ->
        if i < no_of_processes do
          total_waiting_time = total_waiting_time + Enum.at(waiting_time, i, [])
          total_turn_around_time = total_turn_around_time + Enum.at(turn_around_time, i, [])
          i = i + 1
          while_fun_6.(while_fun_6, i, total_turn_around_time, total_waiting_time)
        else
          {i, total_turn_around_time, total_waiting_time}
        end
      end
      {_, total_turn_around_time, total_waiting_time} = try do
          while_fun_6.(while_fun_6, i, total_turn_around_time, total_waiting_time)
        catch
          {:break, {_, total_turn_around_time, total_waiting_time}} -> {0, total_turn_around_time, total_waiting_time}
        end

      avg_wait = to_float(total_waiting_time) / to_float(no_of_processes)
      avg_turn = to_float(total_turn_around_time) / to_float(no_of_processes)
      IO.puts(("Average waiting time = " <> String.trim_trailing(Kernel.to_string(avg_wait), ".0")))
      IO.puts(("Average turn around time = " <> String.trim_trailing(Kernel.to_string(avg_turn), ".0")))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(calculate_waitingtime([1, 2, 3, 4], [3, 3, 5, 1], 4)))
    IO.puts(Kernel.inspect(calculate_waitingtime([1, 2, 3], [2, 5, 1], 3)))
    IO.puts(Kernel.inspect(calculate_waitingtime([2, 3], [5, 1], 2)))
    IO.puts(Kernel.inspect(calculate_turnaroundtime([3, 3, 5, 1], 4, [0, 3, 5, 0])))
    IO.puts(Kernel.inspect(calculate_turnaroundtime([3, 3], 2, [0, 3])))
    IO.puts(Kernel.inspect(calculate_turnaroundtime([8, 10, 1], 3, [1, 0, 3])))
    calculate_average_times([0, 3, 5, 0], [3, 6, 10, 1], 4)
    calculate_average_times([2, 3], [3, 6], 2)
    calculate_average_times([10, 4, 3], [2, 7, 6], 3)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
