# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def max_tasks(tasks_info) do
    try do
      order = []
      i = 0
      while_fun = fn while_fun, i, order ->
        if i < _len(tasks_info) do
          order = (order ++ [i])
          i = i + 1
          while_fun.(while_fun, i, order)
        else
          {i, order}
        end
      end
      {_, order} = try do
          while_fun.(while_fun, i, order)
        catch
          {:break, {_, order}} -> {0, order}
        end

      n = _len(order)
      i = 0
      while_fun_2 = fn while_fun_2, i, order ->
        if i < n do
          j = i + 1
          while_fun_3 = fn while_fun_3, j, order ->
            if j < n do
              order = if Enum.at(Enum.at(tasks_info, Enum.at(order, j, []), []), 1, 0) > Enum.at(Enum.at(tasks_info, Enum.at(order, i, []), []), 1, 0) do
                tmp = Enum.at(order, i, [])
                order = List.replace_at(order, i, Enum.at(order, j, []))
                order = List.replace_at(order, j, tmp)
                order
              else
                order
              end
              j = j + 1
              while_fun_3.(while_fun_3, j, order)
            else
              {j, order}
            end
          end
          {_, order} = try do
              while_fun_3.(while_fun_3, j, order)
            catch
              {:break, {_, order}} -> {0, order}
            end

          i = i + 1
          while_fun_2.(while_fun_2, i, order)
        else
          {i, order}
        end
      end
      {_, order} = try do
          while_fun_2.(while_fun_2, i, order)
        catch
          {:break, {_, order}} -> {0, order}
        end

      result = []
      pos = 1
      i = 0
      while_fun_4 = fn while_fun_4, i, pos, result ->
        if i < n do
          id = Enum.at(order, i, [])
          deadline = Enum.at(Enum.at(tasks_info, id, []), 0, 0)
          result = if deadline >= pos do
            result = (result ++ [id])
            result
          else
            result
          end
          i = i + 1
          pos = pos + 1
          while_fun_4.(while_fun_4, i, pos, result)
        else
          {i, pos, result}
        end
      end
      {_, pos, result} = try do
          while_fun_4.(while_fun_4, i, pos, result)
        catch
          {:break, {_, pos, result}} -> {0, pos, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      ex1 = [[4, 20], [1, 10], [1, 40], [1, 30]]
      ex2 = [[1, 10], [2, 20], [3, 30], [2, 40]]
      IO.puts(Kernel.inspect(max_tasks(ex1)))
      IO.puts(Kernel.inspect(max_tasks(ex2)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
