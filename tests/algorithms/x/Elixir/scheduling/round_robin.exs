# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def calculate_waiting_times(burst_times) do
    try do
      quantum = 2
      rem_ = []
      i = 0
      while_fun = fn while_fun, i, rem_ ->
        if i < _len(burst_times) do
          rem_ = (rem_ ++ [Enum.at(burst_times, i, [])])
          i = i + 1
          while_fun.(while_fun, i, rem_)
        else
          {i, rem_}
        end
      end
      {_, rem_} = try do
          while_fun.(while_fun, i, rem_)
        catch
          {:break, {_, rem_}} -> {0, rem_}
        end

      waiting = []
      i = 0
      while_fun_2 = fn while_fun_2, i, waiting ->
        if i < _len(burst_times) do
          waiting = (waiting ++ [0])
          i = i + 1
          while_fun_2.(while_fun_2, i, waiting)
        else
          {i, waiting}
        end
      end
      {_, waiting} = try do
          while_fun_2.(while_fun_2, i, waiting)
        catch
          {:break, {_, waiting}} -> {0, waiting}
        end

      t = 0
      while_fun_3 = fn while_fun_3, rem_, t, waiting ->
        if true do
          done = true
          j = 0
          while_fun_4 = fn while_fun_4, done, j, rem_, t, waiting ->
            if j < _len(burst_times) do
              {done, rem_, t, waiting} = if Enum.at(rem_, j, []) > 0 do
                done = false
                {rem_, t, waiting} = if Enum.at(rem_, j, []) > quantum do
                  t = t + quantum
                  rem_ = List.replace_at(rem_, j, Enum.at(rem_, j, []) - quantum)
                  {rem_, t, waiting}
                else
                  t = t + Enum.at(rem_, j, [])
                  waiting = List.replace_at(waiting, j, t - Enum.at(burst_times, j, []))
                  rem_ = List.replace_at(rem_, j, 0)
                  {rem_, t, waiting}
                end
                {done, rem_, t, waiting}
              else
                {done, rem_, t, waiting}
              end
              j = j + 1
              while_fun_4.(while_fun_4, done, j, rem_, t, waiting)
            else
              {done, j, rem_, t, waiting}
            end
          end
          {done, _, rem_, t, waiting} = try do
              while_fun_4.(while_fun_4, done, j, rem_, t, waiting)
            catch
              {:break, {done, _, rem_, t, waiting}} -> {done, 0, rem_, t, waiting}
            end

          if done do
            throw {:return, waiting}
          end
          while_fun_3.(while_fun_3, rem_, t, waiting)
        else
          {rem_, t, waiting}
        end
      end
      {rem_, t, waiting} = try do
          while_fun_3.(while_fun_3, rem_, t, waiting)
        catch
          {:break, {rem_, t, waiting}} -> {rem_, t, waiting}
        end

      throw {:return, waiting}
    catch
      {:return, val} -> val
    end
  end
  def calculate_turn_around_times(burst_times, waiting_times) do
    try do
      result = []
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i < _len(burst_times) do
          result = (result ++ [Enum.at(burst_times, i, []) + Enum.at(waiting_times, i, [])])
          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {_, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def mean(values) do
    try do
      total = 0
      i = 0
      while_fun_6 = fn while_fun_6, i, total ->
        if i < _len(values) do
          total = total + Enum.at(values, i, [])
          i = i + 1
          while_fun_6.(while_fun_6, i, total)
        else
          {i, total}
        end
      end
      {_, total} = try do
          while_fun_6.(while_fun_6, i, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, (:erlang.float(total)) / (:erlang.float(_len(values)))}
    catch
      {:return, val} -> val
    end
  end
  def format_float_5(x) do
    try do
      scaled = Kernel.trunc(x * 100000.0 + 0.5)
      int_part = div(scaled, 100000)
      frac_part = rem(scaled, 100000)
      frac_str = Kernel.to_string(frac_part)
      while_fun_7 = fn while_fun_7, frac_str ->
        if _len(frac_str) < 5 do
          frac_str = ("0" <> frac_str)
          while_fun_7.(while_fun_7, frac_str)
        else
          frac_str
        end
      end
      frac_str = try do
          while_fun_7.(while_fun_7, frac_str)
        catch
          {:break, {frac_str}} -> frac_str
        end

      throw {:return, ((Kernel.to_string(int_part) <> ".") <> frac_str)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      burst_times = [3, 5, 7]
      waiting_times = calculate_waiting_times(burst_times)
      turn_around_times = calculate_turn_around_times(burst_times, waiting_times)
      IO.puts("Process ID \tBurst Time \tWaiting Time \tTurnaround Time")
      i = 0
      while_fun_8 = fn while_fun_8, i ->
        if i < _len(burst_times) do
          line = ((((((("  " <> Kernel.to_string(i + 1)) <> "\t\t  ") <> Kernel.to_string(Enum.at(burst_times, i, []))) <> "\t\t  ") <> Kernel.to_string(Enum.at(waiting_times, i, []))) <> "\t\t  ") <> Kernel.to_string(Enum.at(turn_around_times, i, [])))
          IO.puts(line)
          i = i + 1
          while_fun_8.(while_fun_8, i)
        else
          i
        end
      end
      _ = try do
          while_fun_8.(while_fun_8, i)
        catch
          {:break, {_}} -> 0
        end

      IO.puts("")
      IO.puts(("Average waiting time = " <> format_float_5(mean(waiting_times))))
      IO.puts(("Average turn around time = " <> format_float_5(mean(turn_around_times))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
