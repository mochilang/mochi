# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def to_bits(n, width) do
    try do
      res = ""
      num = n
      w = width
      while_fun = fn while_fun, num, res, w ->
        if w > 0 do
          res = (Kernel.inspect(rem(num, 2)) <> res)
          num = div(num, 2)
          w = w - 1
          while_fun.(while_fun, num, res, w)
        else
          {num, res, w}
        end
      end
      {num, res, w} = try do
          while_fun.(while_fun, num, res, w)
        catch
          {:break, {num, res, w}} -> {num, res, w}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def quantum_fourier_transform(number_of_qubits) do
    try do
      if number_of_qubits <= 0 do
        raise("number of qubits must be > 0.")
      end
      if number_of_qubits > 10 do
        raise("number of qubits too large to simulate(>10).")
      end
      shots = 10000
      states = 1
      p = 0
      while_fun_2 = fn while_fun_2, p, states ->
        if p < number_of_qubits do
          states = states * 2
          p = p + 1
          while_fun_2.(while_fun_2, p, states)
        else
          {p, states}
        end
      end
      {p, states} = try do
          while_fun_2.(while_fun_2, p, states)
        catch
          {:break, {p, states}} -> {p, states}
        end

      per_state = div(shots, states)
      counts = %{}
      i = 0
      while_fun_3 = fn while_fun_3, counts, i ->
        if i < states do
          counts = Map.put(counts, to_bits(i, number_of_qubits), per_state)
          i = i + 1
          while_fun_3.(while_fun_3, counts, i)
        else
          {counts, i}
        end
      end
      {counts, _} = try do
          while_fun_3.(while_fun_3, counts, i)
        catch
          {:break, {counts, _}} -> {counts, 0}
        end

      throw {:return, counts}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(("Total count for quantum fourier transform state is: " <> Kernel.inspect(quantum_fourier_transform(3))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
