# Code generated by Mochi transpiler 2025-08-06 15:56 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def is_valid(puzzle, word, row, col, vertical) do
    try do
      Enum.each((0..(_len(word) - 1)), fn i ->
        if vertical do
          if row + i >= _len(puzzle) || Enum.at(Enum.at(puzzle, row + i), col) != "" do
            throw {:return, false}
          end
        else
          if col + i >= _len(Enum.at(puzzle, 0)) || Enum.at(Enum.at(puzzle, row), col + i) != "" do
            throw {:return, false}
          end
        end
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def place_word(puzzle, word, row, col, vertical) do
    try do
      Enum.each((0..(_len(word) - 1)), fn i ->
        ch = String.at(word, i)
        if vertical do
          puzzle = List.replace_at(puzzle, row + i, List.replace_at(Enum.at(puzzle, row + i), col, ch))
        else
          puzzle = List.replace_at(puzzle, row, List.replace_at(Enum.at(puzzle, row), col + i, ch))
        end
      end)
    catch
      {:return, val} -> val
    end
  end
  def remove_word(puzzle, word, row, col, vertical) do
    try do
      Enum.each((0..(_len(word) - 1)), fn i ->
        if vertical do
          puzzle = List.replace_at(puzzle, row + i, List.replace_at(Enum.at(puzzle, row + i), col, ""))
        else
          puzzle = List.replace_at(puzzle, row, List.replace_at(Enum.at(puzzle, row), col + i, ""))
        end
      end)
    catch
      {:return, val} -> val
    end
  end
  def solve_crossword(puzzle, words, used) do
    try do
      Enum.each((0..(_len(puzzle) - 1)), fn row ->
        Enum.each((0..(_len(Enum.at(puzzle, 0)) - 1)), fn col ->
          if Enum.at(Enum.at(puzzle, row), col) == "" do
            Enum.each((0..(_len(words) - 1)), fn i ->
              if !Enum.at(used, i) do
                word = Enum.at(words, i)
                Enum.each([true, false], fn vertical ->
                  if is_valid(puzzle, word, row, col, vertical) do
                    place_word(puzzle, word, row, col, vertical)
                    used = List.replace_at(used, i, true)
                    if solve_crossword(puzzle, words, used) do
                      throw {:return, true}
                    end
                    used = List.replace_at(used, i, false)
                    remove_word(puzzle, word, row, col, vertical)
                  end
                end)
              end
            end)
            throw {:return, false}
          end
        end)
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:puzzle, [["", "", ""], ["", "", ""], ["", "", ""]])
  Process.put(:words, ["cat", "dog", "car"])
  Process.put(:used, [false, false, false])
  def main() do
    if solve_crossword(Process.get(:puzzle), Process.get(:words), Process.get(:used)) do
      IO.puts("Solution found:")
      Enum.each(Process.get(:puzzle), fn row ->
        IO.puts(Kernel.inspect(row))
      end)
    else
      IO.puts("No solution found:")
    end
  end
end
Main.main()
