# Code generated by Mochi transpiler 2025-08-13 16:49 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_valid_pos(position, n) do
    try do
      y = Enum.at(position, 0, [])
      x = Enum.at(position, 1, [])
      positions = [[y + 1, x + 2], [y - 1, x + 2], [y + 1, x - 2], [y - 1, x - 2], [y + 2, x + 1], [y + 2, x - 1], [y - 2, x + 1], [y - 2, x - 1]]
      permissible = []
      {permissible} = Enum.reduce((0..(_len(positions) - 1)//1), {permissible}, fn idx, {permissible} ->
        inner = Enum.at(positions, idx, [])
        y_test = Enum.at(inner, 0, [])
        x_test = Enum.at(inner, 1, [])
        permissible = if y_test >= 0 && y_test < n && x_test >= 0 && x_test < n do
          permissible = (permissible ++ [inner])
          permissible
        else
          permissible
        end
        {permissible}
      end)
      throw {:return, permissible}
    catch
      {:return, val} -> val
    end
  end
  def is_complete(board) do
    try do
      Enum.each((0..(_len(board) - 1)), fn i ->
        row = Enum.at(board, i, [])
        Enum.each((0..(_len(row) - 1)), fn j ->
          if Enum.at(row, j, []) == 0 do
            throw {:return, false}
          end
        end)
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def open_knight_tour_helper(board, pos, curr) do
    try do
      if is_complete(board) do
        throw {:return, true}
      end
      moves = get_valid_pos(pos, _len(board))
      {board} = Enum.reduce((0..(_len(moves) - 1)//1), {board}, fn i, {board} ->
        position = Enum.at(moves, i, [])
        y = Enum.at(position, 0, [])
        x = Enum.at(position, 1, [])
        board = if Enum.at(Enum.at(board, y, []), x, 0) == 0 do
          board = List.replace_at(board, y, List.replace_at(Enum.at(board, y), x, curr + 1))
          if open_knight_tour_helper(board, position, curr + 1) do
            throw {:return, true}
          end
          board = List.replace_at(board, y, List.replace_at(Enum.at(board, y), x, 0))
          board
        else
          board
        end
        {board}
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def open_knight_tour(n) do
    try do
      board = []
      {board} = Enum.reduce((0..(n - 1)//1), {board}, fn i, {board} ->
        row = []
        {row} = Enum.reduce((0..(n - 1)//1), {row}, fn j, {row} ->
          row = (row ++ [0])
          {row}
        end)
        board = (board ++ [row])
        {board}
      end)
      {board} = Enum.reduce((0..(n - 1)//1), {board}, fn i, {board} ->
        {board} = Enum.reduce((0..(n - 1)//1), {board}, fn j, {board} ->
          board = List.replace_at(board, i, List.replace_at(Enum.at(board, i), j, 1))
          if open_knight_tour_helper(board, [i, j], 1) do
            throw {:return, board}
          end
          board = List.replace_at(board, i, List.replace_at(Enum.at(board, i), j, 0))
          {board}
        end)
        {board}
      end)
      IO.puts(("Open Knight Tour cannot be performed on a board of size " <> Kernel.to_string(n)))
      throw {:return, board}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:board, open_knight_tour(1))
    IO.puts(Enum.at(Enum.at(Process.get(:board), 0, []), 0, 0))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
