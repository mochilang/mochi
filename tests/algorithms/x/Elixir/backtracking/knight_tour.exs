# Code generated by Mochi transpiler 2025-08-06 15:56 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def get_valid_pos(position, n) do
    try do
      y = Enum.at(position, 0)
      x = Enum.at(position, 1)
      positions = [[y + 1, x + 2], [y - 1, x + 2], [y + 1, x - 2], [y - 1, x - 2], [y + 2, x + 1], [y + 2, x - 1], [y - 2, x + 1], [y - 2, x - 1]]
      permissible = []
      {permissible} = Enum.reduce((0..(_len(positions) - 1)), {permissible}, fn idx, {permissible} ->
        inner = Enum.at(positions, idx)
        y_test = Enum.at(inner, 0)
        x_test = Enum.at(inner, 1)
        {permissible} = if y_test >= 0 && y_test < n && x_test >= 0 && x_test < n do
          permissible = (permissible ++ [inner])
          {permissible}
        else
          {permissible}
        end
        {permissible}
      end)
      throw {:return, permissible}
    catch
      {:return, val} -> val
    end
  end
  def is_complete(board) do
    try do
      Enum.each((0..(_len(board) - 1)), fn i ->
        row = Enum.at(board, i)
        Enum.each((0..(_len(row) - 1)), fn j ->
          if Enum.at(row, j) == 0 do
            throw {:return, false}
          end
        end)
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def open_knight_tour_helper(board, pos, curr) do
    try do
      if is_complete(board) do
        throw {:return, true}
      end
      moves = get_valid_pos(pos, _len(board))
      Enum.each((0..(_len(moves) - 1)), fn i ->
        position = Enum.at(moves, i)
        y = Enum.at(position, 0)
        x = Enum.at(position, 1)
        if Enum.at(Enum.at(board, y), x) == 0 do
          board = List.replace_at(board, y, List.replace_at(Enum.at(board, y), x, curr + 1))
          if open_knight_tour_helper(board, position, curr + 1) do
            throw {:return, true}
          end
          board = List.replace_at(board, y, List.replace_at(Enum.at(board, y), x, 0))
        end
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def open_knight_tour(n) do
    try do
      board = []
      Enum.each((0..(n - 1)), fn i ->
        row = []
        {row} = Enum.reduce((0..(n - 1)), {row}, fn j, {row} ->
          row = (row ++ [0])
          {row}
        end)
        board = (board ++ [row])
      end)
      Enum.each((0..(n - 1)), fn i ->
        Enum.each((0..(n - 1)), fn j ->
          board = List.replace_at(board, i, List.replace_at(Enum.at(board, i), j, 1))
          if open_knight_tour_helper(board, [i, j], 1) do
            throw {:return, board}
          end
          board = List.replace_at(board, i, List.replace_at(Enum.at(board, i), j, 0))
        end)
      end)
      IO.puts(("Open Knight Tour cannot be performed on a board of size " <> Kernel.to_string(n)))
      throw {:return, board}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:board, open_knight_tour(1))
    IO.puts(Enum.at(Enum.at(Process.get(:board), 0), 0))
  end
end
Main.main()
