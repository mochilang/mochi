# Code generated by Mochi transpiler 2025-08-06 15:56 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def valid_coloring(neighbours, colored_vertices, color) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(neighbours) do
          if Enum.at(neighbours, i) == 1 && Enum.at(colored_vertices, i) == color do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def util_color(graph, max_colors, colored_vertices, index) do
    try do
      if index == _len(graph) do
        throw {:return, true}
      end
      c = 0
      while_fun_6 = fn while_fun_6, c, colored_vertices ->
        if c < max_colors do
          {colored_vertices} = if valid_coloring(Enum.at(graph, index), colored_vertices, c) do
            colored_vertices = List.replace_at(colored_vertices, index, c)
            if util_color(graph, max_colors, colored_vertices, index + 1) do
              throw {:return, true}
            end
            colored_vertices = List.replace_at(colored_vertices, index, -1)
            {colored_vertices}
          else
            {colored_vertices}
          end
          c = c + 1
          while_fun_6.(while_fun_6, c, colored_vertices)
        else
          {c, colored_vertices}
        end
      end
      {c, colored_vertices} = try do
          while_fun_6.(while_fun_6, c, colored_vertices)
        catch
          {:break, {c, colored_vertices}} -> {c, colored_vertices}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def color(graph, max_colors) do
    try do
      colored_vertices = []
      i = 0
      while_fun_7 = fn while_fun_7, colored_vertices, i ->
        if i < _len(graph) do
          colored_vertices = (colored_vertices ++ [-1])
          i = i + 1
          while_fun_7.(while_fun_7, colored_vertices, i)
        else
          {colored_vertices, i}
        end
      end
      {colored_vertices, i} = try do
          while_fun_7.(while_fun_7, colored_vertices, i)
        catch
          {:break, {colored_vertices, i}} -> {colored_vertices, i}
        end

      if util_color(graph, max_colors, colored_vertices, 0) do
        throw {:return, colored_vertices}
      end
      throw {:return, []}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:graph, [[0, 1, 0, 0, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0]])
  def main() do
    IO.puts(Kernel.inspect(color(Process.get(:graph), 3)))
    IO.puts("\n")
    IO.puts(Kernel.inspect(_len(color(Process.get(:graph), 2))))
  end
end
Main.main()
