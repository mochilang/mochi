# Code generated by Mochi transpiler 2025-08-06 15:56 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def valid_connection(graph, next_ver, curr_ind, path) do
    try do
      if Enum.at(Enum.at(graph, Enum.at(path, curr_ind - 1)), next_ver) == 0 do
        throw {:return, false}
      end
      Enum.each(path, fn v ->
        if v == next_ver do
          throw {:return, false}
        end
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def util_hamilton_cycle(graph, path, curr_ind) do
    try do
      if curr_ind == _len(graph) do
        throw {:return, Enum.at(Enum.at(graph, Enum.at(path, curr_ind - 1)), Enum.at(path, 0)) == 1}
      end
      next_ver = 0
      while_fun_9 = fn while_fun_9, next_ver, path ->
        if next_ver < _len(graph) do
          {path} = if valid_connection(graph, next_ver, curr_ind, path) do
            path = List.replace_at(path, curr_ind, next_ver)
            if util_hamilton_cycle(graph, path, curr_ind + 1) do
              throw {:return, true}
            end
            path = List.replace_at(path, curr_ind, -1)
            {path}
          else
            {path}
          end
          next_ver = next_ver + 1
          while_fun_9.(while_fun_9, next_ver, path)
        else
          {next_ver, path}
        end
      end
      {next_ver, path} = try do
          while_fun_9.(while_fun_9, next_ver, path)
        catch
          {:break, {next_ver, path}} -> {next_ver, path}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def hamilton_cycle(graph, start_index) do
    try do
      path = nil
      i = 0
      while_fun_10 = fn while_fun_10, i, path ->
        if i < _len(graph) + 1 do
          path = List.replace_at(path, i, -1)
          i = i + 1
          while_fun_10.(while_fun_10, i, path)
        else
          {i, path}
        end
      end
      {i, path} = try do
          while_fun_10.(while_fun_10, i, path)
        catch
          {:break, {i, path}} -> {i, path}
        end

      path = List.replace_at(path, 0, start_index)
      last = _len(path) - 1
      path = List.replace_at(path, last, start_index)
      if util_hamilton_cycle(graph, path, 1) do
        throw {:return, path}
      end
      throw {:return, []}
    catch
      {:return, val} -> val
    end
  end
  def main() do
  end
end
Main.main()
