# Code generated by Mochi transpiler 2025-08-06 15:56 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def create_board(n) do
    try do
      board = []
      i = 0
      while_fun = fn while_fun, board, i ->
        if i < n do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < n do
              row = (row ++ [0])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          board = (board ++ [row])
          i = i + 1
          while_fun.(while_fun, board, i)
        else
          {board, i}
        end
      end
      {board, i} = try do
          while_fun.(while_fun, board, i)
        catch
          {:break, {board, i}} -> {board, i}
        end

      throw {:return, board}
    catch
      {:return, val} -> val
    end
  end
  def is_safe(board, row, column) do
    try do
      n = _len(board)
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < row do
          if Enum.at(Enum.at(board, i), column) == 1 do
            throw {:return, false}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      i = row - 1
      j = column - 1
      while_fun_4 = fn while_fun_4, i, j ->
        if i >= 0 && j >= 0 do
          if Enum.at(Enum.at(board, i), j) == 1 do
            throw {:return, false}
          end
          i = i - 1
          j = j - 1
          while_fun_4.(while_fun_4, i, j)
        else
          {i, j}
        end
      end
      {i, j} = try do
          while_fun_4.(while_fun_4, i, j)
        catch
          {:break, {i, j}} -> {i, j}
        end

      i = row - 1
      j = column + 1
      while_fun_5 = fn while_fun_5, i, j ->
        if i >= 0 && j < n do
          if Enum.at(Enum.at(board, i), j) == 1 do
            throw {:return, false}
          end
          i = i - 1
          j = j + 1
          while_fun_5.(while_fun_5, i, j)
        else
          {i, j}
        end
      end
      {i, j} = try do
          while_fun_5.(while_fun_5, i, j)
        catch
          {:break, {i, j}} -> {i, j}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def row_string(row) do
    try do
      s = ""
      j = 0
      while_fun_6 = fn while_fun_6, j, s ->
        if j < _len(row) do
          s = (if Enum.at(row, j) == 1, do: (s <> "Q "), else: (s <> ". "))
          j = j + 1
          while_fun_6.(while_fun_6, j, s)
        else
          {j, s}
        end
      end
      {j, s} = try do
          while_fun_6.(while_fun_6, j, s)
        catch
          {:break, {j, s}} -> {j, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def printboard(board) do
    try do
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(board) do
          IO.puts(Kernel.inspect(row_string(Enum.at(board, i))))
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def solve(board, row) do
    try do
      if row >= _len(board) do
        printboard(board)
        IO.puts("")
        throw {:return, 1}
      end
      count = 0
      i = 0
      while_fun_8 = fn while_fun_8, board, count, i ->
        if i < _len(board) do
          {board, count} = if is_safe(board, row, i) do
            board = List.replace_at(board, row, List.replace_at(Enum.at(board, row), i, 1))
            count = count + solve(board, row + 1)
            board = List.replace_at(board, row, List.replace_at(Enum.at(board, row), i, 0))
            {board, count}
          else
            {board, count}
          end
          i = i + 1
          while_fun_8.(while_fun_8, board, count, i)
        else
          {board, count, i}
        end
      end
      {board, count, i} = try do
          while_fun_8.(while_fun_8, board, count, i)
        catch
          {:break, {board, count, i}} -> {board, count, i}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def n_queens(n) do
    try do
      board = create_board(n)
      total = solve(board, 0)
      IO.puts(("The total number of solutions are: " <> Kernel.to_string(total)))
      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    n_queens(4)
  end
end
Main.main()
