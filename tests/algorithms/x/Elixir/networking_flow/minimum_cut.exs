# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def bfs(graph, s, t, parent) do
    try do
      visited = []
      i = 0
      while_fun = fn while_fun, i, visited ->
        if i < _len(graph) do
          visited = (visited ++ [false])
          i = i + 1
          while_fun.(while_fun, i, visited)
        else
          {i, visited}
        end
      end
      {i, visited} = try do
          while_fun.(while_fun, i, visited)
        catch
          {:break, {i, visited}} -> {i, visited}
        end

      queue = [s]
      head = 0
      visited = List.replace_at(visited, s, true)
      while_fun_2 = fn while_fun_2, head, parent, queue, visited ->
        if head < _len(queue) do
          u = Enum.at(queue, head, [])
          head = head + 1
          ind = 0
          while_fun_3 = fn while_fun_3, ind, parent, queue, visited ->
            if ind < _len(Enum.at(graph, u, [])) do
              {parent, queue, visited} = if Enum.at(visited, ind, []) == false && Enum.at(Enum.at(graph, u, []), ind, 0) > 0 do
                queue = (queue ++ [ind])
                visited = List.replace_at(visited, ind, true)
                parent = List.replace_at(parent, ind, u)
                {parent, queue, visited}
              else
                {parent, queue, visited}
              end
              ind = ind + 1
              while_fun_3.(while_fun_3, ind, parent, queue, visited)
            else
              {ind, parent, queue, visited}
            end
          end
          {ind, parent, queue, visited} = try do
              while_fun_3.(while_fun_3, ind, parent, queue, visited)
            catch
              {:break, {ind, parent, queue, visited}} -> {ind, parent, queue, visited}
            end

          while_fun_2.(while_fun_2, head, parent, queue, visited)
        else
          {head, parent, queue, visited}
        end
      end
      {head, parent, queue, visited} = try do
          while_fun_2.(while_fun_2, head, parent, queue, visited)
        catch
          {:break, {head, parent, queue, visited}} -> {head, parent, queue, visited}
        end

      throw {:return, Enum.at(visited, t, [])}
    catch
      {:return, val} -> val
    end
  end
  def mincut(graph, source, sink) do
    try do
      g = graph
      parent = []
      i = 0
      while_fun_4 = fn while_fun_4, i, parent ->
        if i < _len(g) do
          parent = (parent ++ [-1])
          i = i + 1
          while_fun_4.(while_fun_4, i, parent)
        else
          {i, parent}
        end
      end
      {i, parent} = try do
          while_fun_4.(while_fun_4, i, parent)
        catch
          {:break, {i, parent}} -> {i, parent}
        end

      temp = []
      i = 0
      while_fun_5 = fn while_fun_5, i, temp ->
        if i < _len(g) do
          row = []
          j = 0
          while_fun_6 = fn while_fun_6, j, row ->
            if j < _len(Enum.at(g, i, [])) do
              row = (row ++ [Enum.at(Enum.at(g, i, []), j, 0)])
              j = j + 1
              while_fun_6.(while_fun_6, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_6.(while_fun_6, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          temp = (temp ++ [row])
          i = i + 1
          while_fun_5.(while_fun_5, i, temp)
        else
          {i, temp}
        end
      end
      {i, temp} = try do
          while_fun_5.(while_fun_5, i, temp)
        catch
          {:break, {i, temp}} -> {i, temp}
        end

      while_fun_7 = fn while_fun_7, g ->
        if bfs(g, source, sink, parent) do
          path_flow = 1000000000
          s = sink
          while_fun_8 = fn while_fun_8, path_flow, s ->
            if s != source do
              p = Enum.at(parent, s, [])
              cap = Enum.at(Enum.at(g, p, []), s, 0)
              {path_flow} = if cap < path_flow do
                path_flow = cap
                {path_flow}
              else
                {path_flow}
              end
              s = p
              while_fun_8.(while_fun_8, path_flow, s)
            else
              {path_flow, s}
            end
          end
          {path_flow, s} = try do
              while_fun_8.(while_fun_8, path_flow, s)
            catch
              {:break, {path_flow, s}} -> {path_flow, s}
            end

          v = sink
          while_fun_9 = fn while_fun_9, g, v ->
            if v != source do
              u = Enum.at(parent, v, [])
              g = List.replace_at(g, u, List.replace_at(Enum.at(g, u), v, Enum.at(Enum.at(g, u, []), v, 0) - path_flow))
              g = List.replace_at(g, v, List.replace_at(Enum.at(g, v), u, Enum.at(Enum.at(g, v, []), u, 0) + path_flow))
              v = u
              while_fun_9.(while_fun_9, g, v)
            else
              {g, v}
            end
          end
          {g, v} = try do
              while_fun_9.(while_fun_9, g, v)
            catch
              {:break, {g, v}} -> {g, v}
            end

          while_fun_7.(while_fun_7, g)
        else
          g
        end
      end
      g = try do
          while_fun_7.(while_fun_7, g)
        catch
          {:break, {g}} -> g
        end

      res = []
      i = 0
      while_fun_10 = fn while_fun_10, i, res ->
        if i < _len(g) do
          j = 0
          while_fun_11 = fn while_fun_11, j, res ->
            if j < _len(Enum.at(g, 0, [])) do
              {res} = if Enum.at(Enum.at(g, i, []), j, 0) == 0 && Enum.at(Enum.at(temp, i, []), j, 0) > 0 do
                res = (res ++ [[i, j]])
                {res}
              else
                {res}
              end
              j = j + 1
              while_fun_11.(while_fun_11, j, res)
            else
              {j, res}
            end
          end
          {j, res} = try do
              while_fun_11.(while_fun_11, j, res)
            catch
              {:break, {j, res}} -> {j, res}
            end

          i = i + 1
          while_fun_10.(while_fun_10, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_10.(while_fun_10, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:test_graph, [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]])
  def main() do
    Process.put(:result, mincut(Process.get(:test_graph), 0, 5))
    IO.puts(Kernel.inspect(Process.get(:result)))
  end
end
Main.main()
