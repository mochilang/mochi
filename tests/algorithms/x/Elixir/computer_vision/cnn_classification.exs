# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def conv2d(image, kernel) do
    try do
      rows = _len(image)
      cols = _len(Enum.at(image, 0))
      k = _len(kernel)
      output = []
      i = 0
      while_fun = fn while_fun, i ->
        if i <= rows - k do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j <= cols - k do
              sum = 0.0
              ki = 0
              while_fun_3 = fn while_fun_3, ki, sum ->
                if ki < k do
                  kj = 0
                  while_fun_4 = fn while_fun_4, kj, sum ->
                    if kj < k do
                      sum = sum + Enum.at(Enum.at(image, i + ki), j + kj) * Enum.at(Enum.at(kernel, ki), kj)
                      kj = kj + 1
                      while_fun_4.(while_fun_4, kj, sum)
                    else
                      {kj, sum}
                    end
                  end
                  {kj, sum} = try do
                      while_fun_4.(while_fun_4, kj, sum)
                    catch
                      {:break, {kj, sum}} -> {kj, sum}
                    end

                  ki = ki + 1
                  while_fun_3.(while_fun_3, ki, sum)
                else
                  {ki, sum}
                end
              end
              {ki, sum} = try do
                  while_fun_3.(while_fun_3, ki, sum)
                catch
                  {:break, {ki, sum}} -> {ki, sum}
                end

              row = (row ++ [sum])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          output = (output ++ [row])
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, output}
    catch
      {:return, val} -> val
    end
  end
  def relu_matrix(m) do
    try do
      out = []
      {out} = Enum.reduce(m, {out}, fn row, {out} ->
        new_row = []
        {new_row} = Enum.reduce(row, {new_row}, fn v, {new_row} ->
          new_row = (if v > 0.0, do: (new_row ++ [v]), else: (new_row ++ [0.0]))
          {new_row}
        end)
        out = (out ++ [new_row])
        {out}
      end)
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def max_pool2x2(m) do
    try do
      rows = _len(m)
      cols = _len(Enum.at(m, 0))
      out = []
      i = 0
      while_fun_5 = fn while_fun_5, i, out ->
        if i < rows do
          new_row = []
          j = 0
          while_fun_6 = fn while_fun_6, j, new_row ->
            if j < cols do
              max_val = Enum.at(Enum.at(m, i), j)
              {max_val} = if Enum.at(Enum.at(m, i), j + 1) > max_val do
                max_val = Enum.at(Enum.at(m, i), j + 1)
                {max_val}
              else
                {max_val}
              end
              {max_val} = if Enum.at(Enum.at(m, i + 1), j) > max_val do
                max_val = Enum.at(Enum.at(m, i + 1), j)
                {max_val}
              else
                {max_val}
              end
              {max_val} = if Enum.at(Enum.at(m, i + 1), j + 1) > max_val do
                max_val = Enum.at(Enum.at(m, i + 1), j + 1)
                {max_val}
              else
                {max_val}
              end
              new_row = (new_row ++ [max_val])
              j = j + 2
              while_fun_6.(while_fun_6, j, new_row)
            else
              {j, new_row}
            end
          end
          {j, new_row} = try do
              while_fun_6.(while_fun_6, j, new_row)
            catch
              {:break, {j, new_row}} -> {j, new_row}
            end

          out = (out ++ [new_row])
          i = i + 2
          while_fun_5.(while_fun_5, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_5.(while_fun_5, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def flatten(m) do
    try do
      res = []
      {res} = Enum.reduce(m, {res}, fn row, {res} ->
        {res} = Enum.reduce(row, {res}, fn v, {res} ->
          res = (res ++ [v])
          {res}
        end)
        {res}
      end)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def dense(inputs, weights, bias) do
    try do
      s = bias
      i = 0
      while_fun_7 = fn while_fun_7, i, s ->
        if i < _len(inputs) do
          s = s + Enum.at(inputs, i) * Enum.at(weights, i)
          i = i + 1
          while_fun_7.(while_fun_7, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_7.(while_fun_7, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def exp_approx(x) do
    try do
      sum = 1.0
      term = 1.0
      i = 1
      while_fun_8 = fn while_fun_8, i, sum, term ->
        if i <= 10 do
          term = term * x / i
          sum = sum + term
          i = i + 1
          while_fun_8.(while_fun_8, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_8.(while_fun_8, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def sigmoid(x) do
    try do
      throw {:return, 1.0 / (1.0 + exp_approx(-x))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:image, [[0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
  Process.put(:bias, 0.0)
  def main() do
    Process.put(:kernel, [[1.0, 0.0, -1.0], [1.0, 0.0, -1.0], [1.0, 0.0, -1.0]])
    Process.put(:conv, conv2d(Process.get(:image), Process.get(:kernel)))
    Process.put(:activated, relu_matrix(Process.get(:conv)))
    Process.put(:pooled, max_pool2x2(Process.get(:activated)))
    Process.put(:flat, flatten(Process.get(:pooled)))
    Process.put(:weights, [0.5, -0.4, 0.3, 0.1])
    Process.put(:output, dense(Process.get(:flat), Process.get(:weights), Process.get(:bias)))
    Process.put(:probability, sigmoid(Process.get(:output)))
    if Process.get(:probability) >= 0.5 do
      IO.puts("Abnormality detected")
    else
      IO.puts("Normal")
    end
    IO.puts("Probability:")
    IO.puts(Process.get(:probability))
  end
end
Main.main()
