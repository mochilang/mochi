# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def flip_horizontal_image(img) do
    try do
      flipped = []
      i = 0
      while_fun = fn while_fun, flipped, i ->
        if i < _len(img) do
          row = Enum.at(img, i)
          j = _len(row) - 1
          new_row = []
          while_fun_2 = fn while_fun_2, j, new_row ->
            if j >= 0 do
              new_row = (new_row ++ [Enum.at(row, j)])
              j = j - 1
              while_fun_2.(while_fun_2, j, new_row)
            else
              {j, new_row}
            end
          end
          {j, new_row} = try do
              while_fun_2.(while_fun_2, j, new_row)
            catch
              {:break, {j, new_row}} -> {j, new_row}
            end

          flipped = (flipped ++ [new_row])
          i = i + 1
          while_fun.(while_fun, flipped, i)
        else
          {flipped, i}
        end
      end
      {flipped, i} = try do
          while_fun.(while_fun, flipped, i)
        catch
          {:break, {flipped, i}} -> {flipped, i}
        end

      throw {:return, flipped}
    catch
      {:return, val} -> val
    end
  end
  def flip_vertical_image(img) do
    try do
      flipped = []
      i = _len(img) - 1
      while_fun_3 = fn while_fun_3, flipped, i ->
        if i >= 0 do
          flipped = (flipped ++ [Enum.at(img, i)])
          i = i - 1
          while_fun_3.(while_fun_3, flipped, i)
        else
          {flipped, i}
        end
      end
      {flipped, i} = try do
          while_fun_3.(while_fun_3, flipped, i)
        catch
          {:break, {flipped, i}} -> {flipped, i}
        end

      throw {:return, flipped}
    catch
      {:return, val} -> val
    end
  end
  def flip_horizontal_boxes(boxes) do
    try do
      result = []
      i = 0
      while_fun_4 = fn while_fun_4, i, result ->
        if i < _len(boxes) do
          b = Enum.at(boxes, i)
          x_new = 1.0 - Enum.at(b, 1)
          result = (result ++ [[Enum.at(b, 0), x_new, Enum.at(b, 2), Enum.at(b, 3), Enum.at(b, 4)]])
          i = i + 1
          while_fun_4.(while_fun_4, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_4.(while_fun_4, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def flip_vertical_boxes(boxes) do
    try do
      result = []
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i < _len(boxes) do
          b = Enum.at(boxes, i)
          y_new = 1.0 - Enum.at(b, 2)
          result = (result ++ [[Enum.at(b, 0), Enum.at(b, 1), y_new, Enum.at(b, 3), Enum.at(b, 4)]])
          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def print_image(img) do
    try do
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(img) do
          row = Enum.at(img, i)
          j = 0
          line = ""
          while_fun_7 = fn while_fun_7, j, line ->
            if j < _len(row) do
              line = ((line <> Kernel.to_string(Enum.at(row, j))) <> " ")
              j = j + 1
              while_fun_7.(while_fun_7, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_7.(while_fun_7, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:image, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])
  Process.put(:boxes, [[0.0, 0.25, 0.25, 0.5, 0.5], [1.0, 0.75, 0.75, 0.5, 0.5]])
  def main() do
    IO.puts("Original image:")
    print_image(Process.get(:image))
    IO.puts(Kernel.to_string(Process.get(:boxes)))
    IO.puts("Horizontal flip:")
    Process.put(:h_img, flip_horizontal_image(Process.get(:image)))
    Process.put(:h_boxes, flip_horizontal_boxes(Process.get(:boxes)))
    print_image(Process.get(:h_img))
    IO.puts(Kernel.to_string(Process.get(:h_boxes)))
    IO.puts("Vertical flip:")
    Process.put(:v_img, flip_vertical_image(Process.get(:image)))
    Process.put(:v_boxes, flip_vertical_boxes(Process.get(:boxes)))
    print_image(Process.get(:v_img))
    IO.puts(Kernel.to_string(Process.get(:v_boxes)))
  end
end
Main.main()
