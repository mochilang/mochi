# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def maxpooling(arr, size, stride) do
    try do
      n = _len(arr)
      if n == 0 || _len(Enum.at(arr, 0)) != n do
        raise("The input array is not a square matrix")
      end
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i + size <= n do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j + size <= n do
              max_val = Enum.at(Enum.at(arr, i), j)
              r = i
              while_fun_3 = fn while_fun_3, max_val, r ->
                if r < i + size do
                  c = j
                  while_fun_4 = fn while_fun_4, c, max_val ->
                    if c < j + size do
                      val = Enum.at(Enum.at(arr, r), c)
                      {max_val} = if val > max_val do
                        max_val = val
                        {max_val}
                      else
                        {max_val}
                      end
                      c = c + 1
                      while_fun_4.(while_fun_4, c, max_val)
                    else
                      {c, max_val}
                    end
                  end
                  {c, max_val} = try do
                      while_fun_4.(while_fun_4, c, max_val)
                    catch
                      {:break, {c, max_val}} -> {c, max_val}
                    end

                  r = r + 1
                  while_fun_3.(while_fun_3, max_val, r)
                else
                  {max_val, r}
                end
              end
              {max_val, r} = try do
                  while_fun_3.(while_fun_3, max_val, r)
                catch
                  {:break, {max_val, r}} -> {max_val, r}
                end

              row = (row ++ [max_val])
              j = j + stride
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + stride
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def avgpooling(arr, size, stride) do
    try do
      n = _len(arr)
      if n == 0 || _len(Enum.at(arr, 0)) != n do
        raise("The input array is not a square matrix")
      end
      result = []
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i + size <= n do
          row = []
          j = 0
          while_fun_6 = fn while_fun_6, j, row ->
            if j + size <= n do
              sum = 0
              r = i
              while_fun_7 = fn while_fun_7, r, sum ->
                if r < i + size do
                  c = j
                  while_fun_8 = fn while_fun_8, c, sum ->
                    if c < j + size do
                      sum = sum + Enum.at(Enum.at(arr, r), c)
                      c = c + 1
                      while_fun_8.(while_fun_8, c, sum)
                    else
                      {c, sum}
                    end
                  end
                  {c, sum} = try do
                      while_fun_8.(while_fun_8, c, sum)
                    catch
                      {:break, {c, sum}} -> {c, sum}
                    end

                  r = r + 1
                  while_fun_7.(while_fun_7, r, sum)
                else
                  {r, sum}
                end
              end
              {r, sum} = try do
                  while_fun_7.(while_fun_7, r, sum)
                catch
                  {:break, {r, sum}} -> {r, sum}
                end

              row = (row ++ [div(sum, (size * size))])
              j = j + stride
              while_fun_6.(while_fun_6, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_6.(while_fun_6, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + stride
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def print_matrix(mat) do
    try do
      i = 0
      while_fun_9 = fn while_fun_9, i ->
        if i < _len(mat) do
          line = ""
          j = 0
          while_fun_10 = fn while_fun_10, j, line ->
            if j < _len(Enum.at(mat, i)) do
              line = (line <> Kernel.to_string(Enum.at(Enum.at(mat, i), j)))
              {line} = if j < _len(Enum.at(mat, i)) - 1 do
                line = (line <> " ")
                {line}
              else
                {line}
              end
              j = j + 1
              while_fun_10.(while_fun_10, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_10.(while_fun_10, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          i = i + 1
          while_fun_9.(while_fun_9, i)
        else
          i
        end
      end
      i = try do
          while_fun_9.(while_fun_9, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      arr1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
      arr2 = [[147, 180, 122], [241, 76, 32], [126, 13, 157]]
      print_matrix(maxpooling(arr1, 2, 2))
      print_matrix(maxpooling(arr2, 2, 1))
      print_matrix(avgpooling(arr1, 2, 2))
      print_matrix(avgpooling(arr2, 2, 1))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
