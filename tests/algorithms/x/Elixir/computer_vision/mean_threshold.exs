# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def mean_threshold(image) do
    try do
      height = _len(image)
      width = _len(Enum.at(image, 0))
      total = 0
      i = 0
      while_fun = fn while_fun, i, total ->
        if i < height do
          j = 0
          while_fun_2 = fn while_fun_2, j, total ->
            if j < width do
              total = total + Enum.at(Enum.at(image, i), j)
              j = j + 1
              while_fun_2.(while_fun_2, j, total)
            else
              {j, total}
            end
          end
          {j, total} = try do
              while_fun_2.(while_fun_2, j, total)
            catch
              {:break, {j, total}} -> {j, total}
            end

          i = i + 1
          while_fun.(while_fun, i, total)
        else
          {i, total}
        end
      end
      {i, total} = try do
          while_fun.(while_fun, i, total)
        catch
          {:break, {i, total}} -> {i, total}
        end

      mean = div(total, (height * width))
      i = 0
      while_fun_3 = fn while_fun_3, i, image ->
        if i < height do
          j = 0
          while_fun_4 = fn while_fun_4, image, j ->
            if j < width do
              {image} = if Enum.at(Enum.at(image, i), j) > mean do
                image = List.replace_at(image, i, List.replace_at(Enum.at(image, i), j, 255))
                {image}
              else
                image = List.replace_at(image, i, List.replace_at(Enum.at(image, i), j, 0))
                {image}
              end
              j = j + 1
              while_fun_4.(while_fun_4, image, j)
            else
              {image, j}
            end
          end
          {image, j} = try do
              while_fun_4.(while_fun_4, image, j)
            catch
              {:break, {image, j}} -> {image, j}
            end

          i = i + 1
          while_fun_3.(while_fun_3, i, image)
        else
          {i, image}
        end
      end
      {i, image} = try do
          while_fun_3.(while_fun_3, i, image)
        catch
          {:break, {i, image}} -> {i, image}
        end

      throw {:return, image}
    catch
      {:return, val} -> val
    end
  end
  def print_image(image) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(image) do
          IO.puts(Kernel.inspect(Enum.at(image, i)))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:img, [[10, 200, 50], [100, 150, 30], [90, 80, 220]])
  def main() do
    Process.put(:result, mean_threshold(Process.get(:img)))
    print_image(Process.get(:result))
  end
end
Main.main()
