# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def segment_image(image, thresholds) do
    try do
      segmented = []
      i = 0
      while_fun = fn while_fun, i, segmented ->
        if i < _len(image) do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < _len(Enum.at(image, i)) do
              pixel = Enum.at(Enum.at(image, i), j)
              label = 0
              k = 0
              while_fun_3 = fn while_fun_3, k, label ->
                if k < _len(thresholds) do
                  {label} = if pixel > Enum.at(thresholds, k) do
                    label = k + 1
                    {label}
                  else
                    {label}
                  end
                  k = k + 1
                  while_fun_3.(while_fun_3, k, label)
                else
                  {k, label}
                end
              end
              {k, label} = try do
                  while_fun_3.(while_fun_3, k, label)
                catch
                  {:break, {k, label}} -> {k, label}
                end

              row = (row ++ [label])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          segmented = (segmented ++ [row])
          i = i + 1
          while_fun.(while_fun, i, segmented)
        else
          {i, segmented}
        end
      end
      {i, segmented} = try do
          while_fun.(while_fun, i, segmented)
        catch
          {:break, {i, segmented}} -> {i, segmented}
        end

      throw {:return, segmented}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      image = [[80, 120, 180], [40, 90, 150], [20, 60, 100]]
      thresholds = [50, 100, 150]
      segmented = segment_image(image, thresholds)
      IO.puts(Kernel.inspect(segmented))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
