# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def send_file(content, chunk_size) do
    try do
      start = 0
      n = _len(content)
      while_fun = fn while_fun, start ->
        if start < n do
          end_ = start + chunk_size
          {end_} = if end_ > n do
            end_ = n
            {end_}
          else
            {end_}
          end
          chunk = _slice(content, start, end_ - (start))
          IO.puts(chunk)
          start = end_
          while_fun.(while_fun, start)
        else
          start
        end
      end
      start = try do
          while_fun.(while_fun, start)
        catch
          {:break, {start}} -> start
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    send_file("The quick brown fox jumps over the lazy dog.", 10)
  end
end
Main.main()
