# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def receive_file(chunks) do
    try do
      out = ""
      i = 0
      IO.puts("File opened")
      IO.puts("Receiving data...")
      while_fun = fn while_fun, i, out ->
        if i < _len(chunks) do
          data = Enum.at(chunks, i, [])
          if data == "" do
            throw {:break, {i, out}}
          end
          out = (out <> data)
          i = i + 1
          while_fun.(while_fun, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun.(while_fun, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      IO.puts("Successfully received the file")
      IO.puts("Connection closed")
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      incoming = ["Hello ", "from ", "server"]
      received = receive_file(incoming)
      IO.puts(received)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
