# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def reverse(s) do
    try do
      res = ""
      i = _len(s) - 1
      while_fun = fn while_fun, i, res ->
        if i >= 0 do
          res = (res <> String.at(s, i))
          i = i - 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def is_palindrome(s) do
    try do
      start_i = 0
      end_i = _len(s) - 1
      while_fun_2 = fn while_fun_2, end_i, start_i ->
        if start_i < end_i do
          {end_i, start_i} = if String.at(s, start_i) == String.at(s, end_i) do
            start_i = start_i + 1
            end_i = end_i - 1
            {end_i, start_i}
          else
            throw {:return, false}
            {end_i, start_i}
          end
          while_fun_2.(while_fun_2, end_i, start_i)
        else
          {end_i, start_i}
        end
      end
      {end_i, start_i} = try do
          while_fun_2.(while_fun_2, end_i, start_i)
        catch
          {:break, {end_i, start_i}} -> {end_i, start_i}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def is_palindrome_traversal(s) do
    try do
      end_ = div(_len(s), 2)
      n = _len(s)
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < end_ do
          if String.at(s, i) != String.at(s, n - i - 1) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def is_palindrome_recursive(s) do
    try do
      if _len(s) <= 1 do
        throw {:return, true}
      end
      if String.at(s, 0) == String.at(s, _len(s) - 1) do
        throw {:return, is_palindrome_recursive(_slice(s, 1, (_len(s) - 1) - 1))}
      end
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def is_palindrome_slice(s) do
    try do
      throw {:return, s == reverse(s)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      Enum.each(Process.get(:test_data), fn t ->
        s = t.text
        expected = t.expected
        r1 = is_palindrome(s)
        r2 = is_palindrome_traversal(s)
        r3 = is_palindrome_recursive(s)
        r4 = is_palindrome_slice(s)
        if r1 != expected || r2 != expected || r3 != expected || r4 != expected do
          raise("algorithm mismatch")
        end
        IO.puts(((s <> " ") <> Kernel.to_string(expected)))
      end)
      IO.puts("a man a plan a canal panama")
    catch
      {:return, val} -> val
    end
  end
  Process.put(:test_data, [%{text: "MALAYALAM", expected: true}, %{text: "String", expected: false}, %{text: "rotor", expected: true}, %{text: "level", expected: true}, %{text: "A", expected: true}, %{text: "BB", expected: true}, %{text: "ABC", expected: false}, %{text: "amanaplanacanalpanama", expected: true}])
  def bench_main() do
    Process.put(:test_data, [%{text: "MALAYALAM", expected: true}, %{text: "String", expected: false}, %{text: "rotor", expected: true}, %{text: "level", expected: true}, %{text: "A", expected: true}, %{text: "BB", expected: true}, %{text: "ABC", expected: false}, %{text: "amanaplanacanalpanama", expected: true}])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
