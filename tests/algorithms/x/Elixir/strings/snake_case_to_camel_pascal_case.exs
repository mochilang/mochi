# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def split(s, sep) do
    try do
      res = []
      current = ""
      i = 0
      while_fun = fn while_fun, current, i, res ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {current, res} = if ch == sep do
            res = (res ++ [current])
            current = ""
            {current, res}
          else
            current = (current <> ch)
            {current, res}
          end
          i = i + 1
          while_fun.(while_fun, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun.(while_fun, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      res = (res ++ [current])
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def capitalize(word) do
    try do
      if _len(word) == 0 do
        throw {:return, ""}
      end
      first = String.upcase(_slice(word, 0, 1 - (0)))
      rest = _slice(word, 1, _len(word) - (1))
      throw {:return, (first <> rest)}
    catch
      {:return, val} -> val
    end
  end
  def snake_to_camel_case(input_str, use_pascal) do
    try do
      words = split(input_str, "_")
      result = ""
      index = 0
      {index, result} = if !use_pascal do
        {index, result} = if _len(words) > 0 do
          result = Enum.at(words, 0, [])
          index = 1
          {index, result}
        else
          {index, result}
        end
        {index, result}
      else
        {index, result}
      end
      while_fun_2 = fn while_fun_2, index, result ->
        if index < _len(words) do
          word = Enum.at(words, index, [])
          result = (result <> capitalize(word))
          index = index + 1
          while_fun_2.(while_fun_2, index, result)
        else
          {index, result}
        end
      end
      {index, result} = try do
          while_fun_2.(while_fun_2, index, result)
        catch
          {:break, {index, result}} -> {index, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(snake_to_camel_case("some_random_string", false)))
    IO.puts(Kernel.inspect(snake_to_camel_case("some_random_string", true)))
    IO.puts(Kernel.inspect(snake_to_camel_case("some_random_string_with_numbers_123", false)))
    IO.puts(Kernel.inspect(snake_to_camel_case("some_random_string_with_numbers_123", true)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
