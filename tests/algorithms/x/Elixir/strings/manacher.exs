# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def palindromic_string(input_string) do
    try do
      max_length = 0
      new_input_string = ""
      output_string = ""
      n = _len(input_string)
      i = 0
      while_fun = fn while_fun, i, new_input_string ->
        if i < n - 1 do
          new_input_string = ((new_input_string <> _slice(input_string, i, i + 1 - (i))) <> "|")
          i = i + 1
          while_fun.(while_fun, i, new_input_string)
        else
          {i, new_input_string}
        end
      end
      {i, new_input_string} = try do
          while_fun.(while_fun, i, new_input_string)
        catch
          {:break, {i, new_input_string}} -> {i, new_input_string}
        end

      new_input_string = (new_input_string <> _slice(input_string, n - 1, n - (n - 1)))
      left = 0
      right = 0
      length = []
      i = 0
      m = _len(new_input_string)
      while_fun_2 = fn while_fun_2, i, length ->
        if i < m do
          length = (length ++ [1])
          i = i + 1
          while_fun_2.(while_fun_2, i, length)
        else
          {i, length}
        end
      end
      {i, length} = try do
          while_fun_2.(while_fun_2, i, length)
        catch
          {:break, {i, length}} -> {i, length}
        end

      start = 0
      j = 0
      while_fun_3 = fn while_fun_3, j, left, length, max_length, right, start ->
        if j < m do
          k = 1
          {k} = if j <= right do
            mirror = left + right - j
            k = div(Enum.at(length, mirror, []), 2)
            diff = right - j + 1
            {k} = if diff < k do
              k = diff
              {k}
            else
              {k}
            end
            {k} = if k < 1 do
              k = 1
              {k}
            else
              {k}
            end
            {k}
          else
            {k}
          end
          while_fun_4 = fn while_fun_4, k ->
            if j - k >= 0 && j + k < m && _slice(new_input_string, j + k, j + k + 1 - (j + k)) == _slice(new_input_string, j - k, j - k + 1 - (j - k)) do
              k = k + 1
              while_fun_4.(while_fun_4, k)
            else
              k
            end
          end
          k = try do
              while_fun_4.(while_fun_4, k)
            catch
              {:break, {k}} -> k
            end

          length = List.replace_at(length, j, 2 * k - 1)
          {left, right} = if j + k - 1 > right do
            left = j - k + 1
            right = j + k - 1
            {left, right}
          else
            {left, right}
          end
          {max_length, start} = if Enum.at(length, j, []) > max_length do
            max_length = Enum.at(length, j, [])
            start = j
            {max_length, start}
          else
            {max_length, start}
          end
          j = j + 1
          while_fun_3.(while_fun_3, j, left, length, max_length, right, start)
        else
          {j, left, length, max_length, right, start}
        end
      end
      {j, left, length, max_length, right, start} = try do
          while_fun_3.(while_fun_3, j, left, length, max_length, right, start)
        catch
          {:break, {j, left, length, max_length, right, start}} -> {j, left, length, max_length, right, start}
        end

      s = _slice(new_input_string, start - div(max_length, 2), start + div(max_length, 2) + 1 - (start - div(max_length, 2)))
      idx = 0
      while_fun_5 = fn while_fun_5, idx, output_string ->
        if idx < _len(s) do
          ch = _slice(s, idx, idx + 1 - (idx))
          {output_string} = if ch != "|" do
            output_string = (output_string <> ch)
            {output_string}
          else
            {output_string}
          end
          idx = idx + 1
          while_fun_5.(while_fun_5, idx, output_string)
        else
          {idx, output_string}
        end
      end
      {idx, output_string} = try do
          while_fun_5.(while_fun_5, idx, output_string)
        catch
          {:break, {idx, output_string}} -> {idx, output_string}
        end

      throw {:return, output_string}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(palindromic_string("abbbaba")))
      IO.puts(Kernel.inspect(palindromic_string("ababa")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
