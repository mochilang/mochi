# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_failure_array(pattern) do
    try do
      failure = [0]
      i = 0
      j = 1
      while_fun = fn while_fun, failure, i, j ->
        if j < _len(pattern) do
          {failure, i, j} = try do
            {i} = if _slice(pattern, i, i + 1 - (i)) == _slice(pattern, j, j + 1 - (j)) do
              i = i + 1
              {i}
            else
              {i} = if i > 0 do
                i = Enum.at(failure, i - 1, [])
                throw {:continue, {failure, i, j}}
                {i}
              else
                {i}
              end
              {i}
            end
            j = j + 1
            failure = (failure ++ [i])
            {failure, i, j}
          catch
            {:continue, {failure, i, j}} -> {failure, i, j}
          end
          while_fun.(while_fun, failure, i, j)
        else
          {failure, i, j}
        end
      end
      {failure, i, j} = try do
          while_fun.(while_fun, failure, i, j)
        catch
          {:break, {failure, i, j}} -> {failure, i, j}
        end

      throw {:return, failure}
    catch
      {:return, val} -> val
    end
  end
  def knuth_morris_pratt(text, pattern) do
    try do
      failure = get_failure_array(pattern)
      i = 0
      j = 0
      while_fun_2 = fn while_fun_2, i, j ->
        if i < _len(text) do
          {i, j} = try do
            {j} = if _slice(pattern, j, j + 1 - (j)) == _slice(text, i, i + 1 - (i)) do
              if j == _len(pattern) - 1 do
                throw {:return, i - j}
              end
              j = j + 1
              {j}
            else
              {j} = if j > 0 do
                j = Enum.at(failure, j - 1, [])
                throw {:continue, {i, j}}
                {j}
              else
                {j}
              end
              {j}
            end
            i = i + 1
            {i, j}
          catch
            {:continue, {i, j}} -> {i, j}
          end
          while_fun_2.(while_fun_2, i, j)
        else
          {i, j}
        end
      end
      {i, j} = try do
          while_fun_2.(while_fun_2, i, j)
        catch
          {:break, {i, j}} -> {i, j}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:text, "abcxabcdabxabcdabcdabcy")
  Process.put(:pattern, "abcdabcy")
  def main() do
    IO.puts(Kernel.inspect(knuth_morris_pratt(Process.get(:text), Process.get(:pattern))))
  end
end
Main.main()
