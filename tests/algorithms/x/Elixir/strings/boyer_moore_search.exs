# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def match_in_pattern(pat, ch) do
    try do
      i = _len(pat) - 1
      while_fun = fn while_fun, i ->
        if i >= 0 do
          if _slice(pat, i, i + 1 - (i)) == ch do
            throw {:return, i}
          end
          i = i - 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def mismatch_in_text(text, pat, current_pos) do
    try do
      i = _len(pat) - 1
      while_fun_2 = fn while_fun_2, i ->
        if i >= 0 do
          if _slice(pat, i, i + 1 - (i)) != _slice(text, current_pos + i, current_pos + i + 1 - (current_pos + i)) do
            throw {:return, current_pos + i}
          end
          i = i - 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def bad_character_heuristic(text, pat) do
    try do
      textLen = _len(text)
      patLen = _len(pat)
      positions = []
      i = 0
      while_fun_3 = fn while_fun_3, i, positions ->
        if i <= textLen - patLen do
          mismatch_index = mismatch_in_text(text, pat, i)
          {i, positions} = if mismatch_index < 0 do
            positions = (positions ++ [i])
            i = i + 1
            {i, positions}
          else
            ch = _slice(text, mismatch_index, mismatch_index + 1 - (mismatch_index))
            match_index = match_in_pattern(pat, ch)
            i = (if match_index < 0, do: mismatch_index + 1, else: mismatch_index - match_index)
            {i, positions}
          end
          while_fun_3.(while_fun_3, i, positions)
        else
          {i, positions}
        end
      end
      {i, positions} = try do
          while_fun_3.(while_fun_3, i, positions)
        catch
          {:break, {i, positions}} -> {i, positions}
        end

      throw {:return, positions}
    catch
      {:return, val} -> val
    end
  end
  def main() do
  end
end
Main.main()
