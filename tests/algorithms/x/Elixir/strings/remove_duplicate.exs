# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def split_ws(s) do
    try do
      res = []
      word = ""
      i = 0
      while_fun = fn while_fun, i, res, word ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {res, word} = if ch == " " do
            {res, word} = if word != "" do
              res = (res ++ [word])
              word = ""
              {res, word}
            else
              {res, word}
            end
            {res, word}
          else
            word = (word <> ch)
            {res, word}
          end
          i = i + 1
          while_fun.(while_fun, i, res, word)
        else
          {i, res, word}
        end
      end
      {i, res, word} = try do
          while_fun.(while_fun, i, res, word)
        catch
          {:break, {i, res, word}} -> {i, res, word}
        end

      {res} = if word != "" do
        res = (res ++ [word])
        {res}
      else
        {res}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def contains(xs, x) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(xs) do
          if Enum.at(xs, i, []) == x do
            throw {:return, true}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def unique(xs) do
    try do
      res = []
      i = 0
      while_fun_3 = fn while_fun_3, i, res ->
        if i < _len(xs) do
          w = Enum.at(xs, i, [])
          {res} = if !contains(res, w) do
            res = (res ++ [w])
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def insertion_sort(arr) do
    try do
      a = arr
      i = 1
      while_fun_4 = fn while_fun_4, a, i ->
        if i < _len(a) do
          key = Enum.at(a, i, [])
          j = i - 1
          while_fun_5 = fn while_fun_5, a, j ->
            if j >= 0 && Enum.at(a, j, []) > key do
              a = List.replace_at(a, j + 1, Enum.at(a, j, []))
              j = j - 1
              while_fun_5.(while_fun_5, a, j)
            else
              {a, j}
            end
          end
          {a, j} = try do
              while_fun_5.(while_fun_5, a, j)
            catch
              {:break, {a, j}} -> {a, j}
            end

          a = List.replace_at(a, j + 1, key)
          i = i + 1
          while_fun_4.(while_fun_4, a, i)
        else
          {a, i}
        end
      end
      {a, i} = try do
          while_fun_4.(while_fun_4, a, i)
        catch
          {:break, {a, i}} -> {a, i}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def join_with_space(xs) do
    try do
      s = ""
      i = 0
      while_fun_6 = fn while_fun_6, i, s ->
        if i < _len(xs) do
          {s} = if i > 0 do
            s = (s <> " ")
            {s}
          else
            {s}
          end
          s = (s <> Enum.at(xs, i, []))
          i = i + 1
          while_fun_6.(while_fun_6, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_6.(while_fun_6, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def remove_duplicates(sentence) do
    try do
      words = split_ws(sentence)
      uniq = unique(words)
      sorted_words = insertion_sort(uniq)
      throw {:return, join_with_space(sorted_words)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(remove_duplicates("Python is great and Java is also great")))
    IO.puts(Kernel.inspect(remove_duplicates("Python   is      great and Java is also great")))
  end
end
Main.main()
