# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def to_title_case(word) do
    try do
      if _len(word) == 0 do
        throw {:return, ""}
      end
      first = _slice(word, 0, 1 - 0)
      idx = index_of(Process.get(:lower), first)
      result = (if idx >= 0, do: _slice(Process.get(:upper), idx, (idx + 1) - idx), else: first)
      i = 1
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(word) do
          ch = _slice(word, i, (i + 1) - i)
          uidx = index_of(Process.get(:upper), ch)
          result = (if uidx >= 0, do: (result <> _slice(Process.get(:lower), uidx, (uidx + 1) - uidx)), else: (result <> ch))
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def split_words(s) do
    try do
      words = []
      current = ""
      i = 0
      while_fun_3 = fn while_fun_3, current, i, words ->
        if i < _len(s) do
          ch = String.at(s, i)
          {current, words} = if ch == " " do
            {current, words} = if _len(current) > 0 do
              words = (words ++ [current])
              current = ""
              {current, words}
            else
              {current, words}
            end
            {current, words}
          else
            current = (current <> ch)
            {current, words}
          end
          i = i + 1
          while_fun_3.(while_fun_3, current, i, words)
        else
          {current, i, words}
        end
      end
      {current, i, words} = try do
          while_fun_3.(while_fun_3, current, i, words)
        catch
          {:break, {current, i, words}} -> {current, i, words}
        end

      {words} = if _len(current) > 0 do
        words = (words ++ [current])
        {words}
      else
        {words}
      end
      throw {:return, words}
    catch
      {:return, val} -> val
    end
  end
  def sentence_to_title_case(sentence) do
    try do
      words = split_words(sentence)
      res = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, res ->
        if i < _len(words) do
          res = (res <> to_title_case(Enum.at(words, i, [])))
          {res} = if i + 1 < _len(words) do
            res = (res <> " ")
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_4.(while_fun_4, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:lower, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:upper, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(to_title_case("Aakash")))
    IO.puts(Kernel.inspect(to_title_case("aakash")))
    IO.puts(Kernel.inspect(to_title_case("AAKASH")))
    IO.puts(Kernel.inspect(to_title_case("aAkAsH")))
    IO.puts(Kernel.inspect(sentence_to_title_case("Aakash Giri")))
    IO.puts(Kernel.inspect(sentence_to_title_case("aakash giri")))
    IO.puts(Kernel.inspect(sentence_to_title_case("AAKASH GIRI")))
    IO.puts(Kernel.inspect(sentence_to_title_case("aAkAsH gIrI")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
