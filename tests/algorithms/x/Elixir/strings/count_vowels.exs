# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_vowel(c) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:vowels)) do
          if String.at(Process.get(:vowels), i) == c do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def count_vowels(s) do
    try do
      count = 0
      i = 0
      while_fun_2 = fn while_fun_2, count, i ->
        if i < _len(s) do
          ch = String.at(s, i)
          {count} = if is_vowel(ch) do
            count = count + 1
            {count}
          else
            {count}
          end
          i = i + 1
          while_fun_2.(while_fun_2, count, i)
        else
          {count, i}
        end
      end
      {count, i} = try do
          while_fun_2.(while_fun_2, count, i)
        catch
          {:break, {count, i}} -> {count, i}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def show(s) do
    try do
      IO.puts(Kernel.inspect(count_vowels(s)))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:vowels, "aeiouAEIOU")
  def main() do
    show("hello world")
    show("HELLO WORLD")
    show("123 hello world")
    show("")
    show("a quick brown fox")
    show("the quick BROWN fox")
    show("PYTHON")
  end
end
Main.main()
