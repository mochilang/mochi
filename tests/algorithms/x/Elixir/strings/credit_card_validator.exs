# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def validate_initial_digits(cc) do
    try do
      throw {:return, _slice(cc, 0, 2 - 0) == "34" || _slice(cc, 0, 2 - 0) == "35" || _slice(cc, 0, 2 - 0) == "37" || _slice(cc, 0, 1 - 0) == "4" || _slice(cc, 0, 1 - 0) == "5" || _slice(cc, 0, 1 - 0) == "6"}
    catch
      {:return, val} -> val
    end
  end
  def luhn_validation(cc) do
    try do
      sum = 0
      double_digit = false
      i = _len(cc) - 1
      while_fun = fn while_fun, double_digit, i, sum ->
        if i >= 0 do
          n = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(_slice(cc, i, (i + 1) - i))
          {n} = if double_digit do
            n = n * 2
            {n} = if n > 9 do
              n = n - 9
              {n}
            else
              {n}
            end
            {n}
          else
            {n}
          end
          sum = sum + n
          double_digit = !double_digit
          i = i - 1
          while_fun.(while_fun, double_digit, i, sum)
        else
          {double_digit, i, sum}
        end
      end
      {double_digit, i, sum} = try do
          while_fun.(while_fun, double_digit, i, sum)
        catch
          {:break, {double_digit, i, sum}} -> {double_digit, i, sum}
        end

      throw {:return, rem(sum, 10) == 0}
    catch
      {:return, val} -> val
    end
  end
  def is_digit_string(s) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(s) do
          c = _slice(s, i, (i + 1) - i)
          if c < "0" || c > "9" do
            throw {:return, false}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def validate_credit_card_number(cc) do
    try do
      error_message = (cc <> " is an invalid credit card number because")
      if !is_digit_string(cc) do
        IO.puts((error_message <> " it has nonnumerical characters."))
        throw {:return, false}
      end
      if !(_len(cc) >= 13 && _len(cc) <= 16) do
        IO.puts((error_message <> " of its length."))
        throw {:return, false}
      end
      if !validate_initial_digits(cc) do
        IO.puts((error_message <> " of its first two digits."))
        throw {:return, false}
      end
      if !luhn_validation(cc) do
        IO.puts((error_message <> " it fails the Luhn check."))
        throw {:return, false}
      end
      IO.puts((cc <> " is a valid credit card number."))
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      validate_credit_card_number("4111111111111111")
      validate_credit_card_number("32323")
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
