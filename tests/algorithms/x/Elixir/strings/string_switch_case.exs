# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def split_words(s) do
    try do
      words = []
      current = ""
      {current, words} = Enum.reduce(String.graphemes(s), {current, words}, fn ch, {current, words} ->
        {current, words} = if ch == " " do
          {current, words} = if current != "" do
            words = (words ++ [current])
            current = ""
            {current, words}
          else
            {current, words}
          end
          {current, words}
        else
          current = (current <> ch)
          {current, words}
        end
        {current, words}
      end)
      {words} = if current != "" do
        words = (words ++ [current])
        {words}
      else
        {words}
      end
      throw {:return, words}
    catch
      {:return, val} -> val
    end
  end
  def is_alnum(c) do
    try do
      throw {:return, String.contains?("0123456789", c) || String.contains?("abcdefghijklmnopqrstuvwxyz", c) || String.contains?("ABCDEFGHIJKLMNOPQRSTUVWXYZ", c) || c == " "}
    catch
      {:return, val} -> val
    end
  end
  def split_input(text) do
    try do
      result = []
      current = ""
      {current, result} = Enum.reduce(String.graphemes(text), {current, result}, fn ch, {current, result} ->
        {current, result} = if is_alnum(ch) do
          current = (current <> ch)
          {current, result}
        else
          {current, result} = if current != "" do
            result = (result ++ [split_words(current)])
            current = ""
            {current, result}
          else
            {current, result}
          end
          {current, result}
        end
        {current, result}
      end)
      {result} = if current != "" do
        result = (result ++ [split_words(current)])
        {result}
      else
        {result}
      end
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def capitalize(word) do
    try do
      if _len(word) == 0 do
        throw {:return, ""}
      end
      if _len(word) == 1 do
        throw {:return, String.upcase(word)}
      end
      throw {:return, (String.upcase(_slice(word, 0, 1 - 0)) <> String.downcase(_slice(word, 1, _len(word) - 1)))}
    catch
      {:return, val} -> val
    end
  end
  def to_simple_case(text) do
    try do
      parts = split_input(text)
      res = ""
      {res} = Enum.reduce(parts, {res}, fn sub, {res} ->
        {res} = Enum.reduce(sub, {res}, fn w, {res} ->
          res = (res <> capitalize(w))
          {res}
        end)
        {res}
      end)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def to_complex_case(text, upper_flag, sep) do
    try do
      parts = split_input(text)
      res = ""
      {res} = Enum.reduce(parts, {res}, fn sub, {res} ->
        first = true
        {first, res} = Enum.reduce(sub, {first, res}, fn w, {first, res} ->
          word = (if upper_flag, do: String.upcase(w), else: String.downcase(w))
          {first, res} = if first do
            res = (res <> word)
            first = false
            {first, res}
          else
            res = ((res <> sep) <> word)
            {first, res}
          end
          {first, res}
        end)
        {res}
      end)
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def to_pascal_case(text) do
    try do
      throw {:return, to_simple_case(text)}
    catch
      {:return, val} -> val
    end
  end
  def to_camel_case(text) do
    try do
      s = to_simple_case(text)
      if _len(s) == 0 do
        throw {:return, ""}
      end
      throw {:return, (String.downcase(_slice(s, 0, 1 - 0)) <> _slice(s, 1, _len(s) - 1))}
    catch
      {:return, val} -> val
    end
  end
  def to_snake_case(text, upper_flag) do
    try do
      throw {:return, to_complex_case(text, upper_flag, "_")}
    catch
      {:return, val} -> val
    end
  end
  def to_kebab_case(text, upper_flag) do
    try do
      throw {:return, to_complex_case(text, upper_flag, "-")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(to_pascal_case("one two 31235three4four")))
    IO.puts(Kernel.inspect(to_camel_case("one two 31235three4four")))
    IO.puts(Kernel.inspect(to_snake_case("one two 31235three4four", true)))
    IO.puts(Kernel.inspect(to_snake_case("one two 31235three4four", false)))
    IO.puts(Kernel.inspect(to_kebab_case("one two 31235three4four", true)))
    IO.puts(Kernel.inspect(to_kebab_case("one two 31235three4four", false)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
