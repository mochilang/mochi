# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def char_to_lower(c) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:letters)) do
          if c == _slice(Process.get(:letters), i, i + 1 - (i)) do
            throw {:return, _slice(Process.get(:lowercase), i, i + 1 - (i))}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def normalize(input_str) do
    try do
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(input_str) do
          ch = _slice(input_str, i, i + 1 - (i))
          lc = char_to_lower(ch)
          {res} = if lc >= "a" && lc <= "z" do
            res = (res <> lc)
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def can_string_be_rearranged_as_palindrome_counter(input_str) do
    try do
      s = normalize(input_str)
      freq = %{}
      i = 0
      while_fun_3 = fn while_fun_3, freq, i ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          freq = Map.put(freq, ch, ((if Map.has_key?(freq, ch), do: freq[ch] + 1, else: 1)))
          i = i + 1
          while_fun_3.(while_fun_3, freq, i)
        else
          {freq, i}
        end
      end
      {freq, i} = try do
          while_fun_3.(while_fun_3, freq, i)
        catch
          {:break, {freq, i}} -> {freq, i}
        end

      odd = 0
      {odd} = Enum.reduce(Map.keys(freq), {odd}, fn key, {odd} ->
        {odd} = if rem(freq[key], 2) != 0 do
          odd = odd + 1
          {odd}
        else
          {odd}
        end
        {odd}
      end)
      throw {:return, odd < 2}
    catch
      {:return, val} -> val
    end
  end
  def can_string_be_rearranged_as_palindrome(input_str) do
    try do
      s = normalize(input_str)
      if _len(s) == 0 do
        throw {:return, true}
      end
      character_freq_dict = %{}
      i = 0
      while_fun_4 = fn while_fun_4, character_freq_dict, i ->
        if i < _len(s) do
          character = _slice(s, i, i + 1 - (i))
          character_freq_dict = Map.put(character_freq_dict, character, ((if Map.has_key?(character_freq_dict, character), do: character_freq_dict[character] + 1, else: 1)))
          i = i + 1
          while_fun_4.(while_fun_4, character_freq_dict, i)
        else
          {character_freq_dict, i}
        end
      end
      {character_freq_dict, i} = try do
          while_fun_4.(while_fun_4, character_freq_dict, i)
        catch
          {:break, {character_freq_dict, i}} -> {character_freq_dict, i}
        end

      odd_char = 0
      {odd_char} = Enum.reduce(Map.keys(character_freq_dict), {odd_char}, fn character_key, {odd_char} ->
        character_count = character_freq_dict[character_key]
        {odd_char} = if rem(character_count, 2) != 0 do
          odd_char = odd_char + 1
          {odd_char}
        else
          {odd_char}
        end
        {odd_char}
      end)
      throw {:return, !(odd_char > 1)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:letters, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:lowercase, "abcdefghijklmnopqrstuvwxyz")
  def main() do
    IO.puts(Kernel.inspect(can_string_be_rearranged_as_palindrome_counter("Momo")))
    IO.puts(Kernel.inspect(can_string_be_rearranged_as_palindrome_counter("Mother")))
    IO.puts(Kernel.inspect(can_string_be_rearranged_as_palindrome("Momo")))
    IO.puts(Kernel.inspect(can_string_be_rearranged_as_palindrome("Mother")))
  end
end
Main.main()
