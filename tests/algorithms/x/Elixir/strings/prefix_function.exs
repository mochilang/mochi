# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def prefix_function(s) do
    try do
      pi = []
      i = 0
      while_fun = fn while_fun, i, pi ->
        if i < _len(s) do
          pi = (pi ++ [0])
          i = i + 1
          while_fun.(while_fun, i, pi)
        else
          {i, pi}
        end
      end
      {i, pi} = try do
          while_fun.(while_fun, i, pi)
        catch
          {:break, {i, pi}} -> {i, pi}
        end

      i = 1
      while_fun_2 = fn while_fun_2, i, pi ->
        if i < _len(s) do
          j = Enum.at(pi, i - 1, [])
          while_fun_3 = fn while_fun_3, j ->
            if j > 0 && String.at(s, i) != String.at(s, j) do
              j = Enum.at(pi, j - 1, [])
              while_fun_3.(while_fun_3, j)
            else
              j
            end
          end
          j = try do
              while_fun_3.(while_fun_3, j)
            catch
              {:break, {j}} -> j
            end

          {j} = if String.at(s, i) == String.at(s, j) do
            j = j + 1
            {j}
          else
            {j}
          end
          pi = List.replace_at(pi, i, j)
          i = i + 1
          while_fun_2.(while_fun_2, i, pi)
        else
          {i, pi}
        end
      end
      {i, pi} = try do
          while_fun_2.(while_fun_2, i, pi)
        catch
          {:break, {i, pi}} -> {i, pi}
        end

      throw {:return, pi}
    catch
      {:return, val} -> val
    end
  end
  def longest_prefix(s) do
    try do
      pi = prefix_function(s)
      max_val = 0
      i = 0
      while_fun_4 = fn while_fun_4, i, max_val ->
        if i < _len(pi) do
          {max_val} = if Enum.at(pi, i, []) > max_val do
            max_val = Enum.at(pi, i, [])
            {max_val}
          else
            {max_val}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, max_val)
        else
          {i, max_val}
        end
      end
      {i, max_val} = try do
          while_fun_4.(while_fun_4, i, max_val)
        catch
          {:break, {i, max_val}} -> {i, max_val}
        end

      throw {:return, max_val}
    catch
      {:return, val} -> val
    end
  end
  def list_eq_int(a, b) do
    try do
      if _len(a) != _len(b) do
        throw {:return, false}
      end
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(a) do
          if Enum.at(a, i, []) != Enum.at(b, i, []) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def test_prefix_function() do
    try do
      s1 = "aabcdaabc"
      expected1 = [0, 1, 0, 0, 0, 1, 2, 3, 4]
      r1 = prefix_function(s1)
      if !list_eq_int(r1, expected1) do
        raise("prefix_function aabcdaabc failed")
      end
      s2 = "asdasdad"
      expected2 = [0, 0, 0, 1, 2, 3, 4, 0]
      r2 = prefix_function(s2)
      if !list_eq_int(r2, expected2) do
        raise("prefix_function asdasdad failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def test_longest_prefix() do
    try do
      if longest_prefix("aabcdaabc") != 4 do
        raise("longest_prefix example1 failed")
      end
      if longest_prefix("asdasdad") != 4 do
        raise("longest_prefix example2 failed")
      end
      if longest_prefix("abcab") != 2 do
        raise("longest_prefix example3 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_prefix_function()
      test_longest_prefix()
      r1 = prefix_function("aabcdaabc")
      r2 = prefix_function("asdasdad")
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [r1])), ",", " "))
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [r2])), ",", " "))
      IO.puts(Kernel.inspect(longest_prefix("aabcdaabc")))
      IO.puts(Kernel.inspect(longest_prefix("abcab")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
