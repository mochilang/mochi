# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def autocomplete_using_trie(prefix) do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(Process.get(:words)) do
          w = Enum.at(Process.get(:words), i, [])
          {result} = if _slice(w, 0, _len(prefix) - 0) == prefix do
            result = (result ++ [(w <> " ")])
            {result}
          else
            {result}
          end
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:words, ["depart", "detergent", "daring", "dog", "deer", "deal"])
  def main() do
    IO.puts(Kernel.inspect(autocomplete_using_trie("de")))
  end
end
Main.main()
