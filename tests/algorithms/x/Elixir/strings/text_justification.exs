# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def repeat_str(s, count) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < count do
          res = (res <> s)
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def split_words(s) do
    try do
      res = []
      current = ""
      i = 0
      while_fun_2 = fn while_fun_2, current, i, res ->
        if i < _len(s) do
          ch = _slice(s, i, (i + 1) - i)
          {current, res} = if ch == " " do
            {current, res} = if current != "" do
              res = (res ++ [current])
              current = ""
              {current, res}
            else
              {current, res}
            end
            {current, res}
          else
            current = (current <> ch)
            {current, res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun_2.(while_fun_2, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      {res} = if current != "" do
        res = (res ++ [current])
        {res}
      else
        {res}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def justify_line(line, width, max_width) do
    try do
      overall_spaces_count = max_width - width
      words_count = _len(line)
      if words_count == 1 do
        throw {:return, (Enum.at(line, 0, []) <> repeat_str(" ", overall_spaces_count))}
      end
      spaces_to_insert_between_words = words_count - 1
      num_spaces_between_words_list = []
      base = div(overall_spaces_count, spaces_to_insert_between_words)
      extra = rem(overall_spaces_count, spaces_to_insert_between_words)
      i = 0
      while_fun_3 = fn while_fun_3, i, num_spaces_between_words_list ->
        if i < spaces_to_insert_between_words do
          spaces = base
          {spaces} = if i < extra do
            spaces = spaces + 1
            {spaces}
          else
            {spaces}
          end
          num_spaces_between_words_list = (num_spaces_between_words_list ++ [spaces])
          i = i + 1
          while_fun_3.(while_fun_3, i, num_spaces_between_words_list)
        else
          {i, num_spaces_between_words_list}
        end
      end
      {i, num_spaces_between_words_list} = try do
          while_fun_3.(while_fun_3, i, num_spaces_between_words_list)
        catch
          {:break, {i, num_spaces_between_words_list}} -> {i, num_spaces_between_words_list}
        end

      aligned = ""
      i = 0
      while_fun_4 = fn while_fun_4, aligned, i ->
        if i < spaces_to_insert_between_words do
          aligned = ((aligned <> Enum.at(line, i, [])) <> repeat_str(" ", Enum.at(num_spaces_between_words_list, i, [])))
          i = i + 1
          while_fun_4.(while_fun_4, aligned, i)
        else
          {aligned, i}
        end
      end
      {aligned, i} = try do
          while_fun_4.(while_fun_4, aligned, i)
        catch
          {:break, {aligned, i}} -> {aligned, i}
        end

      aligned = (aligned <> Enum.at(line, spaces_to_insert_between_words, []))
      throw {:return, aligned}
    catch
      {:return, val} -> val
    end
  end
  def text_justification(word, max_width) do
    try do
      words = split_words(word)
      answer = []
      line = []
      width = 0
      idx = 0
      while_fun_5 = fn while_fun_5, answer, idx, line, width ->
        if idx < _len(words) do
          w = Enum.at(words, idx, [])
          {answer, line, width} = if width + _len(w) + _len(line) <= max_width do
            line = (line ++ [w])
            width = width + _len(w)
            {answer, line, width}
          else
            answer = (answer ++ [justify_line(line, width, max_width)])
            line = [w]
            width = _len(w)
            {answer, line, width}
          end
          idx = idx + 1
          while_fun_5.(while_fun_5, answer, idx, line, width)
        else
          {answer, idx, line, width}
        end
      end
      {answer, idx, line, width} = try do
          while_fun_5.(while_fun_5, answer, idx, line, width)
        catch
          {:break, {answer, idx, line, width}} -> {answer, idx, line, width}
        end

      remaining_spaces = max_width - width - _len(line)
      last_line = ""
      j = 0
      while_fun_6 = fn while_fun_6, j, last_line ->
        if j < _len(line) do
          {last_line} = if j > 0 do
            last_line = (last_line <> " ")
            {last_line}
          else
            {last_line}
          end
          last_line = (last_line <> Enum.at(line, j, []))
          j = j + 1
          while_fun_6.(while_fun_6, j, last_line)
        else
          {j, last_line}
        end
      end
      {j, last_line} = try do
          while_fun_6.(while_fun_6, j, last_line)
        catch
          {:break, {j, last_line}} -> {j, last_line}
        end

      last_line = (last_line <> repeat_str(" ", remaining_spaces + 1))
      answer = (answer ++ [last_line])
      throw {:return, answer}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(text_justification("This is an example of text justification.", 16)))
    IO.puts(Kernel.inspect(text_justification("Two roads diverged in a yellow wood", 16)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
