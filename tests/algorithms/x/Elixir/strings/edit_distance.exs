# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def min3(a, b, c) do
    try do
      m = a
      {m} = if b < m do
        m = b
        {m}
      else
        {m}
      end
      {m} = if c < m do
        m = c
        {m}
      else
        {m}
      end
      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def edit_distance(source, target) do
    try do
      if _len(source) == 0 do
        throw {:return, _len(target)}
      end
      if _len(target) == 0 do
        throw {:return, _len(source)}
      end
      last_source = _slice(source, _len(source) - 1, _len(source) - (_len(source) - 1))
      last_target = _slice(target, _len(target) - 1, _len(target) - (_len(target) - 1))
      delta = (if last_source == last_target, do: 0, else: 1)
      delete_cost = edit_distance(_slice(source, 0, _len(source) - 1 - (0)), target) + 1
      insert_cost = edit_distance(source, _slice(target, 0, _len(target) - 1 - (0))) + 1
      replace_cost = edit_distance(_slice(source, 0, _len(source) - 1 - (0)), _slice(target, 0, _len(target) - 1 - (0))) + delta
      throw {:return, min3(delete_cost, insert_cost, replace_cost)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      result = edit_distance("ATCGCTG", "TAGCTAA")
      IO.puts(Kernel.to_string(result))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
