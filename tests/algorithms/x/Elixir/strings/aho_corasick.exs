# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def search_all(text, keywords) do
    try do
      result = %{}
      {result} = Enum.reduce(keywords, {result}, fn word, {result} ->
        positions = []
        m = _len(word)
        i = 0
        while_fun = fn while_fun, i, positions ->
          if i <= _len(text) - m do
            {positions} = if _slice(text, i, i + m - (i)) == word do
              positions = (positions ++ [i])
              {positions}
            else
              {positions}
            end
            i = i + 1
            while_fun.(while_fun, i, positions)
          else
            {i, positions}
          end
        end
        {i, positions} = try do
            while_fun.(while_fun, i, positions)
          catch
            {:break, {i, positions}} -> {i, positions}
          end

        {result} = if _len(positions) > 0 do
          result = Map.put(result, word, positions)
          {result}
        else
          {result}
        end
        {result}
      end)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:text, "whatever, err ... , wherever")
  Process.put(:keywords, ["what", "hat", "ver", "er"])
  def main() do
    IO.puts(Kernel.inspect(search_all(Process.get(:text), Process.get(:keywords))))
  end
end
Main.main()
