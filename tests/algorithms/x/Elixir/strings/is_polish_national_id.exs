# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def parse_int(s) do
    try do
      value = 0
      i = 0
      while_fun = fn while_fun, i, value ->
        if i < _len(s) do
          c = String.at(s, i)
          value = value * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(c))
          i = i + 1
          while_fun.(while_fun, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun.(while_fun, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def is_polish_national_id(id) do
    try do
      if _len(id) == 0 do
        throw {:return, false}
      end
      if _slice(id, 0, 1 - (0)) == "-" do
        throw {:return, false}
      end
      input_int = parse_int(id)
      if input_int < 10100000 || input_int > 99923199999 do
        throw {:return, false}
      end
      month = parse_int(_slice(id, 2, 4 - (2)))
      if !((month >= 1 && month <= 12) || (month >= 21 && month <= 32) || (month >= 41 && month <= 52) || (month >= 61 && month <= 72) || (month >= 81 && month <= 92)) do
        throw {:return, false}
      end
      day = parse_int(_slice(id, 4, 6 - (4)))
      if day < 1 || day > 31 do
        throw {:return, false}
      end
      multipliers = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3]
      subtotal = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, subtotal ->
        if i < _len(multipliers) do
          digit = parse_int(_slice(id, i, i + 1 - (i)))
          subtotal = subtotal + rem((digit * Enum.at(multipliers, i, [])), 10)
          i = i + 1
          while_fun_2.(while_fun_2, i, subtotal)
        else
          {i, subtotal}
        end
      end
      {i, subtotal} = try do
          while_fun_2.(while_fun_2, i, subtotal)
        catch
          {:break, {i, subtotal}} -> {i, subtotal}
        end

      checksum = 10 - (rem(subtotal, 10))
      throw {:return, checksum == rem(input_int, 10)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(is_polish_national_id("02070803628")))
    IO.puts(Kernel.inspect(is_polish_national_id("02150803629")))
    IO.puts(Kernel.inspect(is_polish_national_id("02075503622")))
    IO.puts(Kernel.inspect(is_polish_national_id("-99012212349")))
    IO.puts(Kernel.inspect(is_polish_national_id("990122123499999")))
    IO.puts(Kernel.inspect(is_polish_national_id("02070803621")))
  end
end
Main.main()
