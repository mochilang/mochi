# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def split_words(s) do
    try do
      words = []
      current = ""
      i = 0
      while_fun = fn while_fun, current, i, words ->
        if i < _len(s) do
          ch = String.at(s, i)
          {current, words} = if ch == " " do
            {current, words} = if _len(current) > 0 do
              words = (words ++ [current])
              current = ""
              {current, words}
            else
              {current, words}
            end
            {current, words}
          else
            current = (current <> ch)
            {current, words}
          end
          i = i + 1
          while_fun.(while_fun, current, i, words)
        else
          {current, i, words}
        end
      end
      {current, i, words} = try do
          while_fun.(while_fun, current, i, words)
        catch
          {:break, {current, i, words}} -> {current, i, words}
        end

      {words} = if _len(current) > 0 do
        words = (words ++ [current])
        {words}
      else
        {words}
      end
      throw {:return, words}
    catch
      {:return, val} -> val
    end
  end
  def reverse_words(input_str) do
    try do
      words = split_words(input_str)
      res = ""
      i = _len(words) - 1
      while_fun_2 = fn while_fun_2, i, res ->
        if i >= 0 do
          res = (res <> Enum.at(words, i, []))
          {res} = if i > 0 do
            res = (res <> " ")
            {res}
          else
            {res}
          end
          i = i - 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(reverse_words("I love Python")))
      IO.puts(Kernel.inspect(reverse_words("I     Love          Python")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
