# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def ord(ch) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      idx = index_of(upper, ch)
      if idx >= 0 do
        throw {:return, 65 + idx}
      end
      idx = index_of(lower, ch)
      if idx >= 0 do
        throw {:return, 97 + idx}
      end
      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def chr(n) do
    try do
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      lower = "abcdefghijklmnopqrstuvwxyz"
      if n >= 65 && n < 91 do
        throw {:return, _slice(upper, n - 65, (n - 64) - (n - 65))}
      end
      if n >= 97 && n < 123 do
        throw {:return, _slice(lower, n - 97, (n - 96) - (n - 97))}
      end
      throw {:return, "?"}
    catch
      {:return, val} -> val
    end
  end
  def to_lower_char(c) do
    try do
      code = ord(c)
      if code >= 65 && code <= 90 do
        throw {:return, chr(code + 32)}
      end
      throw {:return, c}
    catch
      {:return, val} -> val
    end
  end
  def is_alpha(c) do
    try do
      code = ord(c)
      throw {:return, (code >= 65 && code <= 90) || (code >= 97 && code <= 122)}
    catch
      {:return, val} -> val
    end
  end
  def is_isogram(s) do
    try do
      seen = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, seen ->
        if i < _len(s) do
          ch = String.at(s, i)
          if !is_alpha(ch) do
            raise("String must only contain alphabetic characters.")
          end
          lower = to_lower_char(ch)
          if index_of(seen, lower) >= 0 do
            throw {:return, false}
          end
          seen = (seen <> lower)
          i = i + 1
          while_fun_2.(while_fun_2, i, seen)
        else
          {i, seen}
        end
      end
      {i, seen} = try do
          while_fun_2.(while_fun_2, i, seen)
        catch
          {:break, {i, seen}} -> {i, seen}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_isogram("Uncopyrightable")))
    IO.puts(Kernel.inspect(is_isogram("allowance")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
