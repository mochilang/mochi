# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def starts_with(s, prefix) do
    try do
      throw {:return, ((if _len(s) < _len(prefix), do: false, else: _slice(s, 0, _len(prefix) - (0)) == prefix))}
    catch
      {:return, val} -> val
    end
  end
  def all_digits(s) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          c = String.at(s, i)
          if c < "0" || c > "9" do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def is_sri_lankan_phone_number(phone) do
    try do
      p = phone
      {p} = if starts_with(p, "+94") do
        p = _slice(p, 3, _len(p) - (3))
        {p}
      else
        {p} = if starts_with(p, "0094") do
          p = _slice(p, 4, _len(p) - (4))
          {p}
        else
          {p} = if starts_with(p, "94") do
            p = _slice(p, 2, _len(p) - (2))
            {p}
          else
            {p} = if starts_with(p, "0") do
              p = _slice(p, 1, _len(p) - (1))
              {p}
            else
              throw {:return, false}
              {p}
            end
            {p}
          end
          {p}
        end
        {p}
      end
      if _len(p) != 9 && _len(p) != 10 do
        throw {:return, false}
      end
      if String.at(p, 0) != "7" do
        throw {:return, false}
      end
      second = String.at(p, 1)
      allowed = ["0", "1", "2", "4", "5", "6", "7", "8"]
      if !(second in allowed) do
        throw {:return, false}
      end
      idx = 2
      {idx} = if _len(p) == 10 do
        sep = String.at(p, 2)
        if sep != "-" && sep != " " do
          throw {:return, false}
        end
        idx = 3
        {idx}
      else
        {idx}
      end
      if _len(p) - idx != 7 do
        throw {:return, false}
      end
      rest = _slice(p, idx, _len(p) - (idx))
      throw {:return, all_digits(rest)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:phone, "0094702343221")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_sri_lankan_phone_number(Process.get(:phone))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
