# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ord(ch) do
    try do
      lower = "abcdefghijklmnopqrstuvwxyz"
      upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      digits = "0123456789"
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(lower) do
          if Enum.at(lower, i, []) == ch do
            throw {:return, 97 + i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(upper) do
          if Enum.at(upper, i, []) == ch do
            throw {:return, 65 + i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(digits) do
          if String.at(digits, i) == ch do
            throw {:return, 48 + i}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      if ch == " " do
        throw {:return, 32}
      end
      if ch == "_" do
        throw {:return, 95}
      end
      if ch == "." do
        throw {:return, 46}
      end
      if ch == "'" do
        throw {:return, 39}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def lshift(num, k) do
    try do
      result = num
      i = 0
      while_fun_4 = fn while_fun_4, i, result ->
        if i < k do
          result = result * 2
          i = i + 1
          while_fun_4.(while_fun_4, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_4.(while_fun_4, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def rshift(num, k) do
    try do
      result = num
      i = 0
      while_fun_5 = fn while_fun_5, i, result ->
        if i < k do
          result = div((result - (rem(result, 2))), 2)
          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def is_contains_unique_chars(input_str) do
    try do
      bitmap = 0
      i = 0
      while_fun_6 = fn while_fun_6, bitmap, i ->
        if i < _len(input_str) do
          code = ord(String.at(input_str, i))
          if rem(rshift(bitmap, code), 2) == 1 do
            throw {:return, false}
          end
          bitmap = bitmap + lshift(1, code)
          i = i + 1
          while_fun_6.(while_fun_6, bitmap, i)
        else
          {bitmap, i}
        end
      end
      {bitmap, i} = try do
          while_fun_6.(while_fun_6, bitmap, i)
        catch
          {:break, {bitmap, i}} -> {bitmap, i}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(is_contains_unique_chars("I_love.py")))
    IO.puts(Kernel.inspect(is_contains_unique_chars("I don't love Python")))
  end
end
Main.main()
