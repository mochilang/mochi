# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def all_digits(s) do
    try do
      if _len(s) == 0 do
        throw {:return, false}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          c = String.at(s, i)
          if c < "0" || c > "9" do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def indian_phone_validator(phone) do
    try do
      s = phone
      {s} = if _len(s) >= 3 && _slice(s, 0, 3 - (0)) == "+91" do
        s = _slice(s, 3, _len(s) - (3))
        {s} = if _len(s) > 0 do
          c = String.at(s, 0)
          {s} = if c == "-" || c == " " do
            s = _slice(s, 1, _len(s) - (1))
            {s}
          else
            {s}
          end
          {s}
        else
          {s}
        end
        {s}
      else
        {s}
      end
      {s} = if _len(s) > 0 && String.at(s, 0) == "0" do
        s = _slice(s, 1, _len(s) - (1))
        {s}
      else
        {s}
      end
      {s} = if _len(s) >= 2 && _slice(s, 0, 2 - (0)) == "91" do
        s = _slice(s, 2, _len(s) - (2))
        {s}
      else
        {s}
      end
      if _len(s) != 10 do
        throw {:return, false}
      end
      first = String.at(s, 0)
      if !(first == "7" || first == "8" || first == "9") do
        throw {:return, false}
      end
      if !all_digits(s) do
        throw {:return, false}
      end
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(indian_phone_validator("+91123456789")))
    IO.puts(Kernel.inspect(indian_phone_validator("+919876543210")))
    IO.puts(Kernel.inspect(indian_phone_validator("01234567896")))
    IO.puts(Kernel.inspect(indian_phone_validator("919876543218")))
    IO.puts(Kernel.inspect(indian_phone_validator("+91-1234567899")))
    IO.puts(Kernel.inspect(indian_phone_validator("+91-9876543218")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
