# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def alternative_string_arrange(first_str, second_str) do
    try do
      len1 = _len(first_str)
      len2 = _len(second_str)
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < len1 || i < len2 do
          {res} = if i < len1 do
            res = (res <> String.at(first_str, i))
            {res}
          else
            {res}
          end
          {res} = if i < len2 do
            res = (res <> String.at(second_str, i))
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(alternative_string_arrange("ABCD", "XY")))
    IO.puts(Kernel.inspect(alternative_string_arrange("XY", "ABCD")))
    IO.puts(Kernel.inspect(alternative_string_arrange("AB", "XYZ")))
    IO.puts(Kernel.inspect(alternative_string_arrange("ABC", "")))
  end
end
Main.main()
