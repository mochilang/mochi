# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def naive_string_search(text, pattern) do
    try do
      pat_len = _len(pattern)
      positions = []
      i = 0
      while_fun = fn while_fun, i, positions ->
        if i <= _len(text) - pat_len do
          match_found = true
          j = 0
          while_fun_2 = fn while_fun_2, j, match_found ->
            if j < pat_len do
              {match_found} = if String.at(text, i + j) != String.at(pattern, j) do
                match_found = false
                throw {:break, {j, match_found}}
                {match_found}
              else
                {match_found}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, match_found)
            else
              {j, match_found}
            end
          end
          {j, match_found} = try do
              while_fun_2.(while_fun_2, j, match_found)
            catch
              {:break, {j, match_found}} -> {j, match_found}
            end

          {positions} = if match_found do
            positions = (positions ++ [i])
            {positions}
          else
            {positions}
          end
          i = i + 1
          while_fun.(while_fun, i, positions)
        else
          {i, positions}
        end
      end
      {i, positions} = try do
          while_fun.(while_fun, i, positions)
        catch
          {:break, {i, positions}} -> {i, positions}
        end

      throw {:return, positions}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(naive_string_search("ABAAABCDBBABCDDEBCABC", "ABC")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
