# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains(chars, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(chars) do
          if String.at(chars, i) == ch do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def substring(s, start, end_) do
    try do
      res = ""
      i = start
      while_fun_2 = fn while_fun_2, i, res ->
        if i < end_ do
          res = (res <> String.at(s, i))
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def strip_chars(user_string, characters) do
    try do
      start = 0
      end_ = _len(user_string)
      while_fun_3 = fn while_fun_3, start ->
        if start < end_ && contains(characters, String.at(user_string, start)) do
          start = start + 1
          while_fun_3.(while_fun_3, start)
        else
          start
        end
      end
      start = try do
          while_fun_3.(while_fun_3, start)
        catch
          {:break, {start}} -> start
        end

      while_fun_4 = fn while_fun_4, end_ ->
        if end_ > start && contains(characters, String.at(user_string, end_ - 1)) do
          end_ = end_ - 1
          while_fun_4.(while_fun_4, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_4.(while_fun_4, end_)
        catch
          {:break, {end_}} -> end_
        end

      throw {:return, substring(user_string, start, end_)}
    catch
      {:return, val} -> val
    end
  end
  def strip(user_string) do
    try do
      throw {:return, strip_chars(user_string, " \t\n\r")}
    catch
      {:return, val} -> val
    end
  end
  def test_strip() do
    try do
      if strip("   hello   ") != "hello" do
        raise("test1 failed")
      end
      if strip_chars("...world...", ".") != "world" do
        raise("test2 failed")
      end
      if strip_chars("123hello123", "123") != "hello" do
        raise("test3 failed")
      end
      if strip("") != "" do
        raise("test4 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_strip()
      IO.puts(Kernel.inspect(strip("   hello   ")))
      IO.puts(Kernel.inspect(strip_chars("...world...", ".")))
      IO.puts(Kernel.inspect(strip_chars("123hello123", "123")))
      IO.puts(Kernel.inspect(strip("")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
