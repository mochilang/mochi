# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_valid(strand) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(strand) do
          ch = _slice(strand, i, i + 1 - (i))
          if ch != "A" && ch != "T" && ch != "C" && ch != "G" do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def dna(strand) do
    try do
      if !is_valid(strand) do
        IO.puts("ValueError: Invalid Strand")
        throw {:return, ""}
      end
      result = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(strand) do
          ch = _slice(strand, i, i + 1 - (i))
          {result} = if ch == "A" do
            result = (result <> "T")
            {result}
          else
            {result} = if ch == "T" do
              result = (result <> "A")
              {result}
            else
              {result} = if ch == "C" do
                result = (result <> "G")
                {result}
              else
                result = (result <> "C")
                {result}
              end
              {result}
            end
            {result}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(dna("GCTA")))
    IO.puts(Kernel.inspect(dna("ATGC")))
    IO.puts(Kernel.inspect(dna("CTGA")))
    IO.puts(Kernel.inspect(dna("GFGG")))
  end
end
Main.main()
