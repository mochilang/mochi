# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def word_occurrence(sentence) do
    try do
      occurrence = %{}
      word = ""
      i = 0
      while_fun = fn while_fun, i, occurrence, word ->
        if i < _len(sentence) do
          ch = _slice(sentence, i, i + 1 - (i))
          {occurrence, word} = if ch == " " do
            {occurrence, word} = if word != "" do
              occurrence = Map.put(occurrence, word, ((if Map.has_key?(occurrence, word), do: occurrence[word] + 1, else: 1)))
              word = ""
              {occurrence, word}
            else
              {occurrence, word}
            end
            {occurrence, word}
          else
            word = (word <> ch)
            {occurrence, word}
          end
          i = i + 1
          while_fun.(while_fun, i, occurrence, word)
        else
          {i, occurrence, word}
        end
      end
      {i, occurrence, word} = try do
          while_fun.(while_fun, i, occurrence, word)
        catch
          {:break, {i, occurrence, word}} -> {i, occurrence, word}
        end

      {occurrence} = if word != "" do
        occurrence = Map.put(occurrence, word, ((if Map.has_key?(occurrence, word), do: occurrence[word] + 1, else: 1)))
        {occurrence}
      else
        {occurrence}
      end
      throw {:return, occurrence}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      result = word_occurrence("INPUT STRING")
      Enum.each(Map.keys(result), fn w ->
        IO.puts(((w <> ": ") <> Kernel.to_string(result[w])))
      end)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
