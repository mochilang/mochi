# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def split(s, sep) do
    try do
      res = []
      current = ""
      i = 0
      while_fun = fn while_fun, current, i, res ->
        if i < _len(s) do
          ch = String.at(s, i)
          {current, res} = if ch == sep do
            res = (res ++ [current])
            current = ""
            {current, res}
          else
            current = (current <> ch)
            {current, res}
          end
          i = i + 1
          while_fun.(while_fun, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun.(while_fun, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      res = (res ++ [current])
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def join_with_space(xs) do
    try do
      s = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, s ->
        if i < _len(xs) do
          s = (s <> Enum.at(xs, i, []))
          {s} = if i + 1 < _len(xs) do
            s = (s <> " ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_2.(while_fun_2, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def reverse_str(s) do
    try do
      res = ""
      i = _len(s) - 1
      while_fun_3 = fn while_fun_3, i, res ->
        if i >= 0 do
          res = (res <> String.at(s, i))
          i = i - 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def reverse_letters(sentence, length) do
    try do
      words = split(sentence, " ")
      result = []
      i = 0
      while_fun_4 = fn while_fun_4, i, result ->
        if i < _len(words) do
          word = Enum.at(words, i, [])
          result = (if _len(word) > length, do: (result ++ [reverse_str(word)]), else: (result ++ [word]))
          i = i + 1
          while_fun_4.(while_fun_4, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_4.(while_fun_4, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, join_with_space(result)}
    catch
      {:return, val} -> val
    end
  end
  def test_reverse_letters() do
    try do
      if reverse_letters("Hey wollef sroirraw", 3) != "Hey fellow warriors" do
        raise("test1 failed")
      end
      if reverse_letters("nohtyP is nohtyP", 2) != "Python is Python" do
        raise("test2 failed")
      end
      if reverse_letters("1 12 123 1234 54321 654321", 0) != "1 21 321 4321 12345 123456" do
        raise("test3 failed")
      end
      if reverse_letters("racecar", 0) != "racecar" do
        raise("test4 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_reverse_letters()
      IO.puts(Kernel.inspect(reverse_letters("Hey wollef sroirraw", 3)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
