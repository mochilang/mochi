# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def to_upper(s) do
    try do
      res = ""
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(s) do
          ch = String.at(s, i)
          j = 0
          converted = ch
          while_fun_2 = fn while_fun_2, converted, j ->
            if j < _len(Process.get(:lower)) do
              {converted} = if String.at(Process.get(:lower), j) == ch do
                converted = String.at(Process.get(:upper), j)
                throw {:break, {converted, j}}
                {converted}
              else
                {converted}
              end
              j = j + 1
              while_fun_2.(while_fun_2, converted, j)
            else
              {converted, j}
            end
          end
          {converted, j} = try do
              while_fun_2.(while_fun_2, converted, j)
            catch
              {:break, {converted, j}} -> {converted, j}
            end

          res = (res <> converted)
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def is_digit(ch) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(Process.get(:digits)) do
          if String.at(Process.get(:digits), i) == ch do
            throw {:return, true}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def clean_id(spanish_id) do
    try do
      upper_id = to_upper(spanish_id)
      cleaned = ""
      i = 0
      while_fun_4 = fn while_fun_4, cleaned, i ->
        if i < _len(upper_id) do
          ch = String.at(upper_id, i)
          {cleaned} = if ch != "-" do
            cleaned = (cleaned <> ch)
            {cleaned}
          else
            {cleaned}
          end
          i = i + 1
          while_fun_4.(while_fun_4, cleaned, i)
        else
          {cleaned, i}
        end
      end
      {cleaned, i} = try do
          while_fun_4.(while_fun_4, cleaned, i)
        catch
          {:break, {cleaned, i}} -> {cleaned, i}
        end

      throw {:return, cleaned}
    catch
      {:return, val} -> val
    end
  end
  def is_spain_national_id(spanish_id) do
    try do
      sid = clean_id(spanish_id)
      if _len(sid) != 9 do
        raise(Process.get(:error_msg))
      end
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < 8 do
          if !is_digit(String.at(sid, i)) do
            raise(Process.get(:error_msg))
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      number = Kernel.trunc(_slice(sid, 0, 8 - (0)))
      letter = String.at(sid, 8)
      if is_digit(letter) do
        raise(Process.get(:error_msg))
      end
      expected = String.at(Process.get(:lookup_letters), rem(number, 23))
      throw {:return, letter == expected}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(is_spain_national_id("12345678Z")))
      IO.puts(Kernel.inspect(is_spain_national_id("12345678z")))
      IO.puts(Kernel.inspect(is_spain_national_id("12345678x")))
      IO.puts(Kernel.inspect(is_spain_national_id("12345678I")))
      IO.puts(Kernel.inspect(is_spain_national_id("12345678-Z")))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:digits, "0123456789")
  Process.put(:upper, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:lower, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:lookup_letters, "TRWAGMYFPDXBNJZSQVHLCKE")
  Process.put(:error_msg, "Input must be a string of 8 numbers plus letter")
  def bench_main() do
    Process.put(:digits, "0123456789")
    Process.put(:upper, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    Process.put(:lower, "abcdefghijklmnopqrstuvwxyz")
    Process.put(:lookup_letters, "TRWAGMYFPDXBNJZSQVHLCKE")
    Process.put(:error_msg, "Input must be a string of 8 numbers plus letter")
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
