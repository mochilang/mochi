# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def z_function(s) do
    try do
      z = []
      i = 0
      while_fun = fn while_fun, i, z ->
        if i < _len(s) do
          z = (z ++ [0])
          i = i + 1
          while_fun.(while_fun, i, z)
        else
          {i, z}
        end
      end
      {i, z} = try do
          while_fun.(while_fun, i, z)
        catch
          {:break, {i, z}} -> {i, z}
        end

      l = 0
      r = 0
      i = 1
      while_fun_2 = fn while_fun_2, i, l, r, z ->
        if i < _len(s) do
          {z} = if i <= r do
            min_edge = r - i + 1
            zi = Enum.at(z, i - l, [])
            {min_edge} = if zi < min_edge do
              min_edge = zi
              {min_edge}
            else
              {min_edge}
            end
            z = List.replace_at(z, i, min_edge)
            {z}
          else
            {z}
          end
          while_fun_3 = fn while_fun_3, z ->
            if go_next(i, z, s) do
              z = List.replace_at(z, i, Enum.at(z, i, []) + 1)
              while_fun_3.(while_fun_3, z)
            else
              z
            end
          end
          z = try do
              while_fun_3.(while_fun_3, z)
            catch
              {:break, {z}} -> z
            end

          {l, r} = if i + Enum.at(z, i, []) - 1 > r do
            l = i
            r = i + Enum.at(z, i, []) - 1
            {l, r}
          else
            {l, r}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, l, r, z)
        else
          {i, l, r, z}
        end
      end
      {i, l, r, z} = try do
          while_fun_2.(while_fun_2, i, l, r, z)
        catch
          {:break, {i, l, r, z}} -> {i, l, r, z}
        end

      throw {:return, z}
    catch
      {:return, val} -> val
    end
  end
  def go_next(i, z, s) do
    try do
      throw {:return, i + Enum.at(z, i, []) < _len(s) && String.at(s, Enum.at(z, i, [])) == String.at(s, i + Enum.at(z, i, []))}
    catch
      {:return, val} -> val
    end
  end
  def find_pattern(pattern, input_str) do
    try do
      answer = 0
      z_res = z_function((pattern <> input_str))
      i = 0
      while_fun_4 = fn while_fun_4, answer, i ->
        if i < _len(z_res) do
          {answer} = if Enum.at(z_res, i, []) >= _len(pattern) do
            answer = answer + 1
            {answer}
          else
            {answer}
          end
          i = i + 1
          while_fun_4.(while_fun_4, answer, i)
        else
          {answer, i}
        end
      end
      {answer, i} = try do
          while_fun_4.(while_fun_4, answer, i)
        catch
          {:break, {answer, i}} -> {answer, i}
        end

      throw {:return, answer}
    catch
      {:return, val} -> val
    end
  end
  def list_eq_int(a, b) do
    try do
      if _len(a) != _len(b) do
        throw {:return, false}
      end
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(a) do
          if Enum.at(a, i, []) != Enum.at(b, i, []) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def test_z_function() do
    try do
      s1 = "abracadabra"
      expected1 = [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1]
      r1 = z_function(s1)
      if !list_eq_int(r1, expected1) do
        raise("z_function abracadabra failed")
      end
      s2 = "aaaa"
      expected2 = [0, 3, 2, 1]
      r2 = z_function(s2)
      if !list_eq_int(r2, expected2) do
        raise("z_function aaaa failed")
      end
      s3 = "zxxzxxz"
      expected3 = [0, 0, 0, 4, 0, 0, 1]
      r3 = z_function(s3)
      if !list_eq_int(r3, expected3) do
        raise("z_function zxxzxxz failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def test_find_pattern() do
    try do
      if find_pattern("abr", "abracadabra") != 2 do
        raise("find_pattern abr failed")
      end
      if find_pattern("a", "aaaa") != 4 do
        raise("find_pattern aaaa failed")
      end
      if find_pattern("xz", "zxxzxxz") != 2 do
        raise("find_pattern xz failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_z_function()
      test_find_pattern()
      r1 = z_function("abracadabra")
      r2 = z_function("aaaa")
      r3 = z_function("zxxzxxz")
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [r1])), ",", " "))
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [r2])), ",", " "))
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [r3])), ",", " "))
      IO.puts(Kernel.inspect(find_pattern("abr", "abracadabra")))
      IO.puts(Kernel.inspect(find_pattern("a", "aaaa")))
      IO.puts(Kernel.inspect(find_pattern("xz", "zxxzxxz")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
