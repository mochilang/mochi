# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def find_index(xs, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i, []) == x do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def get_word_pattern(word) do
    try do
      w = String.upcase(word)
      letters = []
      numbers = []
      next_num = 0
      res = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, letters, next_num, numbers, res ->
        if i < _len(w) do
          ch = String.at(w, i)
          idx = find_index(letters, ch)
          num_str = ""
          {letters, next_num, num_str, numbers} = if idx >= 0 do
            num_str = Enum.at(numbers, idx, [])
            {letters, next_num, num_str, numbers}
          else
            num_str = Kernel.to_string(next_num)
            letters = (letters ++ [ch])
            numbers = (numbers ++ [num_str])
            next_num = next_num + 1
            {letters, next_num, num_str, numbers}
          end
          {res} = if i > 0 do
            res = (res <> ".")
            {res}
          else
            {res}
          end
          res = (res <> num_str)
          i = i + 1
          while_fun_2.(while_fun_2, i, letters, next_num, numbers, res)
        else
          {i, letters, next_num, numbers, res}
        end
      end
      {i, letters, next_num, numbers, res} = try do
          while_fun_2.(while_fun_2, i, letters, next_num, numbers, res)
        catch
          {:break, {i, letters, next_num, numbers, res}} -> {i, letters, next_num, numbers, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(get_word_pattern("")))
      IO.puts(Kernel.inspect(get_word_pattern(" ")))
      IO.puts(Kernel.inspect(get_word_pattern("pattern")))
      IO.puts(Kernel.inspect(get_word_pattern("word pattern")))
      IO.puts(Kernel.inspect(get_word_pattern("get word pattern")))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
