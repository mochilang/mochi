# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def hamming_distance(a, b) do
    try do
      if _len(a) != _len(b) do
        raise("String lengths must match!")
      end
      i = 0
      count = 0
      while_fun = fn while_fun, count, i ->
        if i < _len(a) do
          {count} = if String.at(a, i) != String.at(b, i) do
            count = count + 1
            {count}
          else
            {count}
          end
          i = i + 1
          while_fun.(while_fun, count, i)
        else
          {count, i}
        end
      end
      {count, i} = try do
          while_fun.(while_fun, count, i)
        catch
          {:break, {count, i}} -> {count, i}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(hamming_distance("python", "python")))
    IO.puts(Kernel.inspect(hamming_distance("karolin", "kathrin")))
    IO.puts(Kernel.inspect(hamming_distance("00000", "11111")))
  end
end
Main.main()
