# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def strip_and_remove_spaces(s) do
    try do
      start = 0
      end_ = _len(s) - 1
      while_fun = fn while_fun, start ->
        if start < _len(s) && String.at(s, start) == " " do
          start = start + 1
          while_fun.(while_fun, start)
        else
          start
        end
      end
      start = try do
          while_fun.(while_fun, start)
        catch
          {:break, {start}} -> start
        end

      while_fun_2 = fn while_fun_2, end_ ->
        if end_ >= start && String.at(s, end_) == " " do
          end_ = end_ - 1
          while_fun_2.(while_fun_2, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_2.(while_fun_2, end_)
        catch
          {:break, {end_}} -> end_
        end

      res = ""
      i = start
      while_fun_3 = fn while_fun_3, i, res ->
        if i <= end_ do
          ch = String.at(s, i)
          {res} = if ch != " " do
            res = (res <> ch)
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def check_anagrams(a, b) do
    try do
      s1 = String.downcase(a)
      s2 = String.downcase(b)
      s1 = strip_and_remove_spaces(s1)
      s2 = strip_and_remove_spaces(s2)
      if _len(s1) != _len(s2) do
        throw {:return, false}
      end
      count = %{}
      i = 0
      while_fun_4 = fn while_fun_4, count, i ->
        if i < _len(s1) do
          c1 = String.at(s1, i)
          c2 = String.at(s2, i)
          count = List.replace_at(count, c1, ((if c1 in count, do: count[c1] + 1, else: 1)))
          count = List.replace_at(count, c2, ((if c2 in count, do: count[c2] - 1, else: -1)))
          i = i + 1
          while_fun_4.(while_fun_4, count, i)
        else
          {count, i}
        end
      end
      {count, i} = try do
          while_fun_4.(while_fun_4, count, i)
        catch
          {:break, {count, i}} -> {count, i}
        end

      Enum.each(count, fn ch ->
        if count[ch] != 0 do
          throw {:return, false}
        end
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def print_bool(b) do
    try do
      if b do
        IO.puts(true)
      else
        IO.puts(false)
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    print_bool(check_anagrams("Silent", "Listen"))
    print_bool(check_anagrams("This is a string", "Is this a string"))
    print_bool(check_anagrams("This is    a      string", "Is     this a string"))
    print_bool(check_anagrams("There", "Their"))
  end
end
Main.main()
