# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def has_alpha(s) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          c = String.at(s, i)
          if (c >= "a" && c <= "z") || (c >= "A" && c <= "Z") do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def parse_decimal(s) do
    try do
      value = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, value ->
        if i < _len(s) do
          c = String.at(s, i)
          if c < "0" || c > "9" do
            raise("Non-digit character encountered")
          end
          value = value * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(c))
          i = i + 1
          while_fun_2.(while_fun_2, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun_2.(while_fun_2, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def get_barcode(barcode) do
    try do
      if has_alpha(barcode) do
        raise((("Barcode '" <> barcode) <> "' has alphabetic characters."))
      end
      if _len(barcode) > 0 && String.at(barcode, 0) == "-" do
        raise("The entered barcode has a negative value. Try again.")
      end
      throw {:return, parse_decimal(barcode)}
    catch
      {:return, val} -> val
    end
  end
  def get_check_digit(barcode) do
    try do
      num = div(barcode, 10)
      s = 0
      position = 0
      while_fun_3 = fn while_fun_3, num, position, s ->
        if num != 0 do
          mult = (if rem(position, 2) == 0, do: 3, else: 1)
          s = s + mult * (rem(num, 10))
          num = div(num, 10)
          position = position + 1
          while_fun_3.(while_fun_3, num, position, s)
        else
          {num, position, s}
        end
      end
      {num, position, s} = try do
          while_fun_3.(while_fun_3, num, position, s)
        catch
          {:break, {num, position, s}} -> {num, position, s}
        end

      throw {:return, rem((10 - (rem(s, 10))), 10)}
    catch
      {:return, val} -> val
    end
  end
  def is_valid(barcode) do
    try do
      throw {:return, _len(Kernel.to_string(barcode)) == 13 && get_check_digit(barcode) == rem(barcode, 10)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:res, [])
  Process.put(:x, 0)
  def main() do
    IO.puts(Kernel.inspect(get_check_digit(8718452538119)))
    IO.puts(Kernel.inspect(get_check_digit(87184523)))
    IO.puts(Kernel.inspect(get_check_digit(87193425381086)))
    while_fun_4 = fn while_fun_4 ->
      if Process.get(:x) < 100 do
        Process.put(:res, (Process.get(:res) ++ [get_check_digit(Process.get(:x))]))
        Process.put(:x, Process.get(:x) + 10)
        while_fun_4.(while_fun_4)
      else
        nil
      end
    end
    try do
      while_fun_4.(while_fun_4)
    catch
      :break -> nil
    end

    IO.puts(Kernel.inspect(Process.get(:res)))
    IO.puts(Kernel.inspect(is_valid(8718452538119)))
    IO.puts(Kernel.inspect(is_valid(87184525)))
    IO.puts(Kernel.inspect(is_valid(87193425381089)))
    IO.puts(Kernel.inspect(is_valid(0)))
    IO.puts(Kernel.inspect(get_barcode("8718452538119")))
  end
end
Main.main()
