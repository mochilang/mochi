# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, c) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if _slice(s, i, i + 1 - (i)) == c do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def capitalize(sentence) do
    try do
      if _len(sentence) == 0 do
        throw {:return, ""}
      end
      first = _slice(sentence, 0, 1 - (0))
      idx = index_of(Process.get(:lowercase), first)
      capital = (if idx >= 0, do: _slice(Process.get(:uppercase), idx, idx + 1 - (idx)), else: first)
      throw {:return, (capital <> _slice(sentence, 1, _len(sentence) - (1)))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:lowercase, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:uppercase, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  def main() do
    IO.puts(Kernel.inspect(capitalize("hello world")))
    IO.puts(Kernel.inspect(capitalize("123 hello world")))
    IO.puts(Kernel.inspect(capitalize(" hello world")))
    IO.puts(Kernel.inspect(capitalize("a")))
    IO.puts(Kernel.inspect(capitalize("")))
  end
end
Main.main()
