# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def join(separator, separated) do
    try do
      joined = ""
      last_index = _len(separated) - 1
      i = 0
      while_fun = fn while_fun, i, joined ->
        if i < _len(separated) do
          joined = (joined <> Enum.at(separated, i, []))
          {joined} = if i < last_index do
            joined = (joined <> separator)
            {joined}
          else
            {joined}
          end
          i = i + 1
          while_fun.(while_fun, i, joined)
        else
          {i, joined}
        end
      end
      {i, joined} = try do
          while_fun.(while_fun, i, joined)
        catch
          {:break, {i, joined}} -> {i, joined}
        end

      throw {:return, joined}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(join("", ["a", "b", "c", "d"])))
      IO.puts(Kernel.inspect(join("#", ["a", "b", "c", "d"])))
      IO.puts(Kernel.inspect(join("#", ["a"])))
      IO.puts(Kernel.inspect(join(" ", ["You", "are", "amazing!"])))
      IO.puts(Kernel.inspect(join(",", ["", "", ""])))
      IO.puts(Kernel.inspect(join("-", ["apple", "banana", "cherry"])))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
