# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def damerau_levenshtein_distance(first_string, second_string) do
    try do
      len1 = _len(first_string)
      len2 = _len(second_string)
      dp_matrix = []
      {dp_matrix} = Enum.reduce((0..((len1 + 1) - 1)//1), {dp_matrix}, fn _, {dp_matrix} ->
        row = []
        {row} = Enum.reduce((0..((len2 + 1) - 1)//1), {row}, fn _2, {row} ->
          row = (row ++ [0])
          {row}
        end)
        dp_matrix = (dp_matrix ++ [row])
        {dp_matrix}
      end)
      {dp_matrix} = Enum.reduce((0..((len1 + 1) - 1)//1), {dp_matrix}, fn i, {dp_matrix} ->
        row = Enum.at(dp_matrix, i, [])
        row = List.replace_at(row, 0, i)
        dp_matrix = List.replace_at(dp_matrix, i, row)
        {dp_matrix}
      end)
      first_row = Enum.at(dp_matrix, 0, [])
      {first_row} = Enum.reduce((0..((len2 + 1) - 1)//1), {first_row}, fn j, {first_row} ->
        first_row = List.replace_at(first_row, j, j)
        {first_row}
      end)
      dp_matrix = List.replace_at(dp_matrix, 0, first_row)
      {dp_matrix} = Enum.reduce((1..((len1 + 1) - 1)//1), {dp_matrix}, fn i, {dp_matrix} ->
        row = Enum.at(dp_matrix, i, [])
        first_char = _slice(first_string, i - 1, i - (i - 1))
        {row} = Enum.reduce((1..((len2 + 1) - 1)//1), {row}, fn j, {row} ->
          second_char = _slice(second_string, j - 1, j - (j - 1))
          cost = (if first_char == second_char, do: 0, else: 1)
          value = Enum.at(Enum.at(dp_matrix, i - 1, []), j, 0) + 1
          insertion = Enum.at(row, j - 1, []) + 1
          {value} = if insertion < value do
            value = insertion
            {value}
          else
            {value}
          end
          substitution = Enum.at(Enum.at(dp_matrix, i - 1, []), j - 1, 0) + cost
          {value} = if substitution < value do
            value = substitution
            {value}
          else
            {value}
          end
          row = List.replace_at(row, j, value)
          {row} = if i > 1 && j > 1 && _slice(first_string, i - 1, i - (i - 1)) == _slice(second_string, j - 2, j - 1 - (j - 2)) && _slice(first_string, i - 2, i - 1 - (i - 2)) == _slice(second_string, j - 1, j - (j - 1)) do
            transposition = Enum.at(Enum.at(dp_matrix, i - 2, []), j - 2, 0) + cost
            {row} = if transposition < Enum.at(row, j, []) do
              row = List.replace_at(row, j, transposition)
              {row}
            else
              {row}
            end
            {row}
          else
            {row}
          end
          {row}
        end)
        dp_matrix = List.replace_at(dp_matrix, i, row)
        {dp_matrix}
      end)
      throw {:return, Enum.at(Enum.at(dp_matrix, len1, []), len2, 0)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(damerau_levenshtein_distance("cat", "cut")))
    IO.puts(Kernel.inspect(damerau_levenshtein_distance("kitten", "sitting")))
    IO.puts(Kernel.inspect(damerau_levenshtein_distance("hello", "world")))
    IO.puts(Kernel.inspect(damerau_levenshtein_distance("book", "back")))
    IO.puts(Kernel.inspect(damerau_levenshtein_distance("container", "containment")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
