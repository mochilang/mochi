# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pow2(n) do
    try do
      res = 1
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < n do
          res = res * 2
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bit_and(a, b) do
    try do
      x = a
      y = b
      res = 0
      bit = 1
      while_fun_2 = fn while_fun_2, bit, res, x, y ->
        if x > 0 || y > 0 do
          {res} = if rem(x, 2) == 1 && rem(y, 2) == 1 do
            res = res + bit
            {res}
          else
            {res}
          end
          x = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(x, 2)))
          y = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(y, 2)))
          bit = bit * 2
          while_fun_2.(while_fun_2, bit, res, x, y)
        else
          {bit, res, x, y}
        end
      end
      {bit, res, x, y} = try do
          while_fun_2.(while_fun_2, bit, res, x, y)
        catch
          {:break, {bit, res, x, y}} -> {bit, res, x, y}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bit_or(a, b) do
    try do
      x = a
      y = b
      res = 0
      bit = 1
      while_fun_3 = fn while_fun_3, bit, res, x, y ->
        if x > 0 || y > 0 do
          {res} = if rem(x, 2) == 1 || rem(y, 2) == 1 do
            res = res + bit
            {res}
          else
            {res}
          end
          x = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(x, 2)))
          y = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(y, 2)))
          bit = bit * 2
          while_fun_3.(while_fun_3, bit, res, x, y)
        else
          {bit, res, x, y}
        end
      end
      {bit, res, x, y} = try do
          while_fun_3.(while_fun_3, bit, res, x, y)
        catch
          {:break, {bit, res, x, y}} -> {bit, res, x, y}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def char_to_index(ch) do
    try do
      letters = "abcdefghijklmnopqrstuvwxyz"
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(letters) do
          if _slice(letters, i, (i + 1) - i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 26}
    catch
      {:return, val} -> val
    end
  end
  def bitap_string_match(text, pattern) do
    try do
      if pattern == "" do
        throw {:return, 0}
      end
      m = _len(pattern)
      if m > _len(text) do
        throw {:return, -1}
      end
      limit = pow2(m + 1)
      all_ones = limit - 1
      pattern_mask = []
      i = 0
      while_fun_5 = fn while_fun_5, i, pattern_mask ->
        if i < 27 do
          pattern_mask = (pattern_mask ++ [all_ones])
          i = i + 1
          while_fun_5.(while_fun_5, i, pattern_mask)
        else
          {i, pattern_mask}
        end
      end
      {i, pattern_mask} = try do
          while_fun_5.(while_fun_5, i, pattern_mask)
        catch
          {:break, {i, pattern_mask}} -> {i, pattern_mask}
        end

      i = 0
      while_fun_6 = fn while_fun_6, i, pattern_mask ->
        if i < m do
          ch = _slice(pattern, i, (i + 1) - i)
          idx = char_to_index(ch)
          pattern_mask = List.replace_at(pattern_mask, idx, bit_and(Enum.at(pattern_mask, idx, []), all_ones - pow2(i)))
          i = i + 1
          while_fun_6.(while_fun_6, i, pattern_mask)
        else
          {i, pattern_mask}
        end
      end
      {i, pattern_mask} = try do
          while_fun_6.(while_fun_6, i, pattern_mask)
        catch
          {:break, {i, pattern_mask}} -> {i, pattern_mask}
        end

      state = all_ones - 1
      i = 0
      while_fun_7 = fn while_fun_7, i, state ->
        if i < _len(text) do
          ch = _slice(text, i, (i + 1) - i)
          idx = char_to_index(ch)
          state = bit_or(state, Enum.at(pattern_mask, idx, []))
          state = rem((state * 2), limit)
          if bit_and(state, pow2(m)) == 0 do
            throw {:return, i - m + 1}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i, state)
        else
          {i, state}
        end
      end
      {i, state} = try do
          while_fun_7.(while_fun_7, i, state)
        catch
          {:break, {i, state}} -> {i, state}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(bitap_string_match("abdabababc", "ababc")))
      IO.puts(Kernel.inspect(bitap_string_match("abdabababc", "")))
      IO.puts(Kernel.inspect(bitap_string_match("abdabababc", "c")))
      IO.puts(Kernel.inspect(bitap_string_match("abdabababc", "fofosdfo")))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
