# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_pangram(input_str) do
    try do
      letters = []
      i = 0
      while_fun = fn while_fun, i, letters ->
        if i < _len(input_str) do
          c = String.downcase(String.at(input_str, i))
          is_new = !(c in letters)
          {letters} = if c != " " && "a" <= c && c <= "z" && is_new do
            letters = (letters ++ [c])
            {letters}
          else
            {letters}
          end
          i = i + 1
          while_fun.(while_fun, i, letters)
        else
          {i, letters}
        end
      end
      {i, letters} = try do
          while_fun.(while_fun, i, letters)
        catch
          {:break, {i, letters}} -> {i, letters}
        end

      throw {:return, _len(letters) == 26}
    catch
      {:return, val} -> val
    end
  end
  def is_pangram_faster(input_str) do
    try do
      alphabet = "abcdefghijklmnopqrstuvwxyz"
      flag = []
      i = 0
      while_fun_2 = fn while_fun_2, flag, i ->
        if i < 26 do
          flag = (flag ++ [false])
          i = i + 1
          while_fun_2.(while_fun_2, flag, i)
        else
          {flag, i}
        end
      end
      {flag, i} = try do
          while_fun_2.(while_fun_2, flag, i)
        catch
          {:break, {flag, i}} -> {flag, i}
        end

      j = 0
      while_fun_3 = fn while_fun_3, flag, j ->
        if j < _len(input_str) do
          c = String.downcase(String.at(input_str, j))
          k = 0
          while_fun_4 = fn while_fun_4, flag, k ->
            if k < 26 do
              {flag} = if String.at(alphabet, k) == c do
                flag = List.replace_at(flag, k, true)
                throw {:break, {flag, k}}
                {flag}
              else
                {flag}
              end
              k = k + 1
              while_fun_4.(while_fun_4, flag, k)
            else
              {flag, k}
            end
          end
          {flag, k} = try do
              while_fun_4.(while_fun_4, flag, k)
            catch
              {:break, {flag, k}} -> {flag, k}
            end

          j = j + 1
          while_fun_3.(while_fun_3, flag, j)
        else
          {flag, j}
        end
      end
      {flag, j} = try do
          while_fun_3.(while_fun_3, flag, j)
        catch
          {:break, {flag, j}} -> {flag, j}
        end

      t = 0
      while_fun_5 = fn while_fun_5, t ->
        if t < 26 do
          if !Enum.at(flag, t, []) do
            throw {:return, false}
          end
          t = t + 1
          while_fun_5.(while_fun_5, t)
        else
          t
        end
      end
      t = try do
          while_fun_5.(while_fun_5, t)
        catch
          {:break, {t}} -> t
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def is_pangram_fastest(input_str) do
    try do
      s = String.downcase(input_str)
      alphabet = "abcdefghijklmnopqrstuvwxyz"
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(alphabet) do
          letter = String.at(alphabet, i)
          if !(letter in s) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:s1, "The quick brown fox jumps over the lazy dog")
  Process.put(:s2, "My name is Unknown")
  def main() do
    IO.puts(Kernel.inspect(is_pangram(Process.get(:s1))))
    IO.puts(Kernel.inspect(is_pangram(Process.get(:s2))))
    IO.puts(Kernel.inspect(is_pangram_faster(Process.get(:s1))))
    IO.puts(Kernel.inspect(is_pangram_faster(Process.get(:s2))))
    IO.puts(Kernel.inspect(is_pangram_fastest(Process.get(:s1))))
    IO.puts(Kernel.inspect(is_pangram_fastest(Process.get(:s2))))
  end
end
Main.main()
