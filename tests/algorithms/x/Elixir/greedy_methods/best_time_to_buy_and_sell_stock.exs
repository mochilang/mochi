# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def max_profit(prices) do
    try do
      if _len(prices) == 0 do
        throw {:return, 0}
      end
      min_price = Enum.at(prices, 0, [])
      max_profit = 0
      i = 0
      while_fun = fn while_fun, i, max_profit, min_price ->
        if i < _len(prices) do
          price = Enum.at(prices, i, [])
          min_price = if price < min_price do
            min_price = price
            min_price
          else
            min_price
          end
          profit = price - min_price
          max_profit = if profit > &max_profit/1 do
            max_profit = profit
            max_profit
          else
            max_profit
          end
          i = i + 1
          while_fun.(while_fun, i, max_profit, min_price)
        else
          {i, max_profit, min_price}
        end
      end
      {_, max_profit, min_price} = try do
          while_fun.(while_fun, i, max_profit, min_price)
        catch
          {:break, {_, max_profit, min_price}} -> {0, max_profit, min_price}
        end

      throw {:return, &max_profit/1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(max_profit([7, 1, 5, 3, 6, 4])))
    IO.puts(Kernel.inspect(max_profit([7, 6, 4, 3, 1])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
