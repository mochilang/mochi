# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def find_minimum_change(denominations, value) do
    try do
      if value <= 0 do
        throw {:return, []}
      end
      total = value
      answer = []
      i = _len(denominations) - 1
      while_fun = fn while_fun, answer, i, total ->
        if i >= 0 do
          denom = Enum.at(denominations, i, [])
          while_fun_2 = fn while_fun_2, answer, total ->
            if total >= denom do
              total = total - denom
              answer = (answer ++ [denom])
              while_fun_2.(while_fun_2, answer, total)
            else
              {answer, total}
            end
          end
          {answer, total} = try do
              while_fun_2.(while_fun_2, answer, total)
            catch
              {:break, {answer, total}} -> {answer, total}
            end

          i = i - 1
          while_fun.(while_fun, answer, i, total)
        else
          {answer, i, total}
        end
      end
      {answer, i, total} = try do
          while_fun.(while_fun, answer, i, total)
        catch
          {:break, {answer, i, total}} -> {answer, i, total}
        end

      throw {:return, answer}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(find_minimum_change([1, 2, 5, 10, 20, 50, 100, 500, 2000], 987)))
    IO.puts(Kernel.inspect(find_minimum_change([1, 5, 100, 500, 1000], 456)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
