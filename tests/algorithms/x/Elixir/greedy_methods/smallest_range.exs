# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def smallest_range(nums) do
    try do
      heap = []
      current_max = -Process.get(:inf)
      i = 0
      while_fun = fn while_fun, current_max, heap, i ->
        if i < _len(nums) do
          first_val = Enum.at(Enum.at(nums, i, []), 0, 0)
          heap = (heap ++ [%{value: first_val, list_idx: i, elem_idx: 0}])
          current_max = if first_val > current_max do
            current_max = first_val
            current_max
          else
            current_max
          end
          i = i + 1
          while_fun.(while_fun, current_max, heap, i)
        else
          {current_max, heap, i}
        end
      end
      {current_max, heap, _} = try do
          while_fun.(while_fun, current_max, heap, i)
        catch
          {:break, {current_max, heap, _}} -> {current_max, heap, 0}
        end

      best = [-Process.get(:inf), Process.get(:inf)]
      while_fun_2 = fn while_fun_2, best, current_max, heap ->
        if _len(heap) > 0 do
          min_idx = 0
          j = 1
          while_fun_3 = fn while_fun_3, j, min_idx ->
            if j < _len(heap) do
              hj = Enum.at(heap, j, [])
              hmin = Enum.at(heap, min_idx, [])
              min_idx = if hj.value < hmin.value do
                min_idx = j
                min_idx
              else
                min_idx
              end
              j = j + 1
              while_fun_3.(while_fun_3, j, min_idx)
            else
              {j, min_idx}
            end
          end
          {_, min_idx} = try do
              while_fun_3.(while_fun_3, j, min_idx)
            catch
              {:break, {_, min_idx}} -> {0, min_idx}
            end

          item = Enum.at(heap, min_idx, [])
          new_heap = []
          k = 0
          while_fun_4 = fn while_fun_4, k, new_heap ->
            if k < _len(heap) do
              new_heap = if k != min_idx do
                new_heap = (new_heap ++ [Enum.at(heap, k, [])])
                new_heap
              else
                new_heap
              end
              k = k + 1
              while_fun_4.(while_fun_4, k, new_heap)
            else
              {k, new_heap}
            end
          end
          {_, new_heap} = try do
              while_fun_4.(while_fun_4, k, new_heap)
            catch
              {:break, {_, new_heap}} -> {0, new_heap}
            end

          heap = new_heap
          current_min = item.value
          best = if current_max - current_min < Enum.at(best, 1, []) - Enum.at(best, 0, []) do
            best = [current_min, current_max]
            best
          else
            best
          end
          if item.elem_idx == _len(Enum.at(nums, item.list_idx, [])) - 1 do
            throw {:break, {best, current_max, heap}}
          end
          next_val = Enum.at(Enum.at(nums, item.list_idx, []), item.elem_idx + 1, 0)
          heap = (heap ++ [%{value: next_val, list_idx: item.list_idx, elem_idx: item.elem_idx + 1}])
          current_max = if next_val > current_max do
            current_max = next_val
            current_max
          else
            current_max
          end
          while_fun_2.(while_fun_2, best, current_max, heap)
        else
          {best, current_max, heap}
        end
      end
      {best, current_max, heap} = try do
          while_fun_2.(while_fun_2, best, current_max, heap)
        catch
          {:break, {best, current_max, heap}} -> {best, current_max, heap}
        end

      throw {:return, best}
    catch
      {:return, val} -> val
    end
  end
  def list_to_string(arr) do
    try do
      s = "["
      i = 0
      while_fun_5 = fn while_fun_5, i, s ->
        if i < _len(arr) do
          s = (s <> Kernel.to_string(Enum.at(arr, i, [])))
          s = if i < _len(arr) - 1 do
            s = (s <> ", ")
            s
          else
            s
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, s)
        else
          {i, s}
        end
      end
      {_, s} = try do
          while_fun_5.(while_fun_5, i, s)
        catch
          {:break, {_, s}} -> {0, s}
        end

      throw {:return, (s <> "]")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      result1 = smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])
      IO.puts(Kernel.inspect(list_to_string(result1)))
      result2 = smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
      IO.puts(Kernel.inspect(list_to_string(result2)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    Process.put(:inf, 1000000000)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
