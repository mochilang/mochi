# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sort_by_ratio(index, ratio) do
    try do
      i = 1
      while_fun = fn while_fun, i, index ->
        if i < _len(index) do
          key = Enum.at(index, i, [])
          key_ratio = Enum.at(ratio, key, [])
          j = i - 1
          while_fun_2 = fn while_fun_2, index, j ->
            if j >= 0 && Enum.at(ratio, Enum.at(index, j, []), []) < key_ratio do
              index = List.replace_at(index, j + 1, Enum.at(index, j, []))
              j = j - 1
              while_fun_2.(while_fun_2, index, j)
            else
              {index, j}
            end
          end
          {index, j} = try do
              while_fun_2.(while_fun_2, index, j)
            catch
              {:break, {index, j}} -> {index, j}
            end

          index = List.replace_at(index, j + 1, key)
          i = i + 1
          while_fun.(while_fun, i, index)
        else
          {i, index}
        end
      end
      {i, index} = try do
          while_fun.(while_fun, i, index)
        catch
          {:break, {i, index}} -> {i, index}
        end

      throw {:return, index}
    catch
      {:return, val} -> val
    end
  end
  def fractional_knapsack(value, weight, capacity) do
    try do
      n = _len(value)
      index = []
      i = 0
      while_fun_3 = fn while_fun_3, i, index ->
        if i < n do
          index = (index ++ [i])
          i = i + 1
          while_fun_3.(while_fun_3, i, index)
        else
          {i, index}
        end
      end
      {i, index} = try do
          while_fun_3.(while_fun_3, i, index)
        catch
          {:break, {i, index}} -> {i, index}
        end

      ratio = []
      i = 0
      while_fun_4 = fn while_fun_4, i, ratio ->
        if i < n do
          ratio = (ratio ++ [Enum.at(value, i, []) / Enum.at(weight, i, [])])
          i = i + 1
          while_fun_4.(while_fun_4, i, ratio)
        else
          {i, ratio}
        end
      end
      {i, ratio} = try do
          while_fun_4.(while_fun_4, i, ratio)
        catch
          {:break, {i, ratio}} -> {i, ratio}
        end

      index = sort_by_ratio(index, ratio)
      fractions = []
      i = 0
      while_fun_5 = fn while_fun_5, fractions, i ->
        if i < n do
          fractions = (fractions ++ [0.0])
          i = i + 1
          while_fun_5.(while_fun_5, fractions, i)
        else
          {fractions, i}
        end
      end
      {fractions, i} = try do
          while_fun_5.(while_fun_5, fractions, i)
        catch
          {:break, {fractions, i}} -> {fractions, i}
        end

      max_value = 0.0
      idx = 0
      while_fun_6 = fn while_fun_6, capacity, fractions, idx, max_value ->
        if idx < _len(index) do
          item = Enum.at(index, idx, [])
          {capacity, fractions, max_value} = if Enum.at(weight, item, []) <= capacity do
            fractions = List.replace_at(fractions, item, 1.0)
            max_value = max_value + Enum.at(value, item, [])
            capacity = capacity - Enum.at(weight, item, [])
            {capacity, fractions, max_value}
          else
            fractions = List.replace_at(fractions, item, capacity / Enum.at(weight, item, []))
            max_value = max_value + Enum.at(value, item, []) * capacity / Enum.at(weight, item, [])
            throw {:break, {capacity, fractions, idx, max_value}}
            {capacity, fractions, max_value}
          end
          idx = idx + 1
          while_fun_6.(while_fun_6, capacity, fractions, idx, max_value)
        else
          {capacity, fractions, idx, max_value}
        end
      end
      {capacity, fractions, idx, max_value} = try do
          while_fun_6.(while_fun_6, capacity, fractions, idx, max_value)
        catch
          {:break, {capacity, fractions, idx, max_value}} -> {capacity, fractions, idx, max_value}
        end

      throw {:return, %{max_value: max_value, fractions: fractions}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:v, [1.0, 3.0, 5.0, 7.0, 9.0])
  Process.put(:w, [0.9, 0.7, 0.5, 0.3, 0.1])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(fractional_knapsack(Process.get(:v), Process.get(:w), 5.0)))
    IO.puts(Kernel.inspect(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0)))
    IO.puts(Kernel.inspect(fractional_knapsack([], [], 30.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
