# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def insertion_sort(a) do
    try do
      i = 1
      while_fun = fn while_fun, a, i ->
        if i < _len(a) do
          key = Enum.at(a, i, [])
          j = i - 1
          while_fun_2 = fn while_fun_2, a, j ->
            if j >= 0 && Enum.at(a, j, []) > key do
              a = List.replace_at(a, j + 1, Enum.at(a, j, []))
              j = j - 1
              while_fun_2.(while_fun_2, a, j)
            else
              {a, j}
            end
          end
          {a, _} = try do
              while_fun_2.(while_fun_2, a, j)
            catch
              {:break, {a, _}} -> {a, 0}
            end

          a = List.replace_at(a, j + 1, key)
          i = i + 1
          while_fun.(while_fun, a, i)
        else
          {a, i}
        end
      end
      {a, _} = try do
          while_fun.(while_fun, a, i)
        catch
          {:break, {a, _}} -> {a, 0}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def minimum_waiting_time(queries) do
    try do
      n = _len(queries)
      if n == 0 || n == 1 do
        throw {:return, 0}
      end
      sorted = insertion_sort(queries)
      total = 0
      i = 0
      while_fun_3 = fn while_fun_3, i, total ->
        if i < n do
          total = total + Enum.at(sorted, i, []) * (n - i - 1)
          i = i + 1
          while_fun_3.(while_fun_3, i, total)
        else
          {i, total}
        end
      end
      {_, total} = try do
          while_fun_3.(while_fun_3, i, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(minimum_waiting_time([3, 2, 1, 2, 6])))
    IO.puts(Kernel.inspect(minimum_waiting_time([3, 2, 1])))
    IO.puts(Kernel.inspect(minimum_waiting_time([1, 2, 3, 4])))
    IO.puts(Kernel.inspect(minimum_waiting_time([5, 5, 5, 5])))
    IO.puts(Kernel.inspect(minimum_waiting_time([])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
