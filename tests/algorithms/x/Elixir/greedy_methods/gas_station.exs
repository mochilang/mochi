# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_gas_stations(gas_quantities, costs) do
    try do
      stations = []
      i = 0
      while_fun = fn while_fun, i, stations ->
        if i < _len(gas_quantities) do
          stations = (stations ++ [%{gas_quantity: Enum.at(gas_quantities, i, []), cost: Enum.at(costs, i, [])}])
          i = i + 1
          while_fun.(while_fun, i, stations)
        else
          {i, stations}
        end
      end
      {i, stations} = try do
          while_fun.(while_fun, i, stations)
        catch
          {:break, {i, stations}} -> {i, stations}
        end

      throw {:return, stations}
    catch
      {:return, val} -> val
    end
  end
  def can_complete_journey(gas_stations) do
    try do
      total_gas = 0
      total_cost = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, total_cost, total_gas ->
        if i < _len(gas_stations) do
          total_gas = total_gas + Enum.at(gas_stations, i, [])["gas_quantity"]
          total_cost = total_cost + Enum.at(gas_stations, i, [])["cost"]
          i = i + 1
          while_fun_2.(while_fun_2, i, total_cost, total_gas)
        else
          {i, total_cost, total_gas}
        end
      end
      {i, total_cost, total_gas} = try do
          while_fun_2.(while_fun_2, i, total_cost, total_gas)
        catch
          {:break, {i, total_cost, total_gas}} -> {i, total_cost, total_gas}
        end

      if total_gas < total_cost do
        throw {:return, -1}
      end
      start = 0
      net = 0
      i = 0
      while_fun_3 = fn while_fun_3, i, net, start ->
        if i < _len(gas_stations) do
          station = Enum.at(gas_stations, i, [])
          net = net + station["gas_quantity"] - station["cost"]
          {net, start} = if net < 0 do
            start = i + 1
            net = 0
            {net, start}
          else
            {net, start}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, net, start)
        else
          {i, net, start}
        end
      end
      {i, net, start} = try do
          while_fun_3.(while_fun_3, i, net, start)
        catch
          {:break, {i, net, start}} -> {i, net, start}
        end

      throw {:return, start}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:example1, get_gas_stations([1, 2, 3, 4, 5], [3, 4, 5, 1, 2]))
    IO.puts(Kernel.inspect(can_complete_journey(Process.get(:example1))))
    Process.put(:example2, get_gas_stations([2, 3, 4], [3, 4, 3]))
    IO.puts(Kernel.inspect(can_complete_journey(Process.get(:example2))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
