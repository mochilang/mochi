# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def int_pow(base, exp) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def decimal_to_octal(num) do
    try do
      if num == 0 do
        throw {:return, "0o0"}
      end
      octal = 0
      counter = 0
      value = num
      while_fun_2 = fn while_fun_2, counter, octal, value ->
        if value > 0 do
          remainder = rem(value, 8)
          octal = octal + remainder * int_pow(10, counter)
          counter = counter + 1
          value = div(value, 8)
          while_fun_2.(while_fun_2, counter, octal, value)
        else
          {counter, octal, value}
        end
      end
      {counter, octal, value} = try do
          while_fun_2.(while_fun_2, counter, octal, value)
        catch
          {:break, {counter, octal, value}} -> {counter, octal, value}
        end

      throw {:return, ("0o" <> Kernel.to_string(octal))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(decimal_to_octal(2)))
    IO.puts(Kernel.inspect(decimal_to_octal(8)))
    IO.puts(Kernel.inspect(decimal_to_octal(65)))
    IO.puts(Kernel.inspect(decimal_to_octal(216)))
    IO.puts(Kernel.inspect(decimal_to_octal(512)))
  end
end
Main.main()
