# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def decimal_to_hexadecimal(decimal) do
    try do
      num = decimal
      negative = false
      {negative, num} = if num < 0 do
        negative = true
        num = -num
        {negative, num}
      else
        {negative, num}
      end
      if num == 0 do
        if negative do
          throw {:return, "-0x0"}
        end
        throw {:return, "0x0"}
      end
      hex = ""
      while_fun = fn while_fun, hex, num ->
        if num > 0 do
          remainder = rem(num, 16)
          hex = (Enum.at(Process.get(:values), remainder) <> hex)
          num = div(num, 16)
          while_fun.(while_fun, hex, num)
        else
          {hex, num}
        end
      end
      {hex, num} = try do
          while_fun.(while_fun, hex, num)
        catch
          {:break, {hex, num}} -> {hex, num}
        end

      if negative do
        throw {:return, ("-0x" <> hex)}
      end
      throw {:return, ("0x" <> hex)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:values, ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"])
  def main() do
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(5)))
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(15)))
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(37)))
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(255)))
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(4096)))
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(999098)))
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(-256)))
    IO.puts(Kernel.inspect(decimal_to_hexadecimal(0)))
  end
end
Main.main()
