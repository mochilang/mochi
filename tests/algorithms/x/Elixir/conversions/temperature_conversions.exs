# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      {i} = if (:erlang.float(i)) > x do
        i = i - 1
        {i}
      else
        {i}
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def pow10(n) do
    try do
      p = 1.0
      i = 0
      while_fun = fn while_fun, i, p ->
        if i < n do
          p = p * 10.0
          i = i + 1
          while_fun.(while_fun, i, p)
        else
          {i, p}
        end
      end
      {i, p} = try do
          while_fun.(while_fun, i, p)
        catch
          {:break, {i, p}} -> {i, p}
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def round_to(x, ndigits) do
    try do
      m = pow10(ndigits)
      throw {:return, floor(x * m + 0.5) / m}
    catch
      {:return, val} -> val
    end
  end
  def celsius_to_fahrenheit(c, ndigits) do
    try do
      throw {:return, round_to(c * 9.0 / 5.0 + 32.0, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def celsius_to_kelvin(c, ndigits) do
    try do
      throw {:return, round_to(c + 273.15, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def celsius_to_rankine(c, ndigits) do
    try do
      throw {:return, round_to(c * 9.0 / 5.0 + 491.67, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def fahrenheit_to_celsius(f, ndigits) do
    try do
      throw {:return, round_to((f - 32.0) * 5.0 / 9.0, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def fahrenheit_to_kelvin(f, ndigits) do
    try do
      throw {:return, round_to((f - 32.0) * 5.0 / 9.0 + 273.15, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def fahrenheit_to_rankine(f, ndigits) do
    try do
      throw {:return, round_to(f + 459.67, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def kelvin_to_celsius(k, ndigits) do
    try do
      throw {:return, round_to(k - 273.15, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def kelvin_to_fahrenheit(k, ndigits) do
    try do
      throw {:return, round_to((k - 273.15) * 9.0 / 5.0 + 32.0, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def kelvin_to_rankine(k, ndigits) do
    try do
      throw {:return, round_to(k * 9.0 / 5.0, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def rankine_to_celsius(r, ndigits) do
    try do
      throw {:return, round_to((r - 491.67) * 5.0 / 9.0, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def rankine_to_fahrenheit(r, ndigits) do
    try do
      throw {:return, round_to(r - 459.67, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def rankine_to_kelvin(r, ndigits) do
    try do
      throw {:return, round_to(r * 5.0 / 9.0, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def reaumur_to_kelvin(r, ndigits) do
    try do
      throw {:return, round_to(r * 1.25 + 273.15, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def reaumur_to_fahrenheit(r, ndigits) do
    try do
      throw {:return, round_to(r * 2.25 + 32.0, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def reaumur_to_celsius(r, ndigits) do
    try do
      throw {:return, round_to(r * 1.25, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def reaumur_to_rankine(r, ndigits) do
    try do
      throw {:return, round_to(r * 2.25 + 32.0 + 459.67, ndigits)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(celsius_to_fahrenheit(0.0, 2)))
    IO.puts(Kernel.inspect(celsius_to_kelvin(0.0, 2)))
    IO.puts(Kernel.inspect(celsius_to_rankine(0.0, 2)))
    IO.puts(Kernel.inspect(fahrenheit_to_celsius(32.0, 2)))
    IO.puts(Kernel.inspect(fahrenheit_to_kelvin(32.0, 2)))
    IO.puts(Kernel.inspect(fahrenheit_to_rankine(32.0, 2)))
    IO.puts(Kernel.inspect(kelvin_to_celsius(273.15, 2)))
    IO.puts(Kernel.inspect(kelvin_to_fahrenheit(273.15, 2)))
    IO.puts(Kernel.inspect(kelvin_to_rankine(273.15, 2)))
    IO.puts(Kernel.inspect(rankine_to_celsius(491.67, 2)))
    IO.puts(Kernel.inspect(rankine_to_fahrenheit(491.67, 2)))
    IO.puts(Kernel.inspect(rankine_to_kelvin(491.67, 2)))
    IO.puts(Kernel.inspect(reaumur_to_kelvin(80.0, 2)))
    IO.puts(Kernel.inspect(reaumur_to_fahrenheit(80.0, 2)))
    IO.puts(Kernel.inspect(reaumur_to_celsius(80.0, 2)))
    IO.puts(Kernel.inspect(reaumur_to_rankine(80.0, 2)))
  end
end
Main.main()
