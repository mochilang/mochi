# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def pressure_conversion(value, from_type, to_type) do
    try do
      if !(Map.has_key?(Process.get(:pressure_conversion), from_type)) do
        keys = Object.keys(Process.get(:pressure_conversion))
        raise(((("Invalid 'from_type' value: '" <> from_type) <> "'  Supported values are:\n") <> keys))
      end
      if !(Map.has_key?(Process.get(:pressure_conversion), to_type)) do
        keys = Object.keys(Process.get(:pressure_conversion))
        raise(((("Invalid 'to_type' value: '" <> to_type) <> ".  Supported values are:\n") <> keys))
      end
      from = Process.get(:pressure_conversion)[from_type]
      to = Process.get(:pressure_conversion)[to_type]
      throw {:return, value * from.from_factor * to.to_factor}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pressure_conversion, %{"atm" => %{from_factor: 1.0, to_factor: 1.0}, "pascal" => %{from_factor: 0.0000098, to_factor: 101325.0}, "bar" => %{from_factor: 0.986923, to_factor: 1.01325}, "kilopascal" => %{from_factor: 0.00986923, to_factor: 101.325}, "megapascal" => %{from_factor: 9.86923, to_factor: 0.101325}, "psi" => %{from_factor: 0.068046, to_factor: 14.6959}, "inHg" => %{from_factor: 0.0334211, to_factor: 29.9213}, "torr" => %{from_factor: 0.00131579, to_factor: 760.0}})
  def main() do
    IO.puts(Kernel.inspect(pressure_conversion(4.0, "atm", "pascal")))
    IO.puts(Kernel.inspect(pressure_conversion(1.0, "pascal", "psi")))
    IO.puts(Kernel.inspect(pressure_conversion(1.0, "bar", "atm")))
    IO.puts(Kernel.inspect(pressure_conversion(3.0, "kilopascal", "bar")))
    IO.puts(Kernel.inspect(pressure_conversion(2.0, "megapascal", "psi")))
    IO.puts(Kernel.inspect(pressure_conversion(4.0, "psi", "torr")))
    IO.puts(Kernel.inspect(pressure_conversion(1.0, "inHg", "atm")))
    IO.puts(Kernel.inspect(pressure_conversion(1.0, "torr", "psi")))
  end
end
Main.main()
