# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def bin_to_octal(bin_string) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(bin_string) do
          c = String.at(bin_string, i)
          if !(c == "0" || c == "1") do
            raise("Non-binary value was passed to the function")
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      if _len(bin_string) == 0 do
        raise("Empty string was passed to the function")
      end
      padded = bin_string
      while_fun_2 = fn while_fun_2, padded ->
        if rem(_len(padded), 3) != 0 do
          padded = ("0" <> padded)
          while_fun_2.(while_fun_2, padded)
        else
          padded
        end
      end
      padded = try do
          while_fun_2.(while_fun_2, padded)
        catch
          {:break, {padded}} -> padded
        end

      oct_string = ""
      index = 0
      while_fun_3 = fn while_fun_3, index, oct_string ->
        if index < _len(padded) do
          group = _slice(padded, index, (index + 3) - index)
          b0 = (if String.at(group, 0) == "1", do: 1, else: 0)
          b1 = (if String.at(group, 1) == "1", do: 1, else: 0)
          b2 = (if String.at(group, 2) == "1", do: 1, else: 0)
          oct_val = b0 * 4 + b1 * 2 + b2
          oct_string = (oct_string <> Kernel.to_string(oct_val))
          index = index + 3
          while_fun_3.(while_fun_3, index, oct_string)
        else
          {index, oct_string}
        end
      end
      {index, oct_string} = try do
          while_fun_3.(while_fun_3, index, oct_string)
        catch
          {:break, {index, oct_string}} -> {index, oct_string}
        end

      throw {:return, oct_string}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(bin_to_octal("1111")))
    IO.puts(Kernel.inspect(bin_to_octal("101010101010011")))
  end
end
Main.main()
