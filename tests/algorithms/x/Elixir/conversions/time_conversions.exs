# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains(arr, t) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(arr) do
          if Enum.at(arr, i) == t do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def convert_time(time_value, unit_from, unit_to) do
    try do
      if time_value < 0.0 do
        raise("'time_value' must be a non-negative number.")
      end
      from = String.downcase(unit_from)
      to = String.downcase(unit_to)
      if (!contains(Process.get(:units), from)) || (!contains(Process.get(:units), to)) do
        invalid_unit = from
        {invalid_unit} = if contains(Process.get(:units), from) do
          invalid_unit = to
          {invalid_unit}
        else
          {invalid_unit}
        end
        raise((((("Invalid unit " <> invalid_unit) <> " is not in ") <> Process.get(:units_str)) <> "."))
      end
      seconds = time_value * Process.get(:time_chart)[from]
      converted = seconds * Process.get(:time_chart_inverse)[to]
      scaled = converted * 1000.0
      int_part = Kernel.trunc(scaled + 0.5)
      throw {:return, (int_part + 0.0) / 1000.0}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:time_chart, %{"seconds" => 1.0, "minutes" => 60.0, "hours" => 3600.0, "days" => 86400.0, "weeks" => 604800.0, "months" => 2629800.0, "years" => 31557600.0})
  Process.put(:units, ["seconds", "minutes", "hours", "days", "weeks", "months", "years"])
  Process.put(:units_str, "seconds, minutes, hours, days, weeks, months, years")
  def main() do
    Process.put(:time_chart_inverse, %{"seconds" => 1.0, "minutes" => 1.0 / 60.0, "hours" => 1.0 / 3600.0, "days" => 1.0 / 86400.0, "weeks" => 1.0 / 604800.0, "months" => 1.0 / 2629800.0, "years" => 1.0 / 31557600.0})
    IO.puts(Kernel.inspect(convert_time(3600.0, "seconds", "hours")))
    IO.puts(Kernel.inspect(convert_time(360.0, "days", "months")))
    IO.puts(Kernel.inspect(convert_time(360.0, "months", "years")))
    IO.puts(Kernel.inspect(convert_time(1.0, "years", "seconds")))
  end
end
Main.main()
