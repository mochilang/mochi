# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(arr, value) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(arr) do
          if Enum.at(arr, i) == value do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def units_string(arr) do
    try do
      s = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, s ->
        if i < _len(arr) do
          {s} = if i > 0 do
            s = (s <> ", ")
            {s}
          else
            {s}
          end
          s = (s <> Enum.at(arr, i))
          i = i + 1
          while_fun_2.(while_fun_2, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_2.(while_fun_2, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def round3(x) do
    try do
      y = x * 1000.0 + 0.5
      z = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(y)
      zf = :erlang.float(z)
      throw {:return, zf / 1000.0}
    catch
      {:return, val} -> val
    end
  end
  def convert_speed(speed, unit_from, unit_to) do
    try do
      from_index = index_of(Process.get(:units), unit_from)
      to_index = index_of(Process.get(:units), unit_to)
      if from_index < 0 || to_index < 0 do
        msg = ((((("Incorrect 'from_type' or 'to_type' value: " <> unit_from) <> ", ") <> unit_to) <> "\nValid values are: ") <> units_string(Process.get(:units)))
        raise(msg)
      end
      result = speed * Enum.at(Process.get(:speed_chart), from_index) * Enum.at(Process.get(:speed_chart_inverse), to_index)
      r = round3(result)
      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:units, ["km/h", "m/s", "mph", "knot"])
  Process.put(:speed_chart, [1.0, 3.6, 1.609344, 1.852])
  Process.put(:speed_chart_inverse, [1.0, 0.277777778, 0.621371192, 0.539956803])
  def main() do
    IO.puts(Kernel.inspect(convert_speed(100.0, "km/h", "m/s")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "km/h", "mph")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "km/h", "knot")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "m/s", "km/h")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "m/s", "mph")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "m/s", "knot")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "mph", "km/h")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "mph", "m/s")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "mph", "knot")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "knot", "km/h")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "knot", "m/s")))
    IO.puts(Kernel.inspect(convert_speed(100.0, "knot", "mph")))
  end
end
Main.main()
