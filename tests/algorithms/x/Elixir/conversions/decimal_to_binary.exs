# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def decimal_to_binary_iterative(num) do
    try do
      if num == 0 do
        throw {:return, "0b0"}
      end
      negative = false
      n = num
      {n, negative} = if n < 0 do
        negative = true
        n = -n
        {n, negative}
      else
        {n, negative}
      end
      result = ""
      while_fun = fn while_fun, n, result ->
        if n > 0 do
          result = (Kernel.to_string(rem(n, 2)) <> result)
          n = div(n, 2)
          while_fun.(while_fun, n, result)
        else
          {n, result}
        end
      end
      {n, result} = try do
          while_fun.(while_fun, n, result)
        catch
          {:break, {n, result}} -> {n, result}
        end

      if negative do
        throw {:return, ("-0b" <> result)}
      end
      throw {:return, ("0b" <> result)}
    catch
      {:return, val} -> val
    end
  end
  def decimal_to_binary_recursive_helper(n) do
    try do
      if n == 0 do
        throw {:return, "0"}
      end
      if n == 1 do
        throw {:return, "1"}
      end
      div_ = div(n, 2)
      mod = rem(n, 2)
      throw {:return, (decimal_to_binary_recursive_helper(div_) <> Kernel.to_string(mod))}
    catch
      {:return, val} -> val
    end
  end
  def decimal_to_binary_recursive(num) do
    try do
      if num == 0 do
        throw {:return, "0b0"}
      end
      if num < 0 do
        throw {:return, ("-0b" <> decimal_to_binary_recursive_helper(-num))}
      end
      throw {:return, ("0b" <> decimal_to_binary_recursive_helper(num))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(decimal_to_binary_iterative(0)))
    IO.puts(Kernel.inspect(decimal_to_binary_iterative(2)))
    IO.puts(Kernel.inspect(decimal_to_binary_iterative(7)))
    IO.puts(Kernel.inspect(decimal_to_binary_iterative(35)))
    IO.puts(Kernel.inspect(decimal_to_binary_iterative(-2)))
    IO.puts(Kernel.inspect(decimal_to_binary_recursive(0)))
    IO.puts(Kernel.inspect(decimal_to_binary_recursive(40)))
    IO.puts(Kernel.inspect(decimal_to_binary_recursive(-40)))
  end
end
Main.main()
