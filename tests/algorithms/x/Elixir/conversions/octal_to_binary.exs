# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def octal_to_binary(octal_number) do
    try do
      if _len(octal_number) == 0 do
        raise("Empty string was passed to the function")
      end
      octal_digits = "01234567"
      binary_number = ""
      i = 0
      while_fun = fn while_fun, binary_number, i ->
        if i < _len(octal_number) do
          digit = String.at(octal_number, i)
          valid = false
          j = 0
          while_fun_2 = fn while_fun_2, j, valid ->
            if j < _len(octal_digits) do
              {valid} = if digit == String.at(octal_digits, j) do
                valid = true
                throw {:break, {j, valid}}
                {valid}
              else
                {valid}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, valid)
            else
              {j, valid}
            end
          end
          {j, valid} = try do
              while_fun_2.(while_fun_2, j, valid)
            catch
              {:break, {j, valid}} -> {j, valid}
            end

          if !valid do
            raise("Non-octal value was passed to the function")
          end
          value = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(digit)
          k = 0
          binary_digit = ""
          while_fun_3 = fn while_fun_3, binary_digit, k, value ->
            if k < 3 do
              binary_digit = (Kernel.to_string(rem(value, 2)) <> binary_digit)
              value = div(value, 2)
              k = k + 1
              while_fun_3.(while_fun_3, binary_digit, k, value)
            else
              {binary_digit, k, value}
            end
          end
          {binary_digit, k, value} = try do
              while_fun_3.(while_fun_3, binary_digit, k, value)
            catch
              {:break, {binary_digit, k, value}} -> {binary_digit, k, value}
            end

          binary_number = (binary_number <> binary_digit)
          i = i + 1
          while_fun.(while_fun, binary_number, i)
        else
          {binary_number, i}
        end
      end
      {binary_number, i} = try do
          while_fun.(while_fun, binary_number, i)
        catch
          {:break, {binary_number, i}} -> {binary_number, i}
        end

      throw {:return, binary_number}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(octal_to_binary("17")))
    IO.puts(Kernel.inspect(octal_to_binary("7")))
  end
end
Main.main()
