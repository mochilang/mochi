# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def rstrip_s(s) do
    try do
      throw {:return, ((if _len(s) > 0 && String.at(s, _len(s) - 1) == "s", do: _slice(s, 0, _len(s) - 1 - (0)), else: s))}
    catch
      {:return, val} -> val
    end
  end
  def normalize_alias(u) do
    try do
      if u == "millimeter" do
        throw {:return, "mm"}
      end
      if u == "centimeter" do
        throw {:return, "cm"}
      end
      if u == "meter" do
        throw {:return, "m"}
      end
      if u == "kilometer" do
        throw {:return, "km"}
      end
      if u == "inch" do
        throw {:return, "in"}
      end
      if u == "inche" do
        throw {:return, "in"}
      end
      if u == "feet" do
        throw {:return, "ft"}
      end
      if u == "foot" do
        throw {:return, "ft"}
      end
      if u == "yard" do
        throw {:return, "yd"}
      end
      if u == "mile" do
        throw {:return, "mi"}
      end
      throw {:return, u}
    catch
      {:return, val} -> val
    end
  end
  def has_unit(u) do
    try do
      throw {:return, u == "mm" || u == "cm" || u == "m" || u == "km" || u == "in" || u == "ft" || u == "yd" || u == "mi"}
    catch
      {:return, val} -> val
    end
  end
  def from_factor(u) do
    try do
      if u == "mm" do
        throw {:return, 0.001}
      end
      if u == "cm" do
        throw {:return, 0.01}
      end
      if u == "m" do
        throw {:return, 1.0}
      end
      if u == "km" do
        throw {:return, 1000.0}
      end
      if u == "in" do
        throw {:return, 0.0254}
      end
      if u == "ft" do
        throw {:return, 0.3048}
      end
      if u == "yd" do
        throw {:return, 0.9144}
      end
      if u == "mi" do
        throw {:return, 1609.34}
      end
      throw {:return, 0.0}
    catch
      {:return, val} -> val
    end
  end
  def to_factor(u) do
    try do
      if u == "mm" do
        throw {:return, 1000.0}
      end
      if u == "cm" do
        throw {:return, 100.0}
      end
      if u == "m" do
        throw {:return, 1.0}
      end
      if u == "km" do
        throw {:return, 0.001}
      end
      if u == "in" do
        throw {:return, 39.3701}
      end
      if u == "ft" do
        throw {:return, 3.28084}
      end
      if u == "yd" do
        throw {:return, 1.09361}
      end
      if u == "mi" do
        throw {:return, 0.000621371}
      end
      throw {:return, 0.0}
    catch
      {:return, val} -> val
    end
  end
  def length_conversion(value, from_type, to_type) do
    try do
      new_from = normalize_alias(rstrip_s(String.downcase(from_type)))
      new_to = normalize_alias(rstrip_s(String.downcase(to_type)))
      if !has_unit(new_from) do
        raise((("Invalid 'from_type' value: '" <> from_type) <> "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
      end
      if !has_unit(new_to) do
        raise((("Invalid 'to_type' value: '" <> to_type) <> "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
      end
      throw {:return, value * from_factor(new_from) * to_factor(new_to)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(length_conversion(4.0, "METER", "FEET")))
    IO.puts(Kernel.inspect(length_conversion(1.0, "kilometer", "inch")))
    IO.puts(Kernel.inspect(length_conversion(2.0, "feet", "meter")))
    IO.puts(Kernel.inspect(length_conversion(2.0, "centimeter", "millimeter")))
    IO.puts(Kernel.inspect(length_conversion(4.0, "yard", "kilometer")))
    IO.puts(Kernel.inspect(length_conversion(3.0, "foot", "inch")))
    IO.puts(Kernel.inspect(length_conversion(3.0, "mm", "in")))
  end
end
Main.main()
