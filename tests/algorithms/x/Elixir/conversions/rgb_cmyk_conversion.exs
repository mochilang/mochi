# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def round_int(x) do
    try do
      throw {:return, (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((x + 0.5))}
    catch
      {:return, val} -> val
    end
  end
  def rgb_to_cmyk(r_input, g_input, b_input) do
    try do
      if r_input < 0 || r_input >= 256 || g_input < 0 || g_input >= 256 || b_input < 0 || b_input >= 256 do
        raise("Expected int of the range 0..255")
      end
      r = (:erlang.float(r_input)) / 255.0
      g = (:erlang.float(g_input)) / 255.0
      b = (:erlang.float(b_input)) / 255.0
      max_val = r
      {max_val} = if g > max_val do
        max_val = g
        {max_val}
      else
        {max_val}
      end
      {max_val} = if b > max_val do
        max_val = b
        {max_val}
      else
        {max_val}
      end
      k_float = 1.0 - max_val
      if k_float == 1.0 do
        throw {:return, [0, 0, 0, 100]}
      end
      c_float = 100.0 * (1.0 - r - k_float) / (1.0 - k_float)
      m_float = 100.0 * (1.0 - g - k_float) / (1.0 - k_float)
      y_float = 100.0 * (1.0 - b - k_float) / (1.0 - k_float)
      k_percent = 100.0 * k_float
      c = round_int(c_float)
      m = round_int(m_float)
      y = round_int(y_float)
      k = round_int(k_percent)
      throw {:return, [c, m, y, k]}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(rgb_to_cmyk(255, 255, 255)))
    IO.puts(Kernel.inspect(rgb_to_cmyk(128, 128, 128)))
    IO.puts(Kernel.inspect(rgb_to_cmyk(0, 0, 0)))
    IO.puts(Kernel.inspect(rgb_to_cmyk(255, 0, 0)))
    IO.puts(Kernel.inspect(rgb_to_cmyk(0, 255, 0)))
    IO.puts(Kernel.inspect(rgb_to_cmyk(0, 0, 255)))
  end
end
Main.main()
