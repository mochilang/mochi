# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def energy_conversion(from_type, to_type, value) do
    try do
      if (Map.has_key?(Process.get(:energy_conversion), from_type)) == false || (Map.has_key?(Process.get(:energy_conversion), to_type)) == false do
        raise("Incorrect 'from_type' or 'to_type'")
      end
      throw {:return, value * Process.get(:energy_conversion)[from_type] / Process.get(:energy_conversion)[to_type]}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:energy_conversion, %{"joule" => 1.0, "kilojoule" => 1000.0, "megajoule" => 1000000.0, "gigajoule" => 1000000000.0, "wattsecond" => 1.0, "watthour" => 3600.0, "kilowatthour" => 3600000.0, "newtonmeter" => 1.0, "calorie_nutr" => 4186.8, "kilocalorie_nutr" => 4186800.0, "electronvolt" => 0.0000000000000000001602176634, "britishthermalunit_it" => 1055.05585, "footpound" => 1.355818})
  def main() do
    IO.puts(Kernel.inspect(energy_conversion("joule", "kilojoule", 1.0)))
    IO.puts(Kernel.inspect(energy_conversion("kilowatthour", "joule", 10.0)))
    IO.puts(Kernel.inspect(energy_conversion("britishthermalunit_it", "footpound", 1.0)))
  end
end
Main.main()
