# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def strip_spaces(s) do
    try do
      start = 0
      end_ = _len(s) - 1
      while_fun = fn while_fun, start ->
        if start < _len(s) && String.at(s, start) == " " do
          start = start + 1
          while_fun.(while_fun, start)
        else
          start
        end
      end
      start = try do
          while_fun.(while_fun, start)
        catch
          {:break, {start}} -> start
        end

      while_fun_2 = fn while_fun_2, end_ ->
        if end_ >= start && String.at(s, end_) == " " do
          end_ = end_ - 1
          while_fun_2.(while_fun_2, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_2.(while_fun_2, end_)
        catch
          {:break, {end_}} -> end_
        end

      res = ""
      i = start
      while_fun_3 = fn while_fun_3, i, res ->
        if i <= end_ do
          res = (res <> String.at(s, i))
          i = i + 1
          while_fun_3.(while_fun_3, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_3.(while_fun_3, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def repeat_char(ch, count) do
    try do
      res = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, res ->
        if i < count do
          res = (res <> ch)
          i = i + 1
          while_fun_4.(while_fun_4, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_4.(while_fun_4, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def slice(s, start, end_) do
    try do
      res = ""
      i = start
      while_fun_5 = fn while_fun_5, i, res ->
        if i < end_ do
          res = (res <> String.at(s, i))
          i = i + 1
          while_fun_5.(while_fun_5, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_5.(while_fun_5, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bits_to_int(bits) do
    try do
      value = 0
      i = 0
      while_fun_6 = fn while_fun_6, i, value ->
        if i < _len(bits) do
          value = value * 2
          {value} = if String.at(bits, i) == "1" do
            value = value + 1
            {value}
          else
            {value}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun_6.(while_fun_6, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def bin_to_hexadecimal(binary_str) do
    try do
      s = strip_spaces(binary_str)
      if _len(s) == 0 do
        raise("Empty string was passed to the function")
      end
      is_negative = false
      {is_negative, s} = if String.at(s, 0) == "-" do
        is_negative = true
        s = slice(s, 1, _len(s))
        {is_negative, s}
      else
        {is_negative, s}
      end
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(s) do
          c = String.at(s, i)
          if c != "0" && c != "1" do
            raise("Non-binary value was passed to the function")
          end
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

      groups = div(_len(s), 4) + 1
      pad_len = groups * 4 - _len(s)
      s = (repeat_char("0", pad_len) <> s)
      digits = "0123456789abcdef"
      res = "0x"
      j = 0
      while_fun_8 = fn while_fun_8, j, res ->
        if j < _len(s) do
          chunk = slice(s, j, j + 4)
          val = bits_to_int(chunk)
          res = (res <> String.at(digits, val))
          j = j + 4
          while_fun_8.(while_fun_8, j, res)
        else
          {j, res}
        end
      end
      {j, res} = try do
          while_fun_8.(while_fun_8, j, res)
        catch
          {:break, {j, res}} -> {j, res}
        end

      if is_negative do
        throw {:return, ("-" <> res)}
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(bin_to_hexadecimal("101011111")))
    IO.puts(Kernel.inspect(bin_to_hexadecimal(" 1010   ")))
    IO.puts(Kernel.inspect(bin_to_hexadecimal("-11101")))
  end
end
Main.main()
