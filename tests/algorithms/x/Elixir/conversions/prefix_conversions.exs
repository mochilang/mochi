# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  def pow(base, exp) do
    try do
      if exp == 0 do
        throw {:return, 1.0}
      end
      e = exp
      {e} = if e < 0 do
        e = -e
        {e}
      else
        {e}
      end
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < e do
          result = result * base
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      if exp < 0 do
        throw {:return, 1.0 / result}
      end
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def convert_si_prefix(known_amount, known_prefix, unknown_prefix) do
    try do
      kp = String.downcase(known_prefix)
      up = String.downcase(unknown_prefix)
      if !(Map.has_key?(Process.get(:si_units), kp)) do
        raise(("unknown prefix: " <> known_prefix))
      end
      if !(Map.has_key?(Process.get(:si_units), up)) do
        raise(("unknown prefix: " <> unknown_prefix))
      end
      diff = Process.get(:si_units)[kp] - Process.get(:si_units)[up]
      throw {:return, known_amount * pow(10.0, diff)}
    catch
      {:return, val} -> val
    end
  end
  def convert_binary_prefix(known_amount, known_prefix, unknown_prefix) do
    try do
      kp = String.downcase(known_prefix)
      up = String.downcase(unknown_prefix)
      if !(Map.has_key?(Process.get(:binary_units), kp)) do
        raise(("unknown prefix: " <> known_prefix))
      end
      if !(Map.has_key?(Process.get(:binary_units), up)) do
        raise(("unknown prefix: " <> unknown_prefix))
      end
      diff = (Process.get(:binary_units)[kp] - Process.get(:binary_units)[up]) * 10
      throw {:return, known_amount * pow(2.0, diff)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:binary_units, %{"yotta" => 8, "zetta" => 7, "exa" => 6, "peta" => 5, "tera" => 4, "giga" => 3, "mega" => 2, "kilo" => 1})
  def main() do
    Process.put(:si_units, %{"yotta" => 24, "zetta" => 21, "exa" => 18, "peta" => 15, "tera" => 12, "giga" => 9, "mega" => 6, "kilo" => 3, "hecto" => 2, "deca" => 1, "deci" => -1, "centi" => -2, "milli" => -3, "micro" => -6, "nano" => -9, "pico" => -12, "femto" => -15, "atto" => -18, "zepto" => -21, "yocto" => -24})
    IO.puts(Kernel.inspect(convert_si_prefix(1.0, "giga", "mega")))
    IO.puts(Kernel.inspect(convert_si_prefix(1.0, "mega", "giga")))
    IO.puts(Kernel.inspect(convert_si_prefix(1.0, "kilo", "kilo")))
    IO.puts(Kernel.inspect(convert_binary_prefix(1.0, "giga", "mega")))
    IO.puts(Kernel.inspect(convert_binary_prefix(1.0, "mega", "giga")))
    IO.puts(Kernel.inspect(convert_binary_prefix(1.0, "kilo", "kilo")))
  end
end
Main.main()
