# Code generated by Mochi transpiler 2025-08-06 23:01 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  def decimal_to_any(num, base) do
    try do
      if num < 0 do
        raise("parameter must be positive int")
      end
      if base < 2 do
        raise("base must be >= 2")
      end
      if base > 36 do
        raise("base must be <= 36")
      end
      if num == 0 do
        throw {:return, "0"}
      end
      symbols = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      n = num
      result = ""
      while_fun = fn while_fun, n, result ->
        if n > 0 do
          mod = rem(n, base)
          digit = _slice(symbols, mod, mod + 1 - (mod))
          result = (digit <> result)
          n = div(n, base)
          while_fun.(while_fun, n, result)
        else
          {n, result}
        end
      end
      {n, result} = try do
          while_fun.(while_fun, n, result)
        catch
          {:break, {n, result}} -> {n, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(decimal_to_any(0, 2)))
      IO.puts(Kernel.inspect(decimal_to_any(5, 4)))
      IO.puts(Kernel.inspect(decimal_to_any(20, 3)))
      IO.puts(Kernel.inspect(decimal_to_any(58, 16)))
      IO.puts(Kernel.inspect(decimal_to_any(243, 17)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
