# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def copy_list(arr) do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(arr) do
          result = (result ++ [Enum.at(arr, i)])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def heaps(arr) do
    try do
      if _len(arr) <= 1 do
        single = []
        throw {:return, (single ++ [copy_list(arr)])}
      end
      n = _len(arr)
      c = []
      i = 0
      while_fun_2 = fn while_fun_2, c, i ->
        if i < n do
          c = (c ++ [0])
          i = i + 1
          while_fun_2.(while_fun_2, c, i)
        else
          {c, i}
        end
      end
      {c, i} = try do
          while_fun_2.(while_fun_2, c, i)
        catch
          {:break, {c, i}} -> {c, i}
        end

      res = []
      res = (res ++ [copy_list(arr)])
      i = 0
      while_fun_3 = fn while_fun_3, arr, c, i, res ->
        if i < n do
          {arr, c, i, res} = if Enum.at(c, i) < i do
            {arr} = if rem(i, 2) == 0 do
              temp = Enum.at(arr, 0)
              arr = List.replace_at(arr, 0, Enum.at(arr, i))
              arr = List.replace_at(arr, i, temp)
              {arr}
            else
              temp = Enum.at(arr, Enum.at(c, i))
              arr = List.replace_at(arr, Enum.at(c, i), Enum.at(arr, i))
              arr = List.replace_at(arr, i, temp)
              {arr}
            end
            res = (res ++ [copy_list(arr)])
            c = List.replace_at(c, i, Enum.at(c, i) + 1)
            i = 0
            {arr, c, i, res}
          else
            c = List.replace_at(c, i, 0)
            i = i + 1
            {arr, c, i, res}
          end
          while_fun_3.(while_fun_3, arr, c, i, res)
        else
          {arr, c, i, res}
        end
      end
      {arr, c, i, res} = try do
          while_fun_3.(while_fun_3, arr, c, i, res)
        catch
          {:break, {arr, c, i, res}} -> {arr, c, i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(heaps([1, 2, 3])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
