# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def subarray(xs, start, end_) do
    try do
      result = []
      k = start
      while_fun = fn while_fun, k, result ->
        if k < end_ do
          result = (result ++ [Enum.at(xs, k)])
          k = k + 1
          while_fun.(while_fun, k, result)
        else
          {k, result}
        end
      end
      {k, result} = try do
          while_fun.(while_fun, k, result)
        catch
          {:break, {k, result}} -> {k, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def merge(left_half, right_half) do
    try do
      result = []
      i = 0
      j = 0
      while_fun_2 = fn while_fun_2, i, j, result ->
        if i < _len(left_half) && j < _len(right_half) do
          {i, j, result} = if Enum.at(left_half, i) < Enum.at(right_half, j) do
            result = (result ++ [Enum.at(left_half, i)])
            i = i + 1
            {i, j, result}
          else
            result = (result ++ [Enum.at(right_half, j)])
            j = j + 1
            {i, j, result}
          end
          while_fun_2.(while_fun_2, i, j, result)
        else
          {i, j, result}
        end
      end
      {i, j, result} = try do
          while_fun_2.(while_fun_2, i, j, result)
        catch
          {:break, {i, j, result}} -> {i, j, result}
        end

      while_fun_3 = fn while_fun_3, i, result ->
        if i < _len(left_half) do
          result = (result ++ [Enum.at(left_half, i)])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      while_fun_4 = fn while_fun_4, j, result ->
        if j < _len(right_half) do
          result = (result ++ [Enum.at(right_half, j)])
          j = j + 1
          while_fun_4.(while_fun_4, j, result)
        else
          {j, result}
        end
      end
      {j, result} = try do
          while_fun_4.(while_fun_4, j, result)
        catch
          {:break, {j, result}} -> {j, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def merge_sort(array) do
    try do
      if _len(array) <= 1 do
        throw {:return, array}
      end
      middle = div(_len(array), 2)
      left_half = subarray(array, 0, middle)
      right_half = subarray(array, middle, _len(array))
      sorted_left = merge_sort(left_half)
      sorted_right = merge_sort(right_half)
      throw {:return, merge(sorted_left, sorted_right)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(merge_sort([5, 3, 1, 4, 2])))
    IO.puts(Kernel.inspect(merge_sort([-2, 3, -10, 11, 99, 100000, 100, -200])))
    IO.puts(Kernel.inspect(merge_sort([-200])))
    IO.puts(Kernel.inspect(merge_sort([])))
  end
end
Main.main()
