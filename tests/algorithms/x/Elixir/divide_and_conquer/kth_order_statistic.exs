# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pivot(lst) do
    try do
      throw {:return, Enum.at(lst, 0)}
    catch
      {:return, val} -> val
    end
  end
  def kth_number(lst, k) do
    try do
      p = pivot(lst)
      small = []
      big = []
      i = 0
      while_fun = fn while_fun, big, i, small ->
        if i < _len(lst) do
          e = Enum.at(lst, i)
          {big, small} = if e < p do
            small = (small ++ [e])
            {big, small}
          else
            {big} = if e > p do
              big = (big ++ [e])
              {big}
            else
              {big}
            end
            {big, small}
          end
          i = i + 1
          while_fun.(while_fun, big, i, small)
        else
          {big, i, small}
        end
      end
      {big, i, small} = try do
          while_fun.(while_fun, big, i, small)
        catch
          {:break, {big, i, small}} -> {big, i, small}
        end

      if _len(small) == k - 1 do
        throw {:return, p}
      else
        if _len(small) < k - 1 do
          throw {:return, kth_number(big, k - _len(small) - 1)}
        else
          throw {:return, kth_number(small, k)}
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(kth_number([2, 1, 3, 4, 5], 3)))
    IO.puts(Kernel.inspect(kth_number([2, 1, 3, 4, 5], 1)))
    IO.puts(Kernel.inspect(kth_number([2, 1, 3, 4, 5], 5)))
    IO.puts(Kernel.inspect(kth_number([3, 2, 5, 6, 7, 8], 2)))
    IO.puts(Kernel.inspect(kth_number([25, 21, 98, 100, 76, 22, 43, 60, 89, 87], 4)))
  end
end
Main.main()
