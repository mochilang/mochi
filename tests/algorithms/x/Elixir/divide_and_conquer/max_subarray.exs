# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def max_cross_sum(arr, low, mid, high) do
    try do
      left_sum = -1000000000000000000.0
      max_left = -1
      sum = 0.0
      i = mid
      while_fun = fn while_fun, i, left_sum, max_left, sum ->
        if i >= low do
          sum = sum + Enum.at(arr, i)
          {left_sum, max_left} = if sum > left_sum do
            left_sum = sum
            max_left = i
            {left_sum, max_left}
          else
            {left_sum, max_left}
          end
          i = i - 1
          while_fun.(while_fun, i, left_sum, max_left, sum)
        else
          {i, left_sum, max_left, sum}
        end
      end
      {i, left_sum, max_left, sum} = try do
          while_fun.(while_fun, i, left_sum, max_left, sum)
        catch
          {:break, {i, left_sum, max_left, sum}} -> {i, left_sum, max_left, sum}
        end

      right_sum = -1000000000000000000.0
      max_right = -1
      sum = 0.0
      i = mid + 1
      while_fun_2 = fn while_fun_2, i, max_right, right_sum, sum ->
        if i <= high do
          sum = sum + Enum.at(arr, i)
          {max_right, right_sum} = if sum > right_sum do
            right_sum = sum
            max_right = i
            {max_right, right_sum}
          else
            {max_right, right_sum}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, max_right, right_sum, sum)
        else
          {i, max_right, right_sum, sum}
        end
      end
      {i, max_right, right_sum, sum} = try do
          while_fun_2.(while_fun_2, i, max_right, right_sum, sum)
        catch
          {:break, {i, max_right, right_sum, sum}} -> {i, max_right, right_sum, sum}
        end

      throw {:return, %{start: max_left, end: max_right, sum: left_sum + right_sum}}
    catch
      {:return, val} -> val
    end
  end
  def max_subarray(arr, low, high) do
    try do
      if _len(arr) == 0 do
        throw {:return, %{start: -1, end: -1, sum: 0.0}}
      end
      if low == high do
        throw {:return, %{start: low, end: high, sum: Enum.at(arr, low)}}
      end
      mid = div((low + high), 2)
      left = max_subarray(arr, low, mid)
      right = max_subarray(arr, mid + 1, high)
      cross = max_cross_sum(arr, low, mid, high)
      if left.sum >= right.sum && left.sum >= cross.sum do
        throw {:return, left}
      end
      if right.sum >= left.sum && right.sum >= cross.sum do
        throw {:return, right}
      end
      throw {:return, cross}
    catch
      {:return, val} -> val
    end
  end
  def show(res) do
    try do
      IO.puts((((((("[" <> Kernel.to_string(res.start)) <> ", ") <> Kernel.to_string(res.end)) <> ", ") <> Kernel.to_string(res.sum)) <> "]"))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      nums1 = [-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0]
      res1 = max_subarray(nums1, 0, _len(nums1) - 1)
      show(res1)
      nums2 = [2.0, 8.0, 9.0]
      res2 = max_subarray(nums2, 0, _len(nums2) - 1)
      show(res2)
      nums3 = [0.0, 0.0]
      res3 = max_subarray(nums3, 0, _len(nums3) - 1)
      show(res3)
      nums4 = [-1.0, 0.0, 1.0]
      res4 = max_subarray(nums4, 0, _len(nums4) - 1)
      show(res4)
      nums5 = [-2.0, -3.0, -1.0, -4.0, -6.0]
      res5 = max_subarray(nums5, 0, _len(nums5) - 1)
      show(res5)
      nums6 = []
      res6 = max_subarray(nums6, 0, 0)
      show(res6)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
