# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def peak(lst) do
    try do
      low = 0
      high = _len(lst) - 1
      while_fun = fn while_fun, high, low ->
        if low < high do
          mid = div((low + high), 2)
          {high, low} = if Enum.at(lst, mid) < Enum.at(lst, mid + 1) do
            low = mid + 1
            {high, low}
          else
            high = mid
            {high, low}
          end
          while_fun.(while_fun, high, low)
        else
          {high, low}
        end
      end
      {high, low} = try do
          while_fun.(while_fun, high, low)
        catch
          {:break, {high, low}} -> {high, low}
        end

      throw {:return, Enum.at(lst, low)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(peak([1, 2, 3, 4, 5, 4, 3, 2, 1])))
      IO.puts(Kernel.inspect(peak([1, 10, 9, 8, 7, 6, 5, 4])))
      IO.puts(Kernel.inspect(peak([1, 9, 8, 7])))
      IO.puts(Kernel.inspect(peak([1, 2, 3, 4, 5, 6, 7, 0])))
      IO.puts(Kernel.inspect(peak([1, 2, 3, 4, 3, 2, 1, 0, -1, -2])))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
