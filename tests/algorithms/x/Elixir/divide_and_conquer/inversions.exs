# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def slice_list(arr, start, end_) do
    try do
      res = []
      k = start
      while_fun = fn while_fun, k, res ->
        if k < end_ do
          res = (res ++ [Enum.at(arr, k)])
          k = k + 1
          while_fun.(while_fun, k, res)
        else
          {k, res}
        end
      end
      {k, res} = try do
          while_fun.(while_fun, k, res)
        catch
          {:break, {k, res}} -> {k, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def count_inversions_bf(arr) do
    try do
      n = _len(arr)
      inv = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, inv ->
        if i < n - 1 do
          j = i + 1
          while_fun_3 = fn while_fun_3, inv, j ->
            if j < n do
              {inv} = if Enum.at(arr, i) > Enum.at(arr, j) do
                inv = inv + 1
                {inv}
              else
                {inv}
              end
              j = j + 1
              while_fun_3.(while_fun_3, inv, j)
            else
              {inv, j}
            end
          end
          {inv, j} = try do
              while_fun_3.(while_fun_3, inv, j)
            catch
              {:break, {inv, j}} -> {inv, j}
            end

          i = i + 1
          while_fun_2.(while_fun_2, i, inv)
        else
          {i, inv}
        end
      end
      {i, inv} = try do
          while_fun_2.(while_fun_2, i, inv)
        catch
          {:break, {i, inv}} -> {i, inv}
        end

      throw {:return, inv}
    catch
      {:return, val} -> val
    end
  end
  def count_cross_inversions(p, q) do
    try do
      r = []
      i = 0
      j = 0
      inv = 0
      while_fun_4 = fn while_fun_4, i, inv, j, r ->
        if i < _len(p) && j < _len(q) do
          {i, inv, j, r} = if Enum.at(p, i) > Enum.at(q, j) do
            inv = inv + (_len(p) - i)
            r = (r ++ [Enum.at(q, j)])
            j = j + 1
            {i, inv, j, r}
          else
            r = (r ++ [Enum.at(p, i)])
            i = i + 1
            {i, inv, j, r}
          end
          while_fun_4.(while_fun_4, i, inv, j, r)
        else
          {i, inv, j, r}
        end
      end
      {i, inv, j, r} = try do
          while_fun_4.(while_fun_4, i, inv, j, r)
        catch
          {:break, {i, inv, j, r}} -> {i, inv, j, r}
        end

      r = (if i < _len(p), do: (r ++ slice_list(p, i, _len(p))), else: (r ++ slice_list(q, j, _len(q))))
      throw {:return, %{arr: r, inv: inv}}
    catch
      {:return, val} -> val
    end
  end
  def count_inversions_recursive(arr) do
    try do
      if _len(arr) <= 1 do
        throw {:return, %{arr: arr, inv: 0}}
      end
      mid = div(_len(arr), 2)
      p = slice_list(arr, 0, mid)
      q = slice_list(arr, mid, _len(arr))
      res_p = count_inversions_recursive(p)
      res_q = count_inversions_recursive(q)
      res_cross = count_cross_inversions(res_p.arr, res_q.arr)
      total = res_p.inv + res_q.inv + res_cross.inv
      throw {:return, %{arr: res_cross.arr, inv: total}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:arr_1, [10, 2, 1, 5, 5, 2, 11])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:nbf, count_inversions_bf(Process.get(:arr_1)))
    Process.put(:nrec, count_inversions_recursive(Process.get(:arr_1))["inv"])
    IO.puts("number of inversions =  #{Process.get(:nbf)}")
    Process.put(:arr_1, [1, 2, 2, 5, 5, 10, 11])
    Process.put(:nbf2, count_inversions_bf(Process.get(:arr_1)))
    Process.put(:nrec2, count_inversions_recursive(Process.get(:arr_1))["inv"])
    IO.puts("number of inversions =  #{Process.get(:nbf2)}")
    Process.put(:arr_1, [])
    Process.put(:nbf3, count_inversions_bf(Process.get(:arr_1)))
    Process.put(:nrec3, count_inversions_recursive(Process.get(:arr_1))["inv"])
    IO.puts("number of inversions =  #{Process.get(:nbf3)}")
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
