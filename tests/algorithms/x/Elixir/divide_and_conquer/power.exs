# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  def actual_power(a, b) do
    try do
      if b == 0 do
        throw {:return, 1}
      end
      half = actual_power(a, div(b, 2))
      if rem(b, 2) == 0 do
        throw {:return, half * half}
      end
      throw {:return, a * half * half}
    catch
      {:return, val} -> val
    end
  end
  def power(a, b) do
    try do
      throw {:return, ((if b < 0, do: 1.0 / (1.0 * actual_power(a, -b)), else: 1.0 * actual_power(a, b)))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(power(4, 6)))
    IO.puts(Kernel.inspect(power(2, 3)))
    IO.puts(Kernel.inspect(power(-2, 3)))
    IO.puts(Kernel.inspect(power(2, -3)))
    IO.puts(Kernel.inspect(power(-2, -3)))
  end
end
Main.main()
