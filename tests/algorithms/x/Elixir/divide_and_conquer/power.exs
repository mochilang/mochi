# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def actual_power(a, b) do
    try do
      if b == 0 do
        throw {:return, 1}
      end
      half = actual_power(a, div(b, 2))
      if rem(b, 2) == 0 do
        throw {:return, half * half}
      end
      throw {:return, a * half * half}
    catch
      {:return, val} -> val
    end
  end
  def power(a, b) do
    try do
      throw {:return, ((if b < 0, do: 1.0 / (1.0 * actual_power(a, -b)), else: 1.0 * actual_power(a, b)))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(power(4, 6)))
    IO.puts(Kernel.inspect(power(2, 3)))
    IO.puts(Kernel.inspect(power(-2, 3)))
    IO.puts(Kernel.inspect(power(2, -3)))
    IO.puts(Kernel.inspect(power(-2, -3)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
