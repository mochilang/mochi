# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def int_sqrt(n) do
    try do
      r = 0
      while_fun = fn while_fun, r ->
        if (r + 1) * (r + 1) <= n do
          r = r + 1
          while_fun.(while_fun, r)
        else
          r
        end
      end
      r = try do
          while_fun.(while_fun, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def sum_of_divisors(n) do
    try do
      total = 0
      root = int_sqrt(n)
      i = 1
      while_fun_2 = fn while_fun_2, i, total ->
        if i <= root do
          total = if rem(n, i) == 0 do
            total = (if i * i == n, do: total + i, else: total + i + (div(n, i)))
            total
          else
            total
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, total)
        else
          {i, total}
        end
      end
      {_, total} = try do
          while_fun_2.(while_fun_2, i, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total - n}
    catch
      {:return, val} -> val
    end
  end
  def solution(limit) do
    try do
      total = 0
      i = 1
      while_fun_3 = fn while_fun_3, i, total ->
        if i < limit do
          s = sum_of_divisors(i)
          total = if s != i && sum_of_divisors(s) == i do
            total = total + i
            total
          else
            total
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, total)
        else
          {i, total}
        end
      end
      {_, total} = try do
          while_fun_3.(while_fun_3, i, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(10000)))
    IO.puts(Kernel.inspect(solution(5000)))
    IO.puts(Kernel.inspect(solution(1000)))
    IO.puts(Kernel.inspect(solution(100)))
    IO.puts(Kernel.inspect(solution(50)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
