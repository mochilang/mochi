# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _input() do
    case IO.gets("") do
      nil -> ""
      :eof -> ""
      line -> String.trim(line)
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def parse_names(line) do
    try do
      names = []
      current = ""
      i = 0
      while_fun = fn while_fun, current, i, names ->
        if i < _len(line) do
          ch = _slice(line, i, i + 1 - (i))
          {current, names} = if ch == "," do
            names = (names ++ [current])
            current = ""
            {current, names}
          else
            current = if ch != "\"" do
              current = (current <> ch)
              current
            else
              current
            end
            {current, names}
          end
          i = i + 1
          while_fun.(while_fun, current, i, names)
        else
          {current, i, names}
        end
      end
      {current, _, names} = try do
          while_fun.(while_fun, current, i, names)
        catch
          {:break, {current, _, names}} -> {current, 0, names}
        end

      names = (names ++ [current])
      throw {:return, names}
    catch
      {:return, val} -> val
    end
  end
  def insertion_sort(arr) do
    try do
      a = arr
      i = 1
      while_fun_2 = fn while_fun_2, a, i ->
        if i < _len(a) do
          key = Enum.at(a, i, [])
          j = i - 1
          while_fun_3 = fn while_fun_3, a, j ->
            if j >= 0 && Enum.at(a, j, []) > key do
              a = List.replace_at(a, j + 1, Enum.at(a, j, []))
              j = j - 1
              while_fun_3.(while_fun_3, a, j)
            else
              {a, j}
            end
          end
          {a, _} = try do
              while_fun_3.(while_fun_3, a, j)
            catch
              {:break, {a, _}} -> {a, 0}
            end

          a = List.replace_at(a, j + 1, key)
          i = i + 1
          while_fun_2.(while_fun_2, a, i)
        else
          {a, i}
        end
      end
      {a, _} = try do
          while_fun_2.(while_fun_2, a, i)
        catch
          {:break, {a, _}} -> {a, 0}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def letter_value(ch) do
    try do
      alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      idx = 0
      while_fun_4 = fn while_fun_4, idx ->
        if idx < _len(alphabet) do
          if _slice(alphabet, idx, idx + 1 - (idx)) == ch do
            throw {:return, idx + 1}
          end
          idx = idx + 1
          while_fun_4.(while_fun_4, idx)
        else
          idx
        end
      end
      _ = try do
          while_fun_4.(while_fun_4, idx)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def name_score(name) do
    try do
      score = 0
      i = 0
      while_fun_5 = fn while_fun_5, i, score ->
        if i < _len(name) do
          score = score + letter_value(_slice(name, i, i + 1 - (i)))
          i = i + 1
          while_fun_5.(while_fun_5, i, score)
        else
          {i, score}
        end
      end
      {_, score} = try do
          while_fun_5.(while_fun_5, i, score)
        catch
          {:break, {_, score}} -> {0, score}
        end

      throw {:return, score}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      line = _input()
      names = insertion_sort(parse_names(line))
      total = 0
      i = 0
      while_fun_6 = fn while_fun_6, i, total ->
        if i < _len(names) do
          total = total + (i + 1) * name_score(Enum.at(names, i, []))
          i = i + 1
          while_fun_6.(while_fun_6, i, total)
        else
          {i, total}
        end
      end
      {_, total} = try do
          while_fun_6.(while_fun_6, i, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      IO.puts(Kernel.to_string(total))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
