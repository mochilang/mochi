# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ord_letter(ch) do
    try do
      alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      i = 0
      while_fun = fn while_fun ->
        if i < _len(alphabet) do
          if _slice(alphabet, i, (i + 1) - i) == ch do
            throw {:return, i + 1}
          end
          i = i + 1
          while_fun.(while_fun)
        else
          nil
        end
      end
      try do
        while_fun.(while_fun)
      catch
        :break -> nil
      end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def name_value(name) do
    try do
      total = 0
      i = 0
      while_fun_2 = fn while_fun_2 ->
        if i < _len(name) do
          total = total + ord_letter(_slice(name, i, (i + 1) - i))
          i = i + 1
          while_fun_2.(while_fun_2)
        else
          nil
        end
      end
      try do
        while_fun_2.(while_fun_2)
      catch
        :break -> nil
      end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def bubble_sort(arr) do
    try do
      n = _len(arr)
      i = 0
      while_fun_3 = fn while_fun_3, arr ->
        if i < n do
          j = 0
          while_fun_4 = fn while_fun_4, arr, j ->
            if j < n - i - 1 do
              arr = if Enum.at(arr, j, []) > Enum.at(arr, j + 1, []) do
                temp = Enum.at(arr, j, [])
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1, []))
                arr = List.replace_at(arr, j + 1, temp)
                arr
              else
                arr
              end
              j = j + 1
              while_fun_4.(while_fun_4, arr, j)
            else
              {arr, j}
            end
          end
          {arr, _} = try do
              while_fun_4.(while_fun_4, arr, j)
            catch
              {:break, {arr, _}} -> {arr, 0}
            end

          i = i + 1
          while_fun_3.(while_fun_3, arr)
        else
          arr
        end
      end
      arr = try do
          while_fun_3.(while_fun_3, arr)
        catch
          {:break, {arr}} -> arr
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:names, [])
  Process.put(:total, 0)
  Process.put(:i, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:rows, )
    Enum.each(Process.get(:rows), fn r ->
      Process.put(:names, (Process.get(:names) ++ [r.name]))
    end)
    Process.put(:names, bubble_sort(Process.get(:names)))
    while_fun_5 = fn while_fun_5 ->
      if Process.get(:i) < _len(Process.get(:names)) do
        Process.put(:total, Process.get(:total) + (Process.get(:i) + 1) * name_value(Enum.at(Process.get(:names), Process.get(:i), [])))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_5.(while_fun_5)
      else
        nil
      end
    end
    try do
      while_fun_5.(while_fun_5)
    catch
      :break -> nil
    end

    IO.puts(Kernel.to_string(Process.get(:total)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
