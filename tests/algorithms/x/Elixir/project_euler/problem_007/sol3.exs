# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def is_prime(number) do
    try do
      if 1 < number && number < 4 do
        throw {:return, true}
      else
        if number < 2 || rem(number, 2) == 0 || rem(number, 3) == 0 do
          throw {:return, false}
        end
      end
      i = 5
      while_fun = fn while_fun, i ->
        if i * i <= number do
          if rem(number, i) == 0 || rem(number, (i + 2)) == 0 do
            throw {:return, false}
          end
          i = i + 6
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def solution(nth) do
    try do
      count = 0
      num = 2
      while_fun_2 = fn while_fun_2, count, num ->
        if true do
          {count} = if is_prime(num) do
            count = count + 1
            if count == nth do
              throw {:return, num}
            end
            {count}
          else
            {count}
          end
          num = num + 1
          while_fun_2.(while_fun_2, count, num)
        else
          {count, num}
        end
      end
      {count, num} = try do
          while_fun_2.(while_fun_2, count, num)
        catch
          {:break, {count, num}} -> {count, num}
        end

      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(("solution() = " <> Kernel.inspect(solution(10001))))
  end
end
Main.main()
