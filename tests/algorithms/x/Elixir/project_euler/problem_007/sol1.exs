# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def isqrt(n) do
    try do
      r = 0
      while_fun = fn while_fun, r ->
        if (r + 1) * (r + 1) <= n do
          r = r + 1
          while_fun.(while_fun, r)
        else
          r
        end
      end
      r = try do
          while_fun.(while_fun, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def is_prime(number) do
    try do
      if 1 < number && number < 4 do
        throw {:return, true}
      else
        if number < 2 || rem(number, 2) == 0 || rem(number, 3) == 0 do
          throw {:return, false}
        end
      end
      limit = isqrt(number)
      i = 5
      while_fun_2 = fn while_fun_2, i ->
        if i <= limit do
          if rem(number, i) == 0 || rem(number, (i + 2)) == 0 do
            throw {:return, false}
          end
          i = i + 6
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      _ = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def solution(nth) do
    try do
      count = 0
      number = 1
      while_fun_3 = fn while_fun_3, count, number ->
        if count != nth && number < 3 do
          number = number + 1
          count = if is_prime(number) do
            count = count + 1
            count
          else
            count
          end
          while_fun_3.(while_fun_3, count, number)
        else
          {count, number}
        end
      end
      {count, number} = try do
          while_fun_3.(while_fun_3, count, number)
        catch
          {:break, {count, number}} -> {count, number}
        end

      while_fun_4 = fn while_fun_4, count, number ->
        if count != nth do
          number = number + 2
          count = if is_prime(number) do
            count = count + 1
            count
          else
            count
          end
          while_fun_4.(while_fun_4, count, number)
        else
          {count, number}
        end
      end
      {count, number} = try do
          while_fun_4.(while_fun_4, count, number)
        catch
          {:break, {count, number}} -> {count, number}
        end

      throw {:return, number}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(("solution() = " <> Kernel.inspect(solution(10001))))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
