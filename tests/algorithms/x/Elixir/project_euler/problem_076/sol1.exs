# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(m) do
    try do
      memo = []
      i = 0
      while_fun = fn while_fun, i, memo ->
        if i <= m do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < m do
              row = (row ++ [0])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {_, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {_, row}} -> {0, row}
            end

          memo = (memo ++ [row])
          i = i + 1
          while_fun.(while_fun, i, memo)
        else
          {i, memo}
        end
      end
      {_, memo} = try do
          while_fun.(while_fun, i, memo)
        catch
          {:break, {_, memo}} -> {0, memo}
        end

      i = 0
      while_fun_3 = fn while_fun_3, i, memo ->
        if i <= m do
          memo = List.replace_at(memo, i, List.replace_at(Enum.at(memo, i), 0, 1))
          i = i + 1
          while_fun_3.(while_fun_3, i, memo)
        else
          {i, memo}
        end
      end
      {_, memo} = try do
          while_fun_3.(while_fun_3, i, memo)
        catch
          {:break, {_, memo}} -> {0, memo}
        end

      n = 0
      while_fun_4 = fn while_fun_4, memo, n ->
        if n <= m do
          k = 1
          while_fun_5 = fn while_fun_5, k, memo ->
            if k < m do
              memo = List.replace_at(memo, n, List.replace_at(Enum.at(memo, n), k, Enum.at(Enum.at(memo, n, []), k, 0) + Enum.at(Enum.at(memo, n, []), k - 1, 0)))
              memo = if n > k do
                memo = List.replace_at(memo, n, List.replace_at(Enum.at(memo, n), k, Enum.at(Enum.at(memo, n, []), k, 0) + Enum.at(Enum.at(memo, n - k - 1, []), k, 0)))
                memo
              else
                memo
              end
              k = k + 1
              while_fun_5.(while_fun_5, k, memo)
            else
              {k, memo}
            end
          end
          {_, memo} = try do
              while_fun_5.(while_fun_5, k, memo)
            catch
              {:break, {_, memo}} -> {0, memo}
            end

          n = n + 1
          while_fun_4.(while_fun_4, memo, n)
        else
          {memo, n}
        end
      end
      {memo, _} = try do
          while_fun_4.(while_fun_4, memo, n)
        catch
          {:break, {memo, _}} -> {memo, 0}
        end

      throw {:return, Enum.at(Enum.at(memo, m, []), m - 1, 0) - 1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(100)))
    IO.puts(Kernel.inspect(solution(50)))
    IO.puts(Kernel.inspect(solution(30)))
    IO.puts(Kernel.inspect(solution(10)))
    IO.puts(Kernel.inspect(solution(5)))
    IO.puts(Kernel.inspect(solution(3)))
    IO.puts(Kernel.inspect(solution(2)))
    IO.puts(Kernel.inspect(solution(1)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
