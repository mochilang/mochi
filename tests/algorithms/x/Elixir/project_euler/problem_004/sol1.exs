# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_palindrome(num) do
    try do
      s = Kernel.to_string(num)
      i = 0
      j = _len(s) - 1
      while_fun = fn while_fun, i, j ->
        if i < j do
          if _slice(s, i, (i + 1) - i) != _slice(s, j, (j + 1) - j) do
            throw {:return, false}
          end
          i = i + 1
          j = j - 1
          while_fun.(while_fun, i, j)
        else
          {i, j}
        end
      end
      {_, _} = try do
          while_fun.(while_fun, i, j)
        catch
          {:break, {_, _}} -> {0, 0}
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      number = n - 1
      while_fun_2 = fn while_fun_2, number ->
        if number > 9999 do
          if is_palindrome(number) do
            divisor = 999
            while_fun_3 = fn while_fun_3, divisor ->
              if divisor > 99 do
                if rem(number, divisor) == 0 do
                  other = div(number, divisor)
                  if _len(Kernel.to_string(other)) == 3 do
                    throw {:return, number}
                  end
                end
                divisor = divisor - 1
                while_fun_3.(while_fun_3, divisor)
              else
                divisor
              end
            end
            divisor = try do
                while_fun_3.(while_fun_3, divisor)
              catch
                {:break, {divisor}} -> divisor
              end

          end
          number = number - 1
          while_fun_2.(while_fun_2, number)
        else
          number
        end
      end
      number = try do
          while_fun_2.(while_fun_2, number)
        catch
          {:break, {number}} -> number
        end

      IO.puts("That number is larger than our acceptable range.")
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(("solution() = " <> Kernel.inspect(solution(998001))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
