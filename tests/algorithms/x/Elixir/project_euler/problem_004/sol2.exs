# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def is_palindrome(num) do
    try do
      if num < 0 do
        throw {:return, false}
      end
      n = num
      rev = 0
      while_fun = fn while_fun, n, rev ->
        if n > 0 do
          rev = rev * 10 + (rem(n, 10))
          n = div(n, 10)
          while_fun.(while_fun, n, rev)
        else
          {n, rev}
        end
      end
      {n, rev} = try do
          while_fun.(while_fun, n, rev)
        catch
          {:break, {n, rev}} -> {n, rev}
        end

      throw {:return, rev == num}
    catch
      {:return, val} -> val
    end
  end
  def solution(limit) do
    try do
      answer = 0
      i = 999
      while_fun_2 = fn while_fun_2, answer, i ->
        if i >= 100 do
          j = 999
          while_fun_3 = fn while_fun_3, answer, j ->
            if j >= 100 do
              product = i * j
              answer = if product < limit && is_palindrome(product) && product > answer do
                answer = product
                answer
              else
                answer
              end
              j = j - 1
              while_fun_3.(while_fun_3, answer, j)
            else
              {answer, j}
            end
          end
          {answer, _} = try do
              while_fun_3.(while_fun_3, answer, j)
            catch
              {:break, {answer, _}} -> {answer, 0}
            end

          i = i - 1
          while_fun_2.(while_fun_2, answer, i)
        else
          {answer, i}
        end
      end
      {answer, _} = try do
          while_fun_2.(while_fun_2, answer, i)
        catch
          {:break, {answer, _}} -> {answer, 0}
        end

      throw {:return, answer}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(998001)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
