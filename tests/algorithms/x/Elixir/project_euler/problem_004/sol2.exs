# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def is_palindrome(num) do
    try do
      if num < 0 do
        throw {:return, false}
      end
      n = num
      rev = 0
      while_fun = fn while_fun, n, rev ->
        if n > 0 do
          rev = rev * 10 + (rem(n, 10))
          n = div(n, 10)
          while_fun.(while_fun, n, rev)
        else
          {n, rev}
        end
      end
      {n, rev} = try do
          while_fun.(while_fun, n, rev)
        catch
          {:break, {n, rev}} -> {n, rev}
        end

      throw {:return, rev == num}
    catch
      {:return, val} -> val
    end
  end
  def solution(limit) do
    try do
      answer = 0
      i = 999
      while_fun_2 = fn while_fun_2, answer, i ->
        if i >= 100 do
          j = 999
          while_fun_3 = fn while_fun_3, answer, j ->
            if j >= 100 do
              product = i * j
              {answer} = if product < limit && is_palindrome(product) && product > answer do
                answer = product
                {answer}
              else
                {answer}
              end
              j = j - 1
              while_fun_3.(while_fun_3, answer, j)
            else
              {answer, j}
            end
          end
          {answer, j} = try do
              while_fun_3.(while_fun_3, answer, j)
            catch
              {:break, {answer, j}} -> {answer, j}
            end

          i = i - 1
          while_fun_2.(while_fun_2, answer, i)
        else
          {answer, i}
        end
      end
      {answer, i} = try do
          while_fun_2.(while_fun_2, answer, i)
        catch
          {:break, {answer, i}} -> {answer, i}
        end

      throw {:return, answer}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution(998001)))
  end
end
Main.main()
