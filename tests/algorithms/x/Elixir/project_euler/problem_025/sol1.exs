# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _input() do
    case IO.gets("") do
      nil -> ""
      :eof -> ""
      line -> String.trim(line)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def fibonacci(n) do
    try do
      if n == 1 do
        throw {:return, 0}
      end
      if n == 2 do
        throw {:return, 1}
      end
      a = 0
      b = 1
      i = 2
      while_fun = fn while_fun, a, b, i ->
        if i <= n do
          c = a + b
          a = b
          b = c
          i = i + 1
          while_fun.(while_fun, a, b, i)
        else
          {a, b, i}
        end
      end
      {a, b, _} = try do
          while_fun.(while_fun, a, b, i)
        catch
          {:break, {a, b, _}} -> {a, b, 0}
        end

      throw {:return, b}
    catch
      {:return, val} -> val
    end
  end
  def fibonacci_digits_index(n) do
    try do
      digits = 0
      index = 2
      while_fun_2 = fn while_fun_2, digits, index ->
        if digits < n do
          index = index + 1
          fib = fibonacci(index)
          digits = _len(Kernel.to_string(fib))
          while_fun_2.(while_fun_2, digits, index)
        else
          {digits, index}
        end
      end
      {digits, index} = try do
          while_fun_2.(while_fun_2, digits, index)
        catch
          {:break, {digits, index}} -> {digits, index}
        end

      throw {:return, index}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      throw {:return, fibonacci_digits_index(n)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n = String.to_integer(_input())
      IO.puts(Kernel.inspect(solution(n)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
