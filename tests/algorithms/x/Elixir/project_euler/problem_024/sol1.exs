# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def factorial(n) do
    try do
      result = 1
      i = 2
      while_fun = fn while_fun, i, result ->
        if i <= n do
          result = result * i
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {_, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def nth_permutation(digits, index) do
    try do
      chars = digits
      n = index
      res = ""
      k = _len(chars)
      while_fun_2 = fn while_fun_2, chars, k, n, res ->
        if k > 0 do
          f = factorial(k - 1)
          pos = div(n, f)
          n = rem(n, f)
          res = (res <> _slice(chars, pos, pos + 1 - (pos)))
          chars = (_slice(chars, 0, pos - (0)) <> _slice(chars, pos + 1, _len(chars) - (pos + 1)))
          k = k - 1
          while_fun_2.(while_fun_2, chars, k, n, res)
        else
          {chars, k, n, res}
        end
      end
      {chars, _, n, res} = try do
          while_fun_2.(while_fun_2, chars, k, n, res)
        catch
          {:break, {chars, _, n, res}} -> {chars, 0, n, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def solution() do
    try do
      throw {:return, nth_permutation("0123456789", 999999)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(solution()))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
