# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(n) do
    try do
      ones_counts = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8]
      tens_counts = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6]
      count = 0
      i = 1
      while_fun = fn while_fun, count, i ->
        if i <= n do
          count = if i < 1000 do
            count = if i >= 100 do
              count = count + Enum.at(ones_counts, div(i, 100), []) + 7
              count = if rem(i, 100) != 0 do
                count = count + 3
                count
              else
                count
              end
              count
            else
              count
            end
            remainder = rem(i, 100)
            count = if remainder > 0 && remainder < 20 do
              count = count + Enum.at(ones_counts, remainder, [])
              count
            else
              count = count + Enum.at(ones_counts, rem(i, 10), [])
              count = count + Enum.at(tens_counts, div((remainder - rem(i, 10)), 10), [])
              count
            end
            count
          else
            count = count + Enum.at(ones_counts, div(i, 1000), []) + 8
            count
          end
          i = i + 1
          while_fun.(while_fun, count, i)
        else
          {count, i}
        end
      end
      {count, _} = try do
          while_fun.(while_fun, count, i)
        catch
          {:break, {count, _}} -> {count, 0}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(1000)))
    IO.puts(Kernel.inspect(solution(5)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
