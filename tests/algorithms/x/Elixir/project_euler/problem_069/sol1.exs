# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def is_prime(n) do
    try do
      if n < 2 do
        throw {:return, false}
      end
      i = 2
      while_fun = fn while_fun, i ->
        if i * i <= n do
          if rem(n, i) == 0 do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def solution(limit) do
    try do
      if limit < 2 do
        throw {:return, 1}
      end
      result = 1
      p = 2
      while_fun_2 = fn while_fun_2, p, result ->
        if result * p <= limit do
          result = if is_prime(p) do
            result = result * p
            result
          else
            result
          end
          p = p + 1
          while_fun_2.(while_fun_2, p, result)
        else
          {p, result}
        end
      end
      {p, result} = try do
          while_fun_2.(while_fun_2, p, result)
        catch
          {:break, {p, result}} -> {p, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      ans = solution(1000000)
      IO.puts(ans)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
