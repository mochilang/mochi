# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def factorial(n) do
    try do
      result = 1
      i = 2
      while_fun = fn while_fun, i, result ->
        if i <= n do
          result = result * i
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {_, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def digit_sum(n) do
    try do
      total = 0
      m = n
      while_fun_2 = fn while_fun_2, m, total ->
        if m > 0 do
          total = total + (rem(m, 10))
          m = div(m, 10)
          while_fun_2.(while_fun_2, m, total)
        else
          {m, total}
        end
      end
      {m, total} = try do
          while_fun_2.(while_fun_2, m, total)
        catch
          {:break, {m, total}} -> {m, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def solution(num) do
    try do
      f = factorial(num)
      throw {:return, digit_sum(f)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(solution(100)))
      IO.puts(Kernel.inspect(solution(50)))
      IO.puts(Kernel.inspect(solution(10)))
      IO.puts(Kernel.inspect(solution(5)))
      IO.puts(Kernel.inspect(solution(3)))
      IO.puts(Kernel.inspect(solution(2)))
      IO.puts(Kernel.inspect(solution(1)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
