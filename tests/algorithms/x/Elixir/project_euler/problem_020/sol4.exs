# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _input() do
    case IO.gets("") do
      nil -> ""
      :eof -> ""
      line -> String.trim(line)
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def factorial_digit_sum(num) do
    try do
      factorial = 1
      i = 1
      while_fun = fn while_fun, factorial, i ->
        if i <= num do
          factorial = factorial * i
          i = i + 1
          while_fun.(while_fun, factorial, i)
        else
          {factorial, i}
        end
      end
      {factorial, _} = try do
          while_fun.(while_fun, factorial, i)
        catch
          {:break, {factorial, _}} -> {factorial, 0}
        end

      s = Kernel.to_string(factorial)
      result = 0
      j = 0
      while_fun_2 = fn while_fun_2, j, result ->
        if j < _len(s) do
          result = result + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(String.at(s, j)))
          j = j + 1
          while_fun_2.(while_fun_2, j, result)
        else
          {j, result}
        end
      end
      {_, result} = try do
          while_fun_2.(while_fun_2, j, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts("Enter the Number: ")
      n = String.to_integer(_input())
      IO.puts(Kernel.inspect(factorial_digit_sum(n)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
