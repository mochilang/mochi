# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def factorial(num) do
    try do
      res = 1
      i = 2
      while_fun = fn while_fun, i, res ->
        if i <= num do
          res = res * i
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def split_and_add(number) do
    try do
      sum = 0
      n = number
      while_fun_2 = fn while_fun_2, n, sum ->
        if n > 0 do
          last = rem(n, 10)
          sum = sum + last
          n = div(n, 10)
          while_fun_2.(while_fun_2, n, sum)
        else
          {n, sum}
        end
      end
      {n, sum} = try do
          while_fun_2.(while_fun_2, n, sum)
        catch
          {:break, {n, sum}} -> {n, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def solution(num) do
    try do
      nfact = factorial(num)
      throw {:return, split_and_add(nfact)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(100)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
