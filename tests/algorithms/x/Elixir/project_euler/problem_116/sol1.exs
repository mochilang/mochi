# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(length) do
    try do
      ways = []
      i = 0
      while_fun = fn while_fun, i, ways ->
        if i <= length do
          row = []
          row = (row ++ [0])
          row = (row ++ [0])
          row = (row ++ [0])
          ways = (ways ++ [row])
          i = i + 1
          while_fun.(while_fun, i, ways)
        else
          {i, ways}
        end
      end
      {_, ways} = try do
          while_fun.(while_fun, i, ways)
        catch
          {:break, {_, ways}} -> {0, ways}
        end

      row_length = 0
      while_fun_2 = fn while_fun_2, row_length, ways ->
        if row_length <= length do
          tile_length = 2
          while_fun_3 = fn while_fun_3, tile_length, ways ->
            if tile_length <= 4 do
              tile_start = 0
              while_fun_4 = fn while_fun_4, tile_start, ways ->
                if tile_start <= row_length - tile_length do
                  remaining = row_length - tile_start - tile_length
                  ways = List.replace_at(ways, row_length, List.replace_at(Enum.at(ways, row_length), tile_length - 2, Enum.at(Enum.at(ways, row_length, []), tile_length - 2, 0) + Enum.at(Enum.at(ways, remaining, []), tile_length - 2, 0) + 1))
                  tile_start = tile_start + 1
                  while_fun_4.(while_fun_4, tile_start, ways)
                else
                  {tile_start, ways}
                end
              end
              {tile_start, ways} = try do
                  while_fun_4.(while_fun_4, tile_start, ways)
                catch
                  {:break, {tile_start, ways}} -> {tile_start, ways}
                end

              tile_length = tile_length + 1
              while_fun_3.(while_fun_3, tile_length, ways)
            else
              {tile_length, ways}
            end
          end
          {tile_length, ways} = try do
              while_fun_3.(while_fun_3, tile_length, ways)
            catch
              {:break, {tile_length, ways}} -> {tile_length, ways}
            end

          row_length = row_length + 1
          while_fun_2.(while_fun_2, row_length, ways)
        else
          {row_length, ways}
        end
      end
      {row_length, ways} = try do
          while_fun_2.(while_fun_2, row_length, ways)
        catch
          {:break, {row_length, ways}} -> {row_length, ways}
        end

      total = 0
      j = 0
      while_fun_5 = fn while_fun_5, j, total ->
        if j < 3 do
          total = total + Enum.at(Enum.at(ways, length, []), j, 0)
          j = j + 1
          while_fun_5.(while_fun_5, j, total)
        else
          {j, total}
        end
      end
      {_, total} = try do
          while_fun_5.(while_fun_5, j, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(5)))
    IO.puts(Kernel.inspect(solution(50)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
