# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(n) do
    try do
      a = 0
      b = 1
      total = 0
      while_fun = fn while_fun, a, b, total ->
        if b <= n do
          total = if rem(b, 2) == 0 do
            total = total + b
            total
          else
            total
          end
          next_val = a + b
          a = b
          b = next_val
          while_fun.(while_fun, a, b, total)
        else
          {a, b, total}
        end
      end
      {a, b, total} = try do
          while_fun.(while_fun, a, b, total)
        catch
          {:break, {a, b, total}} -> {a, b, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(10)))
    IO.puts(Kernel.inspect(solution(15)))
    IO.puts(Kernel.inspect(solution(2)))
    IO.puts(Kernel.inspect(solution(1)))
    IO.puts(Kernel.inspect(solution(34)))
    IO.puts(Kernel.inspect(solution(4000000)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
