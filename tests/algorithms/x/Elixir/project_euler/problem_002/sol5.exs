# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def solution(n) do
    try do
      a = 0
      b = 1
      total = 0
      while_fun = fn while_fun, a, b, total ->
        if b <= n do
          {total} = if rem(b, 2) == 0 do
            total = total + b
            {total}
          else
            {total}
          end
          next_val = a + b
          a = b
          b = next_val
          while_fun.(while_fun, a, b, total)
        else
          {a, b, total}
        end
      end
      {a, b, total} = try do
          while_fun.(while_fun, a, b, total)
        catch
          {:break, {a, b, total}} -> {a, b, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution(10)))
    IO.puts(Kernel.inspect(solution(15)))
    IO.puts(Kernel.inspect(solution(2)))
    IO.puts(Kernel.inspect(solution(1)))
    IO.puts(Kernel.inspect(solution(34)))
    IO.puts(Kernel.inspect(solution(4000000)))
  end
end
Main.main()
