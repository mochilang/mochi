# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def solution(n) do
    try do
      total = 0
      num = 0
      while_fun = fn while_fun, num, total ->
        if true do
          num = num + 3
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 2
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 1
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 3
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 1
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 2
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 3
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          while_fun.(while_fun, num, total)
        else
          {num, total}
        end
      end
      {num, total} = try do
          while_fun.(while_fun, num, total)
        catch
          {:break, {num, total}} -> {num, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution(1000)))
  end
end
Main.main()
