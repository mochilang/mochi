# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(n) do
    try do
      total = 0
      num = 0
      while_fun = fn while_fun, num, total ->
        if true do
          num = num + 3
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 2
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 1
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 3
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 1
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 2
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          num = num + 3
          if num >= n do
            throw {:break, {num, total}}
          end
          total = total + num
          while_fun.(while_fun, num, total)
        else
          {num, total}
        end
      end
      {num, total} = try do
          while_fun.(while_fun, num, total)
        catch
          {:break, {num, total}} -> {num, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(1000)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
