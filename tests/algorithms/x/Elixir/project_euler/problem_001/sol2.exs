# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def sum_of_multiples(n) do
    try do
      total = 0
      terms = div((n - 1), 3)
      total = total + div((terms * (6 + (terms - 1) * 3)), 2)
      terms = div((n - 1), 5)
      total = total + div((terms * (10 + (terms - 1) * 5)), 2)
      terms = div((n - 1), 15)
      total = total - div((terms * (30 + (terms - 1) * 15)), 2)
      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(("solution() = " <> Kernel.inspect(sum_of_multiples(1000))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
