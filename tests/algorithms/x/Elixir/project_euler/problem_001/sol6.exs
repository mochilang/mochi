# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def solution(n) do
    try do
      a = 3
      result = 0
      while_fun = fn while_fun, a, result ->
        if a < n do
          {result} = if rem(a, 3) == 0 || rem(a, 5) == 0 do
            result = result + a
            {result}
          else
            {result} = if rem(a, 15) == 0 do
              result = result - a
              {result}
            else
              {result}
            end
            {result}
          end
          a = a + 1
          while_fun.(while_fun, a, result)
        else
          {a, result}
        end
      end
      {a, result} = try do
          while_fun.(while_fun, a, result)
        catch
          {:break, {a, result}} -> {a, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(("solution() = " <> Kernel.inspect(solution(1000))))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
