# Code generated by Mochi transpiler 2025-08-12 10:04 +0700
defmodule Main do
  def solution(n) do
    try do
      total = 0
      e = 3
      while_fun = fn while_fun, e, total ->
        if e < n do
          {total} = if rem(e, 3) == 0 || rem(e, 5) == 0 do
            total = total + e
            {total}
          else
            {total}
          end
          e = e + 1
          while_fun.(while_fun, e, total)
        else
          {e, total}
        end
      end
      {e, total} = try do
          while_fun.(while_fun, e, total)
        catch
          {:break, {e, total}} -> {e, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution(3)))
    IO.puts(Kernel.inspect(solution(4)))
    IO.puts(Kernel.inspect(solution(10)))
    IO.puts(Kernel.inspect(solution(600)))
    IO.puts(Kernel.inspect(solution(-7)))
    IO.puts(Kernel.inspect(solution(1000)))
  end
end
Main.main()
