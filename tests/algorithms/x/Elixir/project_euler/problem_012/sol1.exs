# Code generated by Mochi transpiler 2025-08-23 14:49 +0700
defmodule Main do
  @data_dir nil
  def count_divisors(n) do
    try do
      m = n
      n_divisors = 1
      i = 2
      while_fun = fn while_fun, i, m, n_divisors ->
        if i * i <= m do
          multiplicity = 0
          while_fun_2 = fn while_fun_2, m, multiplicity ->
            if rem(m, i) == 0 do
              m = div(m, i)
              multiplicity = multiplicity + 1
              while_fun_2.(while_fun_2, m, multiplicity)
            else
              {m, multiplicity}
            end
          end
          {_, multiplicity} = try do
              while_fun_2.(while_fun_2, m, multiplicity)
            catch
              {:break, {_, multiplicity}} -> {0, multiplicity}
            end

          n_divisors = n_divisors * (multiplicity + 1)
          i = i + 1
          while_fun.(while_fun, i, m, n_divisors)
        else
          {i, m, n_divisors}
        end
      end
      {_, _, n_divisors} = try do
          while_fun.(while_fun, i, m, n_divisors)
        catch
          {:break, {_, _, n_divisors}} -> {0, 0, n_divisors}
        end

      n_divisors = if m > 1 do
        n_divisors = n_divisors * 2
        n_divisors
      else
        n_divisors
      end
      throw {:return, n_divisors}
    catch
      {:return, val} -> val
    end
  end
  def solution() do
    try do
      t_num = 1
      i = 1
      while_fun_3 = fn while_fun_3, i, t_num ->
        if true do
          i = i + 1
          t_num = t_num + i
          if count_divisors(t_num) > 500 do
            throw {:break, {i, t_num}}
          end
          while_fun_3.(while_fun_3, i, t_num)
        else
          {i, t_num}
        end
      end
      {_, t_num} = try do
          while_fun_3.(while_fun_3, i, t_num)
        catch
          {:break, {_, t_num}} -> {0, t_num}
        end

      throw {:return, t_num}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution()))
  end
end
Main.main()
