# Code generated by Mochi transpiler 2025-08-23 14:49 +0700
defmodule Main do
  @data_dir nil
  def countDivisors(n) do
    try do
      num = n
      total = 1
      i = 2
      while_fun = fn while_fun, i, num, total ->
        if i * i <= num do
          multiplicity = 0
          while_fun_2 = fn while_fun_2, multiplicity, num ->
            if rem(num, i) == 0 do
              num = div(num, i)
              multiplicity = multiplicity + 1
              while_fun_2.(while_fun_2, multiplicity, num)
            else
              {multiplicity, num}
            end
          end
          {multiplicity, num} = try do
              while_fun_2.(while_fun_2, multiplicity, num)
            catch
              {:break, {multiplicity, num}} -> {multiplicity, num}
            end

          total = total * (multiplicity + 1)
          i = i + 1
          while_fun.(while_fun, i, num, total)
        else
          {i, num, total}
        end
      end
      {_, num, total} = try do
          while_fun.(while_fun, i, num, total)
        catch
          {:break, {_, num, total}} -> {0, num, total}
        end

      total = if num > 1 do
        total = total * 2
        total
      else
        total
      end
      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def solution() do
    try do
      n = 1
      tri = 1
      while_fun_3 = fn while_fun_3, n, tri ->
        if countDivisors(tri) <= 500 do
          n = n + 1
          tri = tri + n
          while_fun_3.(while_fun_3, n, tri)
        else
          {n, tri}
        end
      end
      {_, tri} = try do
          while_fun_3.(while_fun_3, n, tri)
        catch
          {:break, {_, tri}} -> {0, tri}
        end

      throw {:return, tri}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution()))
  end
end
Main.main()
