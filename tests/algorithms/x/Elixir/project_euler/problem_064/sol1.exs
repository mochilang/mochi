# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _input() do
    case IO.gets("") do
      nil -> ""
      :eof -> ""
      line -> String.trim(line)
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def intSqrt(n) do
    try do
      if n == 0 do
        throw {:return, 0}
      end
      x = n
      y = div((x + 1), 2)
      while_fun = fn while_fun, x, y ->
        if y < x do
          x = y
          y = div((x + div(n, x)), 2)
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def continuousFractionPeriod(n) do
    try do
      m = 0
      d = 1
      a0 = intSqrt(n)
      a = a0
      period = 0
      while_fun_2 = fn while_fun_2, a, d, m, period ->
        if a != 2 * a0 do
          m = d * a - m
          d = div((n - m * m), d)
          a = div((a0 + m), d)
          period = period + 1
          while_fun_2.(while_fun_2, a, d, m, period)
        else
          {a, d, m, period}
        end
      end
      {a, d, _, period} = try do
          while_fun_2.(while_fun_2, a, d, m, period)
        catch
          {:break, {a, d, _, period}} -> {a, d, 0, period}
        end

      throw {:return, period}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      count = 0
      {count} = Enum.reduce((2..((n + 1) - 1)//1), {count}, fn i, {count} ->
        r = intSqrt(i)
        count = if r * r != i do
          p = continuousFractionPeriod(i)
          count = if rem(p, 2) == 1 do
            count = count + 1
            count
          else
            count
          end
          count
        else
          count
        end
        {count}
      end)
      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      nStr = _input()
      n = String.to_integer(nStr)
      IO.puts(Kernel.inspect(solution(n)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
