# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(limit) do
    try do
      phi = []
      i = 0
      while_fun = fn while_fun, i, phi ->
        if i <= limit do
          phi = (phi ++ [i])
          i = i + 1
          while_fun.(while_fun, i, phi)
        else
          {i, phi}
        end
      end
      {_, phi} = try do
          while_fun.(while_fun, i, phi)
        catch
          {:break, {_, phi}} -> {0, phi}
        end

      n = 2
      while_fun_2 = fn while_fun_2, n, phi ->
        if n <= limit do
          phi = if Enum.at(phi, n, []) == n do
            k = n
            while_fun_3 = fn while_fun_3, k, phi ->
              if k <= limit do
                phi = List.replace_at(phi, k, Enum.at(phi, k, []) - div(Enum.at(phi, k, []), n))
                k = k + n
                while_fun_3.(while_fun_3, k, phi)
              else
                {k, phi}
              end
            end
            {_, phi} = try do
                while_fun_3.(while_fun_3, k, phi)
              catch
                {:break, {_, phi}} -> {0, phi}
              end

            phi
          else
            phi
          end
          n = n + 1
          while_fun_2.(while_fun_2, n, phi)
        else
          {n, phi}
        end
      end
      {_, phi} = try do
          while_fun_2.(while_fun_2, n, phi)
        catch
          {:break, {_, phi}} -> {0, phi}
        end

      total = 0
      m = 2
      while_fun_4 = fn while_fun_4, m, total ->
        if m <= limit do
          total = total + Enum.at(phi, m, [])
          m = m + 1
          while_fun_4.(while_fun_4, m, total)
        else
          {m, total}
        end
      end
      {_, total} = try do
          while_fun_4.(while_fun_4, m, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(solution(8)))
      IO.puts(Kernel.inspect(solution(1000)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
