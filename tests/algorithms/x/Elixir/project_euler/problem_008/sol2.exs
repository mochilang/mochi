# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def solution(n) do
    try do
      max_product = 0
      i = 0
      while_fun = fn while_fun, i, max_product ->
        if i <= _len(n) - 13 do
          product = 1
          j = 0
          while_fun_2 = fn while_fun_2, j, product ->
            if j < 13 do
              product = product * ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(String.at(n, i + j)))
              j = j + 1
              while_fun_2.(while_fun_2, j, product)
            else
              {j, product}
            end
          end
          {_, product} = try do
              while_fun_2.(while_fun_2, j, product)
            catch
              {:break, {_, product}} -> {0, product}
            end

          max_product = if product > max_product do
            max_product = product
            max_product
          else
            max_product
          end
          i = i + 1
          while_fun.(while_fun, i, max_product)
        else
          {i, max_product}
        end
      end
      {_, max_product} = try do
          while_fun.(while_fun, i, max_product)
        catch
          {:break, {_, max_product}} -> {0, max_product}
        end

      throw {:return, max_product}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:n, ((((((((((((((((((("73167176531330624919225119674426574742355349194934" <> "96983520312774506326239578318016984801869478851843") <> "85861560789112949495459501737958331952853208805511") <> "12540698747158523863050715693290963295227443043557") <> "66896648950445244523161731856403098711121722383113") <> "62229893423380308135336276614282806444486645238749") <> "30358907296290491560440772390713810515859307960866") <> "70172427121883998797908792274921901699720888093776") <> "65727333001053367881220235421809751254540594752243") <> "52584907711670556013604839586446706324415722155397") <> "53697817977846174064955149290862569321978468622482") <> "83972241375657056057490261407972968652414535100474") <> "82166370484403199890008895243450658541227588666881") <> "16427171479924442928230863465674813919123162824586") <> "17866458359124566529476545682848912883142607690042") <> "24219022671055626321111109370544217506941658960408") <> "07198403850962455444362981230987879927244284909188") <> "84580156166097919133875499200524063689912560717606") <> "05886116467109405077541002256983155200055935729725") <> "71636269561882670428252483600823257530420752963450"))
    IO.puts(Kernel.inspect(solution("13978431290823798458352374")))
    IO.puts(Kernel.inspect(solution("13978431295823798458352374")))
    IO.puts(Kernel.inspect(solution("1397843129582379841238352374")))
    IO.puts(Kernel.inspect(solution(Process.get(:n))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
