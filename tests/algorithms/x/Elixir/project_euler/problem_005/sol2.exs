# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          t = y
          y = rem(x, y)
          x = t
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def lcm(x, y) do
    try do
      throw {:return, div((x * y), gcd(x, y))}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      g = 1
      i = 1
      while_fun_2 = fn while_fun_2, g, i ->
        if i <= n do
          g = lcm(g, i)
          i = i + 1
          while_fun_2.(while_fun_2, g, i)
        else
          {g, i}
        end
      end
      {g, i} = try do
          while_fun_2.(while_fun_2, g, i)
        catch
          {:break, {g, i}} -> {g, i}
        end

      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(solution(20)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
