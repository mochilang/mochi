# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          t = rem(x, y)
          x = y
          y = t
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      if x < 0 do
        throw {:return, -x}
      end
      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def lcm(a, b) do
    try do
      throw {:return, div(a, gcd(a, b)) * b}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      if n <= 0 do
        raise("Parameter n must be greater than or equal to one.")
      end
      result = 1
      i = 2
      while_fun_2 = fn while_fun_2, i, result ->
        if i <= n do
          result = lcm(result, i)
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {_, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(10)))
    IO.puts(Kernel.inspect(solution(15)))
    IO.puts(Kernel.inspect(solution(22)))
    IO.puts(Kernel.inspect(solution(20)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
