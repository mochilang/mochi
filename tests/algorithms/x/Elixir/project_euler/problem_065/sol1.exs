# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def sum_digits(num) do
    try do
      n = num
      digit_sum = 0
      while_fun = fn while_fun, digit_sum, n ->
        if n > 0 do
          digit_sum = digit_sum + rem(n, 10)
          n = div(n, 10)
          while_fun.(while_fun, digit_sum, n)
        else
          {digit_sum, n}
        end
      end
      {digit_sum, _} = try do
          while_fun.(while_fun, digit_sum, n)
        catch
          {:break, {digit_sum, _}} -> {digit_sum, 0}
        end

      throw {:return, digit_sum}
    catch
      {:return, val} -> val
    end
  end
  def solution(max_n) do
    try do
      pre_numerator = 1
      cur_numerator = 2
      i = 2
      while_fun_2 = fn while_fun_2, cur_numerator, i, pre_numerator ->
        if i <= max_n do
          temp = pre_numerator
          e_cont = 1
          e_cont = if rem(i, 3) == 0 do
            e_cont = div(2 * i, 3)
            e_cont
          else
            e_cont
          end
          pre_numerator = cur_numerator
          cur_numerator = e_cont * pre_numerator + temp
          i = i + 1
          while_fun_2.(while_fun_2, cur_numerator, i, pre_numerator)
        else
          {cur_numerator, i, pre_numerator}
        end
      end
      {cur_numerator, _, pre_numerator} = try do
          while_fun_2.(while_fun_2, cur_numerator, i, pre_numerator)
        catch
          {:break, {cur_numerator, _, pre_numerator}} -> {cur_numerator, 0, pre_numerator}
        end

      throw {:return, sum_digits(cur_numerator)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(9)))
    IO.puts(Kernel.inspect(solution(10)))
    IO.puts(Kernel.inspect(solution(50)))
    IO.puts(Kernel.inspect(solution(100)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
