# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(numerator, denominator, limit) do
    try do
      maxNumerator = 0
      maxDenominator = 1
      currentDenominator = 1
      while_fun = fn while_fun, currentDenominator, maxDenominator, maxNumerator ->
        if currentDenominator <= limit do
          currentNumerator = div(currentDenominator * numerator, denominator)
          currentNumerator = if rem(currentDenominator, denominator) == 0 do
            currentNumerator = currentNumerator - 1
            currentNumerator
          else
            currentNumerator
          end
          {maxDenominator, maxNumerator} = if currentNumerator * maxDenominator > currentDenominator * maxNumerator do
            maxNumerator = currentNumerator
            maxDenominator = currentDenominator
            {maxDenominator, maxNumerator}
          else
            {maxDenominator, maxNumerator}
          end
          currentDenominator = currentDenominator + 1
          while_fun.(while_fun, currentDenominator, maxDenominator, maxNumerator)
        else
          {currentDenominator, maxDenominator, maxNumerator}
        end
      end
      {currentDenominator, maxDenominator, maxNumerator} = try do
          while_fun.(while_fun, currentDenominator, maxDenominator, maxNumerator)
        catch
          {:break, {currentDenominator, maxDenominator, maxNumerator}} -> {currentDenominator, maxDenominator, maxNumerator}
        end

      throw {:return, maxNumerator}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(3, 7, 1000000)))
    IO.puts(Kernel.inspect(solution(3, 7, 8)))
    IO.puts(Kernel.inspect(solution(6, 7, 60)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
