# Code generated by Mochi transpiler 2025-08-23 14:49 +0700
defmodule Main do
  @data_dir nil
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def solution(power) do
    try do
      digits = []
      digits = (digits ++ [1])
      i = 0
      while_fun = fn while_fun, digits, i ->
        if i < power do
          carry = 0
          j = 0
          while_fun_2 = fn while_fun_2, carry, digits, j ->
            if j < _len(digits) do
              v = Enum.at(digits, j, []) * 2 + carry
              digits = List.replace_at(digits, j, rem(v, 10))
              carry = div(v, 10)
              j = j + 1
              while_fun_2.(while_fun_2, carry, digits, j)
            else
              {carry, digits, j}
            end
          end
          {carry, digits, _} = try do
              while_fun_2.(while_fun_2, carry, digits, j)
            catch
              {:break, {carry, digits, _}} -> {carry, digits, 0}
            end

          digits = if carry > 0 do
            digits = (digits ++ [carry])
            digits
          else
            digits
          end
          i = i + 1
          while_fun.(while_fun, digits, i)
        else
          {digits, i}
        end
      end
      {digits, _} = try do
          while_fun.(while_fun, digits, i)
        catch
          {:break, {digits, _}} -> {digits, 0}
        end

      sum = 0
      k = 0
      while_fun_3 = fn while_fun_3, k, sum ->
        if k < _len(digits) do
          sum = sum + Enum.at(digits, k, [])
          k = k + 1
          while_fun_3.(while_fun_3, k, sum)
        else
          {k, sum}
        end
      end
      {_, sum} = try do
          while_fun_3.(while_fun_3, k, sum)
        catch
          {:break, {_, sum}} -> {0, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution(1000)))
    IO.puts(Kernel.inspect(solution(50)))
    IO.puts(Kernel.inspect(solution(20)))
    IO.puts(Kernel.inspect(solution(15)))
  end
end
Main.main()
