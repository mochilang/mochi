# Code generated by Mochi transpiler 2025-08-23 14:49 +0700
defmodule Main do
  @data_dir nil
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def power_of_two(exp) do
    try do
      result = 1
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < exp do
          result = result * 2
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {_, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def solution(power) do
    try do
      num = power_of_two(power)
      string_num = Kernel.inspect(num)
      sum = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, sum ->
        if i < _len(string_num) do
          sum = sum + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(String.at(string_num, i)))
          i = i + 1
          while_fun_2.(while_fun_2, i, sum)
        else
          {i, sum}
        end
      end
      {_, sum} = try do
          while_fun_2.(while_fun_2, i, sum)
        catch
          {:break, {_, sum}} -> {0, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution(1000)))
    IO.puts(Kernel.inspect(solution(50)))
    IO.puts(Kernel.inspect(solution(20)))
    IO.puts(Kernel.inspect(solution(15)))
  end
end
Main.main()
