# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def isqrt(n) do
    try do
      r = 0
      while_fun = fn while_fun, r ->
        if (r + 1) * (r + 1) <= n do
          r = r + 1
          while_fun.(while_fun, r)
        else
          r
        end
      end
      r = try do
          while_fun.(while_fun, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      sieve = []
      i = 0
      while_fun_2 = fn while_fun_2, i, sieve ->
        if i <= n do
          sieve = (sieve ++ [false])
          i = i + 1
          while_fun_2.(while_fun_2, i, sieve)
        else
          {i, sieve}
        end
      end
      {_, sieve} = try do
          while_fun_2.(while_fun_2, i, sieve)
        catch
          {:break, {_, sieve}} -> {0, sieve}
        end

      sieve = List.replace_at(sieve, 0, true)
      sieve = List.replace_at(sieve, 1, true)
      limit = isqrt(n)
      p = 2
      while_fun_3 = fn while_fun_3, p, sieve ->
        if p <= limit do
          sieve = if !Enum.at(sieve, p, []) do
            j = p * p
            while_fun_4 = fn while_fun_4, j, sieve ->
              if j <= n do
                sieve = List.replace_at(sieve, j, true)
                j = j + p
                while_fun_4.(while_fun_4, j, sieve)
              else
                {j, sieve}
              end
            end
            {_, sieve} = try do
                while_fun_4.(while_fun_4, j, sieve)
              catch
                {:break, {_, sieve}} -> {0, sieve}
              end

            sieve
          else
            sieve
          end
          p = p + 1
          while_fun_3.(while_fun_3, p, sieve)
        else
          {p, sieve}
        end
      end
      {p, sieve} = try do
          while_fun_3.(while_fun_3, p, sieve)
        catch
          {:break, {p, sieve}} -> {p, sieve}
        end

      sum = 0
      k = 2
      while_fun_5 = fn while_fun_5, k, sum ->
        if k < n do
          sum = if !Enum.at(sieve, k, []) do
            sum = sum + k
            sum
          else
            sum
          end
          k = k + 1
          while_fun_5.(while_fun_5, k, sum)
        else
          {k, sum}
        end
      end
      {k, sum} = try do
          while_fun_5.(while_fun_5, k, sum)
        catch
          {:break, {k, sum}} -> {k, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(20000)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
