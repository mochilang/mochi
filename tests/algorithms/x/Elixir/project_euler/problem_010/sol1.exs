# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def is_prime(number) do
    try do
      if number < 2 do
        throw {:return, false}
      end
      if number < 4 do
        throw {:return, true}
      end
      if rem(number, 2) == 0 || rem(number, 3) == 0 do
        throw {:return, false}
      end
      i = 5
      while_fun = fn while_fun, i ->
        if i * i <= number do
          if rem(number, i) == 0 || rem(number, (i + 2)) == 0 do
            throw {:return, false}
          end
          i = i + 6
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      if n <= 2 do
        throw {:return, 0}
      end
      total = 2
      num = 3
      while_fun_2 = fn while_fun_2, num, total ->
        if num < n do
          total = if is_prime(num) do
            total = total + num
            total
          else
            total
          end
          num = num + 2
          while_fun_2.(while_fun_2, num, total)
        else
          {num, total}
        end
      end
      {num, total} = try do
          while_fun_2.(while_fun_2, num, total)
        catch
          {:break, {num, total}} -> {num, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:result, solution(1000))
    IO.puts(("solution() = " <> Kernel.to_string(Process.get(:result))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
