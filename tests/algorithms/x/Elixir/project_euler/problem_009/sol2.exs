# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def solution(n) do
    try do
      product = -1
      candidate = 0
      a = 1
      while_fun = fn while_fun, a, candidate, product ->
        if a < div(n, 3) do
          b = div((n * n - 2 * a * n), (2 * n - 2 * a))
          c = n - a - b
          {candidate, product} = if c * c == (a * a + b * b) do
            candidate = a * b * c
            {product} = if candidate > product do
              product = candidate
              {product}
            else
              {product}
            end
            {candidate, product}
          else
            {candidate, product}
          end
          a = a + 1
          while_fun.(while_fun, a, candidate, product)
        else
          {a, candidate, product}
        end
      end
      {a, candidate, product} = try do
          while_fun.(while_fun, a, candidate, product)
        catch
          {:break, {a, candidate, product}} -> {a, candidate, product}
        end

      throw {:return, product}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(("solution() = " <> Kernel.inspect(solution(1000))))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
