# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution() do
    try do
      a = 1
      while_fun = fn while_fun, a ->
        if a < 999 do
          b = a
          while_fun_2 = fn while_fun_2, b ->
            if b < 999 do
              c = 1000 - a - b
              if a * a + b * b == c * c do
                throw {:return, a * b * c}
              end
              b = b + 1
              while_fun_2.(while_fun_2, b)
            else
              b
            end
          end
          b = try do
              while_fun_2.(while_fun_2, b)
            catch
              {:break, {b}} -> b
            end

          a = a + 1
          while_fun.(while_fun, a)
        else
          a
        end
      end
      a = try do
          while_fun.(while_fun, a)
        catch
          {:break, {a}} -> a
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution()))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
