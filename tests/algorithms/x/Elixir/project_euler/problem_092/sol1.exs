# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def next_number(number) do
    try do
      n = number
      total = 0
      while_fun = fn while_fun, n, total ->
        if n > 0 do
          d = rem(n, 10)
          total = total + d * d
          n = div(n, 10)
          while_fun.(while_fun, n, total)
        else
          {n, total}
        end
      end
      {_, total} = try do
          while_fun.(while_fun, n, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def chain(number) do
    try do
      n = number
      while_fun_2 = fn while_fun_2, n ->
        if n != 1 && n != 89 do
          n = next_number(n)
          while_fun_2.(while_fun_2, n)
        else
          n
        end
      end
      _ = try do
          while_fun_2.(while_fun_2, n)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, n == 1}
    catch
      {:return, val} -> val
    end
  end
  def solution(limit) do
    try do
      count = 0
      i = 1
      while_fun_3 = fn while_fun_3, count, i ->
        if i < limit do
          count = if !chain(i) do
            count = count + 1
            count
          else
            count
          end
          i = i + 1
          while_fun_3.(while_fun_3, count, i)
        else
          {count, i}
        end
      end
      {count, _} = try do
          while_fun_3.(while_fun_3, count, i)
        catch
          {:break, {count, _}} -> {count, 0}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(next_number(44)))
    IO.puts(Kernel.inspect(next_number(10)))
    IO.puts(Kernel.inspect(next_number(32)))
    IO.puts(Kernel.inspect(chain(10)))
    IO.puts(Kernel.inspect(chain(58)))
    IO.puts(Kernel.inspect(chain(1)))
    IO.puts(Kernel.inspect(solution(100)))
    IO.puts(Kernel.inspect(solution(1000)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
