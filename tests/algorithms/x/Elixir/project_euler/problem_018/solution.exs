# Code generated by Mochi transpiler 2025-08-16 12:46 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def solution() do
    try do
      triangle = [[75], [95, 64], [17, 47, 82], [18, 35, 87, 10], [20, 4, 82, 47, 65], [19, 1, 23, 75, 3, 34], [88, 2, 77, 73, 7, 63, 67], [99, 65, 4, 28, 6, 16, 70, 92], [41, 41, 26, 56, 83, 40, 80, 70, 33], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]
      i = 1
      while_fun = fn while_fun, i, triangle ->
        if i < _len(triangle) do
          j = 0
          while_fun_2 = fn while_fun_2, j, triangle ->
            if j < _len(Enum.at(triangle, i, [])) do
              prev_row = Enum.at(triangle, i - 1, [])
              number1 = (if j != _len(prev_row), do: Enum.at(prev_row, j, []), else: 0)
              number2 = (if j > 0, do: Enum.at(prev_row, j - 1, []), else: 0)
              max_val = (if number1 > number2, do: number1, else: number2)
              triangle = List.replace_at(triangle, i, List.replace_at(Enum.at(triangle, i), j, Enum.at(Enum.at(triangle, i, []), j, 0) + max_val))
              j = j + 1
              while_fun_2.(while_fun_2, j, triangle)
            else
              {j, triangle}
            end
          end
          {_, triangle} = try do
              while_fun_2.(while_fun_2, j, triangle)
            catch
              {:break, {_, triangle}} -> {0, triangle}
            end

          i = i + 1
          while_fun.(while_fun, i, triangle)
        else
          {i, triangle}
        end
      end
      {_, triangle} = try do
          while_fun.(while_fun, i, triangle)
        catch
          {:break, {_, triangle}} -> {0, triangle}
        end

      last = Enum.at(triangle, _len(triangle) - 1, [])
      k = 0
      best = 0
      while_fun_3 = fn while_fun_3, best, k ->
        if k < _len(last) do
          best = if Enum.at(last, k, []) > best do
            best = Enum.at(last, k, [])
            best
          else
            best
          end
          k = k + 1
          while_fun_3.(while_fun_3, best, k)
        else
          {best, k}
        end
      end
      {best, _} = try do
          while_fun_3.(while_fun_3, best, k)
        catch
          {:break, {best, _}} -> {best, 0}
        end

      throw {:return, best}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution()))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
