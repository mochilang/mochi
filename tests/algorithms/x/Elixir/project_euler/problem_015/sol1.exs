# Code generated by Mochi transpiler 2025-08-23 14:49 +0700
defmodule Main do
  @data_dir nil
  def factorial(n) do
    try do
      result = 1
      i = 2
      while_fun = fn while_fun, i, result ->
        if i <= n do
          result = result * i
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {_, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {_, result}} -> {0, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      total = 2 * n
      k = div(total, 2)
      throw {:return, div(factorial(total), (factorial(k) * factorial(total - k)))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(solution(25)))
    IO.puts(Kernel.inspect(solution(23)))
    IO.puts(Kernel.inspect(solution(20)))
    IO.puts(Kernel.inspect(solution(15)))
    IO.puts(Kernel.inspect(solution(1)))
  end
end
Main.main()
