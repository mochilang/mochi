# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def digit_factorial_sum(number) do
    try do
      if number < 0 do
        raise("Parameter number must be greater than or equal to 0")
      end
      if number == 0 do
        throw {:return, Enum.at(Process.get(:digit_factorial), 0, [])}
      end
      n = number
      total = 0
      while_fun = fn while_fun, n, total ->
        if n > 0 do
          digit = rem(n, 10)
          total = total + Enum.at(Process.get(:digit_factorial), digit, [])
          n = div(n, 10)
          while_fun.(while_fun, n, total)
        else
          {n, total}
        end
      end
      {_, total} = try do
          while_fun.(while_fun, n, total)
        catch
          {:break, {_, total}} -> {0, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def chain_len(n, limit) do
    try do
      seen = %{}
      length = 0
      cur = n
      while_fun_2 = fn while_fun_2, cur, length, seen ->
        if (Map.has_key?(seen, cur)) == false && length <= limit do
          seen = Map.put(seen, cur, true)
          length = length + 1
          cur = digit_factorial_sum(cur)
          while_fun_2.(while_fun_2, cur, length, seen)
        else
          {cur, length, seen}
        end
      end
      {cur, length, seen} = try do
          while_fun_2.(while_fun_2, cur, length, seen)
        catch
          {:break, {cur, length, seen}} -> {cur, length, seen}
        end

      throw {:return, length}
    catch
      {:return, val} -> val
    end
  end
  def solution(chain_length, number_limit) do
    try do
      if chain_length <= 0 || number_limit <= 0 do
        raise("Parameters chain_length and number_limit must be greater than 0")
      end
      count = 0
      start = 1
      while_fun_3 = fn while_fun_3, count, start ->
        if start < number_limit do
          count = if chain_len(start, chain_length) == chain_length do
            count = count + 1
            count
          else
            count
          end
          start = start + 1
          while_fun_3.(while_fun_3, count, start)
        else
          {count, start}
        end
      end
      {count, start} = try do
          while_fun_3.(while_fun_3, count, start)
        catch
          {:break, {count, start}} -> {count, start}
        end

      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:digit_factorial, [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(solution(60, 1000000)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
