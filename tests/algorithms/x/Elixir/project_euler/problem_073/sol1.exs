# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def gcd(a, b) do
    try do
      x = a
      y = b
      while_fun = fn while_fun, x, y ->
        if y != 0 do
          temp = rem(x, y)
          x = y
          y = temp
          while_fun.(while_fun, x, y)
        else
          {x, y}
        end
      end
      {x, y} = try do
          while_fun.(while_fun, x, y)
        catch
          {:break, {x, y}} -> {x, y}
        end

      throw {:return, x}
    catch
      {:return, val} -> val
    end
  end
  def solution(max_d) do
    try do
      fractions_number = 0
      d = 0
      while_fun_2 = fn while_fun_2, d, fractions_number ->
        if d <= max_d do
          n = div(d, 3) + 1
          half = div((d + 1), 2)
          while_fun_3 = fn while_fun_3, fractions_number, n ->
            if n < half do
              fractions_number = if gcd(n, d) == 1 do
                fractions_number = fractions_number + 1
                fractions_number
              else
                fractions_number
              end
              n = n + 1
              while_fun_3.(while_fun_3, fractions_number, n)
            else
              {fractions_number, n}
            end
          end
          {fractions_number, _} = try do
              while_fun_3.(while_fun_3, fractions_number, n)
            catch
              {:break, {fractions_number, _}} -> {fractions_number, 0}
            end

          d = d + 1
          while_fun_2.(while_fun_2, d, fractions_number)
        else
          {d, fractions_number}
        end
      end
      {d, fractions_number} = try do
          while_fun_2.(while_fun_2, d, fractions_number)
        catch
          {:break, {d, fractions_number}} -> {d, fractions_number}
        end

      throw {:return, fractions_number}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(solution(12000)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
