# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def solution(n) do
    try do
      i = 1
      sum = 0
      sum_of_squares = 0
      while_fun = fn while_fun, i, sum, sum_of_squares ->
        if i <= n do
          sum = sum + i
          sum_of_squares = sum_of_squares + i * i
          i = i + 1
          while_fun.(while_fun, i, sum, sum_of_squares)
        else
          {i, sum, sum_of_squares}
        end
      end
      {i, sum, sum_of_squares} = try do
          while_fun.(while_fun, i, sum, sum_of_squares)
        catch
          {:break, {i, sum, sum_of_squares}} -> {i, sum, sum_of_squares}
        end

      square_of_sum = sum * sum
      throw {:return, square_of_sum - sum_of_squares}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(("solution() = " <> Kernel.inspect(solution(100))))
  end
end
Main.main()
