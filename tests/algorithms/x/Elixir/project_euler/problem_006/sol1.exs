# Code generated by Mochi transpiler 2025-08-12 12:29 +0700
defmodule Main do
  def solution(n) do
    try do
      sum_of_squares = 0
      sum_of_ints = 0
      i = 1
      while_fun = fn while_fun, i, sum_of_ints, sum_of_squares ->
        if i <= n do
          sum_of_squares = sum_of_squares + i * i
          sum_of_ints = sum_of_ints + i
          i = i + 1
          while_fun.(while_fun, i, sum_of_ints, sum_of_squares)
        else
          {i, sum_of_ints, sum_of_squares}
        end
      end
      {i, sum_of_ints, sum_of_squares} = try do
          while_fun.(while_fun, i, sum_of_ints, sum_of_squares)
        catch
          {:break, {i, sum_of_ints, sum_of_squares}} -> {i, sum_of_ints, sum_of_squares}
        end

      throw {:return, sum_of_ints * sum_of_ints - sum_of_squares}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(solution(100)))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
