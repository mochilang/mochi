# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def solution(n) do
    try do
      sum_of_squares = 0
      sum_of_ints = 0
      i = 1
      while_fun = fn while_fun, i, sum_of_ints, sum_of_squares ->
        if i <= n do
          sum_of_squares = sum_of_squares + i * i
          sum_of_ints = sum_of_ints + i
          i = i + 1
          while_fun.(while_fun, i, sum_of_ints, sum_of_squares)
        else
          {i, sum_of_ints, sum_of_squares}
        end
      end
      {_, sum_of_ints, sum_of_squares} = try do
          while_fun.(while_fun, i, sum_of_ints, sum_of_squares)
        catch
          {:break, {_, sum_of_ints, sum_of_squares}} -> {0, sum_of_ints, sum_of_squares}
        end

      throw {:return, sum_of_ints * sum_of_ints - sum_of_squares}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(solution(100)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
