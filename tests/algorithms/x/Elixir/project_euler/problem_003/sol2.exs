# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def largest_prime_factor(n) do
    try do
      if n <= 0 do
        raise("Parameter n must be greater than or equal to one.")
      end
      num = n
      prime = 1
      i = 2
      while_fun = fn while_fun, i, num, prime ->
        if i * i <= num do
          while_fun_2 = fn while_fun_2, num, prime ->
            if rem(num, i) == 0 do
              prime = i
              num = div(num, i)
              while_fun_2.(while_fun_2, num, prime)
            else
              {num, prime}
            end
          end
          {num, prime} = try do
              while_fun_2.(while_fun_2, num, prime)
            catch
              {:break, {num, prime}} -> {num, prime}
            end

          i = i + 1
          while_fun.(while_fun, i, num, prime)
        else
          {i, num, prime}
        end
      end
      {_, num, prime} = try do
          while_fun.(while_fun, i, num, prime)
        catch
          {:break, {_, num, prime}} -> {0, num, prime}
        end

      prime = if num > 1 do
        prime = num
        prime
      else
        prime
      end
      throw {:return, prime}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(largest_prime_factor(600851475143)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
