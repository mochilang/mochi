# Code generated by Mochi transpiler 2025-08-22 14:19 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def is_prime(number) do
    try do
      if number > 1 && number < 4 do
        throw {:return, true}
      end
      if number < 2 || rem(number, 2) == 0 || rem(number, 3) == 0 do
        throw {:return, false}
      end
      i = 5
      while_fun = fn while_fun, i ->
        if i * i <= number do
          if rem(number, i) == 0 || rem(number, (i + 2)) == 0 do
            throw {:return, false}
          end
          i = i + 6
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def solution(n) do
    try do
      num = n
      if num <= 0 do
        IO.puts("Parameter n must be greater than or equal to one.")
        throw {:return, 0}
      end
      if is_prime(num) do
        throw {:return, num}
      end
      while_fun_2 = fn while_fun_2, num ->
        if rem(num, 2) == 0 do
          num = div(num, 2)
          if is_prime(num) do
            throw {:return, num}
          end
          while_fun_2.(while_fun_2, num)
        else
          num
        end
      end
      num = try do
          while_fun_2.(while_fun_2, num)
        catch
          {:break, {num}} -> num
        end

      max_number = 1
      i = 3
      while_fun_3 = fn while_fun_3, i, max_number ->
        if i * i <= num do
          max_number = if rem(num, i) == 0 do
            max_number = if is_prime(div(num, i)) do
              max_number = div(num, i)
              throw {:break, {i, max_number}}
              max_number
            else
              max_number = if is_prime(i) do
                max_number = i
                max_number
              else
                max_number
              end
              max_number
            end
            max_number
          else
            max_number
          end
          i = i + 2
          while_fun_3.(while_fun_3, i, max_number)
        else
          {i, max_number}
        end
      end
      {_, max_number} = try do
          while_fun_3.(while_fun_3, i, max_number)
        catch
          {:break, {_, max_number}} -> {0, max_number}
        end

      throw {:return, max_number}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      result = solution(600851475143)
      IO.puts(("solution() = " <> Kernel.to_string(result)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
