# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def normalize(value) do
    try do
      throw {:return, ((if value > 255, do: 255, else: value))}
    catch
      {:return, val} -> val
    end
  end
  def to_grayscale(blue, green, red) do
    try do
      gs = 0.2126 * (:erlang.float(red)) + 0.587 * (:erlang.float(green)) + 0.114 * (:erlang.float(blue))
      throw {:return, Kernel.trunc(gs)}
    catch
      {:return, val} -> val
    end
  end
  def make_sepia(img, factor) do
    try do
      pixel_h = _len(img)
      pixel_v = _len(Enum.at(img, 0))
      i = 0
      while_fun = fn while_fun, i, img ->
        if i < pixel_h do
          j = 0
          while_fun_2 = fn while_fun_2, img, j ->
            if j < pixel_v do
              pixel = Enum.at(Enum.at(img, i), j)
              grey = to_grayscale(Enum.at(pixel, 0), Enum.at(pixel, 1), Enum.at(pixel, 2))
              img = List.replace_at(img, i, List.replace_at(Enum.at(img, i), j, [normalize(grey), normalize(grey + factor), normalize(grey + 2 * factor)]))
              j = j + 1
              while_fun_2.(while_fun_2, img, j)
            else
              {img, j}
            end
          end
          {img, j} = try do
              while_fun_2.(while_fun_2, img, j)
            catch
              {:break, {img, j}} -> {img, j}
            end

          i = i + 1
          while_fun.(while_fun, i, img)
        else
          {i, img}
        end
      end
      {i, img} = try do
          while_fun.(while_fun, i, img)
        catch
          {:break, {i, img}} -> {i, img}
        end

      throw {:return, img}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:image, [[[10, 20, 30], [40, 50, 60]], [[70, 80, 90], [200, 150, 100]]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:sepia, make_sepia(Process.get(:image), 20))
    IO.puts(Kernel.to_string(Process.get(:sepia)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
