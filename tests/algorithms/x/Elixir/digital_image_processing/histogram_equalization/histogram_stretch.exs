# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_list(n, value) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < n do
          res = (res ++ [value])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def histogram_stretch(image) do
    try do
      height = _len(image)
      width = _len(Enum.at(image, 0))
      hist = make_list(256, 0)
      i = 0
      while_fun_2 = fn while_fun_2, hist, i ->
        if i < height do
          j = 0
          while_fun_3 = fn while_fun_3, hist, j ->
            if j < width do
              val = Enum.at(Enum.at(image, i), j)
              hist = List.replace_at(hist, val, Enum.at(hist, val) + 1)
              j = j + 1
              while_fun_3.(while_fun_3, hist, j)
            else
              {hist, j}
            end
          end
          {hist, j} = try do
              while_fun_3.(while_fun_3, hist, j)
            catch
              {:break, {hist, j}} -> {hist, j}
            end

          i = i + 1
          while_fun_2.(while_fun_2, hist, i)
        else
          {hist, i}
        end
      end
      {hist, i} = try do
          while_fun_2.(while_fun_2, hist, i)
        catch
          {:break, {hist, i}} -> {hist, i}
        end

      mapping = make_list(256, 0)
      cumulative = 0
      total = height * width
      h = 0
      while_fun_4 = fn while_fun_4, cumulative, h, mapping ->
        if h < 256 do
          cumulative = cumulative + Enum.at(hist, h)
          mapping = List.replace_at(mapping, h, div((255 * cumulative), total))
          h = h + 1
          while_fun_4.(while_fun_4, cumulative, h, mapping)
        else
          {cumulative, h, mapping}
        end
      end
      {cumulative, h, mapping} = try do
          while_fun_4.(while_fun_4, cumulative, h, mapping)
        catch
          {:break, {cumulative, h, mapping}} -> {cumulative, h, mapping}
        end

      i = 0
      while_fun_5 = fn while_fun_5, i, image ->
        if i < height do
          j = 0
          while_fun_6 = fn while_fun_6, image, j ->
            if j < width do
              val = Enum.at(Enum.at(image, i), j)
              image = List.replace_at(image, i, List.replace_at(Enum.at(image, i), j, Enum.at(mapping, val)))
              j = j + 1
              while_fun_6.(while_fun_6, image, j)
            else
              {image, j}
            end
          end
          {image, j} = try do
              while_fun_6.(while_fun_6, image, j)
            catch
              {:break, {image, j}} -> {image, j}
            end

          i = i + 1
          while_fun_5.(while_fun_5, i, image)
        else
          {i, image}
        end
      end
      {i, image} = try do
          while_fun_5.(while_fun_5, i, image)
        catch
          {:break, {i, image}} -> {i, image}
        end

      throw {:return, image}
    catch
      {:return, val} -> val
    end
  end
  def print_image(image) do
    try do
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(image) do
          IO.puts(Kernel.inspect(Enum.at(image, i)))
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:img, [[52, 55, 61], [59, 79, 61], [85, 76, 62]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:result, histogram_stretch(Process.get(:img)))
    print_image(Process.get(:result))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
