# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def change_contrast(img, level) do
    try do
      factor = (259.0 * ((:erlang.float(level)) + 255.0)) / (255.0 * (259.0 - (:erlang.float(level))))
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(img) do
          row = Enum.at(img, i)
          new_row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, new_row ->
            if j < _len(row) do
              c = Enum.at(row, j)
              contrasted = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((128.0 + factor * ((:erlang.float(c)) - 128.0)))
              clamped = (if Process.get(:contrasted) < 0, do: 0, else: (if Process.get(:contrasted) > 255, do: 255, else: Process.get(:contrasted)))
              new_row = (new_row ++ [clamped])
              j = j + 1
              while_fun_2.(while_fun_2, j, new_row)
            else
              {j, new_row}
            end
          end
          {j, new_row} = try do
              while_fun_2.(while_fun_2, j, new_row)
            catch
              {:break, {j, new_row}} -> {j, new_row}
            end

          result = (result ++ [new_row])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def print_image(img) do
    try do
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(img) do
          row = Enum.at(img, i)
          j = 0
          line = ""
          while_fun_4 = fn while_fun_4, j, line ->
            if j < _len(row) do
              line = ((line <> Kernel.to_string(Enum.at(row, j))) <> " ")
              j = j + 1
              while_fun_4.(while_fun_4, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_4.(while_fun_4, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:image, [[100, 125, 150], [175, 200, 225], [50, 75, 100]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts("Original image:")
    print_image(Process.get(:image))
    Process.put(:contrasted, change_contrast(Process.get(:image), 170))
    IO.puts("After contrast:")
    print_image(Process.get(:contrasted))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
