# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def clamp(value) do
    try do
      if value < 0 do
        throw {:return, 0}
      end
      if value > 255 do
        throw {:return, 255}
      end
      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def change_brightness(img, level) do
    try do
      if level < (-255) || level > 255 do
        raise("level must be between -255 and 255")
      end
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(img) do
          row_res = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row_res ->
            if j < _len(Enum.at(img, i)) do
              row_res = (row_res ++ [clamp(Enum.at(Enum.at(img, i), j) + level)])
              j = j + 1
              while_fun_2.(while_fun_2, j, row_res)
            else
              {j, row_res}
            end
          end
          {j, row_res} = try do
              while_fun_2.(while_fun_2, j, row_res)
            catch
              {:break, {j, row_res}} -> {j, row_res}
            end

          result = (result ++ [row_res])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:sample, [[100, 150], [200, 250]])
  def main() do
    IO.puts(Kernel.inspect(change_brightness(Process.get(:sample), 30)))
    IO.puts(Kernel.inspect(change_brightness(Process.get(:sample), -60)))
  end
end
Main.main()
