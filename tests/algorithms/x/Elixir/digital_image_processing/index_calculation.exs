# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  def ndvi(red, nir) do
    try do
      throw {:return, (nir - red) / (nir + red)}
    catch
      {:return, val} -> val
    end
  end
  def bndvi(blue, nir) do
    try do
      throw {:return, (nir - blue) / (nir + blue)}
    catch
      {:return, val} -> val
    end
  end
  def gndvi(green, nir) do
    try do
      throw {:return, (nir - green) / (nir + green)}
    catch
      {:return, val} -> val
    end
  end
  def ndre(redEdge, nir) do
    try do
      throw {:return, (nir - redEdge) / (nir + redEdge)}
    catch
      {:return, val} -> val
    end
  end
  def ccci(red, redEdge, nir) do
    try do
      throw {:return, ndre(redEdge, nir) / ndvi(red, nir)}
    catch
      {:return, val} -> val
    end
  end
  def cvi(red, green, nir) do
    try do
      throw {:return, (nir * red) / (green * green)}
    catch
      {:return, val} -> val
    end
  end
  def gli(red, green, blue) do
    try do
      throw {:return, (2.0 * green - red - blue) / (2.0 * green + red + blue)}
    catch
      {:return, val} -> val
    end
  end
  def dvi(red, nir) do
    try do
      throw {:return, nir / red}
    catch
      {:return, val} -> val
    end
  end
  def calc(index, red, green, blue, redEdge, nir) do
    try do
      if index == "NDVI" do
        throw {:return, ndvi(red, nir)}
      end
      if index == "BNDVI" do
        throw {:return, bndvi(blue, nir)}
      end
      if index == "GNDVI" do
        throw {:return, gndvi(green, nir)}
      end
      if index == "NDRE" do
        throw {:return, ndre(redEdge, nir)}
      end
      if index == "CCCI" do
        throw {:return, ccci(red, redEdge, nir)}
      end
      if index == "CVI" do
        throw {:return, cvi(red, green, nir)}
      end
      if index == "GLI" do
        throw {:return, gli(red, green, blue)}
      end
      if index == "DVI" do
        throw {:return, dvi(red, nir)}
      end
      throw {:return, 0.0}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      red = 50.0
      green = 30.0
      blue = 10.0
      redEdge = 40.0
      nir = 100.0
      IO.puts(("NDVI=" <> Kernel.inspect(ndvi(red, nir))))
      IO.puts(("CCCI=" <> Kernel.inspect(ccci(red, redEdge, nir))))
      IO.puts(("CVI=" <> Kernel.inspect(cvi(red, green, nir))))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
