# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def convert_to_negative(img) do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(img) do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < _len(Enum.at(img, i)) do
              pixel = Enum.at(Enum.at(img, i), j)
              r = 255 - Enum.at(pixel, 0)
              g = 255 - Enum.at(pixel, 1)
              b = 255 - Enum.at(pixel, 2)
              row = (row ++ [[r, g, b]])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      image = [[[10, 20, 30], [0, 0, 0]], [[255, 255, 255], [100, 150, 200]]]
      neg = convert_to_negative(image)
      IO.puts(Kernel.inspect(neg))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
