# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def pad_edge(image, pad_size) do
    try do
      height = _len(image)
      width = _len(Enum.at(image, 0))
      new_height = height + pad_size * 2
      new_width = width + pad_size * 2
      padded = []
      i = 0
      while_fun = fn while_fun, i, padded ->
        if i < new_height do
          row = []
          src_i = i
          {src_i} = if src_i < pad_size do
            src_i = 0
            {src_i}
          else
            {src_i}
          end
          src_i = (if src_i >= height + pad_size, do: height - 1, else: src_i - pad_size)
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < new_width do
              src_j = j
              {src_j} = if src_j < pad_size do
                src_j = 0
                {src_j}
              else
                {src_j}
              end
              src_j = (if src_j >= width + pad_size, do: width - 1, else: src_j - pad_size)
              row = (row ++ [Enum.at(Enum.at(image, src_i), src_j)])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          padded = (padded ++ [row])
          i = i + 1
          while_fun.(while_fun, i, padded)
        else
          {i, padded}
        end
      end
      {i, padded} = try do
          while_fun.(while_fun, i, padded)
        catch
          {:break, {i, padded}} -> {i, padded}
        end

      throw {:return, padded}
    catch
      {:return, val} -> val
    end
  end
  def im2col(image, block_h, block_w) do
    try do
      rows = _len(image)
      cols = _len(Enum.at(image, 0))
      dst_height = rows - block_h + 1
      dst_width = cols - block_w + 1
      image_array = []
      i = 0
      while_fun_3 = fn while_fun_3, i, image_array ->
        if i < dst_height do
          j = 0
          while_fun_4 = fn while_fun_4, image_array, j ->
            if j < dst_width do
              window = []
              bi = 0
              while_fun_5 = fn while_fun_5, bi, window ->
                if bi < block_h do
                  bj = 0
                  while_fun_6 = fn while_fun_6, bj, window ->
                    if bj < block_w do
                      window = (window ++ [Enum.at(Enum.at(image, i + bi), j + bj)])
                      bj = bj + 1
                      while_fun_6.(while_fun_6, bj, window)
                    else
                      {bj, window}
                    end
                  end
                  {bj, window} = try do
                      while_fun_6.(while_fun_6, bj, window)
                    catch
                      {:break, {bj, window}} -> {bj, window}
                    end

                  bi = bi + 1
                  while_fun_5.(while_fun_5, bi, window)
                else
                  {bi, window}
                end
              end
              {bi, window} = try do
                  while_fun_5.(while_fun_5, bi, window)
                catch
                  {:break, {bi, window}} -> {bi, window}
                end

              image_array = (image_array ++ [window])
              j = j + 1
              while_fun_4.(while_fun_4, image_array, j)
            else
              {image_array, j}
            end
          end
          {image_array, j} = try do
              while_fun_4.(while_fun_4, image_array, j)
            catch
              {:break, {image_array, j}} -> {image_array, j}
            end

          i = i + 1
          while_fun_3.(while_fun_3, i, image_array)
        else
          {i, image_array}
        end
      end
      {i, image_array} = try do
          while_fun_3.(while_fun_3, i, image_array)
        catch
          {:break, {i, image_array}} -> {i, image_array}
        end

      throw {:return, image_array}
    catch
      {:return, val} -> val
    end
  end
  def flatten(matrix) do
    try do
      out = []
      i = 0
      while_fun_7 = fn while_fun_7, i, out ->
        if i < _len(matrix) do
          j = 0
          while_fun_8 = fn while_fun_8, j, out ->
            if j < _len(Enum.at(matrix, i)) do
              out = (out ++ [Enum.at(Enum.at(matrix, i), j)])
              j = j + 1
              while_fun_8.(while_fun_8, j, out)
            else
              {j, out}
            end
          end
          {j, out} = try do
              while_fun_8.(while_fun_8, j, out)
            catch
              {:break, {j, out}} -> {j, out}
            end

          i = i + 1
          while_fun_7.(while_fun_7, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_7.(while_fun_7, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def dot(a, b) do
    try do
      sum = 0
      i = 0
      while_fun_9 = fn while_fun_9, i, sum ->
        if i < _len(a) do
          sum = sum + Enum.at(a, i) * Enum.at(b, i)
          i = i + 1
          while_fun_9.(while_fun_9, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun_9.(while_fun_9, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def img_convolve(image, kernel) do
    try do
      height = _len(image)
      width = _len(Enum.at(image, 0))
      k_size = _len(kernel)
      pad_size = div(k_size, 2)
      padded = pad_edge(image, pad_size)
      image_array = im2col(padded, k_size, k_size)
      kernel_flat = flatten(kernel)
      dst = []
      idx = 0
      i = 0
      while_fun_10 = fn while_fun_10, dst, i, idx ->
        if i < height do
          row = []
          j = 0
          while_fun_11 = fn while_fun_11, idx, j, row ->
            if j < width do
              val = dot(Enum.at(image_array, idx), kernel_flat)
              row = (row ++ [val])
              idx = idx + 1
              j = j + 1
              while_fun_11.(while_fun_11, idx, j, row)
            else
              {idx, j, row}
            end
          end
          {idx, j, row} = try do
              while_fun_11.(while_fun_11, idx, j, row)
            catch
              {:break, {idx, j, row}} -> {idx, j, row}
            end

          dst = (dst ++ [row])
          i = i + 1
          while_fun_10.(while_fun_10, dst, i, idx)
        else
          {dst, i, idx}
        end
      end
      {dst, i, idx} = try do
          while_fun_10.(while_fun_10, dst, i, idx)
        catch
          {:break, {dst, i, idx}} -> {dst, i, idx}
        end

      throw {:return, dst}
    catch
      {:return, val} -> val
    end
  end
  def print_matrix(m) do
    try do
      i = 0
      while_fun_12 = fn while_fun_12, i ->
        if i < _len(m) do
          line = ""
          j = 0
          while_fun_13 = fn while_fun_13, j, line ->
            if j < _len(Enum.at(m, i)) do
              {line} = if j > 0 do
                line = (line <> " ")
                {line}
              else
                {line}
              end
              line = (line <> Kernel.to_string(Enum.at(Enum.at(m, i), j)))
              j = j + 1
              while_fun_13.(while_fun_13, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_13.(while_fun_13, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          i = i + 1
          while_fun_12.(while_fun_12, i)
        else
          i
        end
      end
      i = try do
          while_fun_12.(while_fun_12, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:image, [[1, 2, 3, 0, 0], [4, 5, 6, 0, 0], [7, 8, 9, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:laplace_kernel, [[0, 1, 0], [1, -4, 1], [0, 1, 0]])
    Process.put(:result, img_convolve(Process.get(:image), Process.get(:laplace_kernel)))
    print_matrix(Process.get(:result))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
