# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def expApprox(x) do
    try do
      sum = 1.0
      term = 1.0
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n < 10 do
          term = term * x / (:erlang.float(n))
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def gen_gaussian_kernel(k_size, sigma) do
    try do
      center = div(k_size, 2)
      kernel = []
      i = 0
      while_fun_2 = fn while_fun_2, i, kernel ->
        if i < k_size do
          row = []
          j = 0
          while_fun_3 = fn while_fun_3, j, row ->
            if j < k_size do
              x = :erlang.float((i - center))
              y = :erlang.float((j - center))
              exponent = -((x * x + y * y) / (2.0 * sigma * sigma))
              value = (1.0 / (2.0 * Process.get(:pi) * sigma)) * expApprox(exponent)
              row = (row ++ [value])
              j = j + 1
              while_fun_3.(while_fun_3, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_3.(while_fun_3, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          kernel = (kernel ++ [row])
          i = i + 1
          while_fun_2.(while_fun_2, i, kernel)
        else
          {i, kernel}
        end
      end
      {i, kernel} = try do
          while_fun_2.(while_fun_2, i, kernel)
        catch
          {:break, {i, kernel}} -> {i, kernel}
        end

      throw {:return, kernel}
    catch
      {:return, val} -> val
    end
  end
  def gaussian_filter(image, k_size, sigma) do
    try do
      height = _len(image)
      width = _len(Enum.at(image, 0))
      dst_height = height - k_size + 1
      dst_width = width - k_size + 1
      kernel = gen_gaussian_kernel(k_size, sigma)
      dst = []
      i = 0
      while_fun_4 = fn while_fun_4, dst, i ->
        if i < dst_height do
          row = []
          j = 0
          while_fun_5 = fn while_fun_5, j, row ->
            if j < dst_width do
              sum = 0.0
              ki = 0
              while_fun_6 = fn while_fun_6, ki, sum ->
                if ki < k_size do
                  kj = 0
                  while_fun_7 = fn while_fun_7, kj, sum ->
                    if kj < k_size do
                      sum = sum + (:erlang.float(Enum.at(Enum.at(image, i + ki), j + kj))) * Enum.at(Enum.at(kernel, ki), kj)
                      kj = kj + 1
                      while_fun_7.(while_fun_7, kj, sum)
                    else
                      {kj, sum}
                    end
                  end
                  {kj, sum} = try do
                      while_fun_7.(while_fun_7, kj, sum)
                    catch
                      {:break, {kj, sum}} -> {kj, sum}
                    end

                  ki = ki + 1
                  while_fun_6.(while_fun_6, ki, sum)
                else
                  {ki, sum}
                end
              end
              {ki, sum} = try do
                  while_fun_6.(while_fun_6, ki, sum)
                catch
                  {:break, {ki, sum}} -> {ki, sum}
                end

              row = (row ++ [(fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(sum)])
              j = j + 1
              while_fun_5.(while_fun_5, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_5.(while_fun_5, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dst = (dst ++ [row])
          i = i + 1
          while_fun_4.(while_fun_4, dst, i)
        else
          {dst, i}
        end
      end
      {dst, i} = try do
          while_fun_4.(while_fun_4, dst, i)
        catch
          {:break, {dst, i}} -> {dst, i}
        end

      throw {:return, dst}
    catch
      {:return, val} -> val
    end
  end
  def print_image(image) do
    try do
      i = 0
      while_fun_8 = fn while_fun_8, i ->
        if i < _len(image) do
          IO.puts(Kernel.inspect(Enum.at(image, i)))
          i = i + 1
          while_fun_8.(while_fun_8, i)
        else
          i
        end
      end
      i = try do
          while_fun_8.(while_fun_8, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  Process.put(:img, [[52, 55, 61, 59, 79], [62, 59, 55, 104, 94], [63, 65, 66, 113, 144], [68, 70, 70, 126, 154], [70, 72, 69, 128, 155]])
  def main() do
    Process.put(:gaussian3, gaussian_filter(Process.get(:img), 3, 1.0))
    Process.put(:gaussian5, gaussian_filter(Process.get(:img), 5, 0.8))
    print_image(Process.get(:gaussian3))
    print_image(Process.get(:gaussian5))
  end
end
Main.main()
