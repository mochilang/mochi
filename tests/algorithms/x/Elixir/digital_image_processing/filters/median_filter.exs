# Code generated by Mochi transpiler 2025-08-08 11:07 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def insertion_sort(a) do
    try do
      i = 1
      while_fun = fn while_fun, a, i ->
        if i < _len(a) do
          key = Enum.at(a, i)
          j = i - 1
          while_fun_2 = fn while_fun_2, a, j ->
            if j >= 0 && Enum.at(a, j) > key do
              a = List.replace_at(a, j + 1, Enum.at(a, j))
              j = j - 1
              while_fun_2.(while_fun_2, a, j)
            else
              {a, j}
            end
          end
          {a, j} = try do
              while_fun_2.(while_fun_2, a, j)
            catch
              {:break, {a, j}} -> {a, j}
            end

          a = List.replace_at(a, j + 1, key)
          i = i + 1
          while_fun.(while_fun, a, i)
        else
          {a, i}
        end
      end
      {a, i} = try do
          while_fun.(while_fun, a, i)
        catch
          {:break, {a, i}} -> {a, i}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def median_filter(gray_img, mask) do
    try do
      rows = _len(gray_img)
      cols = _len(Enum.at(gray_img, 0))
      bd = div(mask, 2)
      result = []
      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < rows do
          row = []
          j = 0
          while_fun_4 = fn while_fun_4, j, row ->
            if j < cols do
              row = (row ++ [0])
              j = j + 1
              while_fun_4.(while_fun_4, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_4.(while_fun_4, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      i = bd
      while_fun_5 = fn while_fun_5, i, result ->
        if i < rows - bd do
          j = bd
          while_fun_6 = fn while_fun_6, j, result ->
            if j < cols - bd do
              kernel = []
              x = i - bd
              while_fun_7 = fn while_fun_7, kernel, x ->
                if x <= i + bd do
                  y = j - bd
                  while_fun_8 = fn while_fun_8, kernel, y ->
                    if y <= j + bd do
                      kernel = (kernel ++ [Enum.at(Enum.at(gray_img, x), y)])
                      y = y + 1
                      while_fun_8.(while_fun_8, kernel, y)
                    else
                      {kernel, y}
                    end
                  end
                  {kernel, y} = try do
                      while_fun_8.(while_fun_8, kernel, y)
                    catch
                      {:break, {kernel, y}} -> {kernel, y}
                    end

                  x = x + 1
                  while_fun_7.(while_fun_7, kernel, x)
                else
                  {kernel, x}
                end
              end
              {kernel, x} = try do
                  while_fun_7.(while_fun_7, kernel, x)
                catch
                  {:break, {kernel, x}} -> {kernel, x}
                end

              kernel = insertion_sort(kernel)
              idx = div((mask * mask), 2)
              result = List.replace_at(result, i, List.replace_at(Enum.at(result, i), j, Enum.at(kernel, idx)))
              j = j + 1
              while_fun_6.(while_fun_6, j, result)
            else
              {j, result}
            end
          end
          {j, result} = try do
              while_fun_6.(while_fun_6, j, result)
            catch
              {:break, {j, result}} -> {j, result}
            end

          i = i + 1
          while_fun_5.(while_fun_5, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_5.(while_fun_5, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      img = [[10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10]]
      filtered = median_filter(img, 3)
      IO.puts(Kernel.inspect(filtered))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
