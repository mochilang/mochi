# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_neighbors_pixel(image, x, y, center) do
    try do
      if x < 0 || y < 0 do
        throw {:return, 0}
      end
      if x >= _len(image) || y >= _len(Enum.at(image, 0)) do
        throw {:return, 0}
      end
      if Enum.at(Enum.at(image, x), y) >= center do
        throw {:return, 1}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def local_binary_value(image, x, y) do
    try do
      center = Enum.at(Enum.at(image, x), y)
      powers = [1, 2, 4, 8, 16, 32, 64, 128]
      neighbors = [get_neighbors_pixel(image, x - 1, y + 1, center), get_neighbors_pixel(image, x, y + 1, center), get_neighbors_pixel(image, x - 1, y, center), get_neighbors_pixel(image, x + 1, y + 1, center), get_neighbors_pixel(image, x + 1, y, center), get_neighbors_pixel(image, x + 1, y - 1, center), get_neighbors_pixel(image, x, y - 1, center), get_neighbors_pixel(image, x - 1, y - 1, center)]
      sum = 0
      i = 0
      while_fun = fn while_fun, sum ->
        if i < _len(neighbors) do
          sum = sum + Enum.at(neighbors, i) * Enum.at(powers, i)
          i = i + 1
          while_fun.(while_fun, sum)
        else
          sum
        end
      end
      sum = try do
          while_fun.(while_fun, sum)
        catch
          {:break, {sum}} -> sum
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:image, [[10, 10, 10, 10, 10], [10, 20, 30, 20, 10], [10, 30, 40, 30, 10], [10, 20, 30, 20, 10], [10, 10, 10, 10, 10]])
  Process.put(:i, 0)
  def main() do
    while_fun_2 = fn while_fun_2 ->
      if Process.get(:i) < _len(Process.get(:image)) do
        j = 0
        line = ""
        while_fun_3 = fn while_fun_3, j, line ->
          if j < _len(Enum.at(Process.get(:image), 0)) do
            value = local_binary_value(Process.get(:image), Process.get(:i), j)
            line = (line <> Kernel.to_string(value))
            {line} = if j < _len(Enum.at(Process.get(:image), 0)) - 1 do
              line = (line <> " ")
              {line}
            else
              {line}
            end
            j = j + 1
            while_fun_3.(while_fun_3, j, line)
          else
            {j, line}
          end
        end
        {j, line} = try do
            while_fun_3.(while_fun_3, j, line)
          catch
            {:break, {j, line}} -> {j, line}
          end

        IO.puts(line)
        Process.put(:i, Process.get(:i) + 1)
        while_fun_2.(while_fun_2)
      else
        nil
      end
    end
    try do
      while_fun_2.(while_fun_2)
    catch
      :break -> nil
    end

  end
end
Main.main()
