# Code generated by Mochi transpiler 2025-08-08 09:18 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def to_radians(deg) do
    try do
      throw {:return, deg * Process.get(:pi) / 180.0}
    catch
      {:return, val} -> val
    end
  end
  def sin_taylor(x) do
    try do
      term = x
      sum = x
      i = 1
      while_fun = fn while_fun, i, sum, term ->
        if i < 10 do
          k1 = 2.0 * (:erlang.float(i))
          k2 = k1 + 1.0
          term = -term * x * x / (k1 * k2)
          sum = sum + term
          i = i + 1
          while_fun.(while_fun, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun.(while_fun, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def cos_taylor(x) do
    try do
      term = 1.0
      sum = 1.0
      i = 1
      while_fun_2 = fn while_fun_2, i, sum, term ->
        if i < 10 do
          k1 = 2.0 * (:erlang.float(i)) - 1.0
          k2 = 2.0 * (:erlang.float(i))
          term = -term * x * x / (k1 * k2)
          sum = sum + term
          i = i + 1
          while_fun_2.(while_fun_2, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_2.(while_fun_2, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def exp_taylor(x) do
    try do
      term = 1.0
      sum = 1.0
      i = 1.0
      while_fun_3 = fn while_fun_3, i, sum, term ->
        if i < 20.0 do
          term = term * x / i
          sum = sum + term
          i = i + 1.0
          while_fun_3.(while_fun_3, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_3.(while_fun_3, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def gabor_filter_kernel(ksize, sigma, theta, lambd, gamma, psi) do
    try do
      size = ksize
      {size} = if rem(size, 2) == 0 do
        size = size + 1
        {size}
      else
        {size}
      end
      gabor = []
      y = 0
      while_fun_4 = fn while_fun_4, gabor, y ->
        if y < size do
          row = []
          x = 0
          while_fun_5 = fn while_fun_5, row, x ->
            if x < size do
              px = :erlang.float((x - div(size, 2)))
              py = :erlang.float((y - div(size, 2)))
              rad = to_radians(theta)
              cos_theta = cos_taylor(rad)
              sin_theta = sin_taylor(rad)
              x_rot = cos_theta * px + sin_theta * py
              y_rot = -sin_theta * px + cos_theta * py
              exponent = -(x_rot * x_rot + gamma * gamma * y_rot * y_rot) / (2.0 * sigma * sigma)
              value = exp_taylor(exponent) * cos_taylor(2.0 * Process.get(:pi) * x_rot / lambd + psi)
              row = (row ++ [value])
              x = x + 1
              while_fun_5.(while_fun_5, row, x)
            else
              {row, x}
            end
          end
          {row, x} = try do
              while_fun_5.(while_fun_5, row, x)
            catch
              {:break, {row, x}} -> {row, x}
            end

          gabor = (gabor ++ [row])
          y = y + 1
          while_fun_4.(while_fun_4, gabor, y)
        else
          {gabor, y}
        end
      end
      {gabor, y} = try do
          while_fun_4.(while_fun_4, gabor, y)
        catch
          {:break, {gabor, y}} -> {gabor, y}
        end

      throw {:return, gabor}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:kernel, gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0))
    IO.puts(Kernel.inspect(Process.get(:kernel)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
