# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def evaluate(item, target) do
    try do
      score = 0
      i = 0
      while_fun = fn while_fun, i, score ->
        if i < _len(item) && i < _len(target) do
          {score} = if _slice(item, i, i + 1 - (i)) == _slice(target, i, i + 1 - (i)) do
            score = score + 1
            {score}
          else
            {score}
          end
          i = i + 1
          while_fun.(while_fun, i, score)
        else
          {i, score}
        end
      end
      {i, score} = try do
          while_fun.(while_fun, i, score)
        catch
          {:break, {i, score}} -> {i, score}
        end

      throw {:return, score}
    catch
      {:return, val} -> val
    end
  end
  def crossover(parent1, parent2) do
    try do
      cut = div(_len(parent1), 2)
      child1 = (_slice(parent1, 0, cut - (0)) <> _slice(parent2, cut, _len(parent2) - (cut)))
      child2 = (_slice(parent2, 0, cut - (0)) <> _slice(parent1, cut, _len(parent1) - (cut)))
      throw {:return, %{first: child1, second: child2}}
    catch
      {:return, val} -> val
    end
  end
  def mutate(child, genes) do
    try do
      if _len(child) == 0 do
        throw {:return, child}
      end
      gene = Enum.at(genes, 0, [])
      throw {:return, (_slice(child, 0, _len(child) - 1 - (0)) <> gene)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(evaluate("Helxo Worlx", "Hello World")))
      pair = crossover("123456", "abcdef")
      IO.puts(pair.first)
      IO.puts(pair.second)
      mut = mutate("123456", ["A", "B", "C", "D", "E", "F"])
      IO.puts(mut)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
