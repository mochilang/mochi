# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def remove_last(xs) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) - 1 do
          res = (res ++ [Enum.at(xs, i, [])])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def sentinel_linear_search(sequence, target) do
    try do
      seq = sequence
      seq = (seq ++ [target])
      index = 0
      while_fun_2 = fn while_fun_2, index ->
        if Enum.at(seq, index, []) != target do
          index = index + 1
          while_fun_2.(while_fun_2, index)
        else
          index
        end
      end
      index = try do
          while_fun_2.(while_fun_2, index)
        catch
          {:break, {index}} -> index
        end

      seq = remove_last(seq)
      if index == _len(seq) do
        throw {:return, -1}
      end
      throw {:return, index}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(sentinel_linear_search([0, 5, 7, 10, 15], 0)))
    IO.puts(Kernel.inspect(sentinel_linear_search([0, 5, 7, 10, 15], 15)))
    IO.puts(Kernel.inspect(sentinel_linear_search([0, 5, 7, 10, 15], 5)))
    IO.puts(Kernel.inspect(sentinel_linear_search([0, 5, 7, 10, 15], 6)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
