# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_sorted(arr) do
    try do
      i = 1
      while_fun = fn while_fun, i ->
        if i < _len(arr) do
          if Enum.at(arr, i - 1, []) > Enum.at(arr, i, []) do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def binary_search(sorted_collection, item) do
    try do
      if !is_sorted(sorted_collection) do
        throw {:return, -1}
      end
      left = 0
      right = _len(sorted_collection) - 1
      while_fun_2 = fn while_fun_2, left, right ->
        if left <= right do
          midpoint = left + div((right - left), 2)
          current_item = Enum.at(sorted_collection, midpoint, [])
          if current_item == item do
            throw {:return, midpoint}
          end
          {left, right} = if item < current_item do
            right = midpoint - 1
            {left, right}
          else
            left = midpoint + 1
            {left, right}
          end
          while_fun_2.(while_fun_2, left, right)
        else
          {left, right}
        end
      end
      {left, right} = try do
          while_fun_2.(while_fun_2, left, right)
        catch
          {:break, {left, right}} -> {left, right}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def binary_search_by_recursion(sorted_collection, item, left, right) do
    try do
      if right < left do
        throw {:return, -1}
      end
      midpoint = left + div((right - left), 2)
      if Enum.at(sorted_collection, midpoint, []) == item do
        throw {:return, midpoint}
      end
      if Enum.at(sorted_collection, midpoint, []) > item do
        throw {:return, binary_search_by_recursion(sorted_collection, item, left, midpoint - 1)}
      end
      throw {:return, binary_search_by_recursion(sorted_collection, item, midpoint + 1, right)}
    catch
      {:return, val} -> val
    end
  end
  def exponential_search(sorted_collection, item) do
    try do
      if !is_sorted(sorted_collection) do
        throw {:return, -1}
      end
      if _len(sorted_collection) == 0 do
        throw {:return, -1}
      end
      bound = 1
      while_fun_3 = fn while_fun_3, bound ->
        if bound < _len(sorted_collection) && Enum.at(sorted_collection, bound, []) < item do
          bound = bound * 2
          while_fun_3.(while_fun_3, bound)
        else
          bound
        end
      end
      bound = try do
          while_fun_3.(while_fun_3, bound)
        catch
          {:break, {bound}} -> bound
        end

      left = div(bound, 2)
      right = Enum.min([bound, _len(sorted_collection) - 1])
      throw {:return, binary_search_by_recursion(sorted_collection, item, left, right)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      data = [0, 5, 7, 10, 15]
      IO.puts(Kernel.inspect(binary_search(data, 0)))
      IO.puts(Kernel.inspect(binary_search(data, 15)))
      IO.puts(Kernel.inspect(binary_search(data, 5)))
      IO.puts(Kernel.inspect(binary_search(data, 6)))
      IO.puts(Kernel.inspect(binary_search_by_recursion(data, 0, 0, _len(data) - 1)))
      IO.puts(Kernel.inspect(binary_search_by_recursion(data, 15, 0, _len(data) - 1)))
      IO.puts(Kernel.inspect(binary_search_by_recursion(data, 5, 0, _len(data) - 1)))
      IO.puts(Kernel.inspect(binary_search_by_recursion(data, 6, 0, _len(data) - 1)))
      IO.puts(Kernel.inspect(exponential_search(data, 0)))
      IO.puts(Kernel.inspect(exponential_search(data, 15)))
      IO.puts(Kernel.inspect(exponential_search(data, 5)))
      IO.puts(Kernel.inspect(exponential_search(data, 6)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
