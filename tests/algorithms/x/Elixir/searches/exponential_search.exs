# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_sorted(xs) do
    try do
      i = 1
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i - 1, []) > Enum.at(xs, i, []) do
            throw {:return, false}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def exponential_search(arr, item) do
    try do
      if !is_sorted(arr) do
        raise("sorted_collection must be sorted in ascending order")
      end
      if _len(arr) == 0 do
        throw {:return, -1}
      end
      if Enum.at(arr, 0, []) == item do
        throw {:return, 0}
      end
      bound = 1
      while_fun_2 = fn while_fun_2, bound ->
        if bound < _len(arr) && Enum.at(arr, bound, []) < item do
          bound = bound * 2
          while_fun_2.(while_fun_2, bound)
        else
          bound
        end
      end
      bound = try do
          while_fun_2.(while_fun_2, bound)
        catch
          {:break, {bound}} -> bound
        end

      left = div(bound, 2)
      right = bound
      right = if right >= _len(arr) do
        right = _len(arr) - 1
        right
      else
        right
      end
      while_fun_3 = fn while_fun_3, left, right ->
        if left <= right do
          mid = left + div((right - left), 2)
          if Enum.at(arr, mid, []) == item do
            throw {:return, mid}
          end
          {left, right} = if Enum.at(arr, mid, []) > item do
            right = mid - 1
            {left, right}
          else
            left = mid + 1
            {left, right}
          end
          while_fun_3.(while_fun_3, left, right)
        else
          {left, right}
        end
      end
      {left, right} = try do
          while_fun_3.(while_fun_3, left, right)
        catch
          {:break, {left, right}} -> {left, right}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
