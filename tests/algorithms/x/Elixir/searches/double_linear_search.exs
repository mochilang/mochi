# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def double_linear_search(array, search_item) do
    try do
      start_ind = 0
      end_ind = _len(array) - 1
      while_fun = fn while_fun, end_ind, start_ind ->
        if start_ind <= end_ind do
          if Enum.at(array, start_ind, []) == search_item do
            throw {:return, start_ind}
          end
          if Enum.at(array, end_ind, []) == search_item do
            throw {:return, end_ind}
          end
          start_ind = start_ind + 1
          end_ind = end_ind - 1
          while_fun.(while_fun, end_ind, start_ind)
        else
          {end_ind, start_ind}
        end
      end
      {end_ind, start_ind} = try do
          while_fun.(while_fun, end_ind, start_ind)
        catch
          {:break, {end_ind, start_ind}} -> {end_ind, start_ind}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      data = build_range(100)
      IO.puts(Kernel.inspect(double_linear_search(data, 40)))
    catch
      {:return, val} -> val
    end
  end
  def build_range(n) do
    try do
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < n do
          res = (res ++ [i])
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
