# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def binary_search(arr, item) do
    try do
      low = 0
      high = _len(arr) - 1
      while_fun = fn while_fun, high, low ->
        if low <= high do
          mid = div((low + high), 2)
          val = Enum.at(arr, mid, [])
          if val == item do
            throw {:return, true}
          end
          {high, low} = if item < val do
            high = mid - 1
            {high, low}
          else
            low = mid + 1
            {high, low}
          end
          while_fun.(while_fun, high, low)
        else
          {high, low}
        end
      end
      {high, low} = try do
          while_fun.(while_fun, high, low)
        catch
          {:break, {high, low}} -> {high, low}
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:arr1, [0, 1, 2, 8, 13, 17, 19, 32, 42])
  Process.put(:arr2, [4, 4, 5, 6, 7])
  Process.put(:arr4, [5])
  Process.put(:arr5, [])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(binary_search(Process.get(:arr1), 3)))
    IO.puts(Kernel.inspect(binary_search(Process.get(:arr1), 13)))
    IO.puts(Kernel.inspect(binary_search(Process.get(:arr2), 4)))
    IO.puts(Kernel.inspect(binary_search(Process.get(:arr2), -10)))
    Process.put(:arr3, [-18, 2])
    IO.puts(Kernel.inspect(binary_search(Process.get(:arr3), -18)))
    IO.puts(Kernel.inspect(binary_search(Process.get(:arr4), 5)))
    IO.puts(Kernel.inspect(binary_search(Process.get(:arr5), 1)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
