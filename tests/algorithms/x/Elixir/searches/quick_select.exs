# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def partition(data, pivot) do
    try do
      less = []
      equal = []
      greater = []
      {equal, greater, less} = Enum.reduce((0..(_len(data) - 1)//1), {equal, greater, less}, fn i, {equal, greater, less} ->
        v = Enum.at(data, i, [])
        {equal, greater, less} = if v < pivot do
          less = (less ++ [v])
          {equal, greater, less}
        else
          {equal, greater} = if v > pivot do
            greater = (greater ++ [v])
            {equal, greater}
          else
            equal = (equal ++ [v])
            {equal, greater}
          end
          {equal, greater, less}
        end
        {equal, greater, less}
      end)
      throw {:return, [less, equal, greater]}
    catch
      {:return, val} -> val
    end
  end
  def quick_select(items, index) do
    try do
      if index < 0 || index >= _len(items) do
        throw {:return, -1}
      end
      pivot = Enum.at(items, div(_len(items), 2), [])
      parts = partition(items, pivot)
      smaller = Enum.at(parts, 0, [])
      equal = Enum.at(parts, 1, [])
      larger = Enum.at(parts, 2, [])
      count = _len(equal)
      m = _len(smaller)
      if m <= index && index < m + count do
        throw {:return, pivot}
      else
        if index < m do
          throw {:return, quick_select(smaller, index)}
        else
          throw {:return, quick_select(larger, index - (m + count))}
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def median(items) do
    try do
      n = _len(items)
      mid = div(n, 2)
      if rem(n, 2) != 0 do
        throw {:return, 1.0 * quick_select(items, mid)}
      else
        low = quick_select(items, mid - 1)
        high = quick_select(items, mid)
        throw {:return, (1.0 * (low + high)) / 2.0}
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(quick_select([2, 4, 5, 7, 899, 54, 32], 5)))
    IO.puts(Kernel.inspect(quick_select([2, 4, 5, 7, 899, 54, 32], 1)))
    IO.puts(Kernel.inspect(quick_select([5, 4, 3, 2], 2)))
    IO.puts(Kernel.inspect(quick_select([3, 5, 7, 10, 2, 12], 3)))
    IO.puts(Kernel.inspect(median([3, 2, 2, 9, 9])))
    IO.puts(Kernel.inspect(median([2, 2, 9, 9, 9, 3])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
