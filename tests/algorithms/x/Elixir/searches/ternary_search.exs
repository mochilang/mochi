# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def lin_search(left, right, array, target) do
    try do
      i = left
      while_fun = fn while_fun, i ->
        if i < right do
          if Enum.at(array, i, []) == target do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def ite_ternary_search(array, target) do
    try do
      left = 0
      right = _len(array) - 1
      while_fun_2 = fn while_fun_2, left, right ->
        if left <= right do
          if right - left < Process.get(:precision) do
            idx = lin_search(left, right + 1, array, target)
            throw {:return, idx}
          end
          one_third = left + div((right - left), 3)
          two_third = right - div((right - left), 3)
          if Enum.at(array, one_third, []) == target do
            throw {:return, one_third}
          end
          if Enum.at(array, two_third, []) == target do
            throw {:return, two_third}
          end
          {left, right} = if target < Enum.at(array, one_third, []) do
            right = one_third - 1
            {left, right}
          else
            {left, right} = if Enum.at(array, two_third, []) < target do
              left = two_third + 1
              {left, right}
            else
              left = one_third + 1
              right = two_third - 1
              {left, right}
            end
            {left, right}
          end
          while_fun_2.(while_fun_2, left, right)
        else
          {left, right}
        end
      end
      {left, right} = try do
          while_fun_2.(while_fun_2, left, right)
        catch
          {:break, {left, right}} -> {left, right}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def rec_ternary_search(left, right, array, target) do
    try do
      if left <= right do
        if right - left < Process.get(:precision) do
          idx = lin_search(left, right + 1, array, target)
          throw {:return, idx}
        end
        one_third = left + div((right - left), 3)
        two_third = right - div((right - left), 3)
        if Enum.at(array, one_third, []) == target do
          throw {:return, one_third}
        end
        if Enum.at(array, two_third, []) == target do
          throw {:return, two_third}
        end
        if target < Enum.at(array, one_third, []) do
          throw {:return, rec_ternary_search(left, one_third - 1, array, target)}
        end
        if Enum.at(array, two_third, []) < target do
          throw {:return, rec_ternary_search(two_third + 1, right, array, target)}
        end
        throw {:return, rec_ternary_search(one_third + 1, two_third - 1, array, target)}
      end
      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]
      IO.puts(Kernel.inspect(ite_ternary_search(test_list, 3)))
      IO.puts(Kernel.inspect(ite_ternary_search(test_list, 13)))
      IO.puts(Kernel.inspect(rec_ternary_search(0, _len(test_list) - 1, test_list, 3)))
      IO.puts(Kernel.inspect(rec_ternary_search(0, _len(test_list) - 1, test_list, 13)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    Process.put(:precision, 10)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
