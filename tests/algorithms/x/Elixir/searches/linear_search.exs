# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def linear_search(sequence, target) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(sequence) do
          if Enum.at(sequence, i, []) == target do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def rec_linear_search(sequence, low, high, target) do
    try do
      if !(0 <= high && high < _len(sequence) && 0 <= low && low < _len(sequence)) do
        raise("Invalid upper or lower bound!")
      end
      if high < low do
        throw {:return, -1}
      end
      if Enum.at(sequence, low, []) == target do
        throw {:return, low}
      end
      if Enum.at(sequence, high, []) == target do
        throw {:return, high}
      end
      throw {:return, rec_linear_search(sequence, low + 1, high - 1, target)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(linear_search([0, 5, 7, 10, 15], 0)))
    IO.puts(Kernel.inspect(linear_search([0, 5, 7, 10, 15], 15)))
    IO.puts(Kernel.inspect(linear_search([0, 5, 7, 10, 15], 5)))
    IO.puts(Kernel.inspect(linear_search([0, 5, 7, 10, 15], 6)))
    IO.puts(Kernel.inspect(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 0)))
    IO.puts(Kernel.inspect(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 700)))
    IO.puts(Kernel.inspect(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 30)))
    IO.puts(Kernel.inspect(rec_linear_search([0, 30, 500, 100, 700], 0, 4, -6)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
