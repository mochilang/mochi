# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def set_at_int(xs, idx, value) do
    try do
      i = 0
      res = []
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          res = (if i == idx, do: (res ++ [value]), else: (res ++ [Enum.at(xs, i, [])]))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def sort_int(xs) do
    try do
      res = xs
      i = 1
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(res) do
          key = Enum.at(res, i, [])
          j = i - 1
          while_fun_3 = fn while_fun_3, j, res ->
            if j >= 0 && Enum.at(res, j, []) > key do
              res = set_at_int(res, j + 1, Enum.at(res, j, []))
              j = j - 1
              while_fun_3.(while_fun_3, j, res)
            else
              {j, res}
            end
          end
          {_, res} = try do
              while_fun_3.(while_fun_3, j, res)
            catch
              {:break, {_, res}} -> {0, res}
            end

          res = set_at_int(res, j + 1, key)
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def median_of_five(arr) do
    try do
      sorted = sort_int(arr)
      throw {:return, Enum.at(sorted, div(_len(sorted), 2), [])}
    catch
      {:return, val} -> val
    end
  end
  def median_of_medians(arr) do
    try do
      if _len(arr) <= 5 do
        throw {:return, median_of_five(arr)}
      end
      medians = []
      i = 0
      while_fun_4 = fn while_fun_4, i, medians ->
        if i < _len(arr) do
          medians = (if i + 5 <= _len(arr), do: (medians ++ [median_of_five(_slice(arr, i, (i + 5) - i))]), else: (medians ++ [median_of_five(_slice(arr, i, _len(arr) - i))]))
          i = i + 5
          while_fun_4.(while_fun_4, i, medians)
        else
          {i, medians}
        end
      end
      {_, medians} = try do
          while_fun_4.(while_fun_4, i, medians)
        catch
          {:break, {_, medians}} -> {0, medians}
        end

      throw {:return, median_of_medians(medians)}
    catch
      {:return, val} -> val
    end
  end
  def quick_select(arr, target) do
    try do
      if target > _len(arr) do
        throw {:return, -1}
      end
      x = median_of_medians(arr)
      left = []
      right = []
      check = false
      i = 0
      while_fun_5 = fn while_fun_5, check, i, left, right ->
        if i < _len(arr) do
          {check, left, right} = if Enum.at(arr, i, []) < x do
            left = (left ++ [Enum.at(arr, i, [])])
            {check, left, right}
          else
            {check, right} = if Enum.at(arr, i, []) > x do
              right = (right ++ [Enum.at(arr, i, [])])
              {check, right}
            else
              {check, right} = if Enum.at(arr, i, []) == x do
                {check, right} = if !check do
                  check = true
                  {check, right}
                else
                  right = (right ++ [Enum.at(arr, i, [])])
                  {check, right}
                end
                {check, right}
              else
                right = (right ++ [Enum.at(arr, i, [])])
                {check, right}
              end
              {check, right}
            end
            {check, left, right}
          end
          i = i + 1
          while_fun_5.(while_fun_5, check, i, left, right)
        else
          {check, i, left, right}
        end
      end
      {check, _, left, right} = try do
          while_fun_5.(while_fun_5, check, i, left, right)
        catch
          {:break, {check, _, left, right}} -> {check, 0, left, right}
        end

      rank_x = _len(left) + 1
      answer = 0
      answer = if rank_x == target do
        answer = x
        answer
      else
        answer = if rank_x > target do
          answer = quick_select(left, target)
          answer
        else
          answer = quick_select(right, target - rank_x)
          answer
        end
        answer
      end
      throw {:return, answer}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(median_of_five([5, 4, 3, 2])))
      IO.puts(Kernel.inspect(quick_select([2, 4, 5, 7, 899, 54, 32], 5)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
