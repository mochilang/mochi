# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def fibonacci(k) do
    try do
      if k < 0 do
        raise("k must be >= 0")
      end
      a = 0
      b = 1
      i = 0
      while_fun = fn while_fun, a, b, i ->
        if i < k do
          tmp = a + b
          a = b
          b = tmp
          i = i + 1
          while_fun.(while_fun, a, b, i)
        else
          {a, b, i}
        end
      end
      {a, b, _} = try do
          while_fun.(while_fun, a, b, i)
        catch
          {:break, {a, b, _}} -> {a, b, 0}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def min_int(a, b) do
    try do
      if a < b do
        throw {:return, a}
      else
        throw {:return, b}
      end
    catch
      {:return, val} -> val
    end
  end
  def fibonacci_search(arr, val) do
    try do
      n = _len(arr)
      m = 0
      while_fun_2 = fn while_fun_2, m ->
        if fibonacci(m) < n do
          m = m + 1
          while_fun_2.(while_fun_2, m)
        else
          m
        end
      end
      _ = try do
          while_fun_2.(while_fun_2, m)
        catch
          {:break, {_}} -> 0
        end

      offset = 0
      while_fun_3 = fn while_fun_3, m, offset ->
        if m > 0 do
          i = min_int(offset + fibonacci(m - 1), n - 1)
          item = Enum.at(arr, i, [])
          {m, offset} = if item == val do
            throw {:return, i}
            {m, offset}
          else
            {m, offset} = if val < item do
              m = m - 1
              {m, offset}
            else
              offset = offset + fibonacci(m - 1)
              m = m - 2
              {m, offset}
            end
            {m, offset}
          end
          while_fun_3.(while_fun_3, m, offset)
        else
          {m, offset}
        end
      end
      {_, offset} = try do
          while_fun_3.(while_fun_3, m, offset)
        catch
          {:break, {_, offset}} -> {0, offset}
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:example1, [4, 5, 6, 7])
  Process.put(:example3, [0, 5, 10, 15, 20, 25, 30])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:example2, [-18, 2])
    IO.puts(Kernel.inspect(fibonacci_search(Process.get(:example1), 4)))
    IO.puts(Kernel.inspect(fibonacci_search(Process.get(:example1), -10)))
    IO.puts(Kernel.inspect(fibonacci_search(Process.get(:example2), -18)))
    IO.puts(Kernel.inspect(fibonacci_search(Process.get(:example3), 15)))
    IO.puts(Kernel.inspect(fibonacci_search(Process.get(:example3), 17)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
