# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def search(list_data, key, left, right) do
    try do
      r = right
      r = if r == 0 do
        r = _len(list_data) - 1
        r
      else
        r
      end
      if left > r do
        throw {:return, -1}
      else
        if Enum.at(list_data, left, []) == key do
          throw {:return, left}
        else
          if Enum.at(list_data, r, []) == key do
            throw {:return, r}
          else
            throw {:return, search(list_data, key, left + 1, r - 1)}
          end
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 0, 0)))
      IO.puts(Kernel.inspect(search([1, 2, 4, 5, 3], 4, 0, 0)))
      IO.puts(Kernel.inspect(search([1, 2, 4, 5, 3], 6, 0, 0)))
      IO.puts(Kernel.inspect(search([5], 5, 0, 0)))
      IO.puts(Kernel.inspect(search([], 1, 0, 0)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
