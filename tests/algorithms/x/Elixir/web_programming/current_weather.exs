# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def http_get(url, params) do
    try do
      throw {:return, ((if Map.has_key?(params, "q"), do: %{"location" => Map.get(params, "q", ""), "temperature" => "20"}, else: %{"location" => Map.get(params, "query", ""), "temperature" => "20"}))}
    catch
      {:return, val} -> val
    end
  end
  def current_weather(location) do
    try do
      weather_data = []
      {weather_data} = if Process.get(:openweathermap_api_key) != "" do
        params_openweathermap = %{"q" => location, "appid" => Process.get(:openweathermap_api_key)}
        response_openweathermap = http_get(Process.get(:openweathermap_url_base), params_openweathermap)
        weather_data = (weather_data ++ [%{"OpenWeatherMap" => response_openweathermap}])
        {weather_data}
      else
        {weather_data}
      end
      {weather_data} = if Process.get(:weatherstack_api_key) != "" do
        params_weatherstack = %{"query" => location, "access_key" => Process.get(:weatherstack_api_key)}
        response_weatherstack = http_get(Process.get(:weatherstack_url_base), params_weatherstack)
        weather_data = (weather_data ++ [%{"Weatherstack" => response_weatherstack}])
        {weather_data}
      else
        {weather_data}
      end
      if _len(weather_data) == 0 do
        raise("No API keys provided or no valid data returned.")
      end
      throw {:return, weather_data}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      data = current_weather("New York")
      IO.puts(Kernel.inspect(data))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:openweathermap_api_key, "demo")
  Process.put(:weatherstack_api_key, "")
  Process.put(:openweathermap_url_base, "https://api.openweathermap.org/data/2.5/weather")
  Process.put(:weatherstack_url_base, "http://api.weatherstack.com/current")
  def bench_main() do
    Process.put(:openweathermap_api_key, "demo")
    Process.put(:weatherstack_api_key, "")
    Process.put(:openweathermap_url_base, "https://api.openweathermap.org/data/2.5/weather")
    Process.put(:weatherstack_url_base, "http://api.weatherstack.com/current")
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
