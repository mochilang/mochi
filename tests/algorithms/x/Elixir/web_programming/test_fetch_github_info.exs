# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_header(hs, key) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(hs) do
          pair = Enum.at(hs, i, [])
          if Enum.at(pair, 0, []) == key do
            throw {:return, Enum.at(pair, 1, [])}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, ""}
    catch
      {:return, val} -> val
    end
  end
  def mock_response(url, headers) do
    try do
      if url != Process.get(:authenticated_user_endpoint) do
        raise("wrong url")
      end
      auth = get_header(headers, "Authorization")
      if _len(auth) == 0 do
        raise("missing Authorization")
      end
      if _slice(auth, 0, 6 - 0) != "token " do
        raise("bad token prefix")
      end
      accept = get_header(headers, "Accept")
      if _len(accept) == 0 do
        raise("missing Accept")
      end
      throw {:return, %{login: "test", id: 1}}
    catch
      {:return, val} -> val
    end
  end
  def fetch_github_info(auth_token) do
    try do
      headers = [["Authorization", ("token " <> auth_token)], ["Accept", "application/vnd.github.v3+json"]]
      throw {:return, mock_response(Process.get(:authenticated_user_endpoint), headers)}
    catch
      {:return, val} -> val
    end
  end
  def test_fetch_github_info() do
    try do
      result = fetch_github_info("token")
      if result.login != "test" do
        raise("login mismatch")
      end
      if result.id != 1 do
        raise("id mismatch")
      end
      IO.puts(result.login)
      IO.puts(Kernel.to_string(result.id))
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_fetch_github_info()
    catch
      {:return, val} -> val
    end
  end
  Process.put(:authenticated_user_endpoint, "https://api.github.com/user")
  def bench_main() do
    Process.put(:authenticated_user_endpoint, "https://api.github.com/user")
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
