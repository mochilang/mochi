# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def rate_of(code) do
    try do
      Enum.each(Process.get(:rates), fn r ->
        if r.code == code do
          throw {:return, r.rate}
        end
      end)
      throw {:return, 0.0}
    catch
      {:return, val} -> val
    end
  end
  def convert_currency(from_, to, amount) do
    try do
      from_rate = rate_of(from_)
      to_rate = rate_of(to)
      if from_rate == 0.0 || to_rate == 0.0 do
        throw {:return, 0.0}
      end
      usd = amount / from_rate
      throw {:return, usd * to_rate}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:rates, [%{code: "USD", rate: 1.0}, %{code: "EUR", rate: 0.9}, %{code: "INR", rate: 83.0}, %{code: "JPY", rate: 156.0}, %{code: "GBP", rate: 0.78}])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:result, convert_currency("USD", "INR", 10.0))
    IO.puts(Kernel.to_string(Process.get(:result)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
