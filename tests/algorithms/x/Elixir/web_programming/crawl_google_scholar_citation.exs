# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_digit(ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Process.get(:digits)) do
          if String.at(Process.get(:digits), i) == ch do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def find_substring(haystack, needle) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i <= _len(haystack) - _len(needle) do
          j = 0
          while_fun_3 = fn while_fun_3, j ->
            if j < _len(needle) do
              if String.at(haystack, i + j) != String.at(needle, j) do
                throw {:break, {j}}
              end
              j = j + 1
              while_fun_3.(while_fun_3, j)
            else
              j
            end
          end
          j = try do
              while_fun_3.(while_fun_3, j)
            catch
              {:break, {j}} -> j
            end

          if j == _len(needle) do
            throw {:return, i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def extract_citation(html) do
    try do
      marker = "Cited by "
      idx = find_substring(html, marker)
      if idx < 0 do
        throw {:return, ""}
      end
      pos = idx + _len(marker)
      result = ""
      while_fun_4 = fn while_fun_4, pos, result ->
        if pos < _len(html) do
          ch = String.at(html, pos)
          if !is_digit(ch) do
            throw {:break, {pos, result}}
          end
          result = (result <> ch)
          pos = pos + 1
          while_fun_4.(while_fun_4, pos, result)
        else
          {pos, result}
        end
      end
      {pos, result} = try do
          while_fun_4.(while_fun_4, pos, result)
        catch
          {:break, {pos, result}} -> {pos, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def get_citation(base_url, params) do
    try do
      html = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>"
      throw {:return, extract_citation(html)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:digits, "0123456789")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    if __name__ == "__main__" do
      params = %{"title" => "Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density", "journal" => "Chem. Mater.", "volume" => "30", "pages" => "3979-3990", "year" => "2018", "hl" => "en"}
      IO.puts(Kernel.inspect(get_citation("https://scholar.google.com/scholar_lookup", params)))
    end
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
