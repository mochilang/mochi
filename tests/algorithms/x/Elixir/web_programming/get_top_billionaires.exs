# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def round1(value) do
    try do
      if value >= 0.0 do
        scaled = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((value * 10.0 + 0.5))
        throw {:return, (:erlang.float(scaled)) / 10.0}
      end
      scaled = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((value * 10.0 - 0.5))
      throw {:return, (:erlang.float(scaled)) / 10.0}
    catch
      {:return, val} -> val
    end
  end
  def years_old(birth_ms, today_ms) do
    try do
      ms_per_year = 31557600000.0
      throw {:return, (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(((today_ms - birth_ms) / ms_per_year))}
    catch
      {:return, val} -> val
    end
  end
  def get_forbes_real_time_billionaires() do
    try do
      response = %{personList: 0}
      out = []
      {out} = Enum.reduce(response.personList.personsLists, {out}, fn person, {out} ->
        worth_billion = round1(person.finalWorth / 1000.0)
        age_years = years_old(person.birthDate, Process.get(:today_ms))
        entry = %{"Name" => person.personName, "Source" => person.source, "Country" => person.countryOfCitizenship, "Gender" => person.gender, "Worth ($)" => (Kernel.to_string(worth_billion) <> " Billion"), "Age" => Kernel.to_string(age_years)}
        out = (out ++ [entry])
        {out}
      end)
      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def display_billionaires(list) do
    try do
      Enum.each(list, fn b ->
        IO.puts(((((((((((Map.get(b, "Name", "") <> " | ") <> Map.get(b, "Source", "")) <> " | ") <> Map.get(b, "Country", "")) <> " | ") <> Map.get(b, "Gender", "")) <> " | ") <> Map.get(b, "Worth ($)", "")) <> " | ") <> Map.get(b, "Age", "")))
      end)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:limit, 10)
  Process.put(:today_ms, 1705017600000.0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:api_url, ("https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=" <> Kernel.to_string(Process.get(:limit))))
    display_billionaires(get_forbes_real_time_billionaires())
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
