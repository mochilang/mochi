# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def parse_int(s) do
    try do
      value = 0
      i = 0
      while_fun = fn while_fun, i, value ->
        if i < _len(s) do
          {i, value} = try do
            ch = _slice(s, i, i + 1 - (i))
            {i} = if ch == "," do
              i = i + 1
              throw {:continue, {i, value}}
              {i}
            else
              {i}
            end
            value = value * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(ch))
            i = i + 1
            {i, value}
          catch
            {:continue, {i, value}} -> {i, value}
          end
          while_fun.(while_fun, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun.(while_fun, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def find(haystack, needle, start) do
    try do
      nlen = _len(needle)
      i = start
      while_fun_2 = fn while_fun_2, i ->
        if i <= _len(haystack) - nlen do
          j = 0
          matched = true
          while_fun_3 = fn while_fun_3, j, matched ->
            if j < nlen do
              {matched} = if _slice(haystack, i + j, i + j + 1 - (i + j)) != _slice(needle, j, j + 1 - (j)) do
                matched = false
                throw {:break, {j, matched}}
                {matched}
              else
                {matched}
              end
              j = j + 1
              while_fun_3.(while_fun_3, j, matched)
            else
              {j, matched}
            end
          end
          {j, matched} = try do
              while_fun_3.(while_fun_3, j, matched)
            catch
              {:break, {j, matched}} -> {j, matched}
            end

          if matched do
            throw {:return, i}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, 0 - 1}
    catch
      {:return, val} -> val
    end
  end
  def extract_numbers(html) do
    try do
      nums = []
      pos = 0
      start_tag = "<span>"
      end_tag = "</span>"
      while_fun_4 = fn while_fun_4, nums, pos ->
        if true do
          s = find(html, start_tag, pos)
          if s == 0 - 1 do
            throw {:break, {nums, pos}}
          end
          content_start = s + _len(start_tag)
          e = find(html, end_tag, content_start)
          if e == 0 - 1 do
            throw {:break, {nums, pos}}
          end
          num_str = _slice(html, content_start, e - (content_start))
          nums = (nums ++ [parse_int(num_str)])
          pos = e + _len(end_tag)
          while_fun_4.(while_fun_4, nums, pos)
        else
          {nums, pos}
        end
      end
      {nums, pos} = try do
          while_fun_4.(while_fun_4, nums, pos)
        catch
          {:break, {nums, pos}} -> {nums, pos}
        end

      throw {:return, nums}
    catch
      {:return, val} -> val
    end
  end
  def covid_stats(html) do
    try do
      nums = extract_numbers(html)
      throw {:return, %{cases: Enum.at(nums, 0, []), deaths: Enum.at(nums, 1, []), recovered: Enum.at(nums, 2, [])}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      sample_html = (("<div class=\"maincounter-number\"><span>123456</span></div>" <> "<div class=\"maincounter-number\"><span>7890</span></div>") <> "<div class=\"maincounter-number\"><span>101112</span></div>")
      stats = covid_stats(sample_html)
      IO.puts(("Total COVID-19 cases in the world: " <> Kernel.to_string(stats.cases)))
      IO.puts(("Total deaths due to COVID-19 in the world: " <> Kernel.to_string(stats.deaths)))
      IO.puts(("Total COVID-19 patients recovered in the world: " <> Kernel.to_string(stats.recovered)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
