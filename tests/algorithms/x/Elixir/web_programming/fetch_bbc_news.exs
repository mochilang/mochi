# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def fetch_bbc_news(api_key) do
    try do
      url = ("https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey=" <> api_key)
      resp = %{articles: 0}
      if _len(Map.get(resp, :articles, [])) == 0 do
        IO.puts("No articles found.")
        throw {:return, nil}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(Map.get(resp, :articles, [])) do
          article = Enum.at(resp.articles, i, 0)
          IO.puts(((Kernel.to_string(i + 1) <> ".) ") <> article.title))
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    fetch_bbc_news("test")
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
