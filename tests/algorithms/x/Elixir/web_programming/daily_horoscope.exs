# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def horoscope(zodiac_sign, day) do
    try do
      day_index = 0 - 1
      i = 0
      while_fun = fn while_fun, day_index, i ->
        if i < _len(Process.get(:days)) do
          {day_index} = if day == Enum.at(Process.get(:days), i, []) do
            day_index = i
            throw {:break, {day_index, i}}
            {day_index}
          else
            {day_index}
          end
          i = i + 1
          while_fun.(while_fun, day_index, i)
        else
          {day_index, i}
        end
      end
      {day_index, i} = try do
          while_fun.(while_fun, day_index, i)
        catch
          {:break, {day_index, i}} -> {day_index, i}
        end

      sign_index = zodiac_sign - 1
      if day_index == 0 - 1 do
        throw {:return, "Invalid zodiac sign or day"}
      end
      if sign_index < 0 || sign_index >= _len(Process.get(:zodiac_names)) do
        throw {:return, "Invalid zodiac sign or day"}
      end
      throw {:return, ((Enum.at(Process.get(:zodiac_names), sign_index, []) <> ": ") <> Enum.at(Process.get(:day_messages), day_index, []))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      result = horoscope(1, "today")
      IO.puts(result)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:days, ["yesterday", "today", "tomorrow"])
  Process.put(:zodiac_names, ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"])
  Process.put(:day_messages, ["Reflect on what has passed and learn from it.", "Focus on the present and take decisive action.", "Prepare for future opportunities with optimism."])
  def bench_main() do
    Process.put(:days, ["yesterday", "today", "tomorrow"])
    Process.put(:zodiac_names, ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"])
    Process.put(:day_messages, ["Reflect on what has passed and learn from it.", "Focus on the present and take decisive action.", "Prepare for future opportunities with optimism."])
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
