# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, sub, start) do
    try do
      n = _len(s)
      m = _len(sub)
      i = start
      while_fun = fn while_fun ->
        if i <= n - m do
          j = 0
          while_fun_2 = fn while_fun_2, j ->
            if j < m && _slice(s, i + j, (i + j + 1) - (i + j)) == _slice(sub, j, (j + 1) - j) do
              j = j + 1
              while_fun_2.(while_fun_2, j)
            else
              j
            end
          end
          j = try do
              while_fun_2.(while_fun_2, j)
            catch
              {:break, {j}} -> j
            end

          if j == m do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun)
        else
          nil
        end
      end
      try do
        while_fun.(while_fun)
      catch
        :break -> nil
      end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def find_all(html, open, close) do
    try do
      res = []
      pos = 0
      ol = _len(open)
      cl = _len(close)
      while_fun_3 = fn while_fun_3, pos, res ->
        if true do
          start = index_of(html, open, pos)
          if start < 0 do
            throw {:break, {pos, res}}
          end
          begin = start + ol
          end_ = index_of(html, close, begin)
          if end_ < 0 do
            throw {:break, {pos, res}}
          end
          res = (res ++ [_slice(html, begin, end_ - begin)])
          pos = end_ + cl
          while_fun_3.(while_fun_3, pos, res)
        else
          {pos, res}
        end
      end
      {pos, res} = try do
          while_fun_3.(while_fun_3, pos, res)
        catch
          {:break, {pos, res}} -> {pos, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def world_covid19_stats(html) do
    try do
      keys = find_all(html, "<h1>", "</h1>")
      values = find_all(html, "<div class=\"maincounter-number\"><span>", "</span></div>")
      extra_keys = find_all(html, "<span class=\"panel-title\">", "</span>")
      {keys} = Enum.reduce(extra_keys, {keys}, fn k, {keys} ->
        keys = (keys ++ [k])
        {keys}
      end)
      extra_vals = find_all(html, "<div class=\"number-table-main\">", "</div>")
      {values} = Enum.reduce(extra_vals, {values}, fn v, {values} ->
        values = (values ++ [v])
        {values}
      end)
      res = []
      i = 0
      while_fun_4 = fn while_fun_4, res ->
        if i < _len(keys) && i < _len(values) do
          res = (res ++ [[Enum.at(keys, i, []), Enum.at(values, i, [])]])
          i = i + 1
          while_fun_4.(while_fun_4, res)
        else
          res
        end
      end
      res = try do
          while_fun_4.(while_fun_4, res)
        catch
          {:break, {res}} -> res
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:sample_html, "<h1>Coronavirus Cases:</h1><div class=\"maincounter-number\"><span>100</span></div><h1>Deaths:</h1><div class=\"maincounter-number\"><span>10</span></div><h1>Recovered:</h1><div class=\"maincounter-number\"><span>50</span></div><span class=\"panel-title\">Active Cases</span><div class=\"number-table-main\">20</div><span class=\"panel-title\">Closed Cases</span><div class=\"number-table-main\">80</div>")
  Process.put(:i, 0)
  def main() do
    Process.put(:stats, world_covid19_stats(Process.get(:sample_html)))
    IO.puts("COVID-19 Status of the World\n")
    while_fun_5 = fn while_fun_5 ->
      if Process.get(:i) < _len(Process.get(:stats)) do
        IO.puts(Enum.at(Enum.at(Process.get(:stats), Process.get(:i), []), 0, 0))
        IO.puts(Enum.at(Enum.at(Process.get(:stats), Process.get(:i), []), 1, 0))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_5.(while_fun_5)
      else
        nil
      end
    end
    try do
      while_fun_5.(while_fun_5)
    catch
      :break -> nil
    end

  end
end
Main.main()
