# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  def get_apod_data(api_key) do
    try do
      data = %{title: _fetch("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY"), url: ""}
      throw {:return, data}
    catch
      {:return, val} -> val
    end
  end
  def save_apod(api_key) do
    try do
      apod = get_apod_data(api_key)
      throw {:return, apod}
    catch
      {:return, val} -> val
    end
  end
  def get_archive_data(query) do
    try do
      data = %{collection: 0}
      throw {:return, data}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      apod = save_apod("DEMO_KEY")
      IO.puts(apod.title)
      archive = get_archive_data("apollo 2011")
      items = archive.collection.items
      first_item = first.(items)
      first_data = first.(first_item.data)
      IO.puts(first_data.description)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
