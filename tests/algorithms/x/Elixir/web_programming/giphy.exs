# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def format_query(q) do
    try do
      result = ""
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(q) do
          ch = _slice(q, i, (i + 1) - i)
          result = (if ch == " ", do: (result <> "+"), else: (result <> ch))
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def join(xs, sep) do
    try do
      if _len(xs) == 0 do
        throw {:return, ""}
      end
      out = Enum.at(xs, 0, [])
      i = 1
      while_fun_2 = fn while_fun_2, i, out ->
        if i < _len(xs) do
          out = ((out <> sep) <> Enum.at(xs, i, []))
          i = i + 1
          while_fun_2.(while_fun_2, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_2.(while_fun_2, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def get_gifs(query) do
    try do
      formatted = format_query(query)
      gifs = 
      urls = []
      {urls} = Enum.reduce(gifs, {urls}, fn g, {urls} ->
        urls = (urls ++ [g.url])
        {urls}
      end)
      throw {:return, urls}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(join(get_gifs("space ship"), "\n")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
