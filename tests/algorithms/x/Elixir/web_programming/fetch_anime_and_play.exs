# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains_str(s, sub) do
    try do
      if _len(sub) == 0 do
        throw {:return, true}
      end
      i = 0
      while_fun = fn while_fun, i ->
        if i + _len(sub) <= _len(s) do
          if _slice(s, i, i + _len(sub) - (i)) == sub do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def search_scraper(anime_name) do
    try do
      term = String.downcase(anime_name)
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(Process.get(:anime_db)) do
          item = Enum.at(Process.get(:anime_db), i, [])
          {res} = if contains_str(String.downcase(Map.get(item, "title", "")), term) do
            res = (res ++ [item])
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def search_anime_episode_list(endpoint) do
    try do
      if Map.has_key?(Process.get(:episode_db), endpoint) do
        throw {:return, Process.get(:episode_db)[endpoint]}
      end
      empty = []
      throw {:return, empty}
    catch
      {:return, val} -> val
    end
  end
  def to_playlist(embed) do
    try do
      throw {:return, (("/playlist/" <> _slice(embed, 7, _len(embed) - 7)) <> ".m3u8")}
    catch
      {:return, val} -> val
    end
  end
  def get_anime_episode(endpoint) do
    try do
      if Map.has_key?(Process.get(:episode_embed), endpoint) do
        embed = Map.get(Process.get(:episode_embed), endpoint, "")
        play = (Process.get(:base_url) <> embed)
        download = (Process.get(:base_url) <> to_playlist(embed))
        throw {:return, [play, download]}
      end
      empty = []
      throw {:return, empty}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      animes = search_scraper("demon")
      IO.puts(Kernel.inspect(animes))
      episodes = search_anime_episode_list("/anime/kimetsu-no-yaiba")
      IO.puts(Kernel.inspect(episodes))
      links = get_anime_episode("/watch/kimetsu-no-yaiba/1")
      IO.puts(Kernel.inspect(links))
    catch
      {:return, val} -> val
    end
  end
  Process.put(:base_url, "https://ww7.gogoanime2.org")
  Process.put(:anime_db, [%{"title" => "Demon Slayer", "url" => "/anime/kimetsu-no-yaiba"}, %{"title" => "Naruto", "url" => "/anime/naruto"}])
  Process.put(:episode_db, %{"/anime/kimetsu-no-yaiba" => [%{"title" => "Episode 1", "url" => "/watch/kimetsu-no-yaiba/1"}, %{"title" => "Episode 2", "url" => "/watch/kimetsu-no-yaiba/2"}], "/anime/naruto" => [%{"title" => "Episode 1", "url" => "/watch/naruto/1"}]})
  Process.put(:episode_embed, %{"/watch/kimetsu-no-yaiba/1" => "/embed/kimetsu-no-yaiba/1", "/watch/kimetsu-no-yaiba/2" => "/embed/kimetsu-no-yaiba/2", "/watch/naruto/1" => "/embed/naruto/1"})
  def bench_main() do
    Process.put(:base_url, "https://ww7.gogoanime2.org")
    Process.put(:anime_db, [%{"title" => "Demon Slayer", "url" => "/anime/kimetsu-no-yaiba"}, %{"title" => "Naruto", "url" => "/anime/naruto"}])
    Process.put(:episode_db, %{"/anime/kimetsu-no-yaiba" => [%{"title" => "Episode 1", "url" => "/watch/kimetsu-no-yaiba/1"}, %{"title" => "Episode 2", "url" => "/watch/kimetsu-no-yaiba/2"}], "/anime/naruto" => [%{"title" => "Episode 1", "url" => "/watch/naruto/1"}]})
    Process.put(:episode_embed, %{"/watch/kimetsu-no-yaiba/1" => "/embed/kimetsu-no-yaiba/1", "/watch/kimetsu-no-yaiba/2" => "/embed/kimetsu-no-yaiba/2", "/watch/naruto/1" => "/embed/naruto/1"})
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
