# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _input() do
    case IO.gets("") do
      nil -> ""
      :eof -> ""
      line -> String.trim(line)
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  def get_ip_geolocation(ip_address) do
    try do
      url = (("https://ipinfo.io/" <> ip_address) <> "/json")
      data = _fetch(url)
      if Map.has_key?(data, "city") && Map.has_key?(data, "region") && Map.has_key?(data, "country") do
        throw {:return, ((((("Location: " <> Map.get(data, "city", "")) <> ", ") <> Map.get(data, "region", "")) <> ", ") <> Map.get(data, "country", ""))}
      end
      throw {:return, "Location data not found."}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:ip_address, _input())
    Process.put(:location, get_ip_geolocation(Process.get(:ip_address)))
    IO.puts(Process.get(:location))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
