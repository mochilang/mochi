# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def find_from(s, pattern, start) do
    try do
      n = _len(s)
      m = _len(pattern)
      i = start
      while_fun = fn while_fun, i ->
        if i <= n - m do
          if _slice(s, i, i + m - (i)) == pattern do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def download_image(html) do
    try do
      tag = "<meta property=\"og:image\""
      idx_tag = find_from(html, tag, 0)
      if idx_tag == (-1) do
        throw {:return, "No meta tag with property 'og:image' was found."}
      end
      key = "content=\""
      idx_content = find_from(html, key, idx_tag)
      if idx_content == (-1) do
        throw {:return, "Image URL not found in meta tag."}
      end
      start = idx_content + _len(key)
      end_ = start
      while_fun_2 = fn while_fun_2, end_ ->
        if end_ < _len(html) && _slice(html, end_, end_ + 1 - (end_)) != "\"" do
          end_ = end_ + 1
          while_fun_2.(while_fun_2, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_2.(while_fun_2, end_)
        catch
          {:break, {end_}} -> end_
        end

      if end_ >= _len(html) do
        throw {:return, "Image URL not found in meta tag."}
      end
      image_url = _slice(html, start, end_ - (start))
      throw {:return, ("Image URL: " <> image_url)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:sample_html, "<html><head><meta property=\"og:image\" content=\"https://example.com/pic.jpg\"/></head></html>")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(download_image(Process.get(:sample_html))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
