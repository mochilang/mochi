# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def find(text, pattern, start) do
    try do
      i = start
      limit = _len(text) - _len(pattern)
      while_fun = fn while_fun, i ->
        if i <= limit do
          if _slice(text, i, i + _len(pattern) - (i)) == pattern do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def stock_price(symbol) do
    try do
      pages = %{"AAPL" => "<span data-testid=\"qsp-price\">228.43</span>", "AMZN" => "<span data-testid=\"qsp-price\">201.85</span>", "IBM" => "<span data-testid=\"qsp-price\">210.30</span>", "GOOG" => "<span data-testid=\"qsp-price\">177.86</span>", "MSFT" => "<span data-testid=\"qsp-price\">414.82</span>", "ORCL" => "<span data-testid=\"qsp-price\">188.87</span>"}
      if Map.has_key?(pages, symbol) do
        html = Map.get(pages, symbol, "")
        marker = "<span data-testid=\"qsp-price\">"
        start_idx = find(html, marker, 0)
        if start_idx != (-1) do
          price_start = start_idx + _len(marker)
          end_idx = find(html, "</span>", price_start)
          if end_idx != (-1) do
            throw {:return, _slice(html, price_start, end_idx - (price_start))}
          end
        end
      end
      throw {:return, "No <fin-streamer> tag with the specified data-testid attribute found."}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Enum.each(["AAPL", "AMZN", "IBM", "GOOG", "MSFT", "ORCL"], fn symbol ->
      IO.puts(((("Current " <> symbol) <> " stock price is ") <> stock_price(symbol)))
    end)
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
