# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of_substr(s, pat) do
    try do
      if _len(pat) == 0 do
        throw {:return, 0}
      end
      i = 0
      while_fun = fn while_fun ->
        if i <= _len(s) - _len(pat) do
          j = 0
          while_fun_2 = fn while_fun_2, j ->
            if j < _len(pat) do
              if String.at(s, i + j) != String.at(pat, j) do
                throw {:break, {j}}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j)
            else
              j
            end
          end
          j = try do
              while_fun_2.(while_fun_2, j)
            catch
              {:break, {j}} -> j
            end

          if j == _len(pat) do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun)
        else
          nil
        end
      end
      try do
        while_fun.(while_fun)
      catch
        :break -> nil
      end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def first_link(html) do
    try do
      a_idx = index_of_substr(html, "<a")
      if a_idx < 0 do
        throw {:return, ""}
      end
      href_pat = "href=\""
      href_idx_rel = index_of_substr(_slice(html, a_idx, _len(html) - a_idx), href_pat)
      if href_idx_rel < 0 do
        throw {:return, ""}
      end
      start = a_idx + href_idx_rel + _len(href_pat)
      end_ = start
      while_fun_3 = fn while_fun_3, end_ ->
        if end_ < _len(html) do
          if String.at(html, end_) == "\"" do
            throw {:break, {end_}}
          end
          end_ = end_ + 1
          while_fun_3.(while_fun_3, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_3.(while_fun_3, end_)
        catch
          {:break, {end_}} -> end_
        end

      throw {:return, _slice(html, start, end_ - start)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:query_words, ["mochi", "language"])
  Process.put(:query, "")
  Process.put(:i, 0)
  def main() do
    while_fun_4 = fn while_fun_4 ->
      if Process.get(:i) < _len(Process.get(:query_words)) do
        if Process.get(:i) > 0 do
          Process.put(:query, (Process.get(:query) <> "%20"))
        end
        Process.put(:query, (Process.get(:query) <> Enum.at(Process.get(:query_words), Process.get(:i), [])))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_4.(while_fun_4)
      else
        nil
      end
    end
    try do
      while_fun_4.(while_fun_4)
    catch
      :break -> nil
    end

    Process.put(:url, (("https://www.google.com/search?q=" <> Process.get(:query)) <> "&num=100"))
    IO.puts("Googling.....")
    Process.put(:sample_html, ("<div><a href=\"https://example.com\">Example</a></div>" <> "<div><a href=\"https://another.com\">Another</a></div>"))
    Process.put(:link, first_link(Process.get(:sample_html)))
    if _len(Process.get(:link)) > 0 do
      IO.puts(Process.get(:link))
    end
  end
end
Main.main()
