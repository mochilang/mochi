# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of_from(s, sub, start) do
    try do
      i = start
      max = _len(s) - _len(sub)
      while_fun = fn while_fun, i ->
        if i <= max do
          if _slice(s, i, (i + _len(sub)) - i) == sub do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def extract_links(html) do
    try do
      res = []
      i = 0
      while_fun_2 = fn while_fun_2, i, res ->
        if true do
          tag_start = index_of_from(html, "<a class=\"eZt8xd\"", i)
          if tag_start == (-1) do
            throw {:break, {i, res}}
          end
          href_start = index_of_from(html, "href=\"", tag_start)
          if href_start == (-1) do
            throw {:break, {i, res}}
          end
          href_start = href_start + _len("href=\"")
          href_end = index_of_from(html, "\"", href_start)
          if href_end == (-1) do
            throw {:break, {i, res}}
          end
          href = _slice(html, href_start, href_end - href_start)
          text_start = index_of_from(html, ">", href_end) + 1
          text_end = index_of_from(html, "</a>", text_start)
          if text_end == (-1) do
            throw {:break, {i, res}}
          end
          text = _slice(html, text_start, text_end - text_start)
          link = %{"href" => href, "text" => text}
          res = (res ++ [link])
          i = text_end + _len("</a>")
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      html = (("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" <> "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>") <> "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>")
      links = extract_links(html)
      IO.puts(Kernel.inspect(_len(links)))
      i = 0
      while_fun_3 = fn while_fun_3, i ->
        if i < _len(links) && i < 5 do
          link = Enum.at(links, i, [])
          href = Map.get(link, "href", "")
          text = Map.get(link, "text", "")
          if text == "Maps" do
            IO.puts(href)
          else
            IO.puts(("https://google.com" <> href))
          end
          i = i + 1
          while_fun_3.(while_fun_3, i)
        else
          i
        end
      end
      i = try do
          while_fun_3.(while_fun_3, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
