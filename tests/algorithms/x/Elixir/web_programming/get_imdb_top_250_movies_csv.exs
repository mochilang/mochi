# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def get_imdb_top_250_movies(url) do
    try do
      movies = %{"The Shawshank Redemption" => 9.2, "The Godfather" => 9.2, "The Dark Knight" => 9.0}
      throw {:return, movies}
    catch
      {:return, val} -> val
    end
  end
  def write_movies(filename) do
    try do
      movies = get_imdb_top_250_movies("")
      IO.puts("Movie title,IMDb rating")
      Enum.each(Map.keys(movies), fn title ->
        rating = movies[title]
        IO.puts(((title <> ",") <> Kernel.to_string(rating)))
      end)
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    write_movies("IMDb_Top_250_Movies.csv")
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
