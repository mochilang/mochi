# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def fetch_last_half_hour() do
    try do
      resp = %{data: 0}
      entry = Enum.at(resp.data, 0, 0)
      throw {:return, entry.intensity.actual}
    catch
      {:return, val} -> val
    end
  end
  def fetch_from_to(start, end_) do
    try do
      url = ((((Process.get(:base_url) <> "/") <> start) <> "/") <> end_)
      resp = %{data: 0}
      throw {:return, resp.data}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      entries = fetch_from_to("2020-10-01", "2020-10-03")
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(entries) do
          e = Enum.at(entries, i, [])
          IO.puts("from #{e.from} to #{e.to} : #{e.intensity.actual}")
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      last = fetch_last_half_hour()
      IO.puts("fetch_last_half_hour() = #{last}")
    catch
      {:return, val} -> val
    end
  end
  Process.put(:base_url, "https://api.carbonintensity.org.uk/intensity")
  def bench_main() do
    Process.put(:base_url, "https://api.carbonintensity.org.uk/intensity")
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
