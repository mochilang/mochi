# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def http_post(secret, client) do
    try do
      success = secret == "secretKey" && client == "clientKey"
      throw {:return, %{"success" => success}}
    catch
      {:return, val} -> val
    end
  end
  def authenticate(username, password) do
    try do
      throw {:return, username == "user" && password == "pass"}
    catch
      {:return, val} -> val
    end
  end
  def login(_user) do
    try do
    catch
      {:return, val} -> val
    end
  end
  def render(page) do
    try do
      throw {:return, ("render:" <> page)}
    catch
      {:return, val} -> val
    end
  end
  def redirect(url) do
    try do
      throw {:return, ("redirect:" <> url)}
    catch
      {:return, val} -> val
    end
  end
  def login_using_recaptcha(request) do
    try do
      secret_key = "secretKey"
      if request.method != "POST" do
        throw {:return, render("login.html")}
      end
      username = Map.get(request.post, "username", "")
      password = Map.get(request.post, "password", "")
      client_key = Map.get(request.post, "g-recaptcha-response", "")
      response = http_post(secret_key, client_key)
      if response["success"] do
        if authenticate(username, password) do
          login(username)
          throw {:return, redirect("/your-webpage")}
        end
      end
      throw {:return, render("login.html")}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:get_request, %{method: "GET", post: %{}})
  Process.put(:ok_request, %{method: "POST", post: %{"username" => "user", "password" => "pass", "g-recaptcha-response" => "clientKey"}})
  Process.put(:bad_request, %{method: "POST", post: %{"username" => "user", "password" => "wrong", "g-recaptcha-response" => "clientKey"}})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(login_using_recaptcha(Process.get(:get_request))))
    IO.puts(Kernel.inspect(login_using_recaptcha(Process.get(:ok_request))))
    IO.puts(Kernel.inspect(login_using_recaptcha(Process.get(:bad_request))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
