# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, sub) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i <= _len(s) - _len(sub) do
          if _slice(s, i, i + _len(sub) - (i)) == sub do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def parse_int(s) do
    try do
      value = 0
      i = 0
      while_fun_2 = fn while_fun_2, i, value ->
        if i < _len(s) do
          value = value * 10 + ((fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(String.at(s, i)))
          i = i + 1
          while_fun_2.(while_fun_2, i, value)
        else
          {i, value}
        end
      end
      {i, value} = try do
          while_fun_2.(while_fun_2, i, value)
        catch
          {:break, {i, value}} -> {i, value}
        end

      throw {:return, value}
    catch
      {:return, val} -> val
    end
  end
  def extract_string(text, key) do
    try do
      pattern = (("\"" <> key) <> "\":\"")
      start = index_of(text, pattern) + _len(pattern)
      end_ = start
      while_fun_3 = fn while_fun_3, end_ ->
        if end_ < _len(text) && _slice(text, end_, end_ + 1 - (end_)) != "\"" do
          end_ = end_ + 1
          while_fun_3.(while_fun_3, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_3.(while_fun_3, end_)
        catch
          {:break, {end_}} -> end_
        end

      throw {:return, _slice(text, start, end_ - (start))}
    catch
      {:return, val} -> val
    end
  end
  def extract_int(text, key) do
    try do
      pattern = (("\"" <> key) <> "\":{\"count\":")
      start = index_of(text, pattern) + _len(pattern)
      end_ = start
      while_fun_4 = fn while_fun_4, end_ ->
        if end_ < _len(text) do
          ch = String.at(text, end_)
          if ch < "0" || ch > "9" do
            throw {:break, {end_}}
          end
          end_ = end_ + 1
          while_fun_4.(while_fun_4, end_)
        else
          end_
        end
      end
      end_ = try do
          while_fun_4.(while_fun_4, end_)
        catch
          {:break, {end_}} -> end_
        end

      digits = _slice(text, start, end_ - (start))
      num = parse_int(digits)
      throw {:return, num}
    catch
      {:return, val} -> val
    end
  end
  def extract_bool(text, key) do
    try do
      pattern = (("\"" <> key) <> "\":")
      start = index_of(text, pattern) + _len(pattern)
      val = _slice(text, start, start + 5 - (start))
      first = String.at(val, 0)
      if first == "t" do
        throw {:return, true}
      end
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def extract_user_profile(script) do
    try do
      throw {:return, %{username: extract_string(script, "username"), full_name: extract_string(script, "full_name"), biography: extract_string(script, "biography"), business_email: extract_string(script, "business_email"), external_url: extract_string(script, "external_url"), edge_followed_by: %{count: extract_int(script, "edge_followed_by")}, edge_follow: %{count: extract_int(script, "edge_follow")}, edge_owner_to_timeline_media: %{count: extract_int(script, "edge_owner_to_timeline_media")}, profile_pic_url_hd: extract_string(script, "profile_pic_url_hd"), is_verified: extract_bool(script, "is_verified"), is_private: extract_bool(script, "is_private")}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:sample_script, "{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:user, extract_user_profile(Process.get(:sample_script)))
    IO.puts(((((Process.get(:user).full_name <> " (") <> Process.get(:user).username) <> ") is ") <> Process.get(:user).biography))
    IO.puts(("number_of_posts = " <> Kernel.to_string(Process.get(:user).edge_owner_to_timeline_media.count)))
    IO.puts(("number_of_followers = " <> Kernel.to_string(Process.get(:user).edge_followed_by.count)))
    IO.puts(("number_of_followings = " <> Kernel.to_string(Process.get(:user).edge_follow.count)))
    IO.puts(("email = " <> Process.get(:user).business_email))
    IO.puts(("website = " <> Process.get(:user).external_url))
    IO.puts(("profile_picture_url = " <> Process.get(:user).profile_pic_url_hd))
    IO.puts(("is_verified = " <> Kernel.to_string(Process.get(:user).is_verified)))
    IO.puts(("is_private = " <> Kernel.to_string(Process.get(:user).is_private)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
