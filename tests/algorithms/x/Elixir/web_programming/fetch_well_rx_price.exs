# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def find_substring(s, sub, from) do
    try do
      i = from
      while_fun = fn while_fun, i ->
        if i <= _len(s) - _len(sub) do
          j = 0
          while_fun_2 = fn while_fun_2, j ->
            if j < _len(sub) && _slice(s, i + j, i + j + 1 - (i + j)) == _slice(sub, j, j + 1 - (j)) do
              j = j + 1
              while_fun_2.(while_fun_2, j)
            else
              j
            end
          end
          j = try do
              while_fun_2.(while_fun_2, j)
            catch
              {:break, {j}} -> j
            end

          if j == _len(sub) do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def fetch_pharmacy_and_price_list(drug_name, zip_code) do
    try do
      if drug_name == "" || zip_code == "" do
        throw {:return, nil}
      end
      results = []
      pos = 0
      block_tag = "<div class=\"grid-x pharmCard\">"
      name_tag = "<p class=\"list-title\">"
      price_tag = "<span class=\"price price-large\">"
      while_fun_3 = fn while_fun_3, pos, results ->
        if true do
          div_idx = find_substring(Process.get(:sample_html), block_tag, pos)
          if div_idx < 0 do
            throw {:break, {pos, results}}
          end
          name_start = find_substring(Process.get(:sample_html), name_tag, div_idx)
          if name_start < 0 do
            throw {:break, {pos, results}}
          end
          name_start = name_start + _len(name_tag)
          name_end = find_substring(Process.get(:sample_html), "</p>", name_start)
          if name_end < 0 do
            throw {:break, {pos, results}}
          end
          name = _slice(Process.get(:sample_html), name_start, name_end - (name_start))
          price_start = find_substring(Process.get(:sample_html), price_tag, name_end)
          if price_start < 0 do
            throw {:break, {pos, results}}
          end
          price_start = price_start + _len(price_tag)
          price_end = find_substring(Process.get(:sample_html), "</span>", price_start)
          if price_end < 0 do
            throw {:break, {pos, results}}
          end
          price = _slice(Process.get(:sample_html), price_start, price_end - (price_start))
          results = (results ++ [%{"pharmacy_name" => name, "price" => price}])
          pos = price_end
          while_fun_3.(while_fun_3, pos, results)
        else
          {pos, results}
        end
      end
      {pos, results} = try do
          while_fun_3.(while_fun_3, pos, results)
        catch
          {:break, {pos, results}} -> {pos, results}
        end

      throw {:return, results}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:sample_html, "<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>")
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:pharmacy_price_list, fetch_pharmacy_and_price_list("aspirin", "30303"))
    if Process.get(:pharmacy_price_list) != nil do
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(Process.get(:pharmacy_price_list)) do
          entry = Enum.at(Process.get(:pharmacy_price_list), i, [])
          IO.puts(((("Pharmacy: " <> Map.get(entry, "pharmacy_name", "")) <> " Price: ") <> Map.get(entry, "price", "")))
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

    else
      IO.puts("No results found")
    end
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
