# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def find_index(s, pat, start) do
    try do
      i = start
      while_fun = fn while_fun, i ->
        if i <= _len(s) - _len(pat) do
          j = 0
          ok = true
          while_fun_2 = fn while_fun_2, j, ok ->
            if j < _len(pat) do
              {ok} = if String.at(s, i + j) != String.at(pat, j) do
                ok = false
                throw {:break, {j, ok}}
                {ok}
              else
                {ok}
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, ok)
            else
              {j, ok}
            end
          end
          {j, ok} = try do
              while_fun_2.(while_fun_2, j, ok)
            catch
              {:break, {j, ok}} -> {j, ok}
            end

          if ok do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def slice_between(s, start_pat, end_pat, from) do
    try do
      a = find_index(s, start_pat, from)
      if a < 0 do
        throw {:return, ""}
      end
      b = a + _len(start_pat)
      c = find_index(s, end_pat, b)
      if c < 0 do
        throw {:return, ""}
      end
      throw {:return, _slice(s, b, c - (b))}
    catch
      {:return, val} -> val
    end
  end
  def char_to_digit(c) do
    try do
      if c == "0" do
        throw {:return, 0}
      end
      if c == "1" do
        throw {:return, 1}
      end
      if c == "2" do
        throw {:return, 2}
      end
      if c == "3" do
        throw {:return, 3}
      end
      if c == "4" do
        throw {:return, 4}
      end
      if c == "5" do
        throw {:return, 5}
      end
      if c == "6" do
        throw {:return, 6}
      end
      if c == "7" do
        throw {:return, 7}
      end
      if c == "8" do
        throw {:return, 8}
      end
      throw {:return, 9}
    catch
      {:return, val} -> val
    end
  end
  def parse_int(txt) do
    try do
      n = 0
      i = 0
      while_fun_3 = fn while_fun_3, i, n ->
        if i < _len(txt) do
          c = String.at(txt, i)
          {n} = if c >= "0" && c <= "9" do
            n = n * 10 + char_to_digit(c)
            {n}
          else
            {n}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, n)
        else
          {i, n}
        end
      end
      {i, n} = try do
          while_fun_3.(while_fun_3, i, n)
        catch
          {:break, {i, n}} -> {i, n}
        end

      throw {:return, n}
    catch
      {:return, val} -> val
    end
  end
  def parse_product(block) do
    try do
      href = slice_between(block, "href=\"", "\"", 0)
      link = ("https://www.amazon.in" <> href)
      title = slice_between(block, ">", "</a>", find_index(block, "<a", 0))
      price = slice_between(block, "<span class=\"a-offscreen\">", "</span>", 0)
      rating = slice_between(block, "<span class=\"a-icon-alt\">", "</span>", 0)
      {rating} = if _len(rating) == 0 do
        rating = "Not available"
        {rating}
      else
        {rating}
      end
      mrp = slice_between(block, "<span class=\"a-price a-text-price\">", "</span>", 0)
      disc = 0.0
      {disc, mrp} = if _len(mrp) > 0 && _len(price) > 0 do
        p = parse_int(price)
        m = parse_int(mrp)
        {disc} = if m > 0 do
          disc = :erlang.float(((m - p) * 100)) / (:erlang.float(m))
          {disc}
        else
          {disc}
        end
        {disc, mrp}
      else
        mrp = ""
        disc = 0.0
        {disc, mrp}
      end
      throw {:return, %{title: title, link: link, price: price, rating: rating, mrp: mrp, discount: disc}}
    catch
      {:return, val} -> val
    end
  end
  def get_amazon_product_data(product) do
    try do
      html = "<div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/sample_product\">Sample Product</a></h2><span class=\"a-offscreen\">₹900</span><span class=\"a-icon-alt\">4.3 out of 5 stars</span><span class=\"a-price a-text-price\">₹1000</span></div><div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/item2\">Another Product</a></h2><span class=\"a-offscreen\">₹500</span><span class=\"a-icon-alt\">3.8 out of 5 stars</span><span class=\"a-price a-text-price\">₹800</span></div>"
      out = []
      start = 0
      while_fun_4 = fn while_fun_4, out, start ->
        if true do
          div_start = find_index(html, "<div class=\"s-result-item\"", start)
          if div_start < 0 do
            throw {:break, {out, start}}
          end
          div_end = find_index(html, "</div>", div_start)
          if div_end < 0 do
            throw {:break, {out, start}}
          end
          block = _slice(html, div_start, div_end - (div_start))
          out = (out ++ [parse_product(block)])
          start = div_end + _len("</div>")
          while_fun_4.(while_fun_4, out, start)
        else
          {out, start}
        end
      end
      {out, start} = try do
          while_fun_4.(while_fun_4, out, start)
        catch
          {:break, {out, start}} -> {out, start}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      products = get_amazon_product_data("laptop")
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(products) do
          p = Enum.at(products, i, [])
          IO.puts(((((((((((p.title <> " | ") <> p.link) <> " | ") <> p.price) <> " | ") <> p.rating) <> " | ") <> p.mrp) <> " | ") <> Kernel.to_string(p.discount)))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
