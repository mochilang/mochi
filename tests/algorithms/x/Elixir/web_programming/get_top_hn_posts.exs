# Code generated by Mochi transpiler 2025-08-11 15:32 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def get_hackernews_story(story_id) do
    try do
      url = (("https://hacker-news.firebaseio.com/v0/item/" <> Kernel.to_string(story_id)) <> ".json?print=pretty")
      story = (_fetch(url))
      {story} = if story.url == "" do
        story = Map.put(story, :url, ("https://news.ycombinator.com/item?id=" <> Kernel.to_string(story_id)))
        {story}
      else
        {story}
      end
      throw {:return, story}
    catch
      {:return, val} -> val
    end
  end
  def hackernews_top_stories(max_stories) do
    try do
      url = "https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty"
      ids = (_fetch(url))
      ids = _slice(ids, 0, max_stories - 0)
      stories = []
      i = 0
      while_fun = fn while_fun, i, stories ->
        if i < _len(ids) do
          stories = (stories ++ [get_hackernews_story(Enum.at(ids, i, []))])
          i = i + 1
          while_fun.(while_fun, i, stories)
        else
          {i, stories}
        end
      end
      {i, stories} = try do
          while_fun.(while_fun, i, stories)
        catch
          {:break, {i, stories}} -> {i, stories}
        end

      throw {:return, stories}
    catch
      {:return, val} -> val
    end
  end
  def hackernews_top_stories_as_markdown(max_stories) do
    try do
      stories = hackernews_top_stories(max_stories)
      output = ""
      i = 0
      while_fun_2 = fn while_fun_2, i, output ->
        if i < _len(stories) do
          s = Enum.at(stories, i, [])
          line = (((("* [" <> s.title) <> "](") <> s.url) <> ")")
          output = (if i == 0, do: line, else: ((output <> "\n") <> line))
          i = i + 1
          while_fun_2.(while_fun_2, i, output)
        else
          {i, output}
        end
      end
      {i, output} = try do
          while_fun_2.(while_fun_2, i, output)
        catch
          {:break, {i, output}} -> {i, output}
        end

      throw {:return, output}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(hackernews_top_stories_as_markdown(5)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
