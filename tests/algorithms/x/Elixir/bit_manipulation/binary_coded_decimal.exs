# Code generated by Mochi transpiler 2025-08-06 20:30 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def to_binary4(n) do
    try do
      result = ""
      x = n
      while_fun = fn while_fun, result, x ->
        if x > 0 do
          result = (Kernel.to_string(rem(x, 2)) <> result)
          x = div(x, 2)
          while_fun.(while_fun, result, x)
        else
          {result, x}
        end
      end
      {result, x} = try do
          while_fun.(while_fun, result, x)
        catch
          {:break, {result, x}} -> {result, x}
        end

      while_fun_2 = fn while_fun_2, result ->
        if _len(result) < 4 do
          result = ("0" <> result)
          while_fun_2.(while_fun_2, result)
        else
          result
        end
      end
      result = try do
          while_fun_2.(while_fun_2, result)
        catch
          {:break, {result}} -> result
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def binary_coded_decimal(number) do
    try do
      n = number
      {n} = if n < 0 do
        n = 0
        {n}
      else
        {n}
      end
      digits = Kernel.to_string(n)
      out = "0b"
      i = 0
      while_fun_3 = fn while_fun_3, i, out ->
        if i < _len(digits) do
          d = String.at(digits, i)
          d_int = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(d)
          out = (out <> to_binary4(d_int))
          i = i + 1
          while_fun_3.(while_fun_3, i, out)
        else
          {i, out}
        end
      end
      {i, out} = try do
          while_fun_3.(while_fun_3, i, out)
        catch
          {:break, {i, out}} -> {i, out}
        end

      throw {:return, out}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(binary_coded_decimal(-2)))
    IO.puts(Kernel.inspect(binary_coded_decimal(-1)))
    IO.puts(Kernel.inspect(binary_coded_decimal(0)))
    IO.puts(Kernel.inspect(binary_coded_decimal(3)))
    IO.puts(Kernel.inspect(binary_coded_decimal(2)))
    IO.puts(Kernel.inspect(binary_coded_decimal(12)))
    IO.puts(Kernel.inspect(binary_coded_decimal(987)))
  end
end
Main.main()
