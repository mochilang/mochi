# Code generated by Mochi transpiler 2025-08-06 20:30 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def bit_and(a, b) do
    try do
      ua = a
      ub = b
      res = 0
      bit = 1
      while_fun = fn while_fun, bit, res, ua, ub ->
        if ua > 0 || ub > 0 do
          {res} = if rem(ua, 2) == 1 && rem(ub, 2) == 1 do
            res = res + bit
            {res}
          else
            {res}
          end
          ua = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(ua, 2)))
          ub = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(ub, 2)))
          bit = bit * 2
          while_fun.(while_fun, bit, res, ua, ub)
        else
          {bit, res, ua, ub}
        end
      end
      {bit, res, ua, ub} = try do
          while_fun.(while_fun, bit, res, ua, ub)
        catch
          {:break, {bit, res, ua, ub}} -> {bit, res, ua, ub}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def count_bits_kernighan(n) do
    try do
      if n < 0 do
        raise("the value of input must not be negative")
      end
      num = n
      result = 0
      while_fun_2 = fn while_fun_2, num, result ->
        if num != 0 do
          num = bit_and(num, num - 1)
          result = result + 1
          while_fun_2.(while_fun_2, num, result)
        else
          {num, result}
        end
      end
      {num, result} = try do
          while_fun_2.(while_fun_2, num, result)
        catch
          {:break, {num, result}} -> {num, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def count_bits_modulo(n) do
    try do
      if n < 0 do
        raise("the value of input must not be negative")
      end
      num = n
      result = 0
      while_fun_3 = fn while_fun_3, num, result ->
        if num != 0 do
          {result} = if rem(num, 2) == 1 do
            result = result + 1
            {result}
          else
            {result}
          end
          num = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div(num, 2)))
          while_fun_3.(while_fun_3, num, result)
        else
          {num, result}
        end
      end
      {num, result} = try do
          while_fun_3.(while_fun_3, num, result)
        catch
          {:break, {num, result}} -> {num, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      numbers = [25, 37, 21, 58, 0, 256]
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(numbers) do
          IO.puts(Kernel.inspect(count_bits_kernighan(Enum.at(numbers, i))))
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(numbers) do
          IO.puts(Kernel.inspect(count_bits_modulo(Enum.at(numbers, i))))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
