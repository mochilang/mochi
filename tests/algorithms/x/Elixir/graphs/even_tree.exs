# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def dfs(start, visited) do
    try do
      size = 1
      cuts = 0
      visited = Map.put(visited, start, true)
      {cuts, size} = Enum.reduce(Process.get(:tree)[start], {cuts, size}, fn v, {cuts, size} ->
        {cuts, size} = if !(Map.has_key?(visited, v)) do
          res = dfs(v, visited)
          size = size + Enum.at(res, 0, [])
          cuts = cuts + Enum.at(res, 1, [])
          {cuts, size}
        else
          {cuts, size}
        end
        {cuts, size}
      end)
      cuts = if rem(size, 2) == 0 do
        cuts = cuts + 1
        cuts
      else
        cuts
      end
      throw {:return, [size, cuts]}
    catch
      {:return, val} -> val
    end
  end
  def even_tree() do
    try do
      visited = %{}
      res = dfs(1, visited)
      throw {:return, Enum.at(res, 1, []) - 1}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      edges = [[2, 1], [3, 1], [4, 3], [5, 2], [6, 1], [7, 2], [8, 6], [9, 8], [10, 8]]
      i = 0
      while_fun = fn while_fun, i, tree ->
        if i < _len(edges) do
          u = Enum.at(Enum.at(edges, i, []), 0, 0)
          v = Enum.at(Enum.at(edges, i, []), 1, 0)
          tree = if !(Map.has_key?(Process.get(:tree), u)) do
            Process.put(:tree, Map.put(Process.get(:tree), u, []))
            tree
          else
            tree
          end
          tree = if !(Map.has_key?(Process.get(:tree), v)) do
            Process.put(:tree, Map.put(Process.get(:tree), v, []))
            tree
          else
            tree
          end
          Process.put(:tree, Map.put(Process.get(:tree), u, (Process.get(:tree)[u] ++ [v])))
          Process.put(:tree, Map.put(Process.get(:tree), v, (Process.get(:tree)[v] ++ [u])))
          i = i + 1
          while_fun.(while_fun, i, tree)
        else
          {i, tree}
        end
      end
      {i, tree} = try do
          while_fun.(while_fun, i, tree)
        catch
          {:break, {i, tree}} -> {i, tree}
        end

      IO.puts(Kernel.inspect(even_tree()))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    Process.put(:tree, %{})
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
