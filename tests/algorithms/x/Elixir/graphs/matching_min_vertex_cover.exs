# Code generated by Mochi transpiler 2025-08-08 18:18 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains(xs, v) do
    try do
      Enum.each(xs, fn x ->
        if x == v do
          throw {:return, true}
        end
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def get_edges(graph) do
    try do
      n = map_size(graph)
      edges = []
      {edges} = Enum.reduce((0..(n - 1)//1), {edges}, fn i, {edges} ->
        {edges} = Enum.reduce(graph[i], {edges}, fn j, {edges} ->
          edges = (edges ++ [[i, j]])
          {edges}
        end)
        {edges}
      end)
      throw {:return, edges}
    catch
      {:return, val} -> val
    end
  end
  def matching_min_vertex_cover(graph) do
    try do
      chosen = []
      edges = get_edges(graph)
      while_fun = fn while_fun, chosen, edges ->
        if _len(edges) > 0 do
          idx = _len(edges) - 1
          e = Enum.at(edges, idx)
          edges = _slice(edges, 0, idx - (0))
          u = Enum.at(e, 0)
          v = Enum.at(e, 1)
          {chosen} = if !contains(chosen, u) do
            chosen = (chosen ++ [u])
            {chosen}
          else
            {chosen}
          end
          {chosen} = if !contains(chosen, v) do
            chosen = (chosen ++ [v])
            {chosen}
          else
            {chosen}
          end
          filtered = []
          {filtered} = Enum.reduce(edges, {filtered}, fn edge, {filtered} ->
            a = Enum.at(edge, 0)
            b = Enum.at(edge, 1)
            {filtered} = if a != u && b != u && a != v && b != v do
              filtered = (filtered ++ [edge])
              {filtered}
            else
              {filtered}
            end
            {filtered}
          end)
          edges = filtered
          while_fun.(while_fun, chosen, edges)
        else
          {chosen, edges}
        end
      end
      {chosen, edges} = try do
          while_fun.(while_fun, chosen, edges)
        catch
          {:break, {chosen, edges}} -> {chosen, edges}
        end

      throw {:return, chosen}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:graph, %{0 => [1, 3], 1 => [0, 3], 2 => [0, 3, 4], 3 => [0, 1, 2], 4 => [2, 3]})
  def main() do
    Process.put(:cover, matching_min_vertex_cover(Process.get(:graph)))
    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:cover)])), ",", " "))
  end
end
Main.main()
