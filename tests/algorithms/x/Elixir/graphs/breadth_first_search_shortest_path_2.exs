# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains(xs, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i, []) == x do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def contains_key(m, key) do
    try do
      Enum.each(Map.keys(m), fn k ->
        if k == key do
          throw {:return, true}
        end
      end)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def bfs_shortest_path(graph, start, goal) do
    try do
      explored = []
      queue = [[start]]
      if start == goal do
        throw {:return, [start]}
      end
      while_fun_2 = fn while_fun_2, explored, queue ->
        if _len(queue) > 0 do
          path = Enum.at(queue, 0, [])
          queue = _slice(queue, 1, _len(queue) - (1))
          node_ = Enum.at(path, _len(path) - 1, [])
          {explored, queue} = if !contains(explored, node_) do
            neighbours = graph[node_]
            i = 0
            while_fun_3 = fn while_fun_3, i, queue ->
              if i < _len(neighbours) do
                neighbour = Enum.at(neighbours, i, [])
                new_path = path
                new_path = (new_path ++ [neighbour])
                queue = (queue ++ [new_path])
                if neighbour == goal do
                  throw {:return, new_path}
                end
                i = i + 1
                while_fun_3.(while_fun_3, i, queue)
              else
                {i, queue}
              end
            end
            {i, queue} = try do
                while_fun_3.(while_fun_3, i, queue)
              catch
                {:break, {i, queue}} -> {i, queue}
              end

            explored = (explored ++ [node_])
            {explored, queue}
          else
            {explored, queue}
          end
          while_fun_2.(while_fun_2, explored, queue)
        else
          {explored, queue}
        end
      end
      {explored, queue} = try do
          while_fun_2.(while_fun_2, explored, queue)
        catch
          {:break, {explored, queue}} -> {explored, queue}
        end

      throw {:return, []}
    catch
      {:return, val} -> val
    end
  end
  def bfs_shortest_path_distance(graph, start, target) do
    try do
      if (contains_key(graph, start) == false) || (contains_key(graph, target) == false) do
        throw {:return, -1}
      end
      if start == target do
        throw {:return, 0}
      end
      queue = [start]
      visited = [start]
      dist = %{}
      dist = Map.put(dist, start, 0)
      dist = Map.put(dist, target, (-1))
      while_fun_4 = fn while_fun_4, dist, queue, visited ->
        if _len(queue) > 0 do
          node_ = Enum.at(queue, 0, [])
          queue = _slice(queue, 1, _len(queue) - (1))
          dist = if node_ == target do
            dist = if dist[target] == (-1) || dist[node_] < dist[target] do
              dist = Map.put(dist, target, dist[node_])
              dist
            else
              dist
            end
            dist
          else
            dist
          end
          adj = graph[node_]
          i = 0
          while_fun_5 = fn while_fun_5, dist, i, queue, visited ->
            if i < _len(adj) do
              next = Enum.at(adj, i, [])
              {dist, queue, visited} = if !contains(visited, next) do
                visited = (visited ++ [next])
                queue = (queue ++ [next])
                dist = Map.put(dist, next, dist[node_] + 1)
                {dist, queue, visited}
              else
                {dist, queue, visited}
              end
              i = i + 1
              while_fun_5.(while_fun_5, dist, i, queue, visited)
            else
              {dist, i, queue, visited}
            end
          end
          {dist, i, queue, visited} = try do
              while_fun_5.(while_fun_5, dist, i, queue, visited)
            catch
              {:break, {dist, i, queue, visited}} -> {dist, i, queue, visited}
            end

          while_fun_4.(while_fun_4, dist, queue, visited)
        else
          {dist, queue, visited}
        end
      end
      {dist, queue, visited} = try do
          while_fun_4.(while_fun_4, dist, queue, visited)
        catch
          {:break, {dist, queue, visited}} -> {dist, queue, visited}
        end

      throw {:return, dist[target]}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:demo_graph, %{"A" => ["B", "C", "E"], "B" => ["A", "D", "E"], "C" => ["A", "F", "G"], "D" => ["B"], "E" => ["A", "B", "D"], "F" => ["C"], "G" => ["C"]})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
