# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def add_edge(graph, from, to) do
    try do
      graph = Map.put(graph, from, ((if Map.has_key?(graph, from), do: (graph[from] ++ [to]), else: [to])))
    catch
      {:return, val} -> val
    end
  end
  def print_graph(graph) do
    try do
      Enum.each(Map.keys(graph), fn v ->
        adj = graph[v]
        line = (Kernel.to_string(v) <> "  :  ")
        i = 0
        while_fun = fn while_fun, i, line ->
          if i < _len(adj) do
            line = (line <> Kernel.to_string(Enum.at(adj, i, [])))
            line = if i < _len(adj) - 1 do
              line = (line <> " -> ")
              line
            else
              line
            end
            i = i + 1
            while_fun.(while_fun, i, line)
          else
            {i, line}
          end
        end
        {i, line} = try do
            while_fun.(while_fun, i, line)
          catch
            {:break, {i, line}} -> {i, line}
          end

        IO.puts(line)
      end)
    catch
      {:return, val} -> val
    end
  end
  def bfs(graph, start) do
    try do
      visited = %{}
      queue = []
      order = []
      queue = (queue ++ [start])
      visited = Map.put(visited, start, true)
      head = 0
      while_fun_2 = fn while_fun_2, head, order, queue, visited ->
        if head < _len(queue) do
          vertex = Enum.at(queue, head, [])
          head = head + 1
          order = (order ++ [vertex])
          neighbors = graph[vertex]
          i = 0
          while_fun_3 = fn while_fun_3, i, queue, visited ->
            if i < _len(neighbors) do
              neighbor = Enum.at(neighbors, i, [])
              {queue, visited} = if !(Map.has_key?(visited, neighbor)) do
                visited = Map.put(visited, neighbor, true)
                queue = (queue ++ [neighbor])
                {queue, visited}
              else
                {queue, visited}
              end
              i = i + 1
              while_fun_3.(while_fun_3, i, queue, visited)
            else
              {i, queue, visited}
            end
          end
          {i, queue, visited} = try do
              while_fun_3.(while_fun_3, i, queue, visited)
            catch
              {:break, {i, queue, visited}} -> {i, queue, visited}
            end

          while_fun_2.(while_fun_2, head, order, queue, visited)
        else
          {head, order, queue, visited}
        end
      end
      {head, order, queue, visited} = try do
          while_fun_2.(while_fun_2, head, order, queue, visited)
        catch
          {:break, {head, order, queue, visited}} -> {head, order, queue, visited}
        end

      throw {:return, order}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g, %{})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    add_edge(Process.get(:g), 0, 1)
    add_edge(Process.get(:g), 0, 2)
    add_edge(Process.get(:g), 1, 2)
    add_edge(Process.get(:g), 2, 0)
    add_edge(Process.get(:g), 2, 3)
    add_edge(Process.get(:g), 3, 3)
    print_graph(Process.get(:g))
    IO.puts(Kernel.inspect(bfs(Process.get(:g), 2)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
