# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def newGraph(g, s) do
    try do
      throw {:return, %{graph: g, parent: %{}, source: s}}
    catch
      {:return, val} -> val
    end
  end
  def breath_first_search(g) do
    try do
      parent = g.parent
      parent = Map.put(parent, g.source, g.source)
      queue = [g.source]
      idx = 0
      while_fun = fn while_fun, idx, parent, queue ->
        if idx < _len(queue) do
          vertex = Enum.at(queue, idx, [])
          {parent, queue} = Enum.reduce(g.graph[vertex], {parent, queue}, fn adj, {parent, queue} ->
            {parent, queue} = if !(Map.has_key?(parent, adj)) do
              parent = Map.put(parent, adj, vertex)
              queue = (queue ++ [adj])
              {parent, queue}
            else
              {parent, queue}
            end
            {parent, queue}
          end)
          idx = idx + 1
          while_fun.(while_fun, idx, parent, queue)
        else
          {idx, parent, queue}
        end
      end
      {idx, parent, queue} = try do
          while_fun.(while_fun, idx, parent, queue)
        catch
          {:break, {idx, parent, queue}} -> {idx, parent, queue}
        end

      g = Map.put(g, :parent, parent)
      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def shortest_path(g, target) do
    try do
      if target == g.source do
        throw {:return, g.source}
      end
      if !(Map.has_key?(g.parent, target)) do
        throw {:return, ((("No path from vertex: " <> g.source) <> " to vertex: ") <> target)}
      end
      p = Map.get(g.parent, target, "")
      throw {:return, ((shortest_path(g, p) <> "->") <> target)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:graph, %{"A" => ["B", "C", "E"], "B" => ["A", "D", "E"], "C" => ["A", "F", "G"], "D" => ["B"], "E" => ["A", "B", "D"], "F" => ["C"], "G" => ["C"]})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:g, newGraph(Process.get(:graph), "G"))
    Process.put(:g, breath_first_search(Process.get(:g)))
    IO.puts(Kernel.inspect(shortest_path(Process.get(:g), "D")))
    IO.puts(Kernel.inspect(shortest_path(Process.get(:g), "G")))
    IO.puts(Kernel.inspect(shortest_path(Process.get(:g), "Foo")))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
