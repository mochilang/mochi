# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def rand() do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483648))
      throw {:return, Process.get(:seed)}
    catch
      {:return, val} -> val
    end
  end
  def random() do
    try do
      throw {:return, (1.0 * rand()) / 2147483648.0}
    catch
      {:return, val} -> val
    end
  end
  def complete_graph(vertices_number) do
    try do
      graph = %{}
      i = 0
      while_fun = fn while_fun, graph, i ->
        if i < vertices_number do
          neighbors = []
          j = 0
          while_fun_2 = fn while_fun_2, j, neighbors ->
            if j < vertices_number do
              neighbors = if j != i do
                neighbors = (neighbors ++ [j])
                neighbors
              else
                neighbors
              end
              j = j + 1
              while_fun_2.(while_fun_2, j, neighbors)
            else
              {j, neighbors}
            end
          end
          {j, neighbors} = try do
              while_fun_2.(while_fun_2, j, neighbors)
            catch
              {:break, {j, neighbors}} -> {j, neighbors}
            end

          graph = Map.put(graph, i, neighbors)
          i = i + 1
          while_fun.(while_fun, graph, i)
        else
          {graph, i}
        end
      end
      {graph, i} = try do
          while_fun.(while_fun, graph, i)
        catch
          {:break, {graph, i}} -> {graph, i}
        end

      throw {:return, graph}
    catch
      {:return, val} -> val
    end
  end
  def random_graph(vertices_number, probability, directed) do
    try do
      graph = %{}
      i = 0
      while_fun_3 = fn while_fun_3, graph, i ->
        if i < vertices_number do
          graph = Map.put(graph, i, [])
          i = i + 1
          while_fun_3.(while_fun_3, graph, i)
        else
          {graph, i}
        end
      end
      {graph, i} = try do
          while_fun_3.(while_fun_3, graph, i)
        catch
          {:break, {graph, i}} -> {graph, i}
        end

      if probability >= 1.0 do
        throw {:return, complete_graph(vertices_number)}
      end
      if probability <= 0.0 do
        throw {:return, graph}
      end
      i = 0
      while_fun_4 = fn while_fun_4, graph, i ->
        if i < vertices_number do
          j = i + 1
          while_fun_5 = fn while_fun_5, graph, j ->
            if j < vertices_number do
              graph = if random() < probability do
                graph = Map.put(graph, i, (graph[i] ++ [j]))
                graph = if !directed do
                  graph = Map.put(graph, j, (graph[j] ++ [i]))
                  graph
                else
                  graph
                end
                graph
              else
                graph
              end
              j = j + 1
              while_fun_5.(while_fun_5, graph, j)
            else
              {graph, j}
            end
          end
          {graph, j} = try do
              while_fun_5.(while_fun_5, graph, j)
            catch
              {:break, {graph, j}} -> {graph, j}
            end

          i = i + 1
          while_fun_4.(while_fun_4, graph, i)
        else
          {graph, i}
        end
      end
      {graph, i} = try do
          while_fun_4.(while_fun_4, graph, i)
        catch
          {:break, {graph, i}} -> {graph, i}
        end

      throw {:return, graph}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      Process.put(:seed, 1)
      g1 = random_graph(4, 0.5, false)
      IO.puts(Kernel.inspect(g1))
      Process.put(:seed, 1)
      g2 = random_graph(4, 0.5, true)
      IO.puts(Kernel.inspect(g2))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    Process.put(:seed, 1)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
