# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def dfs(graph, vert, visited) do
    try do
      visited = List.replace_at(visited, vert, true)
      connected_verts = []
      {connected_verts} = Enum.reduce(graph[vert], {connected_verts}, fn neighbour, {connected_verts} ->
        {connected_verts} = if !Enum.at(visited, neighbour) do
          connected_verts = (connected_verts ++ dfs(graph, neighbour, visited))
          {connected_verts}
        else
          {connected_verts}
        end
        {connected_verts}
      end)
      throw {:return, ([vert] ++ connected_verts)}
    catch
      {:return, val} -> val
    end
  end
  def connected_components(graph) do
    try do
      graph_size = map_size(graph)
      visited = []
      {visited} = Enum.reduce((0..(graph_size - 1)//1), {visited}, fn _, {visited} ->
        visited = (visited ++ [false])
        {visited}
      end)
      components_list = []
      {components_list} = Enum.reduce((0..(graph_size - 1)//1), {components_list}, fn i, {components_list} ->
        {components_list} = if !Enum.at(visited, i) do
          component = dfs(graph, i, visited)
          components_list = (components_list ++ [component])
          {components_list}
        else
          {components_list}
        end
        {components_list}
      end)
      throw {:return, components_list}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:test_graph_1, %{0 => [1, 2], 1 => [0, 3], 2 => [0], 3 => [1], 4 => [5, 6], 5 => [4, 6], 6 => [4, 5]})
  Process.put(:test_graph_2, %{0 => [1, 2, 3], 1 => [0, 3], 2 => [0], 3 => [0, 1], 4 => [], 5 => []})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(connected_components(Process.get(:test_graph_1))))
    IO.puts(Kernel.inspect(connected_components(Process.get(:test_graph_2))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
