# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def sort_edges(edges) do
    try do
      es = edges
      i = 0
      while_fun = fn while_fun, es, i ->
        if i < _len(es) do
          j = 0
          while_fun_2 = fn while_fun_2, es, j ->
            if j < _len(es) - i - 1 do
              es = if Enum.at(Enum.at(es, j, []), 2, 0) > Enum.at(Enum.at(es, j + 1, []), 2, 0) do
                tmp = Enum.at(es, j, [])
                es = List.replace_at(es, j, Enum.at(es, j + 1, []))
                es = List.replace_at(es, j + 1, tmp)
                es
              else
                es
              end
              j = j + 1
              while_fun_2.(while_fun_2, es, j)
            else
              {es, j}
            end
          end
          {es, _} = try do
              while_fun_2.(while_fun_2, es, j)
            catch
              {:break, {es, _}} -> {es, 0}
            end

          i = i + 1
          while_fun.(while_fun, es, i)
        else
          {es, i}
        end
      end
      {es, _} = try do
          while_fun.(while_fun, es, i)
        catch
          {:break, {es, _}} -> {es, 0}
        end

      throw {:return, es}
    catch
      {:return, val} -> val
    end
  end
  def find(parent, x) do
    try do
      r = x
      while_fun_3 = fn while_fun_3, r ->
        if Enum.at(parent, r, []) != r do
          r = Enum.at(parent, r, [])
          while_fun_3.(while_fun_3, r)
        else
          r
        end
      end
      r = try do
          while_fun_3.(while_fun_3, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def kruskal(n, edges) do
    try do
      parent = []
      i = 0
      while_fun_4 = fn while_fun_4, i, parent ->
        if i < n do
          parent = (parent ++ [i])
          i = i + 1
          while_fun_4.(while_fun_4, i, parent)
        else
          {i, parent}
        end
      end
      {_, parent} = try do
          while_fun_4.(while_fun_4, i, parent)
        catch
          {:break, {_, parent}} -> {0, parent}
        end

      sorted = sort_edges(edges)
      mst = []
      e = 0
      while_fun_5 = fn while_fun_5, e, mst, parent ->
        if e < _len(sorted) do
          if _len(mst) == n - 1 do
            throw {:break, {e, mst, parent}}
          end
          edge = Enum.at(sorted, e, [])
          e = e + 1
          u = Enum.at(edge, 0, [])
          v = Enum.at(edge, 1, [])
          w = Enum.at(edge, 2, [])
          ru = find(parent, u)
          rv = find(parent, v)
          {mst, parent} = if ru != rv do
            parent = List.replace_at(parent, ru, rv)
            mst = (mst ++ [[u, v, w]])
            {mst, parent}
          else
            {mst, parent}
          end
          while_fun_5.(while_fun_5, e, mst, parent)
        else
          {e, mst, parent}
        end
      end
      {e, mst, parent} = try do
          while_fun_5.(while_fun_5, e, mst, parent)
        catch
          {:break, {e, mst, parent}} -> {e, mst, parent}
        end

      throw {:return, mst}
    catch
      {:return, val} -> val
    end
  end
  def edges_equal(a, b) do
    try do
      if _len(a) != _len(b) do
        throw {:return, false}
      end
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(a) do
          e1 = Enum.at(a, i, [])
          e2 = Enum.at(b, i, [])
          if Enum.at(e1, 0, []) != Enum.at(e2, 0, []) || Enum.at(e1, 1, []) != Enum.at(e2, 1, []) || Enum.at(e1, 2, []) != Enum.at(e2, 2, []) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      _ = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      num_nodes = 9
      edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]]
      expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]]
      result = kruskal(num_nodes, edges)
      sorted_result = sort_edges(result)
      sorted_expected = sort_edges(expected)
      IO.puts(Kernel.inspect(sorted_result))
      if edges_equal(sorted_expected, sorted_result) do
        IO.puts(true)
      else
        IO.puts(false)
      end
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
