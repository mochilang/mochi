# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def dfs_skip(graph, visited, skip, at) do
    try do
      visited = List.replace_at(visited, at, true)
      count = 1
      {count} = Enum.reduce(Enum.at(graph, at), {count}, fn to, {count} ->
        try do
          if to == skip do
            throw :continue
          end
          {count} = if Enum.at(visited, to) == false do
            count = count + dfs_skip(graph, visited, skip, to)
            {count}
          else
            {count}
          end
        catch
          :continue -> {count}
        end
        {count}
      end)
      throw {:return, count}
    catch
      {:return, val} -> val
    end
  end
  def articulation_points(graph) do
    try do
      n = _len(graph)
      result = []
      v = 0
      while_fun = fn while_fun, result, v ->
        if v < n do
          visited = []
          i = 0
          while_fun_2 = fn while_fun_2, i, visited ->
            if i < n do
              visited = (visited ++ [false])
              i = i + 1
              while_fun_2.(while_fun_2, i, visited)
            else
              {i, visited}
            end
          end
          {i, visited} = try do
              while_fun_2.(while_fun_2, i, visited)
            catch
              {:break, {i, visited}} -> {i, visited}
            end

          start = 0
          while_fun_3 = fn while_fun_3, start ->
            if start == v && start < n do
              start = start + 1
              while_fun_3.(while_fun_3, start)
            else
              start
            end
          end
          start = try do
              while_fun_3.(while_fun_3, start)
            catch
              {:break, {start}} -> start
            end

          reach = dfs_skip(graph, visited, v, start)
          {result} = if reach < n - 1 do
            result = (result ++ [v])
            IO.puts(v)
            {result}
          else
            {result}
          end
          v = v + 1
          while_fun.(while_fun, result, v)
        else
          {result, v}
        end
      end
      {result, v} = try do
          while_fun.(while_fun, result, v)
        catch
          {:break, {result, v}} -> {result, v}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      graph = [[1, 2], [0, 2], [0, 1, 3, 5], [2, 4], [3], [2, 6, 8], [5, 7], [6, 8], [5, 7]]
      articulation_points(graph)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
