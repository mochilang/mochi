# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(xs, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i) == x do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def remove_item(xs, x) do
    try do
      res = []
      removed = false
      i = 0
      while_fun_2 = fn while_fun_2, i, removed, res ->
        if i < _len(xs) do
          {removed, res} = if !removed && Enum.at(xs, i) == x do
            removed = true
            {removed, res}
          else
            res = (res ++ [Enum.at(xs, i)])
            {removed, res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, removed, res)
        else
          {i, removed, res}
        end
      end
      {i, removed, res} = try do
          while_fun_2.(while_fun_2, i, removed, res)
        catch
          {:break, {i, removed, res}} -> {i, removed, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def stable_matching(donor_pref, recipient_pref) do
    try do
      if _len(donor_pref) != _len(recipient_pref) do
        raise("unequal groups")
      end
      n = _len(donor_pref)
      unmatched = []
      i = 0
      while_fun_3 = fn while_fun_3, i, unmatched ->
        if i < n do
          unmatched = (unmatched ++ [i])
          i = i + 1
          while_fun_3.(while_fun_3, i, unmatched)
        else
          {i, unmatched}
        end
      end
      {i, unmatched} = try do
          while_fun_3.(while_fun_3, i, unmatched)
        catch
          {:break, {i, unmatched}} -> {i, unmatched}
        end

      donor_record = []
      i = 0
      while_fun_4 = fn while_fun_4, donor_record, i ->
        if i < n do
          donor_record = (donor_record ++ [-1])
          i = i + 1
          while_fun_4.(while_fun_4, donor_record, i)
        else
          {donor_record, i}
        end
      end
      {donor_record, i} = try do
          while_fun_4.(while_fun_4, donor_record, i)
        catch
          {:break, {donor_record, i}} -> {donor_record, i}
        end

      rec_record = []
      i = 0
      while_fun_5 = fn while_fun_5, i, rec_record ->
        if i < n do
          rec_record = (rec_record ++ [-1])
          i = i + 1
          while_fun_5.(while_fun_5, i, rec_record)
        else
          {i, rec_record}
        end
      end
      {i, rec_record} = try do
          while_fun_5.(while_fun_5, i, rec_record)
        catch
          {:break, {i, rec_record}} -> {i, rec_record}
        end

      num_donations = []
      i = 0
      while_fun_6 = fn while_fun_6, i, num_donations ->
        if i < n do
          num_donations = (num_donations ++ [0])
          i = i + 1
          while_fun_6.(while_fun_6, i, num_donations)
        else
          {i, num_donations}
        end
      end
      {i, num_donations} = try do
          while_fun_6.(while_fun_6, i, num_donations)
        catch
          {:break, {i, num_donations}} -> {i, num_donations}
        end

      while_fun_7 = fn while_fun_7, donor_record, num_donations, rec_record, unmatched ->
        if _len(unmatched) > 0 do
          donor = Enum.at(unmatched, 0)
          donor_preference = Enum.at(donor_pref, donor)
          recipient = Enum.at(donor_preference, Enum.at(num_donations, donor))
          num_donations = List.replace_at(num_donations, donor, Enum.at(num_donations, donor) + 1)
          rec_preference = Enum.at(recipient_pref, recipient)
          prev_donor = Enum.at(rec_record, recipient)
          {donor_record, rec_record, unmatched} = if prev_donor != 0 - 1 do
            prev_index = index_of(rec_preference, prev_donor)
            new_index = index_of(rec_preference, donor)
            {donor_record, rec_record, unmatched} = if prev_index > new_index do
              rec_record = List.replace_at(rec_record, recipient, donor)
              donor_record = List.replace_at(donor_record, donor, recipient)
              unmatched = (unmatched ++ [prev_donor])
              unmatched = remove_item(unmatched, donor)
              {donor_record, rec_record, unmatched}
            else
              {donor_record, rec_record, unmatched}
            end
            {donor_record, rec_record, unmatched}
          else
            rec_record = List.replace_at(rec_record, recipient, donor)
            donor_record = List.replace_at(donor_record, donor, recipient)
            unmatched = remove_item(unmatched, donor)
            {donor_record, rec_record, unmatched}
          end
          while_fun_7.(while_fun_7, donor_record, num_donations, rec_record, unmatched)
        else
          {donor_record, num_donations, rec_record, unmatched}
        end
      end
      {donor_record, num_donations, rec_record, unmatched} = try do
          while_fun_7.(while_fun_7, donor_record, num_donations, rec_record, unmatched)
        catch
          {:break, {donor_record, num_donations, rec_record, unmatched}} -> {donor_record, num_donations, rec_record, unmatched}
        end

      throw {:return, donor_record}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:donor_pref, [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]])
  Process.put(:recipient_pref, [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(stable_matching(Process.get(:donor_pref), Process.get(:recipient_pref))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
