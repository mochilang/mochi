# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains(lst, v) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(lst) do
          if Enum.at(lst, i) == v do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def depth_first_search(graph, start) do
    try do
      explored = []
      stack = []
      stack = (stack ++ [start])
      explored = (explored ++ [start])
      while_fun_2 = fn while_fun_2, explored, stack ->
        if _len(stack) > 0 do
          idx = _len(stack) - 1
          v = Enum.at(stack, idx)
          stack = _slice(stack, 0, idx - (0))
          neighbors = graph[v]
          i = _len(neighbors) - 1
          while_fun_3 = fn while_fun_3, explored, i, stack ->
            if i >= 0 do
              adj = Enum.at(neighbors, i)
              {explored, stack} = if !contains(explored, adj) do
                explored = (explored ++ [adj])
                stack = (stack ++ [adj])
                {explored, stack}
              else
                {explored, stack}
              end
              i = i - 1
              while_fun_3.(while_fun_3, explored, i, stack)
            else
              {explored, i, stack}
            end
          end
          {explored, i, stack} = try do
              while_fun_3.(while_fun_3, explored, i, stack)
            catch
              {:break, {explored, i, stack}} -> {explored, i, stack}
            end

          while_fun_2.(while_fun_2, explored, stack)
        else
          {explored, stack}
        end
      end
      {explored, stack} = try do
          while_fun_2.(while_fun_2, explored, stack)
        catch
          {:break, {explored, stack}} -> {explored, stack}
        end

      throw {:return, explored}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g, %{"A" => ["B", "C", "D"], "B" => ["A", "D", "E"], "C" => ["A", "F"], "D" => ["B", "D"], "E" => ["B", "F"], "F" => ["C", "E", "G"], "G" => ["F"]})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:result, depth_first_search(Process.get(:g), "A"))
    IO.puts(Kernel.inspect(Process.get(:result)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
