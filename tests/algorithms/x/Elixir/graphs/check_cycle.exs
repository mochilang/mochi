# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def depth_first_search(graph, vertex, visited, rec_stk) do
    try do
      visited = List.replace_at(visited, vertex, true)
      rec_stk = List.replace_at(rec_stk, vertex, true)
      Enum.each(Enum.at(graph, vertex, []), fn node_ ->
        if !Enum.at(visited, node_, []) do
          if depth_first_search(graph, node_, visited, rec_stk) do
            throw {:return, true}
          end
        else
          if Enum.at(rec_stk, node_, []) do
            throw {:return, true}
          end
        end
      end)
      rec_stk = List.replace_at(rec_stk, vertex, false)
      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def check_cycle(graph) do
    try do
      n = _len(graph)
      visited = []
      rec_stk = []
      i = 0
      while_fun = fn while_fun, i, rec_stk, visited ->
        if i < n do
          visited = (visited ++ [false])
          rec_stk = (rec_stk ++ [false])
          i = i + 1
          while_fun.(while_fun, i, rec_stk, visited)
        else
          {i, rec_stk, visited}
        end
      end
      {i, rec_stk, visited} = try do
          while_fun.(while_fun, i, rec_stk, visited)
        catch
          {:break, {i, rec_stk, visited}} -> {i, rec_stk, visited}
        end

      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < n do
          if !Enum.at(visited, i, []) do
            if depth_first_search(graph, i, visited, rec_stk) do
              throw {:return, true}
            end
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      i = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def print_bool(b) do
    try do
      if b do
        IO.puts(true)
      else
        IO.puts(false)
      end
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g1, [[], [0, 3], [0, 4], [5], [5], []])
  Process.put(:g2, [[1, 2], [2], [0, 3], [3]])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    print_bool(check_cycle(Process.get(:g1)))
    print_bool(check_cycle(Process.get(:g2)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
