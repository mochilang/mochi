# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def connect(graph, a, b, w) do
    try do
      u = a - 1
      v = b - 1
      g = graph
      g = Map.put(g, u, (g[u] ++ [[v, w]]))
      g = Map.put(g, v, (g[v] ++ [[u, w]]))
      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def in_list(arr, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(arr) do
          if Enum.at(arr, i, []) == x do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def prim(graph, s, n) do
    try do
      dist = %{}
      parent = %{}
      dist = Map.put(dist, s, 0)
      parent = Map.put(parent, s, -1)
      known = []
      keys = [s]
      while_fun_2 = fn while_fun_2, dist, keys, known, parent ->
        if _len(known) < n do
          mini = Process.get(:inf)
          u = -1
          i = 0
          while_fun_3 = fn while_fun_3, i, mini, u ->
            if i < _len(keys) do
              k = Enum.at(keys, i, [])
              d = dist[k]
              {mini, u} = if !(in_list(known, k)) && d < mini do
                mini = d
                u = k
                {mini, u}
              else
                {mini, u}
              end
              i = i + 1
              while_fun_3.(while_fun_3, i, mini, u)
            else
              {i, mini, u}
            end
          end
          {i, mini, u} = try do
              while_fun_3.(while_fun_3, i, mini, u)
            catch
              {:break, {i, mini, u}} -> {i, mini, u}
            end

          known = (known ++ [u])
          {dist, keys, parent} = Enum.reduce(graph[u], {dist, keys, parent}, fn e, {dist, keys, parent} ->
            v = Enum.at(e, 0, [])
            w = Enum.at(e, 1, [])
            keys = if !(in_list(keys, v)) do
              keys = (keys ++ [v])
              keys
            else
              keys
            end
            cur = (if Map.has_key?(dist, v), do: dist[v], else: Process.get(:inf))
            {dist, parent} = if !(in_list(known, v)) && w < cur do
              dist = Map.put(dist, v, w)
              parent = Map.put(parent, v, u)
              {dist, parent}
            else
              {dist, parent}
            end
            {dist, keys, parent}
          end)
          while_fun_2.(while_fun_2, dist, keys, known, parent)
        else
          {dist, keys, known, parent}
        end
      end
      {dist, keys, known, parent} = try do
          while_fun_2.(while_fun_2, dist, keys, known, parent)
        catch
          {:break, {dist, keys, known, parent}} -> {dist, keys, known, parent}
        end

      edges = []
      j = 0
      while_fun_4 = fn while_fun_4, edges, j ->
        if j < _len(keys) do
          v = Enum.at(keys, j, [])
          edges = if v != s do
            edges = (edges ++ [[v + 1, parent[v] + 1]])
            edges
          else
            edges
          end
          j = j + 1
          while_fun_4.(while_fun_4, edges, j)
        else
          {edges, j}
        end
      end
      {edges, j} = try do
          while_fun_4.(while_fun_4, edges, j)
        catch
          {:break, {edges, j}} -> {edges, j}
        end

      throw {:return, edges}
    catch
      {:return, val} -> val
    end
  end
  def sort_heap(h, dist) do
    try do
      a = h
      i = 0
      while_fun_5 = fn while_fun_5, a, i ->
        if i < _len(a) do
          j = 0
          while_fun_6 = fn while_fun_6, a, j ->
            if j < _len(a) - i - 1 do
              dj = (if Map.has_key?(dist, Enum.at(a, j, [])), do: dist[Enum.at(a, j, [])], else: Process.get(:inf))
              dj1 = (if Map.has_key?(dist, Enum.at(a, j + 1, [])), do: dist[Enum.at(a, j + 1, [])], else: Process.get(:inf))
              a = if dj > dj1 do
                t = Enum.at(a, j, [])
                a = List.replace_at(a, j, Enum.at(a, j + 1, []))
                a = List.replace_at(a, j + 1, t)
                a
              else
                a
              end
              j = j + 1
              while_fun_6.(while_fun_6, a, j)
            else
              {a, j}
            end
          end
          {a, j} = try do
              while_fun_6.(while_fun_6, a, j)
            catch
              {:break, {a, j}} -> {a, j}
            end

          i = i + 1
          while_fun_5.(while_fun_5, a, i)
        else
          {a, i}
        end
      end
      {a, i} = try do
          while_fun_5.(while_fun_5, a, i)
        catch
          {:break, {a, i}} -> {a, i}
        end

      throw {:return, a}
    catch
      {:return, val} -> val
    end
  end
  def prim_heap(graph, s, n) do
    try do
      dist = %{}
      parent = %{}
      dist = Map.put(dist, s, 0)
      parent = Map.put(parent, s, -1)
      h = []
      i = 0
      while_fun_7 = fn while_fun_7, h, i ->
        if i < n do
          h = (h ++ [i])
          i = i + 1
          while_fun_7.(while_fun_7, h, i)
        else
          {h, i}
        end
      end
      {h, i} = try do
          while_fun_7.(while_fun_7, h, i)
        catch
          {:break, {h, i}} -> {h, i}
        end

      h = sort_heap(h, dist)
      known = []
      while_fun_8 = fn while_fun_8, dist, h, known, parent ->
        if _len(h) > 0 do
          u = Enum.at(h, 0, [])
          h = _slice(h, 1, _len(h) - (1))
          known = (known ++ [u])
          {dist, parent} = Enum.reduce(graph[u], {dist, parent}, fn e, {dist, parent} ->
            v = Enum.at(e, 0, [])
            w = Enum.at(e, 1, [])
            cur = (if Map.has_key?(dist, v), do: dist[v], else: Process.get(:inf))
            {dist, parent} = if !(in_list(known, v)) && w < cur do
              dist = Map.put(dist, v, w)
              parent = Map.put(parent, v, u)
              {dist, parent}
            else
              {dist, parent}
            end
            {dist, parent}
          end)
          h = sort_heap(h, dist)
          while_fun_8.(while_fun_8, dist, h, known, parent)
        else
          {dist, h, known, parent}
        end
      end
      {dist, h, known, parent} = try do
          while_fun_8.(while_fun_8, dist, h, known, parent)
        catch
          {:break, {dist, h, known, parent}} -> {dist, h, known, parent}
        end

      edges = []
      j = 0
      while_fun_9 = fn while_fun_9, edges, j ->
        if j < n do
          edges = if j != s do
            edges = (edges ++ [[j + 1, parent[j] + 1]])
            edges
          else
            edges
          end
          j = j + 1
          while_fun_9.(while_fun_9, edges, j)
        else
          {edges, j}
        end
      end
      {edges, j} = try do
          while_fun_9.(while_fun_9, edges, j)
        catch
          {:break, {edges, j}} -> {edges, j}
        end

      throw {:return, edges}
    catch
      {:return, val} -> val
    end
  end
  def print_edges(edges) do
    try do
      i = 0
      while_fun_10 = fn while_fun_10, i ->
        if i < _len(edges) do
          e = Enum.at(edges, i, [])
          IO.puts((((("(" <> Kernel.to_string(Enum.at(e, 0, []))) <> ", ") <> Kernel.to_string(Enum.at(e, 1, []))) <> ")"))
          i = i + 1
          while_fun_10.(while_fun_10, i)
        else
          i
        end
      end
      i = try do
          while_fun_10.(while_fun_10, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def test_vector() do
    try do
      x = 5
      g = %{}
      i = 0
      while_fun_11 = fn while_fun_11, g, i ->
        if i < x do
          g = Map.put(g, i, [])
          i = i + 1
          while_fun_11.(while_fun_11, g, i)
        else
          {g, i}
        end
      end
      {g, i} = try do
          while_fun_11.(while_fun_11, g, i)
        catch
          {:break, {g, i}} -> {g, i}
        end

      g = connect(g, 1, 2, 15)
      g = connect(g, 1, 3, 12)
      g = connect(g, 2, 4, 13)
      g = connect(g, 2, 5, 5)
      g = connect(g, 3, 2, 6)
      g = connect(g, 3, 4, 6)
      mst = prim(g, 0, x)
      print_edges(mst)
      mst_heap = prim_heap(g, 0, x)
      print_edges(mst_heap)
    catch
      {:return, val} -> val
    end
  end
  Process.put(:inf, 1000000000)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    test_vector()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
