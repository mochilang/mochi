# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def is_bipartite_bfs(graph) do
    try do
      visited = %{}
      {visited} = Enum.reduce(Map.keys(graph), {visited}, fn node_, {visited} ->
        {visited} = if !(Map.has_key?(visited, node_)) do
          queue = []
          queue = (queue ++ [node_])
          visited = Map.put(visited, node_, 0)
          while_fun = fn while_fun, queue, visited ->
            if _len(queue) > 0 do
              curr = Enum.at(queue, 0)
              queue = _slice(queue, 1, _len(queue) - 1)
              {queue, visited} = Enum.reduce(graph[curr], {queue, visited}, fn neighbor, {queue, visited} ->
                {queue, visited} = if !(Map.has_key?(visited, neighbor)) do
                  visited = Map.put(visited, neighbor, 1 - visited[curr])
                  queue = (queue ++ [neighbor])
                  {queue, visited}
                else
                  if visited[neighbor] == visited[curr] do
                    throw {:return, false}
                  end
                  {queue, visited}
                end
                {queue, visited}
              end)
              while_fun.(while_fun, queue, visited)
            else
              {queue, visited}
            end
          end
          {queue, visited} = try do
              while_fun.(while_fun, queue, visited)
            catch
              {:break, {queue, visited}} -> {queue, visited}
            end

          {visited}
        else
          {visited}
        end
        {visited}
      end)
      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:graph, %{0 => [1, 3], 1 => [0, 2], 2 => [1, 3], 3 => [0, 2]})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(is_bipartite_bfs(Process.get(:graph))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
