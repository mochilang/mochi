# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def floyd_warshall(graph) do
    try do
      v = _len(graph)
      dist = []
      i = 0
      while_fun = fn while_fun, dist, i ->
        if i < v do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < v do
              row = (row ++ [Enum.at(Enum.at(graph, i, []), j, 0)])
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dist = (dist ++ [row])
          i = i + 1
          while_fun.(while_fun, dist, i)
        else
          {dist, i}
        end
      end
      {dist, i} = try do
          while_fun.(while_fun, dist, i)
        catch
          {:break, {dist, i}} -> {dist, i}
        end

      k = 0
      while_fun_3 = fn while_fun_3, dist, k ->
        if k < v do
          i = 0
          while_fun_4 = fn while_fun_4, dist, i ->
            if i < v do
              j = 0
              while_fun_5 = fn while_fun_5, dist, j ->
                if j < v do
                  dist = if Enum.at(Enum.at(dist, i, []), k, 0) < Process.get(:inf) && Enum.at(Enum.at(dist, k, []), j, 0) < Process.get(:inf) && Enum.at(Enum.at(dist, i, []), k, 0) + Enum.at(Enum.at(dist, k, []), j, 0) < Enum.at(Enum.at(dist, i, []), j, 0) do
                    dist = List.replace_at(dist, i, List.replace_at(Enum.at(dist, i), j, Enum.at(Enum.at(dist, i, []), k, 0) + Enum.at(Enum.at(dist, k, []), j, 0)))
                    dist
                  else
                    dist
                  end
                  j = j + 1
                  while_fun_5.(while_fun_5, dist, j)
                else
                  {dist, j}
                end
              end
              {dist, j} = try do
                  while_fun_5.(while_fun_5, dist, j)
                catch
                  {:break, {dist, j}} -> {dist, j}
                end

              i = i + 1
              while_fun_4.(while_fun_4, dist, i)
            else
              {dist, i}
            end
          end
          {dist, i} = try do
              while_fun_4.(while_fun_4, dist, i)
            catch
              {:break, {dist, i}} -> {dist, i}
            end

          k = k + 1
          while_fun_3.(while_fun_3, dist, k)
        else
          {dist, k}
        end
      end
      {dist, k} = try do
          while_fun_3.(while_fun_3, dist, k)
        catch
          {:break, {dist, k}} -> {dist, k}
        end

      throw {:return, dist}
    catch
      {:return, val} -> val
    end
  end
  def print_dist(dist) do
    try do
      IO.puts("\nThe shortest path matrix using Floyd Warshall algorithm\n")
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(dist) do
          j = 0
          line = ""
          while_fun_7 = fn while_fun_7, j, line ->
            if j < _len(Enum.at(dist, i, [])) do
              line = (if Enum.at(Enum.at(dist, i, []), j, 0) >= Process.get(:inf) / 2.0, do: (line <> "INF\t"), else: ((line <> Kernel.inspect(Kernel.trunc(Enum.at(Enum.at(dist, i, []), j, 0)))) <> "\t"))
              j = j + 1
              while_fun_7.(while_fun_7, j, line)
            else
              {j, line}
            end
          end
          {j, line} = try do
              while_fun_7.(while_fun_7, j, line)
            catch
              {:break, {j, line}} -> {j, line}
            end

          IO.puts(line)
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:inf, 1000000000.0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:graph, [[0.0, 5.0, Process.get(:inf), 10.0], [Process.get(:inf), 0.0, 3.0, Process.get(:inf)], [Process.get(:inf), Process.get(:inf), 0.0, 1.0], [Process.get(:inf), Process.get(:inf), Process.get(:inf), 0.0]])
    Process.put(:result, floyd_warshall(Process.get(:graph)))
    print_dist(Process.get(:result))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
