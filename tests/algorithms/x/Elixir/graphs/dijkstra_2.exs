# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def print_dist(dist) do
    try do
      IO.puts("Vertex Distance")
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(dist) do
          if Enum.at(dist, i, []) >= Process.get(:inf) do
            IO.puts("#{i} 	INF")
          else
            IO.puts("#{i} 	 #{(fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(Enum.at(dist, i, []))}")
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def min_dist(mdist, vset) do
    try do
      min_val = Process.get(:inf)
      min_ind = -1
      i = 0
      while_fun_2 = fn while_fun_2, i, min_ind, min_val ->
        if i < _len(mdist) do
          {min_ind, min_val} = if !(Enum.at(vset, i, [])) && Enum.at(mdist, i, []) < min_val do
            min_val = Enum.at(mdist, i, [])
            min_ind = i
            {min_ind, min_val}
          else
            {min_ind, min_val}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, min_ind, min_val)
        else
          {i, min_ind, min_val}
        end
      end
      {i, min_ind, min_val} = try do
          while_fun_2.(while_fun_2, i, min_ind, min_val)
        catch
          {:break, {i, min_ind, min_val}} -> {i, min_ind, min_val}
        end

      throw {:return, min_ind}
    catch
      {:return, val} -> val
    end
  end
  def dijkstra(graph, src) do
    try do
      v = _len(graph)
      mdist = []
      vset = []
      i = 0
      while_fun_3 = fn while_fun_3, i, mdist, vset ->
        if i < v do
          mdist = (mdist ++ [Process.get(:inf)])
          vset = (vset ++ [false])
          i = i + 1
          while_fun_3.(while_fun_3, i, mdist, vset)
        else
          {i, mdist, vset}
        end
      end
      {i, mdist, vset} = try do
          while_fun_3.(while_fun_3, i, mdist, vset)
        catch
          {:break, {i, mdist, vset}} -> {i, mdist, vset}
        end

      mdist = List.replace_at(mdist, src, 0.0)
      count = 0
      while_fun_4 = fn while_fun_4, count, mdist, vset ->
        if count < v - 1 do
          u = min_dist(mdist, vset)
          vset = List.replace_at(vset, u, true)
          i = 0
          while_fun_5 = fn while_fun_5, i, mdist ->
            if i < v do
              alt = Enum.at(mdist, u, []) + Enum.at(Enum.at(graph, u, []), i, 0)
              mdist = if !(Enum.at(vset, i, [])) && Enum.at(Enum.at(graph, u, []), i, 0) < Process.get(:inf) && alt < Enum.at(mdist, i, []) do
                mdist = List.replace_at(mdist, i, alt)
                mdist
              else
                mdist
              end
              i = i + 1
              while_fun_5.(while_fun_5, i, mdist)
            else
              {i, mdist}
            end
          end
          {i, mdist} = try do
              while_fun_5.(while_fun_5, i, mdist)
            catch
              {:break, {i, mdist}} -> {i, mdist}
            end

          count = count + 1
          while_fun_4.(while_fun_4, count, mdist, vset)
        else
          {count, mdist, vset}
        end
      end
      {count, mdist, vset} = try do
          while_fun_4.(while_fun_4, count, mdist, vset)
        catch
          {:break, {count, mdist, vset}} -> {count, mdist, vset}
        end

      throw {:return, mdist}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      graph = [[0.0, 10.0, Process.get(:inf), Process.get(:inf), 5.0], [Process.get(:inf), 0.0, 1.0, Process.get(:inf), 2.0], [Process.get(:inf), Process.get(:inf), 0.0, 4.0, Process.get(:inf)], [Process.get(:inf), Process.get(:inf), 6.0, 0.0, Process.get(:inf)], [Process.get(:inf), 3.0, 9.0, 2.0, 0.0]]
      dist = dijkstra(graph, 0)
      print_dist(dist)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    Process.put(:inf, 1000000000.0)
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
