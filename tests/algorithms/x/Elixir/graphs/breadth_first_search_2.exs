# Code generated by Mochi transpiler 2025-08-08 17:33 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def join(xs) do
    try do
      s = ""
      i = 0
      while_fun = fn while_fun, i, s ->
        if i < _len(xs) do
          s = (s <> Enum.at(xs, i))
          i = i + 1
          while_fun.(while_fun, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun.(while_fun, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def breadth_first_search(graph, start) do
    try do
      explored = %{}
      explored = Map.put(explored, start, true)
      result = [start]
      queue = [start]
      while_fun_2 = fn while_fun_2, explored, queue, result ->
        if _len(queue) > 0 do
          v = Enum.at(queue, 0)
          queue = _slice(queue, 1, _len(queue) - 1)
          children = graph[v]
          i = 0
          while_fun_3 = fn while_fun_3, explored, i, queue, result ->
            if i < _len(children) do
              w = Enum.at(children, i)
              {explored, queue, result} = if !(Map.has_key?(explored, w)) do
                explored = Map.put(explored, w, true)
                result = (result ++ [w])
                queue = (queue ++ [w])
                {explored, queue, result}
              else
                {explored, queue, result}
              end
              i = i + 1
              while_fun_3.(while_fun_3, explored, i, queue, result)
            else
              {explored, i, queue, result}
            end
          end
          {explored, i, queue, result} = try do
              while_fun_3.(while_fun_3, explored, i, queue, result)
            catch
              {:break, {explored, i, queue, result}} -> {explored, i, queue, result}
            end

          while_fun_2.(while_fun_2, explored, queue, result)
        else
          {explored, queue, result}
        end
      end
      {explored, queue, result} = try do
          while_fun_2.(while_fun_2, explored, queue, result)
        catch
          {:break, {explored, queue, result}} -> {explored, queue, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def breadth_first_search_with_deque(graph, start) do
    try do
      visited = %{}
      visited = Map.put(visited, start, true)
      result = [start]
      queue = [start]
      head = 0
      while_fun_4 = fn while_fun_4, head, queue, result, visited ->
        if head < _len(queue) do
          v = Enum.at(queue, head)
          head = head + 1
          children = graph[v]
          i = 0
          while_fun_5 = fn while_fun_5, i, queue, result, visited ->
            if i < _len(children) do
              child = Enum.at(children, i)
              {queue, result, visited} = if !(Map.has_key?(visited, child)) do
                visited = Map.put(visited, child, true)
                result = (result ++ [child])
                queue = (queue ++ [child])
                {queue, result, visited}
              else
                {queue, result, visited}
              end
              i = i + 1
              while_fun_5.(while_fun_5, i, queue, result, visited)
            else
              {i, queue, result, visited}
            end
          end
          {i, queue, result, visited} = try do
              while_fun_5.(while_fun_5, i, queue, result, visited)
            catch
              {:break, {i, queue, result, visited}} -> {i, queue, result, visited}
            end

          while_fun_4.(while_fun_4, head, queue, result, visited)
        else
          {head, queue, result, visited}
        end
      end
      {head, queue, result, visited} = try do
          while_fun_4.(while_fun_4, head, queue, result, visited)
        catch
          {:break, {head, queue, result, visited}} -> {head, queue, result, visited}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g, %{"A" => ["B", "C"], "B" => ["A", "D", "E"], "C" => ["A", "F"], "D" => ["B"], "E" => ["B", "F"], "F" => ["C", "E"]})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(join(breadth_first_search(Process.get(:g), "A"))))
    IO.puts(Kernel.inspect(join(breadth_first_search_with_deque(Process.get(:g), "A"))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
