# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def prims_algo(graph) do
    try do
      inf = 2147483647
      dist = %{}
      parent = %{}
      queue = []
      {parent, queue} = Enum.reduce(Map.keys(graph), {parent, queue}, fn node_, {parent, queue} ->
        dist = Map.put(dist, node_, inf)
        parent = Map.put(parent, node_, "")
        queue = (queue ++ [%{node: node_, weight: inf}])
        {parent, queue}
      end)
      if _len(queue) == 0 do
        throw {:return, %{dist: dist, parent: parent}}
      end
      min_idx = 0
      i = 1
      while_fun = fn while_fun, i, min_idx ->
        if i < _len(queue) do
          min_idx = if Enum.at(queue, i, []).weight < Enum.at(queue, min_idx, []).weight do
            min_idx = i
            min_idx
          else
            min_idx
          end
          i = i + 1
          while_fun.(while_fun, i, min_idx)
        else
          {i, min_idx}
        end
      end
      {_, min_idx} = try do
          while_fun.(while_fun, i, min_idx)
        catch
          {:break, {_, min_idx}} -> {0, min_idx}
        end

      start_node = Enum.at(queue, min_idx, [])
      start = start_node.node
      new_q = []
      j = 0
      while_fun_2 = fn while_fun_2, j, new_q ->
        if j < _len(queue) do
          new_q = if j != min_idx do
            new_q = (new_q ++ [Enum.at(queue, j, [])])
            new_q
          else
            new_q
          end
          j = j + 1
          while_fun_2.(while_fun_2, j, new_q)
        else
          {j, new_q}
        end
      end
      {_, new_q} = try do
          while_fun_2.(while_fun_2, j, new_q)
        catch
          {:break, {_, new_q}} -> {0, new_q}
        end

      queue = new_q
      dist = Map.put(dist, start, 0)
      {parent, queue} = Enum.reduce(Map.keys(graph[start]), {parent, queue}, fn neighbour, {parent, queue} ->
        try do
          w = graph[start][neighbour]
          {parent, queue} = if dist[neighbour] > dist[start] + w do
            dist = Map.put(dist, neighbour, dist[start] + w)
            parent = Map.put(parent, neighbour, start)
            k = 0
            while_fun_3 = fn while_fun_3, k, queue ->
              if k < _len(queue) do
                queue = if Enum.at(queue, k, []).node == neighbour do
                  queue = List.replace_at(queue, k, Map.put(Enum.at(queue, k), :weight, dist[neighbour]))
                  throw {:break, {k, queue}}
                  queue
                else
                  queue
                end
                k = k + 1
                while_fun_3.(while_fun_3, k, queue)
              else
                {k, queue}
              end
            end
            {_, queue} = try do
                while_fun_3.(while_fun_3, k, queue)
              catch
                {:break, {_, queue}} -> {0, queue}
              end

            {parent, queue}
          else
            {parent, queue}
          end
        catch
          :continue -> {parent, queue}
        end
        {parent, queue}
      end)
      while_fun_4 = fn while_fun_4, parent, queue ->
        if _len(queue) > 0 do
          best_idx = 0
          p = 1
          while_fun_5 = fn while_fun_5, best_idx, p ->
            if p < _len(queue) do
              best_idx = if Enum.at(queue, p, []).weight < Enum.at(queue, best_idx, []).weight do
                best_idx = p
                best_idx
              else
                best_idx
              end
              p = p + 1
              while_fun_5.(while_fun_5, best_idx, p)
            else
              {best_idx, p}
            end
          end
          {best_idx, p} = try do
              while_fun_5.(while_fun_5, best_idx, p)
            catch
              {:break, {best_idx, p}} -> {best_idx, p}
            end

          node_entry = Enum.at(queue, best_idx, [])
          node_ = node_entry.node
          tmp = []
          q = 0
          while_fun_6 = fn while_fun_6, q, tmp ->
            if q < _len(queue) do
              tmp = if q != best_idx do
                tmp = (tmp ++ [Enum.at(queue, q, [])])
                tmp
              else
                tmp
              end
              q = q + 1
              while_fun_6.(while_fun_6, q, tmp)
            else
              {q, tmp}
            end
          end
          {q, tmp} = try do
              while_fun_6.(while_fun_6, q, tmp)
            catch
              {:break, {q, tmp}} -> {q, tmp}
            end

          queue = tmp
          {parent, queue} = Enum.reduce(Map.keys(graph[node_]), {parent, queue}, fn neighbour, {parent, queue} ->
            try do
              w = graph[node_][neighbour]
              {parent, queue} = if dist[neighbour] > dist[node_] + w do
                dist = Map.put(dist, neighbour, dist[node_] + w)
                parent = Map.put(parent, neighbour, node_)
                r = 0
                while_fun_7 = fn while_fun_7, queue, r ->
                  if r < _len(queue) do
                    queue = if Enum.at(queue, r, []).node == neighbour do
                      queue = List.replace_at(queue, r, Map.put(Enum.at(queue, r), :weight, dist[neighbour]))
                      throw {:break, {queue, r}}
                      queue
                    else
                      queue
                    end
                    r = r + 1
                    while_fun_7.(while_fun_7, queue, r)
                  else
                    {queue, r}
                  end
                end
                {queue, r} = try do
                    while_fun_7.(while_fun_7, queue, r)
                  catch
                    {:break, {queue, r}} -> {queue, r}
                  end

                {parent, queue}
              else
                {parent, queue}
              end
            catch
              :continue -> {parent, queue}
            end
            {parent, queue}
          end)
          while_fun_4.(while_fun_4, parent, queue)
        else
          {parent, queue}
        end
      end
      {parent, queue} = try do
          while_fun_4.(while_fun_4, parent, queue)
        catch
          {:break, {parent, queue}} -> {parent, queue}
        end

      throw {:return, %{dist: dist, parent: parent}}
    catch
      {:return, val} -> val
    end
  end
  def iabs(x) do
    try do
      throw {:return, ((if x < 0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:graph, %{})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:graph, Map.put(Process.get(:graph), "a", %{"b" => 3, "c" => 15}))
    Process.put(:graph, Map.put(Process.get(:graph), "b", %{"a" => 3, "c" => 10, "d" => 100}))
    Process.put(:graph, Map.put(Process.get(:graph), "c", %{"a" => 15, "b" => 10, "d" => 5}))
    Process.put(:graph, Map.put(Process.get(:graph), "d", %{"b" => 100, "c" => 5}))
    Process.put(:res, prims_algo(Process.get(:graph)))
    Process.put(:dist, Process.get(:res).dist)
    IO.puts(Kernel.inspect(iabs(Process.get(:dist)["a"] - Process.get(:dist)["b"])))
    IO.puts(Kernel.inspect(iabs(Process.get(:dist)["d"] - Process.get(:dist)["b"])))
    IO.puts(Kernel.inspect(iabs(Process.get(:dist)["a"] - Process.get(:dist)["c"])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
