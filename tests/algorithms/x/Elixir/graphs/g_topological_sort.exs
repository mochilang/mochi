# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def depth_first_search(u, visited, graph, stack) do
    try do
      visited = List.replace_at(visited, u, true)
      i = 0
      while_fun = fn while_fun, i, stack ->
        if i < _len(Enum.at(graph, u, [])) do
          v = Enum.at(Enum.at(graph, u, []), i, 0)
          stack = if !Enum.at(visited, v, []) do
            stack = depth_first_search(v, visited, graph, stack)
            stack
          else
            stack
          end
          i = i + 1
          while_fun.(while_fun, i, stack)
        else
          {i, stack}
        end
      end
      {_, stack} = try do
          while_fun.(while_fun, i, stack)
        catch
          {:break, {_, stack}} -> {0, stack}
        end

      stack = (stack ++ [u])
      throw {:return, stack}
    catch
      {:return, val} -> val
    end
  end
  def topological_sort(graph) do
    try do
      visited = []
      i = 0
      while_fun_2 = fn while_fun_2, i, visited ->
        if i < _len(graph) do
          visited = (visited ++ [false])
          i = i + 1
          while_fun_2.(while_fun_2, i, visited)
        else
          {i, visited}
        end
      end
      {_, visited} = try do
          while_fun_2.(while_fun_2, i, visited)
        catch
          {:break, {_, visited}} -> {0, visited}
        end

      stack = []
      i = 0
      while_fun_3 = fn while_fun_3, i, stack ->
        if i < _len(graph) do
          stack = if !Enum.at(visited, i, []) do
            stack = depth_first_search(i, visited, graph, stack)
            stack
          else
            stack
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, stack)
        else
          {i, stack}
        end
      end
      {_, stack} = try do
          while_fun_3.(while_fun_3, i, stack)
        catch
          {:break, {_, stack}} -> {0, stack}
        end

      throw {:return, stack}
    catch
      {:return, val} -> val
    end
  end
  def print_stack(stack, clothes) do
    try do
      order = 1
      s = stack
      while_fun_4 = fn while_fun_4, order, s ->
        if _len(s) > 0 do
          idx = Enum.at(s, _len(s) - 1, [])
          s = _slice(s, 0, (_len(s) - 1) - 0)
          IO.puts(((Kernel.to_string(order) <> " ") <> Map.get(clothes, idx, "")))
          order = order + 1
          while_fun_4.(while_fun_4, order, s)
        else
          {order, s}
        end
      end
      {order, s} = try do
          while_fun_4.(while_fun_4, order, s)
        catch
          {:break, {order, s}} -> {order, s}
        end

    catch
      {:return, val} -> val
    end
  end
  def format_list(xs) do
    try do
      res = "["
      i = 0
      while_fun_5 = fn while_fun_5, i, res ->
        if i < _len(xs) do
          res = (res <> Kernel.to_string(Enum.at(xs, i, [])))
          res = if i < _len(xs) - 1 do
            res = (res <> ", ")
            res
          else
            res
          end
          i = i + 1
          while_fun_5.(while_fun_5, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun_5.(while_fun_5, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      res = (res <> "]")
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      clothes = %{0 => "underwear", 1 => "pants", 2 => "belt", 3 => "suit", 4 => "shoe", 5 => "socks", 6 => "shirt", 7 => "tie", 8 => "watch"}
      graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []]
      stack = topological_sort(graph)
      IO.puts(Kernel.inspect(format_list(stack)))
      print_stack(stack, clothes)
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
