# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def dfs(g, s) do
    try do
      visited = %{}
      stack = []
      visited = Map.put(visited, s, true)
      stack = (stack ++ [s])
      IO.puts(s)
      while_fun = fn while_fun, stack, visited ->
        if _len(stack) > 0 do
          u = Enum.at(stack, _len(stack) - 1, [])
          found = false
          {found, stack, visited} = Enum.reduce(g[u], {found, stack, visited}, fn v, {found, stack, visited} ->
            try do
              {found, stack, visited} = if !(Map.has_key?(visited, v)) do
                visited = Map.put(visited, v, true)
                stack = (stack ++ [v])
                IO.puts(v)
                found = true
                throw {:break, {stack, visited}}
                {found, stack, visited}
              else
                {found, stack, visited}
              end
            catch
              :continue -> {found, stack, visited}
            end
            {found, stack, visited}
          end)
          stack = if !found do
            stack = _slice(stack, 0, _len(stack) - 1 - (0))
            stack
          else
            stack
          end
          while_fun.(while_fun, stack, visited)
        else
          {stack, visited}
        end
      end
      {stack, visited} = try do
          while_fun.(while_fun, stack, visited)
        catch
          {:break, {stack, visited}} -> {stack, visited}
        end

    catch
      {:return, val} -> val
    end
  end
  def bfs(g, s) do
    try do
      visited = %{}
      q = []
      visited = Map.put(visited, s, true)
      q = (q ++ [s])
      IO.puts(s)
      while_fun_2 = fn while_fun_2, q, visited ->
        if _len(q) > 0 do
          u = Enum.at(q, 0, [])
          q = _slice(q, 1, _len(q) - (1))
          {q, visited} = Enum.reduce(g[u], {q, visited}, fn v, {q, visited} ->
            {q, visited} = if !(Map.has_key?(visited, v)) do
              visited = Map.put(visited, v, true)
              q = (q ++ [v])
              IO.puts(v)
              {q, visited}
            else
              {q, visited}
            end
            {q, visited}
          end)
          while_fun_2.(while_fun_2, q, visited)
        else
          {q, visited}
        end
      end
      {q, visited} = try do
          while_fun_2.(while_fun_2, q, visited)
        catch
          {:break, {q, visited}} -> {q, visited}
        end

    catch
      {:return, val} -> val
    end
  end
  def sort_ints(a) do
    try do
      arr = a
      i = 0
      while_fun_3 = fn while_fun_3, arr, i ->
        if i < _len(arr) do
          j = 0
          while_fun_4 = fn while_fun_4, arr, j ->
            if j < _len(arr) - i - 1 do
              arr = if Enum.at(arr, j, []) > Enum.at(arr, j + 1, []) do
                tmp = Enum.at(arr, j, [])
                arr = List.replace_at(arr, j, Enum.at(arr, j + 1, []))
                arr = List.replace_at(arr, j + 1, tmp)
                arr
              else
                arr
              end
              j = j + 1
              while_fun_4.(while_fun_4, arr, j)
            else
              {arr, j}
            end
          end
          {arr, j} = try do
              while_fun_4.(while_fun_4, arr, j)
            catch
              {:break, {arr, j}} -> {arr, j}
            end

          i = i + 1
          while_fun_3.(while_fun_3, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun_3.(while_fun_3, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def dijkstra(g, s) do
    try do
      dist = %{}
      dist = Map.put(dist, s, 0)
      path = %{}
      path = Map.put(path, s, 0)
      known = []
      keys = [s]
      while_fun_5 = fn while_fun_5, dist, keys, known, path ->
        if _len(known) < _len(keys) do
          mini = 100000
          u = -1
          i = 0
          while_fun_6 = fn while_fun_6, i, mini, u ->
            if i < _len(keys) do
              k = Enum.at(keys, i, [])
              d = dist[k]
              {mini, u} = if !(k in known) && d < mini do
                mini = d
                u = k
                {mini, u}
              else
                {mini, u}
              end
              i = i + 1
              while_fun_6.(while_fun_6, i, mini, u)
            else
              {i, mini, u}
            end
          end
          {i, mini, u} = try do
              while_fun_6.(while_fun_6, i, mini, u)
            catch
              {:break, {i, mini, u}} -> {i, mini, u}
            end

          known = (known ++ [u])
          {dist, keys, path} = Enum.reduce(g[u], {dist, keys, path}, fn e, {dist, keys, path} ->
            v = Enum.at(e, 0, [])
            w = Enum.at(e, 1, [])
            keys = if !(v in keys) do
              keys = (keys ++ [v])
              keys
            else
              keys
            end
            alt = dist[u] + w
            cur = (if Map.has_key?(dist, v), do: dist[v], else: 100000)
            {dist, path} = if !(v in known) && alt < cur do
              dist = Map.put(dist, v, alt)
              path = Map.put(path, v, u)
              {dist, path}
            else
              {dist, path}
            end
            {dist, keys, path}
          end)
          while_fun_5.(while_fun_5, dist, keys, known, path)
        else
          {dist, keys, known, path}
        end
      end
      {dist, keys, known, path} = try do
          while_fun_5.(while_fun_5, dist, keys, known, path)
        catch
          {:break, {dist, keys, known, path}} -> {dist, keys, known, path}
        end

      ordered = sort_ints(keys)
      idx = 0
      while_fun_7 = fn while_fun_7, idx ->
        if idx < _len(ordered) do
          k = Enum.at(ordered, idx, [])
          if k != s do
            IO.puts(dist[k])
          end
          idx = idx + 1
          while_fun_7.(while_fun_7, idx)
        else
          idx
        end
      end
      idx = try do
          while_fun_7.(while_fun_7, idx)
        catch
          {:break, {idx}} -> idx
        end

    catch
      {:return, val} -> val
    end
  end
  def topo(g, n) do
    try do
      ind = []
      i = 0
      while_fun_8 = fn while_fun_8, i, ind ->
        if i <= n do
          ind = (ind ++ [0])
          i = i + 1
          while_fun_8.(while_fun_8, i, ind)
        else
          {i, ind}
        end
      end
      {i, ind} = try do
          while_fun_8.(while_fun_8, i, ind)
        catch
          {:break, {i, ind}} -> {i, ind}
        end

      node_ = 1
      while_fun_9 = fn while_fun_9, ind, node_ ->
        if node_ <= n do
          {ind} = Enum.reduce(g[node_], {ind}, fn v, {ind} ->
            ind = List.replace_at(ind, v, Enum.at(ind, v, []) + 1)
            {ind}
          end)
          node_ = node_ + 1
          while_fun_9.(while_fun_9, ind, node_)
        else
          {ind, node_}
        end
      end
      {ind, node_} = try do
          while_fun_9.(while_fun_9, ind, node_)
        catch
          {:break, {ind, node_}} -> {ind, node_}
        end

      q = []
      j = 1
      while_fun_10 = fn while_fun_10, j, q ->
        if j <= n do
          q = if Enum.at(ind, j, []) == 0 do
            q = (q ++ [j])
            q
          else
            q
          end
          j = j + 1
          while_fun_10.(while_fun_10, j, q)
        else
          {j, q}
        end
      end
      {j, q} = try do
          while_fun_10.(while_fun_10, j, q)
        catch
          {:break, {j, q}} -> {j, q}
        end

      while_fun_11 = fn while_fun_11, ind, q ->
        if _len(q) > 0 do
          v = Enum.at(q, 0, [])
          q = _slice(q, 1, _len(q) - (1))
          IO.puts(v)
          {ind, q} = Enum.reduce(g[v], {ind, q}, fn w, {ind, q} ->
            ind = List.replace_at(ind, w, Enum.at(ind, w, []) - 1)
            q = if Enum.at(ind, w, []) == 0 do
              q = (q ++ [w])
              q
            else
              q
            end
            {ind, q}
          end)
          while_fun_11.(while_fun_11, ind, q)
        else
          {ind, q}
        end
      end
      {ind, q} = try do
          while_fun_11.(while_fun_11, ind, q)
        catch
          {:break, {ind, q}} -> {ind, q}
        end

    catch
      {:return, val} -> val
    end
  end
  def floyd(a) do
    try do
      n = _len(a)
      dist = []
      i = 0
      while_fun_12 = fn while_fun_12, dist, i ->
        if i < n do
          row = []
          j = 0
          while_fun_13 = fn while_fun_13, j, row ->
            if j < n do
              row = (row ++ [Enum.at(Enum.at(a, i, []), j, 0)])
              j = j + 1
              while_fun_13.(while_fun_13, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_13.(while_fun_13, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          dist = (dist ++ [row])
          i = i + 1
          while_fun_12.(while_fun_12, dist, i)
        else
          {dist, i}
        end
      end
      {dist, i} = try do
          while_fun_12.(while_fun_12, dist, i)
        catch
          {:break, {dist, i}} -> {dist, i}
        end

      k = 0
      while_fun_14 = fn while_fun_14, dist, k ->
        if k < n do
          ii = 0
          while_fun_15 = fn while_fun_15, dist, ii ->
            if ii < n do
              jj = 0
              while_fun_16 = fn while_fun_16, dist, jj ->
                if jj < n do
                  dist = if Enum.at(Enum.at(dist, ii, []), jj, 0) > Enum.at(Enum.at(dist, ii, []), k, 0) + Enum.at(Enum.at(dist, k, []), jj, 0) do
                    dist = List.replace_at(dist, ii, List.replace_at(Enum.at(dist, ii), jj, Enum.at(Enum.at(dist, ii, []), k, 0) + Enum.at(Enum.at(dist, k, []), jj, 0)))
                    dist
                  else
                    dist
                  end
                  jj = jj + 1
                  while_fun_16.(while_fun_16, dist, jj)
                else
                  {dist, jj}
                end
              end
              {dist, jj} = try do
                  while_fun_16.(while_fun_16, dist, jj)
                catch
                  {:break, {dist, jj}} -> {dist, jj}
                end

              ii = ii + 1
              while_fun_15.(while_fun_15, dist, ii)
            else
              {dist, ii}
            end
          end
          {dist, ii} = try do
              while_fun_15.(while_fun_15, dist, ii)
            catch
              {:break, {dist, ii}} -> {dist, ii}
            end

          k = k + 1
          while_fun_14.(while_fun_14, dist, k)
        else
          {dist, k}
        end
      end
      {dist, k} = try do
          while_fun_14.(while_fun_14, dist, k)
        catch
          {:break, {dist, k}} -> {dist, k}
        end

      IO.puts(Kernel.inspect(dist))
    catch
      {:return, val} -> val
    end
  end
  def prim(g, s, n) do
    try do
      dist = %{}
      dist = Map.put(dist, s, 0)
      known = []
      keys = [s]
      total = 0
      while_fun_17 = fn while_fun_17, dist, keys, known, total ->
        if _len(known) < n do
          mini = 100000
          u = -1
          i = 0
          while_fun_18 = fn while_fun_18, i, mini, u ->
            if i < _len(keys) do
              k = Enum.at(keys, i, [])
              d = dist[k]
              {mini, u} = if !(k in known) && d < mini do
                mini = d
                u = k
                {mini, u}
              else
                {mini, u}
              end
              i = i + 1
              while_fun_18.(while_fun_18, i, mini, u)
            else
              {i, mini, u}
            end
          end
          {i, mini, u} = try do
              while_fun_18.(while_fun_18, i, mini, u)
            catch
              {:break, {i, mini, u}} -> {i, mini, u}
            end

          known = (known ++ [u])
          total = total + mini
          {dist, keys} = Enum.reduce(g[u], {dist, keys}, fn e, {dist, keys} ->
            v = Enum.at(e, 0, [])
            w = Enum.at(e, 1, [])
            keys = if !(v in keys) do
              keys = (keys ++ [v])
              keys
            else
              keys
            end
            cur = (if Map.has_key?(dist, v), do: dist[v], else: 100000)
            dist = if !(v in known) && w < cur do
              dist = Map.put(dist, v, w)
              dist
            else
              dist
            end
            {dist, keys}
          end)
          while_fun_17.(while_fun_17, dist, keys, known, total)
        else
          {dist, keys, known, total}
        end
      end
      {dist, keys, known, total} = try do
          while_fun_17.(while_fun_17, dist, keys, known, total)
        catch
          {:break, {dist, keys, known, total}} -> {dist, keys, known, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def sort_edges(edges) do
    try do
      es = edges
      i = 0
      while_fun_19 = fn while_fun_19, es, i ->
        if i < _len(es) do
          j = 0
          while_fun_20 = fn while_fun_20, es, j ->
            if j < _len(es) - i - 1 do
              es = if Enum.at(Enum.at(es, j, []), 2, 0) > Enum.at(Enum.at(es, j + 1, []), 2, 0) do
                tmp = Enum.at(es, j, [])
                es = List.replace_at(es, j, Enum.at(es, j + 1, []))
                es = List.replace_at(es, j + 1, tmp)
                es
              else
                es
              end
              j = j + 1
              while_fun_20.(while_fun_20, es, j)
            else
              {es, j}
            end
          end
          {es, j} = try do
              while_fun_20.(while_fun_20, es, j)
            catch
              {:break, {es, j}} -> {es, j}
            end

          i = i + 1
          while_fun_19.(while_fun_19, es, i)
        else
          {es, i}
        end
      end
      {es, i} = try do
          while_fun_19.(while_fun_19, es, i)
        catch
          {:break, {es, i}} -> {es, i}
        end

      throw {:return, es}
    catch
      {:return, val} -> val
    end
  end
  def find_parent(parent, x) do
    try do
      r = x
      while_fun_21 = fn while_fun_21, r ->
        if Enum.at(parent, r, []) != r do
          r = Enum.at(parent, r, [])
          while_fun_21.(while_fun_21, r)
        else
          r
        end
      end
      r = try do
          while_fun_21.(while_fun_21, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, r}
    catch
      {:return, val} -> val
    end
  end
  def union_parent(parent, a, b) do
    try do
      parent = List.replace_at(parent, a, b)
    catch
      {:return, val} -> val
    end
  end
  def kruskal(edges, n) do
    try do
      es = sort_edges(edges)
      parent = []
      i = 0
      while_fun_22 = fn while_fun_22, i, parent ->
        if i <= n do
          parent = (parent ++ [i])
          i = i + 1
          while_fun_22.(while_fun_22, i, parent)
        else
          {i, parent}
        end
      end
      {i, parent} = try do
          while_fun_22.(while_fun_22, i, parent)
        catch
          {:break, {i, parent}} -> {i, parent}
        end

      total = 0
      count = 0
      idx = 0
      while_fun_23 = fn while_fun_23, count, idx, total ->
        if count < n - 1 && idx < _len(es) do
          e = Enum.at(es, idx, [])
          idx = idx + 1
          u = Enum.at(e, 0, [])
          v = Enum.at(e, 1, [])
          w = Enum.at(e, 2, [])
          ru = find_parent(parent, u)
          rv = find_parent(parent, v)
          {count, total} = if ru != rv do
            union_parent(parent, ru, rv)
            total = total + w
            count = count + 1
            {count, total}
          else
            {count, total}
          end
          while_fun_23.(while_fun_23, count, idx, total)
        else
          {count, idx, total}
        end
      end
      {count, idx, total} = try do
          while_fun_23.(while_fun_23, count, idx, total)
        catch
          {:break, {count, idx, total}} -> {count, idx, total}
        end

      throw {:return, total}
    catch
      {:return, val} -> val
    end
  end
  def find_isolated_nodes(g, nodes) do
    try do
      isolated = []
      {isolated} = Enum.reduce(nodes, {isolated}, fn node_, {isolated} ->
        isolated = if _len(Map.get(g, node_, [])) == 0 do
          isolated = (isolated ++ [node_])
          isolated
        else
          isolated
        end
        {isolated}
      end)
      throw {:return, isolated}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:g_dfs, %{1 => [2, 3], 2 => [4, 5], 3 => [], 4 => [], 5 => []})
  Process.put(:g_bfs, %{1 => [2, 3], 2 => [4, 5], 3 => [6, 7], 4 => [], 5 => [8], 6 => [], 7 => [], 8 => []})
  Process.put(:g_weighted, %{1 => [[2, 7], [3, 9], [6, 14]], 2 => [[1, 7], [3, 10], [4, 15]], 3 => [[1, 9], [2, 10], [4, 11], [6, 2]], 4 => [[2, 15], [3, 11], [5, 6]], 5 => [[4, 6], [6, 9]], 6 => [[1, 14], [3, 2], [5, 9]]})
  Process.put(:g_topo, %{1 => [2, 3], 2 => [4], 3 => [4], 4 => []})
  Process.put(:matrix, [[0, 5, 9, 100000], [100000, 0, 2, 8], [100000, 100000, 0, 7], [4, 100000, 100000, 0]])
  Process.put(:g_prim, %{1 => [[2, 1], [3, 3]], 2 => [[1, 1], [3, 1], [4, 6]], 3 => [[1, 3], [2, 1], [4, 2]], 4 => [[2, 6], [3, 2]]})
  Process.put(:edges_kruskal, [[1, 2, 1], [2, 3, 2], [1, 3, 2], [3, 4, 1]])
  Process.put(:g_iso, %{1 => [2, 3], 2 => [1, 3], 3 => [1, 2], 4 => []})
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    dfs(Process.get(:g_dfs), 1)
    bfs(Process.get(:g_bfs), 1)
    dijkstra(Process.get(:g_weighted), 1)
    topo(Process.get(:g_topo), 4)
    floyd(Process.get(:matrix))
    IO.puts(Kernel.inspect(prim(Process.get(:g_prim), 1, 4)))
    IO.puts(Kernel.inspect(kruskal(Process.get(:edges_kruskal), 4)))
    Process.put(:iso, find_isolated_nodes(Process.get(:g_iso), [1, 2, 3, 4]))
    IO.puts(Kernel.inspect(Process.get(:iso)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
