# Code generated by Mochi transpiler 2025-08-14 17:09 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def dfs(u, graph, visit, stack) do
    try do
      if Enum.at(visit, u, []) do
        throw {:return, stack}
      end
      visit = List.replace_at(visit, u, true)
      {stack} = Enum.reduce(Enum.at(graph, u, []), {stack}, fn v, {stack} ->
        stack = dfs(v, graph, visit, stack)
        {stack}
      end)
      stack = (stack ++ [u])
      throw {:return, stack}
    catch
      {:return, val} -> val
    end
  end
  def dfs2(u, reversed_graph, visit, component) do
    try do
      if Enum.at(visit, u, []) do
        throw {:return, component}
      end
      visit = List.replace_at(visit, u, true)
      component = (component ++ [u])
      {component} = Enum.reduce(Enum.at(reversed_graph, u, []), {component}, fn v, {component} ->
        component = dfs2(v, reversed_graph, visit, component)
        {component}
      end)
      throw {:return, component}
    catch
      {:return, val} -> val
    end
  end
  def kosaraju(graph) do
    try do
      n = _len(graph)
      reversed_graph = []
      i = 0
      while_fun = fn while_fun, i, reversed_graph ->
        if i < n do
          reversed_graph = (reversed_graph ++ [[]])
          i = i + 1
          while_fun.(while_fun, i, reversed_graph)
        else
          {i, reversed_graph}
        end
      end
      {i, reversed_graph} = try do
          while_fun.(while_fun, i, reversed_graph)
        catch
          {:break, {i, reversed_graph}} -> {i, reversed_graph}
        end

      i = 0
      while_fun_2 = fn while_fun_2, i, reversed_graph ->
        if i < n do
          {reversed_graph} = Enum.reduce(Enum.at(graph, i, []), {reversed_graph}, fn v, {reversed_graph} ->
            reversed_graph = List.replace_at(reversed_graph, v, (Enum.at(reversed_graph, v, []) ++ [i]))
            {reversed_graph}
          end)
          i = i + 1
          while_fun_2.(while_fun_2, i, reversed_graph)
        else
          {i, reversed_graph}
        end
      end
      {i, reversed_graph} = try do
          while_fun_2.(while_fun_2, i, reversed_graph)
        catch
          {:break, {i, reversed_graph}} -> {i, reversed_graph}
        end

      visit = []
      i = 0
      while_fun_3 = fn while_fun_3, i, visit ->
        if i < n do
          visit = (visit ++ [false])
          i = i + 1
          while_fun_3.(while_fun_3, i, visit)
        else
          {i, visit}
        end
      end
      {i, visit} = try do
          while_fun_3.(while_fun_3, i, visit)
        catch
          {:break, {i, visit}} -> {i, visit}
        end

      stack = []
      i = 0
      while_fun_4 = fn while_fun_4, i, stack ->
        if i < n do
          stack = if Enum.at(visit, i, []) == false do
            stack = dfs(i, graph, visit, stack)
            stack
          else
            stack
          end
          i = i + 1
          while_fun_4.(while_fun_4, i, stack)
        else
          {i, stack}
        end
      end
      {i, stack} = try do
          while_fun_4.(while_fun_4, i, stack)
        catch
          {:break, {i, stack}} -> {i, stack}
        end

      i = 0
      while_fun_5 = fn while_fun_5, i, visit ->
        if i < n do
          visit = List.replace_at(visit, i, false)
          i = i + 1
          while_fun_5.(while_fun_5, i, visit)
        else
          {i, visit}
        end
      end
      {i, visit} = try do
          while_fun_5.(while_fun_5, i, visit)
        catch
          {:break, {i, visit}} -> {i, visit}
        end

      scc = []
      idx = _len(stack) - 1
      while_fun_6 = fn while_fun_6, idx, scc ->
        if idx >= 0 do
          node_ = Enum.at(stack, idx, [])
          scc = if Enum.at(visit, node_, []) == false do
            component = []
            component = dfs2(node_, reversed_graph, visit, component)
            scc = (scc ++ [component])
            scc
          else
            scc
          end
          idx = idx - 1
          while_fun_6.(while_fun_6, idx, scc)
        else
          {idx, scc}
        end
      end
      {idx, scc} = try do
          while_fun_6.(while_fun_6, idx, scc)
        catch
          {:break, {idx, scc}} -> {idx, scc}
        end

      throw {:return, scc}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      graph = [[1], [2], [0, 3], [4], []]
      comps = kosaraju(graph)
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(comps) do
          IO.puts(Kernel.inspect(Enum.at(comps, i, [])))
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
