# Code generated by Mochi transpiler 2025-08-16 09:34 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def tarjan(g) do
    try do
      n = _len(g)
      stack = []
      on_stack = []
      index_of = []
      lowlink_of = []
      i = 0
      while_fun = fn while_fun, i, index_of, lowlink_of, on_stack ->
        if i < n do
          on_stack = (on_stack ++ [false])
          index_of = (index_of ++ [0 - 1])
          lowlink_of = (lowlink_of ++ [0 - 1])
          i = i + 1
          while_fun.(while_fun, i, index_of, lowlink_of, on_stack)
        else
          {i, index_of, lowlink_of, on_stack}
        end
      end
      {_, index_of, lowlink_of, on_stack} = try do
          while_fun.(while_fun, i, index_of, lowlink_of, on_stack)
        catch
          {:break, {_, index_of, lowlink_of, on_stack}} -> {0, index_of, lowlink_of, on_stack}
        end

      components = []
      strong_connect = fn v, index ->
  try do
    index_of = List.replace_at(index_of, v, index)
    lowlink_of = List.replace_at(lowlink_of, v, index)
    current_index = index + 1
    stack = (stack ++ [v])
    on_stack = List.replace_at(on_stack, v, true)
    {current_index, lowlink_of} = Enum.reduce(Enum.at(g, v, []), {current_index, lowlink_of}, fn w, {current_index, lowlink_of} ->
      {current_index, lowlink_of} = if Enum.at(index_of, w, []) == 0 - 1 do
        current_index = strong_connect(w, current_index)
        lowlink_of = if Enum.at(lowlink_of, w, []) < Enum.at(lowlink_of, v, []) do
          lowlink_of = List.replace_at(lowlink_of, v, Enum.at(lowlink_of, w, []))
          lowlink_of
        else
          lowlink_of
        end
        {current_index, lowlink_of}
      else
        lowlink_of = if Enum.at(on_stack, w, []) do
          lowlink_of = if Enum.at(lowlink_of, w, []) < Enum.at(lowlink_of, v, []) do
            lowlink_of = List.replace_at(lowlink_of, v, Enum.at(lowlink_of, w, []))
            lowlink_of
          else
            lowlink_of
          end
          lowlink_of
        else
          lowlink_of
        end
        {current_index, lowlink_of}
      end
      {current_index, lowlink_of}
    end)
    {components, on_stack, stack} = if Enum.at(lowlink_of, v, []) == Enum.at(index_of, v, []) do
      component = []
      w = Enum.at(stack, _len(stack) - 1, [])
      stack = _slice(stack, 0, (_len(stack) - 1) - 0)
      on_stack = List.replace_at(on_stack, w, false)
      component = (component ++ [w])
      while_fun_2 = fn while_fun_2, component, on_stack, stack, w ->
        if w != v do
          w = Enum.at(stack, _len(stack) - 1, [])
          stack = _slice(stack, 0, (_len(stack) - 1) - 0)
          on_stack = List.replace_at(on_stack, w, false)
          component = (component ++ [w])
          while_fun_2.(while_fun_2, component, on_stack, stack, w)
        else
          {component, on_stack, stack, w}
        end
      end
      {component, on_stack, stack, w} = try do
          while_fun_2.(while_fun_2, component, on_stack, stack, w)
        catch
          {:break, {component, on_stack, stack, w}} -> {component, on_stack, stack, w}
        end

      components = (components ++ [component])
      {components, on_stack, stack}
    else
      {components, on_stack, stack}
    end
    throw {:return, current_index}
  catch
    {:return, val} -> val
  end
end
      v = 0
      while_fun_3 = fn while_fun_3, v ->
        if v < n do
          if Enum.at(index_of, v, []) == 0 - 1 do
            strong_connect.(v, 0)
          end
          v = v + 1
          while_fun_3.(while_fun_3, v)
        else
          v
        end
      end
      v = try do
          while_fun_3.(while_fun_3, v)
        catch
          {:break, {v}} -> v
        end

      throw {:return, components}
    catch
      {:return, val} -> val
    end
  end
  def create_graph(n, edges) do
    try do
      g = []
      i = 0
      while_fun_4 = fn while_fun_4, g, i ->
        if i < n do
          g = (g ++ [[]])
          i = i + 1
          while_fun_4.(while_fun_4, g, i)
        else
          {g, i}
        end
      end
      {g, _} = try do
          while_fun_4.(while_fun_4, g, i)
        catch
          {:break, {g, _}} -> {g, 0}
        end

      {g} = Enum.reduce(edges, {g}, fn e, {g} ->
        u = Enum.at(e, 0, [])
        v = Enum.at(e, 1, [])
        g = List.replace_at(g, u, (Enum.at(g, u, []) ++ [v]))
        {g}
      end)
      throw {:return, g}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      n_vertices = 7
      source = [0, 0, 1, 2, 3, 3, 4, 4, 6]
      target = [1, 3, 2, 0, 1, 4, 5, 6, 5]
      edges = []
      i = 0
      while_fun_5 = fn while_fun_5, edges, i ->
        if i < _len(source) do
          edges = (edges ++ [[Enum.at(source, i, []), Enum.at(target, i, [])]])
          i = i + 1
          while_fun_5.(while_fun_5, edges, i)
        else
          {edges, i}
        end
      end
      {edges, _} = try do
          while_fun_5.(while_fun_5, edges, i)
        catch
          {:break, {edges, _}} -> {edges, 0}
        end

      g = create_graph(n_vertices, edges)
      IO.puts(Kernel.inspect(tarjan(g)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
