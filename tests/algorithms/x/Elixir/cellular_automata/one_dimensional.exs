# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def format_ruleset(ruleset) do
    try do
      rs = ruleset
      bits_rev = []
      i = 0
      while_fun = fn while_fun, bits_rev, i, rs ->
        if i < 8 do
          bits_rev = (bits_rev ++ [rem(rs, 2)])
          rs = div(rs, 2)
          i = i + 1
          while_fun.(while_fun, bits_rev, i, rs)
        else
          {bits_rev, i, rs}
        end
      end
      {bits_rev, i, rs} = try do
          while_fun.(while_fun, bits_rev, i, rs)
        catch
          {:break, {bits_rev, i, rs}} -> {bits_rev, i, rs}
        end

      bits = []
      j = _len(bits_rev) - 1
      while_fun_2 = fn while_fun_2, bits, j ->
        if j >= 0 do
          bits = (bits ++ [Enum.at(bits_rev, j)])
          j = j - 1
          while_fun_2.(while_fun_2, bits, j)
        else
          {bits, j}
        end
      end
      {bits, j} = try do
          while_fun_2.(while_fun_2, bits, j)
        catch
          {:break, {bits, j}} -> {bits, j}
        end

      throw {:return, bits}
    catch
      {:return, val} -> val
    end
  end
  def new_generation(cells, rules, time) do
    try do
      population = _len(Enum.at(cells, 0))
      next_generation = []
      i = 0
      while_fun_3 = fn while_fun_3, i, next_generation ->
        if i < population do
          left_neighbor = (if i == 0, do: 0, else: Enum.at(Enum.at(cells, time), i - 1))
          right_neighbor = (if i == population - 1, do: 0, else: Enum.at(Enum.at(cells, time), i + 1))
          center = Enum.at(Enum.at(cells, time), i)
          idx = 7 - (left_neighbor * 4 + center * 2 + right_neighbor)
          next_generation = (next_generation ++ [Enum.at(rules, idx)])
          i = i + 1
          while_fun_3.(while_fun_3, i, next_generation)
        else
          {i, next_generation}
        end
      end
      {i, next_generation} = try do
          while_fun_3.(while_fun_3, i, next_generation)
        catch
          {:break, {i, next_generation}} -> {i, next_generation}
        end

      throw {:return, next_generation}
    catch
      {:return, val} -> val
    end
  end
  def cells_to_string(row) do
    try do
      result = ""
      i = 0
      while_fun_4 = fn while_fun_4, i, result ->
        if i < _len(row) do
          result = (if Enum.at(row, i) == 1, do: (result <> "#"), else: (result <> "."))
          i = i + 1
          while_fun_4.(while_fun_4, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_4.(while_fun_4, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:initial, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  Process.put(:time, 0)
  Process.put(:t, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:cells, [Process.get(:initial)])
    Process.put(:rules, format_ruleset(30))
    while_fun_5 = fn while_fun_5 ->
      if Process.get(:time) < 16 do
        next = new_generation(Process.get(:cells), Process.get(:rules), Process.get(:time))
        Process.put(:cells, (Process.get(:cells) ++ [next]))
        Process.put(:time, Process.get(:time) + 1)
        while_fun_5.(while_fun_5)
      else
        nil
      end
    end
    try do
      while_fun_5.(while_fun_5)
    catch
      :break -> nil
    end

    while_fun_6 = fn while_fun_6 ->
      if Process.get(:t) < _len(Process.get(:cells)) do
        IO.puts(Kernel.inspect(cells_to_string(Enum.at(Process.get(:cells), Process.get(:t)))))
        Process.put(:t, Process.get(:t) + 1)
        while_fun_6.(while_fun_6)
      else
        nil
      end
    end
    try do
      while_fun_6.(while_fun_6)
    catch
      :break -> nil
    end

    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
