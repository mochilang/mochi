# Code generated by Mochi transpiler 2025-08-06 21:32 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def rand() do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483648))
      throw {:return, Process.get(:seed)}
    catch
      {:return, val} -> val
    end
  end
  def rand_range(max) do
    try do
      throw {:return, rem(rand(), max)}
    catch
      {:return, val} -> val
    end
  end
  def shuffle(list_int) do
    try do
      i = _len(list_int) - 1
      while_fun = fn while_fun, i, list_int ->
        if i > 0 do
          j = rand_range(i + 1)
          tmp = Enum.at(list_int, i)
          list_int = List.replace_at(list_int, i, Enum.at(list_int, j))
          list_int = List.replace_at(list_int, j, tmp)
          i = i - 1
          while_fun.(while_fun, i, list_int)
        else
          {i, list_int}
        end
      end
      {i, list_int} = try do
          while_fun.(while_fun, i, list_int)
        catch
          {:break, {i, list_int}} -> {i, list_int}
        end

      throw {:return, list_int}
    catch
      {:return, val} -> val
    end
  end
  def create_board() do
    try do
      board = []
      r = 0
      while_fun_2 = fn while_fun_2, r ->
        if r < Process.get(:height) do
          row = []
          c = 0
          while_fun_3 = fn while_fun_3, c, row ->
            if c < Process.get(:width) do
              row = (row ++ [0])
              c = c + 1
              while_fun_3.(while_fun_3, c, row)
            else
              {c, row}
            end
          end
          {c, row} = try do
              while_fun_3.(while_fun_3, c, row)
            catch
              {:break, {c, row}} -> {c, row}
            end

          board = (board ++ [row])
          r = r + 1
          while_fun_2.(while_fun_2, r)
        else
          r
        end
      end
      r = try do
          while_fun_2.(while_fun_2, r)
        catch
          {:break, {r}} -> r
        end

      throw {:return, board}
    catch
      {:return, val} -> val
    end
  end
  def create_prey(r, c) do
    try do
      throw {:return, [Process.get(:type_prey), r, c, Process.get(:prey_reproduction_time), 0, 1]}
    catch
      {:return, val} -> val
    end
  end
  def create_predator(r, c) do
    try do
      throw {:return, [Process.get(:type_predator), r, c, Process.get(:predator_reproduction_time), Process.get(:predator_initial_energy), 1]}
    catch
      {:return, val} -> val
    end
  end
  def empty_cell(r, c) do
    try do
      throw {:return, Enum.at(Enum.at(Process.get(:board), r), c) == 0}
    catch
      {:return, val} -> val
    end
  end
  def add_entity(typ) do
    try do
      while_fun_4 = fn while_fun_4 ->
        if true do
          r = rand_range(Process.get(:height))
          c = rand_range(Process.get(:width))
          if empty_cell(r, c) do
            if typ == Process.get(:type_prey) do
              Process.put(:board, List.replace_at(Process.get(:board), r, List.replace_at(Enum.at(Process.get(:board), r), c, 1)))
              Process.put(:entities, (Process.get(:entities) ++ [create_prey(r, c)]))
            else
              Process.put(:board, List.replace_at(Process.get(:board), r, List.replace_at(Enum.at(Process.get(:board), r), c, 2)))
              Process.put(:entities, (Process.get(:entities) ++ [create_predator(r, c)]))
            end
            throw {:return, nil}
          end
          while_fun_4.(while_fun_4)
        else
          nil
        end
      end
      try do
        while_fun_4.(while_fun_4)
      catch
        :break -> nil
      end

    catch
      {:return, val} -> val
    end
  end
  def setup() do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < Process.get(:prey_initial_count) do
          add_entity(Process.get(:type_prey))
          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < Process.get(:predator_initial_count) do
          add_entity(Process.get(:type_predator))
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  def inside(r, c) do
    try do
      throw {:return, r >= 0 && r < Process.get(:height) && c >= 0 && c < Process.get(:width)}
    catch
      {:return, val} -> val
    end
  end
  def find_prey(r, c) do
    try do
      i = 0
      while_fun_7 = fn while_fun_7, i ->
        if i < _len(Process.get(:entities)) do
          e = Enum.at(Process.get(:entities), i)
          if Enum.at(e, 5) == 1 && Enum.at(e, 0) == Process.get(:type_prey) && Enum.at(e, 1) == r && Enum.at(e, 2) == c do
            throw {:return, i}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i)
        else
          i
        end
      end
      i = try do
          while_fun_7.(while_fun_7, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def step_world() do
    try do
      i = 0
      while_fun_8 = fn while_fun_8, i ->
        if i < _len(Process.get(:entities)) do
          try do
            e = Enum.at(Process.get(:entities), i)
            {i} = if Enum.at(e, 5) == 0 do
              i = i + 1
              throw :continue
              {i}
            else
              {i}
            end
            typ = Enum.at(e, 0)
            row = Enum.at(e, 1)
            col = Enum.at(e, 2)
            repro = Enum.at(e, 3)
            energy = Enum.at(e, 4)
            dirs = [0, 1, 2, 3]
            dirs = shuffle(dirs)
            moved = false
            old_r = row
            old_c = col
            {e, moved} = if typ == Process.get(:type_predator) do
              j = 0
              ate = false
              while_fun_9 = fn while_fun_9, ate, e, j, moved ->
                if j < 4 do
                  d = Enum.at(dirs, j)
                  nr = row + Enum.at(Process.get(:dr), d)
                  nc = col + Enum.at(Process.get(:dc), d)
                  {ate, e, moved} = if inside(nr, nc) && Enum.at(Enum.at(Process.get(:board), nr), nc) == 1 do
                    prey_index = find_prey(nr, nc)
                    if prey_index >= 0 do
                      Process.put(:entities, List.replace_at(Process.get(:entities), prey_index, List.replace_at(Enum.at(Process.get(:entities), prey_index), 5, 0)))
                    end
                    Process.put(:board, List.replace_at(Process.get(:board), nr, List.replace_at(Enum.at(Process.get(:board), nr), nc, 2)))
                    Process.put(:board, List.replace_at(Process.get(:board), row, List.replace_at(Enum.at(Process.get(:board), row), col, 0)))
                    e = List.replace_at(e, 1, nr)
                    e = List.replace_at(e, 2, nc)
                    e = List.replace_at(e, 4, energy + Process.get(:predator_food_value) - 1)
                    moved = true
                    ate = true
                    throw {:break, {ate, e, j, moved}}
                    {ate, e, moved}
                  else
                    {ate, e, moved}
                  end
                  j = j + 1
                  while_fun_9.(while_fun_9, ate, e, j, moved)
                else
                  {ate, e, j, moved}
                end
              end
              {ate, e, j, moved} = try do
                  while_fun_9.(while_fun_9, ate, e, j, moved)
                catch
                  {:break, {ate, e, j, moved}} -> {ate, e, j, moved}
                end

              {e, j, moved} = if !ate do
                j = 0
                while_fun_10 = fn while_fun_10, e, j, moved ->
                  if j < 4 do
                    d = Enum.at(dirs, j)
                    nr = row + Enum.at(Process.get(:dr), d)
                    nc = col + Enum.at(Process.get(:dc), d)
                    {e, moved} = if inside(nr, nc) && Enum.at(Enum.at(Process.get(:board), nr), nc) == 0 do
                      Process.put(:board, List.replace_at(Process.get(:board), nr, List.replace_at(Enum.at(Process.get(:board), nr), nc, 2)))
                      Process.put(:board, List.replace_at(Process.get(:board), row, List.replace_at(Enum.at(Process.get(:board), row), col, 0)))
                      e = List.replace_at(e, 1, nr)
                      e = List.replace_at(e, 2, nc)
                      moved = true
                      throw {:break, {e, j, moved}}
                      {e, moved}
                    else
                      {e, moved}
                    end
                    j = j + 1
                    while_fun_10.(while_fun_10, e, j, moved)
                  else
                    {e, j, moved}
                  end
                end
                {e, j, moved} = try do
                    while_fun_10.(while_fun_10, e, j, moved)
                  catch
                    {:break, {e, j, moved}} -> {e, j, moved}
                  end

                e = List.replace_at(e, 4, energy - 1)
                {e, j, moved}
              else
                {e, j, moved}
              end
              {e} = if Enum.at(e, 4) <= 0 do
                e = List.replace_at(e, 5, 0)
                Process.put(:board, List.replace_at(Process.get(:board), Enum.at(e, 1), List.replace_at(Enum.at(Process.get(:board), Enum.at(e, 1)), Enum.at(e, 2), 0)))
                {e}
              else
                {e}
              end
              {e, moved}
            else
              j = 0
              while_fun_11 = fn while_fun_11, e, j, moved ->
                if j < 4 do
                  d = Enum.at(dirs, j)
                  nr = row + Enum.at(Process.get(:dr), d)
                  nc = col + Enum.at(Process.get(:dc), d)
                  {e, moved} = if inside(nr, nc) && Enum.at(Enum.at(Process.get(:board), nr), nc) == 0 do
                    Process.put(:board, List.replace_at(Process.get(:board), nr, List.replace_at(Enum.at(Process.get(:board), nr), nc, 1)))
                    Process.put(:board, List.replace_at(Process.get(:board), row, List.replace_at(Enum.at(Process.get(:board), row), col, 0)))
                    e = List.replace_at(e, 1, nr)
                    e = List.replace_at(e, 2, nc)
                    moved = true
                    throw {:break, {e, j, moved}}
                    {e, moved}
                  else
                    {e, moved}
                  end
                  j = j + 1
                  while_fun_11.(while_fun_11, e, j, moved)
                else
                  {e, j, moved}
                end
              end
              {e, j, moved} = try do
                  while_fun_11.(while_fun_11, e, j, moved)
                catch
                  {:break, {e, j, moved}} -> {e, j, moved}
                end

              {e, moved}
            end
            {e} = if Enum.at(e, 5) == 1 do
              {e} = if moved && repro <= 0 do
                {e} = if typ == Process.get(:type_prey) do
                  Process.put(:board, List.replace_at(Process.get(:board), old_r, List.replace_at(Enum.at(Process.get(:board), old_r), old_c, 1)))
                  Process.put(:entities, (Process.get(:entities) ++ [create_prey(old_r, old_c)]))
                  e = List.replace_at(e, 3, Process.get(:prey_reproduction_time))
                  {e}
                else
                  Process.put(:board, List.replace_at(Process.get(:board), old_r, List.replace_at(Enum.at(Process.get(:board), old_r), old_c, 2)))
                  Process.put(:entities, (Process.get(:entities) ++ [create_predator(old_r, old_c)]))
                  e = List.replace_at(e, 3, Process.get(:predator_reproduction_time))
                  {e}
                end
                {e}
              else
                e = List.replace_at(e, 3, repro - 1)
                {e}
              end
              {e}
            else
              {e}
            end
            i = i + 1
          catch
            :continue -> nil
          end
          while_fun_8.(while_fun_8, i)
        else
          i
        end
      end
      i = try do
          while_fun_8.(while_fun_8, i)
        catch
          {:break, {i}} -> i
        end

      alive = []
      k = 0
      while_fun_12 = fn while_fun_12, alive, k ->
        if k < _len(Process.get(:entities)) do
          e2 = Enum.at(Process.get(:entities), k)
          {alive} = if Enum.at(e2, 5) == 1 do
            alive = (alive ++ [e2])
            {alive}
          else
            {alive}
          end
          k = k + 1
          while_fun_12.(while_fun_12, alive, k)
        else
          {alive, k}
        end
      end
      {alive, k} = try do
          while_fun_12.(while_fun_12, alive, k)
        catch
          {:break, {alive, k}} -> {alive, k}
        end

      Process.put(:entities, alive)
    catch
      {:return, val} -> val
    end
  end
  def count_entities(typ) do
    try do
      cnt = 0
      i = 0
      while_fun_13 = fn while_fun_13, cnt, i ->
        if i < _len(Process.get(:entities)) do
          {cnt} = if Enum.at(Enum.at(Process.get(:entities), i), 0) == typ && Enum.at(Enum.at(Process.get(:entities), i), 5) == 1 do
            cnt = cnt + 1
            {cnt}
          else
            {cnt}
          end
          i = i + 1
          while_fun_13.(while_fun_13, cnt, i)
        else
          {cnt, i}
        end
      end
      {cnt, i} = try do
          while_fun_13.(while_fun_13, cnt, i)
        catch
          {:break, {cnt, i}} -> {cnt, i}
        end

      throw {:return, cnt}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:width, 10)
  Process.put(:height, 10)
  Process.put(:prey_initial_count, 20)
  Process.put(:prey_reproduction_time, 5)
  Process.put(:predator_initial_count, 5)
  Process.put(:predator_reproduction_time, 20)
  Process.put(:predator_initial_energy, 15)
  Process.put(:predator_food_value, 5)
  Process.put(:type_prey, 0)
  Process.put(:type_predator, 1)
  Process.put(:seed, 123456789)
  Process.put(:entities, [])
  Process.put(:t, 0)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:board, create_board())
    Process.put(:dr, [-1, 0, 1, 0])
    Process.put(:dc, [0, 1, 0, -1])
    setup()
    while_fun_14 = fn while_fun_14 ->
      if Process.get(:t) < 10 do
        step_world()
        Process.put(:t, Process.get(:t) + 1)
        while_fun_14.(while_fun_14)
      else
        nil
      end
    end
    try do
      while_fun_14.(while_fun_14)
    catch
      :break -> nil
    end

    IO.puts(("Prey: " <> Kernel.inspect(count_entities(Process.get(:type_prey)))))
    IO.puts(("Predators: " <> Kernel.inspect(count_entities(Process.get(:type_predator)))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
