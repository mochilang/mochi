# Code generated by Mochi transpiler 2025-08-06 21:03 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def count_alive_neighbours(board, row, col) do
    try do
      size = _len(board)
      alive = 0
      dr = -1
      while_fun = fn while_fun, alive, dr ->
        if dr < 2 do
          dc = -1
          while_fun_2 = fn while_fun_2, alive, dc ->
            if dc < 2 do
              nr = row + dr
              nc = col + dc
              {alive} = if !(dr == 0 && dc == 0) && nr >= 0 && nr < size && nc >= 0 && nc < size do
                {alive} = if Enum.at(Enum.at(board, nr), nc) do
                  alive = alive + 1
                  {alive}
                else
                  {alive}
                end
                {alive}
              else
                {alive}
              end
              dc = dc + 1
              while_fun_2.(while_fun_2, alive, dc)
            else
              {alive, dc}
            end
          end
          {alive, dc} = try do
              while_fun_2.(while_fun_2, alive, dc)
            catch
              {:break, {alive, dc}} -> {alive, dc}
            end

          dr = dr + 1
          while_fun.(while_fun, alive, dr)
        else
          {alive, dr}
        end
      end
      {alive, dr} = try do
          while_fun.(while_fun, alive, dr)
        catch
          {:break, {alive, dr}} -> {alive, dr}
        end

      throw {:return, alive}
    catch
      {:return, val} -> val
    end
  end
  def next_state(current, alive) do
    try do
      state = current
      {state} = if current do
        {state} = if alive < 2 do
          state = false
          {state}
        else
          {state} = if alive == 2 || alive == 3 do
            state = true
            {state}
          else
            state = false
            {state}
          end
          {state}
        end
        {state}
      else
        {state} = if alive == 3 do
          state = true
          {state}
        else
          {state}
        end
        {state}
      end
      throw {:return, state}
    catch
      {:return, val} -> val
    end
  end
  def step(board) do
    try do
      size = _len(board)
      new_board = []
      r = 0
      while_fun_3 = fn while_fun_3, new_board, r ->
        if r < size do
          new_row = []
          c = 0
          while_fun_4 = fn while_fun_4, c, new_row ->
            if c < size do
              alive = count_alive_neighbours(board, r, c)
              cell = Enum.at(Enum.at(board, r), c)
              updated = next_state(cell, alive)
              new_row = (new_row ++ [updated])
              c = c + 1
              while_fun_4.(while_fun_4, c, new_row)
            else
              {c, new_row}
            end
          end
          {c, new_row} = try do
              while_fun_4.(while_fun_4, c, new_row)
            catch
              {:break, {c, new_row}} -> {c, new_row}
            end

          new_board = (new_board ++ [new_row])
          r = r + 1
          while_fun_3.(while_fun_3, new_board, r)
        else
          {new_board, r}
        end
      end
      {new_board, r} = try do
          while_fun_3.(while_fun_3, new_board, r)
        catch
          {:break, {new_board, r}} -> {new_board, r}
        end

      throw {:return, new_board}
    catch
      {:return, val} -> val
    end
  end
  def show(board) do
    try do
      r = 0
      while_fun_5 = fn while_fun_5, r ->
        if r < _len(board) do
          line = ""
          c = 0
          while_fun_6 = fn while_fun_6, c, line ->
            if c < _len(Enum.at(board, r)) do
              line = (if Enum.at(Enum.at(board, r), c), do: (line <> "#"), else: (line <> "."))
              c = c + 1
              while_fun_6.(while_fun_6, c, line)
            else
              {c, line}
            end
          end
          {c, line} = try do
              while_fun_6.(while_fun_6, c, line)
            catch
              {:break, {c, line}} -> {c, line}
            end

          IO.puts(line)
          r = r + 1
          while_fun_5.(while_fun_5, r)
        else
          r
        end
      end
      r = try do
          while_fun_5.(while_fun_5, r)
        catch
          {:break, {r}} -> r
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:glider, [[false, true, false, false, false], [false, false, true, false, false], [true, true, true, false, false], [false, false, false, false, false], [false, false, false, false, false]])
  Process.put(:i, 0)
  def main() do
    Process.put(:board, Process.get(:glider))
    IO.puts("Initial")
    show(Process.get(:board))
    while_fun_7 = fn while_fun_7 ->
      if Process.get(:i) < 4 do
        Process.put(:board, step(Process.get(:board)))
        IO.puts(("\nStep " <> Kernel.to_string(Process.get(:i) + 1)))
        show(Process.get(:board))
        Process.put(:i, Process.get(:i) + 1)
        while_fun_7.(while_fun_7)
      else
        nil
      end
    end
    try do
      while_fun_7.(while_fun_7)
    catch
      :break -> nil
    end

  end
end
Main.main()
