# Code generated by Mochi transpiler 2025-08-06 21:03 +0700
defmodule Main do
  def _now() do
    seeded = Process.get(:_now_seeded, false)
    seed = Process.get(:_now_seed, 0)
    if !seeded do
      case System.get_env("MOCHI_NOW_SEED") do
        nil -> :ok
        s ->
          case Integer.parse(s) do
            {v, ""} ->
              Process.put(:_now_seed, v)
              Process.put(:_now_seeded, true)
              seed = v
              seeded = true
            _ -> :ok
          end
      end
    end
    if seeded do
      seed = rem(seed * 1664525 + 1013904223, 2147483647)
      Process.put(:_now_seed, seed)
      abs(seed)
    else
      System.unique_integer([:positive, :monotonic])
    end
  end
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _lookup_host(host) do
    case :inet.gethostbyname(String.to_charlist(host)) do
      {:ok, {:hostent, _, _, _, _, addrs}} ->
        ips = Enum.map(addrs, &:inet.ntoa/1)
        [ips, nil]
      {:error, reason} ->
        [nil, reason]
    end
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  defp _bigrat(v) do
    _bigrat(v, 1)
  end
  defp _bigrat(n, d) do
    n = trunc(n)
    d = trunc(d)
    g = Integer.gcd(n, d)
    n = div(n, g)
    d = div(d, g)
    if d < 0 do
      {-n, -d}
    else
      {n, d}
    end
  end
  defp _bigrat_add(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd + ad * bn, ad * bd)
  end
  defp _bigrat_sub(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd - ad * bn, ad * bd)
  end
  defp _bigrat_mul(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bn, ad * bd)
  end
  defp _bigrat_div(a, b) do
    {an, ad} = a
    {bn, bd} = b
    _bigrat(an * bd, ad * bn)
  end
  defp _bigrat_neg(a) do
    {n, d} = a
    {-n, d}
  end
  defp _sha256(bs) do
    bin = :erlang.list_to_binary(bs)
    :crypto.hash(:sha256, bin) |> :erlang.binary_to_list()
  end
  defp _getenv(name) do
    System.get_env(name)
  end
  defp _environ() do
    System.get_env() |> Enum.map(fn {k, v} -> "#{k}=#{v}" end)
  end
  defp _getoutput(cmd) do
    {out, 0} = System.cmd("sh", ["-c", cmd])
    String.trim(out)
  end
  defp _fetch(url) do
    {out, 0} = System.cmd("curl", ["-fsSL", url])
    s = String.trim(out)
    case String.split(s, "\"title\":\"") do
      [_, rest] ->
        case String.split(rest, "\"") do
          [title | _] -> title
          _ -> ""
        end
      _ -> ""
    end
  end
  defp _md5_hex(s) do
    :crypto.hash(:md5, s) |> Base.encode16(case: :lower)
  end
  def new_generation(cells) do
    try do
      rows = _len(cells)
      cols = _len(Enum.at(cells, 0))
      next = []
      i = 0
      while_fun = fn while_fun, i, next ->
        if i < rows do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < cols do
              count = 0
              {count} = if i > 0 && j > 0 do
                count = count + Enum.at(Enum.at(cells, i - 1), j - 1)
                {count}
              else
                {count}
              end
              {count} = if i > 0 do
                count = count + Enum.at(Enum.at(cells, i - 1), j)
                {count}
              else
                {count}
              end
              {count} = if i > 0 && j < cols - 1 do
                count = count + Enum.at(Enum.at(cells, i - 1), j + 1)
                {count}
              else
                {count}
              end
              {count} = if j > 0 do
                count = count + Enum.at(Enum.at(cells, i), j - 1)
                {count}
              else
                {count}
              end
              {count} = if j < cols - 1 do
                count = count + Enum.at(Enum.at(cells, i), j + 1)
                {count}
              else
                {count}
              end
              {count} = if i < rows - 1 && j > 0 do
                count = count + Enum.at(Enum.at(cells, i + 1), j - 1)
                {count}
              else
                {count}
              end
              {count} = if i < rows - 1 do
                count = count + Enum.at(Enum.at(cells, i + 1), j)
                {count}
              else
                {count}
              end
              {count} = if i < rows - 1 && j < cols - 1 do
                count = count + Enum.at(Enum.at(cells, i + 1), j + 1)
                {count}
              else
                {count}
              end
              alive = Enum.at(Enum.at(cells, i), j) == 1
              row = (if (alive && count >= 2 && count <= 3) || (!alive && count == 3), do: (row ++ [1]), else: (row ++ [0]))
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          next = (next ++ [row])
          i = i + 1
          while_fun.(while_fun, i, next)
        else
          {i, next}
        end
      end
      {i, next} = try do
          while_fun.(while_fun, i, next)
        catch
          {:break, {i, next}} -> {i, next}
        end

      throw {:return, next}
    catch
      {:return, val} -> val
    end
  end
  def generate_generations(cells, frames) do
    try do
      result = []
      i = 0
      current = cells
      while_fun_3 = fn while_fun_3, current, i, result ->
        if i < frames do
          result = (result ++ [current])
          current = new_generation(current)
          i = i + 1
          while_fun_3.(while_fun_3, current, i, result)
        else
          {current, i, result}
        end
      end
      {current, i, result} = try do
          while_fun_3.(while_fun_3, current, i, result)
        catch
          {:break, {current, i, result}} -> {current, i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      frames = generate_generations(Process.get(:glider), 4)
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(frames) do
          IO.puts(Kernel.inspect(Enum.at(frames, i)))
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

    catch
      {:return, val} -> val
    end
  end
  Process.put(:glider, [[0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]])
  Process.put(:blinker, [[0, 1, 0], [0, 1, 0], [0, 1, 0]])
end
Main.main()
