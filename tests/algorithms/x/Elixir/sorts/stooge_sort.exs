# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def stooge(arr, i, h) do
    try do
      if i >= h do
        throw {:return, nil}
      end
      {arr} = if Enum.at(arr, i, []) > Enum.at(arr, h, []) do
        tmp = Enum.at(arr, i, [])
        arr = List.replace_at(arr, i, Enum.at(arr, h, []))
        arr = List.replace_at(arr, h, tmp)
        {arr}
      else
        {arr}
      end
      if h - i + 1 > 2 do
        t = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).((div((h - i + 1), 3)))
        stooge(arr, i, h - t)
        stooge(arr, i + t, h)
        stooge(arr, i, h - t)
      end
    catch
      {:return, val} -> val
    end
  end
  def stooge_sort(arr) do
    try do
      stooge(arr, 0, _len(arr) - 1)
      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(stooge_sort([18, 0, -7, -1, 2, 2])))
  end
end
Main.main()
