# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def subarray(xs, start, end_) do
    try do
      result = []
      i = start
      while_fun = fn while_fun, i, result ->
        if i < end_ do
          result = (result ++ [Enum.at(xs, i, [])])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def merge(left, right) do
    try do
      result = []
      i = 0
      j = 0
      while_fun_2 = fn while_fun_2, i, j, result ->
        if i < _len(left) && j < _len(right) do
          {i, j, result} = if Enum.at(left, i, []) <= Enum.at(right, j, []) do
            result = (result ++ [Enum.at(left, i, [])])
            i = i + 1
            {i, j, result}
          else
            result = (result ++ [Enum.at(right, j, [])])
            j = j + 1
            {i, j, result}
          end
          while_fun_2.(while_fun_2, i, j, result)
        else
          {i, j, result}
        end
      end
      {i, j, result} = try do
          while_fun_2.(while_fun_2, i, j, result)
        catch
          {:break, {i, j, result}} -> {i, j, result}
        end

      while_fun_3 = fn while_fun_3, i, result ->
        if i < _len(left) do
          result = (result ++ [Enum.at(left, i, [])])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      while_fun_4 = fn while_fun_4, j, result ->
        if j < _len(right) do
          result = (result ++ [Enum.at(right, j, [])])
          j = j + 1
          while_fun_4.(while_fun_4, j, result)
        else
          {j, result}
        end
      end
      {j, result} = try do
          while_fun_4.(while_fun_4, j, result)
        catch
          {:break, {j, result}} -> {j, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def merge_sort(collection) do
    try do
      if _len(collection) <= 1 do
        throw {:return, collection}
      end
      mid_index = div(_len(collection), 2)
      left = subarray(collection, 0, mid_index)
      right = subarray(collection, mid_index, _len(collection))
      sorted_left = merge_sort(left)
      sorted_right = merge_sort(right)
      throw {:return, merge(sorted_left, sorted_right)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(merge_sort([0, 5, 3, 2, 2])))
    IO.puts(Kernel.inspect(merge_sort([])))
    IO.puts(Kernel.inspect(merge_sort([-2, -5, -45])))
  end
end
Main.main()
