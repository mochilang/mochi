# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def index_of(s, ch) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(s) do
          if String.at(s, i) == ch do
            throw {:return, i}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, -1}
    catch
      {:return, val} -> val
    end
  end
  def is_digit(ch) do
    try do
      throw {:return, index_of(Process.get(:digits), ch) >= 0}
    catch
      {:return, val} -> val
    end
  end
  def to_lower(ch) do
    try do
      idx = index_of(Process.get(:upper), ch)
      if idx >= 0 do
        throw {:return, _slice(Process.get(:lower), idx, (idx + 1) - idx)}
      end
      throw {:return, ch}
    catch
      {:return, val} -> val
    end
  end
  def pad_left(s, width) do
    try do
      res = s
      while_fun_2 = fn while_fun_2, res ->
        if _len(res) < width do
          res = ("0" <> res)
          while_fun_2.(while_fun_2, res)
        else
          res
        end
      end
      res = try do
          while_fun_2.(while_fun_2, res)
        catch
          {:break, {res}} -> res
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def alphanum_key(s) do
    try do
      key = []
      i = 0
      while_fun_3 = fn while_fun_3, i, key ->
        if i < _len(s) do
          {i, key} = if is_digit(String.at(s, i)) do
            num = ""
            while_fun_4 = fn while_fun_4, i, num ->
              if i < _len(s) && is_digit(String.at(s, i)) do
                num = (num <> String.at(s, i))
                i = i + 1
                while_fun_4.(while_fun_4, i, num)
              else
                {i, num}
              end
            end
            {i, num} = try do
                while_fun_4.(while_fun_4, i, num)
              catch
                {:break, {i, num}} -> {i, num}
              end

            len_str = pad_left(Kernel.inspect(_len(num)), 3)
            key = (key ++ [(("#" <> len_str) <> num)])
            {i, key}
          else
            seg = ""
            while_fun_5 = fn while_fun_5, i, seg ->
              if i < _len(s) do
                if is_digit(String.at(s, i)) do
                  throw {:break, {i, seg}}
                end
                seg = (seg <> to_lower(String.at(s, i)))
                i = i + 1
                while_fun_5.(while_fun_5, i, seg)
              else
                {i, seg}
              end
            end
            {i, seg} = try do
                while_fun_5.(while_fun_5, i, seg)
              catch
                {:break, {i, seg}} -> {i, seg}
              end

            key = (key ++ [seg])
            {i, key}
          end
          while_fun_3.(while_fun_3, i, key)
        else
          {i, key}
        end
      end
      {i, key} = try do
          while_fun_3.(while_fun_3, i, key)
        catch
          {:break, {i, key}} -> {i, key}
        end

      throw {:return, key}
    catch
      {:return, val} -> val
    end
  end
  def compare_keys(a, b) do
    try do
      i = 0
      while_fun_6 = fn while_fun_6, i ->
        if i < _len(a) && i < _len(b) do
          if Enum.at(a, i, []) < Enum.at(b, i, []) do
            throw {:return, -1}
          end
          if Enum.at(a, i, []) > Enum.at(b, i, []) do
            throw {:return, 1}
          end
          i = i + 1
          while_fun_6.(while_fun_6, i)
        else
          i
        end
      end
      i = try do
          while_fun_6.(while_fun_6, i)
        catch
          {:break, {i}} -> i
        end

      if _len(a) < _len(b) do
        throw {:return, -1}
      end
      if _len(a) > _len(b) do
        throw {:return, 1}
      end
      throw {:return, 0}
    catch
      {:return, val} -> val
    end
  end
  def natural_sort(arr) do
    try do
      res = []
      keys = []
      k = 0
      while_fun_7 = fn while_fun_7, k, keys, res ->
        if k < _len(arr) do
          res = (res ++ [Enum.at(arr, k, [])])
          keys = (keys ++ [alphanum_key(Enum.at(arr, k, []))])
          k = k + 1
          while_fun_7.(while_fun_7, k, keys, res)
        else
          {k, keys, res}
        end
      end
      {k, keys, res} = try do
          while_fun_7.(while_fun_7, k, keys, res)
        catch
          {:break, {k, keys, res}} -> {k, keys, res}
        end

      i = 1
      while_fun_8 = fn while_fun_8, i, keys, res ->
        if i < _len(res) do
          current = Enum.at(res, i, [])
          current_key = Enum.at(keys, i, [])
          j = i - 1
          while_fun_9 = fn while_fun_9, j, keys, res ->
            if j >= 0 && compare_keys(Enum.at(keys, j, []), current_key) > 0 do
              res = List.replace_at(res, j + 1, Enum.at(res, j, []))
              keys = List.replace_at(keys, j + 1, Enum.at(keys, j, []))
              j = j - 1
              while_fun_9.(while_fun_9, j, keys, res)
            else
              {j, keys, res}
            end
          end
          {j, keys, res} = try do
              while_fun_9.(while_fun_9, j, keys, res)
            catch
              {:break, {j, keys, res}} -> {j, keys, res}
            end

          res = List.replace_at(res, j + 1, current)
          keys = List.replace_at(keys, j + 1, current_key)
          i = i + 1
          while_fun_8.(while_fun_8, i, keys, res)
        else
          {i, keys, res}
        end
      end
      {i, keys, res} = try do
          while_fun_8.(while_fun_8, i, keys, res)
        catch
          {:break, {i, keys, res}} -> {i, keys, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:digits, "0123456789")
  Process.put(:lower, "abcdefghijklmnopqrstuvwxyz")
  Process.put(:upper, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  Process.put(:example1, ["2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"])
  Process.put(:example2, ["Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"])
  def main() do
    IO.puts(Kernel.inspect(natural_sort(Process.get(:example1))))
    IO.puts(Kernel.inspect(natural_sort(Process.get(:example2))))
  end
end
Main.main()
