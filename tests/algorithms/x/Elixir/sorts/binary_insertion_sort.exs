# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def binary_insertion_sort(arr) do
    try do
      i = 1
      while_fun = fn while_fun, arr, i ->
        if i < _len(arr) do
          value = Enum.at(arr, i, [])
          low = 0
          high = i - 1
          while_fun_2 = fn while_fun_2, high, low ->
            if low <= high do
              mid = div((low + high), 2)
              {high, low} = if value < Enum.at(arr, mid, []) do
                high = mid - 1
                {high, low}
              else
                low = mid + 1
                {high, low}
              end
              while_fun_2.(while_fun_2, high, low)
            else
              {high, low}
            end
          end
          {high, low} = try do
              while_fun_2.(while_fun_2, high, low)
            catch
              {:break, {high, low}} -> {high, low}
            end

          j = i
          while_fun_3 = fn while_fun_3, arr, j ->
            if j > low do
              arr = List.replace_at(arr, j, Enum.at(arr, j - 1, []))
              j = j - 1
              while_fun_3.(while_fun_3, arr, j)
            else
              {arr, j}
            end
          end
          {arr, _} = try do
              while_fun_3.(while_fun_3, arr, j)
            catch
              {:break, {arr, _}} -> {arr, 0}
            end

          arr = List.replace_at(arr, low, value)
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, _} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, _}} -> {arr, 0}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      example1 = [5, 2, 4, 6, 1, 3]
      IO.puts(Kernel.inspect(binary_insertion_sort(example1)))
      example2 = []
      IO.puts(Kernel.inspect(binary_insertion_sort(example2)))
      example3 = [4, 2, 4, 1, 3]
      IO.puts(Kernel.inspect(binary_insertion_sort(example3)))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
