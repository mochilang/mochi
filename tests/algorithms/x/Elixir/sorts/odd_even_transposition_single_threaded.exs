# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def odd_even_transposition(arr) do
    try do
      n = _len(arr)
      pass = 0
      while_fun = fn while_fun, arr, pass ->
        if pass < n do
          i = rem(pass, 2)
          while_fun_2 = fn while_fun_2, arr, i ->
            if i < n - 1 do
              {arr} = if Enum.at(arr, i + 1, []) < Enum.at(arr, i, []) do
                tmp = Enum.at(arr, i, [])
                arr = List.replace_at(arr, i, Enum.at(arr, i + 1, []))
                arr = List.replace_at(arr, i + 1, tmp)
                {arr}
              else
                {arr}
              end
              i = i + 2
              while_fun_2.(while_fun_2, arr, i)
            else
              {arr, i}
            end
          end
          {arr, i} = try do
              while_fun_2.(while_fun_2, arr, i)
            catch
              {:break, {arr, i}} -> {arr, i}
            end

          pass = pass + 1
          while_fun.(while_fun, arr, pass)
        else
          {arr, pass}
        end
      end
      {arr, pass} = try do
          while_fun.(while_fun, arr, pass)
        catch
          {:break, {arr, pass}} -> {arr, pass}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(odd_even_transposition([5.0, 4.0, 3.0, 2.0, 1.0])))
    IO.puts(Kernel.inspect(odd_even_transposition([13.0, 11.0, 18.0, 0.0, -1.0])))
    IO.puts(Kernel.inspect(odd_even_transposition([-0.1, 1.1, 0.1, -2.9])))
  end
end
Main.main()
