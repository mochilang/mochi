# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def shell_sort(collection) do
    try do
      gap = _len(collection)
      ten = 10
      thirteen = 13
      while_fun = fn while_fun, collection, gap ->
        if gap > 1 do
          gap = div(gap * ten, thirteen)
          i = gap
          while_fun_2 = fn while_fun_2, collection, i ->
            if i < _len(collection) do
              temp = Enum.at(collection, i, [])
              j = i
              while_fun_3 = fn while_fun_3, collection, j ->
                if j >= gap && Enum.at(collection, j - gap, []) > temp do
                  collection = List.replace_at(collection, j, Enum.at(collection, j - gap, []))
                  j = j - gap
                  while_fun_3.(while_fun_3, collection, j)
                else
                  {collection, j}
                end
              end
              {collection, j} = try do
                  while_fun_3.(while_fun_3, collection, j)
                catch
                  {:break, {collection, j}} -> {collection, j}
                end

              collection = List.replace_at(collection, j, temp)
              i = i + 1
              while_fun_2.(while_fun_2, collection, i)
            else
              {collection, i}
            end
          end
          {collection, i} = try do
              while_fun_2.(while_fun_2, collection, i)
            catch
              {:break, {collection, i}} -> {collection, i}
            end

          while_fun.(while_fun, collection, gap)
        else
          {collection, gap}
        end
      end
      {collection, gap} = try do
          while_fun.(while_fun, collection, gap)
        catch
          {:break, {collection, gap}} -> {collection, gap}
        end

      throw {:return, collection}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(shell_sort([3, 2, 1])))
      IO.puts(Kernel.inspect(shell_sort([])))
      IO.puts(Kernel.inspect(shell_sort([1])))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
