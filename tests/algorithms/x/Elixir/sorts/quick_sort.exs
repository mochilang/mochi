# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def quick_sort(items) do
    try do
      if _len(items) < 2 do
        throw {:return, items}
      end
      pivot = Enum.at(items, 0, [])
      lesser = []
      greater = []
      i = 1
      while_fun = fn while_fun, greater, i, lesser ->
        if i < _len(items) do
          item = Enum.at(items, i, [])
          {greater, lesser} = if item <= pivot do
            lesser = (lesser ++ [item])
            {greater, lesser}
          else
            greater = (greater ++ [item])
            {greater, lesser}
          end
          i = i + 1
          while_fun.(while_fun, greater, i, lesser)
        else
          {greater, i, lesser}
        end
      end
      {greater, i, lesser} = try do
          while_fun.(while_fun, greater, i, lesser)
        catch
          {:break, {greater, i, lesser}} -> {greater, i, lesser}
        end

      throw {:return, ((quick_sort(lesser) ++ [pivot]) ++ quick_sort(greater))}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts("sorted1: #{Kernel.inspect(quick_sort([0, 5, 3, 2, 2]))}")
    IO.puts("sorted2: #{Kernel.inspect(quick_sort([]))}")
    IO.puts("sorted3: #{Kernel.inspect(quick_sort([-2, 5, 0, -45]))}")
  end
end
Main.main()
