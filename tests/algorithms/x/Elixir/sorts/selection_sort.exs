# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def selection_sort(arr) do
    try do
      n = _len(arr)
      i = 0
      while_fun = fn while_fun, arr, i ->
        if i < n - 1 do
          min_index = i
          k = i + 1
          while_fun_2 = fn while_fun_2, k, min_index ->
            if k < n do
              {min_index} = if Enum.at(arr, k, []) < Enum.at(arr, min_index, []) do
                min_index = k
                {min_index}
              else
                {min_index}
              end
              k = k + 1
              while_fun_2.(while_fun_2, k, min_index)
            else
              {k, min_index}
            end
          end
          {k, min_index} = try do
              while_fun_2.(while_fun_2, k, min_index)
            catch
              {:break, {k, min_index}} -> {k, min_index}
            end

          {arr} = if min_index != i do
            tmp = Enum.at(arr, i, [])
            arr = List.replace_at(arr, i, Enum.at(arr, min_index, []))
            arr = List.replace_at(arr, min_index, tmp)
            {arr}
          else
            {arr}
          end
          i = i + 1
          while_fun.(while_fun, arr, i)
        else
          {arr, i}
        end
      end
      {arr, i} = try do
          while_fun.(while_fun, arr, i)
        catch
          {:break, {arr, i}} -> {arr, i}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(selection_sort([0, 5, 3, 2, 2])))
    IO.puts(Kernel.inspect(selection_sort([])))
    IO.puts(Kernel.inspect(selection_sort([-2, -5, -45])))
  end
end
Main.main()
