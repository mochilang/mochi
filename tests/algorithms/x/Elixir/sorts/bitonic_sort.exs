# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def set_at_int(xs, idx, value) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(xs) do
          res = (if i == idx, do: (res ++ [value]), else: (res ++ [Enum.at(xs, i, [])]))
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {_, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {_, res}} -> {0, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def comp_and_swap(arr, i, j, dir) do
    try do
      res = arr
      xi = Enum.at(arr, i, [])
      xj = Enum.at(arr, j, [])
      res = if (dir == 1 && xi > xj) || (dir == 0 && xi < xj) do
        res = set_at_int(res, i, xj)
        res = set_at_int(res, j, xi)
        res
      else
        res
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bitonic_merge(arr, low, length, dir) do
    try do
      res = arr
      res = if length > 1 do
        mid = div(length, 2)
        k = low
        while_fun_2 = fn while_fun_2, k, res ->
          if k < low + mid do
            res = comp_and_swap(res, k, k + mid, dir)
            k = k + 1
            while_fun_2.(while_fun_2, k, res)
          else
            {k, res}
          end
        end
        {_, res} = try do
            while_fun_2.(while_fun_2, k, res)
          catch
            {:break, {_, res}} -> {0, res}
          end

        res = bitonic_merge(res, low, mid, dir)
        res = bitonic_merge(res, low + mid, mid, dir)
        res
      else
        res
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def bitonic_sort(arr, low, length, dir) do
    try do
      res = arr
      res = if length > 1 do
        mid = div(length, 2)
        res = bitonic_sort(res, low, mid, 1)
        res = bitonic_sort(res, low + mid, mid, 0)
        res = bitonic_merge(res, low, length, dir)
        res
      else
        res
      end
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      data = [12, 34, 92, -23, 0, -121, -167, 145]
      asc = bitonic_sort(data, 0, _len(data), 1)
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [asc])), ",", " "))
      desc = bitonic_merge(asc, 0, _len(asc), 0)
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [desc])), ",", " "))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
