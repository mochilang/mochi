# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def swap(xs, i, j) do
    try do
      res = []
      k = 0
      while_fun = fn while_fun, k, res ->
        if k < _len(xs) do
          {res} = if k == i do
            res = (res ++ [Enum.at(xs, j, [])])
            {res}
          else
            {res} = if k == j do
              res = (res ++ [Enum.at(xs, i, [])])
              {res}
            else
              res = (res ++ [Enum.at(xs, k, [])])
              {res}
            end
            {res}
          end
          k = k + 1
          while_fun.(while_fun, k, res)
        else
          {k, res}
        end
      end
      {k, res} = try do
          while_fun.(while_fun, k, res)
        catch
          {:break, {k, res}} -> {k, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def wiggle_sort(nums) do
    try do
      i = 0
      res = nums
      while_fun_2 = fn while_fun_2, i, res ->
        if i < _len(res) do
          j = (if i == 0, do: _len(res) - 1, else: i - 1)
          prev = Enum.at(res, j, [])
          curr = Enum.at(res, i, [])
          {res} = if (rem(i, 2) == 1) == (prev > curr) do
            res = swap(res, j, i)
            {res}
          else
            {res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun_2.(while_fun_2, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(wiggle_sort([3.0, 5.0, 2.0, 1.0, 6.0, 4.0])))
    IO.puts(Kernel.inspect(wiggle_sort([0.0, 5.0, 3.0, 2.0, 2.0])))
    IO.puts(Kernel.inspect(wiggle_sort([])))
    IO.puts(Kernel.inspect(wiggle_sort([-2.0, -5.0, -45.0])))
    IO.puts(Kernel.inspect(wiggle_sort([-2.1, -5.68, -45.11])))
  end
end
Main.main()
