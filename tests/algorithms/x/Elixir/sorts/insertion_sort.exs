# Code generated by Mochi transpiler 2025-08-24 08:57 +0700
defmodule Main do
  @data_dir nil
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def insertion_sort(xs) do
    try do
      i = 1
      while_fun = fn while_fun, i, xs ->
        if i < _len(xs) do
          value = Enum.at(xs, i, [])
          j = i - 1
          while_fun_2 = fn while_fun_2, j, xs ->
            if j >= 0 && Enum.at(xs, j, []) > value do
              xs = List.replace_at(xs, j + 1, Enum.at(xs, j, []))
              j = j - 1
              while_fun_2.(while_fun_2, j, xs)
            else
              {j, xs}
            end
          end
          {_, xs} = try do
              while_fun_2.(while_fun_2, j, xs)
            catch
              {:break, {_, xs}} -> {0, xs}
            end

          xs = List.replace_at(xs, j + 1, value)
          i = i + 1
          while_fun.(while_fun, i, xs)
        else
          {i, xs}
        end
      end
      {_, xs} = try do
          while_fun.(while_fun, i, xs)
        catch
          {:break, {_, xs}} -> {0, xs}
        end

      throw {:return, xs}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(insertion_sort([0, 5, 3, 2, 2])))
    IO.puts(Kernel.inspect(insertion_sort([])))
    IO.puts(Kernel.inspect(insertion_sort([-2, -5, -45])))
    IO.puts(Kernel.inspect(insertion_sort([3])))
  end
end
Main.main()
