# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def make_list(n, value) do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = (result ++ [value])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def min_value(arr) do
    try do
      m = Enum.at(arr, 0, [])
      i = 1
      while_fun_2 = fn while_fun_2, i, m ->
        if i < _len(arr) do
          {m} = if Enum.at(arr, i, []) < m do
            m = Enum.at(arr, i, [])
            {m}
          else
            {m}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i, m)
        else
          {i, m}
        end
      end
      {i, m} = try do
          while_fun_2.(while_fun_2, i, m)
        catch
          {:break, {i, m}} -> {i, m}
        end

      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def max_value(arr) do
    try do
      m = Enum.at(arr, 0, [])
      i = 1
      while_fun_3 = fn while_fun_3, i, m ->
        if i < _len(arr) do
          {m} = if Enum.at(arr, i, []) > m do
            m = Enum.at(arr, i, [])
            {m}
          else
            {m}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, m)
        else
          {i, m}
        end
      end
      {i, m} = try do
          while_fun_3.(while_fun_3, i, m)
        catch
          {:break, {i, m}} -> {i, m}
        end

      throw {:return, m}
    catch
      {:return, val} -> val
    end
  end
  def pigeon_sort(array) do
    try do
      if _len(array) == 0 do
        throw {:return, array}
      end
      mn = min_value(array)
      mx = max_value(array)
      holes_range = mx - mn + 1
      holes = make_list(holes_range, 0)
      holes_repeat = make_list(holes_range, 0)
      i = 0
      while_fun_4 = fn while_fun_4, holes, holes_repeat, i ->
        if i < _len(array) do
          index = Enum.at(array, i, []) - mn
          holes = List.replace_at(holes, index, Enum.at(array, i, []))
          holes_repeat = List.replace_at(holes_repeat, index, Enum.at(holes_repeat, index, []) + 1)
          i = i + 1
          while_fun_4.(while_fun_4, holes, holes_repeat, i)
        else
          {holes, holes_repeat, i}
        end
      end
      {holes, holes_repeat, i} = try do
          while_fun_4.(while_fun_4, holes, holes_repeat, i)
        catch
          {:break, {holes, holes_repeat, i}} -> {holes, holes_repeat, i}
        end

      array_index = 0
      h = 0
      while_fun_5 = fn while_fun_5, array, array_index, h, holes_repeat ->
        if h < holes_range do
          while_fun_6 = fn while_fun_6, array, array_index, holes_repeat ->
            if Enum.at(holes_repeat, h, []) > 0 do
              array = List.replace_at(array, array_index, Enum.at(holes, h, []))
              array_index = array_index + 1
              holes_repeat = List.replace_at(holes_repeat, h, Enum.at(holes_repeat, h, []) - 1)
              while_fun_6.(while_fun_6, array, array_index, holes_repeat)
            else
              {array, array_index, holes_repeat}
            end
          end
          {array, array_index, holes_repeat} = try do
              while_fun_6.(while_fun_6, array, array_index, holes_repeat)
            catch
              {:break, {array, array_index, holes_repeat}} -> {array, array_index, holes_repeat}
            end

          h = h + 1
          while_fun_5.(while_fun_5, array, array_index, h, holes_repeat)
        else
          {array, array_index, h, holes_repeat}
        end
      end
      {array, array_index, h, holes_repeat} = try do
          while_fun_5.(while_fun_5, array, array_index, h, holes_repeat)
        catch
          {:break, {array, array_index, h, holes_repeat}} -> {array, array_index, h, holes_repeat}
        end

      throw {:return, array}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(pigeon_sort([0, 5, 3, 2, 2])))
    IO.puts(Kernel.inspect(pigeon_sort([])))
    IO.puts(Kernel.inspect(pigeon_sort([-2, -5, -45])))
  end
end
Main.main()
