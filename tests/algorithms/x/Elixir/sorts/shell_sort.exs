# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def shell_sort(collection) do
    try do
      arr = collection
      gaps = [701, 301, 132, 57, 23, 10, 4, 1]
      g = 0
      while_fun = fn while_fun, arr, g ->
        if g < _len(gaps) do
          gap = Enum.at(gaps, g, [])
          i = gap
          while_fun_2 = fn while_fun_2, arr, i ->
            if i < _len(arr) do
              insert_value = Enum.at(arr, i, [])
              j = i
              while_fun_3 = fn while_fun_3, arr, j ->
                if j >= gap && Enum.at(arr, j - gap, []) > insert_value do
                  arr = List.replace_at(arr, j, Enum.at(arr, j - gap, []))
                  j = j - gap
                  while_fun_3.(while_fun_3, arr, j)
                else
                  {arr, j}
                end
              end
              {arr, j} = try do
                  while_fun_3.(while_fun_3, arr, j)
                catch
                  {:break, {arr, j}} -> {arr, j}
                end

              {arr} = if j != i do
                arr = List.replace_at(arr, j, insert_value)
                {arr}
              else
                {arr}
              end
              i = i + 1
              while_fun_2.(while_fun_2, arr, i)
            else
              {arr, i}
            end
          end
          {arr, i} = try do
              while_fun_2.(while_fun_2, arr, i)
            catch
              {:break, {arr, i}} -> {arr, i}
            end

          g = g + 1
          while_fun.(while_fun, arr, g)
        else
          {arr, g}
        end
      end
      {arr, g} = try do
          while_fun.(while_fun, arr, g)
        catch
          {:break, {arr, g}} -> {arr, g}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(shell_sort([0, 5, 3, 2, 2])))
    IO.puts(Kernel.inspect(shell_sort([])))
    IO.puts(Kernel.inspect(shell_sort([-2, -5, -45])))
  end
end
Main.main()
