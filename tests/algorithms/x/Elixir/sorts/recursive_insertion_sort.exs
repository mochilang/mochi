# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def insert_next(collection, index) do
    try do
      arr = collection
      if index >= _len(arr) || Enum.at(arr, index - 1, []) <= Enum.at(arr, index, []) do
        throw {:return, arr}
      end
      j = index - 1
      temp = Enum.at(arr, j, [])
      arr = List.replace_at(arr, j, Enum.at(arr, index, []))
      arr = List.replace_at(arr, index, temp)
      throw {:return, insert_next(arr, index + 1)}
    catch
      {:return, val} -> val
    end
  end
  def rec_insertion_sort(collection, n) do
    try do
      arr = collection
      if _len(arr) <= 1 || n <= 1 do
        throw {:return, arr}
      end
      arr = insert_next(arr, n - 1)
      throw {:return, rec_insertion_sort(arr, n - 1)}
    catch
      {:return, val} -> val
    end
  end
  def test_rec_insertion_sort() do
    try do
      col1 = [1, 2, 1]
      col1 = rec_insertion_sort(col1, _len(col1))
      if Enum.at(col1, 0, []) != 1 || Enum.at(col1, 1, []) != 1 || Enum.at(col1, 2, []) != 2 do
        raise("test1 failed")
      end
      col2 = [2, 1, 0, -1, -2]
      col2 = rec_insertion_sort(col2, _len(col2))
      if Enum.at(col2, 0, []) != (0 - 2) do
        raise("test2 failed")
      end
      if Enum.at(col2, 1, []) != (0 - 1) do
        raise("test2 failed")
      end
      if Enum.at(col2, 2, []) != 0 do
        raise("test2 failed")
      end
      if Enum.at(col2, 3, []) != 1 do
        raise("test2 failed")
      end
      if Enum.at(col2, 4, []) != 2 do
        raise("test2 failed")
      end
      col3 = [1]
      col3 = rec_insertion_sort(col3, _len(col3))
      if Enum.at(col3, 0, []) != 1 do
        raise("test3 failed")
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      test_rec_insertion_sort()
      numbers = [5, 3, 4, 1, 2]
      numbers = rec_insertion_sort(numbers, _len(numbers))
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [numbers])), ",", " "))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
