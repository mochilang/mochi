# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def bead_sort(sequence) do
    try do
      n = _len(sequence)
      i = 0
      while_fun = fn while_fun, i ->
        if i < n do
          if Enum.at(sequence, i, []) < 0 do
            raise("Sequence must be list of non-negative integers")
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      _ = try do
          while_fun.(while_fun, i)
        catch
          {:break, {_}} -> 0
        end

      pass = 0
      while_fun_2 = fn while_fun_2, pass, sequence ->
        if pass < n do
          j = 0
          while_fun_3 = fn while_fun_3, j, sequence ->
            if j < n - 1 do
              upper = Enum.at(sequence, j, [])
              lower = Enum.at(sequence, j + 1, [])
              sequence = if upper > lower do
                diff = upper - lower
                sequence = List.replace_at(sequence, j, upper - diff)
                sequence = List.replace_at(sequence, j + 1, lower + diff)
                sequence
              else
                sequence
              end
              j = j + 1
              while_fun_3.(while_fun_3, j, sequence)
            else
              {j, sequence}
            end
          end
          {_, sequence} = try do
              while_fun_3.(while_fun_3, j, sequence)
            catch
              {:break, {_, sequence}} -> {0, sequence}
            end

          pass = pass + 1
          while_fun_2.(while_fun_2, pass, sequence)
        else
          {pass, sequence}
        end
      end
      {pass, sequence} = try do
          while_fun_2.(while_fun_2, pass, sequence)
        catch
          {:break, {pass, sequence}} -> {pass, sequence}
        end

      throw {:return, sequence}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(bead_sort([6, 11, 12, 4, 1, 5])))
    IO.puts(Kernel.inspect(bead_sort([9, 8, 7, 6, 5, 4, 3, 2, 1])))
    IO.puts(Kernel.inspect(bead_sort([5, 0, 4, 3])))
    IO.puts(Kernel.inspect(bead_sort([8, 2, 1])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
