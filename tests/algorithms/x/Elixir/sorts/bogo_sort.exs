# Code generated by Mochi transpiler 2025-08-23 01:20 +0700
defmodule Main do
  @data_dir nil
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def rand() do
    try do
      Process.put(:seed, rem((Process.get(:seed) * 1103515245 + 12345), 2147483648))
      throw {:return, Process.get(:seed)}
    catch
      {:return, val} -> val
    end
  end
  def rand_range(max) do
    try do
      throw {:return, rem(rand(), max)}
    catch
      {:return, val} -> val
    end
  end
  def shuffle(list_int) do
    try do
      i = _len(list_int) - 1
      while_fun = fn while_fun, i, list_int ->
        if i > 0 do
          j = rand_range(i + 1)
          tmp = Enum.at(list_int, i, [])
          list_int = List.replace_at(list_int, i, Enum.at(list_int, j, []))
          list_int = List.replace_at(list_int, j, tmp)
          i = i - 1
          while_fun.(while_fun, i, list_int)
        else
          {i, list_int}
        end
      end
      {_, list_int} = try do
          while_fun.(while_fun, i, list_int)
        catch
          {:break, {_, list_int}} -> {0, list_int}
        end

      throw {:return, list_int}
    catch
      {:return, val} -> val
    end
  end
  def is_sorted(list_int) do
    try do
      i = 0
      while_fun_2 = fn while_fun_2, i ->
        if i < _len(list_int) - 1 do
          if Enum.at(list_int, i, []) > Enum.at(list_int, i + 1, []) do
            throw {:return, false}
          end
          i = i + 1
          while_fun_2.(while_fun_2, i)
        else
          i
        end
      end
      _ = try do
          while_fun_2.(while_fun_2, i)
        catch
          {:break, {_}} -> 0
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def bogo_sort(list_int) do
    try do
      res = list_int
      while_fun_3 = fn while_fun_3, res ->
        if !is_sorted(res) do
          res = shuffle(res)
          while_fun_3.(while_fun_3, res)
        else
          res
        end
      end
      res = try do
          while_fun_3.(while_fun_3, res)
        catch
          {:break, {res}} -> res
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seed, 1)
  Process.put(:data, [3, 2, 1])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(bogo_sort(Process.get(:data))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
