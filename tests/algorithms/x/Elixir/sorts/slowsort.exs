# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def swap(seq, i, j) do
    try do
      temp = Enum.at(seq, i, [])
      seq = List.replace_at(seq, i, Enum.at(seq, j, []))
      seq = List.replace_at(seq, j, temp)
    catch
      {:return, val} -> val
    end
  end
  def slowsort_recursive(seq, start, end_index) do
    try do
      if start >= end_index do
        throw {:return, nil}
      end
      mid = div((start + end_index), 2)
      slowsort_recursive(seq, start, mid)
      slowsort_recursive(seq, mid + 1, end_index)
      if Enum.at(seq, end_index, []) < Enum.at(seq, mid, []) do
        swap(seq, end_index, mid)
      end
      slowsort_recursive(seq, start, end_index - 1)
    catch
      {:return, val} -> val
    end
  end
  def slow_sort(seq) do
    try do
      if _len(seq) > 0 do
        slowsort_recursive(seq, 0, _len(seq) - 1)
      end
      throw {:return, seq}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:seq1, [1, 6, 2, 5, 3, 4, 4, 5])
  Process.put(:seq2, [])
  Process.put(:seq3, [2])
  Process.put(:seq4, [1, 2, 3, 4])
  Process.put(:seq5, [4, 3, 2, 1])
  Process.put(:seq6, [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
  Process.put(:seq7, [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
  Process.put(:seq8, [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
  def main() do
    IO.puts(Kernel.inspect(slow_sort(Process.get(:seq1))))
    IO.puts(Kernel.inspect(slow_sort(Process.get(:seq2))))
    IO.puts(Kernel.inspect(slow_sort(Process.get(:seq3))))
    IO.puts(Kernel.inspect(slow_sort(Process.get(:seq4))))
    IO.puts(Kernel.inspect(slow_sort(Process.get(:seq5))))
    slowsort_recursive(Process.get(:seq6), 2, 7)
    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:seq6)])), ",", " "))
    slowsort_recursive(Process.get(:seq7), 0, 4)
    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:seq7)])), ",", " "))
    slowsort_recursive(Process.get(:seq8), 5, _len(Process.get(:seq8)) - 1)
    IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [Process.get(:seq8)])), ",", " "))
  end
end
Main.main()
