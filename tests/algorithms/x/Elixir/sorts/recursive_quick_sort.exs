# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def concat(a, b) do
    try do
      result = []
      {result} = Enum.reduce(a, {result}, fn x, {result} ->
        result = (result ++ [x])
        {result}
      end)
      {result} = Enum.reduce(b, {result}, fn x, {result} ->
        result = (result ++ [x])
        {result}
      end)
      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def quick_sort(data) do
    try do
      if _len(data) <= 1 do
        throw {:return, data}
      end
      pivot = Enum.at(data, 0, [])
      left = []
      right = []
      i = 1
      while_fun = fn while_fun, i, left, right ->
        if i < _len(data) do
          e = Enum.at(data, i, [])
          {left, right} = if e <= pivot do
            left = (left ++ [e])
            {left, right}
          else
            right = (right ++ [e])
            {left, right}
          end
          i = i + 1
          while_fun.(while_fun, i, left, right)
        else
          {i, left, right}
        end
      end
      {i, left, right} = try do
          while_fun.(while_fun, i, left, right)
        catch
          {:break, {i, left, right}} -> {i, left, right}
        end

      sorted_left = quick_sort(left)
      sorted_right = quick_sort(right)
      left_pivot = (sorted_left ++ [pivot])
      throw {:return, concat(left_pivot, sorted_right)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(quick_sort([2, 1, 0])))
    IO.puts(Kernel.inspect(quick_sort([3, 5, 2, 4, 1])))
  end
end
Main.main()
