# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def odd_even_transposition(xs) do
    try do
      arr = xs
      n = _len(arr)
      phase = 0
      while_fun = fn while_fun, arr, phase ->
        if phase < n do
          start = (if rem(phase, 2) == 0, do: 0, else: 1)
          i = start
          while_fun_2 = fn while_fun_2, arr, i ->
            if i + 1 < n do
              {arr} = if Enum.at(arr, i, []) > Enum.at(arr, i + 1, []) do
                tmp = Enum.at(arr, i, [])
                arr = List.replace_at(arr, i, Enum.at(arr, i + 1, []))
                arr = List.replace_at(arr, i + 1, tmp)
                {arr}
              else
                {arr}
              end
              i = i + 2
              while_fun_2.(while_fun_2, arr, i)
            else
              {arr, i}
            end
          end
          {arr, i} = try do
              while_fun_2.(while_fun_2, arr, i)
            catch
              {:break, {arr, i}} -> {arr, i}
            end

          phase = phase + 1
          while_fun.(while_fun, arr, phase)
        else
          {arr, phase}
        end
      end
      {arr, phase} = try do
          while_fun.(while_fun, arr, phase)
        catch
          {:break, {arr, phase}} -> {arr, phase}
        end

      throw {:return, arr}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      data = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
      IO.puts("Initial List")
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [data])), ",", " "))
      sorted = odd_even_transposition(data)
      IO.puts("Sorted List")
      IO.puts(String.replace(IO.iodata_to_binary(:io_lib.format("~w", [sorted])), ",", " "))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
