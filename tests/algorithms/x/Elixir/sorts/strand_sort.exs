# Code generated by Mochi transpiler 2025-08-11 17:23 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def merge(xs, ys, reverse) do
    try do
      result = []
      i = 0
      j = 0
      while_fun = fn while_fun, i, j, result ->
        if i < _len(xs) && j < _len(ys) do
          {i, j, result} = if reverse do
            {i, j, result} = if Enum.at(xs, i, []) > Enum.at(ys, j, []) do
              result = (result ++ [Enum.at(xs, i, [])])
              i = i + 1
              {i, j, result}
            else
              result = (result ++ [Enum.at(ys, j, [])])
              j = j + 1
              {i, j, result}
            end
            {i, j, result}
          else
            {i, j, result} = if Enum.at(xs, i, []) < Enum.at(ys, j, []) do
              result = (result ++ [Enum.at(xs, i, [])])
              i = i + 1
              {i, j, result}
            else
              result = (result ++ [Enum.at(ys, j, [])])
              j = j + 1
              {i, j, result}
            end
            {i, j, result}
          end
          while_fun.(while_fun, i, j, result)
        else
          {i, j, result}
        end
      end
      {i, j, result} = try do
          while_fun.(while_fun, i, j, result)
        catch
          {:break, {i, j, result}} -> {i, j, result}
        end

      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(xs) do
          result = (result ++ [Enum.at(xs, i, [])])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      while_fun_3 = fn while_fun_3, j, result ->
        if j < _len(ys) do
          result = (result ++ [Enum.at(ys, j, [])])
          j = j + 1
          while_fun_3.(while_fun_3, j, result)
        else
          {j, result}
        end
      end
      {j, result} = try do
          while_fun_3.(while_fun_3, j, result)
        catch
          {:break, {j, result}} -> {j, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def strand_sort_rec(arr, reverse, solution) do
    try do
      if _len(arr) == 0 do
        throw {:return, solution}
      end
      sublist = []
      remaining = []
      sublist = (sublist ++ [Enum.at(arr, 0, [])])
      last = Enum.at(arr, 0, [])
      k = 1
      while_fun_4 = fn while_fun_4, k, last, remaining, sublist ->
        if k < _len(arr) do
          item = Enum.at(arr, k, [])
          {last, remaining, sublist} = if reverse do
            {last, remaining, sublist} = if item < last do
              sublist = (sublist ++ [item])
              last = item
              {last, remaining, sublist}
            else
              remaining = (remaining ++ [item])
              {last, remaining, sublist}
            end
            {last, remaining, sublist}
          else
            {last, remaining, sublist} = if item > last do
              sublist = (sublist ++ [item])
              last = item
              {last, remaining, sublist}
            else
              remaining = (remaining ++ [item])
              {last, remaining, sublist}
            end
            {last, remaining, sublist}
          end
          k = k + 1
          while_fun_4.(while_fun_4, k, last, remaining, sublist)
        else
          {k, last, remaining, sublist}
        end
      end
      {k, last, remaining, sublist} = try do
          while_fun_4.(while_fun_4, k, last, remaining, sublist)
        catch
          {:break, {k, last, remaining, sublist}} -> {k, last, remaining, sublist}
        end

      solution = merge(solution, sublist, reverse)
      throw {:return, strand_sort_rec(remaining, reverse, solution)}
    catch
      {:return, val} -> val
    end
  end
  def strand_sort(arr, reverse) do
    try do
      throw {:return, strand_sort_rec(arr, reverse, [])}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(strand_sort([4, 3, 5, 1, 2], false)))
    IO.puts(Kernel.inspect(strand_sort([4, 3, 5, 1, 2], true)))
  end
end
Main.main()
