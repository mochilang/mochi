# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def contains_int(xs, x) do
    try do
      i = 0
      while_fun = fn while_fun, i ->
        if i < _len(xs) do
          if Enum.at(xs, i, []) == x do
            throw {:return, true}
          end
          i = i + 1
          while_fun.(while_fun, i)
        else
          i
        end
      end
      i = try do
          while_fun.(while_fun, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, false}
    catch
      {:return, val} -> val
    end
  end
  def split(s, sep) do
    try do
      res = []
      current = ""
      i = 0
      while_fun_2 = fn while_fun_2, current, i, res ->
        if i < _len(s) do
          ch = _slice(s, i, i + 1 - (i))
          {current, res} = if ch == sep do
            res = (res ++ [current])
            current = ""
            {current, res}
          else
            current = (current <> ch)
            {current, res}
          end
          i = i + 1
          while_fun_2.(while_fun_2, current, i, res)
        else
          {current, i, res}
        end
      end
      {current, i, res} = try do
          while_fun_2.(while_fun_2, current, i, res)
        catch
          {:break, {current, i, res}} -> {current, i, res}
        end

      res = (res ++ [current])
      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def pow_int_float(base, exp) do
    try do
      result = 1.0
      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < exp do
          result = result * (:erlang.float(base))
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def points_to_polynomial(coordinates) do
    try do
      if _len(coordinates) == 0 do
        raise("The program cannot work out a fitting polynomial.")
      end
      i = 0
      while_fun_4 = fn while_fun_4, i ->
        if i < _len(coordinates) do
          if _len(Enum.at(coordinates, i, [])) != 2 do
            raise("The program cannot work out a fitting polynomial.")
          end
          i = i + 1
          while_fun_4.(while_fun_4, i)
        else
          i
        end
      end
      i = try do
          while_fun_4.(while_fun_4, i)
        catch
          {:break, {i}} -> i
        end

      j = 0
      while_fun_5 = fn while_fun_5, j ->
        if j < _len(coordinates) do
          k = j + 1
          while_fun_6 = fn while_fun_6, k ->
            if k < _len(coordinates) do
              if Enum.at(Enum.at(coordinates, j, []), 0, 0) == Enum.at(Enum.at(coordinates, k, []), 0, 0) && Enum.at(Enum.at(coordinates, j, []), 1, 0) == Enum.at(Enum.at(coordinates, k, []), 1, 0) do
                raise("The program cannot work out a fitting polynomial.")
              end
              k = k + 1
              while_fun_6.(while_fun_6, k)
            else
              k
            end
          end
          k = try do
              while_fun_6.(while_fun_6, k)
            catch
              {:break, {k}} -> k
            end

          j = j + 1
          while_fun_5.(while_fun_5, j)
        else
          j
        end
      end
      j = try do
          while_fun_5.(while_fun_5, j)
        catch
          {:break, {j}} -> j
        end

      set_x = []
      i = 0
      while_fun_7 = fn while_fun_7, i, set_x ->
        if i < _len(coordinates) do
          x_val = Enum.at(Enum.at(coordinates, i, []), 0, 0)
          {set_x} = if !contains_int(set_x, x_val) do
            set_x = (set_x ++ [x_val])
            {set_x}
          else
            {set_x}
          end
          i = i + 1
          while_fun_7.(while_fun_7, i, set_x)
        else
          {i, set_x}
        end
      end
      {i, set_x} = try do
          while_fun_7.(while_fun_7, i, set_x)
        catch
          {:break, {i, set_x}} -> {i, set_x}
        end

      if _len(set_x) == 1 do
        throw {:return, ("x=" <> Kernel.to_string(Enum.at(Enum.at(coordinates, 0, []), 0, 0)))}
      end
      if _len(set_x) != _len(coordinates) do
        raise("The program cannot work out a fitting polynomial.")
      end
      n = _len(coordinates)
      matrix = []
      row = 0
      while_fun_8 = fn while_fun_8, matrix, row ->
        if row < n do
          line = []
          col = 0
          while_fun_9 = fn while_fun_9, col, line ->
            if col < n do
              power = pow_int_float(Enum.at(Enum.at(coordinates, row, []), 0, 0), n - (col + 1))
              line = (line ++ [power])
              col = col + 1
              while_fun_9.(while_fun_9, col, line)
            else
              {col, line}
            end
          end
          {col, line} = try do
              while_fun_9.(while_fun_9, col, line)
            catch
              {:break, {col, line}} -> {col, line}
            end

          matrix = (matrix ++ [line])
          row = row + 1
          while_fun_8.(while_fun_8, matrix, row)
        else
          {matrix, row}
        end
      end
      {matrix, row} = try do
          while_fun_8.(while_fun_8, matrix, row)
        catch
          {:break, {matrix, row}} -> {matrix, row}
        end

      vector = []
      row = 0
      while_fun_10 = fn while_fun_10, row, vector ->
        if row < n do
          vector = (vector ++ [:erlang.float(Enum.at(Enum.at(coordinates, row, []), 1, 0))])
          row = row + 1
          while_fun_10.(while_fun_10, row, vector)
        else
          {row, vector}
        end
      end
      {row, vector} = try do
          while_fun_10.(while_fun_10, row, vector)
        catch
          {:break, {row, vector}} -> {row, vector}
        end

      count = 0
      while_fun_11 = fn while_fun_11, count, matrix, vector ->
        if count < n do
          number = 0
          while_fun_12 = fn while_fun_12, matrix, number, vector ->
            if number < n do
              {matrix, vector} = if count != number do
                fraction = Enum.at(Enum.at(matrix, number, []), count, 0) / Enum.at(Enum.at(matrix, count, []), count, 0)
                cc = 0
                while_fun_13 = fn while_fun_13, cc, matrix ->
                  if cc < n do
                    matrix = List.replace_at(matrix, number, List.replace_at(Enum.at(matrix, number), cc, Enum.at(Enum.at(matrix, number, []), cc, 0) - Enum.at(Enum.at(matrix, count, []), cc, 0) * fraction))
                    cc = cc + 1
                    while_fun_13.(while_fun_13, cc, matrix)
                  else
                    {cc, matrix}
                  end
                end
                {cc, matrix} = try do
                    while_fun_13.(while_fun_13, cc, matrix)
                  catch
                    {:break, {cc, matrix}} -> {cc, matrix}
                  end

                vector = List.replace_at(vector, number, Enum.at(vector, number, []) - Enum.at(vector, count, []) * fraction)
                {matrix, vector}
              else
                {matrix, vector}
              end
              number = number + 1
              while_fun_12.(while_fun_12, matrix, number, vector)
            else
              {matrix, number, vector}
            end
          end
          {matrix, number, vector} = try do
              while_fun_12.(while_fun_12, matrix, number, vector)
            catch
              {:break, {matrix, number, vector}} -> {matrix, number, vector}
            end

          count = count + 1
          while_fun_11.(while_fun_11, count, matrix, vector)
        else
          {count, matrix, vector}
        end
      end
      {count, matrix, vector} = try do
          while_fun_11.(while_fun_11, count, matrix, vector)
        catch
          {:break, {count, matrix, vector}} -> {count, matrix, vector}
        end

      solution = []
      count = 0
      while_fun_14 = fn while_fun_14, count, solution ->
        if count < n do
          value = Enum.at(vector, count, []) / Enum.at(Enum.at(matrix, count, []), count, 0)
          solution = (solution ++ [Kernel.to_string(value)])
          count = count + 1
          while_fun_14.(while_fun_14, count, solution)
        else
          {count, solution}
        end
      end
      {count, solution} = try do
          while_fun_14.(while_fun_14, count, solution)
        catch
          {:break, {count, solution}} -> {count, solution}
        end

      solved = "f(x)="
      count = 0
      while_fun_15 = fn while_fun_15, count, solved ->
        if count < n do
          parts = split(Enum.at(solution, count, []), "e")
          coeff = Enum.at(solution, count, [])
          {coeff} = if _len(parts) > 1 do
            coeff = ((Enum.at(parts, 0, []) <> "*10^") <> Enum.at(parts, 1, []))
            {coeff}
          else
            {coeff}
          end
          solved = ((((solved <> "x^") <> Kernel.to_string(n - (count + 1))) <> "*") <> coeff)
          {solved} = if count + 1 != n do
            solved = (solved <> "+")
            {solved}
          else
            {solved}
          end
          count = count + 1
          while_fun_15.(while_fun_15, count, solved)
        else
          {count, solved}
        end
      end
      {count, solved} = try do
          while_fun_15.(while_fun_15, count, solved)
        catch
          {:break, {count, solved}} -> {count, solved}
        end

      throw {:return, solved}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      IO.puts(Kernel.inspect(points_to_polynomial([[1, 0], [2, 0], [3, 0]])))
      IO.puts(Kernel.inspect(points_to_polynomial([[1, 1], [2, 1], [3, 1]])))
      IO.puts(Kernel.inspect(points_to_polynomial([[1, 1], [2, 4], [3, 9]])))
      IO.puts(Kernel.inspect(points_to_polynomial([[1, 3], [2, 6], [3, 11]])))
      IO.puts(Kernel.inspect(points_to_polynomial([[1, -3], [2, -6], [3, -11]])))
      IO.puts(Kernel.inspect(points_to_polynomial([[1, 1], [1, 2], [1, 3]])))
      IO.puts(Kernel.inspect(points_to_polynomial([[1, 5], [2, 2], [3, 9]])))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
