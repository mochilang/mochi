# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  import Kernel, except: [floor: 1]
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def floor(x) do
    try do
      i = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(x)
      {i} = if (:erlang.float(i)) > x do
        i = i - 1
        {i}
      else
        {i}
      end
      throw {:return, :erlang.float(i)}
    catch
      {:return, val} -> val
    end
  end
  def modf(x, m) do
    try do
      throw {:return, x - floor(x / m) * m}
    catch
      {:return, val} -> val
    end
  end
  def sin_taylor(angle) do
    try do
      x = modf(angle, 2.0 * Process.get(:pi))
      {x} = if x > Process.get(:pi) do
        x = x - 2.0 * Process.get(:pi)
        {x}
      else
        {x}
      end
      term = x
      sum = x
      i = 1
      while_fun = fn while_fun, i, sum, term ->
        if i < 10 do
          k1 = 2.0 * (:erlang.float(i))
          k2 = k1 + 1.0
          term = -term * x * x / (k1 * k2)
          sum = sum + term
          i = i + 1
          while_fun.(while_fun, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun.(while_fun, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def cos_taylor(angle) do
    try do
      x = modf(angle, 2.0 * Process.get(:pi))
      {x} = if x > Process.get(:pi) do
        x = x - 2.0 * Process.get(:pi)
        {x}
      else
        {x}
      end
      term = 1.0
      sum = 1.0
      i = 1
      while_fun_2 = fn while_fun_2, i, sum, term ->
        if i < 10 do
          k1 = 2.0 * (:erlang.float(i)) - 1.0
          k2 = 2.0 * (:erlang.float(i))
          term = -term * x * x / (k1 * k2)
          sum = sum + term
          i = i + 1
          while_fun_2.(while_fun_2, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun_2.(while_fun_2, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def matrix_to_string(m) do
    try do
      s = "["
      i = 0
      while_fun_3 = fn while_fun_3, i, s ->
        if i < _len(m) do
          row = Enum.at(m, i, [])
          s = (s <> "[")
          j = 0
          while_fun_4 = fn while_fun_4, j, s ->
            if j < _len(row) do
              s = (s <> Kernel.to_string(Enum.at(row, j, [])))
              {s} = if j < _len(row) - 1 do
                s = (s <> ", ")
                {s}
              else
                {s}
              end
              j = j + 1
              while_fun_4.(while_fun_4, j, s)
            else
              {j, s}
            end
          end
          {j, s} = try do
              while_fun_4.(while_fun_4, j, s)
            catch
              {:break, {j, s}} -> {j, s}
            end

          s = (s <> "]")
          {s} = if i < _len(m) - 1 do
            s = (s <> ", ")
            {s}
          else
            {s}
          end
          i = i + 1
          while_fun_3.(while_fun_3, i, s)
        else
          {i, s}
        end
      end
      {i, s} = try do
          while_fun_3.(while_fun_3, i, s)
        catch
          {:break, {i, s}} -> {i, s}
        end

      s = (s <> "]")
      throw {:return, s}
    catch
      {:return, val} -> val
    end
  end
  def scaling(f) do
    try do
      throw {:return, [[f, 0.0], [0.0, f]]}
    catch
      {:return, val} -> val
    end
  end
  def rotation(angle) do
    try do
      c = cos_taylor(angle)
      s = sin_taylor(angle)
      throw {:return, [[c, -s], [s, c]]}
    catch
      {:return, val} -> val
    end
  end
  def projection(angle) do
    try do
      c = cos_taylor(angle)
      s = sin_taylor(angle)
      cs = c * s
      throw {:return, [[c * c, cs], [cs, s * s]]}
    catch
      {:return, val} -> val
    end
  end
  def reflection(angle) do
    try do
      c = cos_taylor(angle)
      s = sin_taylor(angle)
      cs = c * s
      throw {:return, [[2.0 * c - 1.0, 2.0 * cs], [2.0 * cs, 2.0 * s - 1.0]]}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(("    scaling(5) = " <> matrix_to_string(scaling(5.0))))
    IO.puts(("  rotation(45) = " <> matrix_to_string(rotation(45.0))))
    IO.puts(("projection(45) = " <> matrix_to_string(projection(45.0))))
    IO.puts(("reflection(45) = " <> matrix_to_string(reflection(45.0))))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
