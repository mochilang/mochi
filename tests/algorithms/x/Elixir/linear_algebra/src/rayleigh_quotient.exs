# Code generated by Mochi transpiler 2025-08-12 08:38 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def complex_conj(z) do
    try do
      throw {:return, %{re: z.re, im: -z.im}}
    catch
      {:return, val} -> val
    end
  end
  def complex_eq(a, b) do
    try do
      throw {:return, a.re == b.re && a.im == b.im}
    catch
      {:return, val} -> val
    end
  end
  def complex_add(a, b) do
    try do
      throw {:return, %{re: a.re + b.re, im: a.im + b.im}}
    catch
      {:return, val} -> val
    end
  end
  def complex_mul(a, b) do
    try do
      real = a.re * b.re - a.im * b.im
      imag = a.re * b.im + a.im * b.re
      throw {:return, %{re: real, im: imag}}
    catch
      {:return, val} -> val
    end
  end
  def conj_vector(v) do
    try do
      res = []
      i = 0
      while_fun = fn while_fun, i, res ->
        if i < _len(v) do
          res = (res ++ [complex_conj(Enum.at(v, i, []))])
          i = i + 1
          while_fun.(while_fun, i, res)
        else
          {i, res}
        end
      end
      {i, res} = try do
          while_fun.(while_fun, i, res)
        catch
          {:break, {i, res}} -> {i, res}
        end

      throw {:return, res}
    catch
      {:return, val} -> val
    end
  end
  def vec_mat_mul(v, m) do
    try do
      result = []
      col = 0
      while_fun_2 = fn while_fun_2, col, result ->
        if col < _len(Enum.at(m, 0, [])) do
          sum = %{re: 0.0, im: 0.0}
          row = 0
          while_fun_3 = fn while_fun_3, row, sum ->
            if row < _len(v) do
              sum = complex_add(sum, complex_mul(Enum.at(v, row, []), Enum.at(Enum.at(m, row, []), col, 0)))
              row = row + 1
              while_fun_3.(while_fun_3, row, sum)
            else
              {row, sum}
            end
          end
          {row, sum} = try do
              while_fun_3.(while_fun_3, row, sum)
            catch
              {:break, {row, sum}} -> {row, sum}
            end

          result = (result ++ [sum])
          col = col + 1
          while_fun_2.(while_fun_2, col, result)
        else
          {col, result}
        end
      end
      {col, result} = try do
          while_fun_2.(while_fun_2, col, result)
        catch
          {:break, {col, result}} -> {col, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def dot(a, b) do
    try do
      sum = %{re: 0.0, im: 0.0}
      i = 0
      while_fun_4 = fn while_fun_4, i, sum ->
        if i < _len(a) do
          sum = complex_add(sum, complex_mul(Enum.at(a, i, []), Enum.at(b, i, [])))
          i = i + 1
          while_fun_4.(while_fun_4, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun_4.(while_fun_4, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def is_hermitian(m) do
    try do
      i = 0
      while_fun_5 = fn while_fun_5, i ->
        if i < _len(m) do
          j = 0
          while_fun_6 = fn while_fun_6, j ->
            if j < _len(m) do
              if !complex_eq(Enum.at(Enum.at(m, i, []), j, 0), complex_conj(Enum.at(Enum.at(m, j, []), i, 0))) do
                throw {:return, false}
              end
              j = j + 1
              while_fun_6.(while_fun_6, j)
            else
              j
            end
          end
          j = try do
              while_fun_6.(while_fun_6, j)
            catch
              {:break, {j}} -> j
            end

          i = i + 1
          while_fun_5.(while_fun_5, i)
        else
          i
        end
      end
      i = try do
          while_fun_5.(while_fun_5, i)
        catch
          {:break, {i}} -> i
        end

      throw {:return, true}
    catch
      {:return, val} -> val
    end
  end
  def rayleigh_quotient(a, v) do
    try do
      v_star = conj_vector(v)
      v_star_dot = vec_mat_mul(v_star, a)
      num = dot(v_star_dot, v)
      den = dot(v_star, v)
      throw {:return, num.re / den.re}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:v, [%{re: 1.0, im: 0.0}, %{re: 2.0, im: 0.0}, %{re: 3.0, im: 0.0}])
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:a, [[%{re: 2.0, im: 0.0}, %{re: 2.0, im: 1.0}, %{re: 4.0, im: 0.0}], [%{re: 2.0, im: -1.0}, %{re: 3.0, im: 0.0}, %{re: 0.0, im: 1.0}], [%{re: 4.0, im: 0.0}, %{re: 0.0, im: -1.0}, %{re: 1.0, im: 0.0}]])
    if is_hermitian(Process.get(:a)) do
      r1 = rayleigh_quotient(Process.get(:a), Process.get(:v))
      IO.puts(r1)
      IO.puts("\n")
    end
    Process.put(:b, [[%{re: 1.0, im: 0.0}, %{re: 2.0, im: 0.0}, %{re: 4.0, im: 0.0}], [%{re: 2.0, im: 0.0}, %{re: 3.0, im: 0.0}, %{re: -1.0, im: 0.0}], [%{re: 4.0, im: 0.0}, %{re: -1.0, im: 0.0}, %{re: 1.0, im: 0.0}]])
    if is_hermitian(Process.get(:b)) do
      r2 = rayleigh_quotient(Process.get(:b), Process.get(:v))
      IO.puts(r2)
    end
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
