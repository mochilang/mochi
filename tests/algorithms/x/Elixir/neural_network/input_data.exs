# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _clamp_slice(n, start, stop) do
    start = if start < 0, do: start + n, else: start
    stop = if stop < 0, do: stop + n, else: stop
    start = max(min(start, n), 0)
    stop = min(max(stop, start), n)
    {start, stop}
  end
  defp _slice(base, start, len) do
    len = if len < 0, do: 0, else: len
    cond do
      is_binary(base) ->
        chars = String.graphemes(base)
        n = length(chars)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(chars, s, e - s) |> Enum.join("")
      true ->
        n = length(base)
        {s, e} = _clamp_slice(n, start, start + len)
        Enum.slice(base, s, e - s)
    end
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def dense_to_one_hot(labels, num_classes) do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(labels) do
          row = []
          j = 0
          while_fun_2 = fn while_fun_2, j, row ->
            if j < num_classes do
              row = (if j == Enum.at(labels, i), do: (row ++ [1]), else: (row ++ [0]))
              j = j + 1
              while_fun_2.(while_fun_2, j, row)
            else
              {j, row}
            end
          end
          {j, row} = try do
              while_fun_2.(while_fun_2, j, row)
            catch
              {:break, {j, row}} -> {j, row}
            end

          result = (result ++ [row])
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def new_dataset(images, labels) do
    try do
      throw {:return, %{images: images, labels: labels, num_examples: _len(images), index_in_epoch: 0, epochs_completed: 0}}
    catch
      {:return, val} -> val
    end
  end
  def next_batch(ds, batch_size) do
    try do
      start = ds.index_in_epoch
      if start + batch_size > ds.num_examples do
        rest = ds.num_examples - start
        images_rest = _slice(ds.images, start, ds.num_examples - start)
        labels_rest = _slice(ds.labels, start, ds.num_examples - start)
        new_index = batch_size - rest
        images_new = _slice(ds.images, 0, new_index - 0)
        labels_new = _slice(ds.labels, 0, new_index - 0)
        batch_images = (images_rest ++ images_new)
        batch_labels = (labels_rest ++ labels_new)
        new_ds = %{images: ds.images, labels: ds.labels, num_examples: ds.num_examples, index_in_epoch: new_index, epochs_completed: ds.epochs_completed + 1}
        throw {:return, %{dataset: new_ds, images: batch_images, labels: batch_labels}}
      else
        end_ = start + batch_size
        batch_images = _slice(ds.images, start, end_ - start)
        batch_labels = _slice(ds.labels, start, end_ - start)
        new_ds = %{images: ds.images, labels: ds.labels, num_examples: ds.num_examples, index_in_epoch: end_, epochs_completed: ds.epochs_completed}
        throw {:return, %{dataset: new_ds, images: batch_images, labels: batch_labels}}
      end
    catch
      {:return, val} -> val
    end
  end
  def read_data_sets(train_images, train_labels_raw, test_images, test_labels_raw, validation_size, num_classes) do
    try do
      train_labels = dense_to_one_hot(train_labels_raw, num_classes)
      test_labels = dense_to_one_hot(test_labels_raw, num_classes)
      validation_images = _slice(train_images, 0, validation_size - 0)
      validation_labels = _slice(train_labels, 0, validation_size - 0)
      train_images_rest = _slice(train_images, validation_size, _len(train_images) - validation_size)
      train_labels_rest = _slice(train_labels, validation_size, _len(train_labels) - validation_size)
      train = new_dataset(train_images_rest, train_labels_rest)
      validation = new_dataset(validation_images, validation_labels)
      testset = new_dataset(test_images, test_labels)
      throw {:return, %{train: train, validation: validation, test_ds: testset}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      train_images = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]
      train_labels_raw = [0, 1, 2, 3, 4]
      test_images = [[5, 6], [6, 7]]
      test_labels_raw = [5, 6]
      data = read_data_sets(train_images, train_labels_raw, test_images, test_labels_raw, 2, 10)
      ds = data.train
      res = next_batch(ds, 2)
      ds = res.dataset
      IO.puts(Kernel.inspect(res.images))
      IO.puts(Kernel.inspect(res.labels))
      res = next_batch(ds, 2)
      ds = res.dataset
      IO.puts(Kernel.inspect(res.images))
      IO.puts(Kernel.inspect(res.labels))
      res = next_batch(ds, 2)
      ds = res.dataset
      IO.puts(Kernel.inspect(res.images))
      IO.puts(Kernel.inspect(res.labels))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
