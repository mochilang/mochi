# Code generated by Mochi transpiler 2025-08-12 13:41 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def exp_taylor(x) do
    try do
      term = 1.0
      sum = 1.0
      i = 1.0
      while_fun = fn while_fun, i, sum, term ->
        if i < 20.0 do
          term = term * x / i
          sum = sum + term
          i = i + 1.0
          while_fun.(while_fun, i, sum, term)
        else
          {i, sum, term}
        end
      end
      {i, sum, term} = try do
          while_fun.(while_fun, i, sum, term)
        catch
          {:break, {i, sum, term}} -> {i, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def sigmoid(vector) do
    try do
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(vector) do
          x = Enum.at(vector, i, [])
          value = 1.0 / (1.0 + exp_taylor(-x))
          result = (result ++ [value])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def gaussian_error_linear_unit(vector) do
    try do
      result = []
      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < _len(vector) do
          x = Enum.at(vector, i, [])
          gelu = x * (1.0 / (1.0 + exp_taylor(-1.702 * x)))
          result = (result ++ [gelu])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:sample, [-1.0, 1.0, 2.0])
    IO.puts(Kernel.inspect(sigmoid(Process.get(:sample))))
    IO.puts(Kernel.inspect(gaussian_error_linear_unit(Process.get(:sample))))
    IO.puts(Kernel.inspect(gaussian_error_linear_unit([-3.0])))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
