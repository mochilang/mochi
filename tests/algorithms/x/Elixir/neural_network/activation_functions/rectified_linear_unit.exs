# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def relu(vector) do
    try do
      result = []
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < _len(vector) do
          v = Enum.at(vector, i)
          result = (if v > 0.0, do: (result ++ [v]), else: (result ++ [0.0]))
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(relu([-1.0, 0.0, 5.0])))
  end
end
Main.main()
