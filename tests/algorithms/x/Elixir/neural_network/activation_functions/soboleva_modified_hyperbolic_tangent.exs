# Code generated by Mochi transpiler 2025-08-12 15:27 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def exp(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n < 20 do
          term = term * x / :erlang.float(n)
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def soboleva_modified_hyperbolic_tangent(vector, a_value, b_value, c_value, d_value) do
    try do
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(vector) do
          x = Enum.at(vector, i, [])
          numerator = exp(a_value * x) - exp(-b_value * x)
          denominator = exp(c_value * x) + exp(-d_value * x)
          result = (result ++ [numerator / denominator])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      vector = [5.4, -2.4, 6.3, -5.23, 3.27, 0.56]
      res = soboleva_modified_hyperbolic_tangent(vector, 0.2, 0.4, 0.6, 0.8)
      IO.puts(Kernel.inspect(res))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
