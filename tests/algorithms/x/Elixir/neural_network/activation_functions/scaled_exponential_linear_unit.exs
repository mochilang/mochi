# Code generated by Mochi transpiler 2025-08-09 23:14 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def exp(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n < 20 do
          term = term * x / (:erlang.float(n))
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def scaled_exponential_linear_unit(vector, alpha, lambda_) do
    try do
      result = []
      i = 0
      while_fun_2 = fn while_fun_2, i, result ->
        if i < _len(vector) do
          x = Enum.at(vector, i)
          y = (if x > 0.0, do: lambda_ * x, else: lambda_ * alpha * (exp(x) - 1.0))
          result = (result ++ [y])
          i = i + 1
          while_fun_2.(while_fun_2, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_2.(while_fun_2, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(scaled_exponential_linear_unit([1.3, 3.7, 2.4], 1.6732, 1.0507)))
    IO.puts(Kernel.inspect(scaled_exponential_linear_unit([1.3, 4.7, 8.2], 1.6732, 1.0507)))
  end
end
Main.main()
