# Code generated by Mochi transpiler 2025-08-12 09:13 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def ln(x) do
    try do
      if x <= 0.0 do
        raise("ln domain error")
      end
      y = (x - 1.0) / (x + 1.0)
      y2 = y * y
      term = y
      sum = 0.0
      k = 0
      while_fun = fn while_fun, k, sum, term ->
        if k < 10 do
          denom = :erlang.float((2 * k + 1))
          sum = sum + term / denom
          term = term * y2
          k = k + 1
          while_fun.(while_fun, k, sum, term)
        else
          {k, sum, term}
        end
      end
      {k, sum, term} = try do
          while_fun.(while_fun, k, sum, term)
        catch
          {:break, {k, sum, term}} -> {k, sum, term}
        end

      throw {:return, 2.0 * sum}
    catch
      {:return, val} -> val
    end
  end
  def exp(x) do
    try do
      term = 1.0
      sum = 1.0
      n = 1
      while_fun_2 = fn while_fun_2, n, sum, term ->
        if n < 20 do
          term = term * x / (:erlang.float(n))
          sum = sum + term
          n = n + 1
          while_fun_2.(while_fun_2, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun_2.(while_fun_2, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def softplus(vector) do
    try do
      result = []
      i = 0
      while_fun_3 = fn while_fun_3, i, result ->
        if i < _len(vector) do
          x = Enum.at(vector, i, [])
          value = ln(1.0 + exp(x))
          result = (result ++ [value])
          i = i + 1
          while_fun_3.(while_fun_3, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun_3.(while_fun_3, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      v1 = [2.3, 0.6, -2.0, -3.8]
      v2 = [-9.2, -0.3, 0.45, -4.56]
      r1 = softplus(v1)
      r2 = softplus(v2)
      IO.puts(Kernel.inspect(r1))
      IO.puts(Kernel.inspect(r2))
    catch
      {:return, val} -> val
    end
  end
  def bench_main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    main()
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.bench_main()
