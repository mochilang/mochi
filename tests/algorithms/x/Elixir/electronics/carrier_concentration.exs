# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  def sqrtApprox(x) do
    try do
      guess = x / 2.0
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def carrier_concentration(electron_conc, hole_conc, intrinsic_conc) do
    try do
      zero_count = 0
      {zero_count} = if electron_conc == 0.0 do
        zero_count = zero_count + 1
        {zero_count}
      else
        {zero_count}
      end
      {zero_count} = if hole_conc == 0.0 do
        zero_count = zero_count + 1
        {zero_count}
      else
        {zero_count}
      end
      {zero_count} = if intrinsic_conc == 0.0 do
        zero_count = zero_count + 1
        {zero_count}
      else
        {zero_count}
      end
      if zero_count != 1 do
        raise("You cannot supply more or less than 2 values")
      end
      if electron_conc < 0.0 do
        raise("Electron concentration cannot be negative in a semiconductor")
      end
      if hole_conc < 0.0 do
        raise("Hole concentration cannot be negative in a semiconductor")
      end
      if intrinsic_conc < 0.0 do
        raise("Intrinsic concentration cannot be negative in a semiconductor")
      end
      if electron_conc == 0.0 do
        throw {:return, %{name: "electron_conc", value: (intrinsic_conc * intrinsic_conc) / hole_conc}}
      end
      if hole_conc == 0.0 do
        throw {:return, %{name: "hole_conc", value: (intrinsic_conc * intrinsic_conc) / electron_conc}}
      end
      if intrinsic_conc == 0.0 do
        throw {:return, %{name: "intrinsic_conc", value: sqrtApprox(electron_conc * hole_conc)}}
      end
      throw {:return, %{name: "", value: -1.0}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:r1, carrier_concentration(25.0, 100.0, 0.0))
    IO.puts(((Process.get(:r1).name <> ", ") <> Kernel.to_string(Process.get(:r1).value)))
    Process.put(:r2, carrier_concentration(0.0, 1600.0, 200.0))
    IO.puts(((Process.get(:r2).name <> ", ") <> Kernel.to_string(Process.get(:r2).value)))
    Process.put(:r3, carrier_concentration(1000.0, 0.0, 1200.0))
    IO.puts(((Process.get(:r3).name <> ", ") <> Kernel.to_string(Process.get(:r3).value)))
  end
end
Main.main()
