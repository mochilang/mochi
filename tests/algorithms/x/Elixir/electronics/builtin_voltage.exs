# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  def pow10(n) do
    try do
      result = 1.0
      i = 0
      while_fun = fn while_fun, i, result ->
        if i < n do
          result = result * 10.0
          i = i + 1
          while_fun.(while_fun, i, result)
        else
          {i, result}
        end
      end
      {i, result} = try do
          while_fun.(while_fun, i, result)
        catch
          {:break, {i, result}} -> {i, result}
        end

      throw {:return, result}
    catch
      {:return, val} -> val
    end
  end
  def ln_series(x) do
    try do
      t = (x - 1.0) / (x + 1.0)
      term = t
      sum = 0.0
      n = 1
      while_fun_2 = fn while_fun_2, n, sum, term ->
        if n <= 19 do
          sum = sum + term / (:erlang.float(n))
          term = term * t * t
          n = n + 2
          while_fun_2.(while_fun_2, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun_2.(while_fun_2, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      throw {:return, 2.0 * sum}
    catch
      {:return, val} -> val
    end
  end
  def ln(x) do
    try do
      y = x
      k = 0
      while_fun_3 = fn while_fun_3, k, y ->
        if y >= 10.0 do
          y = y / 10.0
          k = k + 1
          while_fun_3.(while_fun_3, k, y)
        else
          {k, y}
        end
      end
      {k, y} = try do
          while_fun_3.(while_fun_3, k, y)
        catch
          {:break, {k, y}} -> {k, y}
        end

      while_fun_4 = fn while_fun_4, k, y ->
        if y < 1.0 do
          y = y * 10.0
          k = k - 1
          while_fun_4.(while_fun_4, k, y)
        else
          {k, y}
        end
      end
      {k, y} = try do
          while_fun_4.(while_fun_4, k, y)
        catch
          {:break, {k, y}} -> {k, y}
        end

      throw {:return, ln_series(y) + (:erlang.float(k)) * ln_series(10.0)}
    catch
      {:return, val} -> val
    end
  end
  def builtin_voltage(donor_conc, acceptor_conc, intrinsic_conc) do
    try do
      if donor_conc <= 0.0 do
        raise("Donor concentration should be positive")
      end
      if acceptor_conc <= 0.0 do
        raise("Acceptor concentration should be positive")
      end
      if intrinsic_conc <= 0.0 do
        raise("Intrinsic concentration should be positive")
      end
      if donor_conc <= intrinsic_conc do
        raise("Donor concentration should be greater than intrinsic concentration")
      end
      if acceptor_conc <= intrinsic_conc do
        raise("Acceptor concentration should be greater than intrinsic concentration")
      end
      throw {:return, Process.get(:boltzmann) * Process.get(:temperature) * ln((donor_conc * acceptor_conc) / (intrinsic_conc * intrinsic_conc)) / Process.get(:electron_volt)}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:temperature, 300.0)
  def main() do
    Process.put(:boltzmann, 1.380649 / pow10(23))
    Process.put(:electron_volt, 1.602176634 / pow10(19))
    IO.puts(Kernel.inspect(builtin_voltage(pow10(17), pow10(17), pow10(10))))
  end
end
Main.main()
