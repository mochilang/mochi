# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  def absf(x) do
    try do
      throw {:return, ((if x < 0.0, do: -x, else: x))}
    catch
      {:return, val} -> val
    end
  end
  def pow10(n) do
    try do
      p = 1.0
      i = 0
      while_fun = fn while_fun, i, p ->
        if i < n do
          p = p * 10.0
          i = i + 1
          while_fun.(while_fun, i, p)
        else
          {i, p}
        end
      end
      {i, p} = try do
          while_fun.(while_fun, i, p)
        catch
          {:break, {i, p}} -> {i, p}
        end

      throw {:return, p}
    catch
      {:return, val} -> val
    end
  end
  def round_to(x, n) do
    try do
      m = pow10(n)
      throw {:return, floor.(x * m + 0.5) / m}
    catch
      {:return, val} -> val
    end
  end
  def electric_power(voltage, current, power) do
    try do
      zeros = 0
      {zeros} = if voltage == 0.0 do
        zeros = zeros + 1
        {zeros}
      else
        {zeros}
      end
      {zeros} = if current == 0.0 do
        zeros = zeros + 1
        {zeros}
      else
        {zeros}
      end
      {zeros} = if power == 0.0 do
        zeros = zeros + 1
        {zeros}
      else
        {zeros}
      end
      if zeros != 1 do
        raise("Exactly one argument must be 0")
      else
        if power < 0.0 do
          raise("Power cannot be negative in any electrical/electronics system")
        else
          if voltage == 0.0 do
            throw {:return, %{name: "voltage", value: power / current}}
          else
            if current == 0.0 do
              throw {:return, %{name: "current", value: power / voltage}}
            else
              if power == 0.0 do
                p = absf(voltage * current)
                throw {:return, %{name: "power", value: round_to(p, 2)}}
              else
                raise("Unhandled case")
              end
            end
          end
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def str_result(r) do
    try do
      throw {:return, (((("Result(name='" <> r.name) <> "', value=") <> Kernel.to_string(r.value)) <> ")")}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    Process.put(:r1, electric_power(0.0, 2.0, 5.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r1))))
    Process.put(:r2, electric_power(2.0, 2.0, 0.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r2))))
    Process.put(:r3, electric_power(-2.0, 3.0, 0.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r3))))
    Process.put(:r4, electric_power(2.2, 2.2, 0.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r4))))
    Process.put(:r5, electric_power(2.0, 0.0, 6.0))
    IO.puts(Kernel.inspect(str_result(Process.get(:r5))))
  end
end
Main.main()
