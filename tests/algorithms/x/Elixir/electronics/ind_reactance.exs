# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def ind_reactance(inductance, frequency, reactance) do
    try do
      zero_count = 0
      zero_count = if inductance == 0.0 do
        zero_count = zero_count + 1
        zero_count
      else
        zero_count
      end
      zero_count = if frequency == 0.0 do
        zero_count = zero_count + 1
        zero_count
      else
        zero_count
      end
      zero_count = if reactance == 0.0 do
        zero_count = zero_count + 1
        zero_count
      else
        zero_count
      end
      if zero_count != 1 do
        raise("One and only one argument must be 0")
      end
      if inductance < 0.0 do
        raise("Inductance cannot be negative")
      end
      if frequency < 0.0 do
        raise("Frequency cannot be negative")
      end
      if reactance < 0.0 do
        raise("Inductive reactance cannot be negative")
      end
      if inductance == 0.0 do
        throw {:return, %{"inductance" => reactance / (2.0 * Process.get(:pi) * frequency)}}
      end
      if frequency == 0.0 do
        throw {:return, %{"frequency" => reactance / (2.0 * Process.get(:pi) * inductance)}}
      end
      throw {:return, %{"reactance" => 2.0 * Process.get(:pi) * frequency * inductance}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(ind_reactance(0.0, 10000.0, 50.0)))
    IO.puts(Kernel.inspect(ind_reactance(0.035, 0.0, 50.0)))
    IO.puts(Kernel.inspect(ind_reactance(0.000035, 1000.0, 0.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
