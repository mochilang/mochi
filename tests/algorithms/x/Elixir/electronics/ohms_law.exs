# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def ohms_law(voltage, current, resistance) do
    try do
      zeros = 0
      zeros = if voltage == 0.0 do
        zeros = zeros + 1
        zeros
      else
        zeros
      end
      zeros = if current == 0.0 do
        zeros = zeros + 1
        zeros
      else
        zeros
      end
      zeros = if resistance == 0.0 do
        zeros = zeros + 1
        zeros
      else
        zeros
      end
      if zeros != 1 do
        IO.puts("One and only one argument must be 0")
        throw {:return, %{}}
      end
      if resistance < 0.0 do
        IO.puts("Resistance cannot be negative")
        throw {:return, %{}}
      end
      if voltage == 0.0 do
        throw {:return, %{"voltage" => current * resistance}}
      end
      if current == 0.0 do
        throw {:return, %{"current" => voltage / resistance}}
      end
      throw {:return, %{"resistance" => voltage / current}}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(ohms_law(10.0, 0.0, 5.0)))
    IO.puts(Kernel.inspect(ohms_law(-10.0, 1.0, 0.0)))
    IO.puts(Kernel.inspect(ohms_law(0.0, -1.5, 2.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
