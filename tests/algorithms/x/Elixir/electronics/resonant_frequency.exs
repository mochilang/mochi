# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  def sqrtApprox(x) do
    try do
      guess = x / 2.0
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def resonant_frequency(inductance, capacitance) do
    try do
      if inductance <= 0.0 do
        raise("Inductance cannot be 0 or negative")
      end
      if capacitance <= 0.0 do
        raise("Capacitance cannot be 0 or negative")
      end
      denom = 2.0 * Process.get(:pi) * sqrtApprox(inductance * capacitance)
      throw {:return, 1.0 / denom}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:pi, 3.141592653589793)
  def main() do
    IO.puts(Kernel.inspect(resonant_frequency(10.0, 5.0)))
  end
end
Main.main()
