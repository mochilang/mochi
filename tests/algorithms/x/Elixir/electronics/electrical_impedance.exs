# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  def sqrtApprox(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x / 2.0
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 20 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def electrical_impedance(resistance, reactance, impedance) do
    try do
      zero_count = 0
      {zero_count} = if resistance == 0.0 do
        zero_count = zero_count + 1
        {zero_count}
      else
        {zero_count}
      end
      {zero_count} = if reactance == 0.0 do
        zero_count = zero_count + 1
        {zero_count}
      else
        {zero_count}
      end
      {zero_count} = if impedance == 0.0 do
        zero_count = zero_count + 1
        {zero_count}
      else
        {zero_count}
      end
      if zero_count != 1 do
        raise("One and only one argument must be 0")
      end
      if resistance == 0.0 do
        value = sqrtApprox(impedance * impedance - reactance * reactance)
        throw {:return, %{"resistance" => value}}
      else
        if reactance == 0.0 do
          value = sqrtApprox(impedance * impedance - resistance * resistance)
          throw {:return, %{"reactance" => value}}
        else
          if impedance == 0.0 do
            value = sqrtApprox(resistance * resistance + reactance * reactance)
            throw {:return, %{"impedance" => value}}
          else
            raise("Exactly one argument must be 0")
          end
        end
      end
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(electrical_impedance(3.0, 4.0, 0.0)))
    IO.puts(Kernel.inspect(electrical_impedance(0.0, 4.0, 5.0)))
    IO.puts(Kernel.inspect(electrical_impedance(3.0, 0.0, 5.0)))
  end
end
Main.main()
