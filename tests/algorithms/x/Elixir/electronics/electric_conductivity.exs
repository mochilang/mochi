# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def electric_conductivity(conductivity, electron_conc, mobility) do
    try do
      zero_count = 0
      zero_count = if conductivity == 0.0 do
        zero_count = zero_count + 1
        zero_count
      else
        zero_count
      end
      zero_count = if electron_conc == 0.0 do
        zero_count = zero_count + 1
        zero_count
      else
        zero_count
      end
      zero_count = if mobility == 0.0 do
        zero_count = zero_count + 1
        zero_count
      else
        zero_count
      end
      if zero_count != 1 do
        raise("You cannot supply more or less than 2 values")
      end
      if conductivity < 0.0 do
        raise("Conductivity cannot be negative")
      end
      if electron_conc < 0.0 do
        raise("Electron concentration cannot be negative")
      end
      if mobility < 0.0 do
        raise("mobility cannot be negative")
      end
      if conductivity == 0.0 do
        throw {:return, %{kind: "conductivity", value: mobility * electron_conc * Process.get(:electron_charge)}}
      end
      if electron_conc == 0.0 do
        throw {:return, %{kind: "electron_conc", value: conductivity / (mobility * Process.get(:electron_charge))}}
      end
      throw {:return, %{kind: "mobility", value: conductivity / (electron_conc * Process.get(:electron_charge))}}
    catch
      {:return, val} -> val
    end
  end
  Process.put(:electron_charge, 0.00000000000000000016021)
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    Process.put(:r1, electric_conductivity(25.0, 100.0, 0.0))
    Process.put(:r2, electric_conductivity(0.0, 1600.0, 200.0))
    Process.put(:r3, electric_conductivity(1000.0, 0.0, 1200.0))
    IO.puts(((Process.get(:r1).kind <> " ") <> Kernel.to_string(Process.get(:r1).value)))
    IO.puts(((Process.get(:r2).kind <> " ") <> Kernel.to_string(Process.get(:r2).value)))
    IO.puts(((Process.get(:r3).kind <> " ") <> Kernel.to_string(Process.get(:r3).value)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
