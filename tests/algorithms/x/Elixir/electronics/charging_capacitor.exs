# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  def expApprox(x) do
    try do
      y = x
      is_neg = false
      {is_neg, y} = if x < 0.0 do
        is_neg = true
        y = -x
        {is_neg, y}
      else
        {is_neg, y}
      end
      term = 1.0
      sum = 1.0
      n = 1
      while_fun = fn while_fun, n, sum, term ->
        if n < 30 do
          term = term * y / (:erlang.float(n))
          sum = sum + term
          n = n + 1
          while_fun.(while_fun, n, sum, term)
        else
          {n, sum, term}
        end
      end
      {n, sum, term} = try do
          while_fun.(while_fun, n, sum, term)
        catch
          {:break, {n, sum, term}} -> {n, sum, term}
        end

      if is_neg do
        throw {:return, 1.0 / sum}
      end
      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def round3(x) do
    try do
      scaled = x * 1000.0
      scaled = (if scaled >= 0.0, do: scaled + 0.5, else: scaled - 0.5)
      scaled_int = (fn v -> if is_binary(v), do: String.to_integer(v), else: trunc(v) end).(scaled)
      throw {:return, (:erlang.float(scaled_int)) / 1000.0}
    catch
      {:return, val} -> val
    end
  end
  def charging_capacitor(source_voltage, resistance, capacitance, time_sec) do
    try do
      if source_voltage <= 0.0 do
        raise("Source voltage must be positive.")
      end
      if resistance <= 0.0 do
        raise("Resistance must be positive.")
      end
      if capacitance <= 0.0 do
        raise("Capacitance must be positive.")
      end
      exponent = -time_sec / (resistance * capacitance)
      voltage = source_voltage * (1.0 - expApprox(exponent))
      throw {:return, round3(voltage)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(charging_capacitor(0.2, 0.9, 8.4, 0.5)))
    IO.puts(Kernel.inspect(charging_capacitor(2.2, 3.5, 2.4, 9.0)))
    IO.puts(Kernel.inspect(charging_capacitor(15.0, 200.0, 20.0, 2.0)))
    IO.puts(Kernel.inspect(charging_capacitor(20.0, 2000.0, 0.0003, 4.0)))
  end
end
Main.main()
