# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def resistor_parallel(resistors) do
    try do
      sum = 0.0
      i = 0
      while_fun = fn while_fun, i, sum ->
        if i < _len(resistors) do
          r = Enum.at(resistors, i, [])
          if r <= 0.0 do
            raise((("Resistor at index " <> Kernel.to_string(i)) <> " has a negative or zero value!"))
          end
          sum = sum + 1.0 / r
          i = i + 1
          while_fun.(while_fun, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun.(while_fun, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, 1.0 / sum}
    catch
      {:return, val} -> val
    end
  end
  def resistor_series(resistors) do
    try do
      sum = 0.0
      i = 0
      while_fun_2 = fn while_fun_2, i, sum ->
        if i < _len(resistors) do
          r = Enum.at(resistors, i, [])
          if r < 0.0 do
            raise((("Resistor at index " <> Kernel.to_string(i)) <> " has a negative value!"))
          end
          sum = sum + r
          i = i + 1
          while_fun_2.(while_fun_2, i, sum)
        else
          {i, sum}
        end
      end
      {i, sum} = try do
          while_fun_2.(while_fun_2, i, sum)
        catch
          {:break, {i, sum}} -> {i, sum}
        end

      throw {:return, sum}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      resistors = [3.21389, 2.0, 3.0]
      IO.puts(("Parallel: " <> Kernel.inspect(resistor_parallel(resistors))))
      IO.puts(("Series: " <> Kernel.inspect(resistor_series(resistors))))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
