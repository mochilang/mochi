# Code generated by Mochi transpiler 2025-08-14 10:36 +0700
defmodule Main do
  defp _bench_now() do
    System.monotonic_time(:microsecond)
  end
  defp _mem() do
    :erlang.process_info(self(), :memory) |> elem(1)
  end
  def wheatstone_solver(resistance_1, resistance_2, resistance_3) do
    try do
      if resistance_1 <= 0.0 || resistance_2 <= 0.0 || resistance_3 <= 0.0 do
        raise("All resistance values must be positive")
      end
      throw {:return, (resistance_2 / resistance_1) * resistance_3}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    :erlang.garbage_collect()
    mem_start = _mem()
    t_start = _bench_now()
    IO.puts(Kernel.inspect(wheatstone_solver(2.0, 4.0, 5.0)))
    IO.puts(Kernel.inspect(wheatstone_solver(356.0, 234.0, 976.0)))
    mem_end = _mem()
    duration_us = max(_bench_now() - t_start, 1)
    :erlang.garbage_collect()
    mem_diff = abs(mem_end - mem_start)
    IO.puts("{\n  \"duration_us\": #{duration_us},\n  \"memory_bytes\": #{mem_diff},\n  \"name\": \"main\"\n}")
  end
end
Main.main()
