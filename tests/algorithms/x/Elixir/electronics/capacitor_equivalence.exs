# Code generated by Mochi transpiler 2025-08-08 15:59 +0700
defmodule Main do
  defp _len(x) do
    cond do
      x == nil -> 0
      is_binary(x) -> String.length(x)
      true -> length(x)
    end
  end
  def capacitor_parallel(capacitors) do
    try do
      sum_c = 0.0
      i = 0
      while_fun = fn while_fun, i, sum_c ->
        if i < _len(capacitors) do
          c = Enum.at(capacitors, i)
          if c < 0.0 do
            raise((("Capacitor at index " <> Kernel.to_string(i)) <> " has a negative value!"))
            throw {:return, 0.0}
          end
          sum_c = sum_c + c
          i = i + 1
          while_fun.(while_fun, i, sum_c)
        else
          {i, sum_c}
        end
      end
      {i, sum_c} = try do
          while_fun.(while_fun, i, sum_c)
        catch
          {:break, {i, sum_c}} -> {i, sum_c}
        end

      throw {:return, sum_c}
    catch
      {:return, val} -> val
    end
  end
  def capacitor_series(capacitors) do
    try do
      first_sum = 0.0
      i = 0
      while_fun_2 = fn while_fun_2, first_sum, i ->
        if i < _len(capacitors) do
          c = Enum.at(capacitors, i)
          if c <= 0.0 do
            raise((("Capacitor at index " <> Kernel.to_string(i)) <> " has a negative or zero value!"))
            throw {:return, 0.0}
          end
          first_sum = first_sum + 1.0 / c
          i = i + 1
          while_fun_2.(while_fun_2, first_sum, i)
        else
          {first_sum, i}
        end
      end
      {first_sum, i} = try do
          while_fun_2.(while_fun_2, first_sum, i)
        catch
          {:break, {first_sum, i}} -> {first_sum, i}
        end

      throw {:return, 1.0 / first_sum}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    try do
      parallel = capacitor_parallel([5.71389, 12.0, 3.0])
      series = capacitor_series([5.71389, 12.0, 3.0])
      IO.puts(Kernel.to_string(parallel))
      IO.puts(Kernel.to_string(series))
    catch
      {:return, val} -> val
    end
  end
end
Main.main()
