# Code generated by Mochi transpiler 2025-08-13 12:32 +0700
defmodule Main do
  def sqrt(x) do
    try do
      if x <= 0.0 do
        throw {:return, 0.0}
      end
      guess = x
      i = 0
      while_fun = fn while_fun, guess, i ->
        if i < 10 do
          guess = (guess + x / guess) / 2.0
          i = i + 1
          while_fun.(while_fun, guess, i)
        else
          {guess, i}
        end
      end
      {guess, i} = try do
          while_fun.(while_fun, guess, i)
        catch
          {:break, {guess, i}} -> {guess, i}
        end

      throw {:return, guess}
    catch
      {:return, val} -> val
    end
  end
  def real_power(apparent_power, power_factor) do
    try do
      if power_factor < 0.0 - 1.0 || power_factor > 1.0 do
        raise("power_factor must be a valid float value between -1 and 1.")
      end
      throw {:return, apparent_power * power_factor}
    catch
      {:return, val} -> val
    end
  end
  def reactive_power(apparent_power, power_factor) do
    try do
      if power_factor < 0.0 - 1.0 || power_factor > 1.0 do
        raise("power_factor must be a valid float value between -1 and 1.")
      end
      throw {:return, apparent_power * sqrt(1.0 - power_factor * power_factor)}
    catch
      {:return, val} -> val
    end
  end
  def main() do
    IO.puts(Kernel.inspect(real_power(100.0, 0.9)))
    IO.puts(Kernel.inspect(real_power(0.0, 0.8)))
    IO.puts(Kernel.inspect(real_power(100.0, -0.9)))
    IO.puts(Kernel.inspect(reactive_power(100.0, 0.9)))
    IO.puts(Kernel.inspect(reactive_power(0.0, 0.8)))
    IO.puts(Kernel.inspect(reactive_power(100.0, -0.9)))
  end
end
Main.main()
