compile: exit status 1
/tmp/TestJavaTranspiler_Algorithms_Golden160_find_triplets_with_0_sum3696869913/001/Main.java:54: error: bad operand types for binary operator '<'
        for (int i = 0; i < n; i++) {
                          ^
  first type:  int
  second type: BigInteger
/tmp/TestJavaTranspiler_Algorithms_Golden160_find_triplets_with_0_sum3696869913/001/Main.java:55: error: incompatible types: BigInteger cannot be converted to int
            for (int j = (new java.math.BigInteger(String.valueOf(i)).add(java.math.BigInteger.valueOf(1))); j < n; j++) {
                                                                         ^
/tmp/TestJavaTranspiler_Algorithms_Golden160_find_triplets_with_0_sum3696869913/001/Main.java:55: error: bad operand types for binary operator '<'
            for (int j = (new java.math.BigInteger(String.valueOf(i)).add(java.math.BigInteger.valueOf(1))); j < n; j++) {
                                                                                                               ^
  first type:  int
  second type: BigInteger
/tmp/TestJavaTranspiler_Algorithms_Golden160_find_triplets_with_0_sum3696869913/001/Main.java:56: error: incompatible types: BigInteger cannot be converted to int
                for (int k = (new java.math.BigInteger(String.valueOf(j)).add(java.math.BigInteger.valueOf(1))); k < n; k++) {
                                                                             ^
/tmp/TestJavaTranspiler_Algorithms_Golden160_find_triplets_with_0_sum3696869913/001/Main.java:56: error: bad operand types for binary operator '<'
                for (int k = (new java.math.BigInteger(String.valueOf(j)).add(java.math.BigInteger.valueOf(1))); k < n; k++) {
                                                                                                                   ^
  first type:  int
  second type: BigInteger
/tmp/TestJavaTranspiler_Algorithms_Golden160_find_triplets_with_0_sum3696869913/001/Main.java:78: error: incompatible types: BigInteger cannot be converted to int
            for (int j = (new java.math.BigInteger(String.valueOf(i)).add(java.math.BigInteger.valueOf(1))); j < arr.length; j++) {
                                                                         ^
6 errors
