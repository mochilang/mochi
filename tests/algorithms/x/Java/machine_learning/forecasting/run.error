compile: exit status 1
/tmp/TestJavaTranspiler_Algorithms_Golden503_run4198626762/001/Main.java:156: error: incompatible types: double[] cannot be converted to Object[]
            X = java.util.stream.Stream.concat(java.util.Arrays.stream(X), java.util.stream.Stream.of(new Object[][]{new double[]{1.0, train_dt[(int)((long)(i_16))], train_mtch[(int)((long)(i_16))]}})).toArray(Object[][]::new);
                                                                                                                     ^
/tmp/TestJavaTranspiler_Algorithms_Golden503_run4198626762/001/Main.java:156: error: incompatible types: inference variable A has incompatible bounds
            X = java.util.stream.Stream.concat(java.util.Arrays.stream(X), java.util.stream.Stream.of(new Object[][]{new double[]{1.0, train_dt[(int)((long)(i_16))], train_mtch[(int)((long)(i_16))]}})).toArray(Object[][]::new);
                                                                                                                                                                                                                 ^
    upper bounds: double[],Object
    lower bounds: Object[]
  where A is a type-variable:
    A extends Object declared in method <A>toArray(IntFunction<A[]>)
/tmp/TestJavaTranspiler_Algorithms_Golden503_run4198626762/001/Main.java:169: error: incompatible types: double[] cannot be converted to Object[]
            X_2 = java.util.stream.Stream.concat(java.util.Arrays.stream(X_2), java.util.stream.Stream.of(new Object[][]{new double[]{1.0, train_user[(int)((long)((long)(i_18) - 1L))], train_match[(int)((long)(i_18))]}})).toArray(Object[][]::new);
                                                                                                                         ^
/tmp/TestJavaTranspiler_Algorithms_Golden503_run4198626762/001/Main.java:169: error: incompatible types: inference variable A has incompatible bounds
            X_2 = java.util.stream.Stream.concat(java.util.Arrays.stream(X_2), java.util.stream.Stream.of(new Object[][]{new double[]{1.0, train_user[(int)((long)((long)(i_18) - 1L))], train_match[(int)((long)(i_18))]}})).toArray(Object[][]::new);
                                                                                                                                                                                                                                     ^
    upper bounds: double[],Object
    lower bounds: Object[]
  where A is a type-variable:
    A extends Object declared in method <A>toArray(IntFunction<A[]>)
4 errors
