public class Main {
    static int prime;
    static int primitive_root;

    static int mod_pow(int base, int exp, int mod) {
        int result = 1;
        int b = Math.floorMod(base, mod);
        int e = exp;
        while (e > 0) {
            if (Math.floorMod(e, 2) == 1) {
                result = Math.floorMod((result * b), mod);
            }
            e = e / 2;
            b = Math.floorMod((b * b), mod);
        }
        return result;
    }

    static boolean contains(int[] xs, int val) {
        int i = 0;
        while (i < xs.length) {
            if (xs[i] == val) {
                return true;
            }
            i = i + 1;
        }
        return false;
    }

    static int find_primitive(int modulus) {
        int r = 1;
        while (r < modulus) {
            int[] li = ((int[])(new int[]{}));
            int x = 0;
            boolean valid = true;
            while (x < modulus - 1 && valid) {
                int value = mod_pow(r, x, modulus);
                if (((Boolean)(contains(((int[])(li)), value)))) {
                    valid = false;
                } else {
                    li = ((int[])(java.util.stream.IntStream.concat(java.util.Arrays.stream(li), java.util.stream.IntStream.of(value)).toArray()));
                    x = x + 1;
                }
            }
            if (valid) {
                return r;
            }
            r = r + 1;
        }
        return -1;
    }
    public static void main(String[] args) {
        System.out.println(find_primitive(7));
        System.out.println(find_primitive(11));
        System.out.println(find_primitive(8));
        prime = 23;
        primitive_root = find_primitive(prime);
        if (primitive_root == (0 - 1)) {
            System.out.println("Cannot find the primitive for the value: -1");
        } else {
            int a_private = 6;
            int b_private = 15;
            int a_public = mod_pow(primitive_root, a_private, prime);
            int b_public = mod_pow(primitive_root, b_private, prime);
            int a_secret = mod_pow(b_public, a_private, prime);
            int b_secret = mod_pow(a_public, b_private, prime);
            System.out.println("The key value generated by A is: " + _p(a_secret));
            System.out.println("The key value generated by B is: " + _p(b_secret));
        }
    }

    static String _p(Object v) {
        if (v == null) return "<nil>";
        if (v.getClass().isArray()) {
            if (v instanceof int[]) return java.util.Arrays.toString((int[]) v);
            if (v instanceof long[]) return java.util.Arrays.toString((long[]) v);
            if (v instanceof double[]) return java.util.Arrays.toString((double[]) v);
            if (v instanceof boolean[]) return java.util.Arrays.toString((boolean[]) v);
            if (v instanceof byte[]) return java.util.Arrays.toString((byte[]) v);
            if (v instanceof char[]) return java.util.Arrays.toString((char[]) v);
            if (v instanceof short[]) return java.util.Arrays.toString((short[]) v);
            if (v instanceof float[]) return java.util.Arrays.toString((float[]) v);
            return java.util.Arrays.deepToString((Object[]) v);
        }
        return String.valueOf(v);
    }
}
