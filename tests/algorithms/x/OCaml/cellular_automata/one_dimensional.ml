(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec format_ruleset ruleset =
  let __ret = ref ([] : (int) list) in
  (try
  let ruleset = (Obj.magic ruleset : int) in
  let rs = ref (ruleset) in
  let bits_rev = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < 8) do
    try
  bits_rev := (List.append (!bits_rev) [(Obj.magic ((!rs mod 2)) : int)]);
  rs := (!rs / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let bits = ref (([] : (int) list)) in
  let j = ref ((List.length (!bits_rev) - 1)) in
  (try while (!j >= 0) do
    try
  bits := (List.append (!bits) [(Obj.magic (List.nth (!bits_rev) (!j)) : int)]);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!bits) : int list); raise Return
  with Return -> !__ret)

and new_generation cells rules time =
  let __ret = ref ([] : (int) list) in
  (try
  let time = (Obj.magic time : int) in
  let population = List.length (List.nth (cells) (0)) in
  let next_generation = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < population) do
    try
  let left_neighbor = if (!i = 0) then 0 else List.nth (List.nth (cells) (time)) ((!i - 1)) in
  let right_neighbor = if (!i = (population - 1)) then 0 else List.nth (List.nth (cells) (time)) ((!i + 1)) in
  let center = List.nth (List.nth (cells) (time)) (!i) in
  let idx = (7 - (((left_neighbor * 4) + (center * 2)) + right_neighbor)) in
  next_generation := (List.append (!next_generation) [(Obj.magic (List.nth (rules) (idx)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!next_generation) : int list); raise Return
  with Return -> !__ret)

and cells_to_string row =
  let __ret = ref "" in
  (try
  let result = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (row)) do
    try
  if (List.nth (row) (!i) = 1) then (
  result := (!result ^ "#");
  ) else (
  result := (!result ^ ".");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let initial = ref ([0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0])
let cells = ref ([!initial])
let rules = ref (format_ruleset (Obj.repr (30)))
let time = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!time < 16) do
    try
  let next = ref (new_generation (!cells) (!rules) (Obj.repr (!time))) in
  cells := (List.append (!cells) [(Obj.magic (!next) : int list)]);
  time := (!time + 1);
    with Continue -> ()
  done with Break -> ());
  let t = ref (0) in
  (try while (!t < List.length (!cells)) do
    try
  print_endline ((cells_to_string (List.nth (!cells) (!t))));
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()