(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _glider = ref ([[0; 1; 0; 0; 0; 0; 0; 0]; [0; 0; 1; 0; 0; 0; 0; 0]; [1; 1; 1; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 0]])
let _blinker = ref ([[0; 1; 0]; [0; 1; 0]; [0; 1; 0]])
let rec new_generation cells =
  let __ret = ref ([] : (int list) list) in
  (try
  let rows = List.length (cells) in
  let cols = List.length (List.nth (cells) (0)) in
  let next = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  let count = ref (0) in
  if ((!i > 0) && (!j > 0)) then (
  count := (!count + List.nth (List.nth (cells) ((!i - 1))) ((!j - 1)));
  );
  if (!i > 0) then (
  count := (!count + List.nth (List.nth (cells) ((!i - 1))) (!j));
  );
  if ((!i > 0) && (!j < (cols - 1))) then (
  count := (!count + List.nth (List.nth (cells) ((!i - 1))) ((!j + 1)));
  );
  if (!j > 0) then (
  count := (!count + List.nth (List.nth (cells) (!i)) ((!j - 1)));
  );
  if (!j < (cols - 1)) then (
  count := (!count + List.nth (List.nth (cells) (!i)) ((!j + 1)));
  );
  if ((!i < (rows - 1)) && (!j > 0)) then (
  count := (!count + List.nth (List.nth (cells) ((!i + 1))) ((!j - 1)));
  );
  if (!i < (rows - 1)) then (
  count := (!count + List.nth (List.nth (cells) ((!i + 1))) (!j));
  );
  if ((!i < (rows - 1)) && (!j < (cols - 1))) then (
  count := (!count + List.nth (List.nth (cells) ((!i + 1))) ((!j + 1)));
  );
  let alive = (List.nth (List.nth (cells) (!i)) (!j) = 1) in
  if (((alive && (!count >= 2)) && (!count <= 3)) || (not (alive) && (!count = 3))) then (
  row := (List.append (!row) [(Obj.magic (1) : int)]);
  ) else (
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  next := (List.append (!next) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!next) : int list list); raise Return
  with Return -> !__ret)

and generate_generations cells frames =
  let __ret = ref ([] : (int list list) list) in
  (try
  let frames = (Obj.magic frames : int) in
  let result = ref (([] : (int list list) list)) in
  let i = ref (0) in
  let current = ref (cells) in
  (try while (!i < frames) do
    try
  result := (List.append (!result) [(Obj.magic (!current) : int list list)]);
  current := new_generation (!current);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let frames = ref (generate_generations (!_glider) (Obj.repr (4))) in
  let i = ref (0) in
  (try while (!i < List.length (!frames)) do
    try
  print_endline (__show_list (List.nth (!frames) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()