(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _width = 10
let _height = 10
let _prey_initial_count = 20
let _prey_reproduction_time = 5
let _predator_initial_count = 5
let _predator_reproduction_time = 20
let _predator_initial_energy = 15
let _predator_food_value = 5
let _type_prey = 0
let _type_predator = 1
let seed = ref (123456789)
let rec rand () =
  let __ret = ref 0 in
  (try
  seed := (((!seed * 1103515245) + 12345) mod 2147483648);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)

and rand_range max =
  let __ret = ref 0 in
  (try
  let max = (Obj.magic max : int) in
  __ret := (Obj.magic ((rand () mod max)) : int); raise Return
  with Return -> !__ret)

and shuffle list_int =
  let __ret = ref ([] : (int) list) in
  (try
  let i = ref ((List.length (!list_int) - 1)) in
  (try while (!i > 0) do
    try
  let j = rand_range (Obj.repr ((!i + 1))) in
  let tmp = List.nth (!list_int) (!i) in
  list_int := (List.mapi (fun __i __x -> if __i = !i then List.nth (!list_int) (j) else __x) (!list_int));
  list_int := (List.mapi (fun __i __x -> if __i = j then tmp else __x) (!list_int));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!list_int) : int list); raise Return
  with Return -> !__ret)

and create_board () =
  let __ret = ref ([] : (int list) list) in
  (try
  let board = ref (([] : (int list) list)) in
  let r = ref (0) in
  (try while (!r < _height) do
    try
  let row = ref (([] : (int) list)) in
  let c = ref (0) in
  (try while (!c < _width) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  board := (List.append (!board) [(Obj.magic (!row) : int list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!board) : int list list); raise Return
  with Return -> !__ret)

and create_prey r c =
  let __ret = ref ([] : (int) list) in
  (try
  let r = (Obj.magic r : int) in
  let c = (Obj.magic c : int) in
  __ret := (Obj.magic ([_type_prey; r; c; _prey_reproduction_time; 0; 1]) : int list); raise Return
  with Return -> !__ret)

and create_predator r c =
  let __ret = ref ([] : (int) list) in
  (try
  let r = (Obj.magic r : int) in
  let c = (Obj.magic c : int) in
  __ret := (Obj.magic ([_type_predator; r; c; _predator_reproduction_time; _predator_initial_energy; 1]) : int list); raise Return
  with Return -> !__ret)


let board = ref (create_board ())
let entities = ref (([] : (int list) list))
let rec empty_cell r c =
  let __ret = ref false in
  (try
  let r = (Obj.magic r : int) in
  let c = (Obj.magic c : int) in
  __ret := (Obj.magic ((List.nth (List.nth (!board) (r)) (c) = 0)) : bool); raise Return
  with Return -> !__ret)

and add_entity typ =
  let __ret = ref (Obj.magic 0) in
  (try
  let typ = (Obj.magic typ : int) in
  (try while true do
    try
  let r = rand_range (Obj.repr (_height)) in
  let c = rand_range (Obj.repr (_width)) in
  if empty_cell (Obj.repr (r)) (Obj.repr (c)) then (
  if (typ = _type_prey) then (
  board := (List.mapi (fun __i __x -> if __i = r then (List.mapi (fun __i __x -> if __i = c then 1 else __x) (List.nth (!board) (r))) else __x) (!board));
  entities := (List.append (!entities) [(Obj.magic (create_prey (Obj.repr (r)) (Obj.repr (c))) : int list)]);
  ) else (
  board := (List.mapi (fun __i __x -> if __i = r then (List.mapi (fun __i __x -> if __i = c then 2 else __x) (List.nth (!board) (r))) else __x) (!board));
  entities := (List.append (!entities) [(Obj.magic (create_predator (Obj.repr (r)) (Obj.repr (c))) : int list)]);
  );
  __ret := (); raise Return
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and setup () =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < _prey_initial_count) do
    try
  ignore (add_entity (Obj.repr (_type_prey)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < _predator_initial_count) do
    try
  ignore (add_entity (Obj.repr (_type_predator)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let dr = ref ([-(1); 0; 1; 0])
let dc = ref ([0; 1; 0; -(1)])
let rec inside r c =
  let __ret = ref false in
  (try
  let r = (Obj.magic r : int) in
  let c = (Obj.magic c : int) in
  __ret := (Obj.magic (((((r >= 0) && (r < _height)) && (c >= 0)) && (c < _width))) : bool); raise Return
  with Return -> !__ret)

and find_prey r c =
  let __ret = ref 0 in
  (try
  let r = (Obj.magic r : int) in
  let c = (Obj.magic c : int) in
  let i = ref (0) in
  (try while (!i < List.length (!entities)) do
    try
  let e = ref (List.nth (!entities) (!i)) in
  if ((((List.nth (!e) (5) = 1) && (List.nth (!e) (0) = _type_prey)) && (List.nth (!e) (1) = r)) && (List.nth (!e) (2) = c)) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and step_world () =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (!entities)) do
    try
  let e = ref (List.nth (!entities) (!i)) in
  if (List.nth (!e) (5) = 0) then (
  i := (!i + 1);
  raise Continue;
  );
  let typ = List.nth (!e) (0) in
  let row = List.nth (!e) (1) in
  let col = List.nth (!e) (2) in
  let repro = List.nth (!e) (3) in
  let energy = List.nth (!e) (4) in
  let dirs = ref ([0; 1; 2; 3]) in
  dirs := shuffle (dirs);
  let moved = ref (false) in
  let old_r = row in
  let old_c = col in
  if (typ = _type_predator) then (
  let j = ref (0) in
  let ate = ref (false) in
  (try while (!j < 4) do
    try
  let d = List.nth (!dirs) (!j) in
  let nr = (row + List.nth (!dr) (d)) in
  let nc = (col + List.nth (!dc) (d)) in
  if (inside (Obj.repr (nr)) (Obj.repr (nc)) && (List.nth (List.nth (!board) (nr)) (nc) = 1)) then (
  let prey_index = find_prey (Obj.repr (nr)) (Obj.repr (nc)) in
  if (prey_index >= 0) then (
  entities := (List.mapi (fun __i __x -> if __i = prey_index then (List.mapi (fun __i __x -> if __i = 5 then 0 else __x) (List.nth (!entities) (prey_index))) else __x) (!entities));
  );
  board := (List.mapi (fun __i __x -> if __i = nr then (List.mapi (fun __i __x -> if __i = nc then 2 else __x) (List.nth (!board) (nr))) else __x) (!board));
  board := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then 0 else __x) (List.nth (!board) (row))) else __x) (!board));
  e := (List.mapi (fun __i __x -> if __i = 1 then nr else __x) (!e));
  e := (List.mapi (fun __i __x -> if __i = 2 then nc else __x) (!e));
  e := (List.mapi (fun __i __x -> if __i = 4 then ((energy + _predator_food_value) - 1) else __x) (!e));
  moved := true;
  ate := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!ate) then (
  j := 0;
  (try while (!j < 4) do
    try
  let d = List.nth (!dirs) (!j) in
  let nr = (row + List.nth (!dr) (d)) in
  let nc = (col + List.nth (!dc) (d)) in
  if (inside (Obj.repr (nr)) (Obj.repr (nc)) && (List.nth (List.nth (!board) (nr)) (nc) = 0)) then (
  board := (List.mapi (fun __i __x -> if __i = nr then (List.mapi (fun __i __x -> if __i = nc then 2 else __x) (List.nth (!board) (nr))) else __x) (!board));
  board := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then 0 else __x) (List.nth (!board) (row))) else __x) (!board));
  e := (List.mapi (fun __i __x -> if __i = 1 then nr else __x) (!e));
  e := (List.mapi (fun __i __x -> if __i = 2 then nc else __x) (!e));
  moved := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  e := (List.mapi (fun __i __x -> if __i = 4 then (energy - 1) else __x) (!e));
  );
  if (List.nth (!e) (4) <= 0) then (
  e := (List.mapi (fun __i __x -> if __i = 5 then 0 else __x) (!e));
  board := (List.mapi (fun __i __x -> if __i = List.nth (!e) (1) then (List.mapi (fun __i __x -> if __i = List.nth (!e) (2) then 0 else __x) (List.nth (!board) (List.nth (!e) (1)))) else __x) (!board));
  );
  ) else (
  let j = ref (0) in
  (try while (!j < 4) do
    try
  let d = List.nth (!dirs) (!j) in
  let nr = (row + List.nth (!dr) (d)) in
  let nc = (col + List.nth (!dc) (d)) in
  if (inside (Obj.repr (nr)) (Obj.repr (nc)) && (List.nth (List.nth (!board) (nr)) (nc) = 0)) then (
  board := (List.mapi (fun __i __x -> if __i = nr then (List.mapi (fun __i __x -> if __i = nc then 1 else __x) (List.nth (!board) (nr))) else __x) (!board));
  board := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then 0 else __x) (List.nth (!board) (row))) else __x) (!board));
  e := (List.mapi (fun __i __x -> if __i = 1 then nr else __x) (!e));
  e := (List.mapi (fun __i __x -> if __i = 2 then nc else __x) (!e));
  moved := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  );
  if (List.nth (!e) (5) = 1) then (
  if (!moved && (repro <= 0)) then (
  if (typ = _type_prey) then (
  board := (List.mapi (fun __i __x -> if __i = old_r then (List.mapi (fun __i __x -> if __i = old_c then 1 else __x) (List.nth (!board) (old_r))) else __x) (!board));
  entities := (List.append (!entities) [(Obj.magic (create_prey (Obj.repr (old_r)) (Obj.repr (old_c))) : int list)]);
  e := (List.mapi (fun __i __x -> if __i = 3 then _prey_reproduction_time else __x) (!e));
  ) else (
  board := (List.mapi (fun __i __x -> if __i = old_r then (List.mapi (fun __i __x -> if __i = old_c then 2 else __x) (List.nth (!board) (old_r))) else __x) (!board));
  entities := (List.append (!entities) [(Obj.magic (create_predator (Obj.repr (old_r)) (Obj.repr (old_c))) : int list)]);
  e := (List.mapi (fun __i __x -> if __i = 3 then _predator_reproduction_time else __x) (!e));
  );
  ) else (
  e := (List.mapi (fun __i __x -> if __i = 3 then (repro - 1) else __x) (!e));
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let alive = ref (([] : (int list) list)) in
  let k = ref (0) in
  (try while (!k < List.length (!entities)) do
    try
  let e2 = ref (List.nth (!entities) (!k)) in
  if (List.nth (!e2) (5) = 1) then (
  alive := (List.append (!alive) [(Obj.magic (!e2) : int list)]);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  entities := !alive;
    !__ret
  with Return -> !__ret)

and count_entities typ =
  let __ret = ref 0 in
  (try
  let typ = (Obj.magic typ : int) in
  let cnt = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!entities)) do
    try
  if ((List.nth (List.nth (!entities) (!i)) (0) = typ) && (List.nth (List.nth (!entities) (!i)) (5) = 1)) then (
  cnt := (!cnt + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cnt) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (setup ());
  let t = ref (0) in
  (try while (!t < 10) do
    try
  ignore (step_world ());
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (("Prey: " ^ (string_of_int (count_entities (Obj.repr (_type_prey))))));
  print_endline (("Predators: " ^ (string_of_int (count_entities (Obj.repr (_type_predator))))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()