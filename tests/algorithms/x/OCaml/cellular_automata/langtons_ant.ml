(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_board width height =
  let __ret = ref ([] : (bool list) list) in
  (try
  let width = (Obj.magic width : int) in
  let height = (Obj.magic height : int) in
  let board = ref (([] : (bool list) list)) in
  let i = ref (0) in
  (try while (!i < height) do
    try
  let row = ref (([] : (bool) list)) in
  let j = ref (0) in
  (try while (!j < width) do
    try
  row := (List.append (!row) [(Obj.magic (true) : bool)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  board := (List.append (!board) [(Obj.magic (!row) : bool list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!board) : bool list list); raise Return
  with Return -> !__ret)

and move_ant board x y direction =
  let __ret = ref ([] : (int) list) in
  (try
  x := (Obj.magic !x : int);
  y := (Obj.magic !y : int);
  direction := (Obj.magic !direction : int);
  if List.nth (List.nth (!board) (!x)) (!y) then (
  direction := ((!direction + 1) mod 4);
  ) else (
  direction := ((!direction + 3) mod 4);
  );
  let old_x = !x in
  let old_y = !y in
  if (!direction = 0) then (
  x := (!x - 1);
  ) else (
  if (!direction = 1) then (
  y := (!y + 1);
  ) else (
  if (!direction = 2) then (
  x := (!x + 1);
  ) else (
  y := (!y - 1);
  );
  );
  );
  board := (List.mapi (fun __i __x -> if __i = old_x then (List.mapi (fun __i __x -> if __i = old_y then not (List.nth (List.nth (!board) (old_x)) (old_y)) else __x) (List.nth (!board) (old_x))) else __x) (!board));
  __ret := (Obj.magic ([!x; !y; !direction]) : int list); raise Return
  with Return -> !__ret)

and langtons_ant width height steps =
  let __ret = ref ([] : (bool list) list) in
  (try
  let width = (Obj.magic width : int) in
  let height = (Obj.magic height : int) in
  let steps = (Obj.magic steps : int) in
  let board = ref (create_board (Obj.repr (width)) (Obj.repr (height))) in
  let x = ref ((width / 2)) in
  let y = ref ((height / 2)) in
  let dir = ref (3) in
  let s = ref (0) in
  (try while (!s < steps) do
    try
  let state = ref (move_ant (board) (x) (y) (dir)) in
  x := List.nth (!state) (0);
  y := List.nth (!state) (1);
  dir := List.nth (!state) (2);
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!board) : bool list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()