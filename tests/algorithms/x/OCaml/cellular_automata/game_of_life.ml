(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec count_alive_neighbours board row col =
  let __ret = ref 0 in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let size = List.length (board) in
  let alive = ref (0) in
  let dr = ref (-(1)) in
  (try while (!dr < 2) do
    try
  let dc = ref (-(1)) in
  (try while (!dc < 2) do
    try
  let nr = (row + !dr) in
  let nc = (col + !dc) in
  if ((((not (((!dr = 0) && (!dc = 0))) && (nr >= 0)) && (nr < size)) && (nc >= 0)) && (nc < size)) then (
  if List.nth (List.nth (board) (nr)) (nc) then (
  alive := (!alive + 1);
  );
  );
  dc := (!dc + 1);
    with Continue -> ()
  done with Break -> ());
  dr := (!dr + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!alive) : int); raise Return
  with Return -> !__ret)

and next_state current alive =
  let __ret = ref false in
  (try
  let alive = (Obj.magic alive : int) in
  let state = ref (current) in
  if current then (
  if (alive < 2) then (
  state := false;
  ) else (
  if ((alive = 2) || (alive = 3)) then (
  state := true;
  ) else (
  state := false;
  );
  );
  ) else (
  if (alive = 3) then (
  state := true;
  );
  );
  __ret := (Obj.magic (!state) : bool); raise Return
  with Return -> !__ret)

and step board =
  let __ret = ref ([] : (bool list) list) in
  (try
  let size = List.length (board) in
  let new_board = ref (([] : (bool list) list)) in
  let r = ref (0) in
  (try while (!r < size) do
    try
  let new_row = ref (([] : (bool) list)) in
  let c = ref (0) in
  (try while (!c < size) do
    try
  let alive = count_alive_neighbours (board) (Obj.repr (!r)) (Obj.repr (!c)) in
  let cell = List.nth (List.nth (board) (!r)) (!c) in
  let updated = next_state (cell) (Obj.repr (alive)) in
  new_row := (List.append (!new_row) [(Obj.magic (updated) : bool)]);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  new_board := (List.append (!new_board) [(Obj.magic (!new_row) : bool list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!new_board) : bool list list); raise Return
  with Return -> !__ret)

and show board =
  let __ret = ref (Obj.magic 0) in
  (try
  let r = ref (0) in
  (try while (!r < List.length (board)) do
    try
  let line = ref ("") in
  let c = ref (0) in
  (try while (!c < List.length (List.nth (board) (!r))) do
    try
  if List.nth (List.nth (board) (!r)) (!c) then (
  line := (!line ^ "#");
  ) else (
  line := (!line ^ ".");
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let glider = ref ([[false; true; false; false; false]; [false; false; true; false; false]; [true; true; true; false; false]; [false; false; false; false; false]; [false; false; false; false; false]])
let board = ref (!glider)
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Initial");
  ignore (show (!board));
  let i = ref (0) in
  (try while (!i < 4) do
    try
  board := step (!board);
  print_endline (("\nStep " ^ (string_of_int ((!i + 1)))));
  ignore (show (!board));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()