(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec calc_profit profit weight max_weight =
  let __ret = ref 0.0 in
  (try
  let profit = (Obj.magic profit : int list) in
  let weight = (Obj.magic weight : int list) in
  let max_weight = (Obj.magic max_weight : int) in
  if (List.length (profit) <> List.length (weight)) then (
  (failwith ("The length of profit and weight must be same."));
  );
  if (max_weight <= 0) then (
  (failwith ("max_weight must greater than zero."));
  );
  let i = ref (0) in
  (try while (!i < List.length (profit)) do
    try
  if ((let __l = profit in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < 0) then (
  (failwith ("Profit can not be negative."));
  );
  if ((let __l = weight in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < 0) then (
  (failwith ("Weight can not be negative."));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = List.length (profit) in
  let used = ref (([] : (bool) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  used := (Obj.magic (List.append (!used) [(Obj.magic (false) : bool)]) : bool list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let limit = ref (0) in
  let gain = ref (0.0) in
  let count = ref (0) in
  (try while ((!limit < max_weight) && (!count < n)) do
    try
  let maxRatio = ref ((-.(1.0))) in
  let maxIndex = ref (-(1)) in
  let k = ref (0) in
  (try while (!k < n) do
    try
  if not ((let __l = !used in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  let ratio = (float_of_int ((let __l = profit in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) /. float_of_int ((let __l = weight in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  if (ratio > !maxRatio) then (
  maxRatio := ratio;
  maxIndex := !k;
  );
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if (!maxIndex < 0) then (
  raise Break;
  );
  used := (List.mapi (fun __i __x -> if __i = !maxIndex then true else __x) (!used));
  if ((max_weight - !limit) >= (let __l = weight in let __i = !maxIndex in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  limit := (!limit + (let __l = weight in let __i = !maxIndex in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  gain := (!gain +. float_of_int ((let __l = profit in let __i = !maxIndex in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  ) else (
  gain := (!gain +. ((float_of_int ((max_weight - !limit)) /. float_of_int ((let __l = weight in let __i = !maxIndex in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) *. float_of_int ((let __l = profit in let __i = !maxIndex in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  raise Break;
  );
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!gain) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (string_of_float (calc_profit ([1; 2; 3]) ([3; 4; 5]) (Obj.repr (15))));
  print_endline (string_of_float (calc_profit ([10; 9; 8]) ([3; 4; 5]) (Obj.repr (25))));
  print_endline (string_of_float (calc_profit ([10; 9; 8]) ([3; 4; 5]) (Obj.repr (5))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
