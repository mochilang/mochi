(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec clamp value =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  if (value < 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (value > 255) then (
  __ret := (Obj.magic (255) : int); raise Return
  );
  __ret := (Obj.magic (value) : int); raise Return
  with Return -> !__ret)

and change_brightness img level =
  let __ret = ref ([] : (int list) list) in
  (try
  let level = (Obj.magic level : int) in
  if ((level < -(255)) || (level > 255)) then (
  (failwith ("level must be between -255 and 255"));
  );
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (img)) do
    try
  let row_res = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (img) (!i))) do
    try
  row_res := (List.append (!row_res) [(Obj.magic (clamp (Obj.repr ((List.nth (List.nth (img) (!i)) (!j) + level)))) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (List.append (!result) [(Obj.magic (!row_res) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)


let sample = ref ([[100; 150]; [200; 250]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list (change_brightness (!sample) (Obj.repr (30))));
  print_endline (__show_list (change_brightness (!sample) (Obj.repr (-(60)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()