(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec ndvi red nir =
  let __ret = ref 0.0 in
  (try
  let red = (Obj.magic red : float) in
  let nir = (Obj.magic nir : float) in
  __ret := (Obj.magic (((nir -. red) /. (nir +. red))) : float); raise Return
  with Return -> !__ret)

and bndvi blue nir =
  let __ret = ref 0.0 in
  (try
  let blue = (Obj.magic blue : float) in
  let nir = (Obj.magic nir : float) in
  __ret := (Obj.magic (((nir -. blue) /. (nir +. blue))) : float); raise Return
  with Return -> !__ret)

and gndvi green nir =
  let __ret = ref 0.0 in
  (try
  let green = (Obj.magic green : float) in
  let nir = (Obj.magic nir : float) in
  __ret := (Obj.magic (((nir -. green) /. (nir +. green))) : float); raise Return
  with Return -> !__ret)

and ndre redEdge nir =
  let __ret = ref 0.0 in
  (try
  let redEdge = (Obj.magic redEdge : float) in
  let nir = (Obj.magic nir : float) in
  __ret := (Obj.magic (((nir -. redEdge) /. (nir +. redEdge))) : float); raise Return
  with Return -> !__ret)

and ccci red redEdge nir =
  let __ret = ref 0.0 in
  (try
  let red = (Obj.magic red : float) in
  let redEdge = (Obj.magic redEdge : float) in
  let nir = (Obj.magic nir : float) in
  __ret := (Obj.magic ((ndre (Obj.repr (redEdge)) (Obj.repr (nir)) /. ndvi (Obj.repr (red)) (Obj.repr (nir)))) : float); raise Return
  with Return -> !__ret)

and cvi red green nir =
  let __ret = ref 0.0 in
  (try
  let red = (Obj.magic red : float) in
  let green = (Obj.magic green : float) in
  let nir = (Obj.magic nir : float) in
  __ret := (Obj.magic (((nir *. red) /. (green *. green))) : float); raise Return
  with Return -> !__ret)

and gli red green blue =
  let __ret = ref 0.0 in
  (try
  let red = (Obj.magic red : float) in
  let green = (Obj.magic green : float) in
  let blue = (Obj.magic blue : float) in
  __ret := (Obj.magic (((((2.0 *. green) -. red) -. blue) /. (((2.0 *. green) +. red) +. blue))) : float); raise Return
  with Return -> !__ret)

and dvi red nir =
  let __ret = ref 0.0 in
  (try
  let red = (Obj.magic red : float) in
  let nir = (Obj.magic nir : float) in
  __ret := (Obj.magic ((nir /. red)) : float); raise Return
  with Return -> !__ret)

and calc index red green blue redEdge nir =
  let __ret = ref 0.0 in
  (try
  let red = (Obj.magic red : float) in
  let green = (Obj.magic green : float) in
  let blue = (Obj.magic blue : float) in
  let redEdge = (Obj.magic redEdge : float) in
  let nir = (Obj.magic nir : float) in
  if (index = "NDVI") then (
  __ret := (Obj.magic (ndvi (Obj.repr (red)) (Obj.repr (nir))) : float); raise Return
  );
  if (index = "BNDVI") then (
  __ret := (Obj.magic (bndvi (Obj.repr (blue)) (Obj.repr (nir))) : float); raise Return
  );
  if (index = "GNDVI") then (
  __ret := (Obj.magic (gndvi (Obj.repr (green)) (Obj.repr (nir))) : float); raise Return
  );
  if (index = "NDRE") then (
  __ret := (Obj.magic (ndre (Obj.repr (redEdge)) (Obj.repr (nir))) : float); raise Return
  );
  if (index = "CCCI") then (
  __ret := (Obj.magic (ccci (Obj.repr (red)) (Obj.repr (redEdge)) (Obj.repr (nir))) : float); raise Return
  );
  if (index = "CVI") then (
  __ret := (Obj.magic (cvi (Obj.repr (red)) (Obj.repr (green)) (Obj.repr (nir))) : float); raise Return
  );
  if (index = "GLI") then (
  __ret := (Obj.magic (gli (Obj.repr (red)) (Obj.repr (green)) (Obj.repr (blue))) : float); raise Return
  );
  if (index = "DVI") then (
  __ret := (Obj.magic (dvi (Obj.repr (red)) (Obj.repr (nir))) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let red = 50.0 in
  let green = 30.0 in
  let blue = 10.0 in
  let redEdge = 40.0 in
  let nir = 100.0 in
  print_endline (("NDVI=" ^ (Printf.sprintf "%.16g" (ndvi (Obj.repr (red)) (Obj.repr (nir))))));
  print_endline (("CCCI=" ^ (Printf.sprintf "%.16g" (ccci (Obj.repr (red)) (Obj.repr (redEdge)) (Obj.repr (nir))))));
  print_endline (("CVI=" ^ (Printf.sprintf "%.16g" (cvi (Obj.repr (red)) (Obj.repr (green)) (Obj.repr (nir))))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()