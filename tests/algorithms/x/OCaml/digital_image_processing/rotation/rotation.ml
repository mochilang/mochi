(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec mat_inverse3 m =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = List.nth (List.nth (m) (0)) (0) in
  let b = List.nth (List.nth (m) (0)) (1) in
  let c = List.nth (List.nth (m) (0)) (2) in
  let d = List.nth (List.nth (m) (1)) (0) in
  let e = List.nth (List.nth (m) (1)) (1) in
  let f = List.nth (List.nth (m) (1)) (2) in
  let g = List.nth (List.nth (m) (2)) (0) in
  let h = List.nth (List.nth (m) (2)) (1) in
  let i = List.nth (List.nth (m) (2)) (2) in
  let det = (((a *. ((e *. i) -. (f *. h))) -. (b *. ((d *. i) -. (f *. g)))) +. (c *. ((d *. h) -. (e *. g)))) in
  if (det = 0.0) then (
  (failwith ("singular matrix"));
  );
  let adj00 = ((e *. i) -. (f *. h)) in
  let adj01 = ((c *. h) -. (b *. i)) in
  let adj02 = ((b *. f) -. (c *. e)) in
  let adj10 = ((f *. g) -. (d *. i)) in
  let adj11 = ((a *. i) -. (c *. g)) in
  let adj12 = ((c *. d) -. (a *. f)) in
  let adj20 = ((d *. h) -. (e *. g)) in
  let adj21 = ((b *. g) -. (a *. h)) in
  let adj22 = ((a *. e) -. (b *. d)) in
  let inv = ref (([] : (float list) list)) in
  inv := (List.append (!inv) [(Obj.magic ([(adj00 /. det); (adj01 /. det); (adj02 /. det)]) : float list)]);
  inv := (List.append (!inv) [(Obj.magic ([(adj10 /. det); (adj11 /. det); (adj12 /. det)]) : float list)]);
  inv := (List.append (!inv) [(Obj.magic ([(adj20 /. det); (adj21 /. det); (adj22 /. det)]) : float list)]);
  __ret := (Obj.magic (!inv) : float list list); raise Return
  with Return -> !__ret)

and mat_vec_mul m v =
  let __ret = ref ([] : (float) list) in
  (try
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < 3) do
    try
  let val_ = (((List.nth (List.nth (m) (!i)) (0) *. List.nth (v) (0)) +. (List.nth (List.nth (m) (!i)) (1) *. List.nth (v) (1))) +. (List.nth (List.nth (m) (!i)) (2) *. List.nth (v) (2))) in
  res := (List.append (!res) [(Obj.magic (val_) : float)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and create_matrix rows cols value =
  let __ret = ref ([] : (int list) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let value = (Obj.magic value : int) in
  let result = ref (([] : (int list) list)) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let row = ref (([] : (int) list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  row := (List.append (!row) [(Obj.magic (value) : int)]);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  result := (List.append (!result) [(Obj.magic (!row) : int list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and round_to_int x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  if (x >= 0.0) then (
  __ret := (Obj.magic (int_of_float ((x +. 0.5))) : int); raise Return
  );
  __ret := (Obj.magic (int_of_float ((x -. 0.5))) : int); raise Return
  with Return -> !__ret)

and get_rotation img pt1 pt2 rows cols =
  let __ret = ref ([] : (int list) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let src = ref ([[List.nth (List.nth (pt1) (0)) (0); List.nth (List.nth (pt1) (0)) (1); 1.0]; [List.nth (List.nth (pt1) (1)) (0); List.nth (List.nth (pt1) (1)) (1); 1.0]; [List.nth (List.nth (pt1) (2)) (0); List.nth (List.nth (pt1) (2)) (1); 1.0]]) in
  let inv = ref (mat_inverse3 (!src)) in
  let vecx = ref ([List.nth (List.nth (pt2) (0)) (0); List.nth (List.nth (pt2) (1)) (0); List.nth (List.nth (pt2) (2)) (0)]) in
  let vecy = ref ([List.nth (List.nth (pt2) (0)) (1); List.nth (List.nth (pt2) (1)) (1); List.nth (List.nth (pt2) (2)) (1)]) in
  let avec = ref (mat_vec_mul (!inv) (!vecx)) in
  let bvec = ref (mat_vec_mul (!inv) (!vecy)) in
  let a0 = List.nth (!avec) (0) in
  let a1 = List.nth (!avec) (1) in
  let a2 = List.nth (!avec) (2) in
  let b0 = List.nth (!bvec) (0) in
  let b1 = List.nth (!bvec) (1) in
  let b2 = List.nth (!bvec) (2) in
  let out = ref (create_matrix (Obj.repr (rows)) (Obj.repr (cols)) (Obj.repr (0))) in
  let y = ref (0) in
  (try while (!y < rows) do
    try
  let x = ref (0) in
  (try while (!x < cols) do
    try
  let xf = (((a0 *. (1.0 *. float_of_int (!x))) +. (a1 *. (1.0 *. float_of_int (!y)))) +. a2) in
  let yf = (((b0 *. (1.0 *. float_of_int (!x))) +. (b1 *. (1.0 *. float_of_int (!y)))) +. b2) in
  let sx = round_to_int (Obj.repr (xf)) in
  let sy = round_to_int (Obj.repr (yf)) in
  if ((((sx >= 0) && (sx < cols)) && (sy >= 0)) && (sy < rows)) then (
  out := (List.mapi (fun __i __x -> if __i = sy then (List.mapi (fun __i __x -> if __i = sx then List.nth (List.nth (img) (!y)) (!x) else __x) (List.nth (!out) (sy))) else __x) (!out));
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)


let img = ref ([[1; 2; 3]; [4; 5; 6]; [7; 8; 9]])
let pts1 = ref ([[0.0; 0.0]; [2.0; 0.0]; [0.0; 2.0]])
let pts2 = ref ([[0.0; 2.0]; [0.0; 0.0]; [2.0; 2.0]])
let rotated = ref (get_rotation (!img) (!pts1) (!pts2) (Obj.repr (3)) (Obj.repr (3)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!rotated)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()