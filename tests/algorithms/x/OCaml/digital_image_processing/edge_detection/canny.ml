(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and atanApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x > 1.0) then (
  __ret := (Obj.magic (((_pi /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  if (x < (-.(1.0))) then (
  __ret := (Obj.magic ((((-.(_pi)) /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  __ret := (Obj.magic ((x /. (1.0 +. ((0.28 *. x) *. x)))) : float); raise Return
  with Return -> !__ret)

and atan2Approx y x =
  let __ret = ref 0.0 in
  (try
  let y = (Obj.magic y : float) in
  let x = (Obj.magic x : float) in
  if (x > 0.0) then (
  let r = atanApprox (Obj.repr ((y /. x))) in
  __ret := (Obj.magic (r) : float); raise Return
  );
  if (x < 0.0) then (
  if (y >= 0.0) then (
  __ret := (Obj.magic ((atanApprox (Obj.repr ((y /. x))) +. _pi)) : float); raise Return
  );
  __ret := (Obj.magic ((atanApprox (Obj.repr ((y /. x))) -. _pi)) : float); raise Return
  );
  if (y > 0.0) then (
  __ret := (Obj.magic ((_pi /. 2.0)) : float); raise Return
  );
  if (y < 0.0) then (
  __ret := (Obj.magic (((-.(_pi)) /. 2.0)) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and deg rad =
  let __ret = ref 0.0 in
  (try
  let rad = (Obj.magic rad : float) in
  __ret := (Obj.magic (((rad *. 180.0) /. _pi)) : float); raise Return
  with Return -> !__ret)


let _gaussian_kernel = ref ([[0.0625; 0.125; 0.0625]; [0.125; 0.25; 0.125]; [0.0625; 0.125; 0.0625]])
let _sobel_gx = ref ([[(-.(1.0)); 0.0; 1.0]; [(-.(2.0)); 0.0; 2.0]; [(-.(1.0)); 0.0; 1.0]])
let _sobel_gy = ref ([[1.0; 2.0; 1.0]; [0.0; 0.0; 0.0]; [(-.(1.0)); (-.(2.0)); (-.(1.0))]])
let rec zero_matrix h w =
  let __ret = ref ([] : (float list) list) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let out = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < h) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < w) do
    try
  row := (List.append (!row) [(Obj.magic (0.0) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!row) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and convolve img kernel =
  let __ret = ref ([] : (float list) list) in
  (try
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let k = List.length (kernel) in
  let pad = (k / 2) in
  let out = ref (zero_matrix (Obj.repr (h)) (Obj.repr (w))) in
  let y = ref (pad) in
  (try while (!y < (h - pad)) do
    try
  let x = ref (pad) in
  (try while (!x < (w - pad)) do
    try
  let sum = ref (0.0) in
  let ky = ref (0) in
  (try while (!ky < k) do
    try
  let kx = ref (0) in
  (try while (!kx < k) do
    try
  let pixel = List.nth (List.nth (img) (((!y - pad) + !ky))) (((!x - pad) + !kx)) in
  let weight = List.nth (List.nth (kernel) (!ky)) (!kx) in
  sum := (!sum +. (pixel *. weight));
  kx := (!kx + 1);
    with Continue -> ()
  done with Break -> ());
  ky := (!ky + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then !sum else __x) (List.nth (!out) (!y))) else __x) (!out));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and gaussian_blur img =
  let __ret = ref ([] : (float list) list) in
  (try
  __ret := (Obj.magic (convolve (img) (!_gaussian_kernel)) : float list list); raise Return
  with Return -> !__ret)

and sobel_filter img =
  let __ret = ref ([] : (string * float list list) list) in
  (try
  let gx = ref (convolve (img) (!_sobel_gx)) in
  let gy = ref (convolve (img) (!_sobel_gy)) in
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let grad = ref (zero_matrix (Obj.repr (h)) (Obj.repr (w))) in
  let dir = ref (zero_matrix (Obj.repr (h)) (Obj.repr (w))) in
  let i = ref (0) in
  (try while (!i < h) do
    try
  let j = ref (0) in
  (try while (!j < w) do
    try
  let gxx = List.nth (List.nth (!gx) (!i)) (!j) in
  let gyy = List.nth (List.nth (!gy) (!i)) (!j) in
  grad := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then sqrtApprox (Obj.repr (((gxx *. gxx) +. (gyy *. gyy)))) else __x) (List.nth (!grad) (!i))) else __x) (!grad));
  dir := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then (deg (Obj.repr (atan2Approx (Obj.repr (gyy)) (Obj.repr (gxx)))) +. 180.0) else __x) (List.nth (!dir) (!i))) else __x) (!dir));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("grad"), !grad); (__str ("dir"), !dir)]) : (string * float list list) list); raise Return
  with Return -> !__ret)

and suppress_non_maximum h w direction grad =
  let __ret = ref ([] : (float list) list) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let dest = ref (zero_matrix (Obj.repr (h)) (Obj.repr (w))) in
  let r = ref (1) in
  (try while (!r < (h - 1)) do
    try
  let c = ref (1) in
  (try while (!c < (w - 1)) do
    try
  let angle = List.nth (List.nth (direction) (!r)) (!c) in
  let q = ref (0.0) in
  let p = ref (0.0) in
  if ((((angle >= 0.0) && (angle < 22.5)) || ((angle >= 157.5) && (angle <= 180.0))) || (angle >= 337.5)) then (
  q := List.nth (List.nth (grad) (!r)) ((!c + 1));
  p := List.nth (List.nth (grad) (!r)) ((!c - 1));
  ) else (
  if (((angle >= 22.5) && (angle < 67.5)) || ((angle >= 202.5) && (angle < 247.5))) then (
  q := List.nth (List.nth (grad) ((!r + 1))) ((!c - 1));
  p := List.nth (List.nth (grad) ((!r - 1))) ((!c + 1));
  ) else (
  if (((angle >= 67.5) && (angle < 112.5)) || ((angle >= 247.5) && (angle < 292.5))) then (
  q := List.nth (List.nth (grad) ((!r + 1))) (!c);
  p := List.nth (List.nth (grad) ((!r - 1))) (!c);
  ) else (
  q := List.nth (List.nth (grad) ((!r - 1))) ((!c - 1));
  p := List.nth (List.nth (grad) ((!r + 1))) ((!c + 1));
  );
  );
  );
  if ((List.nth (List.nth (grad) (!r)) (!c) >= !q) && (List.nth (List.nth (grad) (!r)) (!c) >= !p)) then (
  dest := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = !c then List.nth (List.nth (grad) (!r)) (!c) else __x) (List.nth (!dest) (!r))) else __x) (!dest));
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!dest) : float list list); raise Return
  with Return -> !__ret)

and double_threshold h w img low high weak strong =
  let __ret = ref (Obj.magic 0) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let low = (Obj.magic low : float) in
  let high = (Obj.magic high : float) in
  let weak = (Obj.magic weak : float) in
  let strong = (Obj.magic strong : float) in
  let r = ref (0) in
  (try while (!r < h) do
    try
  let c = ref (0) in
  (try while (!c < w) do
    try
  let v = List.nth (List.nth (!img) (!r)) (!c) in
  if (v >= high) then (
  img := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = !c then strong else __x) (List.nth (!img) (!r))) else __x) (!img));
  ) else (
  if (v < low) then (
  img := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = !c then 0.0 else __x) (List.nth (!img) (!r))) else __x) (!img));
  ) else (
  img := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = !c then weak else __x) (List.nth (!img) (!r))) else __x) (!img));
  );
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and track_edge h w img weak strong =
  let __ret = ref (Obj.magic 0) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let weak = (Obj.magic weak : float) in
  let strong = (Obj.magic strong : float) in
  let r = ref (1) in
  (try while (!r < (h - 1)) do
    try
  let c = ref (1) in
  (try while (!c < (w - 1)) do
    try
  if (List.nth (List.nth (!img) (!r)) (!c) = weak) then (
  if ((((((((List.nth (List.nth (!img) ((!r + 1))) (!c) = strong) || (List.nth (List.nth (!img) ((!r - 1))) (!c) = strong)) || (List.nth (List.nth (!img) (!r)) ((!c + 1)) = strong)) || (List.nth (List.nth (!img) (!r)) ((!c - 1)) = strong)) || (List.nth (List.nth (!img) ((!r - 1))) ((!c - 1)) = strong)) || (List.nth (List.nth (!img) ((!r - 1))) ((!c + 1)) = strong)) || (List.nth (List.nth (!img) ((!r + 1))) ((!c - 1)) = strong)) || (List.nth (List.nth (!img) ((!r + 1))) ((!c + 1)) = strong)) then (
  img := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = !c then strong else __x) (List.nth (!img) (!r))) else __x) (!img));
  ) else (
  img := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = !c then 0.0 else __x) (List.nth (!img) (!r))) else __x) (!img));
  );
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and canny image low high weak strong =
  let __ret = ref ([] : (float list) list) in
  (try
  let low = (Obj.magic low : float) in
  let high = (Obj.magic high : float) in
  let weak = (Obj.magic weak : float) in
  let strong = (Obj.magic strong : float) in
  let blurred = ref (gaussian_blur (image)) in
  let sob = ref (sobel_filter (!blurred)) in
  let grad = List.assoc (__str ("grad")) (!sob) in
  let direction = List.assoc (__str ("dir")) (!sob) in
  let h = List.length (image) in
  let w = List.length (List.nth (image) (0)) in
  let suppressed = ref (suppress_non_maximum (Obj.repr (h)) (Obj.repr (w)) (direction) (grad)) in
  ignore (double_threshold (Obj.repr (h)) (Obj.repr (w)) (suppressed) (Obj.repr (low)) (Obj.repr (high)) (Obj.repr (weak)) (Obj.repr (strong)));
  ignore (track_edge (Obj.repr (h)) (Obj.repr (w)) (suppressed) (Obj.repr (weak)) (Obj.repr (strong)));
  __ret := (Obj.magic (!suppressed) : float list list); raise Return
  with Return -> !__ret)

and print_image img =
  let __ret = ref (Obj.magic 0) in
  (try
  let r = ref (0) in
  (try while (!r < List.length (img)) do
    try
  let c = ref (0) in
  let line = ref ("") in
  (try while (!c < List.length (List.nth (img) (!r))) do
    try
  line := ((!line ^ (string_of_int ((Obj.magic List.nth (List.nth (img) (!r)) (!c) : int)))) ^ " ");
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let image = ref ([[0.0; 0.0; 0.0; 0.0; 0.0]; [0.0; 255.0; 255.0; 255.0; 0.0]; [0.0; 255.0; 255.0; 255.0; 0.0]; [0.0; 255.0; 255.0; 255.0; 0.0]; [0.0; 0.0; 0.0; 0.0; 0.0]])
let edges = ref (canny (!image) (Obj.repr (20.0)) (Obj.repr (40.0)) (Obj.repr (128.0)) (Obj.repr (255.0)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_image (!edges));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()