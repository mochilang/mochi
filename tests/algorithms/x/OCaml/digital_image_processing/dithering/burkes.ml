(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_greyscale blue green red =
  let __ret = ref 0 in
  (try
  let blue = (Obj.magic blue : int) in
  let green = (Obj.magic green : int) in
  let red = (Obj.magic red : int) in
  let b = float_of_int (blue) in
  let g = float_of_int (green) in
  let r = float_of_int (red) in
  __ret := (Obj.magic ((Obj.magic (((0.114 *. b) +. (0.587 *. g)) +. (0.299 *. r)) : int)) : int); raise Return
  with Return -> !__ret)

and zeros h w =
  let __ret = ref ([] : (int list) list) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let table = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < h) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < w) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  table := (List.append (!table) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!table) : int list list); raise Return
  with Return -> !__ret)

and burkes_dither img threshold =
  let __ret = ref ([] : (int list) list) in
  (try
  let threshold = (Obj.magic threshold : int) in
  let height = List.length (img) in
  let width = List.length (List.nth (img) (0)) in
  let error_table = ref (zeros (Obj.repr ((height + 1))) (Obj.repr ((width + 4)))) in
  let output = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < height) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < width) do
    try
  let px = ref (List.nth (List.nth (img) (!y)) (!x)) in
  let grey = get_greyscale (Obj.repr (List.nth (!px) (0))) (Obj.repr (List.nth (!px) (1))) (Obj.repr (List.nth (!px) (2))) in
  let total = (grey + List.nth (List.nth (!error_table) (!y)) ((!x + 2))) in
  let new_val = ref (0) in
  let current_error = ref (0) in
  if (threshold > total) then (
  new_val := 0;
  current_error := total;
  ) else (
  new_val := 255;
  current_error := (total - 255);
  );
  row := (List.append (!row) [(Obj.magic (!new_val) : int)]);
  error_table := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = (!x + 3) then (List.nth (List.nth (!error_table) (!y)) ((!x + 3)) + ((8 * !current_error) / 32)) else __x) (List.nth (!error_table) (!y))) else __x) (!error_table));
  error_table := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = (!x + 4) then (List.nth (List.nth (!error_table) (!y)) ((!x + 4)) + ((4 * !current_error) / 32)) else __x) (List.nth (!error_table) (!y))) else __x) (!error_table));
  error_table := (List.mapi (fun __i __x -> if __i = (!y + 1) then (List.mapi (fun __i __x -> if __i = (!x + 2) then (List.nth (List.nth (!error_table) ((!y + 1))) ((!x + 2)) + ((8 * !current_error) / 32)) else __x) (List.nth (!error_table) ((!y + 1)))) else __x) (!error_table));
  error_table := (List.mapi (fun __i __x -> if __i = (!y + 1) then (List.mapi (fun __i __x -> if __i = (!x + 3) then (List.nth (List.nth (!error_table) ((!y + 1))) ((!x + 3)) + ((4 * !current_error) / 32)) else __x) (List.nth (!error_table) ((!y + 1)))) else __x) (!error_table));
  error_table := (List.mapi (fun __i __x -> if __i = (!y + 1) then (List.mapi (fun __i __x -> if __i = (!x + 4) then (List.nth (List.nth (!error_table) ((!y + 1))) ((!x + 4)) + ((2 * !current_error) / 32)) else __x) (List.nth (!error_table) ((!y + 1)))) else __x) (!error_table));
  error_table := (List.mapi (fun __i __x -> if __i = (!y + 1) then (List.mapi (fun __i __x -> if __i = (!x + 1) then (List.nth (List.nth (!error_table) ((!y + 1))) ((!x + 1)) + ((4 * !current_error) / 32)) else __x) (List.nth (!error_table) ((!y + 1)))) else __x) (!error_table));
  error_table := (List.mapi (fun __i __x -> if __i = (!y + 1) then (List.mapi (fun __i __x -> if __i = !x then (List.nth (List.nth (!error_table) ((!y + 1))) (!x) + ((2 * !current_error) / 32)) else __x) (List.nth (!error_table) ((!y + 1)))) else __x) (!error_table));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  output := (List.append (!output) [(Obj.magic (!row) : int list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : int list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let img = ref ([[[0; 0; 0]; [64; 64; 64]; [128; 128; 128]; [192; 192; 192]]; [[255; 255; 255]; [200; 200; 200]; [150; 150; 150]; [100; 100; 100]]; [[30; 144; 255]; [255; 0; 0]; [0; 255; 0]; [0; 0; 255]]; [[50; 100; 150]; [80; 160; 240]; [70; 140; 210]; [60; 120; 180]]]) in
  let result = ref (burkes_dither (!img) (Obj.repr (128))) in
  let y = ref (0) in
  (try while (!y < List.length (!result)) do
    try
  let line = ref ("") in
  let x = ref (0) in
  (try while (!x < List.length (List.nth (!result) (!y))) do
    try
  line := (!line ^ (string_of_int (List.nth (List.nth (!result) (!y)) (!x))));
  if (!x < (List.length (List.nth (!result) (!y)) - 1)) then (
  line := (!line ^ " ");
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()