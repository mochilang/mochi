(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec clamp_byte x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (x > 255) then (
  __ret := (Obj.magic (255) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

and convert_to_negative img =
  let __ret = ref ([] : (int list) list) in
  (try
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let out = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  row := (List.append (!row) [(Obj.magic ((255 - List.nth (List.nth (img) (!y)) (!x))) : int)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!row) : int list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)

and change_contrast img factor =
  let __ret = ref ([] : (int list) list) in
  (try
  let factor = (Obj.magic factor : int) in
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let out = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  let p = List.nth (List.nth (img) (!y)) (!x) in
  let v = ref (((((p - 128) * factor) / 100) + 128)) in
  v := clamp_byte (Obj.repr (!v));
  row := (List.append (!row) [(Obj.magic (!v) : int)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!row) : int list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)

and gen_gaussian_kernel n sigma =
  let __ret = ref ([] : (float list) list) in
  (try
  let n = (Obj.magic n : int) in
  let sigma = (Obj.magic sigma : float) in
  if (n = 3) then (
  __ret := (Obj.magic ([[(1.0 /. 16.0); (2.0 /. 16.0); (1.0 /. 16.0)]; [(2.0 /. 16.0); (4.0 /. 16.0); (2.0 /. 16.0)]; [(1.0 /. 16.0); (2.0 /. 16.0); (1.0 /. 16.0)]]) : float list list); raise Return
  );
  let k = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (List.append (!row) [(Obj.magic (0.0) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  k := (List.append (!k) [(Obj.magic (!row) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!k) : float list list); raise Return
  with Return -> !__ret)

and img_convolve img kernel =
  let __ret = ref ([] : (int list) list) in
  (try
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let out = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  let acc = ref (0.0) in
  let ky = ref (0) in
  (try while (!ky < List.length (kernel)) do
    try
  let kx = ref (0) in
  (try while (!kx < List.length (List.nth (kernel) (0))) do
    try
  let iy = ((!y + !ky) - 1) in
  let ix = ((!x + !kx) - 1) in
  let pixel = ref (0) in
  if ((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w)) then (
  pixel := List.nth (List.nth (img) (iy)) (ix);
  );
  acc := (!acc +. (List.nth (List.nth (kernel) (!ky)) (!kx) *. (1.0 *. float_of_int (!pixel))));
  kx := (!kx + 1);
    with Continue -> ()
  done with Break -> ());
  ky := (!ky + 1);
    with Continue -> ()
  done with Break -> ());
  row := (List.append (!row) [(Obj.magic (int_of_float (!acc)) : int)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!row) : int list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)

and sort_ints xs =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = ref (xs) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let j = ref (0) in
  (try while (!j < ((List.length (!arr) - 1) - !i)) do
    try
  if (List.nth (!arr) (!j) > List.nth (!arr) ((!j + 1))) then (
  let tmp = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j + 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and median_filter img k =
  let __ret = ref ([] : (int list) list) in
  (try
  let k = (Obj.magic k : int) in
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let offset = (k / 2) in
  let out = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  let vals = ref (([] : (int) list)) in
  let ky = ref (0) in
  (try while (!ky < k) do
    try
  let kx = ref (0) in
  (try while (!kx < k) do
    try
  let iy = ((!y + !ky) - offset) in
  let ix = ((!x + !kx) - offset) in
  let pixel = ref (0) in
  if ((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w)) then (
  pixel := List.nth (List.nth (img) (iy)) (ix);
  );
  vals := (List.append (!vals) [(Obj.magic (!pixel) : int)]);
  kx := (!kx + 1);
    with Continue -> ()
  done with Break -> ());
  ky := (!ky + 1);
    with Continue -> ()
  done with Break -> ());
  let sorted = ref (sort_ints (!vals)) in
  row := (List.append (!row) [(Obj.magic (List.nth (!sorted) ((List.length (!sorted) / 2))) : int)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!row) : int list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)

and iabs x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic (-(x)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

and sobel_filter img =
  let __ret = ref ([] : (int list) list) in
  (try
  let gx = ref ([[1; 0; -(1)]; [2; 0; -(2)]; [1; 0; -(1)]]) in
  let gy = ref ([[1; 2; 1]; [0; 0; 0]; [-(1); -(2); -(1)]]) in
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let out = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  let sx = ref (0) in
  let sy = ref (0) in
  let ky = ref (0) in
  (try while (!ky < 3) do
    try
  let kx = ref (0) in
  (try while (!kx < 3) do
    try
  let iy = ((!y + !ky) - 1) in
  let ix = ((!x + !kx) - 1) in
  let pixel = ref (0) in
  if ((((iy >= 0) && (iy < h)) && (ix >= 0)) && (ix < w)) then (
  pixel := List.nth (List.nth (img) (iy)) (ix);
  );
  sx := (!sx + (List.nth (List.nth (!gx) (!ky)) (!kx) * !pixel));
  sy := (!sy + (List.nth (List.nth (!gy) (!ky)) (!kx) * !pixel));
  kx := (!kx + 1);
    with Continue -> ()
  done with Break -> ());
  ky := (!ky + 1);
    with Continue -> ()
  done with Break -> ());
  row := (List.append (!row) [(Obj.magic ((iabs (Obj.repr (!sx)) + iabs (Obj.repr (!sy)))) : int)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!row) : int list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)

and get_neighbors_pixel img x y =
  let __ret = ref ([] : (int) list) in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let neighbors = ref (([] : (int) list)) in
  let dy = ref (-(1)) in
  (try while (!dy <= 1) do
    try
  let dx = ref (-(1)) in
  (try while (!dx <= 1) do
    try
  if not (((!dx = 0) && (!dy = 0))) then (
  let ny = (y + !dy) in
  let nx = (x + !dx) in
  let val_ = ref (0) in
  if ((((ny >= 0) && (ny < h)) && (nx >= 0)) && (nx < w)) then (
  val_ := List.nth (List.nth (img) (ny)) (nx);
  );
  neighbors := (List.append (!neighbors) [(Obj.magic (!val_) : int)]);
  );
  dx := (!dx + 1);
    with Continue -> ()
  done with Break -> ());
  dy := (!dy + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!neighbors) : int list); raise Return
  with Return -> !__ret)

and pow2 e =
  let __ret = ref 0 in
  (try
  let e = (Obj.magic e : int) in
  let r = ref (1) in
  let i = ref (0) in
  (try while (!i < e) do
    try
  r := (!r * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and local_binary_value img x y =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let center = List.nth (List.nth (img) (y)) (x) in
  let neighbors = ref (get_neighbors_pixel (img) (Obj.repr (x)) (Obj.repr (y))) in
  let v = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  if (List.nth (!neighbors) (!i) >= center) then (
  v := (!v + pow2 (Obj.repr (!i)));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!v) : int); raise Return
  with Return -> !__ret)

and local_binary_pattern img =
  let __ret = ref ([] : (int list) list) in
  (try
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let out = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  row := (List.append (!row) [(Obj.magic (local_binary_value (img) (Obj.repr (!x)) (Obj.repr (!y))) : int)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!row) : int list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)


let img = ref ([[52; 55; 61]; [62; 59; 55]; [63; 65; 66]])
let negative = ref (convert_to_negative (!img))
let contrast = ref (change_contrast (!img) (Obj.repr (110)))
let kernel = ref (gen_gaussian_kernel (Obj.repr (3)) (Obj.repr (1.0)))
let laplace = ref ([[0.25; 0.5; 0.25]; [0.5; (-.(3.0)); 0.5]; [0.25; 0.5; 0.25]])
let convolved = ref (img_convolve (!img) (!laplace))
let medianed = ref (median_filter (!img) (Obj.repr (3)))
let sobel = ref (sobel_filter (!img))
let lbp_img = ref (local_binary_pattern (!img))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list !negative);
  print_endline (__show_list !contrast);
  print_endline (__show_list !kernel);
  print_endline (__show_list !convolved);
  print_endline (__show_list !medianed);
  print_endline (__show_list !sobel);
  print_endline (__show_list !lbp_img);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()