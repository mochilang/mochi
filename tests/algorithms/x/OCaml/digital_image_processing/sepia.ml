(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec normalize value =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  if (value > 255) then (
  __ret := (Obj.magic (255) : int); raise Return
  );
  __ret := (Obj.magic (value) : int); raise Return
  with Return -> !__ret)

and to_grayscale blue green red =
  let __ret = ref 0 in
  (try
  let blue = (Obj.magic blue : int) in
  let green = (Obj.magic green : int) in
  let red = (Obj.magic red : int) in
  let gs = (((0.2126 *. float_of_int (red)) +. (0.587 *. float_of_int (green))) +. (0.114 *. float_of_int (blue))) in
  __ret := (Obj.magic (int_of_float (gs)) : int); raise Return
  with Return -> !__ret)

and make_sepia img factor =
  let __ret = ref ([] : (int list list) list) in
  (try
  let factor = (Obj.magic factor : int) in
  let pixel_h = List.length (!img) in
  let pixel_v = List.length (List.nth (!img) (0)) in
  let i = ref (0) in
  (try while (!i < pixel_h) do
    try
  let j = ref (0) in
  (try while (!j < pixel_v) do
    try
  let pixel = ref (List.nth (List.nth (!img) (!i)) (!j)) in
  let grey = to_grayscale (Obj.repr (List.nth (!pixel) (0))) (Obj.repr (List.nth (!pixel) (1))) (Obj.repr (List.nth (!pixel) (2))) in
  img := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then [normalize (Obj.repr (grey)); normalize (Obj.repr ((grey + factor))); normalize (Obj.repr ((grey + (2 * factor))))] else __x) (List.nth (!img) (!i))) else __x) (!img));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!img) : int list list list); raise Return
  with Return -> !__ret)


let image = ref ([[[10; 20; 30]; [40; 50; 60]]; [[70; 80; 90]; [200; 150; 100]]])
let sepia = ref (make_sepia (image) (Obj.repr (20)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!sepia)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()