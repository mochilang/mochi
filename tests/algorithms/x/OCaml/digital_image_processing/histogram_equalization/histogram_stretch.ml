(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_list n value =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let value = (Obj.magic value : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (List.append (!res) [(Obj.magic (value) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and histogram_stretch image =
  let __ret = ref ([] : (int list) list) in
  (try
  let height = List.length (!image) in
  let width = List.length (List.nth (!image) (0)) in
  let hist = ref (make_list (Obj.repr (256)) (Obj.repr (0))) in
  let i = ref (0) in
  (try while (!i < height) do
    try
  let j = ref (0) in
  (try while (!j < width) do
    try
  let val_ = List.nth (List.nth (!image) (!i)) (!j) in
  hist := (List.mapi (fun __i __x -> if __i = val_ then (List.nth (!hist) (val_) + 1) else __x) (!hist));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let mapping = ref (make_list (Obj.repr (256)) (Obj.repr (0))) in
  let cumulative = ref (0) in
  let total = (height * width) in
  let h = ref (0) in
  (try while (!h < 256) do
    try
  cumulative := (!cumulative + List.nth (!hist) (!h));
  mapping := (List.mapi (fun __i __x -> if __i = !h then ((255 * !cumulative) / total) else __x) (!mapping));
  h := (!h + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < height) do
    try
  let j = ref (0) in
  (try while (!j < width) do
    try
  let val_ = List.nth (List.nth (!image) (!i)) (!j) in
  image := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then List.nth (!mapping) (val_) else __x) (List.nth (!image) (!i))) else __x) (!image));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!image) : int list list); raise Return
  with Return -> !__ret)

and print_image image =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (image)) do
    try
  print_endline (__show_list (List.nth (image) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let img = ref ([[52; 55; 61]; [59; 79; 61]; [85; 76; 62]])
let result = ref (histogram_stretch (img))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_image (!result));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()