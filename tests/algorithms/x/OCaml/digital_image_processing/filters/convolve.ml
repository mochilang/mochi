(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pad_edge image pad_size =
  let __ret = ref ([] : (int list) list) in
  (try
  let pad_size = (Obj.magic pad_size : int) in
  let height = List.length (image) in
  let width = List.length (List.nth (image) (0)) in
  let new_height = (height + (pad_size * 2)) in
  let new_width = (width + (pad_size * 2)) in
  let padded = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < new_height) do
    try
  let row = ref (([] : (int) list)) in
  let src_i = ref (!i) in
  if (!src_i < pad_size) then (
  src_i := 0;
  );
  if (!src_i >= (height + pad_size)) then (
  src_i := (height - 1);
  ) else (
  src_i := (!src_i - pad_size);
  );
  let j = ref (0) in
  (try while (!j < new_width) do
    try
  let src_j = ref (!j) in
  if (!src_j < pad_size) then (
  src_j := 0;
  );
  if (!src_j >= (width + pad_size)) then (
  src_j := (width - 1);
  ) else (
  src_j := (!src_j - pad_size);
  );
  row := (List.append (!row) [(Obj.magic (List.nth (List.nth (image) (!src_i)) (!src_j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  padded := (List.append (!padded) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!padded) : int list list); raise Return
  with Return -> !__ret)

and im2col image block_h block_w =
  let __ret = ref ([] : (int list) list) in
  (try
  let block_h = (Obj.magic block_h : int) in
  let block_w = (Obj.magic block_w : int) in
  let rows = List.length (image) in
  let cols = List.length (List.nth (image) (0)) in
  let dst_height = ((rows - block_h) + 1) in
  let dst_width = ((cols - block_w) + 1) in
  let image_array = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < dst_height) do
    try
  let j = ref (0) in
  (try while (!j < dst_width) do
    try
  let window = ref (([] : (int) list)) in
  let bi = ref (0) in
  (try while (!bi < block_h) do
    try
  let bj = ref (0) in
  (try while (!bj < block_w) do
    try
  window := (List.append (!window) [(Obj.magic (List.nth (List.nth (image) ((!i + !bi))) ((!j + !bj))) : int)]);
  bj := (!bj + 1);
    with Continue -> ()
  done with Break -> ());
  bi := (!bi + 1);
    with Continue -> ()
  done with Break -> ());
  image_array := (List.append (!image_array) [(Obj.magic (!window) : int list)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!image_array) : int list list); raise Return
  with Return -> !__ret)

and flatten matrix =
  let __ret = ref ([] : (int) list) in
  (try
  let out = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (matrix)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (List.nth (matrix) (!i))) do
    try
  out := (List.append (!out) [(Obj.magic (List.nth (List.nth (matrix) (!i)) (!j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list); raise Return
  with Return -> !__ret)

and dot a b =
  let __ret = ref 0 in
  (try
  let sum = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  sum := (!sum + (List.nth (a) (!i) * List.nth (b) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : int); raise Return
  with Return -> !__ret)

and img_convolve image kernel =
  let __ret = ref ([] : (int list) list) in
  (try
  let height = List.length (image) in
  let width = List.length (List.nth (image) (0)) in
  let k_size = List.length (kernel) in
  let pad_size = (k_size / 2) in
  let padded = ref (pad_edge (image) (Obj.repr (pad_size))) in
  let image_array = ref (im2col (!padded) (Obj.repr (k_size)) (Obj.repr (k_size))) in
  let kernel_flat = ref (flatten (kernel)) in
  let dst = ref (([] : (int list) list)) in
  let idx = ref (0) in
  let i = ref (0) in
  (try while (!i < height) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < width) do
    try
  let val_ = dot (List.nth (!image_array) (!idx)) (!kernel_flat) in
  row := (List.append (!row) [(Obj.magic (val_) : int)]);
  idx := (!idx + 1);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  dst := (List.append (!dst) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!dst) : int list list); raise Return
  with Return -> !__ret)

and print_matrix m =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (m) (!i))) do
    try
  if (!j > 0) then (
  line := (!line ^ " ");
  );
  line := (!line ^ (string_of_int (List.nth (List.nth (m) (!i)) (!j))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let image = ref ([[1; 2; 3; 0; 0]; [4; 5; 6; 0; 0]; [7; 8; 9; 0; 0]; [0; 0; 0; 0; 0]; [0; 0; 0; 0; 0]])
let laplace_kernel = ref ([[0; 1; 0]; [1; -(4); 1]; [0; 1; 0]])
let result = ref (img_convolve (!image) (!laplace_kernel))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_matrix (!result));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()