(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec insertion_sort a =
  let __ret = ref ([] : (int) list) in
  (try
  let i = ref (1) in
  (try while (!i < List.length (!a)) do
    try
  let key = List.nth (!a) (!i) in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && (List.nth (!a) (!j) > key)) do
    try
  a := (List.mapi (fun __i __x -> if __i = (!j + 1) then List.nth (!a) (!j) else __x) (!a));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  a := (List.mapi (fun __i __x -> if __i = (!j + 1) then key else __x) (!a));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : int list); raise Return
  with Return -> !__ret)

and median_filter gray_img mask =
  let __ret = ref ([] : (int list) list) in
  (try
  let mask = (Obj.magic mask : int) in
  let rows = List.length (gray_img) in
  let cols = List.length (List.nth (gray_img) (0)) in
  let bd = (mask / 2) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (List.append (!result) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := bd;
  (try while (!i < (rows - bd)) do
    try
  let j = ref (bd) in
  (try while (!j < (cols - bd)) do
    try
  let kernel = ref (([] : (int) list)) in
  let x = ref ((!i - bd)) in
  (try while (!x <= (!i + bd)) do
    try
  let y = ref ((!j - bd)) in
  (try while (!y <= (!j + bd)) do
    try
  kernel := (List.append (!kernel) [(Obj.magic (List.nth (List.nth (gray_img) (!x)) (!y)) : int)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  kernel := insertion_sort (kernel);
  let idx = ((mask * mask) / 2) in
  result := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then List.nth (!kernel) (idx) else __x) (List.nth (!result) (!i))) else __x) (!result));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let img = ref ([[10; 10; 10; 10; 10]; [10; 255; 10; 255; 10]; [10; 10; 10; 10; 10]; [10; 255; 10; 255; 10]; [10; 10; 10; 10; 10]]) in
  let filtered = ref (median_filter (!img) (Obj.repr (3))) in
  print_endline (__show_list !filtered);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()