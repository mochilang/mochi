(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec expApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let sum = ref (1.0) in
  let term = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 10) do
    try
  term := ((!term *. x) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and gen_gaussian_kernel k_size sigma =
  let __ret = ref ([] : (float list) list) in
  (try
  let k_size = (Obj.magic k_size : int) in
  let sigma = (Obj.magic sigma : float) in
  let center = (k_size / 2) in
  let kernel = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < k_size) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < k_size) do
    try
  let x = float_of_int ((!i - center)) in
  let y = float_of_int ((!j - center)) in
  let exponent = (-.((((x *. x) +. (y *. y)) /. ((2.0 *. sigma) *. sigma)))) in
  let value = ((1.0 /. ((2.0 *. _pi) *. sigma)) *. expApprox (Obj.repr (exponent))) in
  row := (List.append (!row) [(Obj.magic (value) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  kernel := (List.append (!kernel) [(Obj.magic (!row) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!kernel) : float list list); raise Return
  with Return -> !__ret)

and gaussian_filter image k_size sigma =
  let __ret = ref ([] : (int list) list) in
  (try
  let k_size = (Obj.magic k_size : int) in
  let sigma = (Obj.magic sigma : float) in
  let height = List.length (image) in
  let width = List.length (List.nth (image) (0)) in
  let dst_height = ((height - k_size) + 1) in
  let dst_width = ((width - k_size) + 1) in
  let kernel = ref (gen_gaussian_kernel (Obj.repr (k_size)) (Obj.repr (sigma))) in
  let dst = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < dst_height) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < dst_width) do
    try
  let sum = ref (0.0) in
  let ki = ref (0) in
  (try while (!ki < k_size) do
    try
  let kj = ref (0) in
  (try while (!kj < k_size) do
    try
  sum := (!sum +. (float_of_int (List.nth (List.nth (image) ((!i + !ki))) ((!j + !kj))) *. List.nth (List.nth (!kernel) (!ki)) (!kj)));
  kj := (!kj + 1);
    with Continue -> ()
  done with Break -> ());
  ki := (!ki + 1);
    with Continue -> ()
  done with Break -> ());
  row := (List.append (!row) [(Obj.magic ((Obj.magic !sum : int)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  dst := (List.append (!dst) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!dst) : int list list); raise Return
  with Return -> !__ret)

and print_image image =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (image)) do
    try
  print_endline (__show_list (List.nth (image) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let img = ref ([[52; 55; 61; 59; 79]; [62; 59; 55; 104; 94]; [63; 65; 66; 113; 144]; [68; 70; 70; 126; 154]; [70; 72; 69; 128; 155]])
let gaussian3 = ref (gaussian_filter (!img) (Obj.repr (3)) (Obj.repr (1.0)))
let gaussian5 = ref (gaussian_filter (!img) (Obj.repr (5)) (Obj.repr (0.8)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_image (!gaussian3));
  ignore (print_image (!gaussian5));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()