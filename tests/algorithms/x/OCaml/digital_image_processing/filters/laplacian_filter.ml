(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_matrix rows cols value =
  let __ret = ref ([] : (int list) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let value = (Obj.magic value : int) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  row := (List.append (!row) [(Obj.magic (value) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (List.append (!result) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and my_laplacian src ksize =
  let __ret = ref ([] : (int list) list) in
  (try
  let ksize = (Obj.magic ksize : int) in
  let kernel = ref (([] : (int list) list)) in
  if (ksize = 1) then (
  kernel := [[0; -(1); 0]; [-(1); 4; -(1)]; [0; -(1); 0]];
  ) else (
  if (ksize = 3) then (
  kernel := [[0; 1; 0]; [1; -(4); 1]; [0; 1; 0]];
  ) else (
  if (ksize = 5) then (
  kernel := [[0; 0; -(1); 0; 0]; [0; -(1); -(2); -(1); 0]; [-(1); -(2); 16; -(2); -(1)]; [0; -(1); -(2); -(1); 0]; [0; 0; -(1); 0; 0]];
  ) else (
  if (ksize = 7) then (
  kernel := [[0; 0; 0; -(1); 0; 0; 0]; [0; 0; -(2); -(3); -(2); 0; 0]; [0; -(2); -(7); -(10); -(7); -(2); 0]; [-(1); -(3); -(10); 68; -(10); -(3); -(1)]; [0; -(2); -(7); -(10); -(7); -(2); 0]; [0; 0; -(2); -(3); -(2); 0; 0]; [0; 0; 0; -(1); 0; 0; 0]];
  ) else (
  (failwith ("ksize must be in (1, 3, 5, 7)"));
  );
  );
  );
  );
  let rows = List.length (src) in
  let cols = List.length (List.nth (src) (0)) in
  let k = List.length (!kernel) in
  let pad = (k / 2) in
  let output = ref (make_matrix (Obj.repr (rows)) (Obj.repr (cols)) (Obj.repr (0))) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let j = ref (0) in
  (try while (!j < cols) do
    try
  let sum = ref (0) in
  let ki = ref (0) in
  (try while (!ki < k) do
    try
  let kj = ref (0) in
  (try while (!kj < k) do
    try
  let ii = ((!i + !ki) - pad) in
  let jj = ((!j + !kj) - pad) in
  let val_ = ref (0) in
  if ((((ii >= 0) && (ii < rows)) && (jj >= 0)) && (jj < cols)) then (
  val_ := List.nth (List.nth (src) (ii)) (jj);
  );
  sum := (!sum + (!val_ * List.nth (List.nth (!kernel) (!ki)) (!kj)));
  kj := (!kj + 1);
    with Continue -> ()
  done with Break -> ());
  ki := (!ki + 1);
    with Continue -> ()
  done with Break -> ());
  output := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then !sum else __x) (List.nth (!output) (!i))) else __x) (!output));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : int list list); raise Return
  with Return -> !__ret)


let image = ref ([[0; 0; 0; 0; 0]; [0; 10; 10; 10; 0]; [0; 10; 10; 10; 0]; [0; 10; 10; 10; 0]; [0; 0; 0; 0; 0]])
let result = ref (my_laplacian (!image) (Obj.repr (3)))
let r = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!r < List.length (!result)) do
    try
  let row_str = ref ("[") in
  let c = ref (0) in
  (try while (!c < List.length (List.nth (!result) (!r))) do
    try
  row_str := (!row_str ^ (string_of_int (List.nth (List.nth (!result) (!r)) (!c))));
  if ((!c + 1) < List.length (List.nth (!result) (!r))) then (
  row_str := (!row_str ^ ", ");
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  row_str := (!row_str ^ "]");
  print_endline (!row_str);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()