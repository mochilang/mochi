(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec to_radians deg =
  let __ret = ref 0.0 in
  (try
  let deg = (Obj.magic deg : float) in
  __ret := (Obj.magic (((deg *. _pi) /. 180.0)) : float); raise Return
  with Return -> !__ret)

and sin_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = (2.0 *. float_of_int (!i)) in
  let k2 = (k1 +. 1.0) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cos_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = ((2.0 *. float_of_int (!i)) -. 1.0) in
  let k2 = (2.0 *. float_of_int (!i)) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and exp_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1.0) in
  (try while (!i < 20.0) do
    try
  term := ((!term *. x) /. !i);
  sum := (!sum +. !term);
  i := (!i +. 1.0);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and gabor_filter_kernel ksize sigma theta lambd gamma psi =
  let __ret = ref ([] : (float list) list) in
  (try
  let ksize = (Obj.magic ksize : int) in
  let sigma = (Obj.magic sigma : float) in
  let theta = (Obj.magic theta : float) in
  let lambd = (Obj.magic lambd : float) in
  let gamma = (Obj.magic gamma : float) in
  let psi = (Obj.magic psi : float) in
  let size = ref (ksize) in
  if (((!size mod 2 + 2) mod 2) = 0) then (
  size := (!size + 1);
  );
  let gabor = ref (([] : (float list) list)) in
  let y = ref (0) in
  (try while (!y < !size) do
    try
  let row = ref (([] : (float) list)) in
  let x = ref (0) in
  (try while (!x < !size) do
    try
  let px = float_of_int ((!x - (!size / 2))) in
  let py = float_of_int ((!y - (!size / 2))) in
  let rad = to_radians (Obj.repr (theta)) in
  let cos_theta = cos_taylor (Obj.repr (rad)) in
  let sin_theta = sin_taylor (Obj.repr (rad)) in
  let x_rot = ((cos_theta *. px) +. (sin_theta *. py)) in
  let y_rot = (((-.(sin_theta)) *. px) +. (cos_theta *. py)) in
  let exponent = ((-.(((x_rot *. x_rot) +. (((gamma *. gamma) *. y_rot) *. y_rot)))) /. ((2.0 *. sigma) *. sigma)) in
  let value = (exp_taylor (Obj.repr (exponent)) *. cos_taylor (Obj.repr (((((2.0 *. _pi) *. x_rot) /. lambd) +. psi)))) in
  row := (List.append (!row) [(Obj.magic (value) : float)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  gabor := (List.append (!gabor) [(Obj.magic (!row) : float list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!gabor) : float list list); raise Return
  with Return -> !__ret)


let kernel = ref (gabor_filter_kernel (Obj.repr (3)) (Obj.repr (8.0)) (Obj.repr (0.0)) (Obj.repr (10.0)) (Obj.repr (0.0)) (Obj.repr (0.0)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list !kernel);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()