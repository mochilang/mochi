(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and atanApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x > 1.0) then (
  __ret := (Obj.magic (((_pi /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  if (x < (-.(1.0))) then (
  __ret := (Obj.magic ((((-.(_pi)) /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  __ret := (Obj.magic ((x /. (1.0 +. ((0.28 *. x) *. x)))) : float); raise Return
  with Return -> !__ret)

and atan2Approx y x =
  let __ret = ref 0.0 in
  (try
  let y = (Obj.magic y : float) in
  let x = (Obj.magic x : float) in
  if (x = 0.0) then (
  if (y > 0.0) then (
  __ret := (Obj.magic ((_pi /. 2.0)) : float); raise Return
  );
  if (y < 0.0) then (
  __ret := (Obj.magic (((-.(_pi)) /. 2.0)) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let a = atanApprox (Obj.repr ((y /. x))) in
  if (x > 0.0) then (
  __ret := (Obj.magic (a) : float); raise Return
  );
  if (y >= 0.0) then (
  __ret := (Obj.magic ((a +. _pi)) : float); raise Return
  );
  __ret := (Obj.magic ((a -. _pi)) : float); raise Return
  with Return -> !__ret)

and zeros h w =
  let __ret = ref ([] : (float list) list) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let m = ref (([] : (float list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (float) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  row := (List.append (!row) [(Obj.magic (0.0) : float)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  m := (List.append (!m) [(Obj.magic (!row) : float list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : float list list); raise Return
  with Return -> !__ret)

and pad_edge img pad =
  let __ret = ref ([] : (float list) list) in
  (try
  let pad = (Obj.magic pad : int) in
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let out = ref (zeros (Obj.repr ((h + (pad * 2)))) (Obj.repr ((w + (pad * 2))))) in
  let y = ref (0) in
  (try while (!y < (h + (pad * 2))) do
    try
  let x = ref (0) in
  (try while (!x < (w + (pad * 2))) do
    try
  let sy = ref ((!y - pad)) in
  if (!sy < 0) then (
  sy := 0;
  );
  if (!sy >= h) then (
  sy := (h - 1);
  );
  let sx = ref ((!x - pad)) in
  if (!sx < 0) then (
  sx := 0;
  );
  if (!sx >= w) then (
  sx := (w - 1);
  );
  out := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then List.nth (List.nth (img) (!sy)) (!sx) else __x) (List.nth (!out) (!y))) else __x) (!out));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and img_convolve img kernel =
  let __ret = ref ([] : (float list) list) in
  (try
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let k = List.length (kernel) in
  let pad = (k / 2) in
  let padded = ref (pad_edge (img) (Obj.repr (pad))) in
  let out = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let x = ref (0) in
  (try while (!x < w) do
    try
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  let j = ref (0) in
  (try while (!j < k) do
    try
  sum := (!sum +. (List.nth (List.nth (!padded) ((!y + !i))) ((!x + !j)) *. float_of_int (List.nth (List.nth (kernel) (!i)) (!j))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then !sum else __x) (List.nth (!out) (!y))) else __x) (!out));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and abs_matrix mat =
  let __ret = ref ([] : (float list) list) in
  (try
  let h = List.length (mat) in
  let w = List.length (List.nth (mat) (0)) in
  let out = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let x = ref (0) in
  (try while (!x < w) do
    try
  let v = List.nth (List.nth (mat) (!y)) (!x) in
  if (v < 0.0) then (
  out := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then (-.(v)) else __x) (List.nth (!out) (!y))) else __x) (!out));
  ) else (
  out := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then v else __x) (List.nth (!out) (!y))) else __x) (!out));
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and max_matrix mat =
  let __ret = ref 0.0 in
  (try
  let max_val = ref (List.nth (List.nth (mat) (0)) (0)) in
  let y = ref (0) in
  (try while (!y < List.length (mat)) do
    try
  let x = ref (0) in
  (try while (!x < List.length (List.nth (mat) (0))) do
    try
  if (List.nth (List.nth (mat) (!y)) (!x) > !max_val) then (
  max_val := List.nth (List.nth (mat) (!y)) (!x);
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_val) : float); raise Return
  with Return -> !__ret)

and scale_matrix mat factor =
  let __ret = ref ([] : (float list) list) in
  (try
  let factor = (Obj.magic factor : float) in
  let h = List.length (mat) in
  let w = List.length (List.nth (mat) (0)) in
  let out = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let x = ref (0) in
  (try while (!x < w) do
    try
  out := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then (List.nth (List.nth (mat) (!y)) (!x) *. factor) else __x) (List.nth (!out) (!y))) else __x) (!out));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and sobel_filter image =
  let __ret = ref ([] : (float list list) list) in
  (try
  let h = List.length (image) in
  let w = List.length (List.nth (image) (0)) in
  let img = ref (([] : (float list) list)) in
  let y0 = ref (0) in
  (try while (!y0 < h) do
    try
  let row = ref (([] : (float) list)) in
  let x0 = ref (0) in
  (try while (!x0 < w) do
    try
  row := (List.append (!row) [(Obj.magic (float_of_int (List.nth (List.nth (image) (!y0)) (!x0))) : float)]);
  x0 := (!x0 + 1);
    with Continue -> ()
  done with Break -> ());
  img := (List.append (!img) [(Obj.magic (!row) : float list)]);
  y0 := (!y0 + 1);
    with Continue -> ()
  done with Break -> ());
  let kernel_x = ref ([[-(1); 0; 1]; [-(2); 0; 2]; [-(1); 0; 1]]) in
  let kernel_y = ref ([[1; 2; 1]; [0; 0; 0]; [-(1); -(2); -(1)]]) in
  let dst_x = ref (abs_matrix (img_convolve (!img) (!kernel_x))) in
  let dst_y = ref (abs_matrix (img_convolve (!img) (!kernel_y))) in
  let max_x = max_matrix (!dst_x) in
  let max_y = max_matrix (!dst_y) in
  dst_x := scale_matrix (!dst_x) (Obj.repr ((255.0 /. max_x)));
  dst_y := scale_matrix (!dst_y) (Obj.repr ((255.0 /. max_y)));
  let mag = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let theta = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let x = ref (0) in
  (try while (!x < w) do
    try
  let gx = List.nth (List.nth (!dst_x) (!y)) (!x) in
  let gy = List.nth (List.nth (!dst_y) (!y)) (!x) in
  mag := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then sqrtApprox (Obj.repr (((gx *. gx) +. (gy *. gy)))) else __x) (List.nth (!mag) (!y))) else __x) (!mag));
  theta := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then atan2Approx (Obj.repr (gy)) (Obj.repr (gx)) else __x) (List.nth (!theta) (!y))) else __x) (!theta));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  let max_m = max_matrix (!mag) in
  mag := scale_matrix (!mag) (Obj.repr ((255.0 /. max_m)));
  __ret := (Obj.magic ([!mag; !theta]) : float list list list); raise Return
  with Return -> !__ret)

and print_matrix_int mat =
  let __ret = ref (Obj.magic 0) in
  (try
  let y = ref (0) in
  (try while (!y < List.length (mat)) do
    try
  let line = ref ("") in
  let x = ref (0) in
  (try while (!x < List.length (List.nth (mat) (!y))) do
    try
  line := (!line ^ (string_of_int ((Obj.magic List.nth (List.nth (mat) (!y)) (!x) : int))));
  if (!x < (List.length (List.nth (mat) (!y)) - 1)) then (
  line := (!line ^ " ");
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and print_matrix_float mat =
  let __ret = ref (Obj.magic 0) in
  (try
  let y = ref (0) in
  (try while (!y < List.length (mat)) do
    try
  let line = ref ("") in
  let x = ref (0) in
  (try while (!x < List.length (List.nth (mat) (!y))) do
    try
  line := (!line ^ (Printf.sprintf "%.16g" (List.nth (List.nth (mat) (!y)) (!x))));
  if (!x < (List.length (List.nth (mat) (!y)) - 1)) then (
  line := (!line ^ " ");
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let img = ref ([[10; 10; 10; 10; 10]; [10; 50; 50; 50; 10]; [10; 50; 80; 50; 10]; [10; 50; 50; 50; 10]; [10; 10; 10; 10; 10]]) in
  let res = ref (sobel_filter (!img)) in
  let mag = ref (List.nth (!res) (0)) in
  let theta = ref (List.nth (!res) (1)) in
  ignore (print_matrix_int (!mag));
  ignore (print_matrix_float (!theta));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()