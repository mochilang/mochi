(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_neighbors_pixel image x y center =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let center = (Obj.magic center : int) in
  if ((x < 0) || (y < 0)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if ((x >= List.length (image)) || (y >= List.length (List.nth (image) (0)))) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (List.nth (List.nth (image) (x)) (y) >= center) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and local_binary_value image x y =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let center = List.nth (List.nth (image) (x)) (y) in
  let powers = ref ([1; 2; 4; 8; 16; 32; 64; 128]) in
  let neighbors = ref ([get_neighbors_pixel (image) (Obj.repr ((x - 1))) (Obj.repr ((y + 1))) (Obj.repr (center)); get_neighbors_pixel (image) (Obj.repr (x)) (Obj.repr ((y + 1))) (Obj.repr (center)); get_neighbors_pixel (image) (Obj.repr ((x - 1))) (Obj.repr (y)) (Obj.repr (center)); get_neighbors_pixel (image) (Obj.repr ((x + 1))) (Obj.repr ((y + 1))) (Obj.repr (center)); get_neighbors_pixel (image) (Obj.repr ((x + 1))) (Obj.repr (y)) (Obj.repr (center)); get_neighbors_pixel (image) (Obj.repr ((x + 1))) (Obj.repr ((y - 1))) (Obj.repr (center)); get_neighbors_pixel (image) (Obj.repr (x)) (Obj.repr ((y - 1))) (Obj.repr (center)); get_neighbors_pixel (image) (Obj.repr ((x - 1))) (Obj.repr ((y - 1))) (Obj.repr (center))]) in
  let sum = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  sum := (!sum + (List.nth (!neighbors) (!i) * List.nth (!powers) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : int); raise Return
  with Return -> !__ret)


let image = ref ([[10; 10; 10; 10; 10]; [10; 20; 30; 20; 10]; [10; 30; 40; 30; 10]; [10; 20; 30; 20; 10]; [10; 10; 10; 10; 10]])
let i = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!i < List.length (!image)) do
    try
  let j = ref (0) in
  let line = ref ("") in
  (try while (!j < List.length (List.nth (!image) (0))) do
    try
  let value = local_binary_value (!image) (Obj.repr (!i)) (Obj.repr (!j)) in
  line := (!line ^ (string_of_int (value)));
  if (!j < (List.length (List.nth (!image) (0)) - 1)) then (
  line := (!line ^ " ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()