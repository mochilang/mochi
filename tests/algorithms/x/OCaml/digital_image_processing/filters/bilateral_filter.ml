(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and expApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 10) do
    try
  term := ((!term *. x) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and vec_gaussian mat variance =
  let __ret = ref ([] : (float list) list) in
  (try
  let variance = (Obj.magic variance : float) in
  let i = ref (0) in
  let out = ref (([] : (float list) list)) in
  (try while (!i < List.length (mat)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (mat) (!i))) do
    try
  let v = List.nth (List.nth (mat) (!i)) (!j) in
  let e = ((-.((v *. v))) /. (2.0 *. variance)) in
  row := (!row @ [expApprox (Obj.repr (e))]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  out := (!out @ [!row]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and get_slice img x y kernel_size =
  let __ret = ref ([] : (float list) list) in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let kernel_size = (Obj.magic kernel_size : int) in
  let half = (kernel_size / 2) in
  let i = ref ((x - half)) in
  let slice = ref (([] : (float list) list)) in
  (try while (!i <= (x + half)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref ((y - half)) in
  (try while (!j <= (y + half)) do
    try
  row := (!row @ [List.nth (List.nth (img) (!i)) (!j)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  slice := (!slice @ [!row]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!slice) : float list list); raise Return
  with Return -> !__ret)

and get_gauss_kernel kernel_size spatial_variance =
  let __ret = ref ([] : (float list) list) in
  (try
  let kernel_size = (Obj.magic kernel_size : int) in
  let spatial_variance = (Obj.magic spatial_variance : float) in
  let arr = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < kernel_size) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < kernel_size) do
    try
  let di = float_of_int ((!i - (kernel_size / 2))) in
  let dj = float_of_int ((!j - (kernel_size / 2))) in
  let dist = sqrtApprox (Obj.repr (((di *. di) +. (dj *. dj)))) in
  row := (!row @ [dist]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  arr := (!arr @ [!row]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (vec_gaussian (!arr) (Obj.repr (spatial_variance))) : float list list); raise Return
  with Return -> !__ret)

and elementwise_sub mat value =
  let __ret = ref ([] : (float list) list) in
  (try
  let value = (Obj.magic value : float) in
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (mat) (!i))) do
    try
  row := (!row @ [(List.nth (List.nth (mat) (!i)) (!j) -. value)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res @ [!row]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list list); raise Return
  with Return -> !__ret)

and elementwise_mul a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (a) (!i))) do
    try
  row := (!row @ [(List.nth (List.nth (a) (!i)) (!j) *. List.nth (List.nth (b) (!i)) (!j))]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res @ [!row]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list list); raise Return
  with Return -> !__ret)

and matrix_sum mat =
  let __ret = ref 0.0 in
  (try
  let total = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (List.nth (mat) (!i))) do
    try
  total := (!total +. List.nth (List.nth (mat) (!i)) (!j));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and bilateral_filter img spatial_variance intensity_variance kernel_size =
  let __ret = ref 0.0 in
  (try
  let spatial_variance = (Obj.magic spatial_variance : float) in
  let intensity_variance = (Obj.magic intensity_variance : float) in
  let kernel_size = (Obj.magic kernel_size : int) in
  let gauss_ker = ref (get_gauss_kernel (Obj.repr (kernel_size)) (Obj.repr (spatial_variance))) in
  let img_s = ref (img) in
  let center = List.nth (List.nth (!img_s) ((kernel_size / 2))) ((kernel_size / 2)) in
  let img_i = ref (elementwise_sub (!img_s) (Obj.repr (center))) in
  let img_ig = ref (vec_gaussian (!img_i) (Obj.repr (intensity_variance))) in
  let weights = ref (elementwise_mul (!gauss_ker) (!img_ig)) in
  let vals = ref (elementwise_mul (!img_s) (!weights)) in
  let sum_weights = matrix_sum (!weights) in
  let val_ = ref (0.0) in
  if (sum_weights <> 0.0) then (
  val_ := (matrix_sum (!vals) /. sum_weights);
  );
  __ret := (Obj.magic (!val_) : float); raise Return
  with Return -> !__ret)


let img = ref ([[0.2; 0.3; 0.4]; [0.3; 0.4; 0.5]; [0.4; 0.5; 0.6]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  let result = bilateral_filter (!img) (Obj.repr (1.0)) (Obj.repr (1.0)) (Obj.repr (3)) in
  print_endline (Printf.sprintf "%.15f" (result));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()