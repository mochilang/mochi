(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec rgb_to_gray rgb =
  let __ret = ref ([] : (float list) list) in
  (try
  let gray = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (rgb)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (rgb) (!i))) do
    try
  let r = float_of_int (List.nth (List.nth (List.nth (rgb) (!i)) (!j)) (0)) in
  let g = float_of_int (List.nth (List.nth (List.nth (rgb) (!i)) (!j)) (1)) in
  let b = float_of_int (List.nth (List.nth (List.nth (rgb) (!i)) (!j)) (2)) in
  let value = (((0.2989 *. r) +. (0.587 *. g)) +. (0.114 *. b)) in
  row := (List.append (!row) [(Obj.magic (value) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  gray := (List.append (!gray) [(Obj.magic (!row) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!gray) : float list list); raise Return
  with Return -> !__ret)

and gray_to_binary gray =
  let __ret = ref ([] : (bool list) list) in
  (try
  let binary = ref (([] : (bool list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (gray)) do
    try
  let row = ref (([] : (bool) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (gray) (!i))) do
    try
  row := (List.append (!row) [(Obj.magic (((List.nth (List.nth (gray) (!i)) (!j) > 127.0) && (List.nth (List.nth (gray) (!i)) (!j) <= 255.0))) : bool)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  binary := (List.append (!binary) [(Obj.magic (!row) : bool list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!binary) : bool list list); raise Return
  with Return -> !__ret)

and erosion image kernel =
  let __ret = ref ([] : (bool list) list) in
  (try
  let h = List.length (image) in
  let w = List.length (List.nth (image) (0)) in
  let k_h = List.length (kernel) in
  let k_w = List.length (List.nth (kernel) (0)) in
  let pad_y = (k_h / 2) in
  let pad_x = (k_w / 2) in
  let padded = ref (([] : (bool list) list)) in
  let y = ref (0) in
  (try while (!y < (h + (2 * pad_y))) do
    try
  let row = ref (([] : (bool) list)) in
  let x = ref (0) in
  (try while (!x < (w + (2 * pad_x))) do
    try
  row := (List.append (!row) [(Obj.magic (false) : bool)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  padded := (List.append (!padded) [(Obj.magic (!row) : bool list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  y := 0;
  (try while (!y < h) do
    try
  let x = ref (0) in
  (try while (!x < w) do
    try
  padded := (List.mapi (fun __i __x -> if __i = (pad_y + !y) then (List.mapi (fun __i __x -> if __i = (pad_x + !x) then List.nth (List.nth (image) (!y)) (!x) else __x) (List.nth (!padded) ((pad_y + !y)))) else __x) (!padded));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  let output = ref (([] : (bool list) list)) in
  y := 0;
  (try while (!y < h) do
    try
  let row_out = ref (([] : (bool) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  let sum = ref (0) in
  let ky = ref (0) in
  (try while (!ky < k_h) do
    try
  let kx = ref (0) in
  (try while (!kx < k_w) do
    try
  if ((List.nth (List.nth (kernel) (!ky)) (!kx) = 1) && List.nth (List.nth (!padded) ((!y + !ky))) ((!x + !kx))) then (
  sum := (!sum + 1);
  );
  kx := (!kx + 1);
    with Continue -> ()
  done with Break -> ());
  ky := (!ky + 1);
    with Continue -> ()
  done with Break -> ());
  row_out := (List.append (!row_out) [(Obj.magic ((!sum = 5)) : bool)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  output := (List.append (!output) [(Obj.magic (!row_out) : bool list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : bool list list); raise Return
  with Return -> !__ret)


let rgb_img = ref ([[[127; 255; 0]]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (rgb_to_gray (!rgb_img))));
  let gray_img = ref ([[127.0; 255.0; 0.0]]) in
  print_endline ((__str (gray_to_binary (!gray_img))));
  let img1 = ref ([[true; true; false]]) in
  let kernel1 = ref ([[0; 1; 0]]) in
  print_endline ((__str (erosion (!img1) (!kernel1))));
  let img2 = ref ([[true; false; false]]) in
  let kernel2 = ref ([[1; 1; 0]]) in
  print_endline ((__str (erosion (!img2) (!kernel2))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()