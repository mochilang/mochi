(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec rgb_to_gray rgb =
  let __ret = ref ([] : (float list) list) in
  (try
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (rgb)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (rgb) (!i))) do
    try
  let r = List.nth (List.nth (List.nth (rgb) (!i)) (!j)) (0) in
  let g = List.nth (List.nth (List.nth (rgb) (!i)) (!j)) (1) in
  let b = List.nth (List.nth (List.nth (rgb) (!i)) (!j)) (2) in
  let gray = (((0.2989 *. (1.0 *. float_of_int (r))) +. (0.587 *. (1.0 *. float_of_int (g)))) +. (0.114 *. (1.0 *. float_of_int (b)))) in
  row := (List.append (!row) [(Obj.magic (gray) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (List.append (!result) [(Obj.magic (!row) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and gray_to_binary gray =
  let __ret = ref ([] : (int list) list) in
  (try
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (gray)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (gray) (!i))) do
    try
  let v = List.nth (List.nth (gray) (!i)) (!j) in
  if ((v > 127.0) && (v <= 255.0)) then (
  row := (List.append (!row) [(Obj.magic (1) : int)]);
  ) else (
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (List.append (!result) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and dilation image kernel =
  let __ret = ref ([] : (int list) list) in
  (try
  let img_h = List.length (image) in
  let img_w = List.length (List.nth (image) (0)) in
  let k_h = List.length (kernel) in
  let k_w = List.length (List.nth (kernel) (0)) in
  let pad_h = (k_h / 2) in
  let pad_w = (k_w / 2) in
  let p_h = (img_h + (2 * pad_h)) in
  let p_w = (img_w + (2 * pad_w)) in
  let padded = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < p_h) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < p_w) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  padded := (List.append (!padded) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < img_h) do
    try
  let j = ref (0) in
  (try while (!j < img_w) do
    try
  padded := (List.mapi (fun __i __x -> if __i = (pad_h + !i) then (List.mapi (fun __i __x -> if __i = (pad_w + !j) then List.nth (List.nth (image) (!i)) (!j) else __x) (List.nth (!padded) ((pad_h + !i)))) else __x) (!padded));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let output = ref (([] : (int list) list)) in
  i := 0;
  (try while (!i < img_h) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < img_w) do
    try
  let sum = ref (0) in
  let ky = ref (0) in
  (try while (!ky < k_h) do
    try
  let kx = ref (0) in
  (try while (!kx < k_w) do
    try
  if (List.nth (List.nth (kernel) (!ky)) (!kx) = 1) then (
  sum := (!sum + List.nth (List.nth (!padded) ((!i + !ky))) ((!j + !kx)));
  );
  kx := (!kx + 1);
    with Continue -> ()
  done with Break -> ());
  ky := (!ky + 1);
    with Continue -> ()
  done with Break -> ());
  if (!sum > 0) then (
  row := (List.append (!row) [(Obj.magic (1) : int)]);
  ) else (
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  output := (List.append (!output) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : int list list); raise Return
  with Return -> !__ret)

and print_float_matrix mat =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (mat) (!i))) do
    try
  line := (!line ^ (Printf.sprintf "%.16g" (List.nth (List.nth (mat) (!i)) (!j))));
  if (!j < (List.length (List.nth (mat) (!i)) - 1)) then (
  line := (!line ^ " ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and print_int_matrix mat =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (mat) (!i))) do
    try
  line := (!line ^ (string_of_int (List.nth (List.nth (mat) (!i)) (!j))));
  if (!j < (List.length (List.nth (mat) (!i)) - 1)) then (
  line := (!line ^ " ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let rgb_example = ref ([[[127; 255; 0]]]) in
  ignore (print_float_matrix (rgb_to_gray (!rgb_example)));
  let gray_example = ref ([[26.0; 255.0; 14.0]; [5.0; 147.0; 20.0]; [1.0; 200.0; 0.0]]) in
  ignore (print_int_matrix (gray_to_binary (!gray_example)));
  let binary_image = ref ([[0; 1; 0]; [0; 1; 0]; [0; 1; 0]]) in
  let kernel = ref ([[0; 1; 0]; [1; 1; 1]; [0; 1; 0]]) in
  ignore (print_int_matrix (dilation (!binary_image) (!kernel)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()