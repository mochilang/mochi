(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec zeros3d h w c =
  let __ret = ref ([] : (int list list) list) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let c = (Obj.magic c : int) in
  let arr = ref (([] : (int list list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (int list) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  let pixel = ref (([] : (int) list)) in
  let k = ref (0) in
  (try while (!k < c) do
    try
  pixel := (List.append (!pixel) [(Obj.magic (0) : int)]);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (List.append (!row) [(Obj.magic (!pixel) : int list)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  arr := (List.append (!arr) [(Obj.magic (!row) : int list list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list list list); raise Return
  with Return -> !__ret)

and resize_nn img dst_w dst_h =
  let __ret = ref ([] : (int list list) list) in
  (try
  let dst_w = (Obj.magic dst_w : int) in
  let dst_h = (Obj.magic dst_h : int) in
  let src_h = List.length (img) in
  let src_w = List.length (List.nth (img) (0)) in
  let channels = List.length (List.nth (List.nth (img) (0)) (0)) in
  let ratio_x = (float_of_int (src_w) /. float_of_int (dst_w)) in
  let ratio_y = (float_of_int (src_h) /. float_of_int (dst_h)) in
  let out = ref (zeros3d (Obj.repr (dst_h)) (Obj.repr (dst_w)) (Obj.repr (channels))) in
  let i = ref (0) in
  (try while (!i < dst_h) do
    try
  let j = ref (0) in
  (try while (!j < dst_w) do
    try
  let src_x = (Obj.magic (ratio_x *. float_of_int (!j)) : int) in
  let src_y = (Obj.magic (ratio_y *. float_of_int (!i)) : int) in
  out := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then List.nth (List.nth (img) (src_y)) (src_x) else __x) (List.nth (!out) (!i))) else __x) (!out));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let img = ref ([[[0; 0; 0]; [255; 255; 255]]; [[255; 0; 0]; [0; 255; 0]]]) in
  let resized = ref (resize_nn (!img) (Obj.repr (4)) (Obj.repr (4))) in
  print_endline (__show_list !resized);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()