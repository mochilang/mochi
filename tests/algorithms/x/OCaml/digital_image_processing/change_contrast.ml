(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec change_contrast img level =
  let __ret = ref ([] : (int list) list) in
  (try
  let level = (Obj.magic level : int) in
  let factor = ((259.0 *. (float_of_int (level) +. 255.0)) /. (255.0 *. (259.0 -. float_of_int (level)))) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (img)) do
    try
  let row = ref (List.nth (img) (!i)) in
  let new_row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  let c = List.nth (!row) (!j) in
  let contrasted = (Obj.magic (128.0 +. (factor *. (float_of_int (c) -. 128.0))) : int) in
  let clamped = if (contrasted < 0) then 0 else if (contrasted > 255) then 255 else contrasted in
  new_row := (List.append (!new_row) [(Obj.magic (clamped) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (List.append (!result) [(Obj.magic (!new_row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and print_image img =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (img)) do
    try
  let row = ref (List.nth (img) (!i)) in
  let j = ref (0) in
  let line = ref ("") in
  (try while (!j < List.length (!row)) do
    try
  line := ((!line ^ (string_of_int (List.nth (!row) (!j)))) ^ " ");
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let image = ref ([[100; 125; 150]; [175; 200; 225]; [50; 75; 100]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Original image:");
  ignore (print_image (!image));
  let contrasted = ref (change_contrast (!image) (Obj.repr (170))) in
  print_endline ("After contrast:");
  ignore (print_image (!contrasted));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()