(* Generated by Mochi transpiler v0.10.73 on 2025-08-26 08:36 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _reduced_planck_constant = 0.0000000000000000000000000000000001054571817
let _speed_of_light = 300000000.0
let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 100) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and casimir_force force area distance =
  let __ret = ref ([] : (string * float) list) in
  (try
  let force = (Obj.magic force : float) in
  let area = (Obj.magic area : float) in
  let distance = (Obj.magic distance : float) in
  let zero_count = ref (0) in
  if (force = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (area = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (distance = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (!zero_count <> 1) then (
  (failwith ("One and only one argument must be 0"));
  );
  if (force < 0.0) then (
  (failwith ("Magnitude of force can not be negative"));
  );
  if (distance < 0.0) then (
  (failwith ("Distance can not be negative"));
  );
  if (area < 0.0) then (
  (failwith ("Area can not be negative"));
  );
  if (force = 0.0) then (
  let num = ((((_reduced_planck_constant *. _speed_of_light) *. _pi) *. _pi) *. area) in
  let den = ((((240.0 *. distance) *. distance) *. distance) *. distance) in
  let f = (num /. den) in
  __ret := (Obj.magic ([(__str (Obj.repr ("force")), f)]) : (string * float) list); raise Return
  );
  if (area = 0.0) then (
  let num = (((((240.0 *. force) *. distance) *. distance) *. distance) *. distance) in
  let den = (((_reduced_planck_constant *. _speed_of_light) *. _pi) *. _pi) in
  let a = (num /. den) in
  __ret := (Obj.magic ([(__str (Obj.repr ("area")), a)]) : (string * float) list); raise Return
  );
  let num = ((((_reduced_planck_constant *. _speed_of_light) *. _pi) *. _pi) *. area) in
  let den = (240.0 *. force) in
  let inner = (num /. den) in
  let d = sqrtApprox (Obj.repr (sqrtApprox (Obj.repr (inner)))) in
  __ret := (Obj.magic ([(__str (Obj.repr ("distance")), d)]) : (string * float) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((__show (Obj.repr (casimir_force (Obj.repr (0.0)) (Obj.repr (4.0)) (Obj.repr (0.03))))));
  print_endline ((__show (Obj.repr (casimir_force (Obj.repr (0.0000000002635)) (Obj.repr (0.0023)) (Obj.repr (0.0))))));
  print_endline ((__show (Obj.repr (casimir_force (Obj.repr (0.000000000000000002737)) (Obj.repr (0.0)) (Obj.repr (0.0023746))))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
