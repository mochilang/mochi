(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec to_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic ((float_of_int (x) *. 1.0)) : float); raise Return
  with Return -> !__ret)

and round6 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let factor = 1000000.0 in
  __ret := (Obj.magic ((float_of_int (int_of_float (((x *. factor) +. 0.5))) /. factor)) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and validate values =
  let __ret = ref false in
  (try
  let values = (Obj.magic values : float list) in
  if (List.length (values) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  if ((let __l = values in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <= 0.0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and effusion_ratio m1 m2 =
  let __ret = ref 0.0 in
  (try
  let m1 = (Obj.magic m1 : float) in
  let m2 = (Obj.magic m2 : float) in
  if not (validate ([m1; m2])) then (
  print_endline ("ValueError: Molar mass values must greater than 0.");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (round6 (Obj.repr (sqrtApprox (Obj.repr ((m2 /. m1)))))) : float); raise Return
  with Return -> !__ret)

and first_effusion_rate rate m1 m2 =
  let __ret = ref 0.0 in
  (try
  let rate = (Obj.magic rate : float) in
  let m1 = (Obj.magic m1 : float) in
  let m2 = (Obj.magic m2 : float) in
  if not (validate ([rate; m1; m2])) then (
  print_endline ("ValueError: Molar mass and effusion rate values must greater than 0.");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (round6 (Obj.repr ((rate *. sqrtApprox (Obj.repr ((m2 /. m1))))))) : float); raise Return
  with Return -> !__ret)

and second_effusion_rate rate m1 m2 =
  let __ret = ref 0.0 in
  (try
  let rate = (Obj.magic rate : float) in
  let m1 = (Obj.magic m1 : float) in
  let m2 = (Obj.magic m2 : float) in
  if not (validate ([rate; m1; m2])) then (
  print_endline ("ValueError: Molar mass and effusion rate values must greater than 0.");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (round6 (Obj.repr ((rate /. sqrtApprox (Obj.repr ((m2 /. m1))))))) : float); raise Return
  with Return -> !__ret)

and first_molar_mass mass r1 r2 =
  let __ret = ref 0.0 in
  (try
  let mass = (Obj.magic mass : float) in
  let r1 = (Obj.magic r1 : float) in
  let r2 = (Obj.magic r2 : float) in
  if not (validate ([mass; r1; r2])) then (
  print_endline ("ValueError: Molar mass and effusion rate values must greater than 0.");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let ratio = (r1 /. r2) in
  __ret := (Obj.magic (round6 (Obj.repr ((mass /. (ratio *. ratio))))) : float); raise Return
  with Return -> !__ret)

and second_molar_mass mass r1 r2 =
  let __ret = ref 0.0 in
  (try
  let mass = (Obj.magic mass : float) in
  let r1 = (Obj.magic r1 : float) in
  let r2 = (Obj.magic r2 : float) in
  if not (validate ([mass; r1; r2])) then (
  print_endline ("ValueError: Molar mass and effusion rate values must greater than 0.");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let ratio = (r1 /. r2) in
  __ret := (Obj.magic (round6 (Obj.repr (((ratio *. ratio) /. mass)))) : float); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_float (effusion_ratio (Obj.repr (2.016)) (Obj.repr (4.002))));
  print_endline (string_of_float (first_effusion_rate (Obj.repr (1.0)) (Obj.repr (2.016)) (Obj.repr (4.002))));
  print_endline (string_of_float (second_effusion_rate (Obj.repr (1.0)) (Obj.repr (2.016)) (Obj.repr (4.002))));
  print_endline (string_of_float (first_molar_mass (Obj.repr (2.0)) (Obj.repr (1.408943)) (Obj.repr (0.709752))));
  print_endline (string_of_float (second_molar_mass (Obj.repr (2.0)) (Obj.repr (1.408943)) (Obj.repr (0.709752))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
