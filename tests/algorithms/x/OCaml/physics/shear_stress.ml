(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec shear_stress stress tangential_force area =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let stress = (Obj.magic stress : float) in
  let tangential_force = (Obj.magic tangential_force : float) in
  let area = (Obj.magic area : float) in
  let zeros = ref (0) in
  if (stress = 0.0) then (
  zeros := (!zeros + 1);
  );
  if (tangential_force = 0.0) then (
  zeros := (!zeros + 1);
  );
  if (area = 0.0) then (
  zeros := (!zeros + 1);
  );
  if (!zeros <> 1) then (
  (failwith ("You cannot supply more or less than 2 values"));
  ) else (
  if (stress < 0.0) then (
  (failwith ("Stress cannot be negative"));
  ) else (
  if (tangential_force < 0.0) then (
  (failwith ("Tangential Force cannot be negative"));
  ) else (
  if (area < 0.0) then (
  (failwith ("Area cannot be negative"));
  ) else (
  if (stress = 0.0) then (
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ("stress")); (__str ("value"), Obj.repr ((tangential_force /. area)))]) : (string * Obj.t) list); raise Return
  ) else (
  if (tangential_force = 0.0) then (
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ("tangential_force")); (__str ("value"), Obj.repr ((stress *. area)))]) : (string * Obj.t) list); raise Return
  ) else (
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ("area")); (__str ("value"), Obj.repr ((tangential_force /. stress)))]) : (string * Obj.t) list); raise Return
  );
  );
  );
  );
  );
  );
    !__ret
  with Return -> !__ret)

and str_result r =
  let __ret = ref "" in
  (try
  let r = (Obj.magic r : (string * Obj.t) list) in
  __ret := (Obj.magic ((((("Result(name='" ^ (match List.assoc_opt (__str ("name")) (r) with Some v -> (Obj.obj (v : Obj.t) : string) | None -> "")) ^ "', value=") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("value")) (r) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))) ^ ")")) : string); raise Return
  with Return -> !__ret)


let r1 = ref (shear_stress (Obj.repr (25.0)) (Obj.repr (100.0)) (Obj.repr (0.0)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((str_result (!r1)));
  let r2 = ref (shear_stress (Obj.repr (0.0)) (Obj.repr (1600.0)) (Obj.repr (200.0))) in
  print_endline ((str_result (!r2)));
  let r3 = ref (shear_stress (Obj.repr (1000.0)) (Obj.repr (0.0)) (Obj.repr (1200.0))) in
  print_endline ((str_result (!r3)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
