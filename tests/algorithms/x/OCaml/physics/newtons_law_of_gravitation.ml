(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _gravitational_constant = 0.000000000066743
let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and gravitational_law force mass_1 mass_2 distance =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let force = (Obj.magic force : float) in
  let mass_1 = (Obj.magic mass_1 : float) in
  let mass_2 = (Obj.magic mass_2 : float) in
  let distance = (Obj.magic distance : float) in
  let zero_count = ref (0) in
  if (force = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (mass_1 = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (mass_2 = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (distance = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (!zero_count <> 1) then (
  (failwith ("One and only one argument must be 0"));
  );
  if (force < 0.0) then (
  (failwith ("Gravitational force can not be negative"));
  );
  if (distance < 0.0) then (
  (failwith ("Distance can not be negative"));
  );
  if (mass_1 < 0.0) then (
  (failwith ("Mass can not be negative"));
  );
  if (mass_2 < 0.0) then (
  (failwith ("Mass can not be negative"));
  );
  let product_of_mass = (mass_1 *. mass_2) in
  if (force = 0.0) then (
  let f = ((_gravitational_constant *. product_of_mass) /. (distance *. distance)) in
  __ret := (Obj.magic ([(__str ("kind"), Obj.repr ("force")); (__str ("value"), Obj.repr (f))]) : (string * Obj.t) list); raise Return
  );
  if (mass_1 = 0.0) then (
  let m1 = ((force *. (distance *. distance)) /. (_gravitational_constant *. mass_2)) in
  __ret := (Obj.magic ([(__str ("kind"), Obj.repr ("mass_1")); (__str ("value"), Obj.repr (m1))]) : (string * Obj.t) list); raise Return
  );
  if (mass_2 = 0.0) then (
  let m2 = ((force *. (distance *. distance)) /. (_gravitational_constant *. mass_1)) in
  __ret := (Obj.magic ([(__str ("kind"), Obj.repr ("mass_2")); (__str ("value"), Obj.repr (m2))]) : (string * Obj.t) list); raise Return
  );
  let d = sqrtApprox (Obj.repr (((_gravitational_constant *. product_of_mass) /. force))) in
  __ret := (Obj.magic ([(__str ("kind"), Obj.repr ("distance")); (__str ("value"), Obj.repr (d))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let r1 = ref (gravitational_law (Obj.repr (0.0)) (Obj.repr (5.0)) (Obj.repr (10.0)) (Obj.repr (20.0)))
let r2 = ref (gravitational_law (Obj.repr (7367.382)) (Obj.repr (0.0)) (Obj.repr (74.0)) (Obj.repr (3048.0)))
let r3 = ref (gravitational_law (Obj.repr (100.0)) (Obj.repr (5.0)) (Obj.repr (0.0)) (Obj.repr (3.0)))
let r4 = ref (gravitational_law (Obj.repr (100.0)) (Obj.repr (5.0)) (Obj.repr (10.0)) (Obj.repr (0.0)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((((match List.assoc_opt (__str ("kind")) (!r1) with Some v -> (Obj.obj (v : Obj.t) : string) | None -> "") ^ " ") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("value")) (!r1) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))));
  print_endline ((((match List.assoc_opt (__str ("kind")) (!r2) with Some v -> (Obj.obj (v : Obj.t) : string) | None -> "") ^ " ") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("value")) (!r2) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))));
  print_endline ((((match List.assoc_opt (__str ("kind")) (!r3) with Some v -> (Obj.obj (v : Obj.t) : string) | None -> "") ^ " ") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("value")) (!r3) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))));
  print_endline ((((match List.assoc_opt (__str ("kind")) (!r4) with Some v -> (Obj.obj (v : Obj.t) : string) | None -> "") ^ " ") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("value")) (!r4) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
