(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let rec _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (float_of_int (int_of_float ((x /. m))) *. m))) : float); raise Return
  with Return -> !__ret)

and sin_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y3 = (y2 *. y) in
  let y5 = (y3 *. y2) in
  let y7 = (y5 *. y2) in
  __ret := (Obj.magic ((((y -. (y3 /. 6.0)) +. (y5 /. 120.0)) -. (y7 /. 5040.0))) : float); raise Return
  with Return -> !__ret)

and cos_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y4 = (y2 *. y2) in
  let y6 = (y4 *. y2) in
  __ret := (Obj.magic ((((1.0 -. (y2 /. 2.0)) +. (y4 /. 24.0)) -. (y6 /. 720.0))) : float); raise Return
  with Return -> !__ret)

and polar_force magnitude angle radian_mode =
  let __ret = ref ([] : (float) list) in
  (try
  let magnitude = (Obj.magic magnitude : float) in
  let angle = (Obj.magic angle : float) in
  let theta = if radian_mode then angle else ((angle *. _pi) /. 180.0) in
  __ret := (Obj.magic ([(magnitude *. cos_approx (Obj.repr (theta))); (magnitude *. sin_approx (Obj.repr (theta)))]) : float list); raise Return
  with Return -> !__ret)

and abs_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  ) else (
  __ret := (Obj.magic (x) : float); raise Return
  );
    !__ret
  with Return -> !__ret)

and in_static_equilibrium forces location eps =
  let __ret = ref false in
  (try
  let forces = (Obj.magic forces : float list list) in
  let location = (Obj.magic location : float list list) in
  let eps = (Obj.magic eps : float) in
  let sum_moments = ref (0.0) in
  let i = ref (0) in
  let n = List.length (forces) in
  (try while (!i < n) do
    try
  let r = ref ((let __l = location in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let f = ref ((let __l = forces in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let moment = (((let __l = !r in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = !f in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) -. ((let __l = !r in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = !f in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) in
  sum_moments := (!sum_moments +. moment);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((abs_float (Obj.repr (!sum_moments)) < eps)) : bool); raise Return
  with Return -> !__ret)


let forces1 = ref ([[1.0; 1.0]; [(-.(1.0)); 2.0]])
let location1 = ref ([[1.0; 0.0]; [10.0; 0.0]])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((string_of_bool (Obj.magic (in_static_equilibrium (!forces1) (!location1) (Obj.repr (0.1))) : bool)));
  let forces2 = ref ([polar_force (Obj.repr (718.4)) (Obj.repr (150.0)) (false); polar_force (Obj.repr (879.54)) (Obj.repr (45.0)) (false); polar_force (Obj.repr (100.0)) (Obj.repr ((-.(90.0)))) (false)]) in
  let location2 = ref ([[0.0; 0.0]; [0.0; 0.0]; [0.0; 0.0]]) in
  print_endline ((string_of_bool (Obj.magic (in_static_equilibrium (!forces2) (!location2) (Obj.repr (0.1))) : bool)));
  let forces3 = ref ([polar_force (Obj.repr ((30.0 *. 9.81))) (Obj.repr (15.0)) (false); polar_force (Obj.repr (215.0)) (Obj.repr (135.0)) (false); polar_force (Obj.repr (264.0)) (Obj.repr (60.0)) (false)]) in
  let location3 = ref ([[0.0; 0.0]; [0.0; 0.0]; [0.0; 0.0]]) in
  print_endline ((string_of_bool (Obj.magic (in_static_equilibrium (!forces3) (!location3) (Obj.repr (0.1))) : bool)));
  let forces4 = ref ([[0.0; (-.(2000.0))]; [0.0; (-.(1200.0))]; [0.0; 15600.0]; [0.0; (-.(12400.0))]]) in
  let location4 = ref ([[0.0; 0.0]; [6.0; 0.0]; [10.0; 0.0]; [12.0; 0.0]]) in
  print_endline ((string_of_bool (Obj.magic (in_static_equilibrium (!forces4) (!location4) (Obj.repr (0.1))) : bool)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
