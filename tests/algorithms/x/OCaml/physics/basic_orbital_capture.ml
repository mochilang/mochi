(* Generated by Mochi transpiler v0.10.73 on 2025-08-26 08:36 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _g = 0.000000000066743
let _c = 299792458.0
let _pi = 3.141592653589793
let rec pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and sqrt x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and capture_radii target_body_radius target_body_mass projectile_velocity =
  let __ret = ref 0.0 in
  (try
  let target_body_radius = (Obj.magic target_body_radius : float) in
  let target_body_mass = (Obj.magic target_body_mass : float) in
  let projectile_velocity = (Obj.magic projectile_velocity : float) in
  if (target_body_mass < 0.0) then (
  (failwith ("Mass cannot be less than 0"));
  );
  if (target_body_radius < 0.0) then (
  (failwith ("Radius cannot be less than 0"));
  );
  if (projectile_velocity > _c) then (
  (failwith ("Cannot go beyond speed of light"));
  );
  let escape_velocity_squared = (((2.0 *. _g) *. target_body_mass) /. target_body_radius) in
  let denom = (projectile_velocity *. projectile_velocity) in
  let capture_radius = (target_body_radius *. sqrt (Obj.repr ((1.0 +. (escape_velocity_squared /. denom))))) in
  __ret := (Obj.magic (capture_radius) : float); raise Return
  with Return -> !__ret)

and capture_area capture_radius =
  let __ret = ref 0.0 in
  (try
  let capture_radius = (Obj.magic capture_radius : float) in
  if (capture_radius < 0.0) then (
  (failwith ("Cannot have a capture radius less than 0"));
  );
  let sigma = ((_pi *. capture_radius) *. capture_radius) in
  __ret := (Obj.magic (sigma) : float); raise Return
  with Return -> !__ret)

and run_tests () =
  let __ret = ref (Obj.magic 0) in
  (try
  let r = capture_radii (Obj.repr ((6.957 *. pow10 (Obj.repr (8))))) (Obj.repr ((1.99 *. pow10 (Obj.repr (30))))) (Obj.repr (25000.0)) in
  if (abs_float (r -. (1.720959069143714 *. pow10 (Obj.repr (10)))) > 1.0) then (
  (failwith ("capture_radii failed"));
  );
  let a = capture_area (Obj.repr (r)) in
  if (abs_float (a -. (9.304455331801812 *. pow10 (Obj.repr (20)))) > 1.0) then (
  (failwith ("capture_area failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (run_tests ());
  let r = capture_radii (Obj.repr ((6.957 *. pow10 (Obj.repr (8))))) (Obj.repr ((1.99 *. pow10 (Obj.repr (30))))) (Obj.repr (25000.0)) in
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (r) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (capture_area (Obj.repr (r))) : float)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
