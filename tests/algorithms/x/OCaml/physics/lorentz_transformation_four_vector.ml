(* Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:05 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let c = 299792458.0
let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and beta velocity =
  let __ret = ref 0.0 in
  (try
  let velocity = (Obj.magic velocity : float) in
  if (velocity > c) then (
  (failwith ("Speed must not exceed light speed 299,792,458 [m/s]!"));
  );
  if (velocity < 1.0) then (
  (failwith ("Speed must be greater than or equal to 1!"));
  );
  __ret := (Obj.magic ((velocity /. c)) : float); raise Return
  with Return -> !__ret)

and gamma velocity =
  let __ret = ref 0.0 in
  (try
  let velocity = (Obj.magic velocity : float) in
  let b = beta (Obj.repr (velocity)) in
  __ret := (Obj.magic ((1.0 /. sqrtApprox (Obj.repr ((1.0 -. (b *. b)))))) : float); raise Return
  with Return -> !__ret)

and transformation_matrix velocity =
  let __ret = ref ([] : (float list) list) in
  (try
  let velocity = (Obj.magic velocity : float) in
  let g = gamma (Obj.repr (velocity)) in
  let b = beta (Obj.repr (velocity)) in
  __ret := (Obj.magic ([[g; ((-.(g)) *. b); 0.0; 0.0]; [((-.(g)) *. b); g; 0.0; 0.0]; [0.0; 0.0; 1.0; 0.0]; [0.0; 0.0; 0.0; 1.0]]) : float list list); raise Return
  with Return -> !__ret)

and mat_vec_mul mat vec =
  let __ret = ref ([] : (float) list) in
  (try
  let mat = (Obj.magic mat : float list list) in
  let vec = (Obj.magic vec : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < 4) do
    try
  let row = ref ((let __l = mat in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let value = (((((let __l = !row in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = vec in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) +. ((let __l = !row in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = vec in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) +. ((let __l = !row in let __i = 2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = vec in let __i = 2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) +. ((let __l = !row in let __i = 3 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = vec in let __i = 3 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) in
  res := (Obj.magic ((!res @ [value])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and transform velocity event =
  let __ret = ref ([] : (float) list) in
  (try
  let velocity = (Obj.magic velocity : float) in
  let event = (Obj.magic event : float list) in
  let g = gamma (Obj.repr (velocity)) in
  let b = beta (Obj.repr (velocity)) in
  let ct = ((let __l = event in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. c) in
  let x = (let __l = event in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  __ret := (Obj.magic ([((g *. ct) -. ((g *. b) *. x)); ((((-.(g)) *. b) *. ct) +. (g *. x)); (let __l = event in let __i = 2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.); (let __l = event in let __i = 3 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)]) : float list); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (beta (Obj.repr (c))) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (beta (Obj.repr (199792458.0))) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (beta (Obj.repr (100000.0))) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (gamma (Obj.repr (4.0))) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (gamma (Obj.repr (100000.0))) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (gamma (Obj.repr (30000000.0))) : float)));
  print_endline ((__str (Obj.magic (transformation_matrix (Obj.repr (29979245.0))) : Obj.t)));
  let v = ref (transform (Obj.repr (29979245.0)) ([1.0; 2.0; 3.0; 4.0])) in
  print_endline ((__str (Obj.magic (!v) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
