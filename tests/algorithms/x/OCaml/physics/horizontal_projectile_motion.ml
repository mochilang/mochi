(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let g = 9.80665
let rec _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (float_of_int (int_of_float ((x /. m))) *. m))) : float); raise Return
  with Return -> !__ret)

and sin x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y3 = (y2 *. y) in
  let y5 = (y3 *. y2) in
  let y7 = (y5 *. y2) in
  __ret := (Obj.magic ((((y -. (y3 /. 6.0)) +. (y5 /. 120.0)) -. (y7 /. 5040.0))) : float); raise Return
  with Return -> !__ret)

and deg_to_rad deg =
  let __ret = ref 0.0 in
  (try
  let deg = (Obj.magic deg : float) in
  __ret := (Obj.magic (((deg *. _pi) /. 180.0)) : float); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref (int_of_float (x)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and round x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let m = pow10 (Obj.repr (n)) in
  let y = floor (((x *. m) +. 0.5)) in
  __ret := (Obj.magic ((y /. m)) : float); raise Return
  with Return -> !__ret)

and check_args init_velocity angle =
  let __ret = ref (Obj.magic 0) in
  (try
  let init_velocity = (Obj.magic init_velocity : float) in
  let angle = (Obj.magic angle : float) in
  if ((angle > 90.0) || (angle < 1.0)) then (
  (failwith ("Invalid angle. Range is 1-90 degrees."));
  );
  if (init_velocity < 0.0) then (
  (failwith ("Invalid velocity. Should be a positive number."));
  );
    !__ret
  with Return -> !__ret)

and horizontal_distance init_velocity angle =
  let __ret = ref 0.0 in
  (try
  let init_velocity = (Obj.magic init_velocity : float) in
  let angle = (Obj.magic angle : float) in
  ignore (check_args (Obj.repr (init_velocity)) (Obj.repr (angle)));
  let radians = deg_to_rad (Obj.repr ((2.0 *. angle))) in
  __ret := (Obj.magic (round (Obj.repr ((((init_velocity *. init_velocity) *. sin (Obj.repr (radians))) /. g))) (Obj.repr (2))) : float); raise Return
  with Return -> !__ret)

and max_height init_velocity angle =
  let __ret = ref 0.0 in
  (try
  let init_velocity = (Obj.magic init_velocity : float) in
  let angle = (Obj.magic angle : float) in
  ignore (check_args (Obj.repr (init_velocity)) (Obj.repr (angle)));
  let radians = deg_to_rad (Obj.repr (angle)) in
  let s = sin (Obj.repr (radians)) in
  __ret := (Obj.magic (round (Obj.repr (((((init_velocity *. init_velocity) *. s) *. s) /. (2.0 *. g)))) (Obj.repr (2))) : float); raise Return
  with Return -> !__ret)

and total_time init_velocity angle =
  let __ret = ref 0.0 in
  (try
  let init_velocity = (Obj.magic init_velocity : float) in
  let angle = (Obj.magic angle : float) in
  ignore (check_args (Obj.repr (init_velocity)) (Obj.repr (angle)));
  let radians = deg_to_rad (Obj.repr (angle)) in
  __ret := (Obj.magic (round (Obj.repr ((((2.0 *. init_velocity) *. sin (Obj.repr (radians))) /. g))) (Obj.repr (2))) : float); raise Return
  with Return -> !__ret)


let v0 = 25.0
let angle = 20.0
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_float (horizontal_distance (Obj.repr (v0)) (Obj.repr (angle))));
  print_endline (string_of_float (max_height (Obj.repr (v0)) (Obj.repr (angle))));
  print_endline (string_of_float (total_time (Obj.repr (v0)) (Obj.repr (angle))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
