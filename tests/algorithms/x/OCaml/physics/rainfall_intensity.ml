(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec exp_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = ref (x) in
  let is_neg = ref (false) in
  if (x < 0.0) then (
  is_neg := true;
  y := (-.(x));
  );
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 30) do
    try
  term := ((!term *. !y) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  if !is_neg then (
  __ret := (Obj.magic ((1.0 /. !sum)) : float); raise Return
  );
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and ln_series x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let t = ((x -. 1.0) /. (x +. 1.0)) in
  let term = ref (t) in
  let sum = ref (0.0) in
  let n = ref (1) in
  (try while (!n <= 19) do
    try
  sum := (!sum +. (!term /. float_of_int (!n)));
  term := ((!term *. t) *. t);
  n := (!n + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((2.0 *. !sum)) : float); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = ref (x) in
  let k = ref (0) in
  (try while (!y >= 10.0) do
    try
  y := (!y /. 10.0);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!y < 1.0) do
    try
  y := (!y *. 10.0);
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((ln_series (Obj.repr (!y)) +. (float_of_int (!k) *. ln_series (Obj.repr (10.0))))) : float); raise Return
  with Return -> !__ret)

and powf base exponent =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exponent = (Obj.magic exponent : float) in
  __ret := (Obj.magic (exp_approx (Obj.repr ((exponent *. ln (Obj.repr (base)))))) : float); raise Return
  with Return -> !__ret)

and rainfall_intensity coefficient_k coefficient_a coefficient_b coefficient_c return_period duration =
  let __ret = ref 0.0 in
  (try
  let coefficient_k = (Obj.magic coefficient_k : float) in
  let coefficient_a = (Obj.magic coefficient_a : float) in
  let coefficient_b = (Obj.magic coefficient_b : float) in
  let coefficient_c = (Obj.magic coefficient_c : float) in
  let return_period = (Obj.magic return_period : float) in
  let duration = (Obj.magic duration : float) in
  if (coefficient_k <= 0.0) then (
  (failwith ("All parameters must be positive."));
  );
  if (coefficient_a <= 0.0) then (
  (failwith ("All parameters must be positive."));
  );
  if (coefficient_b <= 0.0) then (
  (failwith ("All parameters must be positive."));
  );
  if (coefficient_c <= 0.0) then (
  (failwith ("All parameters must be positive."));
  );
  if (return_period <= 0.0) then (
  (failwith ("All parameters must be positive."));
  );
  if (duration <= 0.0) then (
  (failwith ("All parameters must be positive."));
  );
  let numerator = (coefficient_k *. powf (Obj.repr (return_period)) (Obj.repr (coefficient_a))) in
  let denominator = powf (Obj.repr ((duration +. coefficient_b))) (Obj.repr (coefficient_c)) in
  __ret := (Obj.magic ((numerator /. denominator)) : float); raise Return
  with Return -> !__ret)


let r1 = rainfall_intensity (Obj.repr (1000.0)) (Obj.repr (0.2)) (Obj.repr (11.6)) (Obj.repr (0.81)) (Obj.repr (10.0)) (Obj.repr (60.0))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (r1) : float)));
  let r2 = rainfall_intensity (Obj.repr (1000.0)) (Obj.repr (0.2)) (Obj.repr (11.6)) (Obj.repr (0.81)) (Obj.repr (10.0)) (Obj.repr (30.0)) in
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (r2) : float)));
  let r3 = rainfall_intensity (Obj.repr (1000.0)) (Obj.repr (0.2)) (Obj.repr (11.6)) (Obj.repr (0.81)) (Obj.repr (5.0)) (Obj.repr (60.0)) in
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (r3) : float)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
