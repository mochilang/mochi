(* Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:05 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let rec _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (floor ((x /. m)) *. m))) : float); raise Return
  with Return -> !__ret)

and cos x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y4 = (y2 *. y2) in
  let y6 = (y4 *. y2) in
  __ret := (Obj.magic ((((1.0 -. (y2 /. 2.0)) +. (y4 /. 24.0)) -. (y6 /. 720.0))) : float); raise Return
  with Return -> !__ret)

and radians deg =
  let __ret = ref 0.0 in
  (try
  let deg = (Obj.magic deg : float) in
  __ret := (Obj.magic (((deg *. _pi) /. 180.0)) : float); raise Return
  with Return -> !__ret)

and abs_val x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and malus_law initial_intensity angle =
  let __ret = ref 0.0 in
  (try
  let initial_intensity = (Obj.magic initial_intensity : float) in
  let angle = (Obj.magic angle : float) in
  if (initial_intensity < 0.0) then (
  (failwith ("The value of intensity cannot be negative"));
  );
  if ((angle < 0.0) || (angle > 360.0)) then (
  (failwith ("In Malus Law, the angle is in the range 0-360 degrees"));
  );
  let theta = radians (Obj.repr (angle)) in
  let c = cos (Obj.repr (theta)) in
  __ret := (Obj.magic ((initial_intensity *. (c *. c))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (malus_law (Obj.repr (100.0)) (Obj.repr (60.0))) : float)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
