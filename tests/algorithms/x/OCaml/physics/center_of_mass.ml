(* Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:05 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec round2 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let scaled = (x *. 100.0) in
  let rounded = float_of_int (int_of_float ((scaled +. 0.5))) in
  __ret := (Obj.magic ((rounded /. 100.0)) : float); raise Return
  with Return -> !__ret)

and center_of_mass ps =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let ps = (Obj.magic ps : (string * Obj.t) list list) in
  if (List.length (ps) = 0) then (
  (failwith ("No particles provided"));
  );
  let i = ref (0) in
  let total_mass = ref (0.0) in
  (try while (!i < List.length (ps)) do
    try
  let p = ref ((let __l = ps in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if ((match List.assoc_opt (__str (Obj.repr ("mass"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) <= 0.0) then (
  (failwith ("Mass of all particles must be greater than 0"));
  );
  total_mass := (!total_mass +. (match List.assoc_opt (__str (Obj.repr ("mass"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sum_x = ref (0.0) in
  let sum_y = ref (0.0) in
  let sum_z = ref (0.0) in
  i := 0;
  (try while (!i < List.length (ps)) do
    try
  let p = ref ((let __l = ps in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  sum_x := (!sum_x +. ((match List.assoc_opt (__str (Obj.repr ("x"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) *. (match List.assoc_opt (__str (Obj.repr ("mass"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)));
  sum_y := (!sum_y +. ((match List.assoc_opt (__str (Obj.repr ("y"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) *. (match List.assoc_opt (__str (Obj.repr ("mass"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)));
  sum_z := (!sum_z +. ((match List.assoc_opt (__str (Obj.repr ("z"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) *. (match List.assoc_opt (__str (Obj.repr ("mass"))) (!p) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let cm_x = round2 (Obj.repr ((!sum_x /. !total_mass))) in
  let cm_y = round2 (Obj.repr ((!sum_y /. !total_mass))) in
  let cm_z = round2 (Obj.repr ((!sum_z /. !total_mass))) in
  __ret := (Obj.magic ([(__str (Obj.repr ("x")), Obj.repr (cm_x)); (__str (Obj.repr ("y")), Obj.repr (cm_y)); (__str (Obj.repr ("z")), Obj.repr (cm_z))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and coord_to_string c =
  let __ret = ref "" in
  (try
  let c = (Obj.magic c : (string * Obj.t) list) in
  __ret := (Obj.magic ((((((("Coord3D(x=" ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("x"))) (c) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))) ^ ", y=") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("y"))) (c) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))) ^ ", z=") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("z"))) (c) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))) ^ ")")) : string); raise Return
  with Return -> !__ret)


let r1 = ref (center_of_mass ((Obj.magic ([[(__str (Obj.repr ("x")), Obj.repr (1.5)); (__str (Obj.repr ("y")), Obj.repr (4.0)); (__str (Obj.repr ("z")), Obj.repr (3.4)); (__str (Obj.repr ("mass")), Obj.repr (4.0))]; [(__str (Obj.repr ("x")), Obj.repr (5.0)); (__str (Obj.repr ("y")), Obj.repr (6.8)); (__str (Obj.repr ("z")), Obj.repr (7.0)); (__str (Obj.repr ("mass")), Obj.repr (8.1))]; [(__str (Obj.repr ("x")), Obj.repr (9.4)); (__str (Obj.repr ("y")), Obj.repr (10.1)); (__str (Obj.repr ("z")), Obj.repr (11.6)); (__str (Obj.repr ("mass")), Obj.repr (12.0))]]) : (string * Obj.t) list list)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((coord_to_string (!r1)));
  let r2 = ref (center_of_mass ((Obj.magic ([[(__str (Obj.repr ("x")), Obj.repr (1.0)); (__str (Obj.repr ("y")), Obj.repr (2.0)); (__str (Obj.repr ("z")), Obj.repr (3.0)); (__str (Obj.repr ("mass")), Obj.repr (4.0))]; [(__str (Obj.repr ("x")), Obj.repr (5.0)); (__str (Obj.repr ("y")), Obj.repr (6.0)); (__str (Obj.repr ("z")), Obj.repr (7.0)); (__str (Obj.repr ("mass")), Obj.repr (8.0))]; [(__str (Obj.repr ("x")), Obj.repr (9.0)); (__str (Obj.repr ("y")), Obj.repr (10.0)); (__str (Obj.repr ("z")), Obj.repr (11.0)); (__str (Obj.repr ("mass")), Obj.repr (12.0))]]) : (string * Obj.t) list list))) in
  print_endline ((coord_to_string (!r2)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
