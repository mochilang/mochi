(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (1.0) in
  if (n >= 0) then (
  let i = ref (0) in
  (try while (!i < n) do
    try
  p := (!p *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  let i = ref (0) in
  (try while (!i > n) do
    try
  p := (!p /. 10.0);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!p) : float); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = int_of_float (x) in
  let f = float_of_int (i) in
  if (f > x) then (
  __ret := (Obj.magic (float_of_int ((i - 1))) : float); raise Return
  );
  __ret := (Obj.magic (f) : float); raise Return
  with Return -> !__ret)

and format_scientific_3 x =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  if (x = 0.0) then (
  __ret := (Obj.magic ("0.000e+00") : string); raise Return
  );
  let sign = ref ("") in
  let num = ref (x) in
  if (!num < 0.0) then (
  sign := "-";
  num := (-.(!num));
  );
  let exp = ref (0) in
  (try while (!num >= 10.0) do
    try
  num := (!num /. 10.0);
  exp := (!exp + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!num < 1.0) do
    try
  num := (!num *. 10.0);
  exp := (!exp - 1);
    with Continue -> ()
  done with Break -> ());
  let temp = floor (((!num *. 1000.0) +. 0.5)) in
  let scaled = ref (int_of_float (temp)) in
  if (!scaled = 10000) then (
  scaled := 1000;
  exp := (!exp + 1);
  );
  let int_part = (!scaled / 1000) in
  let frac_part = ref (((!scaled mod 1000 + 1000) mod 1000)) in
  let frac_str = ref ((string_of_int (Obj.magic (!frac_part) : int))) in
  (try while (String.length (!frac_str) < 3) do
    try
  frac_str := ("0" ^ !frac_str);
    with Continue -> ()
  done with Break -> ());
  let mantissa = (((string_of_int (Obj.magic (int_part) : int)) ^ ".") ^ !frac_str) in
  let exp_sign = ref ("+") in
  let exp_abs = ref (!exp) in
  if (!exp < 0) then (
  exp_sign := "-";
  exp_abs := -(!exp);
  );
  let exp_str = ref ((string_of_int (Obj.magic (!exp_abs) : int))) in
  if (!exp_abs < 10) then (
  exp_str := ("0" ^ !exp_str);
  );
  __ret := (Obj.magic (((((!sign ^ mantissa) ^ "e") ^ !exp_sign) ^ !exp_str)) : string); raise Return
  with Return -> !__ret)

and orbital_transfer_work mass_central mass_object r_initial r_final =
  let __ret = ref "" in
  (try
  let mass_central = (Obj.magic mass_central : float) in
  let mass_object = (Obj.magic mass_object : float) in
  let r_initial = (Obj.magic r_initial : float) in
  let r_final = (Obj.magic r_final : float) in
  let _g = (6.6743 *. pow10 (Obj.repr (-(11)))) in
  if ((r_initial <= 0.0) || (r_final <= 0.0)) then (
  (failwith ("Orbital radii must be greater than zero."));
  );
  let work = ((((_g *. mass_central) *. mass_object) /. 2.0) *. ((1.0 /. r_initial) -. (1.0 /. r_final))) in
  __ret := (Obj.magic (format_scientific_3 (Obj.repr (work))) : string); raise Return
  with Return -> !__ret)

and test_orbital_transfer_work () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (orbital_transfer_work (Obj.repr ((5.972 *. pow10 (Obj.repr (24))))) (Obj.repr (1000.0)) (Obj.repr ((6.371 *. pow10 (Obj.repr (6))))) (Obj.repr ((7.0 *. pow10 (Obj.repr (6))))) <> "2.811e+09") then (
  (failwith ("case1 failed"));
  );
  if (orbital_transfer_work (Obj.repr ((5.972 *. pow10 (Obj.repr (24))))) (Obj.repr (500.0)) (Obj.repr ((7.0 *. pow10 (Obj.repr (6))))) (Obj.repr ((6.371 *. pow10 (Obj.repr (6))))) <> "-1.405e+09") then (
  (failwith ("case2 failed"));
  );
  if (orbital_transfer_work (Obj.repr ((1.989 *. pow10 (Obj.repr (30))))) (Obj.repr (1000.0)) (Obj.repr ((1.5 *. pow10 (Obj.repr (11))))) (Obj.repr ((2.28 *. pow10 (Obj.repr (11))))) <> "1.514e+11") then (
  (failwith ("case3 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_orbital_transfer_work ());
  print_endline ((orbital_transfer_work (Obj.repr ((5.972 *. pow10 (Obj.repr (24))))) (Obj.repr (1000.0)) (Obj.repr ((6.371 *. pow10 (Obj.repr (6))))) (Obj.repr ((7.0 *. pow10 (Obj.repr (6)))))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
