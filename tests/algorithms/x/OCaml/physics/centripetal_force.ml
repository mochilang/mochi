(* Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:05 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec centripetal mass velocity radius =
  let __ret = ref 0.0 in
  (try
  let mass = (Obj.magic mass : float) in
  let velocity = (Obj.magic velocity : float) in
  let radius = (Obj.magic radius : float) in
  if (mass < 0.0) then (
  (failwith ("The mass of the body cannot be negative"));
  );
  if (radius <= 0.0) then (
  (failwith ("The radius is always a positive non zero integer"));
  );
  __ret := (Obj.magic ((((mass *. velocity) *. velocity) /. radius)) : float); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref (int_of_float (x)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  p := (!p *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : float); raise Return
  with Return -> !__ret)

and round x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let m = pow10 (Obj.repr (n)) in
  __ret := (Obj.magic ((floor (Obj.repr (((x *. m) +. 0.5))) /. m)) : float); raise Return
  with Return -> !__ret)

and show mass velocity radius =
  let __ret = ref (Obj.magic 0) in
  (try
  let mass = (Obj.magic mass : float) in
  let velocity = (Obj.magic velocity : float) in
  let radius = (Obj.magic radius : float) in
  let f = centripetal (Obj.repr (mass)) (Obj.repr (velocity)) (Obj.repr (radius)) in
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (round (Obj.repr (f)) (Obj.repr (2))) : float)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (show (Obj.repr (15.5)) (Obj.repr ((-.(30.0)))) (Obj.repr (10.0)));
  ignore (show (Obj.repr (10.0)) (Obj.repr (15.0)) (Obj.repr (5.0)));
  ignore (show (Obj.repr (20.0)) (Obj.repr ((-.(50.0)))) (Obj.repr (15.0)));
  ignore (show (Obj.repr (12.25)) (Obj.repr (40.0)) (Obj.repr (25.0)));
  ignore (show (Obj.repr (50.0)) (Obj.repr (100.0)) (Obj.repr (50.0)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
