(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:29 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec abs_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and isclose a b tolerance =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let tolerance = (Obj.magic tolerance : float) in
  __ret := (Obj.magic ((abs_float (Obj.repr ((a -. b))) < tolerance)) : bool); raise Return
  with Return -> !__ret)

and focal_length distance_of_object distance_of_image =
  let __ret = ref 0.0 in
  (try
  let distance_of_object = (Obj.magic distance_of_object : float) in
  let distance_of_image = (Obj.magic distance_of_image : float) in
  if ((distance_of_object = 0.0) || (distance_of_image = 0.0)) then (
  (failwith ("Invalid inputs. Enter non zero values with respect to the sign convention."));
  );
  __ret := (Obj.magic ((1.0 /. ((1.0 /. distance_of_object) +. (1.0 /. distance_of_image)))) : float); raise Return
  with Return -> !__ret)

and object_distance focal_length distance_of_image =
  let __ret = ref 0.0 in
  (try
  let focal_length = (Obj.magic focal_length : float) in
  let distance_of_image = (Obj.magic distance_of_image : float) in
  if ((distance_of_image = 0.0) || (focal_length = 0.0)) then (
  (failwith ("Invalid inputs. Enter non zero values with respect to the sign convention."));
  );
  __ret := (Obj.magic ((1.0 /. ((1.0 /. focal_length) -. (1.0 /. distance_of_image)))) : float); raise Return
  with Return -> !__ret)

and image_distance focal_length distance_of_object =
  let __ret = ref 0.0 in
  (try
  let focal_length = (Obj.magic focal_length : float) in
  let distance_of_object = (Obj.magic distance_of_object : float) in
  if ((distance_of_object = 0.0) || (focal_length = 0.0)) then (
  (failwith ("Invalid inputs. Enter non zero values with respect to the sign convention."));
  );
  __ret := (Obj.magic ((1.0 /. ((1.0 /. focal_length) -. (1.0 /. distance_of_object)))) : float); raise Return
  with Return -> !__ret)

and test_focal_length () =
  let __ret = ref (Obj.magic 0) in
  (try
  let f1 = focal_length (Obj.repr (10.0)) (Obj.repr (20.0)) in
  if not (isclose (Obj.repr (f1)) (Obj.repr (6.66666666666666)) (Obj.repr (0.00000001))) then (
  (failwith ("focal_length test1 failed"));
  );
  let f2 = focal_length (Obj.repr (9.5)) (Obj.repr (6.7)) in
  if not (isclose (Obj.repr (f2)) (Obj.repr (3.929012346)) (Obj.repr (0.00000001))) then (
  (failwith ("focal_length test2 failed"));
  );
    !__ret
  with Return -> !__ret)

and test_object_distance () =
  let __ret = ref (Obj.magic 0) in
  (try
  let u1 = object_distance (Obj.repr (30.0)) (Obj.repr (20.0)) in
  if not (isclose (Obj.repr (u1)) (Obj.repr ((-.(60.0)))) (Obj.repr (0.00000001))) then (
  (failwith ("object_distance test1 failed"));
  );
  let u2 = object_distance (Obj.repr (10.5)) (Obj.repr (11.7)) in
  if not (isclose (Obj.repr (u2)) (Obj.repr (102.375)) (Obj.repr (0.00000001))) then (
  (failwith ("object_distance test2 failed"));
  );
    !__ret
  with Return -> !__ret)

and test_image_distance () =
  let __ret = ref (Obj.magic 0) in
  (try
  let v1 = image_distance (Obj.repr (10.0)) (Obj.repr (40.0)) in
  if not (isclose (Obj.repr (v1)) (Obj.repr (13.33333333)) (Obj.repr (0.00000001))) then (
  (failwith ("image_distance test1 failed"));
  );
  let v2 = image_distance (Obj.repr (1.5)) (Obj.repr (6.7)) in
  if not (isclose (Obj.repr (v2)) (Obj.repr (1.932692308)) (Obj.repr (0.00000001))) then (
  (failwith ("image_distance test2 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_focal_length ());
  ignore (test_object_distance ());
  ignore (test_image_distance ());
  print_endline ((Printf.sprintf "%.16g" (focal_length (Obj.repr (10.0)) (Obj.repr (20.0)))));
  print_endline ((Printf.sprintf "%.16g" (object_distance (Obj.repr (30.0)) (Obj.repr (20.0)))));
  print_endline ((Printf.sprintf "%.16g" (image_distance (Obj.repr (10.0)) (Obj.repr (40.0)))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
