(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec split s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let parts = ref (([] : (string) list)) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (((String.length (sep) > 0) && ((!i + String.length (sep)) <= String.length (s))) && ((let __s = s in let __st = !i in let __en = (!i + String.length (sep)) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = sep)) then (
  parts := (Obj.magic (List.append (!parts) [(Obj.magic (!cur) : string)]) : string list);
  cur := "";
  i := (!i + String.length (sep));
  ) else (
  cur := (!cur ^ (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)));
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  parts := (Obj.magic (List.append (!parts) [(Obj.magic (!cur) : string)]) : string list);
  __ret := (Obj.magic (!parts) : string list); raise Return
  with Return -> !__ret)

and join xs sep =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : string list) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i > 0) then (
  res := (!res ^ sep);
  );
  res := (!res ^ (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and repeat s n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  out := (!out ^ s);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and replace_char s old new_ =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (c = old) then (
  out := (!out ^ new_);
  ) else (
  out := (!out ^ c);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and contains s sub =
  let __ret = ref false in
  (try
  if (String.length (sub) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let i = ref (0) in
  (try while ((!i + String.length (sub)) <= String.length (s)) do
    try
  if ((let __s = s in let __st = !i in let __en = (!i + String.length (sub)) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = sub) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and file_extension name =
  let __ret = ref "" in
  (try
  let i = ref ((String.length (name) - 1)) in
  (try while (!i >= 0) do
    try
  if ((let __s = name in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = ".") then (
  __ret := (Obj.magic ((let __s = name in let __st = !i in let __len = (String.length (name) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string); raise Return
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and remove_extension name =
  let __ret = ref "" in
  (try
  let i = ref ((String.length (name) - 1)) in
  (try while (!i >= 0) do
    try
  if ((let __s = name in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = ".") then (
  __ret := (Obj.magic ((let __s = name in let __st = 0 in let __len = (!i - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string); raise Return
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (name) : string); raise Return
  with Return -> !__ret)

and title_case s =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let cap = ref (true) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (c = " ") then (
  out := (!out ^ c);
  cap := true;
  ) else (
  if !cap then (
  out := (!out ^ String.uppercase_ascii (c));
  cap := false;
  ) else (
  out := (!out ^ String.lowercase_ascii (c));
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and count_char s ch =
  let __ret = ref 0 in
  (try
  let cnt = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if ((let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = ch) then (
  cnt := (!cnt + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cnt) : int); raise Return
  with Return -> !__ret)

and md_prefix level =
  let __ret = ref "" in
  (try
  let level = (Obj.magic level : int) in
  if (level = 0) then (
  __ret := (Obj.magic ("\n##") : string); raise Return
  );
  __ret := (Obj.magic ((repeat ("  ") (Obj.repr (level)) ^ "*")) : string); raise Return
  with Return -> !__ret)

and print_path old_path new_path =
  let __ret = ref "" in
  (try
  let old_parts = ref (split (old_path) ("/")) in
  let new_parts = ref (split (new_path) ("/")) in
  let i = ref (0) in
  (try while (!i < List.length (!new_parts)) do
    try
  if (((!i >= List.length (!old_parts)) || ((let __l = !old_parts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = !new_parts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) && ((let __l = !new_parts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> "")) then (
  let title = title_case (replace_char ((let __l = !new_parts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) ("_") (" ")) in
  print_endline (((md_prefix (Obj.repr (!i)) ^ " ") ^ title));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (new_path) : string); raise Return
  with Return -> !__ret)

and sort_strings xs =
  let __ret = ref ([] : (string) list) in
  (try
  let xs = (Obj.magic xs : string list) in
  let arr = ref (xs) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let min_idx = ref (!i) in
  let j = ref ((!i + 1)) in
  (try while (!j < List.length (!arr)) do
    try
  if ((let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = !arr in let __i = !min_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  min_idx := !j;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let tmp = (let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = !i then (let __l = !arr in let __i = !min_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !min_idx then tmp else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : string list); raise Return
  with Return -> !__ret)

and good_file_paths paths =
  let __ret = ref ([] : (string) list) in
  (try
  let paths = (Obj.magic paths : string list) in
  let res = ref (([] : (string) list)) in
  (try List.iter (fun p ->
    try
  let parts = ref (split (p) ("/")) in
  let skip = ref (false) in
  let k = ref (0) in
  (try while (!k < (List.length (!parts) - 1)) do
    try
  let part = (let __l = !parts in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((((part = "scripts") || ((let __s = part in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = ".")) || ((let __s = part in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = "_")) || contains (part) ("venv")) then (
  skip := true;
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if !skip then (
  raise Continue;
  );
  let filename = (let __l = !parts in let __i = (List.length (!parts) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (filename = "__init__.py") then (
  raise Continue;
  );
  let ext = file_extension (filename) in
  if ((ext = ".py") || (ext = ".ipynb")) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (p) : string)]) : string list);
  );
    with Continue -> ()) (paths) with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and print_directory_md paths =
  let __ret = ref (Obj.magic 0) in
  (try
  let paths = (Obj.magic paths : string list) in
  let files = ref (sort_strings (good_file_paths (paths))) in
  let old_path = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (!files)) do
    try
  let fp = (let __l = !files in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let parts = ref (split (fp) ("/")) in
  let filename = (let __l = !parts in let __i = (List.length (!parts) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let filepath = ref ("") in
  if (List.length (!parts) > 1) then (
  filepath := join (List.of_seq (Seq.take ((List.length (!parts) - 1) - 0) (Seq.drop 0 (List.to_seq (!parts))))) ("/");
  );
  if (!filepath <> !old_path) then (
  old_path := print_path (!old_path) (!filepath);
  );
  let indent = ref (0) in
  if (String.length (!filepath) > 0) then (
  indent := (count_char (!filepath) ("/") + 1);
  );
  let url = replace_char (fp) (" ") ("%20") in
  let name = title_case (replace_char (remove_extension (filename)) ("_") (" ")) in
  print_endline ((((((md_prefix (Obj.repr (!indent)) ^ " [") ^ name) ^ "](") ^ url) ^ ")"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let sample = ref (["data_structures/linked_list.py"; "data_structures/binary_tree.py"; "math/number_theory/prime_check.py"; "math/number_theory/greatest_common_divisor.ipynb"])
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_directory_md (!sample));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
