(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOf s sub =
  let __ret = ref 0 in
  (try
  let n = String.length (s) in
  let m = String.length (sub) in
  let i = ref (0) in
  (try while (!i <= (n - m)) do
    try
  if ((let __s = s in let __st = !i in let __en = (!i + m) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = sub) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and contains s sub =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((try String.index (s) (String.get (sub) 0) with Not_found -> -1) >= 0)) : bool); raise Return
  with Return -> !__ret)

and validate files =
  let __ret = ref 0 in
  (try
  let files = (Obj.magic files : string list) in
  let upper = ref (([] : (string) list)) in
  let space = ref (([] : (string) list)) in
  let hyphen = ref (([] : (string) list)) in
  let nodir = ref (([] : (string) list)) in
  (try List.iter (fun f ->
    try
  if (f <> String.lowercase_ascii (f)) then (
  upper := (Obj.magic (List.append (!upper) [(Obj.magic (f) : string)]) : string list);
  );
  if contains (f) (" ") then (
  space := (Obj.magic (List.append (!space) [(Obj.magic (f) : string)]) : string list);
  );
  if (contains (f) ("-") && (contains (f) ("/site-packages/") = false)) then (
  hyphen := (Obj.magic (List.append (!hyphen) [(Obj.magic (f) : string)]) : string list);
  );
  if not (contains (f) ("/")) then (
  nodir := (Obj.magic (List.append (!nodir) [(Obj.magic (f) : string)]) : string list);
  );
    with Continue -> ()) (files) with Break -> ());
  if (List.length (!upper) > 0) then (
  print_endline (((string_of_int (List.length (!upper))) ^ " files contain uppercase characters:"));
  (try List.iter (fun f ->
    try
  print_endline (f);
    with Continue -> ()) (!upper) with Break -> ());
  print_endline ("");
  );
  if (List.length (!space) > 0) then (
  print_endline (((string_of_int (List.length (!space))) ^ " files contain space characters:"));
  (try List.iter (fun f ->
    try
  print_endline (f);
    with Continue -> ()) (!space) with Break -> ());
  print_endline ("");
  );
  if (List.length (!hyphen) > 0) then (
  print_endline (((string_of_int (List.length (!hyphen))) ^ " files contain hyphen characters:"));
  (try List.iter (fun f ->
    try
  print_endline (f);
    with Continue -> ()) (!hyphen) with Break -> ());
  print_endline ("");
  );
  if (List.length (!nodir) > 0) then (
  print_endline (((string_of_int (List.length (!nodir))) ^ " files are not in a directory:"));
  (try List.iter (fun f ->
    try
  print_endline (f);
    with Continue -> ()) (!nodir) with Break -> ());
  print_endline ("");
  );
  __ret := (Obj.magic ((((List.length (!upper) + List.length (!space)) + List.length (!hyphen)) + List.length (!nodir))) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let files = ref (["scripts/Validate_filenames.py"; "good/file.txt"; "bad file.txt"; "/site-packages/pkg-name.py"; "nopath"; "src/hyphen-name.py"]) in
  let bad = validate (!files) in
  print_endline ((string_of_int (bad)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
