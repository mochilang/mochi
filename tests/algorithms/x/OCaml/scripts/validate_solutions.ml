(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())


open Sha256

let _sha256 lst =
  let buf = Buffer.create (List.length lst) in
  List.iter (fun i -> Buffer.add_char buf (Char.chr i)) lst;
  let digest = Sha256.to_bin (Sha256.string (Buffer.contents buf)) in
  let rec loop i acc =
    if i < 0 then acc else loop (i - 1) ((Char.code digest.[i]) :: acc)
  in
  loop (String.length digest - 1) []

let _sha256_str s =
  let digest = Sha256.to_bin (Sha256.string s) in
  let rec loop i acc =
    if i < 0 then acc else loop (i - 1) ((Char.code digest.[i]) :: acc)
  in
  loop (String.length digest - 1) []

exception Break
exception Continue

exception Return

let _hex = "0123456789abcdef"
let rec byte_to_hex b =
  let __ret = ref "" in
  (try
  let b = (Obj.magic b : int) in
  let hi = (b / 16) in
  let lo = ((b mod 16 + 16) mod 16) in
  __ret := (Obj.magic (((let __s = _hex in let __i = hi in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) ^ (let __s = _hex in let __i = lo in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))))) : string); raise Return
  with Return -> !__ret)

and bytes_to_hex bs =
  let __ret = ref "" in
  (try
  let bs = (Obj.magic bs : int list) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (bs)) do
    try
  res := (!res ^ byte_to_hex (Obj.repr ((let __l = bs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and sha256_hex s =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (bytes_to_hex (_sha256_str (s))) : string); raise Return
  with Return -> !__ret)

and solution_001 () =
  let __ret = ref "" in
  (try
  let total = ref (0) in
  let n = ref (0) in
  (try while (!n < 1000) do
    try
  if ((((!n mod 3 + 3) mod 3) = 0) || (((!n mod 5 + 5) mod 5) = 0)) then (
  total := (!total + !n);
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((string_of_int (!total))) : string); raise Return
  with Return -> !__ret)


let expected = sha256_hex ("233168")
let answer = solution_001 ()
let computed = sha256_hex (answer)
let () =
  let mem_start = _mem () in
  let start = _now () in
  if (computed = expected) then (
  print_endline ("Problem 001 passed");
  ) else (
  print_endline (((("Problem 001 failed: " ^ computed) ^ " != ") ^ expected));
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
