(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let rec _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (float_of_int (int_of_float ((x /. m))) *. m))) : float); raise Return
  with Return -> !__ret)

and sin x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y3 = (y2 *. y) in
  let y5 = (y3 *. y2) in
  let y7 = (y5 *. y2) in
  __ret := (Obj.magic ((((y -. (y3 /. 6.0)) +. (y5 /. 120.0)) -. (y7 /. 5040.0))) : float); raise Return
  with Return -> !__ret)

and cos x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y4 = (y2 *. y2) in
  let y6 = (y4 *. y2) in
  __ret := (Obj.magic ((((1.0 -. (y2 /. 2.0)) +. (y4 /. 24.0)) -. (y6 /. 720.0))) : float); raise Return
  with Return -> !__ret)

and rotate v angle_deg =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let angle_deg = (Obj.magic angle_deg : float) in
  let theta = ((angle_deg *. _pi) /. 180.0) in
  let c = cos (Obj.repr (theta)) in
  let s = sin (Obj.repr (theta)) in
  __ret := (Obj.magic ([(__str ("x"), Obj.repr ((((Obj.obj (List.assoc (__str ("x")) (v) : Obj.t) : float) *. c) -. ((Obj.obj (List.assoc (__str ("y")) (v) : Obj.t) : float) *. s)))); (__str ("y"), Obj.repr ((((Obj.obj (List.assoc (__str ("x")) (v) : Obj.t) : float) *. s) +. ((Obj.obj (List.assoc (__str ("y")) (v) : Obj.t) : float) *. c))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and iteration_step vectors =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let new_vectors = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < (List.length (vectors) - 1)) do
    try
  let start = ref (List.nth (vectors) (!i)) in
  let end_ = ref (List.nth (vectors) ((!i + 1))) in
  new_vectors := (Obj.magic (List.append (!new_vectors) [(Obj.magic (!start) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  let dx = ((Obj.obj (List.assoc (__str ("x")) (!end_) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("x")) (!start) : Obj.t) : float)) in
  let dy = ((Obj.obj (List.assoc (__str ("y")) (!end_) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("y")) (!start) : Obj.t) : float)) in
  let one_third = [(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (!start) : Obj.t) : float) +. (dx /. 3.0)))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (!start) : Obj.t) : float) +. (dy /. 3.0))))] in
  let mid = rotate ([(__str ("x"), Obj.repr ((dx /. 3.0))); (__str ("y"), Obj.repr ((dy /. 3.0)))]) (Obj.repr (60.0)) in
  let peak = [(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (one_third) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("x")) (mid) : Obj.t) : float)))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (one_third) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("y")) (mid) : Obj.t) : float))))] in
  let two_third = [(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (!start) : Obj.t) : float) +. ((dx *. 2.0) /. 3.0)))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (!start) : Obj.t) : float) +. ((dy *. 2.0) /. 3.0))))] in
  new_vectors := (Obj.magic (List.append (!new_vectors) [(Obj.magic (one_third) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  new_vectors := (Obj.magic (List.append (!new_vectors) [(Obj.magic (peak) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  new_vectors := (Obj.magic (List.append (!new_vectors) [(Obj.magic (two_third) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  new_vectors := (Obj.magic (List.append (!new_vectors) [(Obj.magic (List.nth (vectors) ((List.length (vectors) - 1))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  __ret := (Obj.magic (!new_vectors) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and iterate initial steps =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let steps = (Obj.magic steps : int) in
  let vectors = ref (initial) in
  let i = ref (0) in
  (try while (!i < steps) do
    try
  vectors := iteration_step (!vectors);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!vectors) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and vec_to_string v =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((("(" ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("x")) (v) : Obj.t) : float)))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("y")) (v) : Obj.t) : float)))) ^ ")")) : string); raise Return
  with Return -> !__ret)

and vec_list_to_string lst =
  let __ret = ref "" in
  (try
  let res = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  res := (!res ^ vec_to_string ((Obj.magic List.nth (lst) (!i) : (string * Obj.t) list)));
  if (!i < (List.length (lst) - 1)) then (
  res := (!res ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ "]");
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let _vector_1 = [(__str ("x"), Obj.repr (0.0)); (__str ("y"), Obj.repr (0.0))]
let _vector_2 = [(__str ("x"), Obj.repr (0.5)); (__str ("y"), Obj.repr (0.8660254))]
let _vector_3 = [(__str ("x"), Obj.repr (1.0)); (__str ("y"), Obj.repr (0.0))]
let _initial_vectors = ref ([_vector_1; _vector_2; _vector_3; _vector_1])
let example = ref (iterate ((Obj.magic [_vector_1; _vector_3] : (string * Obj.t) list list)) (Obj.repr (1)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((vec_list_to_string ((Obj.magic !example : (string * Obj.t) list list))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
