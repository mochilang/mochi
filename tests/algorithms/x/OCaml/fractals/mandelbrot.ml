(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec round_int x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((Obj.magic (x +. 0.5) : int)) : int); raise Return
  with Return -> !__ret)

and hsv_to_rgb h s v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let h = (Obj.magic h : float) in
  let s = (Obj.magic s : float) in
  let v = (Obj.magic v : float) in
  let i = (Obj.magic (h *. 6.0) : int) in
  let f = ((h *. 6.0) -. float_of_int (i)) in
  let p = (v *. (1.0 -. s)) in
  let q = (v *. (1.0 -. (f *. s))) in
  let t = (v *. (1.0 -. ((1.0 -. f) *. s))) in
  let mod_ = ((i mod 6 + 6) mod 6) in
  let r = ref (0.0) in
  let g = ref (0.0) in
  let b = ref (0.0) in
  if (mod_ = 0) then (
  r := v;
  g := t;
  b := p;
  ) else (
  if (mod_ = 1) then (
  r := q;
  g := v;
  b := p;
  ) else (
  if (mod_ = 2) then (
  r := p;
  g := v;
  b := t;
  ) else (
  if (mod_ = 3) then (
  r := p;
  g := q;
  b := v;
  ) else (
  if (mod_ = 4) then (
  r := t;
  g := p;
  b := v;
  ) else (
  r := v;
  g := p;
  b := q;
  );
  );
  );
  );
  );
  __ret := (Obj.magic ([(__str ("r"), Obj.repr (round_int (Obj.repr ((!r *. 255.0))))); (__str ("g"), Obj.repr (round_int (Obj.repr ((!g *. 255.0))))); (__str ("b"), Obj.repr (round_int (Obj.repr ((!b *. 255.0)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get_distance x y max_step =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  let max_step = (Obj.magic max_step : int) in
  let a = ref (x) in
  let b = ref (y) in
  let step = ref (-(1)) in
  (try while (!step < (max_step - 1)) do
    try
  step := (!step + 1);
  let a_new = (((!a *. !a) -. (!b *. !b)) +. x) in
  b := (((2.0 *. !a) *. !b) +. y);
  a := a_new;
  if (((!a *. !a) +. (!b *. !b)) > 4.0) then (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((float_of_int (!step) /. float_of_int ((max_step - 1)))) : float); raise Return
  with Return -> !__ret)

and get_black_and_white_rgb distance =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let distance = (Obj.magic distance : float) in
  if (distance = 1.0) then (
  __ret := (Obj.magic ([(__str ("r"), Obj.repr (0)); (__str ("g"), Obj.repr (0)); (__str ("b"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  ) else (
  __ret := (Obj.magic ([(__str ("r"), Obj.repr (255)); (__str ("g"), Obj.repr (255)); (__str ("b"), Obj.repr (255))]) : (string * Obj.t) list); raise Return
  );
    !__ret
  with Return -> !__ret)

and get_color_coded_rgb distance =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let distance = (Obj.magic distance : float) in
  if (distance = 1.0) then (
  __ret := (Obj.magic ([(__str ("r"), Obj.repr (0)); (__str ("g"), Obj.repr (0)); (__str ("b"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  ) else (
  __ret := (Obj.magic (hsv_to_rgb (Obj.repr (distance)) (Obj.repr (1.0)) (Obj.repr (1.0))) : (string * Obj.t) list); raise Return
  );
    !__ret
  with Return -> !__ret)

and get_image image_width image_height figure_center_x figure_center_y figure_width max_step use_distance_color_coding =
  let __ret = ref ([] : ((string * Obj.t) list list) list) in
  (try
  let image_width = (Obj.magic image_width : int) in
  let image_height = (Obj.magic image_height : int) in
  let figure_center_x = (Obj.magic figure_center_x : float) in
  let figure_center_y = (Obj.magic figure_center_y : float) in
  let figure_width = (Obj.magic figure_width : float) in
  let max_step = (Obj.magic max_step : int) in
  let img = ref (([] : ((string * Obj.t) list list) list)) in
  let figure_height = ((figure_width /. float_of_int (image_width)) *. float_of_int (image_height)) in
  let image_y = ref (0) in
  (try while (!image_y < image_height) do
    try
  let row = ref (([] : ((string * Obj.t) list) list)) in
  let image_x = ref (0) in
  (try while (!image_x < image_width) do
    try
  let fx = (figure_center_x +. (((float_of_int (!image_x) /. float_of_int (image_width)) -. 0.5) *. figure_width)) in
  let fy = (figure_center_y +. (((float_of_int (!image_y) /. float_of_int (image_height)) -. 0.5) *. figure_height)) in
  let distance = get_distance (Obj.repr (fx)) (Obj.repr (fy)) (Obj.repr (max_step)) in
  let rgb = ref (([] : (string * Obj.t) list)) in
  if use_distance_color_coding then (
  rgb := get_color_coded_rgb (Obj.repr (distance));
  ) else (
  rgb := get_black_and_white_rgb (Obj.repr (distance));
  );
  row := (Obj.magic (List.append (!row) [(Obj.magic (!rgb) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  image_x := (!image_x + 1);
    with Continue -> ()
  done with Break -> ());
  img := (Obj.magic (List.append (!img) [(Obj.magic (!row) : (string * Obj.t) list list)]) : (string * Obj.t) list list list);
  image_y := (!image_y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!img) : (string * Obj.t) list list list); raise Return
  with Return -> !__ret)

and rgb_to_string c =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((((("(" ^ (string_of_int ((Obj.obj (List.assoc (__str ("r")) (c) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("g")) (c) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("b")) (c) : Obj.t) : int)))) ^ ")")) : string); raise Return
  with Return -> !__ret)


let img1 = ref (get_image (Obj.repr (10)) (Obj.repr (10)) (Obj.repr ((-.(0.6)))) (Obj.repr (0.0)) (Obj.repr (3.2)) (Obj.repr (50)) (true))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((rgb_to_string (List.nth (List.nth (!img1) (0)) (0))));
  let img2 = ref (get_image (Obj.repr (10)) (Obj.repr (10)) (Obj.repr ((-.(0.6)))) (Obj.repr (0.0)) (Obj.repr (3.2)) (Obj.repr (50)) (false)) in
  print_endline ((rgb_to_string (List.nth (List.nth (!img2) (0)) (0))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
