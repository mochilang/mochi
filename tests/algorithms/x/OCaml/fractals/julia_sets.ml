(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec complex_add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and complex_mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let real = (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)) -. ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))) in
  let imag = (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float)) +. ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float))) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (real)); (__str ("im"), Obj.repr (imag))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and complex_abs a =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic (sqrtApprox (Obj.repr ((((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float)) +. ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float)))))) : float); raise Return
  with Return -> !__ret)

and sin_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = (2.0 *. float_of_int (!i)) in
  let k2 = ((2.0 *. float_of_int (!i)) +. 1.0) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cos_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = ((2.0 *. float_of_int (!i)) -. 1.0) in
  let k2 = (2.0 *. float_of_int (!i)) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and exp_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1.0) in
  (try while (!i < 20.0) do
    try
  term := ((!term *. x) /. !i);
  sum := (!sum +. !term);
  i := (!i +. 1.0);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and complex_exp z =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let e = exp_taylor (Obj.repr ((Obj.obj (List.assoc (__str ("re")) (z) : Obj.t) : float))) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr ((e *. cos_taylor (Obj.repr ((Obj.obj (List.assoc (__str ("im")) (z) : Obj.t) : float)))))); (__str ("im"), Obj.repr ((e *. sin_taylor (Obj.repr ((Obj.obj (List.assoc (__str ("im")) (z) : Obj.t) : float))))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and eval_quadratic c z =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (complex_add (complex_mul ((Obj.magic z : (string * Obj.t) list)) ((Obj.magic z : (string * Obj.t) list))) ((Obj.magic c : (string * Obj.t) list))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and eval_exponential c z =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (complex_add (complex_exp ((Obj.magic z : (string * Obj.t) list))) ((Obj.magic c : (string * Obj.t) list))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and iterate_function eval_function c nb_iterations z0 infinity =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nb_iterations = (Obj.magic nb_iterations : int) in
  let infinity = (Obj.magic infinity : float) in
  let z_n = ref (z0) in
  let i = ref (0) in
  (try while (!i < nb_iterations) do
    try
  z_n := (Obj.magic eval_function (c) (!z_n) : (string * Obj.t) list);
  if (complex_abs ((Obj.magic !z_n : (string * Obj.t) list)) > infinity) then (
  __ret := (Obj.magic (!z_n) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!z_n) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and prepare_grid window_size nb_pixels =
  let __ret = ref ([] : ((string * Obj.t) list list) list) in
  (try
  let window_size = (Obj.magic window_size : float) in
  let nb_pixels = (Obj.magic nb_pixels : int) in
  let grid = ref (([] : ((string * Obj.t) list list) list)) in
  let i = ref (0) in
  (try while (!i < nb_pixels) do
    try
  let row = ref (([] : ((string * Obj.t) list) list)) in
  let j = ref (0) in
  (try while (!j < nb_pixels) do
    try
  let real = ((-.(window_size)) +. (((2.0 *. window_size) *. float_of_int (!i)) /. float_of_int ((nb_pixels - 1)))) in
  let imag = ((-.(window_size)) +. (((2.0 *. window_size) *. float_of_int (!j)) /. float_of_int ((nb_pixels - 1)))) in
  row := (Obj.magic (List.append (!row) [(Obj.magic ([(__str ("re"), Obj.repr (real)); (__str ("im"), Obj.repr (imag))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  grid := (Obj.magic (List.append (!grid) [(Obj.magic (!row) : (string * Obj.t) list list)]) : (string * Obj.t) list list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!grid) : (string * Obj.t) list list list); raise Return
  with Return -> !__ret)

and julia_demo () =
  let __ret = ref (Obj.magic 0) in
  (try
  let grid = ref (prepare_grid (Obj.repr (1.0)) (Obj.repr (5))) in
  let c_poly = [(__str ("re"), Obj.repr ((-.(0.4)))); (__str ("im"), Obj.repr (0.6))] in
  let c_exp = [(__str ("re"), Obj.repr ((-.(2.0)))); (__str ("im"), Obj.repr (0.0))] in
  let poly_result = ref (([] : (int list) list)) in
  let exp_result = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < List.length (!grid)) do
    try
  let row_poly = ref (([] : (int) list)) in
  let row_exp = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < List.length (List.nth (!grid) (!y))) do
    try
  let z0 = List.nth (List.nth (!grid) (!y)) (!x) in
  let z_poly = iterate_function ((Obj.magic eval_quadratic : Obj.t -> Obj.t -> (string * Obj.t) list)) (c_poly) (Obj.repr (20)) (z0) (Obj.repr (4.0)) in
  let z_exp = iterate_function ((Obj.magic eval_exponential : Obj.t -> Obj.t -> (string * Obj.t) list)) (c_exp) (Obj.repr (10)) (z0) (Obj.repr (10000000000.0)) in
  row_poly := (Obj.magic (List.append (!row_poly) [(Obj.magic (if (complex_abs (z_poly) < 2.0) then 1 else 0) : int)]) : int list);
  row_exp := (Obj.magic (List.append (!row_exp) [(Obj.magic (if (complex_abs (z_exp) < 10000.0) then 1 else 0) : int)]) : int list);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  poly_result := (Obj.magic (List.append (!poly_result) [(Obj.magic (!row_poly) : int list)]) : int list list);
  exp_result := (Obj.magic (List.append (!exp_result) [(Obj.magic (!row_exp) : int list)]) : int list list);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show_list !poly_result);
  print_endline (__show_list !exp_result);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (julia_demo ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
