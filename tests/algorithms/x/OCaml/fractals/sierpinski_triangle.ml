(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec get_mid p1 p2 =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("x"), Obj.repr ((((Obj.obj (List.assoc (__str ("x")) (p1) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("x")) (p2) : Obj.t) : int)) / 2))); (__str ("y"), Obj.repr ((((Obj.obj (List.assoc (__str ("y")) (p1) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("y")) (p2) : Obj.t) : int)) / 2)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and point_to_string p =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((("(" ^ (string_of_int ((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : int)))) ^ ",") ^ (string_of_int ((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : int)))) ^ ")")) : string); raise Return
  with Return -> !__ret)

and triangle v1 v2 v3 depth =
  let __ret = ref (Obj.magic 0) in
  (try
  let depth = (Obj.magic depth : int) in
  print_endline (((((point_to_string ((Obj.magic v1 : (string * Obj.t) list)) ^ " ") ^ point_to_string ((Obj.magic v2 : (string * Obj.t) list))) ^ " ") ^ point_to_string ((Obj.magic v3 : (string * Obj.t) list))));
  if (depth = 0) then (
  __ret := (); raise Return
  );
  ignore (triangle ((Obj.magic v1 : (string * Obj.t) list)) (get_mid ((Obj.magic v1 : (string * Obj.t) list)) ((Obj.magic v2 : (string * Obj.t) list))) (get_mid ((Obj.magic v1 : (string * Obj.t) list)) ((Obj.magic v3 : (string * Obj.t) list))) (Obj.repr ((depth - 1))));
  ignore (triangle ((Obj.magic v2 : (string * Obj.t) list)) (get_mid ((Obj.magic v1 : (string * Obj.t) list)) ((Obj.magic v2 : (string * Obj.t) list))) (get_mid ((Obj.magic v2 : (string * Obj.t) list)) ((Obj.magic v3 : (string * Obj.t) list))) (Obj.repr ((depth - 1))));
  ignore (triangle ((Obj.magic v3 : (string * Obj.t) list)) (get_mid ((Obj.magic v3 : (string * Obj.t) list)) ((Obj.magic v2 : (string * Obj.t) list))) (get_mid ((Obj.magic v1 : (string * Obj.t) list)) ((Obj.magic v3 : (string * Obj.t) list))) (Obj.repr ((depth - 1))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (triangle ([(__str ("x"), Obj.repr (-(175))); (__str ("y"), Obj.repr (-(125)))]) ([(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr (175))]) ([(__str ("x"), Obj.repr (175)); (__str ("y"), Obj.repr (-(125)))]) (Obj.repr (2)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
