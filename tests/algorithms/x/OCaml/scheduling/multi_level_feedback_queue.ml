(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_process name arrival burst =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let arrival = (Obj.magic arrival : int) in
  let burst = (Obj.magic burst : int) in
  __ret := (Obj.magic ([(__str ("process_name"), Obj.repr (name)); (__str ("arrival_time"), Obj.repr (arrival)); (__str ("stop_time"), Obj.repr (arrival)); (__str ("burst_time"), Obj.repr (burst)); (__str ("waiting_time"), Obj.repr (0)); (__str ("turnaround_time"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and make_mlfq nqueues time_slices queue current_time =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nqueues = (Obj.magic nqueues : int) in
  let time_slices = (Obj.magic time_slices : int list) in
  let queue = (Obj.magic queue : (string * Obj.t) list list) in
  let current_time = (Obj.magic current_time : int) in
  __ret := (Obj.magic ([(__str ("number_of_queues"), Obj.repr (nqueues)); (__str ("time_slices"), Obj.repr (time_slices)); (__str ("ready_queue"), Obj.repr (queue)); (__str ("current_time"), Obj.repr (current_time)); (__str ("finish_queue"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and calculate_sequence_of_finish_queue mlfq =
  let __ret = ref ([] : (string) list) in
  (try
  let mlfq = (Obj.magic mlfq : (string * Obj.t) list) in
  let seq = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("finish_queue")) (mlfq) : Obj.t) : (string * Obj.t) list list))) do
    try
  let p = ref ((let __l = (Obj.obj (List.assoc (__str ("finish_queue")) (mlfq) : Obj.t) : (string * Obj.t) list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  seq := (Obj.magic (List.append (!seq) [(Obj.magic ((Obj.obj (List.assoc (__str ("process_name")) (!p) : Obj.t) : string)) : string)]) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!seq) : string list); raise Return
  with Return -> !__ret)

and calculate_waiting_time queue =
  let __ret = ref ([] : (int) list) in
  (try
  let queue = (Obj.magic queue : (string * Obj.t) list list) in
  let times = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (queue)) do
    try
  let p = ref ((let __l = queue in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  times := (Obj.magic (List.append (!times) [(Obj.magic ((Obj.obj (List.assoc (__str ("waiting_time")) (!p) : Obj.t) : int)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!times) : int list); raise Return
  with Return -> !__ret)

and calculate_turnaround_time queue =
  let __ret = ref ([] : (int) list) in
  (try
  let queue = (Obj.magic queue : (string * Obj.t) list list) in
  let times = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (queue)) do
    try
  let p = ref ((let __l = queue in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  times := (Obj.magic (List.append (!times) [(Obj.magic ((Obj.obj (List.assoc (__str ("turnaround_time")) (!p) : Obj.t) : int)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!times) : int list); raise Return
  with Return -> !__ret)

and calculate_completion_time queue =
  let __ret = ref ([] : (int) list) in
  (try
  let queue = (Obj.magic queue : (string * Obj.t) list list) in
  let times = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (queue)) do
    try
  let p = ref ((let __l = queue in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  times := (Obj.magic (List.append (!times) [(Obj.magic ((Obj.obj (List.assoc (__str ("stop_time")) (!p) : Obj.t) : int)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!times) : int list); raise Return
  with Return -> !__ret)

and calculate_remaining_burst_time_of_processes queue =
  let __ret = ref ([] : (int) list) in
  (try
  let queue = (Obj.magic queue : (string * Obj.t) list list) in
  let times = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (queue)) do
    try
  let p = ref ((let __l = queue in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  times := (Obj.magic (List.append (!times) [(Obj.magic ((Obj.obj (List.assoc (__str ("burst_time")) (!p) : Obj.t) : int)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!times) : int list); raise Return
  with Return -> !__ret)

and update_waiting_time mlfq process =
  let __ret = ref 0 in
  (try
  let mlfq = (Obj.magic mlfq : (string * Obj.t) list) in
  process := (Obj.magic !process : (string * Obj.t) list);
  process := ((__str ("waiting_time"), Obj.repr (((Obj.obj (List.assoc (__str ("waiting_time")) (!process) : Obj.t) : int) + ((Obj.obj (List.assoc (__str ("current_time")) (mlfq) : Obj.t) : int) - (Obj.obj (List.assoc (__str ("stop_time")) (!process) : Obj.t) : int))))) :: List.remove_assoc (__str ("waiting_time")) (Obj.magic (!process) : (string * Obj.t) list));
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("waiting_time")) (!process) : Obj.t) : int)) : int); raise Return
  with Return -> !__ret)

and first_come_first_served mlfq ready_queue =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  mlfq := (Obj.magic !mlfq : (string * Obj.t) list);
  let ready_queue = (Obj.magic ready_queue : (string * Obj.t) list list) in
  let finished = ref (([] : ((string * Obj.t) list) list)) in
  let rq = ref (ready_queue) in
  (try while (List.length (!rq) <> 0) do
    try
  let cp = ref ((let __l = !rq in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  rq := (Obj.magic List.of_seq (Seq.take (List.length (!rq) - 1) (Seq.drop 1 (List.to_seq (!rq)))) : (string * Obj.t) list list);
  if ((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("arrival_time")) (!cp) : Obj.t) : int)) then (
  mlfq := ((__str ("current_time"), Obj.repr ((Obj.obj (List.assoc (__str ("arrival_time")) (!cp) : Obj.t) : int))) :: List.remove_assoc (__str ("current_time")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  );
  ignore (update_waiting_time ((Obj.magic !mlfq : (string * Obj.t) list)) (cp));
  mlfq := ((__str ("current_time"), Obj.repr (((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("burst_time")) (!cp) : Obj.t) : int)))) :: List.remove_assoc (__str ("current_time")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  cp := ((__str ("burst_time"), Obj.repr (0)) :: List.remove_assoc (__str ("burst_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  cp := ((__str ("turnaround_time"), Obj.repr (((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int) - (Obj.obj (List.assoc (__str ("arrival_time")) (!cp) : Obj.t) : int)))) :: List.remove_assoc (__str ("turnaround_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  cp := ((__str ("stop_time"), Obj.repr ((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int))) :: List.remove_assoc (__str ("stop_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  finished := (Obj.magic (List.append (!finished) [(Obj.magic (!cp) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()
  done with Break -> ());
  mlfq := ((__str ("finish_queue"), Obj.repr (((Obj.obj (List.assoc (__str ("finish_queue")) (!mlfq) : Obj.t) : (string * Obj.t) list list) @ !finished))) :: List.remove_assoc (__str ("finish_queue")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  __ret := (Obj.magic (!finished) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and round_robin mlfq ready_queue time_slice =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  mlfq := (Obj.magic !mlfq : (string * Obj.t) list);
  let ready_queue = (Obj.magic ready_queue : (string * Obj.t) list list) in
  let time_slice = (Obj.magic time_slice : int) in
  let finished = ref (([] : ((string * Obj.t) list) list)) in
  let rq = ref (ready_queue) in
  let count = ref (List.length (!rq)) in
  let i = ref (0) in
  (try while (!i < !count) do
    try
  let cp = ref ((let __l = !rq in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  rq := (Obj.magic List.of_seq (Seq.take (List.length (!rq) - 1) (Seq.drop 1 (List.to_seq (!rq)))) : (string * Obj.t) list list);
  if ((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("arrival_time")) (!cp) : Obj.t) : int)) then (
  mlfq := ((__str ("current_time"), Obj.repr ((Obj.obj (List.assoc (__str ("arrival_time")) (!cp) : Obj.t) : int))) :: List.remove_assoc (__str ("current_time")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  );
  ignore (update_waiting_time ((Obj.magic !mlfq : (string * Obj.t) list)) (cp));
  if ((Obj.obj (List.assoc (__str ("burst_time")) (!cp) : Obj.t) : int) > time_slice) then (
  mlfq := ((__str ("current_time"), Obj.repr (((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int) + time_slice))) :: List.remove_assoc (__str ("current_time")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  cp := ((__str ("burst_time"), Obj.repr (((Obj.obj (List.assoc (__str ("burst_time")) (!cp) : Obj.t) : int) - time_slice))) :: List.remove_assoc (__str ("burst_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  cp := ((__str ("stop_time"), Obj.repr ((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int))) :: List.remove_assoc (__str ("stop_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  rq := (Obj.magic (List.append (!rq) [(Obj.magic (!cp) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ) else (
  mlfq := ((__str ("current_time"), Obj.repr (((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("burst_time")) (!cp) : Obj.t) : int)))) :: List.remove_assoc (__str ("current_time")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  cp := ((__str ("burst_time"), Obj.repr (0)) :: List.remove_assoc (__str ("burst_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  cp := ((__str ("stop_time"), Obj.repr ((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int))) :: List.remove_assoc (__str ("stop_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  cp := ((__str ("turnaround_time"), Obj.repr (((Obj.obj (List.assoc (__str ("current_time")) (!mlfq) : Obj.t) : int) - (Obj.obj (List.assoc (__str ("arrival_time")) (!cp) : Obj.t) : int)))) :: List.remove_assoc (__str ("turnaround_time")) (Obj.magic (!cp) : (string * Obj.t) list));
  finished := (Obj.magic (List.append (!finished) [(Obj.magic (!cp) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  mlfq := ((__str ("finish_queue"), Obj.repr (((Obj.obj (List.assoc (__str ("finish_queue")) (!mlfq) : Obj.t) : (string * Obj.t) list list) @ !finished))) :: List.remove_assoc (__str ("finish_queue")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  __ret := (Obj.magic ([(__str ("finished"), Obj.repr (!finished)); (__str ("ready"), Obj.repr (!rq))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and multi_level_feedback_queue mlfq =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  mlfq := (Obj.magic !mlfq : (string * Obj.t) list);
  let i = ref (0) in
  (try while (!i < ((Obj.obj (List.assoc (__str ("number_of_queues")) (!mlfq) : Obj.t) : int) - 1)) do
    try
  let rr = round_robin (mlfq) ((Obj.obj (List.assoc (__str ("ready_queue")) (!mlfq) : Obj.t) : (string * Obj.t) list list)) (Obj.repr ((let __l = (Obj.obj (List.assoc (__str ("time_slices")) (!mlfq) : Obj.t) : int list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  mlfq := ((__str ("ready_queue"), Obj.repr ((Obj.obj (List.assoc (__str ("ready")) (rr) : Obj.t) : (string * Obj.t) list list))) :: List.remove_assoc (__str ("ready_queue")) (Obj.magic (!mlfq) : (string * Obj.t) list));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (first_come_first_served (mlfq) ((Obj.obj (List.assoc (__str ("ready_queue")) (!mlfq) : Obj.t) : (string * Obj.t) list list)));
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("finish_queue")) (!mlfq) : Obj.t) : (string * Obj.t) list list)) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let _p1 = make_process ("P1") (Obj.repr (0)) (Obj.repr (53))
let _p2 = make_process ("P2") (Obj.repr (0)) (Obj.repr (17))
let _p3 = make_process ("P3") (Obj.repr (0)) (Obj.repr (68))
let _p4 = make_process ("P4") (Obj.repr (0)) (Obj.repr (24))
let number_of_queues = 3
let time_slices = ref ([17; 25])
let queue = ref ([_p1; _p2; _p3; _p4])
let mlfq = make_mlfq (Obj.repr (number_of_queues)) (!time_slices) ((Obj.magic !queue : (string * Obj.t) list list)) (Obj.repr (0))
let finish_queue = ref (multi_level_feedback_queue (ref (mlfq)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (("waiting time:\t\t\t" ^ (__str (calculate_waiting_time ((Obj.magic [_p1; _p2; _p3; _p4] : (string * Obj.t) list list))))));
  print_endline (("completion time:\t\t" ^ (__str (calculate_completion_time ((Obj.magic [_p1; _p2; _p3; _p4] : (string * Obj.t) list list))))));
  print_endline (("turnaround time:\t\t" ^ (__str (calculate_turnaround_time ((Obj.magic [_p1; _p2; _p3; _p4] : (string * Obj.t) list list))))));
  print_endline (("sequence of finished processes:\t" ^ (__str (calculate_sequence_of_finish_queue (mlfq)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
