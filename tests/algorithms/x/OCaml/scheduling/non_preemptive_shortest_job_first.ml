(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec calculate_waitingtime arrival_time burst_time no_of_processes =
  let __ret = ref ([] : (int) list) in
  (try
  let arrival_time = (Obj.magic arrival_time : int list) in
  let burst_time = (Obj.magic burst_time : int list) in
  let no_of_processes = (Obj.magic no_of_processes : int) in
  let waiting_time = ref (([] : (int) list)) in
  let remaining_time = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < no_of_processes) do
    try
  waiting_time := (Obj.magic (List.append (!waiting_time) [(Obj.magic (0) : int)]) : int list);
  remaining_time := (Obj.magic (List.append (!remaining_time) [(Obj.magic ((let __l = burst_time in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let completed = ref (0) in
  let total_time = ref (0) in
  (try while (!completed <> no_of_processes) do
    try
  let ready_process = ref (([] : (int) list)) in
  let target_process = ref (-(1)) in
  let j = ref (0) in
  (try while (!j < no_of_processes) do
    try
  if (((let __l = arrival_time in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <= !total_time) && ((let __l = !remaining_time in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > 0)) then (
  ready_process := (Obj.magic (List.append (!ready_process) [(Obj.magic (!j) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (!ready_process) > 0) then (
  target_process := (let __l = !ready_process in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  let k = ref (0) in
  (try while (!k < List.length (!ready_process)) do
    try
  let idx = (let __l = !ready_process in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((let __l = !remaining_time in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = !remaining_time in let __i = !target_process in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  target_process := idx;
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  total_time := (!total_time + (let __l = burst_time in let __i = !target_process in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  completed := (!completed + 1);
  remaining_time := (List.mapi (fun __i __x -> if __i = !target_process then 0 else __x) (!remaining_time));
  waiting_time := (List.mapi (fun __i __x -> if __i = !target_process then ((!total_time - (let __l = arrival_time in let __i = !target_process in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) - (let __l = burst_time in let __i = !target_process in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!waiting_time));
  ) else (
  total_time := (!total_time + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!waiting_time) : int list); raise Return
  with Return -> !__ret)

and calculate_turnaroundtime burst_time no_of_processes waiting_time =
  let __ret = ref ([] : (int) list) in
  (try
  let burst_time = (Obj.magic burst_time : int list) in
  let no_of_processes = (Obj.magic no_of_processes : int) in
  let waiting_time = (Obj.magic waiting_time : int list) in
  let turn_around_time = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < no_of_processes) do
    try
  turn_around_time := (Obj.magic (List.append (!turn_around_time) [(Obj.magic (((let __l = burst_time in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + (let __l = waiting_time in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!turn_around_time) : int list); raise Return
  with Return -> !__ret)

and average values =
  let __ret = ref 0.0 in
  (try
  let values = (Obj.magic values : int list) in
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  total := (!total + (let __l = values in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((float_of_int (!total) /. float_of_int (List.length (values)))) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("[TEST CASE 01]");
  let no_of_processes = 4 in
  let burst_time = ref ([2; 5; 3; 7]) in
  let arrival_time = ref ([0; 0; 0; 0]) in
  let waiting_time = ref (calculate_waitingtime (!arrival_time) (!burst_time) (Obj.repr (no_of_processes))) in
  let turn_around_time = ref (calculate_turnaroundtime (!burst_time) (Obj.repr (no_of_processes)) (!waiting_time)) in
  print_endline ("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time");
  let i = ref (0) in
  (try while (!i < no_of_processes) do
    try
  let pid = (!i + 1) in
  print_endline ((((((((((string_of_int (pid)) ^ "\t") ^ (string_of_int ((let __l = !burst_time in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) ^ "\t\t\t") ^ (string_of_int ((let __l = !arrival_time in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) ^ "\t\t\t\t") ^ (string_of_int ((let __l = !waiting_time in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) ^ "\t\t\t\t") ^ (string_of_int ((let __l = !turn_around_time in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let avg_wait = average (!waiting_time) in
  let avg_turn = average (!turn_around_time) in
  print_endline (("\nAverage waiting time = " ^ (Printf.sprintf "%.16g" (avg_wait))));
  print_endline (("Average turnaround time = " ^ (Printf.sprintf "%.16g" (avg_turn))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
