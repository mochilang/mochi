(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_jobs_by_profit jobs =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let jobs = (Obj.magic jobs : (string * Obj.t) list list) in
  let js = ref (jobs) in
  let i = ref (0) in
  (try while (!i < List.length (!js)) do
    try
  let j = ref (0) in
  (try while (!j < ((List.length (!js) - !i) - 1)) do
    try
  let a = ref ((let __l = !js in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let b = ref ((let __l = !js in let __i = (!j + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if ((Obj.obj (List.assoc (__str ("profit")) (!a) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("profit")) (!b) : Obj.t) : int)) then (
  js := (List.mapi (fun __i __x -> if __i = !j then !b else __x) (!js));
  js := (List.mapi (fun __i __x -> if __i = (!j + 1) then !a else __x) (!js));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!js) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and max_deadline jobs =
  let __ret = ref 0 in
  (try
  let jobs = (Obj.magic jobs : (string * Obj.t) list list) in
  let max_d = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (jobs)) do
    try
  let job = ref ((let __l = jobs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let d = (Obj.obj (List.assoc (__str ("deadline")) (!job) : Obj.t) : int) in
  if (d > !max_d) then (
  max_d := d;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_d) : int); raise Return
  with Return -> !__ret)

and job_sequencing_with_deadlines jobs =
  let __ret = ref ([] : (int) list) in
  (try
  let jobs = (Obj.magic jobs : (string * Obj.t) list list) in
  let js = ref (sort_jobs_by_profit (jobs)) in
  let max_d = max_deadline ((Obj.magic !js : (string * Obj.t) list list)) in
  let time_slots = ref (([] : (int) list)) in
  let t = ref (0) in
  (try while (!t < max_d) do
    try
  time_slots := (Obj.magic (List.append (!time_slots) [(Obj.magic ((0 - 1)) : int)]) : int list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let count = ref (0) in
  let max_profit = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!js)) do
    try
  let job = (let __l = !js in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let j = ref (((Obj.obj (List.assoc (__str ("deadline")) (job) : Obj.t) : int) - 1)) in
  (try while (!j >= 0) do
    try
  if ((let __l = !time_slots in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (0 - 1)) then (
  time_slots := (List.mapi (fun __i __x -> if __i = !j then (Obj.obj (List.assoc (__str ("id")) (job) : Obj.t) : int) else __x) (!time_slots));
  count := (!count + 1);
  max_profit := (!max_profit + (Obj.obj (List.assoc (__str ("profit")) (job) : Obj.t) : int));
  raise Break;
  );
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (int) list)) in
  result := (Obj.magic (List.append (!result) [(Obj.magic (!count) : int)]) : int list);
  result := (Obj.magic (List.append (!result) [(Obj.magic (!max_profit) : int)]) : int list);
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)


let jobs1 = ref (([] : ((string * Obj.t) list) list))
let () =
  let mem_start = _mem () in
  let start = _now () in
  jobs1 := (Obj.magic (List.append (!jobs1) [(Obj.magic ([(__str ("id"), Obj.repr (1)); (__str ("deadline"), Obj.repr (4)); (__str ("profit"), Obj.repr (20))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  jobs1 := (Obj.magic (List.append (!jobs1) [(Obj.magic ([(__str ("id"), Obj.repr (2)); (__str ("deadline"), Obj.repr (1)); (__str ("profit"), Obj.repr (10))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  jobs1 := (Obj.magic (List.append (!jobs1) [(Obj.magic ([(__str ("id"), Obj.repr (3)); (__str ("deadline"), Obj.repr (1)); (__str ("profit"), Obj.repr (40))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  jobs1 := (Obj.magic (List.append (!jobs1) [(Obj.magic ([(__str ("id"), Obj.repr (4)); (__str ("deadline"), Obj.repr (1)); (__str ("profit"), Obj.repr (30))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  print_endline ((__str (job_sequencing_with_deadlines (!jobs1))));
  let jobs2 = ref (([] : ((string * Obj.t) list) list)) in
  jobs2 := (Obj.magic (List.append (!jobs2) [(Obj.magic ([(__str ("id"), Obj.repr (1)); (__str ("deadline"), Obj.repr (2)); (__str ("profit"), Obj.repr (100))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  jobs2 := (Obj.magic (List.append (!jobs2) [(Obj.magic ([(__str ("id"), Obj.repr (2)); (__str ("deadline"), Obj.repr (1)); (__str ("profit"), Obj.repr (19))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  jobs2 := (Obj.magic (List.append (!jobs2) [(Obj.magic ([(__str ("id"), Obj.repr (3)); (__str ("deadline"), Obj.repr (2)); (__str ("profit"), Obj.repr (27))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  jobs2 := (Obj.magic (List.append (!jobs2) [(Obj.magic ([(__str ("id"), Obj.repr (4)); (__str ("deadline"), Obj.repr (1)); (__str ("profit"), Obj.repr (25))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  jobs2 := (Obj.magic (List.append (!jobs2) [(Obj.magic ([(__str ("id"), Obj.repr (5)); (__str ("deadline"), Obj.repr (1)); (__str ("profit"), Obj.repr (15))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  print_endline ((__str (job_sequencing_with_deadlines (!jobs2))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
