(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec calculate_waiting_times burst_times =
  let __ret = ref ([] : (int) list) in
  (try
  let burst_times = (Obj.magic burst_times : int list) in
  let quantum = 2 in
  let rem = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (burst_times)) do
    try
  rem := (Obj.magic (List.append (!rem) [(Obj.magic ((let __l = burst_times in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let waiting = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (burst_times)) do
    try
  waiting := (Obj.magic (List.append (!waiting) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let t = ref (0) in
  (try while true do
    try
  let done_ = ref (true) in
  let j = ref (0) in
  (try while (!j < List.length (burst_times)) do
    try
  if ((let __l = !rem in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > 0) then (
  done_ := false;
  if ((let __l = !rem in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > quantum) then (
  t := (!t + quantum);
  rem := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !rem in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - quantum) else __x) (!rem));
  ) else (
  t := (!t + (let __l = !rem in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  waiting := (List.mapi (fun __i __x -> if __i = !j then (!t - (let __l = burst_times in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!waiting));
  rem := (List.mapi (fun __i __x -> if __i = !j then 0 else __x) (!rem));
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !done_ then (
  __ret := (Obj.magic (!waiting) : int list); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!waiting) : int list); raise Return
  with Return -> !__ret)

and calculate_turn_around_times burst_times waiting_times =
  let __ret = ref ([] : (int) list) in
  (try
  let burst_times = (Obj.magic burst_times : int list) in
  let waiting_times = (Obj.magic waiting_times : int list) in
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (burst_times)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic (((let __l = burst_times in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + (let __l = waiting_times in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and mean values =
  let __ret = ref 0.0 in
  (try
  let values = (Obj.magic values : int list) in
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  total := (!total + (let __l = values in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((float_of_int (!total) /. float_of_int (List.length (values)))) : float); raise Return
  with Return -> !__ret)

and format_float_5 x =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  let scaled = int_of_float (((x *. 100000.0) +. 0.5)) in
  let int_part = (scaled / 100000) in
  let frac_part = ((scaled mod 100000 + 100000) mod 100000) in
  let frac_str = ref ((string_of_int (frac_part))) in
  (try while (String.length (!frac_str) < 5) do
    try
  frac_str := ("0" ^ !frac_str);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((((string_of_int (int_part)) ^ ".") ^ !frac_str)) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let burst_times = ref ([3; 5; 7]) in
  let waiting_times = ref (calculate_waiting_times (!burst_times)) in
  let turn_around_times = ref (calculate_turn_around_times (!burst_times) (!waiting_times)) in
  print_endline ("Process ID \tBurst Time \tWaiting Time \tTurnaround Time");
  let i = ref (0) in
  (try while (!i < List.length (!burst_times)) do
    try
  let line = ((((((("  " ^ (string_of_int ((!i + 1)))) ^ "\t\t  ") ^ (string_of_int ((let __l = !burst_times in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) ^ "\t\t  ") ^ (string_of_int ((let __l = !waiting_times in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) ^ "\t\t  ") ^ (string_of_int ((let __l = !turn_around_times in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  print_endline (line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  print_endline (("Average waiting time = " ^ format_float_5 (Obj.repr (mean (!waiting_times)))));
  print_endline (("Average turn around time = " ^ format_float_5 (Obj.repr (mean (!turn_around_times)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
