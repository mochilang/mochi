(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec simple_moving_average data window_size =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let window_size = (Obj.magic window_size : int) in
  if (window_size < 1) then (
  (failwith ("Window size must be a positive integer"));
  );
  let result = ref (([] : ((string * Obj.t) list) list)) in
  let window_sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (data)) do
    try
  window_sum := (!window_sum +. List.nth (data) (!i));
  if (!i >= window_size) then (
  window_sum := (!window_sum -. List.nth (data) ((!i - window_size)));
  );
  if (!i >= (window_size - 1)) then (
  let avg = (!window_sum /. float_of_int (window_size)) in
  result := (List.append (!result) [(Obj.magic ([(__str ("value"), Obj.repr (avg)); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list)]);
  ) else (
  result := (List.append (!result) [(Obj.magic ([(__str ("value"), Obj.repr (0.0)); (__str ("ok"), Obj.repr (false))]) : (string * Obj.t) list)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let data = ref ([10.0; 12.0; 15.0; 13.0; 14.0; 16.0; 18.0; 17.0; 19.0; 21.0])
let window_size = 3
let sma_values = ref (simple_moving_average (!data) (Obj.repr (window_size)))
let idx = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!idx < List.length (!sma_values)) do
    try
  let item = List.nth (!sma_values) (!idx) in
  if (Obj.obj (List.assoc (__str ("ok")) (item) : Obj.t) : bool) then (
  print_endline (((("Day " ^ (string_of_int ((!idx + 1)))) ^ ": ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("value")) (item) : Obj.t) : float)))));
  ) else (
  print_endline ((("Day " ^ (string_of_int ((!idx + 1)))) ^ ": Not enough data for SMA"));
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
