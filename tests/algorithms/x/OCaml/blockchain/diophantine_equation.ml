(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (if (a < 0) then -(a) else a) in
  let y = ref (if (b < 0) then -(b) else b) in
  (try while (!y <> 0) do
    try
  let t = (!x mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and extended_gcd a b =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (b = 0) then (
  __ret := (Obj.magic ([a; 1; 0]) : int list); raise Return
  );
  let res = ref (extended_gcd (Obj.repr (b)) (Obj.repr ((a mod b)))) in
  let d = List.nth (!res) (0) in
  let p = List.nth (!res) (1) in
  let q = List.nth (!res) (2) in
  let x = q in
  let y = (p - (q * (a / b))) in
  __ret := (Obj.magic ([d; x; y]) : int list); raise Return
  with Return -> !__ret)

and diophantine a b c =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let d = gcd (Obj.repr (a)) (Obj.repr (b)) in
  if ((c mod d) <> 0) then (
  (failwith ("No solution"));
  );
  let eg = ref (extended_gcd (Obj.repr (a)) (Obj.repr (b))) in
  let r = (c / d) in
  let x = (List.nth (!eg) (1) * r) in
  let y = (List.nth (!eg) (2) * r) in
  __ret := (Obj.magic ([x; y]) : int list); raise Return
  with Return -> !__ret)

and diophantine_all_soln a b c n =
  let __ret = ref ([] : (int list) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let n = (Obj.magic n : int) in
  let base = ref (diophantine (Obj.repr (a)) (Obj.repr (b)) (Obj.repr (c))) in
  let x0 = List.nth (!base) (0) in
  let y0 = List.nth (!base) (1) in
  let d = gcd (Obj.repr (a)) (Obj.repr (b)) in
  let p = (a / d) in
  let q = (b / d) in
  let sols = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let x = (x0 + (!i * q)) in
  let y = (y0 - (!i * p)) in
  sols := (List.append (!sols) [(Obj.magic ([x; y]) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sols) : int list list); raise Return
  with Return -> !__ret)


let s1 = ref (diophantine (Obj.repr (10)) (Obj.repr (6)) (Obj.repr (14)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!s1)));
  let sols = ref (diophantine_all_soln (Obj.repr (10)) (Obj.repr (6)) (Obj.repr (14)) (Obj.repr (4))) in
  let j = ref (0) in
  (try while (!j < List.length (!sols)) do
    try
  print_endline ((__str (List.nth (!sols) (!j))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((__str (diophantine (Obj.repr (391)) (Obj.repr (299)) (Obj.repr (-(69))))));
  print_endline ((__str (extended_gcd (Obj.repr (10)) (Obj.repr (6)))));
  print_endline ((__str (extended_gcd (Obj.repr (7)) (Obj.repr (5)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()