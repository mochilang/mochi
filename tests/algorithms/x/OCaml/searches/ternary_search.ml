(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let precision = 10
let rec lin_search left right array target =
  let __ret = ref 0 in
  (try
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  let array = (Obj.magic array : int list) in
  let target = (Obj.magic target : int) in
  let i = ref (left) in
  (try while (!i < right) do
    try
  if ((let __l = array in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = target) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and ite_ternary_search array target =
  let __ret = ref 0 in
  (try
  let array = (Obj.magic array : int list) in
  let target = (Obj.magic target : int) in
  let left = ref (0) in
  let right = ref ((List.length (array) - 1)) in
  (try while (!left <= !right) do
    try
  if ((!right - !left) < precision) then (
  let idx = lin_search (Obj.repr (!left)) (Obj.repr ((!right + 1))) (array) (Obj.repr (target)) in
  __ret := (Obj.magic (idx) : int); raise Return
  );
  let one_third = (!left + ((!right - !left) / 3)) in
  let two_third = (!right - ((!right - !left) / 3)) in
  if ((let __l = array in let __i = one_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = target) then (
  __ret := (Obj.magic (one_third) : int); raise Return
  );
  if ((let __l = array in let __i = two_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = target) then (
  __ret := (Obj.magic (two_third) : int); raise Return
  );
  if (target < (let __l = array in let __i = one_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  right := (one_third - 1);
  ) else (
  if ((let __l = array in let __i = two_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < target) then (
  left := (two_third + 1);
  ) else (
  left := (one_third + 1);
  right := (two_third - 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and rec_ternary_search left right array target =
  let __ret = ref 0 in
  (try
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  let array = (Obj.magic array : int list) in
  let target = (Obj.magic target : int) in
  if (left <= right) then (
  if ((right - left) < precision) then (
  let idx = lin_search (Obj.repr (left)) (Obj.repr ((right + 1))) (array) (Obj.repr (target)) in
  __ret := (Obj.magic (idx) : int); raise Return
  );
  let one_third = (left + ((right - left) / 3)) in
  let two_third = (right - ((right - left) / 3)) in
  if ((let __l = array in let __i = one_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = target) then (
  __ret := (Obj.magic (one_third) : int); raise Return
  );
  if ((let __l = array in let __i = two_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = target) then (
  __ret := (Obj.magic (two_third) : int); raise Return
  );
  if (target < (let __l = array in let __i = one_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (rec_ternary_search (Obj.repr (left)) (Obj.repr ((one_third - 1))) (array) (Obj.repr (target))) : int); raise Return
  );
  if ((let __l = array in let __i = two_third in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < target) then (
  __ret := (Obj.magic (rec_ternary_search (Obj.repr ((two_third + 1))) (Obj.repr (right)) (array) (Obj.repr (target))) : int); raise Return
  );
  __ret := (Obj.magic (rec_ternary_search (Obj.repr ((one_third + 1))) (Obj.repr ((two_third - 1))) (array) (Obj.repr (target))) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let test_list = ref ([0; 1; 2; 8; 13; 17; 19; 32; 42]) in
  print_endline ((string_of_int (ite_ternary_search (!test_list) (Obj.repr (3)))));
  print_endline ((string_of_int (ite_ternary_search (!test_list) (Obj.repr (13)))));
  print_endline ((string_of_int (rec_ternary_search (Obj.repr (0)) (Obj.repr ((List.length (!test_list) - 1))) (!test_list) (Obj.repr (3)))));
  print_endline ((string_of_int (rec_ternary_search (Obj.repr (0)) (Obj.repr ((List.length (!test_list) - 1))) (!test_list) (Obj.repr (13)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
