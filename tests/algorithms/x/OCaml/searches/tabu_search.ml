(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec path_cost path graph =
  let __ret = ref 0 in
  (try
  let path = (Obj.magic path : string list) in
  let graph = (Obj.magic graph : (string * (string * int) list) list) in
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < (List.length (path) - 1)) do
    try
  let u = (let __l = path in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let v = (let __l = path in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  total := (!total + List.assoc (__str (v)) (List.assoc (__str (u)) (graph)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : int); raise Return
  with Return -> !__ret)

and generate_first_solution graph start =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * (string * int) list) list) in
  let path = ref (([] : (string) list)) in
  let visiting = ref (start) in
  let total = ref (0) in
  (try while (List.length (!path) < List.length (graph)) do
    try
  path := (Obj.magic (List.append (!path) [(Obj.magic (!visiting) : string)]) : string list);
  let best_node = ref ("") in
  let best_cost = ref (1000000) in
  (try List.iter (fun (n, _) ->
    try
  if (not ((List.mem n !path)) && (List.assoc (__str (n)) (List.assoc (__str (!visiting)) (graph)) < !best_cost)) then (
  best_cost := List.assoc (__str (n)) (List.assoc (__str (!visiting)) (graph));
  best_node := n;
  );
    with Continue -> ()) (List.assoc (__str (!visiting)) (graph)) with Break -> ());
  if (!best_node = "") then (
  raise Break;
  );
  total := (!total + !best_cost);
  visiting := !best_node;
    with Continue -> ()
  done with Break -> ());
  path := (Obj.magic (List.append (!path) [(Obj.magic (start) : string)]) : string list);
  total := (!total + List.assoc (__str (start)) (List.assoc (__str (!visiting)) (graph)));
  __ret := (Obj.magic ([(__str ("path"), Obj.repr (!path)); (__str ("cost"), Obj.repr (!total))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and copy_path path =
  let __ret = ref ([] : (string) list) in
  (try
  let path = (Obj.magic path : string list) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (path)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = path in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string)]) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and find_neighborhood sol graph =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let sol = (Obj.magic sol : (string * Obj.t) list) in
  let graph = (Obj.magic graph : (string * (string * int) list) list) in
  let neighbors = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (1) in
  (try while (!i < (List.length ((Obj.obj (List.assoc (__str ("path")) (sol) : Obj.t) : string list)) - 1)) do
    try
  let j = ref (1) in
  (try while (!j < (List.length ((Obj.obj (List.assoc (__str ("path")) (sol) : Obj.t) : string list)) - 1)) do
    try
  if (!i <> !j) then (
  let new_path = ref (copy_path ((Obj.obj (List.assoc (__str ("path")) (sol) : Obj.t) : string list))) in
  let tmp = (let __l = !new_path in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  new_path := (List.mapi (fun __i __x -> if __i = !i then (let __l = !new_path in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!new_path));
  new_path := (List.mapi (fun __i __x -> if __i = !j then tmp else __x) (!new_path));
  let cost = path_cost (!new_path) ((Obj.magic graph : (string * (string * int) list) list)) in
  neighbors := (Obj.magic (List.append (!neighbors) [(Obj.magic ([(__str ("path"), Obj.repr (!new_path)); (__str ("cost"), Obj.repr (cost))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!neighbors) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and find_swap a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : string list) in
  let b = (Obj.magic b : string list) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic ([(__str ("a"), Obj.repr ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))); (__str ("b"), Obj.repr ((let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))]) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("a"), Obj.repr ("")); (__str ("b"), Obj.repr (""))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and tabu_search first graph iters size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let first = (Obj.magic first : (string * Obj.t) list) in
  let graph = (Obj.magic graph : (string * (string * int) list) list) in
  let iters = (Obj.magic iters : int) in
  let size = (Obj.magic size : int) in
  let solution = ref (first) in
  let best = ref (first) in
  let tabu = ref (([] : ((string * Obj.t) list) list)) in
  let count = ref (0) in
  (try while (!count < iters) do
    try
  let neighborhood = ref (find_neighborhood ((Obj.magic !solution : (string * Obj.t) list)) ((Obj.magic graph : (string * (string * int) list) list))) in
  if (List.length (!neighborhood) = 0) then (
  raise Break;
  );
  let best_neighbor = ref ((let __l = !neighborhood in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let best_move = ref (find_swap ((Obj.obj (List.assoc (__str ("path")) (!solution) : Obj.t) : string list)) ((Obj.obj (List.assoc (__str ("path")) (!best_neighbor) : Obj.t) : string list))) in
  let i = ref (1) in
  (try while (!i < List.length (!neighborhood)) do
    try
  let cand = (let __l = !neighborhood in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let move = find_swap ((Obj.obj (List.assoc (__str ("path")) (!solution) : Obj.t) : string list)) ((Obj.obj (List.assoc (__str ("path")) (cand) : Obj.t) : string list)) in
  let forbidden = ref (false) in
  let t = ref (0) in
  (try while (!t < List.length (!tabu)) do
    try
  if ((((Obj.obj (List.assoc (__str ("a")) ((let __l = !tabu in let __i = !t in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : Obj.t) : string) = (Obj.obj (List.assoc (__str ("a")) (move) : Obj.t) : string)) && ((Obj.obj (List.assoc (__str ("b")) ((let __l = !tabu in let __i = !t in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : Obj.t) : string) = (Obj.obj (List.assoc (__str ("b")) (move) : Obj.t) : string))) || (((Obj.obj (List.assoc (__str ("a")) ((let __l = !tabu in let __i = !t in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : Obj.t) : string) = (Obj.obj (List.assoc (__str ("b")) (move) : Obj.t) : string)) && ((Obj.obj (List.assoc (__str ("b")) ((let __l = !tabu in let __i = !t in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : Obj.t) : string) = (Obj.obj (List.assoc (__str ("a")) (move) : Obj.t) : string)))) then (
  forbidden := true;
  );
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  if ((!forbidden = false) && ((Obj.obj (List.assoc (__str ("cost")) (cand) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("cost")) (!best_neighbor) : Obj.t) : int))) then (
  best_neighbor := cand;
  best_move := move;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  solution := !best_neighbor;
  tabu := (Obj.magic (List.append (!tabu) [(Obj.magic (!best_move) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  if (List.length (!tabu) > size) then (
  let new_tab = ref (([] : ((string * Obj.t) list) list)) in
  let j = ref (1) in
  (try while (!j < List.length (!tabu)) do
    try
  new_tab := (Obj.magic (List.append (!new_tab) [(Obj.magic ((let __l = !tabu in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  tabu := (Obj.magic !new_tab : (string * Obj.t) list list);
  );
  if ((Obj.obj (List.assoc (__str ("cost")) (!solution) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("cost")) (!best) : Obj.t) : int)) then (
  best := (Obj.magic !solution : (string * Obj.t) list);
  );
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!best) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let graph = ref ([(__str ("a"), Obj.repr ([(__str ("b"), 20); (__str ("c"), 18); (__str ("d"), 22); (__str ("e"), 26)])); (__str ("b"), Obj.repr ([(__str ("a"), 20); (__str ("c"), 10); (__str ("d"), 11); (__str ("e"), 12)])); (__str ("c"), Obj.repr ([(__str ("a"), 18); (__str ("b"), 10); (__str ("d"), 23); (__str ("e"), 24)])); (__str ("d"), Obj.repr ([(__str ("a"), 22); (__str ("b"), 11); (__str ("c"), 23); (__str ("e"), 40)])); (__str ("e"), Obj.repr ([(__str ("a"), 26); (__str ("b"), 12); (__str ("c"), 24); (__str ("d"), 40)]))])
let first = generate_first_solution ((Obj.magic !graph : (string * (string * int) list) list)) ("a")
let best = tabu_search (first) ((Obj.magic !graph : (string * (string * int) list) list)) (Obj.repr (4)) (Obj.repr (3))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str ((Obj.obj (List.assoc (__str ("path")) (best) : Obj.t) : string list))));
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("cost")) (best) : Obj.t) : int))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
