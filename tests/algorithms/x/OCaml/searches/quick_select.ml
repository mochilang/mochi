(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec partition data pivot =
  let __ret = ref ([] : (int list) list) in
  (try
  let data = (Obj.magic data : int list) in
  let pivot = (Obj.magic pivot : int) in
  let less = ref (([] : (int) list)) in
  let equal = ref (([] : (int) list)) in
  let greater = ref (([] : (int) list)) in
  (try for i = 0 to (List.length (data) - 1) do
    try
  let v = (let __l = data in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (v < pivot) then (
  less := (Obj.magic (List.append (!less) [(Obj.magic (v) : int)]) : int list);
  ) else (
  if (v > pivot) then (
  greater := (Obj.magic (List.append (!greater) [(Obj.magic (v) : int)]) : int list);
  ) else (
  equal := (Obj.magic (List.append (!equal) [(Obj.magic (v) : int)]) : int list);
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([!less; !equal; !greater]) : int list list); raise Return
  with Return -> !__ret)

and quick_select items index =
  let __ret = ref 0 in
  (try
  let items = (Obj.magic items : int list) in
  let index = (Obj.magic index : int) in
  if ((index < 0) || (index >= List.length (items))) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let pivot = (let __l = items in let __i = (List.length (items) / 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let parts = ref (partition (items) (Obj.repr (pivot))) in
  let smaller = ref ((let __l = !parts in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let equal = ref ((let __l = !parts in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let larger = ref ((let __l = !parts in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let count = List.length (!equal) in
  let m = List.length (!smaller) in
  if ((m <= index) && (index < (m + count))) then (
  __ret := (Obj.magic (pivot) : int); raise Return
  ) else (
  if (index < m) then (
  __ret := (Obj.magic (quick_select (!smaller) (Obj.repr (index))) : int); raise Return
  ) else (
  __ret := (Obj.magic (quick_select (!larger) (Obj.repr ((index - (m + count))))) : int); raise Return
  );
  );
    !__ret
  with Return -> !__ret)

and median items =
  let __ret = ref 0.0 in
  (try
  let items = (Obj.magic items : int list) in
  let n = List.length (items) in
  let mid = (n / 2) in
  if (((n mod 2 + 2) mod 2) <> 0) then (
  __ret := (Obj.magic ((1.0 *. float_of_int (quick_select (items) (Obj.repr (mid))))) : float); raise Return
  ) else (
  let low = quick_select (items) (Obj.repr ((mid - 1))) in
  let high = quick_select (items) (Obj.repr (mid)) in
  __ret := (Obj.magic (((1.0 *. float_of_int ((low + high))) /. 2.0)) : float); raise Return
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (quick_select ([2; 4; 5; 7; 899; 54; 32]) (Obj.repr (5)))));
  print_endline ((string_of_int (quick_select ([2; 4; 5; 7; 899; 54; 32]) (Obj.repr (1)))));
  print_endline ((string_of_int (quick_select ([5; 4; 3; 2]) (Obj.repr (2)))));
  print_endline ((string_of_int (quick_select ([3; 5; 7; 10; 2; 12]) (Obj.repr (3)))));
  print_endline ((Printf.sprintf "%.16g" (median ([3; 2; 2; 9; 9]))));
  print_endline ((Printf.sprintf "%.16g" (median ([2; 2; 9; 9; 9; 3]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
