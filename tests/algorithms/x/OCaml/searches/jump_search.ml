(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec int_sqrt n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let x = ref (0) in
  (try while (((!x + 1) * (!x + 1)) <= n) do
    try
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and jump_search arr item =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let item = (Obj.magic item : int) in
  let arr_size = List.length (arr) in
  let block_size = int_sqrt (Obj.repr (arr_size)) in
  let prev = ref (0) in
  let step = ref (block_size) in
  (try while ((!step < arr_size) && ((let __l = arr in let __i = (!step - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < item)) do
    try
  prev := !step;
  step := (!step + block_size);
  if (!prev >= arr_size) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  (try while ((!prev < arr_size) && ((let __l = arr in let __i = !prev in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < item)) do
    try
  prev := (!prev + 1);
  if (!prev = !step) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  if ((!prev < arr_size) && ((let __l = arr in let __i = !prev in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = item)) then (
  __ret := (Obj.magic (!prev) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((string_of_int (jump_search ([0; 1; 2; 3; 4; 5]) (Obj.repr (3)))));
  print_endline ((string_of_int (jump_search ([-(5); -(2); -(1)]) (Obj.repr (-(1))))));
  print_endline ((string_of_int (jump_search ([0; 5; 10; 20]) (Obj.repr (8)))));
  print_endline ((string_of_int (jump_search ([0; 1; 1; 2; 3; 5; 8; 13; 21; 34; 55; 89; 144; 233; 377; 610]) (Obj.repr (55)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
