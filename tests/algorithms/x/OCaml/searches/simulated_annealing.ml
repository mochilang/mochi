(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec score p f =
  let __ret = ref 0.0 in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  __ret := (Obj.magic (f (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float)))) : float); raise Return
  with Return -> !__ret)

and get_neighbors p =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let s = (Obj.obj (List.assoc (__str ("step")) (p) : Obj.t) : float) in
  let ns = ref (([] : ((string * Obj.t) list) list)) in
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float) -. s))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float) -. s))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float) -. s))); (__str ("y"), Obj.repr ((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float) -. s))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float) +. s))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr ((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float) -. s))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr ((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float) +. s))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float) +. s))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float) -. s))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float) +. s))); (__str ("y"), Obj.repr ((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  ns := (Obj.magic (List.append (!ns) [(Obj.magic ([(__str ("x"), Obj.repr (((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float) +. s))); (__str ("y"), Obj.repr (((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float) +. s))); (__str ("step"), Obj.repr (s))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  __ret := (Obj.magic (!ns) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and remove_at lst idx =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let lst = (Obj.magic lst : (string * Obj.t) list list) in
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  if (!i <> idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = lst in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let seed = ref (1)
let rec rand () =
  let __ret = ref 0 in
  (try
  let _t = _now () in
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)

and random_float () =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic ((float_of_int (rand ()) /. 2147483648.0)) : float); raise Return
  with Return -> !__ret)

and randint low high =
  let __ret = ref 0 in
  (try
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  __ret := (Obj.magic ((((rand () mod ((high - low) + 1) + ((high - low) + 1)) mod ((high - low) + 1)) + low)) : int); raise Return
  with Return -> !__ret)

and expApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = ref (x) in
  let is_neg = ref (false) in
  if (x < 0.0) then (
  is_neg := true;
  y := (-.(x));
  );
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 30) do
    try
  term := ((!term *. !y) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  if !is_neg then (
  __ret := (Obj.magic ((1.0 /. !sum)) : float); raise Return
  );
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and simulated_annealing search_prob f find_max max_x min_x max_y min_y start_temp rate_of_decrease threshold_temp =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let search_prob = (Obj.magic search_prob : (string * Obj.t) list) in
  let max_x = (Obj.magic max_x : float) in
  let min_x = (Obj.magic min_x : float) in
  let max_y = (Obj.magic max_y : float) in
  let min_y = (Obj.magic min_y : float) in
  let start_temp = (Obj.magic start_temp : float) in
  let rate_of_decrease = (Obj.magic rate_of_decrease : float) in
  let threshold_temp = (Obj.magic threshold_temp : float) in
  let search_end = ref (false) in
  let current_state = ref (search_prob) in
  let current_temp = ref (start_temp) in
  let best_state = ref (!current_state) in
  (try while not (!search_end) do
    try
  let current_score = score ((Obj.magic !current_state : (string * Obj.t) list)) (f) in
  if (score ((Obj.magic !best_state : (string * Obj.t) list)) (f) < current_score) then (
  best_state := (Obj.magic !current_state : (string * Obj.t) list);
  );
  let next_state = ref (!current_state) in
  let found_next = ref (false) in
  let neighbors = ref (get_neighbors ((Obj.magic !current_state : (string * Obj.t) list))) in
  (try while (not (!found_next) && (List.length (!neighbors) > 0)) do
    try
  let idx = randint (Obj.repr (0)) (Obj.repr ((List.length (!neighbors) - 1))) in
  let picked_neighbor = (let __l = !neighbors in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  neighbors := remove_at (!neighbors) (Obj.repr (idx));
  if (((((Obj.obj (List.assoc (__str ("x")) (picked_neighbor) : Obj.t) : float) > max_x) || ((Obj.obj (List.assoc (__str ("x")) (picked_neighbor) : Obj.t) : float) < min_x)) || ((Obj.obj (List.assoc (__str ("y")) (picked_neighbor) : Obj.t) : float) > max_y)) || ((Obj.obj (List.assoc (__str ("y")) (picked_neighbor) : Obj.t) : float) < min_y)) then (
  raise Continue;
  );
  let change = ref ((score (picked_neighbor) (f) -. current_score)) in
  if not (find_max) then (
  change := (-.(!change));
  );
  if (!change > 0.0) then (
  next_state := picked_neighbor;
  found_next := true;
  ) else (
  let probability = expApprox (Obj.repr ((!change /. !current_temp))) in
  if (random_float () < probability) then (
  next_state := picked_neighbor;
  found_next := true;
  );
  );
    with Continue -> ()
  done with Break -> ());
  current_temp := (!current_temp -. (!current_temp *. rate_of_decrease));
  if ((!current_temp < threshold_temp) || not (!found_next)) then (
  search_end := true;
  ) else (
  current_state := (Obj.magic !next_state : (string * Obj.t) list);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!best_state) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and test_f1 x y =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  __ret := (Obj.magic (((x *. x) +. (y *. y))) : float); raise Return
  with Return -> !__ret)

and test_f2 x y =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  __ret := (Obj.magic ((((3.0 *. x) *. x) -. (6.0 *. y))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let prob1 = [(__str ("x"), Obj.repr (12.0)); (__str ("y"), Obj.repr (47.0)); (__str ("step"), Obj.repr (1.0))] in
  let min_state = simulated_annealing (prob1) ((Obj.magic test_f1 : Obj.t -> Obj.t -> float)) (false) (Obj.repr (100.0)) (Obj.repr (5.0)) (Obj.repr (50.0)) (Obj.repr ((-.(5.0)))) (Obj.repr (100.0)) (Obj.repr (0.01)) (Obj.repr (1.0)) in
  print_endline ("min1");
  print_endline (string_of_float (test_f1 (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (min_state) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (min_state) : Obj.t) : float)))));
  let prob2 = [(__str ("x"), Obj.repr (12.0)); (__str ("y"), Obj.repr (47.0)); (__str ("step"), Obj.repr (1.0))] in
  let max_state = simulated_annealing (prob2) ((Obj.magic test_f1 : Obj.t -> Obj.t -> float)) (true) (Obj.repr (100.0)) (Obj.repr (5.0)) (Obj.repr (50.0)) (Obj.repr ((-.(5.0)))) (Obj.repr (100.0)) (Obj.repr (0.01)) (Obj.repr (1.0)) in
  print_endline ("max1");
  print_endline (string_of_float (test_f1 (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (max_state) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (max_state) : Obj.t) : float)))));
  let prob3 = [(__str ("x"), Obj.repr (3.0)); (__str ("y"), Obj.repr (4.0)); (__str ("step"), Obj.repr (1.0))] in
  let min_state2 = simulated_annealing (prob3) ((Obj.magic test_f2 : Obj.t -> Obj.t -> float)) (false) (Obj.repr (1000.0)) (Obj.repr ((-.(1000.0)))) (Obj.repr (1000.0)) (Obj.repr ((-.(1000.0)))) (Obj.repr (100.0)) (Obj.repr (0.01)) (Obj.repr (1.0)) in
  print_endline ("min2");
  print_endline (string_of_float (test_f2 (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (min_state2) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (min_state2) : Obj.t) : float)))));
  let prob4 = [(__str ("x"), Obj.repr (3.0)); (__str ("y"), Obj.repr (4.0)); (__str ("step"), Obj.repr (1.0))] in
  let max_state2 = simulated_annealing (prob4) ((Obj.magic test_f2 : Obj.t -> Obj.t -> float)) (true) (Obj.repr (1000.0)) (Obj.repr ((-.(1000.0)))) (Obj.repr (1000.0)) (Obj.repr ((-.(1000.0)))) (Obj.repr (100.0)) (Obj.repr (0.01)) (Obj.repr (1.0)) in
  print_endline ("max2");
  print_endline (string_of_float (test_f2 (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (max_state2) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (max_state2) : Obj.t) : float)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
