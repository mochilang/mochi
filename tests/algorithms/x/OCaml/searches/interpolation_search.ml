(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec interpolation_search arr item =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let item = (Obj.magic item : int) in
  let left = ref (0) in
  let right = ref ((List.length (arr) - 1)) in
  (try while (!left <= !right) do
    try
  if ((let __l = arr in let __i = !left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (let __l = arr in let __i = !right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  if ((let __l = arr in let __i = !left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = item) then (
  __ret := (Obj.magic (!left) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let point = (!left + (((item - (let __l = arr in let __i = !left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) * (!right - !left)) / ((let __l = arr in let __i = !right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - (let __l = arr in let __i = !left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  if ((point < 0) || (point >= List.length (arr))) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let current = (let __l = arr in let __i = point in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (current = item) then (
  __ret := (Obj.magic (point) : int); raise Return
  );
  if (point < !left) then (
  right := !left;
  left := point;
  ) else (
  if (point > !right) then (
  left := !right;
  right := point;
  ) else (
  if (item < current) then (
  right := (point - 1);
  ) else (
  left := (point + 1);
  );
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and interpolation_search_recursive arr item left right =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let item = (Obj.magic item : int) in
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  if (left > right) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  if ((let __l = arr in let __i = left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (let __l = arr in let __i = right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  if ((let __l = arr in let __i = left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = item) then (
  __ret := (Obj.magic (left) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let point = (left + (((item - (let __l = arr in let __i = left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) * (right - left)) / ((let __l = arr in let __i = right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - (let __l = arr in let __i = left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  if ((point < 0) || (point >= List.length (arr))) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  if ((let __l = arr in let __i = point in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = item) then (
  __ret := (Obj.magic (point) : int); raise Return
  );
  if (point < left) then (
  __ret := (Obj.magic (interpolation_search_recursive (arr) (Obj.repr (item)) (Obj.repr (point)) (Obj.repr (left))) : int); raise Return
  );
  if (point > right) then (
  __ret := (Obj.magic (interpolation_search_recursive (arr) (Obj.repr (item)) (Obj.repr (right)) (Obj.repr (left))) : int); raise Return
  );
  if ((let __l = arr in let __i = point in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > item) then (
  __ret := (Obj.magic (interpolation_search_recursive (arr) (Obj.repr (item)) (Obj.repr (left)) (Obj.repr ((point - 1)))) : int); raise Return
  );
  __ret := (Obj.magic (interpolation_search_recursive (arr) (Obj.repr (item)) (Obj.repr ((point + 1))) (Obj.repr (right))) : int); raise Return
  with Return -> !__ret)

and interpolation_search_by_recursion arr item =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let item = (Obj.magic item : int) in
  __ret := (Obj.magic (interpolation_search_recursive (arr) (Obj.repr (item)) (Obj.repr (0)) (Obj.repr ((List.length (arr) - 1)))) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (interpolation_search ([1; 2; 3; 4; 5]) (Obj.repr (2)))));
  print_endline ((string_of_int (interpolation_search ([1; 2; 3; 4; 5]) (Obj.repr (6)))));
  print_endline ((string_of_int (interpolation_search_by_recursion ([0; 5; 7; 10; 15]) (Obj.repr (5)))));
  print_endline ((string_of_int (interpolation_search_by_recursion ([0; 5; 7; 10; 15]) (Obj.repr (100)))));
  print_endline ((string_of_int (interpolation_search_by_recursion ([5; 5; 5; 5; 5]) (Obj.repr (3)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
