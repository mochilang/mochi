(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec set_at_int xs idx value =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let idx = (Obj.magic idx : int) in
  let value = (Obj.magic value : int) in
  let i = ref (0) in
  let res = ref (([] : (int) list)) in
  (try while (!i < List.length (xs)) do
    try
  if (!i = idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (value) : int)]) : int list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and sort_int xs =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let res = ref (xs) in
  let i = ref (1) in
  (try while (!i < List.length (!res)) do
    try
  let key = (let __l = !res in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && ((let __l = !res in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > key)) do
    try
  res := (Obj.magic set_at_int (!res) (Obj.repr ((!j + 1))) (Obj.repr ((let __l = !res in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int list);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic set_at_int (!res) (Obj.repr ((!j + 1))) (Obj.repr (key)) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and median_of_five arr =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let sorted = ref (sort_int (arr)) in
  __ret := (Obj.magic ((let __l = !sorted in let __i = (List.length (!sorted) / 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int); raise Return
  with Return -> !__ret)

and median_of_medians arr =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  if (List.length (arr) <= 5) then (
  __ret := (Obj.magic (median_of_five (arr)) : int); raise Return
  );
  let medians = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  if ((!i + 5) <= List.length (arr)) then (
  medians := (Obj.magic (List.append (!medians) [(Obj.magic (median_of_five (List.of_seq (Seq.take ((!i + 5) - !i) (Seq.drop !i (List.to_seq (arr)))))) : int)]) : int list);
  ) else (
  medians := (Obj.magic (List.append (!medians) [(Obj.magic (median_of_five (List.of_seq (Seq.take (List.length (arr) - !i) (Seq.drop !i (List.to_seq (arr)))))) : int)]) : int list);
  );
  i := (!i + 5);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (median_of_medians (!medians)) : int); raise Return
  with Return -> !__ret)

and quick_select arr target =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let target = (Obj.magic target : int) in
  if (target > List.length (arr)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let x = median_of_medians (arr) in
  let left = ref (([] : (int) list)) in
  let right = ref (([] : (int) list)) in
  let check = ref (false) in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  if ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < x) then (
  left := (Obj.magic (List.append (!left) [(Obj.magic ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  ) else (
  if ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > x) then (
  right := (Obj.magic (List.append (!right) [(Obj.magic ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  ) else (
  if ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = x) then (
  if not (!check) then (
  check := true;
  ) else (
  right := (Obj.magic (List.append (!right) [(Obj.magic ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  ) else (
  right := (Obj.magic (List.append (!right) [(Obj.magic ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let rank_x = (List.length (!left) + 1) in
  let answer = ref (0) in
  if (rank_x = target) then (
  answer := x;
  ) else (
  if (rank_x > target) then (
  answer := quick_select (!left) (Obj.repr (target));
  ) else (
  answer := quick_select (!right) (Obj.repr ((target - rank_x)));
  );
  );
  __ret := (Obj.magic (!answer) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((string_of_int (median_of_five ([5; 4; 3; 2]))));
  print_endline ((string_of_int (quick_select ([2; 4; 5; 7; 899; 54; 32]) (Obj.repr (5)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
