(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and carrier_concentration electron_conc hole_conc intrinsic_conc =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let electron_conc = (Obj.magic electron_conc : float) in
  let hole_conc = (Obj.magic hole_conc : float) in
  let intrinsic_conc = (Obj.magic intrinsic_conc : float) in
  let zero_count = ref (0) in
  if (electron_conc = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (hole_conc = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (intrinsic_conc = 0.0) then (
  zero_count := (!zero_count + 1);
  );
  if (!zero_count <> 1) then (
  (failwith ("You cannot supply more or less than 2 values"));
  );
  if (electron_conc < 0.0) then (
  (failwith ("Electron concentration cannot be negative in a semiconductor"));
  );
  if (hole_conc < 0.0) then (
  (failwith ("Hole concentration cannot be negative in a semiconductor"));
  );
  if (intrinsic_conc < 0.0) then (
  (failwith ("Intrinsic concentration cannot be negative in a semiconductor"));
  );
  if (electron_conc = 0.0) then (
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ("electron_conc")); (__str ("value"), Obj.repr (((intrinsic_conc *. intrinsic_conc) /. hole_conc)))]) : (string * Obj.t) list); raise Return
  );
  if (hole_conc = 0.0) then (
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ("hole_conc")); (__str ("value"), Obj.repr (((intrinsic_conc *. intrinsic_conc) /. electron_conc)))]) : (string * Obj.t) list); raise Return
  );
  if (intrinsic_conc = 0.0) then (
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ("intrinsic_conc")); (__str ("value"), Obj.repr (sqrtApprox (Obj.repr ((electron_conc *. hole_conc)))))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ("")); (__str ("value"), Obj.repr ((-.(1.0))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let r1 = carrier_concentration (Obj.repr (25.0)) (Obj.repr (100.0)) (Obj.repr (0.0)) in
  print_endline ((((Obj.obj (List.assoc (__str ("name")) (r1) : Obj.t) : string) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("value")) (r1) : Obj.t) : float)))));
  let r2 = carrier_concentration (Obj.repr (0.0)) (Obj.repr (1600.0)) (Obj.repr (200.0)) in
  print_endline ((((Obj.obj (List.assoc (__str ("name")) (r2) : Obj.t) : string) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("value")) (r2) : Obj.t) : float)))));
  let r3 = carrier_concentration (Obj.repr (1000.0)) (Obj.repr (0.0)) (Obj.repr (1200.0)) in
  print_endline ((((Obj.obj (List.assoc (__str ("name")) (r3) : Obj.t) : string) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("value")) (r3) : Obj.t) : float)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
