(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec expApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = ref (x) in
  let is_neg = ref (false) in
  if (x < 0.0) then (
  is_neg := true;
  y := (-.(x));
  );
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 30) do
    try
  term := ((!term *. !y) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  if !is_neg then (
  __ret := (Obj.magic ((1.0 /. !sum)) : float); raise Return
  );
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and round3 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let scaled = ref ((x *. 1000.0)) in
  if (!scaled >= 0.0) then (
  scaled := (!scaled +. 0.5);
  ) else (
  scaled := (!scaled -. 0.5);
  );
  let scaled_int = (Obj.magic !scaled : int) in
  __ret := (Obj.magic ((float_of_int (scaled_int) /. 1000.0)) : float); raise Return
  with Return -> !__ret)

and charging_capacitor source_voltage resistance capacitance time_sec =
  let __ret = ref 0.0 in
  (try
  let source_voltage = (Obj.magic source_voltage : float) in
  let resistance = (Obj.magic resistance : float) in
  let capacitance = (Obj.magic capacitance : float) in
  let time_sec = (Obj.magic time_sec : float) in
  if (source_voltage <= 0.0) then (
  (failwith ("Source voltage must be positive."));
  );
  if (resistance <= 0.0) then (
  (failwith ("Resistance must be positive."));
  );
  if (capacitance <= 0.0) then (
  (failwith ("Capacitance must be positive."));
  );
  let exponent = ((-.(time_sec)) /. (resistance *. capacitance)) in
  let voltage = (source_voltage *. (1.0 -. expApprox (Obj.repr (exponent)))) in
  __ret := (Obj.magic (round3 (Obj.repr (voltage))) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_float (charging_capacitor (Obj.repr (0.2)) (Obj.repr (0.9)) (Obj.repr (8.4)) (Obj.repr (0.5))));
  print_endline (string_of_float (charging_capacitor (Obj.repr (2.2)) (Obj.repr (3.5)) (Obj.repr (2.4)) (Obj.repr (9.0))));
  print_endline (string_of_float (charging_capacitor (Obj.repr (15.0)) (Obj.repr (200.0)) (Obj.repr (20.0)) (Obj.repr (2.0))));
  print_endline (string_of_float (charging_capacitor (Obj.repr (20.0)) (Obj.repr (2000.0)) (Obj.repr (0.0003)) (Obj.repr (4.0))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
