(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref ((Obj.magic x : int)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  p := (!p *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : float); raise Return
  with Return -> !__ret)

and roundn x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let m = pow10 (Obj.repr (n)) in
  __ret := (Obj.magic ((floor (Obj.repr (((x *. m) +. 0.5))) /. m)) : float); raise Return
  with Return -> !__ret)

and pad signal target =
  let __ret = ref ([] : (float) list) in
  (try
  let target = (Obj.magic target : int) in
  let s = ref (signal) in
  (try while (List.length (!s) < target) do
    try
  s := (List.append (!s) [(Obj.magic (0.0) : float)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : float list); raise Return
  with Return -> !__ret)

and circular_convolution a b =
  let __ret = ref ([] : (float) list) in
  (try
  let n1 = List.length (a) in
  let n2 = List.length (b) in
  let n = if (n1 > n2) then n1 else n2 in
  let x = ref (pad (a) (Obj.repr (n))) in
  let y = ref (pad (b) (Obj.repr (n))) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < n) do
    try
  let j = (((!i - !k) mod n + n) mod n) in
  let idx = if (j < 0) then (j + n) else j in
  sum := (!sum +. (List.nth (!x) (!k) *. List.nth (!y) (idx)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (roundn (Obj.repr (!sum)) (Obj.repr (2))) : float)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)


let example1 = ref (circular_convolution ([2.0; 1.0; 2.0; (-.(1.0))]) ([1.0; 2.0; 3.0; 4.0]))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!example1)));
  let example2 = ref (circular_convolution ([0.2; 0.4; 0.6; 0.8; 1.0; 1.2; 1.4; 1.6]) ([0.1; 0.3; 0.5; 0.7; 0.9; 1.1; 1.3; 1.5])) in
  print_endline ((__str (!example2)));
  let example3 = ref (circular_convolution ([(-.(1.0)); 1.0; 2.0; (-.(2.0))]) ([0.5; 1.0; (-.(1.0)); 2.0; 0.75])) in
  print_endline ((__str (!example3)));
  let example4 = ref (circular_convolution ([1.0; (-.(1.0)); 2.0; 3.0; (-.(1.0))]) ([1.0; 2.0; 3.0])) in
  print_endline ((__str (!example4)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
