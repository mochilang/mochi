(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and to_radians deg =
  let __ret = ref 0.0 in
  (try
  let deg = (Obj.magic deg : float) in
  __ret := (Obj.magic (((deg *. _pi) /. 180.0)) : float); raise Return
  with Return -> !__ret)

and sin_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = (2.0 *. float_of_int (!i)) in
  let k2 = (k1 +. 1.0) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cos_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = ((2.0 *. float_of_int (!i)) -. 1.0) in
  let k2 = (2.0 *. float_of_int (!i)) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and rect mag angle =
  let __ret = ref ([] : (float) list) in
  (try
  let mag = (Obj.magic mag : float) in
  let angle = (Obj.magic angle : float) in
  let c = cos_taylor (Obj.repr (angle)) in
  let s = sin_taylor (Obj.repr (angle)) in
  __ret := (Obj.magic ([(mag *. c); (mag *. s)]) : float list); raise Return
  with Return -> !__ret)

and multiply a b =
  let __ret = ref ([] : (float) list) in
  (try
  __ret := (Obj.magic ([((List.nth (a) (0) *. List.nth (b) (0)) -. (List.nth (a) (1) *. List.nth (b) (1))); ((List.nth (a) (0) *. List.nth (b) (1)) +. (List.nth (a) (1) *. List.nth (b) (0)))]) : float list); raise Return
  with Return -> !__ret)

and apparent_power voltage current voltage_angle current_angle =
  let __ret = ref ([] : (float) list) in
  (try
  let voltage = (Obj.magic voltage : float) in
  let current = (Obj.magic current : float) in
  let voltage_angle = (Obj.magic voltage_angle : float) in
  let current_angle = (Obj.magic current_angle : float) in
  let vrad = to_radians (Obj.repr (voltage_angle)) in
  let irad = to_radians (Obj.repr (current_angle)) in
  let vrect = ref (rect (Obj.repr (voltage)) (Obj.repr (vrad))) in
  let irect = ref (rect (Obj.repr (current)) (Obj.repr (irad))) in
  let result = ref (multiply (!vrect) (!irect)) in
  __ret := (Obj.magic (!result) : float list); raise Return
  with Return -> !__ret)

and approx_equal a b eps =
  let __ret = ref false in
  (try
  let eps = (Obj.magic eps : float) in
  __ret := (Obj.magic (((abs_float (List.nth (a) (0) -. List.nth (b) (0)) < eps) && (abs_float (List.nth (a) (1) -. List.nth (b) (1)) < eps))) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
