(* Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:48 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pivot t row col =
  let __ret = ref ([] : (float list) list) in
  (try
  t := (Obj.magic !t : float list list);
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let pivotRow = ref (([] : (float) list)) in
  let pivotVal = (let __l = (let __l = !t in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = col in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  (try for j = 0 to (List.length ((let __l = !t in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) - 1) do
    try
  pivotRow := (Obj.magic (List.append (!pivotRow) [(Obj.magic (((let __l = (let __l = !t in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. pivotVal)) : float)]) : float list);
    with Continue -> ()
  done with Break -> ());
  t := (List.mapi (fun __i __x -> if __i = row then !pivotRow else __x) (!t));
  (try for i = 0 to (List.length (!t) - 1) do
    try
  if (i <> row) then (
  let factor = (let __l = (let __l = !t in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = col in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let newRow = ref (([] : (float) list)) in
  (try for j = 0 to (List.length ((let __l = !t in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) - 1) do
    try
  let value = ((let __l = (let __l = !t in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (factor *. (let __l = !pivotRow in let __i = j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) in
  newRow := (Obj.magic (List.append (!newRow) [(Obj.magic (value) : float)]) : float list);
    with Continue -> ()
  done with Break -> ());
  t := (List.mapi (fun __i __x -> if __i = i then !newRow else __x) (!t));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!t) : float list list); raise Return
  with Return -> !__ret)

and findPivot t =
  let __ret = ref ([] : (int) list) in
  (try
  let t = (Obj.magic t : float list list) in
  let col = ref (0) in
  let minVal = ref (0.0) in
  (try for j = 0 to ((List.length ((let __l = t in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) - 1) - 1) do
    try
  let v = (let __l = (let __l = t in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  if (v < !minVal) then (
  minVal := v;
  col := j;
  );
    with Continue -> ()
  done with Break -> ());
  if (!minVal >= 0.0) then (
  __ret := (Obj.magic ([-(1); -(1)]) : int list); raise Return
  );
  let row = ref (-(1)) in
  let minRatio = ref (0.0) in
  let first = ref (true) in
  (try for i = 1 to (List.length (t) - 1) do
    try
  let coeff = (let __l = (let __l = t in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !col in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  if (coeff > 0.0) then (
  let rhs = (let __l = (let __l = t in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = (List.length ((let __l = t in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) - 1) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let ratio = (rhs /. coeff) in
  if (!first || (ratio < !minRatio)) then (
  minRatio := ratio;
  row := i;
  first := false;
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([!row; !col]) : int list); raise Return
  with Return -> !__ret)

and interpret t nVars =
  let __ret = ref ([] : (string * float) list) in
  (try
  let t = (Obj.magic t : float list list) in
  let nVars = (Obj.magic nVars : int) in
  let lastCol = (List.length ((let __l = t in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) - 1) in
  let p = ref ((let __l = (let __l = t in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = lastCol in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  if (!p < 0.0) then (
  p := (-.(!p));
  );
  let result = ref ([] : (string * float) list) in
  result := ((__str ("P"), !p) :: List.remove_assoc (__str ("P")) (!result));
  (try for i = 0 to (nVars - 1) do
    try
  let nzRow = ref (-(1)) in
  let nzCount = ref (0) in
  (try for r = 0 to (List.length (t) - 1) do
    try
  let val_ = (let __l = (let __l = t in let __i = r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  if (val_ <> 0.0) then (
  nzCount := (!nzCount + 1);
  nzRow := r;
  );
    with Continue -> ()
  done with Break -> ());
  if ((!nzCount = 1) && ((let __l = (let __l = t in let __i = !nzRow in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) = 1.0)) then (
  result := ((__str (("x" ^ (string_of_int (Obj.magic ((i + 1)) : int)))), (let __l = (let __l = t in let __i = !nzRow in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = lastCol in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) :: List.remove_assoc (__str (("x" ^ (string_of_int (Obj.magic ((i + 1)) : int))))) (!result));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : (string * float) list); raise Return
  with Return -> !__ret)

and simplex tab =
  let __ret = ref ([] : (float list) list) in
  (try
  let tab = (Obj.magic tab : float list list) in
  let t = ref (tab) in
  (try while true do
    try
  let p = ref (findPivot (!t)) in
  let row = (let __l = !p in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let col = (let __l = !p in let __i = 1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  if (row < 0) then (
  raise Break;
  );
  t := (Obj.magic pivot (t) (Obj.repr (row)) (Obj.repr (col)) : float list list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!t) : float list list); raise Return
  with Return -> !__ret)


let tableau = ref ([[(-.(1.0)); (-.(1.0)); 0.0; 0.0; 0.0]; [1.0; 3.0; 1.0; 0.0; 4.0]; [3.0; 1.0; 0.0; 1.0; 4.0]])
let finalTab = ref (simplex (!tableau))
let res = ref (interpret (!finalTab) (Obj.repr (2)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (("P: " ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("P")) (!res) with Some v -> v | None -> 0.)) : float))));
  (try for i = 0 to (2 - 1) do
    try
  let key = ("x" ^ (string_of_int (Obj.magic ((i + 1)) : int))) in
  if (List.mem_assoc (__str (key)) !res) then (
  print_endline (((key ^ ": ") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str (key)) (!res) with Some v -> v | None -> 0.)) : float))));
  );
    with Continue -> ()
  done with Break -> ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
