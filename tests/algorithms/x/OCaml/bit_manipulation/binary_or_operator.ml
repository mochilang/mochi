(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:51 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binary_or a b =
  let __ret = ref "" in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if ((a < 0) || (b < 0)) then (
  __ret := (Obj.magic ("ValueError") : string); raise Return
  );
  let res = ref ("") in
  let x = ref (a) in
  let y = ref (b) in
  (try while ((!x > 0) || (!y > 0)) do
    try
  let bit_a = (!x mod 2) in
  let bit_b = (!y mod 2) in
  if ((bit_a = 1) || (bit_b = 1)) then (
  res := ("1" ^ !res);
  ) else (
  res := ("0" ^ !res);
  );
  x := (!x / 2);
  y := (!y / 2);
    with Continue -> ()
  done with Break -> ());
  if (!res = "") then (
  res := "0";
  );
  __ret := (Obj.magic (("0b" ^ !res)) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((binary_or (Obj.repr (25)) (Obj.repr (32))));
  print_endline ((binary_or (Obj.repr (37)) (Obj.repr (50))));
  print_endline ((binary_or (Obj.repr (21)) (Obj.repr (30))));
  print_endline ((binary_or (Obj.repr (58)) (Obj.repr (73))));
  print_endline ((binary_or (Obj.repr (0)) (Obj.repr (255))));
  print_endline ((binary_or (Obj.repr (0)) (Obj.repr (256))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()