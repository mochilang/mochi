(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pad_left_num n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < 5) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and to_binary n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let sign = ref ("") in
  let num = ref (n) in
  if (!num < 0) then (
  sign := "-";
  num := (0 - !num);
  );
  let bits = ref ("") in
  (try while (!num > 0) do
    try
  bits := ((string_of_int ((!num mod 2))) ^ !bits);
  num := ((!num - (!num mod 2)) / 2);
    with Continue -> ()
  done with Break -> ());
  if (!bits = "") then (
  bits := "0";
  );
  let min_width = 8 in
  (try while (String.length (!bits) < (min_width - String.length (!sign))) do
    try
  bits := ("0" ^ !bits);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sign ^ !bits)) : string); raise Return
  with Return -> !__ret)

and show_bits before after =
  let __ret = ref "" in
  (try
  let before = (Obj.magic before : int) in
  let after = (Obj.magic after : int) in
  __ret := (Obj.magic (((((((pad_left_num (Obj.repr (before)) ^ ": ") ^ to_binary (Obj.repr (before))) ^ "\n") ^ pad_left_num (Obj.repr (after))) ^ ": ") ^ to_binary (Obj.repr (after)))) : string); raise Return
  with Return -> !__ret)

and lshift num k =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let k = (Obj.magic k : int) in
  let result = ref (num) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  result := (!result * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and rshift num k =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let k = (Obj.magic k : int) in
  let result = ref (num) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  result := ((!result - (!result mod 2)) / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and swap_odd_even_bits num =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let n = ref (num) in
  if (!n < 0) then (
  n := (!n + 4294967296);
  );
  let result = ref (0) in
  let i = ref (0) in
  (try while (!i < 32) do
    try
  let bit1 = (rshift (Obj.repr (!n)) (Obj.repr (!i)) mod 2) in
  let bit2 = (rshift (Obj.repr (!n)) (Obj.repr ((!i + 1))) mod 2) in
  result := ((!result + lshift (Obj.repr (bit1)) (Obj.repr ((!i + 1)))) + lshift (Obj.repr (bit2)) (Obj.repr (!i)));
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let nums = ref ([-(1); 0; 1; 2; 3; 4; 23; 24]) in
  let i = ref (0) in
  (try while (!i < List.length (!nums)) do
    try
  let n = List.nth (!nums) (!i) in
  print_endline ((show_bits (Obj.repr (n)) (Obj.repr (swap_odd_even_bits (Obj.repr (n))))));
  print_endline ("");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()