(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec excess_3_code number =
  let __ret = ref "" in
  (try
  let number = (Obj.magic number : int) in
  let n = ref (number) in
  if (!n < 0) then (
  n := 0;
  );
  let mapping = ref (["0011"; "0100"; "0101"; "0110"; "0111"; "1000"; "1001"; "1010"; "1011"; "1100"]) in
  let res = ref ("") in
  if (!n = 0) then (
  res := List.nth (!mapping) (0);
  ) else (
  (try while (!n > 0) do
    try
  let digit = (!n mod 10) in
  res := (List.nth (!mapping) (digit) ^ !res);
  n := (!n / 10);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (("0b" ^ !res)) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((excess_3_code (Obj.repr (0))));
  print_endline ((excess_3_code (Obj.repr (3))));
  print_endline ((excess_3_code (Obj.repr (2))));
  print_endline ((excess_3_code (Obj.repr (20))));
  print_endline ((excess_3_code (Obj.repr (120))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()