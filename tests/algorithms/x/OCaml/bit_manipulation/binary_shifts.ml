(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:51 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec repeat_char ch count =
  let __ret = ref "" in
  (try
  let count = (Obj.magic count : int) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < count) do
    try
  res := (!res ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and abs_int n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  __ret := (Obj.magic (-(n)) : int); raise Return
  );
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

and pow2 exp =
  let __ret = ref 0 in
  (try
  let exp = (Obj.magic exp : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  res := (!res * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and to_binary_no_prefix n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let v = ref (n) in
  if (!v < 0) then (
  v := -(!v);
  );
  if (!v = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let res = ref ("") in
  (try while (!v > 0) do
    try
  res := ((string_of_int ((!v mod 2))) ^ !res);
  v := (!v / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and logical_left_shift number shift_amount =
  let __ret = ref "" in
  (try
  let number = (Obj.magic number : int) in
  let shift_amount = (Obj.magic shift_amount : int) in
  if ((number < 0) || (shift_amount < 0)) then (
  (failwith ("both inputs must be positive integers"));
  );
  let binary_number = ("0b" ^ to_binary_no_prefix (Obj.repr (number))) in
  __ret := (Obj.magic ((binary_number ^ repeat_char ("0") (Obj.repr (shift_amount)))) : string); raise Return
  with Return -> !__ret)

and logical_right_shift number shift_amount =
  let __ret = ref "" in
  (try
  let number = (Obj.magic number : int) in
  let shift_amount = (Obj.magic shift_amount : int) in
  if ((number < 0) || (shift_amount < 0)) then (
  (failwith ("both inputs must be positive integers"));
  );
  let binary_number = to_binary_no_prefix (Obj.repr (number)) in
  if (shift_amount >= String.length (binary_number)) then (
  __ret := (Obj.magic ("0b0") : string); raise Return
  );
  let shifted = String.sub binary_number (0) ((String.length (binary_number) - shift_amount) - 0) in
  __ret := (Obj.magic (("0b" ^ shifted)) : string); raise Return
  with Return -> !__ret)

and arithmetic_right_shift number shift_amount =
  let __ret = ref "" in
  (try
  let number = (Obj.magic number : int) in
  let shift_amount = (Obj.magic shift_amount : int) in
  let binary_number = ref ("") in
  if (number >= 0) then (
  binary_number := ("0" ^ to_binary_no_prefix (Obj.repr (number)));
  ) else (
  let length = String.length (to_binary_no_prefix (Obj.repr (-(number)))) in
  let intermediate = (abs_int (Obj.repr (number)) - pow2 (Obj.repr (length))) in
  let bin_repr = to_binary_no_prefix (Obj.repr (intermediate)) in
  binary_number := (("1" ^ repeat_char ("0") (Obj.repr ((length - String.length (bin_repr))))) ^ bin_repr);
  );
  if (shift_amount >= String.length (!binary_number)) then (
  let sign = String.sub !binary_number (0) (1 - 0) in
  __ret := (Obj.magic (("0b" ^ repeat_char (sign) (Obj.repr (String.length (!binary_number))))) : string); raise Return
  );
  let sign = String.sub !binary_number (0) (1 - 0) in
  let shifted = String.sub !binary_number (0) ((String.length (!binary_number) - shift_amount) - 0) in
  __ret := (Obj.magic ((("0b" ^ repeat_char (sign) (Obj.repr (shift_amount))) ^ shifted)) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((logical_left_shift (Obj.repr (17)) (Obj.repr (2))));
  print_endline ((logical_right_shift (Obj.repr (1983)) (Obj.repr (4))));
  print_endline ((arithmetic_right_shift (Obj.repr (-(17))) (Obj.repr (2))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()