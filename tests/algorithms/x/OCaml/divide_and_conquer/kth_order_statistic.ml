(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pivot lst =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (List.nth (lst) (0)) : int); raise Return
  with Return -> !__ret)

and kth_number lst k =
  let __ret = ref 0 in
  (try
  let k = (Obj.magic k : int) in
  let p = pivot (lst) in
  let small = ref (([] : (int) list)) in
  let big = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  let e = List.nth (lst) (!i) in
  if (e < p) then (
  small := (List.append (!small) [(Obj.magic (e) : int)]);
  ) else (
  if (e > p) then (
  big := (List.append (!big) [(Obj.magic (e) : int)]);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (!small) = (k - 1)) then (
  __ret := (Obj.magic (p) : int); raise Return
  ) else (
  if (List.length (!small) < (k - 1)) then (
  __ret := (Obj.magic (kth_number (!big) (Obj.repr (((k - List.length (!small)) - 1)))) : int); raise Return
  ) else (
  __ret := (Obj.magic (kth_number (!small) (Obj.repr (k))) : int); raise Return
  );
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (kth_number ([2; 1; 3; 4; 5]) (Obj.repr (3)))));
  print_endline ((string_of_int (kth_number ([2; 1; 3; 4; 5]) (Obj.repr (1)))));
  print_endline ((string_of_int (kth_number ([2; 1; 3; 4; 5]) (Obj.repr (5)))));
  print_endline ((string_of_int (kth_number ([3; 2; 5; 6; 7; 8]) (Obj.repr (2)))));
  print_endline ((string_of_int (kth_number ([25; 21; 98; 100; 76; 22; 43; 60; 89; 87]) (Obj.repr (4)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()