(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec max_cross_sum arr low mid high =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let low = (Obj.magic low : int) in
  let mid = (Obj.magic mid : int) in
  let high = (Obj.magic high : int) in
  let left_sum = ref ((-.(1000000000000000000.0))) in
  let max_left = ref (-(1)) in
  let sum = ref (0.0) in
  let i = ref (mid) in
  (try while (!i >= low) do
    try
  sum := (!sum +. List.nth (arr) (!i));
  if (!sum > !left_sum) then (
  left_sum := !sum;
  max_left := !i;
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  let right_sum = ref ((-.(1000000000000000000.0))) in
  let max_right = ref (-(1)) in
  sum := 0.0;
  i := (mid + 1);
  (try while (!i <= high) do
    try
  sum := (!sum +. List.nth (arr) (!i));
  if (!sum > !right_sum) then (
  right_sum := !sum;
  max_right := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("start"), Obj.repr (!max_left)); (__str ("end"), Obj.repr (!max_right)); (__str ("sum"), Obj.repr ((!left_sum +. !right_sum)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and max_subarray arr low high =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  if (List.length (arr) = 0) then (
  __ret := (Obj.magic ([(__str ("start"), Obj.repr (-(1))); (__str ("end"), Obj.repr (-(1))); (__str ("sum"), Obj.repr (0.0))]) : (string * Obj.t) list); raise Return
  );
  if (low = high) then (
  __ret := (Obj.magic ([(__str ("start"), Obj.repr (low)); (__str ("end"), Obj.repr (high)); (__str ("sum"), Obj.repr (List.nth (arr) (low)))]) : (string * Obj.t) list); raise Return
  );
  let mid = ((low + high) / 2) in
  let left = max_subarray (arr) (Obj.repr (low)) (Obj.repr (mid)) in
  let right = max_subarray (arr) (Obj.repr ((mid + 1))) (Obj.repr (high)) in
  let cross = max_cross_sum (arr) (Obj.repr (low)) (Obj.repr (mid)) (Obj.repr (high)) in
  if (((Obj.obj (List.assoc (__str ("sum")) (left) : Obj.t) : float) >= (Obj.obj (List.assoc (__str ("sum")) (right) : Obj.t) : float)) && ((Obj.obj (List.assoc (__str ("sum")) (left) : Obj.t) : float) >= (Obj.obj (List.assoc (__str ("sum")) (cross) : Obj.t) : float))) then (
  __ret := (Obj.magic (left) : (string * Obj.t) list); raise Return
  );
  if (((Obj.obj (List.assoc (__str ("sum")) (right) : Obj.t) : float) >= (Obj.obj (List.assoc (__str ("sum")) (left) : Obj.t) : float)) && ((Obj.obj (List.assoc (__str ("sum")) (right) : Obj.t) : float) >= (Obj.obj (List.assoc (__str ("sum")) (cross) : Obj.t) : float))) then (
  __ret := (Obj.magic (right) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic (cross) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and show res =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((((((("[" ^ (string_of_int ((Obj.obj (List.assoc (__str ("start")) (res) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("end")) (res) : Obj.t) : int)))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("sum")) (res) : Obj.t) : float)))) ^ "]"));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let nums1 = ref ([(-.(2.0)); 1.0; (-.(3.0)); 4.0; (-.(1.0)); 2.0; 1.0; (-.(5.0)); 4.0]) in
  let res1 = max_subarray (!nums1) (Obj.repr (0)) (Obj.repr ((List.length (!nums1) - 1))) in
  ignore (show (res1));
  let nums2 = ref ([2.0; 8.0; 9.0]) in
  let res2 = max_subarray (!nums2) (Obj.repr (0)) (Obj.repr ((List.length (!nums2) - 1))) in
  ignore (show (res2));
  let nums3 = ref ([0.0; 0.0]) in
  let res3 = max_subarray (!nums3) (Obj.repr (0)) (Obj.repr ((List.length (!nums3) - 1))) in
  ignore (show (res3));
  let nums4 = ref ([(-.(1.0)); 0.0; 1.0]) in
  let res4 = max_subarray (!nums4) (Obj.repr (0)) (Obj.repr ((List.length (!nums4) - 1))) in
  ignore (show (res4));
  let nums5 = ref ([(-.(2.0)); (-.(3.0)); (-.(1.0)); (-.(4.0)); (-.(6.0))]) in
  let res5 = max_subarray (!nums5) (Obj.repr (0)) (Obj.repr ((List.length (!nums5) - 1))) in
  ignore (show (res5));
  let nums6 = ref ([]) in
  let res6 = max_subarray (!nums6) (Obj.repr (0)) (Obj.repr (0)) in
  ignore (show (res6));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()