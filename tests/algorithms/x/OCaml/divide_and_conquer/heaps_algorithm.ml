(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec permute k arr res =
  let __ret = ref ([] : (int list) list) in
  (try
  let k = (Obj.magic k : int) in
  if (k = 1) then (
  let copy = ref (List.of_seq (Seq.take (List.length (!arr) - 0) (Seq.drop 0 (List.to_seq (!arr))))) in
  __ret := (Obj.magic ((List.append (!res) [(Obj.magic (!copy) : int list)])) : int list list); raise Return
  );
  res := permute (Obj.repr ((k - 1))) (arr) (res);
  let i = ref (0) in
  (try while (!i < (k - 1)) do
    try
  if (((k mod 2 + 2) mod 2) = 0) then (
  let temp = List.nth (!arr) (!i) in
  arr := (List.mapi (fun __i __x -> if __i = !i then List.nth (!arr) ((k - 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (k - 1) then temp else __x) (!arr));
  ) else (
  let temp = List.nth (!arr) (0) in
  arr := (List.mapi (fun __i __x -> if __i = 0 then List.nth (!arr) ((k - 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (k - 1) then temp else __x) (!arr));
  );
  res := permute (Obj.repr ((k - 1))) (arr) (res);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and heaps arr =
  let __ret = ref ([] : (int list) list) in
  (try
  if (List.length (arr) <= 1) then (
  __ret := (Obj.magic ([List.of_seq (Seq.take (List.length (arr) - 0) (Seq.drop 0 (List.to_seq (arr))))]) : int list list); raise Return
  );
  let res = ref ((Obj.magic [] : int list list)) in
  res := permute (Obj.repr (List.length (arr))) (ref (arr)) (res);
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let perms = ref (heaps ([1; 2; 3])) in
  print_endline (__show_list !perms);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()