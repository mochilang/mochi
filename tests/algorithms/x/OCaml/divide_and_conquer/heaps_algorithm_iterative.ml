(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec copy_list arr =
  let __ret = ref ([] : (int) list) in
  (try
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  result := (List.append (!result) [(Obj.magic (List.nth (arr) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and heaps arr =
  let __ret = ref ([] : (int list) list) in
  (try
  if (List.length (!arr) <= 1) then (
  let single = ref ([]) in
  __ret := (Obj.magic ((List.append (!single) [(Obj.magic (copy_list (!arr)) : int list)])) : int list list); raise Return
  );
  let n = List.length (!arr) in
  let c = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  c := (List.append (!c) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref (([] : (int list) list)) in
  res := (List.append (!res) [(Obj.magic (copy_list (!arr)) : int list)]);
  i := 0;
  (try while (!i < n) do
    try
  if (List.nth (!c) (!i) < !i) then (
  if (((!i mod 2 + 2) mod 2) = 0) then (
  let temp = List.nth (!arr) (0) in
  arr := (List.mapi (fun __i __x -> if __i = 0 then List.nth (!arr) (!i) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !i then temp else __x) (!arr));
  ) else (
  let temp = List.nth (!arr) (List.nth (!c) (!i)) in
  arr := (List.mapi (fun __i __x -> if __i = List.nth (!c) (!i) then List.nth (!arr) (!i) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !i then temp else __x) (!arr));
  );
  res := (List.append (!res) [(Obj.magic (copy_list (!arr)) : int list)]);
  c := (List.mapi (fun __i __x -> if __i = !i then (List.nth (!c) (!i) + 1) else __x) (!c));
  i := 0;
  ) else (
  c := (List.mapi (fun __i __x -> if __i = !i then 0 else __x) (!c));
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (heaps (ref ([1; 2; 3])))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()