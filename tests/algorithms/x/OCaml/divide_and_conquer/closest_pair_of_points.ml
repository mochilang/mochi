(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((0.0 -. x)) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and euclidean_distance_sqr p1 p2 =
  let __ret = ref 0.0 in
  (try
  let dx = (List.nth (p1) (0) -. List.nth (p2) (0)) in
  let dy = (List.nth (p1) (1) -. List.nth (p2) (1)) in
  __ret := (Obj.magic (((dx *. dx) +. (dy *. dy))) : float); raise Return
  with Return -> !__ret)

and column_based_sort arr column =
  let __ret = ref ([] : (float list) list) in
  (try
  let column = (Obj.magic column : int) in
  let points = ref (arr) in
  let i = ref (0) in
  (try while (!i < List.length (!points)) do
    try
  let j = ref (0) in
  (try while (!j < (List.length (!points) - 1)) do
    try
  if (List.nth (List.nth (!points) (!j)) (column) > List.nth (List.nth (!points) ((!j + 1))) (column)) then (
  let tmp = ref (List.nth (!points) (!j)) in
  points := (List.mapi (fun __i __x -> if __i = !j then List.nth (!points) ((!j + 1)) else __x) (!points));
  points := (List.mapi (fun __i __x -> if __i = (!j + 1) then !tmp else __x) (!points));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!points) : float list list); raise Return
  with Return -> !__ret)

and dis_between_closest_pair points count min_dis =
  let __ret = ref 0.0 in
  (try
  let count = (Obj.magic count : int) in
  min_dis := (Obj.magic !min_dis : float);
  let i = ref (0) in
  (try while (!i < (count - 1)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < count) do
    try
  let current = euclidean_distance_sqr (List.nth (points) (!i)) (List.nth (points) (!j)) in
  if (current < !min_dis) then (
  min_dis := current;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!min_dis) : float); raise Return
  with Return -> !__ret)

and dis_between_closest_in_strip points count min_dis =
  let __ret = ref 0.0 in
  (try
  let count = (Obj.magic count : int) in
  min_dis := (Obj.magic !min_dis : float);
  let i_start = ref (0) in
  if (6 < (count - 1)) then (
  i_start := 6;
  ) else (
  i_start := (count - 1);
  );
  let i = ref (!i_start) in
  (try while (!i < count) do
    try
  let j_start = ref (0) in
  if ((!i - 6) > 0) then (
  j_start := (!i - 6);
  );
  let j = ref (!j_start) in
  (try while (!j < !i) do
    try
  let current = euclidean_distance_sqr (List.nth (points) (!i)) (List.nth (points) (!j)) in
  if (current < !min_dis) then (
  min_dis := current;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!min_dis) : float); raise Return
  with Return -> !__ret)

and closest_pair_of_points_sqr px py count =
  let __ret = ref 0.0 in
  (try
  let count = (Obj.magic count : int) in
  if (count <= 3) then (
  __ret := (Obj.magic (dis_between_closest_pair (px) (Obj.repr (count)) (ref (1000000000000000000.0))) : float); raise Return
  );
  let mid = (count / 2) in
  let left = closest_pair_of_points_sqr (px) (List.of_seq (Seq.take (mid - 0) (Seq.drop 0 (List.to_seq (py))))) (Obj.repr (mid)) in
  let right = closest_pair_of_points_sqr (py) (List.of_seq (Seq.take (count - mid) (Seq.drop mid (List.to_seq (py))))) (Obj.repr ((count - mid))) in
  let best = ref (left) in
  if (right < !best) then (
  best := right;
  );
  let strip = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (px)) do
    try
  if (abs_float (List.nth (List.nth (px) (!i)) (0) -. List.nth (List.nth (px) (mid)) (0)) < !best) then (
  strip := (List.append (!strip) [(Obj.magic (List.nth (px) (!i)) : float list)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let strip_best = dis_between_closest_in_strip (!strip) (Obj.repr (List.length (!strip))) (best) in
  if (strip_best < !best) then (
  best := strip_best;
  );
  __ret := (Obj.magic (!best) : float); raise Return
  with Return -> !__ret)

and closest_pair_of_points points count =
  let __ret = ref 0.0 in
  (try
  let count = (Obj.magic count : int) in
  let points_sorted_on_x = ref (column_based_sort (points) (Obj.repr (0))) in
  let points_sorted_on_y = ref (column_based_sort (points) (Obj.repr (1))) in
  let dist_sqr = closest_pair_of_points_sqr (!points_sorted_on_x) (!points_sorted_on_y) (Obj.repr (count)) in
  __ret := (Obj.magic (sqrtApprox (Obj.repr (dist_sqr))) : float); raise Return
  with Return -> !__ret)


let points = ref ([[2.0; 3.0]; [12.0; 30.0]; [40.0; 50.0]; [5.0; 1.0]; [12.0; 10.0]; [3.0; 4.0]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (("Distance: " ^ (Printf.sprintf "%.16g" (closest_pair_of_points (!points) (Obj.repr (List.length (!points)))))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()