(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec min_slice a start end_ =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let m = ref (List.nth (a) (start)) in
  let i = ref ((start + 1)) in
  (try while (!i < end_) do
    try
  if (List.nth (a) (!i) < !m) then (
  m := List.nth (a) (!i);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and max_slice a start end_ =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let m = ref (List.nth (a) (start)) in
  let i = ref ((start + 1)) in
  (try while (!i < end_) do
    try
  if (List.nth (a) (!i) > !m) then (
  m := List.nth (a) (!i);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and max_diff_range a start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  if ((end_ - start) = 1) then (
  let v = List.nth (a) (start) in
  __ret := (Obj.magic ([v; v]) : int list); raise Return
  );
  let mid = ((start + end_) / 2) in
  let left = ref (max_diff_range (a) (Obj.repr (start)) (Obj.repr (mid))) in
  let right = ref (max_diff_range (a) (Obj.repr (mid)) (Obj.repr (end_))) in
  let small1 = List.nth (!left) (0) in
  let big1 = List.nth (!left) (1) in
  let small2 = List.nth (!right) (0) in
  let big2 = List.nth (!right) (1) in
  let min_left = min_slice (a) (Obj.repr (start)) (Obj.repr (mid)) in
  let max_right = max_slice (a) (Obj.repr (mid)) (Obj.repr (end_)) in
  let cross_diff = (max_right - min_left) in
  let left_diff = (big1 - small1) in
  let right_diff = (big2 - small2) in
  if ((right_diff > cross_diff) && (right_diff > left_diff)) then (
  __ret := (Obj.magic ([small2; big2]) : int list); raise Return
  ) else (
  if (left_diff > cross_diff) then (
  __ret := (Obj.magic ([small1; big1]) : int list); raise Return
  ) else (
  __ret := (Obj.magic ([min_left; max_right]) : int list); raise Return
  );
  );
    !__ret
  with Return -> !__ret)

and max_difference a =
  let __ret = ref ([] : (int) list) in
  (try
  __ret := (Obj.magic (max_diff_range (a) (Obj.repr (0)) (Obj.repr (List.length (a)))) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let result = ref (max_difference ([5; 11; 2; 1; 7; 9; 0; 7])) in
  print_endline ((__str (!result)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()