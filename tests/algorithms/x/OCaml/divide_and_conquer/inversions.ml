(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec slice_list arr start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let res = ref (([] : (int) list)) in
  let k = ref (start) in
  (try while (!k < end_) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (arr) (!k)) : int)]);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and count_inversions_bf arr =
  let __ret = ref 0 in
  (try
  let n = List.length (arr) in
  let inv = ref (0) in
  let i = ref (0) in
  (try while (!i < (n - 1)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < n) do
    try
  if (List.nth (arr) (!i) > List.nth (arr) (!j)) then (
  inv := (!inv + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!inv) : int); raise Return
  with Return -> !__ret)

and count_cross_inversions p q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let r = ref (([] : (int) list)) in
  let i = ref (0) in
  let j = ref (0) in
  let inv = ref (0) in
  (try while ((!i < List.length (p)) && (!j < List.length (q))) do
    try
  if (List.nth (p) (!i) > List.nth (q) (!j)) then (
  inv := (!inv + (List.length (p) - !i));
  r := (List.append (!r) [(Obj.magic (List.nth (q) (!j)) : int)]);
  j := (!j + 1);
  ) else (
  r := (List.append (!r) [(Obj.magic (List.nth (p) (!i)) : int)]);
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  if (!i < List.length (p)) then (
  r := (!r @ slice_list (p) (Obj.repr (!i)) (Obj.repr (List.length (p))));
  ) else (
  r := (!r @ slice_list (q) (Obj.repr (!j)) (Obj.repr (List.length (q))));
  );
  __ret := (Obj.magic ([(__str ("arr"), Obj.repr (!r)); (__str ("inv"), Obj.repr (!inv))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and count_inversions_recursive arr =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if (List.length (arr) <= 1) then (
  __ret := (Obj.magic ([(__str ("arr"), Obj.repr (arr)); (__str ("inv"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let mid = (List.length (arr) / 2) in
  let p = ref (slice_list (arr) (Obj.repr (0)) (Obj.repr (mid))) in
  let q = ref (slice_list (arr) (Obj.repr (mid)) (Obj.repr (List.length (arr)))) in
  let res_p = count_inversions_recursive (!p) in
  let res_q = count_inversions_recursive (!q) in
  let res_cross = count_cross_inversions ((Obj.obj (List.assoc (__str ("arr")) (res_p) : Obj.t) : int list)) ((Obj.obj (List.assoc (__str ("arr")) (res_q) : Obj.t) : int list)) in
  let total = (((Obj.obj (List.assoc (__str ("inv")) (res_p) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("inv")) (res_q) : Obj.t) : int)) + (Obj.obj (List.assoc (__str ("inv")) (res_cross) : Obj.t) : int)) in
  __ret := (Obj.magic ([(__str ("arr"), Obj.repr ((Obj.obj (List.assoc (__str ("arr")) (res_cross) : Obj.t) : int list))); (__str ("inv"), Obj.repr (total))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let arr_1 = ref ([10; 2; 1; 5; 5; 2; 11])
let () =
  let mem_start = _mem () in
  let start = _now () in
  let nbf = count_inversions_bf (!arr_1) in
  let nrec = ref ((Obj.obj (List.assoc (__str ("inv")) (count_inversions_recursive (!arr_1)) : Obj.t) : Obj.t)) in
  print_endline ("number of inversions = ");
  print_endline (string_of_int nbf);
  arr_1 := [1; 2; 2; 5; 5; 10; 11];
  let nbf2 = count_inversions_bf (!arr_1) in
  let nrec2 = ref ((Obj.obj (List.assoc (__str ("inv")) (count_inversions_recursive (!arr_1)) : Obj.t) : Obj.t)) in
  print_endline ("number of inversions = ");
  print_endline (string_of_int nbf2);
  arr_1 := [];
  let nbf3 = count_inversions_bf (!arr_1) in
  let nrec3 = ref ((Obj.obj (List.assoc (__str ("inv")) (count_inversions_recursive (!arr_1)) : Obj.t) : Obj.t)) in
  print_endline ("number of inversions = ");
  print_endline (string_of_int nbf3);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()