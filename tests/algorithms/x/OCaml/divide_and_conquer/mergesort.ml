(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec subarray xs start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let result = ref (([] : (int) list)) in
  let k = ref (start) in
  (try while (!k < end_) do
    try
  result := (List.append (!result) [(Obj.magic (List.nth (xs) (!k)) : int)]);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and merge left_half right_half =
  let __ret = ref ([] : (int) list) in
  (try
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  let j = ref (0) in
  (try while ((!i < List.length (left_half)) && (!j < List.length (right_half))) do
    try
  if (List.nth (left_half) (!i) < List.nth (right_half) (!j)) then (
  result := (List.append (!result) [(Obj.magic (List.nth (left_half) (!i)) : int)]);
  i := (!i + 1);
  ) else (
  result := (List.append (!result) [(Obj.magic (List.nth (right_half) (!j)) : int)]);
  j := (!j + 1);
  );
    with Continue -> ()
  done with Break -> ());
  (try while (!i < List.length (left_half)) do
    try
  result := (List.append (!result) [(Obj.magic (List.nth (left_half) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!j < List.length (right_half)) do
    try
  result := (List.append (!result) [(Obj.magic (List.nth (right_half) (!j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and merge_sort array =
  let __ret = ref ([] : (int) list) in
  (try
  if (List.length (array) <= 1) then (
  __ret := (Obj.magic (array) : int list); raise Return
  );
  let middle = (List.length (array) / 2) in
  let left_half = ref (subarray (array) (Obj.repr (0)) (Obj.repr (middle))) in
  let right_half = ref (subarray (array) (Obj.repr (middle)) (Obj.repr (List.length (array)))) in
  let sorted_left = ref (merge_sort (!left_half)) in
  let sorted_right = ref (merge_sort (!right_half)) in
  __ret := (Obj.magic (merge (!sorted_left) (!sorted_right)) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (merge_sort ([5; 3; 1; 4; 2]))));
  print_endline ((__str (merge_sort ([-(2); 3; -(10); 11; 99; 100000; 100; -(200)]))));
  print_endline ((__str (merge_sort ([-(200)]))));
  print_endline ((__str (merge_sort ((Obj.magic [] : int list)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()