(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec cross o a b =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (((((Obj.obj (List.assoc (__str ("x")) (a) : Obj.t) : int) - (Obj.obj (List.assoc (__str ("x")) (o) : Obj.t) : int)) * ((Obj.obj (List.assoc (__str ("y")) (b) : Obj.t) : int) - (Obj.obj (List.assoc (__str ("y")) (o) : Obj.t) : int))) - (((Obj.obj (List.assoc (__str ("y")) (a) : Obj.t) : int) - (Obj.obj (List.assoc (__str ("y")) (o) : Obj.t) : int)) * ((Obj.obj (List.assoc (__str ("x")) (b) : Obj.t) : int) - (Obj.obj (List.assoc (__str ("x")) (o) : Obj.t) : int))))) : int); raise Return
  with Return -> !__ret)

and sortPoints ps =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let arr = ref (ps) in
  let n = ref (List.length (!arr)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let j = ref (0) in
  (try while (!j < (!n - 1)) do
    try
  let p = ref (List.nth (!arr) (!j)) in
  let q = ref (List.nth (!arr) ((!j + 1))) in
  if (((Obj.obj (List.assoc (__str ("x")) (!p) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("x")) (!q) : Obj.t) : int)) || (((Obj.obj (List.assoc (__str ("x")) (!p) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("x")) (!q) : Obj.t) : int)) && ((Obj.obj (List.assoc (__str ("y")) (!p) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("y")) (!q) : Obj.t) : int)))) then (
  arr := (List.mapi (fun __i __x -> if __i = !j then !q else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !p else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and convex_hull ps =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  ps := sortPoints (!ps);
  let lower = ref (([] : ((string * Obj.t) list) list)) in
  (try List.iter (fun p ->
    try
  (try while ((List.length (!lower) >= 2) && (cross (List.nth (!lower) ((List.length (!lower) - 2))) (List.nth (!lower) ((List.length (!lower) - 1))) ((Obj.magic p : (string * Obj.t) list)) <= 0)) do
    try
  lower := List.of_seq (Seq.take ((List.length (!lower) - 1) - 0) (Seq.drop 0 (List.to_seq (!lower))));
    with Continue -> ()
  done with Break -> ());
  lower := (List.append (!lower) [(Obj.magic (p) : (string * Obj.t) list)]);
    with Continue -> ()) (!ps) with Break -> ());
  let upper = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref ((List.length (!ps) - 1)) in
  (try while (!i >= 0) do
    try
  let p = ref (List.nth (!ps) (!i)) in
  (try while ((List.length (!upper) >= 2) && (cross (List.nth (!upper) ((List.length (!upper) - 2))) (List.nth (!upper) ((List.length (!upper) - 1))) ((Obj.magic !p : (string * Obj.t) list)) <= 0)) do
    try
  upper := List.of_seq (Seq.take ((List.length (!upper) - 1) - 0) (Seq.drop 0 (List.to_seq (!upper))));
    with Continue -> ()
  done with Break -> ());
  upper := (List.append (!upper) [(Obj.magic (!p) : (string * Obj.t) list)]);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  let hull = ref (List.of_seq (Seq.take ((List.length (!lower) - 1) - 0) (Seq.drop 0 (List.to_seq (!lower))))) in
  let j = ref (0) in
  (try while (!j < (List.length (!upper) - 1)) do
    try
  hull := (List.append (!hull) [(Obj.magic (List.nth (!upper) (!j)) : (string * Obj.t) list)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!hull) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()