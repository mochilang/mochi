(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec index_of s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and index_of_substring s sub =
  let __ret = ref 0 in
  (try
  let n = String.length (s) in
  let m = String.length (sub) in
  if (m = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let i = ref (0) in
  (try while (!i <= (n - m)) do
    try
  let j = ref (0) in
  let is_match = ref (true) in
  (try while (!j < m) do
    try
  if ((let __s = s in let __i = (!i + !j) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) <> (let __s = sub in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  is_match := false;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !is_match then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and split s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let parts = ref (([] : (string) list)) in
  let last = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if (ch = sep) then (
  parts := (Obj.magic (List.append (!parts) [(Obj.magic ((let __s = s in let __st = !last in let __en = !i in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string)]) : string list);
  last := (!i + 1);
  );
  if ((!i + 1) = String.length (s)) then (
  parts := (Obj.magic (List.append (!parts) [(Obj.magic ((let __s = s in let __st = !last in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string)]) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!parts) : string list); raise Return
  with Return -> !__ret)

and get_sub_domain_name url =
  let __ret = ref "" in
  (try
  let proto_pos = index_of_substring (url) ("://") in
  let start = ref (0) in
  if (proto_pos >= 0) then (
  start := (proto_pos + 3);
  );
  let i = ref (!start) in
  (try while (!i < String.length (url)) do
    try
  if ((let __s = url in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = "/") then (
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __s = url in let __st = !start in let __en = !i in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string); raise Return
  with Return -> !__ret)

and get_domain_name url =
  let __ret = ref "" in
  (try
  let sub = get_sub_domain_name (url) in
  let parts = ref (split (sub) (".")) in
  if (List.length (!parts) >= 2) then (
  __ret := (Obj.magic ((((let __l = !parts in let __i = (List.length (!parts) - 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) ^ ".") ^ (let __l = !parts in let __i = (List.length (!parts) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : string); raise Return
  );
  __ret := (Obj.magic (sub) : string); raise Return
  with Return -> !__ret)

and is_alnum ch =
  let __ret = ref false in
  (try
  let chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" in
  __ret := (Obj.magic ((index_of (chars) (ch) >= 0)) : bool); raise Return
  with Return -> !__ret)

and contains xs x =
  let __ret = ref false in
  (try
  let xs = (Obj.magic xs : string list) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and bubble_sort xs =
  let __ret = ref ([] : (string) list) in
  (try
  let xs = (Obj.magic xs : string list) in
  let arr = ref (xs) in
  let n = ref (List.length (!arr)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let j = ref (0) in
  (try while ((!j + 1) < (!n - !i)) do
    try
  if ((let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > (let __l = !arr in let __i = (!j + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  let tmp = (let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = !j then (let __l = !arr in let __i = (!j + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : string list); raise Return
  with Return -> !__ret)

and extract_links domain html =
  let __ret = ref ([] : (string) list) in
  (try
  let links = ref (([] : (string) list)) in
  let pos = ref (index_of_substring (html) ("href=")) in
  (try while (!pos >= 0) do
    try
  let start_quote = index_of ((let __s = html in let __st = (!pos + 5) in let __en = String.length (html) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) ("\"") in
  if (start_quote < 0) then (
  raise Break;
  );
  let rest = (((!pos + 5) + start_quote) + 1) in
  let end_quote = index_of ((let __s = html in let __st = rest in let __en = String.length (html) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) ("\"") in
  if (end_quote < 0) then (
  raise Break;
  );
  let link = (let __s = html in let __st = rest in let __en = (rest + end_quote) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if not (contains (!links) (link)) then (
  let absolute = ref (link) in
  if not (((index_of_substring (link) ("http://") = 0) || (index_of_substring (link) ("https://") = 0))) then (
  if (index_of_substring (link) ("/") = 0) then (
  absolute := (("https://" ^ domain) ^ link);
  ) else (
  absolute := ((("https://" ^ domain) ^ "/") ^ link);
  );
  );
  links := (Obj.magic (List.append (!links) [(Obj.magic (!absolute) : string)]) : string list);
  );
  pos := index_of_substring ((let __s = html in let __st = (rest + end_quote) in let __en = String.length (html) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) ("href=");
  if (!pos >= 0) then (
  pos := ((!pos + rest) + end_quote);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!links) : string list); raise Return
  with Return -> !__ret)

and extract_emails domain text =
  let __ret = ref ([] : (string) list) in
  (try
  let emails = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  if ((let __s = text in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = "@") then (
  if ((let __s = text in let __st = (!i + 1) in let __en = ((!i + 1) + String.length (domain)) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = domain) then (
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && is_alnum ((let __s = text in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))))) do
    try
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  let local = (let __s = text in let __st = (!j + 1) in let __en = !i in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (String.length (local) > 0) then (
  let email = ((local ^ "@") ^ domain) in
  if not (contains (!emails) (email)) then (
  emails := (Obj.magic (List.append (!emails) [(Obj.magic (email) : string)]) : string list);
  );
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!emails) : string list); raise Return
  with Return -> !__ret)

and find_page pages url =
  let __ret = ref "" in
  (try
  let pages = (Obj.magic pages : (string * Obj.t) list list) in
  let i = ref (0) in
  (try while (!i < List.length (pages)) do
    try
  let p = ref ((let __l = pages in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if ((Obj.obj (List.assoc (__str ("url")) (!p) : Obj.t) : string) = url) then (
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("html")) (!p) : Obj.t) : string)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and emails_from_url url pages =
  let __ret = ref ([] : (string) list) in
  (try
  let pages = (Obj.magic pages : (string * Obj.t) list list) in
  let domain = get_domain_name (url) in
  let base_html = find_page (pages) (url) in
  let links = ref (extract_links (domain) (base_html)) in
  let found = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!links)) do
    try
  let html = find_page (pages) ((let __l = !links in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let emails = ref (extract_emails (domain) (html)) in
  let j = ref (0) in
  (try while (!j < List.length (!emails)) do
    try
  if not (contains (!found) ((let __l = !emails in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  found := (Obj.magic (List.append (!found) [(Obj.magic ((let __l = !emails in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string)]) : string list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sorted = ref (bubble_sort (!found)) in
  __ret := (Obj.magic (!sorted) : string list); raise Return
  with Return -> !__ret)


let pages = ref ([[(__str ("url"), Obj.repr ("https://example.com")); (__str ("html"), Obj.repr ("<html><body><a href=\"/contact\">Contact</a></body></html>"))]; [(__str ("url"), Obj.repr ("https://example.com/contact")); (__str ("html"), Obj.repr ("<html>Contact us at info@example.com or support@example.com</html>"))]])
let emails = ref (emails_from_url ("https://example.com") ((Obj.magic !pages : (string * Obj.t) list list)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (((string_of_int (List.length (!emails))) ^ " emails found:"));
  let k = ref (0) in
  (try while (!k < List.length (!emails)) do
    try
  print_endline ((let __l = !emails in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
