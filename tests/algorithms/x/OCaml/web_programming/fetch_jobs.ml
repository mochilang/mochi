(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _sample_html = "<div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">Android Developer</a><span class=\"company\">ABC Corp</span></div><div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">iOS Engineer</a><span class=\"company\">XYZ Ltd</span></div>"
let rec indexOf s sub start =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let n = String.length (s) in
  let m = String.length (sub) in
  let i = ref (start) in
  (try while (!i <= (n - m)) do
    try
  let j = ref (0) in
  let ok = ref (true) in
  (try while (!j < m) do
    try
  if ((let __s = s in let __st = (!i + !j) in let __en = ((!i + !j) + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) <> (let __s = sub in let __st = !j in let __en = (!j + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) then (
  ok := false;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !ok then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  with Return -> !__ret)

and splitBy s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let start = ref (0) in
  let sepLen = String.length (sep) in
  let idx = ref (indexOf (s) (sep) (Obj.repr (0))) in
  (try while (!idx <> (0 - 1)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __s = s in let __st = !start in let __en = !idx in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string)]) : string list);
  start := (!idx + sepLen);
  idx := indexOf (s) (sep) (Obj.repr (!start));
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __s = s in let __st = !start in let __en = String.length (s) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string)]) : string list);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and between s startTag endTag =
  let __ret = ref "" in
  (try
  let startIdx = ref (indexOf (s) (startTag) (Obj.repr (0))) in
  if (!startIdx = (0 - 1)) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  startIdx := (!startIdx + String.length (startTag));
  let endIdx = indexOf (s) (endTag) (Obj.repr (!startIdx)) in
  if (endIdx = (0 - 1)) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  __ret := (Obj.magic ((let __s = s in let __st = !startIdx in let __en = endIdx in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string); raise Return
  with Return -> !__ret)

and intToString n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let num = ref (n) in
  let digits = ref ("") in
  (try while (!num > 0) do
    try
  let d = ((!num mod 10 + 10) mod 10) in
  digits := ((let __s = "0123456789" in let __st = d in let __en = (d + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) ^ !digits);
  num := (!num / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!digits) : string); raise Return
  with Return -> !__ret)

and fetch_jobs location =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let blocks = ref (splitBy (_sample_html) ("data-tn-component=\"organicJob\"")) in
  let jobs = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (1) in
  (try while (!i < List.length (!blocks)) do
    try
  let block = (let __l = !blocks in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let title = between (block) ("data-tn-element=\"jobTitle\">") ("</a>") in
  let company = between (block) ("class=\"company\">") ("</span>") in
  jobs := (Obj.magic (List.append (!jobs) [(Obj.magic ([(__str ("title"), Obj.repr (title)); (__str ("company"), Obj.repr (company))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!jobs) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let jobs = ref (fetch_jobs ("Bangalore")) in
  let i = ref (0) in
  (try while (!i < List.length (!jobs)) do
    try
  let j = (let __l = !jobs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let idx = (!i + 1) in
  print_endline (((((("Job " ^ intToString (Obj.repr (idx))) ^ " is ") ^ (Obj.obj (List.assoc (__str ("title")) (j) : Obj.t) : string)) ^ " at ") ^ (Obj.obj (List.assoc (__str ("company")) (j) : Obj.t) : string)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
