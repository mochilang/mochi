(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _base_url = "https://ww7.gogoanime2.org"
let rec contains_str s sub =
  let __ret = ref false in
  (try
  if (String.length (sub) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let i = ref (0) in
  (try while ((!i + String.length (sub)) <= String.length (s)) do
    try
  if ((let __s = s in let __st = !i in let __en = (!i + String.length (sub)) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = sub) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)


let _anime_db = ref ([[(__str ("title"), "Demon Slayer"); (__str ("url"), "/anime/kimetsu-no-yaiba")]; [(__str ("title"), "Naruto"); (__str ("url"), "/anime/naruto")]])
let rec search_scraper anime_name =
  let __ret = ref ([] : ((string * string) list) list) in
  (try
  let term = String.lowercase_ascii (anime_name) in
  let res = ref (([] : ((string * string) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!_anime_db)) do
    try
  let item = ref ((let __l = !_anime_db in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if contains_str (String.lowercase_ascii (List.assoc (__str ("title")) (!item))) (term) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (!item) : (string * string) list)]) : (string * string) list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * string) list list); raise Return
  with Return -> !__ret)


let _episode_db = ref ([(__str ("/anime/kimetsu-no-yaiba"), [[(__str ("title"), "Episode 1"); (__str ("url"), "/watch/kimetsu-no-yaiba/1")]; [(__str ("title"), "Episode 2"); (__str ("url"), "/watch/kimetsu-no-yaiba/2")]]); (__str ("/anime/naruto"), [[(__str ("title"), "Episode 1"); (__str ("url"), "/watch/naruto/1")]])])
let rec search_anime_episode_list endpoint =
  let __ret = ref ([] : ((string * string) list) list) in
  (try
  if (List.mem_assoc endpoint !_episode_db) then (
  __ret := (Obj.magic (List.assoc (__str (endpoint)) (!_episode_db)) : (string * string) list list); raise Return
  );
  let empty = ref (([] : ((string * string) list) list)) in
  __ret := (Obj.magic (!empty) : (string * string) list list); raise Return
  with Return -> !__ret)


let _episode_embed = ref ([(__str ("/watch/kimetsu-no-yaiba/1"), "/embed/kimetsu-no-yaiba/1"); (__str ("/watch/kimetsu-no-yaiba/2"), "/embed/kimetsu-no-yaiba/2"); (__str ("/watch/naruto/1"), "/embed/naruto/1")])
let rec to_playlist embed =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((("/playlist/" ^ (let __s = embed in let __st = 7 in let __len = (String.length (embed) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) ^ ".m3u8")) : string); raise Return
  with Return -> !__ret)

and get_anime_episode endpoint =
  let __ret = ref ([] : (string) list) in
  (try
  if (List.mem_assoc endpoint !_episode_embed) then (
  let embed = List.assoc (__str (endpoint)) (!_episode_embed) in
  let play = (_base_url ^ embed) in
  let download = (_base_url ^ to_playlist (embed)) in
  __ret := (Obj.magic ([play; download]) : string list); raise Return
  );
  let empty = ref (([] : (string) list)) in
  __ret := (Obj.magic (!empty) : string list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let animes = ref (search_scraper ("demon")) in
  print_endline (__show_list !animes);
  let episodes = ref (search_anime_episode_list ("/anime/kimetsu-no-yaiba")) in
  print_endline (__show_list !episodes);
  let links = ref (get_anime_episode ("/watch/kimetsu-no-yaiba/1")) in
  print_endline (__show_list !links);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
