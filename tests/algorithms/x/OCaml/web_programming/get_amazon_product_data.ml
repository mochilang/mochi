(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec find_index s pat start =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let i = ref (start) in
  (try while (!i <= (String.length (s) - String.length (pat))) do
    try
  let j = ref (0) in
  let ok = ref (true) in
  (try while (!j < String.length (pat)) do
    try
  if ((let __s = s in let __i = (!i + !j) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) <> (let __s = pat in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  ok := false;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !ok then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and slice_between s start_pat end_pat from =
  let __ret = ref "" in
  (try
  let from = (Obj.magic from : int) in
  let a = find_index (s) (start_pat) (Obj.repr (from)) in
  if (a < 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let b = (a + String.length (start_pat)) in
  let c = find_index (s) (end_pat) (Obj.repr (b)) in
  if (c < 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  __ret := (Obj.magic ((let __s = s in let __st = b in let __en = c in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string); raise Return
  with Return -> !__ret)

and char_to_digit c =
  let __ret = ref 0 in
  (try
  if (c = "0") then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (c = "1") then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (c = "2") then (
  __ret := (Obj.magic (2) : int); raise Return
  );
  if (c = "3") then (
  __ret := (Obj.magic (3) : int); raise Return
  );
  if (c = "4") then (
  __ret := (Obj.magic (4) : int); raise Return
  );
  if (c = "5") then (
  __ret := (Obj.magic (5) : int); raise Return
  );
  if (c = "6") then (
  __ret := (Obj.magic (6) : int); raise Return
  );
  if (c = "7") then (
  __ret := (Obj.magic (7) : int); raise Return
  );
  if (c = "8") then (
  __ret := (Obj.magic (8) : int); raise Return
  );
  __ret := (Obj.magic (9) : int); raise Return
  with Return -> !__ret)

and parse_int txt =
  let __ret = ref 0 in
  (try
  let n = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (txt)) do
    try
  let c = (let __s = txt in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if ((c >= "0") && (c <= "9")) then (
  n := ((!n * 10) + char_to_digit (c));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and parse_product block =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let href = slice_between (block) ("href=\"") ("\"") (Obj.repr (0)) in
  let link = ("https://www.amazon.in" ^ href) in
  let title = slice_between (block) (">") ("</a>") (Obj.repr (find_index (block) ("<a") (Obj.repr (0)))) in
  let price = slice_between (block) ("<span class=\"a-offscreen\">") ("</span>") (Obj.repr (0)) in
  let rating = ref (slice_between (block) ("<span class=\"a-icon-alt\">") ("</span>") (Obj.repr (0))) in
  if (String.length (!rating) = 0) then (
  rating := "Not available";
  );
  let mrp = ref (slice_between (block) ("<span class=\"a-price a-text-price\">") ("</span>") (Obj.repr (0))) in
  let disc = ref (0.0) in
  if ((String.length (!mrp) > 0) && (String.length (price) > 0)) then (
  let p = parse_int (price) in
  let m = parse_int (!mrp) in
  if (m > 0) then (
  disc := (float_of_int (((m - p) * 100)) /. float_of_int (m));
  );
  ) else (
  mrp := "";
  disc := 0.0;
  );
  __ret := (Obj.magic ([(__str ("title"), Obj.repr (title)); (__str ("link"), Obj.repr (link)); (__str ("price"), Obj.repr (price)); (__str ("rating"), Obj.repr (!rating)); (__str ("mrp"), Obj.repr (!mrp)); (__str ("discount"), Obj.repr (!disc))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get_amazon_product_data product =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let html = "<div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/sample_product\">Sample Product</a></h2><span class=\"a-offscreen\">₹900</span><span class=\"a-icon-alt\">4.3 out of 5 stars</span><span class=\"a-price a-text-price\">₹1000</span></div><div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/item2\">Another Product</a></h2><span class=\"a-offscreen\">₹500</span><span class=\"a-icon-alt\">3.8 out of 5 stars</span><span class=\"a-price a-text-price\">₹800</span></div>" in
  let out = ref (([] : ((string * Obj.t) list) list)) in
  let start = ref (0) in
  (try while true do
    try
  let div_start = find_index (html) ("<div class=\"s-result-item\"") (Obj.repr (!start)) in
  if (div_start < 0) then (
  raise Break;
  );
  let div_end = find_index (html) ("</div>") (Obj.repr (div_start)) in
  if (div_end < 0) then (
  raise Break;
  );
  let block = (let __s = html in let __st = div_start in let __en = div_end in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  out := (Obj.magic (List.append (!out) [(Obj.magic (parse_product (block)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  start := (div_end + String.length ("</div>"));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let products = ref (get_amazon_product_data ("laptop")) in
  let i = ref (0) in
  (try while (!i < List.length (!products)) do
    try
  let p = (let __l = !products in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  print_endline ((((((((((((Obj.obj (List.assoc (__str ("title")) (p) : Obj.t) : string) ^ " | ") ^ (Obj.obj (List.assoc (__str ("link")) (p) : Obj.t) : string)) ^ " | ") ^ (Obj.obj (List.assoc (__str ("price")) (p) : Obj.t) : string)) ^ " | ") ^ (Obj.obj (List.assoc (__str ("rating")) (p) : Obj.t) : string)) ^ " | ") ^ (Obj.obj (List.assoc (__str ("mrp")) (p) : Obj.t) : string)) ^ " | ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("discount")) (p) : Obj.t) : float)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
