(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _sample_html = "<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>"
let rec find_substring s sub from =
  let __ret = ref 0 in
  (try
  let from = (Obj.magic from : int) in
  let i = ref (from) in
  (try while (!i <= (String.length (s) - String.length (sub))) do
    try
  let j = ref (0) in
  (try while ((!j < String.length (sub)) && ((let __s = s in let __st = (!i + !j) in let __en = ((!i + !j) + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = (let __s = sub in let __st = !j in let __en = (!j + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)))) do
    try
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!j = String.length (sub)) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and fetch_pharmacy_and_price_list drug_name zip_code =
  let __ret = ref ([] : ((string * string) list) list) in
  (try
  if ((drug_name = "") || (zip_code = "")) then (
  __ret := (Obj.magic (nil) : (string * string) list list); raise Return
  );
  let results = ref (([] : ((string * string) list) list)) in
  let pos = ref (0) in
  let block_tag = "<div class=\"grid-x pharmCard\">" in
  let name_tag = "<p class=\"list-title\">" in
  let price_tag = "<span class=\"price price-large\">" in
  (try while true do
    try
  let div_idx = find_substring (_sample_html) (block_tag) (Obj.repr (!pos)) in
  if (div_idx < 0) then (
  raise Break;
  );
  let name_start = ref (find_substring (_sample_html) (name_tag) (Obj.repr (div_idx))) in
  if (!name_start < 0) then (
  raise Break;
  );
  name_start := (!name_start + String.length (name_tag));
  let name_end = find_substring (_sample_html) ("</p>") (Obj.repr (!name_start)) in
  if (name_end < 0) then (
  raise Break;
  );
  let name = (let __s = _sample_html in let __st = !name_start in let __en = name_end in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  let price_start = ref (find_substring (_sample_html) (price_tag) (Obj.repr (name_end))) in
  if (!price_start < 0) then (
  raise Break;
  );
  price_start := (!price_start + String.length (price_tag));
  let price_end = find_substring (_sample_html) ("</span>") (Obj.repr (!price_start)) in
  if (price_end < 0) then (
  raise Break;
  );
  let price = (let __s = _sample_html in let __st = !price_start in let __en = price_end in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  results := (Obj.magic (List.append (!results) [(Obj.magic ([(__str ("pharmacy_name"), name); (__str ("price"), price)]) : (string * string) list)]) : (string * string) list list);
  pos := price_end;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!results) : (string * string) list list); raise Return
  with Return -> !__ret)


let pharmacy_price_list = ref (fetch_pharmacy_and_price_list ("aspirin") ("30303"))
let () =
  let mem_start = _mem () in
  let start = _now () in
  if ((Obj.repr (!pharmacy_price_list)) <> nil) then (
  let i = ref (0) in
  (try while (!i < List.length (!pharmacy_price_list)) do
    try
  let entry = ref ((let __l = !pharmacy_price_list in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  print_endline (((("Pharmacy: " ^ List.assoc (__str ("pharmacy_name")) (!entry)) ^ " Price: ") ^ List.assoc (__str ("price")) (!entry)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  print_endline ("No results found");
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
