(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec index_of_from s sub start =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let i = ref (start) in
  let max = (String.length (s) - String.length (sub)) in
  (try while (!i <= max) do
    try
  if ((let __s = s in let __st = !i in let __len = ((!i + String.length (sub)) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = sub) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and extract_links html =
  let __ret = ref ([] : ((string * string) list) list) in
  (try
  let res = ref (([] : ((string * string) list) list)) in
  let i = ref (0) in
  (try while true do
    try
  let tag_start = index_of_from (html) ("<a class=\"eZt8xd\"") (Obj.repr (!i)) in
  if (tag_start = -(1)) then (
  raise Break;
  );
  let href_start = ref (index_of_from (html) ("href=\"") (Obj.repr (tag_start))) in
  if (!href_start = -(1)) then (
  raise Break;
  );
  href_start := (!href_start + String.length ("href=\""));
  let href_end = index_of_from (html) ("\"") (Obj.repr (!href_start)) in
  if (href_end = -(1)) then (
  raise Break;
  );
  let href = (let __s = html in let __st = !href_start in let __len = (href_end - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let text_start = (index_of_from (html) (">") (Obj.repr (href_end)) + 1) in
  let text_end = index_of_from (html) ("</a>") (Obj.repr (text_start)) in
  if (text_end = -(1)) then (
  raise Break;
  );
  let text = (let __s = html in let __st = text_start in let __len = (text_end - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let link = ref ([(__str ("href"), href); (__str ("text"), text)]) in
  res := (Obj.magic (List.append (!res) [(Obj.magic (!link) : (string * string) list)]) : (string * string) list list);
  i := (text_end + String.length ("</a>"));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * string) list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let html = (("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" ^ "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>") ^ "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>") in
  let links = ref (extract_links (html)) in
  print_endline ((string_of_int (List.length (!links))));
  let i = ref (0) in
  (try while ((!i < List.length (!links)) && (!i < 5)) do
    try
  let link = ref ((let __l = !links in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let href = List.assoc (__str ("href")) (!link) in
  let text = List.assoc (__str ("text")) (!link) in
  if (text = "Maps") then (
  print_endline (href);
  ) else (
  print_endline (("https://google.com" ^ href));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
