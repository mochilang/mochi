(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec find text pattern start =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let i = ref (start) in
  let limit = (String.length (text) - String.length (pattern)) in
  (try while (!i <= limit) do
    try
  if ((let __s = text in let __st = !i in let __en = (!i + String.length (pattern)) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = pattern) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and stock_price symbol =
  let __ret = ref "" in
  (try
  let pages = ref ([(__str ("AAPL"), "<span data-testid=\"qsp-price\">228.43</span>"); (__str ("AMZN"), "<span data-testid=\"qsp-price\">201.85</span>"); (__str ("IBM"), "<span data-testid=\"qsp-price\">210.30</span>"); (__str ("GOOG"), "<span data-testid=\"qsp-price\">177.86</span>"); (__str ("MSFT"), "<span data-testid=\"qsp-price\">414.82</span>"); (__str ("ORCL"), "<span data-testid=\"qsp-price\">188.87</span>")]) in
  if (List.mem_assoc symbol !pages) then (
  let html = List.assoc (__str (symbol)) (!pages) in
  let marker = "<span data-testid=\"qsp-price\">" in
  let start_idx = find (html) (marker) (Obj.repr (0)) in
  if (start_idx <> -(1)) then (
  let price_start = (start_idx + String.length (marker)) in
  let end_idx = find (html) ("</span>") (Obj.repr (price_start)) in
  if (end_idx <> -(1)) then (
  __ret := (Obj.magic ((let __s = html in let __st = price_start in let __en = end_idx in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string); raise Return
  );
  );
  );
  __ret := (Obj.magic ("No <fin-streamer> tag with the specified data-testid attribute found.") : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun symbol ->
    try
  print_endline (((("Current " ^ symbol) ^ " stock price is ") ^ stock_price (symbol)));
    with Continue -> ()) (["AAPL"; "AMZN"; "IBM"; "GOOG"; "MSFT"; "ORCL"]) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
