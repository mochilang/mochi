(* Generated by Mochi transpiler v0.10.69 on 2025-08-22 14:19 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec index_of s sub start =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let n = String.length (s) in
  let m = String.length (sub) in
  let i = ref (start) in
  (try while (!i <= (n - m)) do
    try
  let j = ref (0) in
  (try while ((!j < m) && ((let __s = s in let __st = (!i + !j) in let __len = (((!i + !j) + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = (let __s = sub in let __st = !j in let __len = ((!j + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) do
    try
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!j = m) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and find_all html open_ close =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let pos = ref (0) in
  let ol = String.length (open_) in
  let cl = String.length (close) in
  (try while true do
    try
  let start = index_of (html) (open_) (Obj.repr (!pos)) in
  if (start < 0) then (
  raise Break;
  );
  let begin_ = (start + ol) in
  let end_ = index_of (html) (close) (Obj.repr (begin_)) in
  if (end_ < 0) then (
  raise Break;
  );
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __s = html in let __st = begin_ in let __len = (end_ - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string)])) : string list);
  pos := (end_ + cl);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and world_covid19_stats html =
  let __ret = ref ([] : (string list) list) in
  (try
  let keys = ref (find_all (html) ("<h1>") ("</h1>")) in
  let values = ref (find_all (html) ("<div class=\"maincounter-number\"><span>") ("</span></div>")) in
  let extra_keys = ref (find_all (html) ("<span class=\"panel-title\">") ("</span>")) in
  (try List.iter (fun k ->
    try
  keys := (Obj.magic ((List.append (!keys) [(Obj.magic (k) : string)])) : string list);
    with Continue -> ()) (!extra_keys) with Break -> ());
  let extra_vals = ref (find_all (html) ("<div class=\"number-table-main\">") ("</div>")) in
  (try List.iter (fun v ->
    try
  values := (Obj.magic ((List.append (!values) [(Obj.magic (v) : string)])) : string list);
    with Continue -> ()) (!extra_vals) with Break -> ());
  let res = ref (([] : (string list) list)) in
  let i = ref (0) in
  (try while ((!i < List.length (!keys)) && (!i < List.length (!values))) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic ([(let __l = !keys in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> ""); (let __l = !values in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "")]) : string list)])) : string list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list list); raise Return
  with Return -> !__ret)


let sample_html = "<h1>Coronavirus Cases:</h1><div class=\"maincounter-number\"><span>100</span></div><h1>Deaths:</h1><div class=\"maincounter-number\"><span>10</span></div><h1>Recovered:</h1><div class=\"maincounter-number\"><span>50</span></div><span class=\"panel-title\">Active Cases</span><div class=\"number-table-main\">20</div><span class=\"panel-title\">Closed Cases</span><div class=\"number-table-main\">80</div>"
let stats = ref (world_covid19_stats (sample_html))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_string "COVID-19 Status of the World\n";
  let i = ref (0) in
  (try while (!i < List.length (!stats)) do
    try
  print_endline ((let __l = (let __l = !stats in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> ""));
  print_endline ((let __l = (let __l = !stats in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> ""));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
