(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let _openweathermap_api_key = "demo"
let _weatherstack_api_key = ""
let _openweathermap_url_base = "https://api.openweathermap.org/data/2.5/weather"
let _weatherstack_url_base = "http://api.weatherstack.com/current"
let rec http_get url params =
  let __ret = ref ([] : (string * string) list) in
  (try
  let params = (Obj.magic params : (string * string) list) in
  if (List.mem_assoc "q" params) then (
  __ret := (Obj.magic ([(__str ("location"), List.assoc (__str ("q")) (params)); (__str ("temperature"), "20")]) : (string * string) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("location"), List.assoc (__str ("query")) (params)); (__str ("temperature"), "20")]) : (string * string) list); raise Return
  with Return -> !__ret)

and current_weather location =
  let __ret = ref ([] : ((string * (string * string) list) list) list) in
  (try
  let weather_data = ref (([] : ((string * (string * string) list) list) list)) in
  if (_openweathermap_api_key <> "") then (
  let params_openweathermap = ref ([(__str ("q"), location); (__str ("appid"), _openweathermap_api_key)]) in
  let response_openweathermap = ref (http_get (_openweathermap_url_base) ((Obj.magic !params_openweathermap : (string * string) list))) in
  weather_data := (Obj.magic (List.append (!weather_data) [(Obj.magic ([(__str ("OpenWeatherMap"), !response_openweathermap)]) : (string * (string * string) list) list)]) : (string * (string * string) list) list list);
  );
  if (_weatherstack_api_key <> "") then (
  let params_weatherstack = ref ([(__str ("query"), location); (__str ("access_key"), _weatherstack_api_key)]) in
  let response_weatherstack = ref (http_get (_weatherstack_url_base) ((Obj.magic !params_weatherstack : (string * string) list))) in
  weather_data := (Obj.magic (List.append (!weather_data) [(Obj.magic ([(__str ("Weatherstack"), !response_weatherstack)]) : (string * (string * string) list) list)]) : (string * (string * string) list) list list);
  );
  if (List.length (!weather_data) = 0) then (
  (failwith ("No API keys provided or no valid data returned."));
  );
  __ret := (Obj.magic (!weather_data) : (string * (string * string) list) list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let data = ref (current_weather ("New York")) in
  print_endline ((__str (!data)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
