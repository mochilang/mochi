(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _digits = "0123456789"
let rec is_digit ch =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_digits)) do
    try
  if ((let __s = _digits in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and find_substring haystack needle =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i <= (String.length (haystack) - String.length (needle))) do
    try
  let j = ref (0) in
  (try while (!j < String.length (needle)) do
    try
  if ((let __s = haystack in let __i = (!i + !j) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) <> (let __s = needle in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!j = String.length (needle)) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and extract_citation html =
  let __ret = ref "" in
  (try
  let marker = "Cited by " in
  let idx = find_substring (html) (marker) in
  if (idx < 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let pos = ref ((idx + String.length (marker))) in
  let result = ref ("") in
  (try while (!pos < String.length (html)) do
    try
  let ch = (let __s = html in let __i = !pos in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if not (is_digit (ch)) then (
  raise Break;
  );
  result := (!result ^ ch);
  pos := (!pos + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and get_citation base_url params =
  let __ret = ref "" in
  (try
  let params = (Obj.magic params : (string * string) list) in
  let html = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>" in
  __ret := (Obj.magic (extract_citation (html)) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  if (__name__ = "__main__") then (
  let params = ref ([(__str ("title"), "Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density"); (__str ("journal"), "Chem. Mater."); (__str ("volume"), "30"); (__str ("pages"), "3979-3990"); (__str ("year"), "2018"); (__str ("hl"), "en")]) in
  print_endline ((get_citation ("https://scholar.google.com/scholar_lookup") ((Obj.magic !params : (string * string) list))));
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
