(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec exp_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1.0) in
  (try while (!i < 20.0) do
    try
  term := ((!term *. x) /. !i);
  sum := (!sum +. !term);
  i := (!i +. 1.0);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and sigmoid x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((1.0 /. (1.0 +. exp_taylor (Obj.repr ((-.(x))))))) : float); raise Return
  with Return -> !__ret)


let _x = ref ([[0.0; 0.0]; [1.0; 1.0]; [1.0; 0.0]; [0.0; 1.0]])
let _y = ref ([0.0; 1.0; 0.0; 0.0])
let test_data = ref ([[0.0; 0.0]; [0.0; 1.0]; [1.0; 1.0]])
let w1 = ref ([[0.5; (-.(0.5))]; [0.5; 0.5]])
let b1 = ref ([0.0; 0.0])
let w2 = ref ([0.5; (-.(0.5))])
let b2 = ref (0.0)
let rec train epochs lr =
  let __ret = ref (Obj.magic 0) in
  (try
  let epochs = (Obj.magic epochs : int) in
  let lr = (Obj.magic lr : float) in
  let e = ref (0) in
  (try while (!e < epochs) do
    try
  let i = ref (0) in
  (try while (!i < List.length (!_x)) do
    try
  let x0 = (let __l = (let __l = !_x in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let x1 = (let __l = (let __l = !_x in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let target = (let __l = !_y in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let z1 = ((((let __l = (let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x0) +. ((let __l = (let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x1)) +. (let __l = !b1 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let z2 = ((((let __l = (let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x0) +. ((let __l = (let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x1)) +. (let __l = !b1 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let h1 = sigmoid (Obj.repr (z1)) in
  let h2 = sigmoid (Obj.repr (z2)) in
  let z3 = ((((let __l = !w2 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. h1) +. ((let __l = !w2 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. h2)) +. !b2) in
  let out = sigmoid (Obj.repr (z3)) in
  let error = (out -. target) in
  let d1 = (((h1 *. (1.0 -. h1)) *. (let __l = !w2 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) *. error) in
  let d2 = (((h2 *. (1.0 -. h2)) *. (let __l = !w2 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) *. error) in
  w2 := (List.mapi (fun __i __x -> if __i = 0 then ((let __l = !w2 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. ((lr *. error) *. h1)) else __x) (!w2));
  w2 := (List.mapi (fun __i __x -> if __i = 1 then ((let __l = !w2 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. ((lr *. error) *. h2)) else __x) (!w2));
  b2 := (!b2 -. (lr *. error));
  w1 := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = 0 then ((let __l = (let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. ((lr *. d1) *. x0)) else __x) ((let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!w1));
  w1 := (List.mapi (fun __i __x -> if __i = 1 then (List.mapi (fun __i __x -> if __i = 0 then ((let __l = (let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. ((lr *. d1) *. x1)) else __x) ((let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!w1));
  b1 := (List.mapi (fun __i __x -> if __i = 0 then ((let __l = !b1 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (lr *. d1)) else __x) (!b1));
  w1 := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = 1 then ((let __l = (let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. ((lr *. d2) *. x0)) else __x) ((let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!w1));
  w1 := (List.mapi (fun __i __x -> if __i = 1 then (List.mapi (fun __i __x -> if __i = 1 then ((let __l = (let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. ((lr *. d2) *. x1)) else __x) ((let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!w1));
  b1 := (List.mapi (fun __i __x -> if __i = 1 then ((let __l = !b1 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (lr *. d2)) else __x) (!b1));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  e := (!e + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and predict samples =
  let __ret = ref ([] : (int) list) in
  (try
  let samples = (Obj.magic samples : float list list) in
  let preds = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (samples)) do
    try
  let x0 = (let __l = (let __l = samples in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let x1 = (let __l = (let __l = samples in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let z1 = ((((let __l = (let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x0) +. ((let __l = (let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x1)) +. (let __l = !b1 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let z2 = ((((let __l = (let __l = !w1 in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x0) +. ((let __l = (let __l = !w1 in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. x1)) +. (let __l = !b1 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let h1 = sigmoid (Obj.repr (z1)) in
  let h2 = sigmoid (Obj.repr (z2)) in
  let z3 = ((((let __l = !w2 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. h1) +. ((let __l = !w2 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. h2)) +. !b2) in
  let out = sigmoid (Obj.repr (z3)) in
  let label = ref (0) in
  if (out >= 0.5) then (
  label := 1;
  );
  preds := (Obj.magic ((List.append (!preds) [(Obj.magic (!label) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!preds) : int list); raise Return
  with Return -> !__ret)

and wrapper y =
  let __ret = ref ([] : (int) list) in
  (try
  let y = (Obj.magic y : int list) in
  __ret := (Obj.magic (y) : int list); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (train (Obj.repr (4000)) (Obj.repr (0.5)));
  let preds = ref (wrapper (predict (!test_data))) in
  print_endline ((__str (Obj.magic (!preds) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
