(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec data_handling dataset =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let dataset = (Obj.magic dataset : (string * Obj.t) list) in
  __ret := (Obj.magic (dataset) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and xgboost features target test_features =
  let __ret = ref ([] : (float) list) in
  (try
  let features = (Obj.magic features : float list list) in
  let target = (Obj.magic target : float list) in
  let test_features = (Obj.magic test_features : float list list) in
  let learning_rate = 0.5 in
  let n_estimators = 3 in
  let trees = ref (([] : ((string * Obj.t) list) list)) in
  let predictions = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (target)) do
    try
  predictions := (Obj.magic ((List.append (!predictions) [(Obj.magic (0.0) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let est = ref (0) in
  (try while (!est < n_estimators) do
    try
  let residuals = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (target)) do
    try
  residuals := (Obj.magic ((List.append (!residuals) [(Obj.magic (((let __l = target in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = !predictions in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let sum_feat = ref (0.0) in
  j := 0;
  (try while (!j < List.length (features)) do
    try
  sum_feat := (!sum_feat +. (let __l = (let __l = features in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let threshold = (!sum_feat /. float_of_int (List.length (features))) in
  let left_sum = ref (0.0) in
  let left_count = ref (0) in
  let right_sum = ref (0.0) in
  let right_count = ref (0) in
  j := 0;
  (try while (!j < List.length (features)) do
    try
  if ((let __l = (let __l = features in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <= threshold) then (
  left_sum := (!left_sum +. (let __l = !residuals in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  left_count := (!left_count + 1);
  ) else (
  right_sum := (!right_sum +. (let __l = !residuals in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  right_count := (!right_count + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let left_value = ref (0.0) in
  if (!left_count > 0) then (
  left_value := (!left_sum /. float_of_int (!left_count));
  );
  let right_value = ref (0.0) in
  if (!right_count > 0) then (
  right_value := (!right_sum /. float_of_int (!right_count));
  );
  j := 0;
  (try while (!j < List.length (features)) do
    try
  if ((let __l = (let __l = features in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <= threshold) then (
  predictions := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !predictions in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. (learning_rate *. !left_value)) else __x) (!predictions));
  ) else (
  predictions := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !predictions in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. (learning_rate *. !right_value)) else __x) (!predictions));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  trees := (Obj.magic ((List.append (!trees) [(Obj.magic ([(__str ("threshold"), Obj.repr (threshold)); (__str ("left_value"), Obj.repr (!left_value)); (__str ("right_value"), Obj.repr (!right_value))]) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  est := (!est + 1);
    with Continue -> ()
  done with Break -> ());
  let preds = ref (([] : (float) list)) in
  let t = ref (0) in
  (try while (!t < List.length (test_features)) do
    try
  let pred = ref (0.0) in
  let k = ref (0) in
  (try while (!k < List.length (!trees)) do
    try
  if ((let __l = (let __l = test_features in let __i = !t in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <= (match List.assoc_opt (__str ("threshold")) ((let __l = !trees in let __i = !k in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) then (
  pred := (!pred +. (learning_rate *. (match List.assoc_opt (__str ("left_value")) ((let __l = !trees in let __i = !k in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)));
  ) else (
  pred := (!pred +. (learning_rate *. (match List.assoc_opt (__str ("right_value")) ((let __l = !trees in let __i = !k in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)));
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  preds := (Obj.magic ((List.append (!preds) [(Obj.magic (!pred) : float)])) : float list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!preds) : float list); raise Return
  with Return -> !__ret)

and mean_absolute_error y_true y_pred =
  let __ret = ref 0.0 in
  (try
  let y_true = (Obj.magic y_true : float list) in
  let y_pred = (Obj.magic y_pred : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (y_true)) do
    try
  let diff = ref (((let __l = y_true in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = y_pred in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) in
  if (!diff < 0.0) then (
  diff := (-.(!diff));
  );
  sum := (!sum +. !diff);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum /. float_of_int (List.length (y_true)))) : float); raise Return
  with Return -> !__ret)

and mean_squared_error y_true y_pred =
  let __ret = ref 0.0 in
  (try
  let y_true = (Obj.magic y_true : float list) in
  let y_pred = (Obj.magic y_pred : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (y_true)) do
    try
  let diff = ((let __l = y_true in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = y_pred in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  sum := (!sum +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum /. float_of_int (List.length (y_true)))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let california = ref ([(__str ("data"), Obj.repr ([[1.0]; [2.0]; [3.0]; [4.0]])); (__str ("target"), Obj.repr ([2.0; 3.0; 4.0; 5.0]))]) in
  let ds = ref (data_handling (!california)) in
  let x_train = ref ((match List.assoc_opt (__str ("data")) (!ds) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> [])) in
  let y_train = ref ((match List.assoc_opt (__str ("target")) (!ds) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) in
  let x_test = ref ([[1.5]; [3.5]]) in
  let y_test = ref ([2.5; 4.5]) in
  let predictions = ref (xgboost (!x_train) (!y_train) (!x_test)) in
  print_endline ("Predictions:");
  print_endline (__show_list !predictions);
  print_endline ("Mean Absolute Error:");
  print_endline (string_of_float (mean_absolute_error (!y_test) (!predictions)));
  print_endline ("Mean Square Error:");
  print_endline (string_of_float (mean_squared_error (!y_test) (!predictions)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
