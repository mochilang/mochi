(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec dual v d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let v = (Obj.magic v : float) in
  let d = (Obj.magic d : float) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (v)); (__str ("deriv"), Obj.repr (d))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and pow_float base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let res = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  res := (!res *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float); raise Return
  with Return -> !__ret)

and add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float)))); (__str ("deriv"), Obj.repr (((Obj.obj (List.assoc (__str ("deriv")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("deriv")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float)))); (__str ("deriv"), Obj.repr (((Obj.obj (List.assoc (__str ("deriv")) (a) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("deriv")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float)))); (__str ("deriv"), Obj.repr ((((Obj.obj (List.assoc (__str ("deriv")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float)) +. ((Obj.obj (List.assoc (__str ("deriv")) (b) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and div a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float) /. (Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float)))); (__str ("deriv"), Obj.repr (((((Obj.obj (List.assoc (__str ("deriv")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float)) -. ((Obj.obj (List.assoc (__str ("deriv")) (b) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float))) /. ((Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : float)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and power a p =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let p = (Obj.magic p : int) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (pow_float (Obj.repr ((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float))) (Obj.repr (p)))); (__str ("deriv"), Obj.repr ((((1.0 *. float_of_int (p)) *. pow_float (Obj.repr ((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : float))) (Obj.repr ((p - 1)))) *. (Obj.obj (List.assoc (__str ("deriv")) (a) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = dual (Obj.repr (2.0)) (Obj.repr (1.0)) in
  let b = dual (Obj.repr (1.0)) (Obj.repr (0.0)) in
  let c = add (a) (b) in
  let d = mul (a) (b) in
  let e = div (c) (d) in
  print_endline ((Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("deriv")) (e) : Obj.t) : float))));
  let x = dual (Obj.repr (2.0)) (Obj.repr (1.0)) in
  let y = power (x) (Obj.repr (3)) in
  print_endline ((Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("deriv")) (y) : Obj.t) : float))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
