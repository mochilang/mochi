(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and make_knn train_data train_target class_labels =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let train_data = (Obj.magic train_data : float list list) in
  let train_target = (Obj.magic train_target : int list) in
  let class_labels = (Obj.magic class_labels : string list) in
  let items = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (train_data)) do
    try
  let pl = ref ([(__str ("point"), Obj.repr ((let __l = train_data in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))); (__str ("label"), Obj.repr ((let __l = train_target in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))]) in
  items := (Obj.magic ((List.append (!items) [(Obj.magic (!pl) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!items)); (__str ("labels"), Obj.repr (class_labels))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and euclidean_distance a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  let diff = ((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  sum := (!sum +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (sqrtApprox (Obj.repr (!sum))) : float); raise Return
  with Return -> !__ret)

and classify knn pred_point k =
  let __ret = ref "" in
  (try
  let knn = (Obj.magic knn : (string * Obj.t) list) in
  let pred_point = (Obj.magic pred_point : float list) in
  let k = (Obj.magic k : int) in
  let distances = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((match List.assoc_opt (__str ("data")) (knn) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []))) do
    try
  let d = euclidean_distance ((match List.assoc_opt (__str ("point")) ((let __l = (match List.assoc_opt (__str ("data")) (knn) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) (pred_point) in
  distances := (Obj.magic ((List.append (!distances) [(Obj.magic ([(__str ("dist"), Obj.repr (d)); (__str ("label"), Obj.repr ((match List.assoc_opt (__str ("label")) ((let __l = (match List.assoc_opt (__str ("data")) (knn) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))]) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let votes = ref (([] : (int) list)) in
  let count = ref (0) in
  (try while (!count < k) do
    try
  let min_index = ref (0) in
  let j = ref (1) in
  (try while (!j < List.length (!distances)) do
    try
  if ((match List.assoc_opt (__str ("dist")) ((let __l = !distances in let __i = !j in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) < (match List.assoc_opt (__str ("dist")) ((let __l = !distances in let __i = !min_index in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) then (
  min_index := !j;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  votes := (Obj.magic ((List.append (!votes) [(Obj.magic ((match List.assoc_opt (__str ("label")) ((let __l = !distances in let __i = !min_index in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int)])) : int list);
  distances := (List.mapi (fun __i __x -> if __i = !min_index then ((__str ("dist"), Obj.repr (Obj.magic (1000000000000000000.0) : (string * Obj.t) list)) :: List.remove_assoc (__str ("dist")) (Obj.magic ((let __l = !distances in let __i = !min_index in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) : (string * Obj.t) list)) else __x) (!distances));
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  let tally = ref (([] : (int) list)) in
  let t = ref (0) in
  (try while (!t < List.length ((match List.assoc_opt (__str ("labels")) (knn) with Some v -> (Obj.obj (v : Obj.t) : string list) | None -> []))) do
    try
  tally := (Obj.magic ((List.append (!tally) [(Obj.magic (0) : int)])) : int list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let v = ref (0) in
  (try while (!v < List.length (!votes)) do
    try
  let lbl = (let __l = !votes in let __i = !v in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  tally := (List.mapi (fun __i __x -> if __i = lbl then ((let __l = !tally in let __i = lbl in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!tally));
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  let max_idx = ref (0) in
  let m = ref (1) in
  (try while (!m < List.length (!tally)) do
    try
  if ((let __l = !tally in let __i = !m in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) > (let __l = !tally in let __i = !max_idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  max_idx := !m;
  );
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = (match List.assoc_opt (__str ("labels")) (knn) with Some v -> (Obj.obj (v : Obj.t) : string list) | None -> []) in let __i = !max_idx in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "")) : string); raise Return
  with Return -> !__ret)


let train_X = ref ([[0.0; 0.0]; [1.0; 0.0]; [0.0; 1.0]; [0.5; 0.5]; [3.0; 3.0]; [2.0; 3.0]; [3.0; 2.0]])
let train_y = ref ([0; 0; 0; 0; 1; 1; 1])
let classes = ref (["A"; "B"])
let knn = ref (make_knn (!train_X) (!train_y) (!classes))
let point = ref ([1.2; 1.2])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((classify (!knn) (!point) (Obj.repr (5))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
