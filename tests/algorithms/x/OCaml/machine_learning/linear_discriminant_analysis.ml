(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let seed = ref (1)
let rec rand () =
  let __ret = ref 0 in
  (try
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)

and random () =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic ((float_of_int (rand ()) /. 2147483648.0)) : float); raise Return
  with Return -> !__ret)

and _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (float_of_int (int_of_float ((x /. m))) *. m))) : float); raise Return
  with Return -> !__ret)

and cos x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y4 = (y2 *. y2) in
  let y6 = (y4 *. y2) in
  __ret := (Obj.magic ((((1.0 -. (y2 /. 2.0)) +. (y4 /. 24.0)) -. (y6 /. 720.0))) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let t = ((x -. 1.0) /. (x +. 1.0)) in
  let term = ref (t) in
  let sum = ref (0.0) in
  let n = ref (1) in
  (try while (!n <= 19) do
    try
  sum := (!sum +. (!term /. float_of_int (!n)));
  term := ((!term *. t) *. t);
  n := (!n + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((2.0 *. !sum)) : float); raise Return
  with Return -> !__ret)

and gaussian_distribution mean std_dev instance_count =
  let __ret = ref ([] : (float) list) in
  (try
  let mean = (Obj.magic mean : float) in
  let std_dev = (Obj.magic std_dev : float) in
  let instance_count = (Obj.magic instance_count : int) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < instance_count) do
    try
  let u1 = random () in
  let u2 = random () in
  let r = sqrtApprox (Obj.repr (((-.(2.0)) *. Float.log (u1)))) in
  let theta = (_two_pi *. u2) in
  let z = (r *. cos (Obj.repr (theta))) in
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((mean +. (z *. std_dev))) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and y_generator class_count instance_count =
  let __ret = ref ([] : (int) list) in
  (try
  let class_count = (Obj.magic class_count : int) in
  let instance_count = (Obj.magic instance_count : int list) in
  let res = ref (([] : (int) list)) in
  let k = ref (0) in
  (try while (!k < class_count) do
    try
  let i = ref (0) in
  (try while (!i < (let __l = instance_count in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!k) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and calculate_mean instance_count items =
  let __ret = ref 0.0 in
  (try
  let instance_count = (Obj.magic instance_count : int) in
  let items = (Obj.magic items : float list) in
  let total = ref (0.0) in
  let i = ref (0) in
  (try while (!i < instance_count) do
    try
  total := (!total +. (let __l = items in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!total /. float_of_int (instance_count))) : float); raise Return
  with Return -> !__ret)

and calculate_probabilities instance_count total_count =
  let __ret = ref 0.0 in
  (try
  let instance_count = (Obj.magic instance_count : int) in
  let total_count = (Obj.magic total_count : int) in
  __ret := (Obj.magic ((float_of_int (instance_count) /. float_of_int (total_count))) : float); raise Return
  with Return -> !__ret)

and calculate_variance items means total_count =
  let __ret = ref 0.0 in
  (try
  let items = (Obj.magic items : float list list) in
  let means = (Obj.magic means : float list) in
  let total_count = (Obj.magic total_count : int) in
  let squared_diff = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (items)) do
    try
  let j = ref (0) in
  (try while (!j < List.length ((let __l = items in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) do
    try
  let diff = ((let __l = (let __l = items in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = means in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  squared_diff := (Obj.magic ((List.append (!squared_diff) [(Obj.magic ((diff *. diff)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sum_sq = ref (0.0) in
  let k = ref (0) in
  (try while (!k < List.length (!squared_diff)) do
    try
  sum_sq := (!sum_sq +. (let __l = !squared_diff in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let n_classes = List.length (means) in
  __ret := (Obj.magic (((1.0 /. float_of_int ((total_count - n_classes))) *. !sum_sq)) : float); raise Return
  with Return -> !__ret)

and predict_y_values x_items means variance probabilities =
  let __ret = ref ([] : (int) list) in
  (try
  let x_items = (Obj.magic x_items : float list list) in
  let means = (Obj.magic means : float list) in
  let variance = (Obj.magic variance : float) in
  let probabilities = (Obj.magic probabilities : float list) in
  let results = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (x_items)) do
    try
  let j = ref (0) in
  (try while (!j < List.length ((let __l = x_items in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) do
    try
  let temp = ref (([] : (float) list)) in
  let k = ref (0) in
  (try while (!k < List.length (x_items)) do
    try
  let discr = ((((let __l = (let __l = x_items in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. ((let __l = means in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. variance)) -. (((let __l = means in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = means in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) /. (2.0 *. variance))) +. Float.log ((let __l = probabilities in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) in
  temp := (Obj.magic ((List.append (!temp) [(Obj.magic (discr) : float)])) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let max_idx = ref (0) in
  let max_val = ref ((let __l = !temp in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let t = ref (1) in
  (try while (!t < List.length (!temp)) do
    try
  if ((let __l = !temp in let __i = !t in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > !max_val) then (
  max_val := (let __l = !temp in let __i = !t in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.);
  max_idx := !t;
  );
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  results := (Obj.magic ((List.append (!results) [(Obj.magic (!max_idx) : int)])) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!results) : int list); raise Return
  with Return -> !__ret)

and accuracy actual_y predicted_y =
  let __ret = ref 0.0 in
  (try
  let actual_y = (Obj.magic actual_y : int list) in
  let predicted_y = (Obj.magic predicted_y : int list) in
  let correct = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (actual_y)) do
    try
  if ((let __l = actual_y in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = (let __l = predicted_y in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  correct := (!correct + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((float_of_int (!correct) /. float_of_int (List.length (actual_y))) *. 100.0)) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  seed := 1;
  let counts = ref ([20; 20; 20]) in
  let means = ref ([5.0; 10.0; 15.0]) in
  let std_dev = 1.0 in
  let x = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!counts)) do
    try
  x := (Obj.magic ((List.append (!x) [(Obj.magic (gaussian_distribution (Obj.repr ((let __l = !means in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) (Obj.repr (std_dev)) (Obj.repr ((let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let y = ref (y_generator (Obj.repr (List.length (!counts))) (!counts)) in
  let actual_means = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < List.length (!counts)) do
    try
  actual_means := (Obj.magic ((List.append (!actual_means) [(Obj.magic (calculate_mean (Obj.repr ((let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) ((let __l = !x in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let total_count = ref (0) in
  i := 0;
  (try while (!i < List.length (!counts)) do
    try
  total_count := (!total_count + (let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let probabilities = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < List.length (!counts)) do
    try
  probabilities := (Obj.magic ((List.append (!probabilities) [(Obj.magic (calculate_probabilities (Obj.repr ((let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) (Obj.repr (!total_count))) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let variance = calculate_variance (!x) (!actual_means) (Obj.repr (!total_count)) in
  let predicted = ref (predict_y_values (!x) (!actual_means) (Obj.repr (variance)) (!probabilities)) in
  print_endline (__show_list !predicted);
  print_endline (string_of_float (accuracy (!y) (!predicted)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
