(* Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:27 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref (int_of_float (x)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and round x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let m = pow10 (Obj.repr (n)) in
  let y = floor (Obj.repr (((x *. m) +. 0.5))) in
  __ret := (Obj.magic ((y /. m)) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and mean data =
  let __ret = ref 0.0 in
  (try
  let data = (Obj.magic data : float list) in
  let total = ref (0.0) in
  let i = ref (0) in
  let n = List.length (data) in
  (try while (!i < n) do
    try
  total := (!total +. (let __l = data in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!total /. float_of_int (n))) : float); raise Return
  with Return -> !__ret)

and stdev data =
  let __ret = ref 0.0 in
  (try
  let data = (Obj.magic data : float list) in
  let n = List.length (data) in
  if (n <= 1) then (
  (failwith ("data length must be > 1"));
  );
  let m = mean (data) in
  let sum_sq = ref (0.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let diff = ((let __l = data in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. m) in
  sum_sq := (!sum_sq +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (sqrtApprox (Obj.repr ((!sum_sq /. float_of_int ((n - 1)))))) : float); raise Return
  with Return -> !__ret)

and normalization data ndigits =
  let __ret = ref ([] : (float) list) in
  (try
  let data = (Obj.magic data : float list) in
  let ndigits = (Obj.magic ndigits : int) in
  let x_min = (List.fold_left min infinity data) in
  let x_max = (List.fold_left max neg_infinity data) in
  let denom = (x_max -. x_min) in
  let result = ref (([] : (float) list)) in
  let i = ref (0) in
  let n = List.length (data) in
  (try while (!i < n) do
    try
  let norm = (((let __l = data in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. x_min) /. denom) in
  result := (Obj.magic ((List.append (!result) [(Obj.magic (round (Obj.repr (norm)) (Obj.repr (ndigits))) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list); raise Return
  with Return -> !__ret)

and standardization data ndigits =
  let __ret = ref ([] : (float) list) in
  (try
  let data = (Obj.magic data : float list) in
  let ndigits = (Obj.magic ndigits : int) in
  let mu = mean (data) in
  let sigma = stdev (data) in
  let result = ref (([] : (float) list)) in
  let i = ref (0) in
  let n = List.length (data) in
  (try while (!i < n) do
    try
  let z = (((let __l = data in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. mu) /. sigma) in
  result := (Obj.magic ((List.append (!result) [(Obj.magic (round (Obj.repr (z)) (Obj.repr (ndigits))) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((__str (Obj.magic (normalization ([2.0; 7.0; 10.0; 20.0; 30.0; 50.0]) (Obj.repr (3))) : Obj.t)));
  print_endline ((__str (Obj.magic (normalization ([5.0; 10.0; 15.0; 20.0; 25.0]) (Obj.repr (3))) : Obj.t)));
  print_endline ((__str (Obj.magic (standardization ([2.0; 7.0; 10.0; 20.0; 30.0; 50.0]) (Obj.repr (3))) : Obj.t)));
  print_endline ((__str (Obj.magic (standardization ([5.0; 10.0; 15.0; 20.0; 25.0]) (Obj.repr (3))) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
