(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_winner weights sample =
  let __ret = ref 0 in
  (try
  let weights = (Obj.magic weights : float list list) in
  let sample = (Obj.magic sample : int list) in
  let d0 = ref (0.0) in
  let d1 = ref (0.0) in
  (try for i = 0 to (List.length (sample) - 1) do
    try
  let diff0 = (float_of_int ((let __l = sample in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) -. (let __l = (let __l = weights in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let diff1 = (float_of_int ((let __l = sample in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) -. (let __l = (let __l = weights in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  d0 := (!d0 +. (diff0 *. diff0));
  d1 := (!d1 +. (diff1 *. diff1));
  __ret := (Obj.magic (if (!d0 > !d1) then 0 else 1) : int); raise Return
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and update weights sample j alpha =
  let __ret = ref ([] : (float list) list) in
  (try
  weights := (Obj.magic !weights : float list list);
  let sample = (Obj.magic sample : int list) in
  let j = (Obj.magic j : int) in
  let alpha = (Obj.magic alpha : float) in
  (try for i = 0 to (List.length (!weights) - 1) do
    try
  weights := (List.mapi (fun __i __x -> if __i = j then (List.mapi (fun __i __x -> if __i = i then ((let __l = (let __l = !weights in let __i = j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. (alpha *. (float_of_int ((let __l = sample in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) -. (let __l = (let __l = !weights in let __i = j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)))) else __x) ((let __l = !weights in let __i = j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!weights));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!weights) : float list list); raise Return
  with Return -> !__ret)

and list_to_string xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : float list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" (Obj.magic ((let __l = xs in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)));
  if (!i < (List.length (xs) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and matrix_to_string m =
  let __ret = ref "" in
  (try
  let m = (Obj.magic m : float list list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  s := (!s ^ list_to_string ((let __l = m in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])));
  if (!i < (List.length (m) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let training_samples = ref ([[1; 1; 0; 0]; [0; 0; 0; 1]; [1; 0; 0; 0]; [0; 0; 1; 1]]) in
  let weights = ref ([[0.2; 0.6; 0.5; 0.9]; [0.8; 0.4; 0.7; 0.3]]) in
  let epochs = 3 in
  let alpha = 0.5 in
  (try for _ = 0 to (epochs - 1) do
    try
  (try for j = 0 to (List.length (!training_samples) - 1) do
    try
  let sample = ref ((let __l = !training_samples in let __i = j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let winner = get_winner (!weights) (!sample) in
  weights := (Obj.magic (update (weights) (!sample) (Obj.repr (winner)) (Obj.repr (alpha))) : float list list);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let sample = ref ([0; 0; 0; 1]) in
  let winner = get_winner (!weights) (!sample) in
  print_endline (("Clusters that the test sample belongs to : " ^ (string_of_int (Obj.magic (winner) : int))));
  print_endline (("Weights that have been trained : " ^ matrix_to_string (!weights)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
