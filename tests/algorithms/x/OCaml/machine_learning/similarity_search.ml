(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrt x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and euclidean a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  let diff = ((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  sum := (!sum +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = sqrt (Obj.repr (!sum)) in
  __ret := (Obj.magic (res) : float); raise Return
  with Return -> !__ret)

and similarity_search dataset value_array =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let dataset = (Obj.magic dataset : float list list) in
  let value_array = (Obj.magic value_array : float list list) in
  let dim = List.length ((let __l = dataset in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if (dim <> List.length ((let __l = value_array in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) then (
  __ret := (Obj.magic ([]) : (string * Obj.t) list list); raise Return
  );
  let result = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (value_array)) do
    try
  let value = ref ((let __l = value_array in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let dist = ref (euclidean (!value) ((let __l = dataset in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) in
  let vec = ref ((let __l = dataset in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let j = ref (1) in
  (try while (!j < List.length (dataset)) do
    try
  let d = euclidean (!value) ((let __l = dataset in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if (d < !dist) then (
  dist := d;
  vec := (Obj.magic ((let __l = dataset in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let nb = ref ([(__str ("vector"), Obj.repr (!vec)); (__str ("distance"), Obj.repr (!dist))]) in
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!nb) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and cosine_similarity a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let dot = ref (0.0) in
  let norm_a = ref (0.0) in
  let norm_b = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  dot := (!dot +. ((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  norm_a := (!norm_a +. ((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  norm_b := (!norm_b +. ((let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if ((!norm_a = 0.0) || (!norm_b = 0.0)) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((!dot /. (sqrt (Obj.repr (!norm_a)) *. sqrt (Obj.repr (!norm_b))))) : float); raise Return
  with Return -> !__ret)


let dataset = ref ([[0.0; 0.0; 0.0]; [1.0; 1.0; 1.0]; [2.0; 2.0; 2.0]])
let value_array = ref ([[0.0; 0.0; 0.0]; [0.0; 0.0; 1.0]])
let neighbors = ref (similarity_search (!dataset) (!value_array))
let k = ref (0)
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  (try while (!k < List.length (!neighbors)) do
    try
  let n = ref ((let __l = !neighbors in let __i = !k in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) in
  print_endline ((((("[" ^ (__str (Obj.magic ((match List.assoc_opt (__str ("vector")) (!n) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) : Obj.t))) ^ ", ") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("distance")) (!n) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))) ^ "]"));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (cosine_similarity ([1.0; 2.0]) ([6.0; 32.0])) : float)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
