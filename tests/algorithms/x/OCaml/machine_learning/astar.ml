(* Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:27 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_neighbours p x_limit y_limit =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let x_limit = (Obj.magic x_limit : int) in
  let y_limit = (Obj.magic y_limit : int) in
  let deltas = ref ([[(__str ("x"), Obj.repr ((0 - 1))); (__str ("y"), Obj.repr ((0 - 1)))]; [(__str ("x"), Obj.repr ((0 - 1))); (__str ("y"), Obj.repr (0))]; [(__str ("x"), Obj.repr ((0 - 1))); (__str ("y"), Obj.repr (1))]; [(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr ((0 - 1)))]; [(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr (1))]; [(__str ("x"), Obj.repr (1)); (__str ("y"), Obj.repr ((0 - 1)))]; [(__str ("x"), Obj.repr (1)); (__str ("y"), Obj.repr (0))]; [(__str ("x"), Obj.repr (1)); (__str ("y"), Obj.repr (1))]]) in
  let neighbours = ref (([] : ((string * Obj.t) list) list)) in
  (try List.iter (fun d ->
    try
  let nx = ((match List.assoc_opt (__str ("x")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) + (match List.assoc_opt (__str ("x")) (d) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) in
  let ny = ((match List.assoc_opt (__str ("y")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) + (match List.assoc_opt (__str ("y")) (d) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) in
  if ((((0 <= nx) && (nx < x_limit)) && (0 <= ny)) && (ny < y_limit)) then (
  neighbours := (Obj.magic ((List.append (!neighbours) [(Obj.magic ([(__str ("x"), Obj.repr (nx)); (__str ("y"), Obj.repr (ny))]) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  );
    with Continue -> ()) (!deltas) with Break -> ());
  __ret := (Obj.magic (!neighbours) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and contains nodes p =
  let __ret = ref false in
  (try
  let nodes = (Obj.magic nodes : (string * Obj.t) list list) in
  let p = (Obj.magic p : (string * Obj.t) list) in
  (try List.iter (fun n ->
    try
  if (((match List.assoc_opt (__str ("x")) ((match List.assoc_opt (__str ("pos")) (n) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("x")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) && ((match List.assoc_opt (__str ("y")) ((match List.assoc_opt (__str ("pos")) (n) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("y")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (nodes) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and get_node nodes p =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nodes = (Obj.magic nodes : (string * Obj.t) list list) in
  let p = (Obj.magic p : (string * Obj.t) list) in
  (try List.iter (fun n ->
    try
  if (((match List.assoc_opt (__str ("x")) ((match List.assoc_opt (__str ("pos")) (n) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("x")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) && ((match List.assoc_opt (__str ("y")) ((match List.assoc_opt (__str ("pos")) (n) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("y")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) then (
  __ret := (Obj.magic (n) : (string * Obj.t) list); raise Return
  );
    with Continue -> ()) (nodes) with Break -> ());
  __ret := (Obj.magic ([(__str ("pos"), Obj.repr (p)); (__str ("parent"), Obj.repr ([(__str ("x"), Obj.repr ((0 - 1))); (__str ("y"), Obj.repr ((0 - 1)))])); (__str ("g"), Obj.repr (0)); (__str ("h"), Obj.repr (0)); (__str ("f"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and astar x_limit y_limit start goal =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let x_limit = (Obj.magic x_limit : int) in
  let y_limit = (Obj.magic y_limit : int) in
  let start = (Obj.magic start : (string * Obj.t) list) in
  let goal = (Obj.magic goal : (string * Obj.t) list) in
  let open_ = ref (([] : ((string * Obj.t) list) list)) in
  let closed = ref (([] : ((string * Obj.t) list) list)) in
  open_ := (Obj.magic ((List.append (!open_) [(Obj.magic ([(__str ("pos"), Obj.repr (start)); (__str ("parent"), Obj.repr ([(__str ("x"), Obj.repr ((0 - 1))); (__str ("y"), Obj.repr ((0 - 1)))])); (__str ("g"), Obj.repr (0)); (__str ("h"), Obj.repr (0)); (__str ("f"), Obj.repr (0))]) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  let current = ref ((let __l = !open_ in let __i = 0 in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) in
  (try while (List.length (!open_) > 0) do
    try
  let min_index = ref (0) in
  let i = ref (1) in
  (try while (!i < List.length (!open_)) do
    try
  if ((match List.assoc_opt (__str ("f")) ((let __l = !open_ in let __i = !i in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) < (match List.assoc_opt (__str ("f")) ((let __l = !open_ in let __i = !min_index in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) then (
  min_index := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  current := (let __l = !open_ in let __i = !min_index in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list));
  let new_open = ref (([] : ((string * Obj.t) list) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!open_)) do
    try
  if (!j <> !min_index) then (
  new_open := (Obj.magic ((List.append (!new_open) [(Obj.magic ((let __l = !open_ in let __i = !j in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  open_ := (Obj.magic (!new_open) : (string * Obj.t) list list);
  closed := (Obj.magic ((List.append (!closed) [(Obj.magic (!current) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  if (((match List.assoc_opt (__str ("x")) ((match List.assoc_opt (__str ("pos")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("x")) (goal) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) && ((match List.assoc_opt (__str ("y")) ((match List.assoc_opt (__str ("pos")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("y")) (goal) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) then (
  raise Break;
  );
  let neighbours = ref (get_neighbours ((Obj.magic ((match List.assoc_opt (__str ("pos")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) : (string * Obj.t) list)) (Obj.repr (x_limit)) (Obj.repr (y_limit))) in
  (try List.iter (fun np ->
    try
  if contains ((Obj.magic (!closed) : (string * Obj.t) list list)) (np) then (
  raise Continue;
  );
  let g = ((match List.assoc_opt (__str ("g")) (!current) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) + 1) in
  let dx = ((match List.assoc_opt (__str ("x")) (goal) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) - (match List.assoc_opt (__str ("x")) (np) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) in
  let dy = ((match List.assoc_opt (__str ("y")) (goal) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) - (match List.assoc_opt (__str ("y")) (np) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) in
  let h = ((dx * dx) + (dy * dy)) in
  let f = (g + h) in
  let skip = ref (false) in
  (try List.iter (fun node ->
    try
  if ((((match List.assoc_opt (__str ("x")) ((match List.assoc_opt (__str ("pos")) (node) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("x")) (np) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) && ((match List.assoc_opt (__str ("y")) ((match List.assoc_opt (__str ("pos")) (node) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (match List.assoc_opt (__str ("y")) (np) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) && ((match List.assoc_opt (__str ("f")) (node) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) < f)) then (
  skip := true;
  );
    with Continue -> ()) (!open_) with Break -> ());
  if !skip then (
  raise Continue;
  );
  open_ := (Obj.magic ((List.append (!open_) [(Obj.magic ([(__str ("pos"), Obj.repr (np)); (__str ("parent"), Obj.repr ((match List.assoc_opt (__str ("pos")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []))); (__str ("g"), Obj.repr (g)); (__str ("h"), Obj.repr (h)); (__str ("f"), Obj.repr (f))]) : (string * Obj.t) list)])) : (string * Obj.t) list list);
    with Continue -> ()) (!neighbours) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let path = ref (([] : ((string * Obj.t) list) list)) in
  path := (Obj.magic ((List.append (!path) [(Obj.magic ((match List.assoc_opt (__str ("pos")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  (try while not ((((match List.assoc_opt (__str ("x")) ((match List.assoc_opt (__str ("parent")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (0 - 1)) && ((match List.assoc_opt (__str ("y")) ((match List.assoc_opt (__str ("parent")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (0 - 1)))) do
    try
  current := get_node ((Obj.magic (!closed) : (string * Obj.t) list list)) ((Obj.magic ((match List.assoc_opt (__str ("parent")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) : (string * Obj.t) list));
  path := (Obj.magic ((List.append (!path) [(Obj.magic ((match List.assoc_opt (__str ("pos")) (!current) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) : (string * Obj.t) list)])) : (string * Obj.t) list list);
    with Continue -> ()
  done with Break -> ());
  let rev = ref (([] : ((string * Obj.t) list) list)) in
  let k = ref ((List.length (!path) - 1)) in
  (try while (!k >= 0) do
    try
  rev := (Obj.magic ((List.append (!rev) [(Obj.magic ((let __l = !path in let __i = !k in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!rev) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and create_world x_limit y_limit =
  let __ret = ref ([] : (int list) list) in
  (try
  let x_limit = (Obj.magic x_limit : int) in
  let y_limit = (Obj.magic y_limit : int) in
  let world = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < x_limit) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < y_limit) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0) : int)])) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  world := (Obj.magic ((List.append (!world) [(Obj.magic (!row) : int list)])) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!world) : int list list); raise Return
  with Return -> !__ret)

and mark_path world path =
  let __ret = ref (Obj.magic 0) in
  (try
  world := (Obj.magic !world : int list list);
  let path = (Obj.magic path : (string * Obj.t) list list) in
  (try List.iter (fun p ->
    try
  world := (List.mapi (fun __i __x -> if __i = (match List.assoc_opt (__str ("x")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) then (List.mapi (fun __i __x -> if __i = (match List.assoc_opt (__str ("y")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) then 1 else __x) ((let __l = !world in let __i = (match List.assoc_opt (__str ("x")) (p) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!world));
    with Continue -> ()) (path) with Break -> ());
    !__ret
  with Return -> !__ret)

and print_world world =
  let __ret = ref (Obj.magic 0) in
  (try
  let world = (Obj.magic world : int list list) in
  (try List.iter (fun row ->
    try
  print_endline ((__str (Obj.magic (row) : Obj.t)));
    with Continue -> ()) (world) with Break -> ());
    !__ret
  with Return -> !__ret)


let world_x = 5
let world_y = 5
let start = ref ([(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr (0))])
let goal = ref ([(__str ("x"), Obj.repr (4)); (__str ("y"), Obj.repr (4))])
let path = ref (astar (Obj.repr (world_x)) (Obj.repr (world_y)) (!start) (!goal))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((((((((("path from (" ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str ("x")) (!start) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int))) ^ ", ") ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str ("y")) (!start) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int))) ^ ") to (") ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str ("x")) (!goal) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int))) ^ ", ") ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str ("y")) (!goal) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int))) ^ ")"));
  let world = ref (create_world (Obj.repr (world_x)) (Obj.repr (world_y))) in
  ignore (mark_path (world) ((Obj.magic (!path) : (string * Obj.t) list list)));
  ignore (print_world (!world));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
