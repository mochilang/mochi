(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec mean xs =
  let __ret = ref 0.0 in
  (try
  let xs = (Obj.magic xs : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  sum := (!sum +. (let __l = xs in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum /. (float_of_int (List.length (xs)) *. 1.0))) : float); raise Return
  with Return -> !__ret)

and stump_predict s x =
  let __ret = ref 0.0 in
  (try
  let s = (Obj.magic s : (string * Obj.t) list) in
  let x = (Obj.magic x : float list) in
  if ((let __l = x in let __i = (match List.assoc_opt (__str ("feature")) (s) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < (match List.assoc_opt (__str ("threshold")) (s) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) then (
  __ret := (Obj.magic ((match List.assoc_opt (__str ("left")) (s) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float); raise Return
  );
  __ret := (Obj.magic ((match List.assoc_opt (__str ("right")) (s) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float); raise Return
  with Return -> !__ret)

and train_stump features residuals =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let features = (Obj.magic features : float list list) in
  let residuals = (Obj.magic residuals : float list) in
  let best_feature = ref (0) in
  let best_threshold = ref (0.0) in
  let best_error = ref (1000000000.0) in
  let best_left = ref (0.0) in
  let best_right = ref (0.0) in
  let num_features = List.length ((let __l = features in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let f = ref (0) in
  (try while (!f < num_features) do
    try
  let i = ref (0) in
  (try while (!i < List.length (features)) do
    try
  let threshold = (let __l = (let __l = features in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !f in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let left = ref (([] : (float) list)) in
  let right = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (features)) do
    try
  if ((let __l = (let __l = features in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !f in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < threshold) then (
  left := (Obj.magic ((!left @ [(let __l = residuals in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)])) : float list);
  ) else (
  right := (Obj.magic ((!right @ [(let __l = residuals in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)])) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if ((List.length (!left) <> 0) && (List.length (!right) <> 0)) then (
  let left_mean = mean (!left) in
  let right_mean = mean (!right) in
  let err = ref (0.0) in
  j := 0;
  (try while (!j < List.length (features)) do
    try
  let pred = if ((let __l = (let __l = features in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !f in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < threshold) then left_mean else right_mean in
  let diff = ((let __l = residuals in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. pred) in
  err := (!err +. (diff *. diff));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!err < !best_error) then (
  best_error := !err;
  best_feature := !f;
  best_threshold := threshold;
  best_left := left_mean;
  best_right := right_mean;
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  f := (!f + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("feature"), Obj.repr (!best_feature)); (__str ("threshold"), Obj.repr (!best_threshold)); (__str ("left"), Obj.repr (!best_left)); (__str ("right"), Obj.repr (!best_right))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and boost features targets rounds =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let features = (Obj.magic features : float list list) in
  let targets = (Obj.magic targets : int list) in
  let rounds = (Obj.magic rounds : int) in
  let model = ref (([] : ((string * Obj.t) list) list)) in
  let preds = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (targets)) do
    try
  preds := (Obj.magic ((!preds @ [0.0])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let r = ref (0) in
  (try while (!r < rounds) do
    try
  let residuals = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (targets)) do
    try
  residuals := (Obj.magic ((!residuals @ [(float_of_int ((let __l = targets in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) -. (let __l = !preds in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let stump = ref (train_stump (features) (!residuals)) in
  model := (Obj.magic ((!model @ [!stump])) : (string * Obj.t) list list);
  j := 0;
  (try while (!j < List.length (!preds)) do
    try
  preds := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !preds in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. stump_predict (!stump) ((let __l = features in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!preds));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!model) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and predict model x =
  let __ret = ref 0.0 in
  (try
  let model = (Obj.magic model : (string * Obj.t) list list) in
  let x = (Obj.magic x : float list) in
  let score = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (model)) do
    try
  let s = ref ((let __l = model in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if ((let __l = x in let __i = (match List.assoc_opt (__str ("feature")) (!s) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < (match List.assoc_opt (__str ("threshold")) (!s) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) then (
  score := (!score +. (match List.assoc_opt (__str ("left")) (!s) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.));
  ) else (
  score := (!score +. (match List.assoc_opt (__str ("right")) (!s) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!score) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let features = ref ([[5.1; 3.5]; [4.9; 3.0]; [6.2; 3.4]; [5.9; 3.0]]) in
  let targets = ref ([0; 0; 1; 1]) in
  let model = ref (boost (!features) (!targets) (Obj.repr (3))) in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (!features)) do
    try
  let s = predict ((Obj.magic (!model) : (string * Obj.t) list list)) ((let __l = !features in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let label = if (s >= 0.5) then 1 else 0 in
  if (!i = 0) then (
  out := (string_of_int (Obj.magic (label) : int));
  ) else (
  out := ((!out ^ " ") ^ (string_of_int (Obj.magic (label) : int)));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!out);
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
