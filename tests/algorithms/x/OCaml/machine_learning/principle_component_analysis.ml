(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrt x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref (if (x > 1.0) then (x /. 2.0) else 1.0) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := (0.5 *. (!guess +. (x /. !guess)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and mean xs =
  let __ret = ref 0.0 in
  (try
  let xs = (Obj.magic xs : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  sum := (!sum +. (let __l = xs in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum /. float_of_int (List.length (xs)))) : float); raise Return
  with Return -> !__ret)

and standardize data =
  let __ret = ref ([] : (float list) list) in
  (try
  let data = (Obj.magic data : float list list) in
  let n_samples = List.length (data) in
  let n_features = List.length ((let __l = data in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let means = ref (([] : (float) list)) in
  let stds = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n_features) do
    try
  let column = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < n_samples) do
    try
  column := (Obj.magic ((List.append (!column) [(Obj.magic ((let __l = (let __l = data in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let m = mean (!column) in
  means := (Obj.magic ((List.append (!means) [(Obj.magic (m) : float)])) : float list);
  let variance = ref (0.0) in
  let k = ref (0) in
  (try while (!k < n_samples) do
    try
  let diff = ((let __l = !column in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. m) in
  variance := (!variance +. (diff *. diff));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  stds := (Obj.magic ((List.append (!stds) [(Obj.magic (sqrt (Obj.repr ((!variance /. float_of_int ((n_samples - 1)))))) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let standardized = ref (([] : (float list) list)) in
  let r = ref (0) in
  (try while (!r < n_samples) do
    try
  let row = ref (([] : (float) list)) in
  let c = ref (0) in
  (try while (!c < n_features) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((((let __l = (let __l = data in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = !means in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) /. (let __l = !stds in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) : float)])) : float list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  standardized := (Obj.magic ((List.append (!standardized) [(Obj.magic (!row) : float list)])) : float list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!standardized) : float list list); raise Return
  with Return -> !__ret)

and covariance_matrix data =
  let __ret = ref ([] : (float list) list) in
  (try
  let data = (Obj.magic data : float list list) in
  let n_samples = List.length (data) in
  let n_features = List.length ((let __l = data in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let cov = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n_features) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n_features) do
    try
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < n_samples) do
    try
  sum := (!sum +. ((let __l = (let __l = data in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = (let __l = data in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((!sum /. float_of_int ((n_samples - 1)))) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  cov := (Obj.magic ((List.append (!cov) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cov) : float list list); raise Return
  with Return -> !__ret)

and normalize vec =
  let __ret = ref ([] : (float) list) in
  (try
  let vec = (Obj.magic vec : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (vec)) do
    try
  sum := (!sum +. ((let __l = vec in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = vec in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = sqrt (Obj.repr (!sum)) in
  let res = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (vec)) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic (((let __l = vec in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. n)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and eigen_decomposition_2x2 matrix =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let a = (let __l = (let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let b = (let __l = (let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let c = (let __l = (let __l = matrix in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let diff = (a -. c) in
  let discriminant = sqrt (Obj.repr (((diff *. diff) +. ((4.0 *. b) *. b)))) in
  let lambda1 = (((a +. c) +. discriminant) /. 2.0) in
  let lambda2 = (((a +. c) -. discriminant) /. 2.0) in
  let v1 = ref (([] : (float) list)) in
  let v2 = ref (([] : (float) list)) in
  if (b <> 0.0) then (
  v1 := (Obj.magic (normalize ([(lambda1 -. c); b])) : float list);
  v2 := (Obj.magic (normalize ([(lambda2 -. c); b])) : float list);
  ) else (
  v1 := (Obj.magic ([1.0; 0.0]) : float list);
  v2 := (Obj.magic ([0.0; 1.0]) : float list);
  );
  let eigenvalues = ref ([lambda1; lambda2]) in
  let eigenvectors = ref ([!v1; !v2]) in
  if ((let __l = !eigenvalues in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < (let __l = !eigenvalues in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) then (
  let tmp_val = (let __l = !eigenvalues in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  eigenvalues := (List.mapi (fun __i __x -> if __i = 0 then (let __l = !eigenvalues in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) else __x) (!eigenvalues));
  eigenvalues := (List.mapi (fun __i __x -> if __i = 1 then tmp_val else __x) (!eigenvalues));
  let tmp_vec = ref ((let __l = !eigenvectors in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  eigenvectors := (List.mapi (fun __i __x -> if __i = 0 then (let __l = !eigenvectors in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) else __x) (!eigenvectors));
  eigenvectors := (List.mapi (fun __i __x -> if __i = 1 then !tmp_vec else __x) (!eigenvectors));
  );
  __ret := (Obj.magic ([(__str ("values"), Obj.repr (!eigenvalues)); (__str ("vectors"), Obj.repr (!eigenvectors))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and transpose matrix =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let rows = List.length (matrix) in
  let cols = List.length ((let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let trans = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < cols) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < rows) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((let __l = (let __l = matrix in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  trans := (Obj.magic ((List.append (!trans) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!trans) : float list list); raise Return
  with Return -> !__ret)

and matrix_multiply a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let b = (Obj.magic b : float list list) in
  let rows_a = List.length (a) in
  let cols_a = List.length ((let __l = a in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let rows_b = List.length (b) in
  let cols_b = List.length ((let __l = b in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if (cols_a <> rows_b) then (
  (failwith ("Incompatible matrices"));
  );
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows_a) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < cols_b) do
    try
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < cols_a) do
    try
  sum := (!sum +. ((let __l = (let __l = a in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = (let __l = b in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!sum) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and apply_pca data n_components =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let data = (Obj.magic data : float list list) in
  let n_components = (Obj.magic n_components : int) in
  let standardized = ref (standardize (data)) in
  let cov = ref (covariance_matrix (!standardized)) in
  let eig = ref (eigen_decomposition_2x2 (!cov)) in
  let eigenvalues = ref ((match List.assoc_opt (__str ("values")) (!eig) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) in
  let eigenvectors = ref ((match List.assoc_opt (__str ("vectors")) (!eig) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> [])) in
  let components = ref (transpose (!eigenvectors)) in
  let transformed = ref (matrix_multiply (!standardized) (!components)) in
  let total = ((let __l = !eigenvalues in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. (let __l = !eigenvalues in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let ratios = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < n_components) do
    try
  ratios := (Obj.magic ((List.append (!ratios) [(Obj.magic (((let __l = !eigenvalues in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. total)) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("transformed"), Obj.repr (!transformed)); (__str ("variance_ratio"), Obj.repr (!ratios))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let data = ref ([[2.5; 2.4]; [0.5; 0.7]; [2.2; 2.9]; [1.9; 2.2]; [3.1; 3.0]; [2.3; 2.7]; [2.0; 1.6]; [1.0; 1.1]; [1.5; 1.6]; [1.1; 0.9]])
let result = ref (apply_pca (!data) (Obj.repr (2)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ("Transformed Data (first 5 rows):");
  let idx = ref (0) in
  (try while (!idx < 5) do
    try
  print_endline (__show_list ((let __l = (match List.assoc_opt (__str ("transformed")) (!result) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !idx in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("Explained Variance Ratio:");
  print_endline (__show (match List.assoc_opt (__str ("variance_ratio")) (!result) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> []));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
