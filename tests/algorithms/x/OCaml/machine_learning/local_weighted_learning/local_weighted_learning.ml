(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec expApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((1.0 /. expApprox (Obj.repr ((-.(x)))))) : float); raise Return
  );
  if (x > 1.0) then (
  let half = expApprox (Obj.repr ((x /. 2.0))) in
  __ret := (Obj.magic ((half *. half)) : float); raise Return
  );
  let sum = ref (1.0) in
  let term = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 20) do
    try
  term := ((!term *. x) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and transpose mat =
  let __ret = ref ([] : (float list) list) in
  (try
  let mat = (Obj.magic mat : float list list) in
  let rows = List.length (mat) in
  let cols = List.length ((let __l = mat in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < cols) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < rows) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((let __l = (let __l = mat in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list list); raise Return
  with Return -> !__ret)

and matMul a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let b = (Obj.magic b : float list list) in
  let a_rows = List.length (a) in
  let a_cols = List.length ((let __l = a in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let b_cols = List.length ((let __l = b in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < a_rows) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < b_cols) do
    try
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < a_cols) do
    try
  sum := (!sum +. ((let __l = (let __l = a in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = (let __l = b in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!sum) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list list); raise Return
  with Return -> !__ret)

and matInv mat =
  let __ret = ref ([] : (float list) list) in
  (try
  let mat = (Obj.magic mat : float list list) in
  let n = List.length (mat) in
  let aug = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((let __l = (let __l = mat in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  j := 0;
  (try while (!j < n) do
    try
  if (!i = !j) then (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (1.0) : float)])) : float list);
  ) else (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0.0) : float)])) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  aug := (Obj.magic ((List.append (!aug) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let col = ref (0) in
  (try while (!col < n) do
    try
  let pivot = (let __l = (let __l = !aug in let __i = !col in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !col in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  if (pivot = 0.0) then (
  (failwith ("Matrix is singular"));
  );
  let j = ref (0) in
  (try while (!j < (2 * n)) do
    try
  aug := (List.mapi (fun __i __x -> if __i = !col then (List.mapi (fun __i __x -> if __i = !j then ((let __l = (let __l = !aug in let __i = !col in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. pivot) else __x) ((let __l = !aug in let __i = !col in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!aug));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let r = ref (0) in
  (try while (!r < n) do
    try
  if (!r <> !col) then (
  let factor = (let __l = (let __l = !aug in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !col in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  j := 0;
  (try while (!j < (2 * n)) do
    try
  aug := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = !j then ((let __l = (let __l = !aug in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (factor *. (let __l = (let __l = !aug in let __i = !col in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) else __x) ((let __l = !aug in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!aug));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  let inv = ref (([] : (float list) list)) in
  i := 0;
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((let __l = (let __l = !aug in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = (!j + n) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  inv := (Obj.magic ((List.append (!inv) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!inv) : float list list); raise Return
  with Return -> !__ret)

and weight_matrix point x_train tau =
  let __ret = ref ([] : (float list) list) in
  (try
  let point = (Obj.magic point : float list) in
  let x_train = (Obj.magic x_train : float list list) in
  let tau = (Obj.magic tau : float) in
  let m = List.length (x_train) in
  let weights = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < m) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < m) do
    try
  if (!i = !j) then (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (1.0) : float)])) : float list);
  ) else (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0.0) : float)])) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  weights := (Obj.magic ((List.append (!weights) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < m) do
    try
  let diff_sq = ref (0.0) in
  let k = ref (0) in
  (try while (!k < List.length (point)) do
    try
  let diff = ((let __l = point in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = (let __l = x_train in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  diff_sq := (!diff_sq +. (diff *. diff));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  weights := (List.mapi (fun __i __x -> if __i = !j then (List.mapi (fun __i __x -> if __i = !j then expApprox (Obj.repr (((-.(!diff_sq)) /. ((2.0 *. tau) *. tau)))) else __x) ((let __l = !weights in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!weights));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!weights) : float list list); raise Return
  with Return -> !__ret)

and local_weight point x_train y_train tau =
  let __ret = ref ([] : (float list) list) in
  (try
  let point = (Obj.magic point : float list) in
  let x_train = (Obj.magic x_train : float list list) in
  let y_train = (Obj.magic y_train : float list) in
  let tau = (Obj.magic tau : float) in
  let w = ref (weight_matrix (point) (x_train) (Obj.repr (tau))) in
  let x_t = ref (transpose (x_train)) in
  let x_t_w = ref (matMul (!x_t) (!w)) in
  let x_t_w_x = ref (matMul (!x_t_w) (x_train)) in
  let inv_part = ref (matInv (!x_t_w_x)) in
  let y_col = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (y_train)) do
    try
  y_col := (Obj.magic ((List.append (!y_col) [(Obj.magic ([(let __l = y_train in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)]) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let x_t_w_y = ref (matMul (!x_t_w) (!y_col)) in
  __ret := (Obj.magic (matMul (!inv_part) (!x_t_w_y)) : float list list); raise Return
  with Return -> !__ret)

and local_weight_regression x_train y_train tau =
  let __ret = ref ([] : (float) list) in
  (try
  let x_train = (Obj.magic x_train : float list list) in
  let y_train = (Obj.magic y_train : float list) in
  let tau = (Obj.magic tau : float) in
  let m = List.length (x_train) in
  let preds = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < m) do
    try
  let theta = ref (local_weight ((let __l = x_train in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) (x_train) (y_train) (Obj.repr (tau))) in
  let weights_vec = ref (([] : (float) list)) in
  let k = ref (0) in
  (try while (!k < List.length (!theta)) do
    try
  weights_vec := (Obj.magic ((List.append (!weights_vec) [(Obj.magic ((let __l = (let __l = !theta in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let pred = ref (0.0) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = x_train in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) do
    try
  pred := (!pred +. ((let __l = (let __l = x_train in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = !weights_vec in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  preds := (Obj.magic ((List.append (!preds) [(Obj.magic (!pred) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!preds) : float list); raise Return
  with Return -> !__ret)


let x_train = ref ([[16.99; 10.34]; [21.01; 23.68]; [24.59; 25.69]])
let y_train = ref ([1.01; 1.66; 3.5])
let preds = ref (local_weight_regression (!x_train) (!y_train) (Obj.repr (0.6)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (__str (Obj.repr (!preds)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
