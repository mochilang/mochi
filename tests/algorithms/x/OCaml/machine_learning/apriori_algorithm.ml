(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec load_data () =
  let __ret = ref ([] : (string list) list) in
  (try
  __ret := (Obj.magic ([["milk"]; ["milk"; "butter"]; ["milk"; "bread"]; ["milk"; "bread"; "chips"]]) : string list list); raise Return
  with Return -> !__ret)

and contains_string xs s =
  let __ret = ref false in
  (try
  let xs = (Obj.magic xs : string list) in
  (try List.iter (fun v ->
    try
  if (v = s) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (xs) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_subset candidate transaction =
  let __ret = ref false in
  (try
  let candidate = (Obj.magic candidate : string list) in
  let transaction = (Obj.magic transaction : string list) in
  (try List.iter (fun it ->
    try
  if not (contains_string (transaction) (it)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) (candidate) with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and lists_equal a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : string list) in
  let b = (Obj.magic b : string list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and contains_list itemset item =
  let __ret = ref false in
  (try
  let itemset = (Obj.magic itemset : string list list) in
  let item = (Obj.magic item : string list) in
  (try List.iter (fun l ->
    try
  if lists_equal (l) (item) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (itemset) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and count_list itemset item =
  let __ret = ref 0 in
  (try
  let itemset = (Obj.magic itemset : string list list) in
  let item = (Obj.magic item : string list) in
  let c = ref (0) in
  (try List.iter (fun l ->
    try
  if lists_equal (l) (item) then (
  c := (!c + 1);
  );
    with Continue -> ()) (itemset) with Break -> ());
  __ret := (Obj.magic (!c) : int); raise Return
  with Return -> !__ret)

and slice_list xs start =
  let __ret = ref ([] : (string list) list) in
  (try
  let xs = (Obj.magic xs : string list list) in
  let start = (Obj.magic start : int) in
  let res = ref (([] : (string list) list)) in
  let i = ref (start) in
  (try while (!i < List.length (xs)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string list)]) : string list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list list); raise Return
  with Return -> !__ret)

and combinations_lists xs k =
  let __ret = ref ([] : (string list list) list) in
  (try
  let xs = (Obj.magic xs : string list list) in
  let k = (Obj.magic k : int) in
  let result = ref (([] : (string list list) list)) in
  if (k = 0) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ([]) : string list list)]) : string list list list);
  __ret := (Obj.magic (!result) : string list list list); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  let head = ref ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let tail = ref (slice_list (xs) (Obj.repr ((!i + 1)))) in
  let tail_combos = ref (combinations_lists (!tail) (Obj.repr ((k - 1)))) in
  (try List.iter (fun combo ->
    try
  let new_combo = ref (([] : (string list) list)) in
  new_combo := (Obj.magic (List.append (!new_combo) [(Obj.magic (!head) : string list)]) : string list list);
  (try List.iter (fun c ->
    try
  new_combo := (Obj.magic (List.append (!new_combo) [(Obj.magic (c) : string list)]) : string list list);
    with Continue -> ()) (combo) with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!new_combo) : string list list)]) : string list list list);
    with Continue -> ()) (!tail_combos) with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string list list list); raise Return
  with Return -> !__ret)

and prune itemset candidates length =
  let __ret = ref ([] : (string list list) list) in
  (try
  let itemset = (Obj.magic itemset : string list list) in
  let candidates = (Obj.magic candidates : string list list list) in
  let length = (Obj.magic length : int) in
  let pruned = ref (([] : (string list list) list)) in
  (try List.iter (fun candidate ->
    try
  let is_subsequence = ref (true) in
  (try List.iter (fun item ->
    try
  if (not (contains_list (itemset) (item)) || (count_list (itemset) (item) < (length - 1))) then (
  is_subsequence := false;
  raise Break;
  );
    with Continue -> ()) (candidate) with Break -> ());
  if !is_subsequence then (
  pruned := (Obj.magic (List.append (!pruned) [(Obj.magic (candidate) : string list list)]) : string list list list);
  );
    with Continue -> ()) (candidates) with Break -> ());
  __ret := (Obj.magic (!pruned) : string list list list); raise Return
  with Return -> !__ret)

and sort_strings xs =
  let __ret = ref ([] : (string) list) in
  (try
  let xs = (Obj.magic xs : string list) in
  let res = ref (([] : (string) list)) in
  (try List.iter (fun s ->
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (s) : string)]) : string list);
    with Continue -> ()) (xs) with Break -> ());
  let i = ref (0) in
  (try while (!i < List.length (!res)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < List.length (!res)) do
    try
  if ((let __l = !res in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = !res in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  let tmp = (let __l = !res in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  res := (List.mapi (fun __i __x -> if __i = !i then (let __l = !res in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!res));
  res := (List.mapi (fun __i __x -> if __i = !j then tmp else __x) (!res));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and itemset_to_string xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : string list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i > 0) then (
  s := (!s ^ ", ");
  );
  s := (((!s ^ "'") ^ (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) ^ "'");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and apriori data min_support =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let data = (Obj.magic data : string list list) in
  let min_support = (Obj.magic min_support : int) in
  let itemset = ref (([] : (string list) list)) in
  (try List.iter (fun transaction ->
    try
  let t = ref (([] : (string) list)) in
  (try List.iter (fun v ->
    try
  t := (Obj.magic (List.append (!t) [(Obj.magic (v) : string)]) : string list);
    with Continue -> ()) (transaction) with Break -> ());
  itemset := (Obj.magic (List.append (!itemset) [(Obj.magic (!t) : string list)]) : string list list);
    with Continue -> ()) (data) with Break -> ());
  let frequent = ref (([] : ((string * Obj.t) list) list)) in
  let length = ref (1) in
  (try while (List.length (!itemset) > 0) do
    try
  let counts = ref (([] : (int) list)) in
  let idx = ref (0) in
  (try while (!idx < List.length (!itemset)) do
    try
  counts := (Obj.magic (List.append (!counts) [(Obj.magic (0) : int)]) : int list);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun transaction ->
    try
  let j = ref (0) in
  (try while (!j < List.length (!itemset)) do
    try
  let candidate = ref ((let __l = !itemset in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if is_subset (!candidate) (transaction) then (
  counts := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !counts in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + 1) else __x) (!counts));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()) (data) with Break -> ());
  let new_itemset = ref (([] : (string list) list)) in
  let k = ref (0) in
  (try while (!k < List.length (!itemset)) do
    try
  if ((let __l = !counts in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) >= min_support) then (
  new_itemset := (Obj.magic (List.append (!new_itemset) [(Obj.magic ((let __l = !itemset in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string list)]) : string list list);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  itemset := (Obj.magic !new_itemset : string list list);
  let m = ref (0) in
  (try while (!m < List.length (!itemset)) do
    try
  let sorted_item = ref (sort_strings ((let __l = !itemset in let __i = !m in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  frequent := (Obj.magic (List.append (!frequent) [(Obj.magic ([(__str ("items"), Obj.repr (!sorted_item)); (__str ("support"), Obj.repr ((let __l = !counts in let __i = !m in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  length := (!length + 1);
  let combos = ref (combinations_lists (!itemset) (Obj.repr (!length))) in
  itemset := prune (!itemset) (!combos) (Obj.repr (!length));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!frequent) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let frequent_itemsets = ref (apriori (load_data ()) (Obj.repr (2)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun fi ->
    try
  print_endline (((itemset_to_string ((Obj.obj (List.assoc (__str ("items")) (fi) : Obj.t) : string list)) ^ ": ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("support")) (fi) : Obj.t) : int)))));
    with Continue -> ()) (!frequent_itemsets) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
