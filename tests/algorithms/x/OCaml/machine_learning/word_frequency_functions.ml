(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _lower = "abcdefghijklmnopqrstuvwxyz"
let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _punct = "!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~"
let rec to_lowercase s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  let j = ref (0) in
  let found = ref (false) in
  (try while (!j < String.length (_upper)) do
    try
  if (c = (let __s = _upper in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  res := (!res ^ (let __s = _lower in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))));
  found := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  res := (!res ^ c);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and is_punct c =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_punct)) do
    try
  if (c = (let __s = _punct in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and clean_text text keep_newlines =
  let __ret = ref "" in
  (try
  let lower = to_lowercase (text) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (lower)) do
    try
  let ch = (let __s = lower in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if is_punct (ch) then (
  ) else (
  if (ch = "\n") then (
  if keep_newlines then (
  res := (!res ^ "\n");
  );
  ) else (
  res := (!res ^ ch);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and split s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if (ch = sep) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!current) : string)])) : string list);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!current) : string)])) : string list);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and contains s sub =
  let __ret = ref false in
  (try
  let n = String.length (s) in
  let m = String.length (sub) in
  if (m = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i <= (n - m)) do
    try
  let j = ref (0) in
  let is_match = ref (true) in
  (try while (!j < m) do
    try
  if ((let __s = s in let __i = (!i + !j) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) <> (let __s = sub in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  is_match := false;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !is_match then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref (int_of_float (x)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and round3 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((floor (Obj.repr (((x *. 1000.0) +. 0.5))) /. 1000.0)) : float); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let t = ((x -. 1.0) /. (x +. 1.0)) in
  let term = ref (t) in
  let sum = ref (0.0) in
  let k = ref (1) in
  (try while (!k <= 99) do
    try
  sum := (!sum +. (!term /. float_of_int (!k)));
  term := ((!term *. t) *. t);
  k := (!k + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((2.0 *. !sum)) : float); raise Return
  with Return -> !__ret)

and log10 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((Float.log (x) /. Float.log (10.0))) : float); raise Return
  with Return -> !__ret)

and term_frequency term document =
  let __ret = ref 0 in
  (try
  let clean = clean_text (document) (false) in
  let tokens = ref (split (clean) (" ")) in
  let t = to_lowercase (term) in
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!tokens)) do
    try
  if (((let __l = !tokens in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") <> "") && ((let __l = !tokens in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") = t)) then (
  count := (!count + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and document_frequency term corpus =
  let __ret = ref ([] : (int) list) in
  (try
  let clean = clean_text (corpus) (true) in
  let docs = ref (split (clean) ("\n")) in
  let t = to_lowercase (term) in
  let matches = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!docs)) do
    try
  if contains ((let __l = !docs in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "")) (t) then (
  matches := (!matches + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([!matches; List.length (!docs)]) : int list); raise Return
  with Return -> !__ret)

and inverse_document_frequency df n smoothing =
  let __ret = ref 0.0 in
  (try
  let df = (Obj.magic df : int) in
  let n = (Obj.magic n : int) in
  if smoothing then (
  if (n = 0) then (
  (failwith ("log10(0) is undefined."));
  );
  let ratio = (float_of_int (n) /. (1.0 +. float_of_int (df))) in
  let l = log10 (Obj.repr (ratio)) in
  let result = round3 (Obj.repr ((1.0 +. l))) in
  print_endline (Printf.sprintf "%.15f" (result));
  __ret := (Obj.magic (result) : float); raise Return
  );
  if (df = 0) then (
  (failwith ("df must be > 0"));
  );
  if (n = 0) then (
  (failwith ("log10(0) is undefined."));
  );
  let ratio = (float_of_int (n) /. float_of_int (df)) in
  let l = log10 (Obj.repr (ratio)) in
  let result = round3 (Obj.repr (l)) in
  print_endline (Printf.sprintf "%.15f" (result));
  __ret := (Obj.magic (result) : float); raise Return
  with Return -> !__ret)

and tf_idf tf idf =
  let __ret = ref 0.0 in
  (try
  let tf = (Obj.magic tf : int) in
  let idf = (Obj.magic idf : float) in
  let prod = (float_of_int (tf) *. idf) in
  let result = round3 (Obj.repr (prod)) in
  print_endline (Printf.sprintf "%.15f" (result));
  __ret := (Obj.magic (result) : float); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_int (term_frequency ("to") ("To be, or not to be")));
  let corpus = "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus." in
  print_endline ((__str (Obj.magic (document_frequency ("first") (corpus)) : Obj.t)));
  let idf_val = inverse_document_frequency (Obj.repr (1)) (Obj.repr (3)) (false) in
  ignore (tf_idf (Obj.repr (2)) (Obj.repr (idf_val)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
