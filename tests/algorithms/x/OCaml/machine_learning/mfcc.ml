(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec sinApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let n = ref (1) in
  (try while (!n <= 10) do
    try
  let denom = float_of_int (((2 * !n) * ((2 * !n) + 1))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cosApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n <= 10) do
    try
  let denom = float_of_int ((((2 * !n) - 1) * (2 * !n))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and expApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let sum = ref (1.0) in
  let term = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 10) do
    try
  term := ((!term *. x) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let t = ((x -. 1.0) /. (x +. 1.0)) in
  let term = ref (t) in
  let sum = ref (0.0) in
  let n = ref (1) in
  (try while (!n <= 19) do
    try
  sum := (!sum +. (!term /. float_of_int (!n)));
  term := ((!term *. t) *. t);
  n := (!n + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((2.0 *. !sum)) : float); raise Return
  with Return -> !__ret)

and log10 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((Float.log (x) /. Float.log (10.0))) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and normalize audio =
  let __ret = ref ([] : (float) list) in
  (try
  let audio = (Obj.magic audio : float list) in
  let max_val = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (audio)) do
    try
  let v = absf (Obj.repr ((let __l = audio in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) in
  if (v > !max_val) then (
  max_val := v;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < List.length (audio)) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic (((let __l = audio in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. !max_val)) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and dft frame bins =
  let __ret = ref ([] : (float) list) in
  (try
  let frame = (Obj.magic frame : float list) in
  let bins = (Obj.magic bins : int) in
  let _n = List.length (frame) in
  let spec = ref (([] : (float) list)) in
  let k = ref (0) in
  (try while (!k < bins) do
    try
  let real = ref (0.0) in
  let imag = ref (0.0) in
  let n = ref (0) in
  (try while (!n < _n) do
    try
  let angle = (((((-.(2.0)) *. _pi) *. float_of_int (!k)) *. float_of_int (!n)) /. float_of_int (_n)) in
  real := (!real +. ((let __l = frame in let __i = !n in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. cosApprox (Obj.repr (angle))));
  imag := (!imag +. ((let __l = frame in let __i = !n in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. sinApprox (Obj.repr (angle))));
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  spec := (Obj.magic ((List.append (!spec) [(Obj.magic (((!real *. !real) +. (!imag *. !imag))) : float)])) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!spec) : float list); raise Return
  with Return -> !__ret)

and triangular_filters bins spectrum_size =
  let __ret = ref ([] : (float list) list) in
  (try
  let bins = (Obj.magic bins : int) in
  let spectrum_size = (Obj.magic spectrum_size : int) in
  let filters = ref (([] : (float list) list)) in
  let b = ref (0) in
  (try while (!b < bins) do
    try
  let center = (((!b + 1) * spectrum_size) / (bins + 1)) in
  let filt = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < spectrum_size) do
    try
  let v = ref (0.0) in
  if (!i <= center) then (
  v := (float_of_int (!i) /. float_of_int (center));
  ) else (
  v := (float_of_int ((spectrum_size - !i)) /. float_of_int ((spectrum_size - center)));
  );
  filt := (Obj.magic ((List.append (!filt) [(Obj.magic (!v) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  filters := (Obj.magic ((List.append (!filters) [(Obj.magic (!filt) : float list)])) : float list list);
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!filters) : float list list); raise Return
  with Return -> !__ret)

and dot mat vec =
  let __ret = ref ([] : (float) list) in
  (try
  let mat = (Obj.magic mat : float list list) in
  let vec = (Obj.magic vec : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  let sum = ref (0.0) in
  let j = ref (0) in
  (try while (!j < List.length (vec)) do
    try
  sum := (!sum +. ((let __l = (let __l = mat in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = vec in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!sum) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and discrete_cosine_transform dct_filter_num filter_num =
  let __ret = ref ([] : (float list) list) in
  (try
  let dct_filter_num = (Obj.magic dct_filter_num : int) in
  let filter_num = (Obj.magic filter_num : int) in
  let basis = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < dct_filter_num) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < filter_num) do
    try
  if (!i = 0) then (
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((1.0 /. sqrtApprox (Obj.repr (float_of_int (filter_num))))) : float)])) : float list);
  ) else (
  let angle = (((float_of_int (((2 * !j) + 1)) *. float_of_int (!i)) *. _pi) /. (2.0 *. float_of_int (filter_num))) in
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((cosApprox (Obj.repr (angle)) *. sqrtApprox (Obj.repr ((2.0 /. float_of_int (filter_num)))))) : float)])) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  basis := (Obj.magic ((List.append (!basis) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!basis) : float list list); raise Return
  with Return -> !__ret)

and mfcc audio bins dct_num =
  let __ret = ref ([] : (float) list) in
  (try
  let audio = (Obj.magic audio : float list) in
  let bins = (Obj.magic bins : int) in
  let dct_num = (Obj.magic dct_num : int) in
  let norm = ref (normalize (audio)) in
  let spec = ref (dft (!norm) (Obj.repr ((bins + 2)))) in
  let filters = ref (triangular_filters (Obj.repr (bins)) (Obj.repr (List.length (!spec)))) in
  let energies = ref (dot (!filters) (!spec)) in
  let logfb = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!energies)) do
    try
  logfb := (Obj.magic ((List.append (!logfb) [(Obj.magic ((10.0 *. log10 (Obj.repr (((let __l = !energies in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. 0.0000000001))))) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let dct_basis = ref (discrete_cosine_transform (Obj.repr (dct_num)) (Obj.repr (bins))) in
  let res = ref (dot (!dct_basis) (!logfb)) in
  if (List.length (!res) = 0) then (
  res := (Obj.magic ([0.0; 0.0; 0.0]) : float list);
  );
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)


let sample_rate = 8000
let size = 16
let audio = ref (([] : (float) list))
let n = ref (0)
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  (try while (!n < size) do
    try
  let t = (float_of_int (!n) /. float_of_int (sample_rate)) in
  audio := (Obj.magic ((List.append (!audio) [(Obj.magic (sinApprox (Obj.repr ((((2.0 *. _pi) *. 440.0) *. t)))) : float)])) : float list);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  let coeffs = ref (mfcc (!audio) (Obj.repr (5)) (Obj.repr (3))) in
  (try List.iter (fun c ->
    try
  print_endline (Printf.sprintf "%.15f" (c));
    with Continue -> ()) (!coeffs) with Break -> ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
