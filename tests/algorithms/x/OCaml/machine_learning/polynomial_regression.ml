(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec design_matrix xs degree =
  let __ret = ref ([] : (float list) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  let degree = (Obj.magic degree : int) in
  let i = ref (0) in
  let matrix = ref (([] : (float list) list)) in
  (try while (!i < List.length (xs)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  let pow = ref (1.0) in
  (try while (!j <= degree) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!pow) : float)])) : float list);
  pow := (!pow *. (let __l = xs in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic ((List.append (!matrix) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix) : float list list); raise Return
  with Return -> !__ret)

and transpose matrix =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let rows = List.length (matrix) in
  let cols = List.length ((let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let j = ref (0) in
  let result = ref (([] : (float list) list)) in
  (try while (!j < cols) do
    try
  let row = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((let __l = (let __l = matrix in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and matmul _a _b =
  let __ret = ref ([] : (float list) list) in
  (try
  let _a = (Obj.magic _a : float list list) in
  let _b = (Obj.magic _b : float list list) in
  let n = List.length (_a) in
  let m = List.length ((let __l = _a in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let p = List.length ((let __l = _b in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let i = ref (0) in
  let result = ref (([] : (float list) list)) in
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let k = ref (0) in
  (try while (!k < p) do
    try
  let sum = ref (0.0) in
  let j = ref (0) in
  (try while (!j < m) do
    try
  sum := (!sum +. ((let __l = (let __l = _a in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = (let __l = _b in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!sum) : float)])) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and matvec_mul _a v =
  let __ret = ref ([] : (float) list) in
  (try
  let _a = (Obj.magic _a : float list list) in
  let v = (Obj.magic v : float list) in
  let n = List.length (_a) in
  let m = List.length ((let __l = _a in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let i = ref (0) in
  let result = ref (([] : (float) list)) in
  (try while (!i < n) do
    try
  let sum = ref (0.0) in
  let j = ref (0) in
  (try while (!j < m) do
    try
  sum := (!sum +. ((let __l = (let __l = _a in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = v in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!sum) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list); raise Return
  with Return -> !__ret)

and gaussian_elimination _a b =
  let __ret = ref ([] : (float) list) in
  (try
  let _a = (Obj.magic _a : float list list) in
  let b = (Obj.magic b : float list) in
  let n = List.length (_a) in
  let _m = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  _m := (Obj.magic ((List.append (!_m) [(Obj.magic ((List.append ((let __l = _a in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) [(Obj.magic ((let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref (0) in
  (try while (!k < n) do
    try
  let j = ref ((!k + 1)) in
  (try while (!j < n) do
    try
  let factor = ((let __l = (let __l = !_m in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. (let __l = (let __l = !_m in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let rowj = ref ((let __l = !_m in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let rowk = ref ((let __l = !_m in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let l = ref (!k) in
  (try while (!l <= n) do
    try
  rowj := (List.mapi (fun __i __x -> if __i = !l then ((let __l = !rowj in let __i = !l in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (factor *. (let __l = !rowk in let __i = !l in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) else __x) (!rowj));
  l := (!l + 1);
    with Continue -> ()
  done with Break -> ());
  _m := (List.mapi (fun __i __x -> if __i = !j then !rowj else __x) (!_m));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let x = ref (([] : (float) list)) in
  let t = ref (0) in
  (try while (!t < n) do
    try
  x := (Obj.magic ((List.append (!x) [(Obj.magic (0.0) : float)])) : float list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let i2 = ref ((n - 1)) in
  (try while (!i2 >= 0) do
    try
  let sum = ref ((let __l = (let __l = !_m in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = n in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let j2 = ref ((!i2 + 1)) in
  (try while (!j2 < n) do
    try
  sum := (!sum -. ((let __l = (let __l = !_m in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = !x in let __i = !j2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  j2 := (!j2 + 1);
    with Continue -> ()
  done with Break -> ());
  x := (List.mapi (fun __i __x -> if __i = !i2 then (!sum /. (let __l = (let __l = !_m in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) else __x) (!x));
  i2 := (!i2 - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : float list); raise Return
  with Return -> !__ret)

and predict xs coeffs =
  let __ret = ref ([] : (float) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  let coeffs = (Obj.magic coeffs : float list) in
  let i = ref (0) in
  let result = ref (([] : (float) list)) in
  (try while (!i < List.length (xs)) do
    try
  let x = (let __l = xs in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let j = ref (0) in
  let pow = ref (1.0) in
  let sum = ref (0.0) in
  (try while (!j < List.length (coeffs)) do
    try
  sum := (!sum +. ((let __l = coeffs in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. !pow));
  pow := (!pow *. x);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!sum) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list); raise Return
  with Return -> !__ret)


let xs = ref ([0.0; 1.0; 2.0; 3.0; 4.0; 5.0; 6.0; 7.0; 8.0; 9.0; 10.0])
let ys = ref (([] : (float) list))
let i = ref (0)
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  (try while (!i < List.length (!xs)) do
    try
  let x = (let __l = !xs in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  ys := (Obj.magic ((List.append (!ys) [(Obj.magic ((((((x *. x) *. x) -. ((2.0 *. x) *. x)) +. (3.0 *. x)) -. 5.0)) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let _x = ref (design_matrix (!xs) (Obj.repr (3))) in
  let _xt = ref (transpose (!_x)) in
  let _xtx = ref (matmul (!_xt) (!_x)) in
  let _xty = ref (matvec_mul (!_xt) (!ys)) in
  let coeffs = ref (gaussian_elimination (!_xtx) (!_xty)) in
  print_endline ((__str (Obj.magic (!coeffs) : Obj.t)));
  print_endline ((__str (Obj.magic (predict ([(-.(1.0))]) (!coeffs)) : Obj.t)));
  print_endline ((__str (Obj.magic (predict ([(-.(2.0))]) (!coeffs)) : Obj.t)));
  print_endline ((__str (Obj.magic (predict ([6.0]) (!coeffs)) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
