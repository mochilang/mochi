(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and hypothesis_value input params =
  let __ret = ref 0.0 in
  (try
  let input = (Obj.magic input : float list) in
  let params = (Obj.magic params : float list) in
  let value = ref ((let __l = params in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let i = ref (0) in
  (try while (!i < List.length (input)) do
    try
  value := (!value +. ((let __l = input in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = params in let __i = (!i + 1) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : float); raise Return
  with Return -> !__ret)

and calc_error dp params =
  let __ret = ref 0.0 in
  (try
  let dp = (Obj.magic dp : (string * Obj.t) list) in
  let params = (Obj.magic params : float list) in
  __ret := (Obj.magic ((hypothesis_value ((match List.assoc_opt (__str ("x")) (dp) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) (params) -. (match List.assoc_opt (__str ("y")) (dp) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.))) : float); raise Return
  with Return -> !__ret)

and summation_of_cost_derivative index params data =
  let __ret = ref 0.0 in
  (try
  let index = (Obj.magic index : int) in
  let params = (Obj.magic params : float list) in
  let data = (Obj.magic data : (string * Obj.t) list list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (data)) do
    try
  let dp = ref ((let __l = data in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let e = calc_error ((Obj.magic (!dp) : (string * Obj.t) list)) (params) in
  if (index = -(1)) then (
  sum := (!sum +. e);
  ) else (
  sum := (!sum +. (e *. (let __l = (match List.assoc_opt (__str ("x")) (!dp) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> []) in let __i = index in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and get_cost_derivative index params data =
  let __ret = ref 0.0 in
  (try
  let index = (Obj.magic index : int) in
  let params = (Obj.magic params : float list) in
  let data = (Obj.magic data : (string * Obj.t) list list) in
  __ret := (Obj.magic ((summation_of_cost_derivative (Obj.repr (index)) (params) (data) /. float_of_int (List.length (data)))) : float); raise Return
  with Return -> !__ret)

and allclose a b atol rtol =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let atol = (Obj.magic atol : float) in
  let rtol = (Obj.magic rtol : float) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  let diff = absf (Obj.repr (((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)))) in
  let limit = (atol +. (rtol *. absf (Obj.repr ((let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))))) in
  if (diff > limit) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and run_gradient_descent train_data initial_params =
  let __ret = ref ([] : (float) list) in
  (try
  let train_data = (Obj.magic train_data : (string * Obj.t) list list) in
  let initial_params = (Obj.magic initial_params : float list) in
  let learning_rate = 0.009 in
  let absolute_error_limit = 0.000002 in
  let relative_error_limit = 0.0 in
  let j = ref (0) in
  let params = ref (initial_params) in
  (try while true do
    try
  j := (!j + 1);
  let temp = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!params)) do
    try
  let deriv = get_cost_derivative (Obj.repr ((!i - 1))) (!params) (train_data) in
  temp := (Obj.magic ((List.append (!temp) [(Obj.magic (((let __l = !params in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (learning_rate *. deriv))) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if allclose (!params) (!temp) (Obj.repr (absolute_error_limit)) (Obj.repr (relative_error_limit)) then (
  print_endline (("Number of iterations:" ^ (string_of_int (Obj.magic (!j) : int))));
  raise Break;
  );
  params := (Obj.magic (!temp) : float list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!params) : float list); raise Return
  with Return -> !__ret)

and test_gradient_descent test_data params =
  let __ret = ref (Obj.magic 0) in
  (try
  let test_data = (Obj.magic test_data : (string * Obj.t) list list) in
  let params = (Obj.magic params : float list) in
  let i = ref (0) in
  (try while (!i < List.length (test_data)) do
    try
  let dp = ref ((let __l = test_data in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  print_endline (("Actual output value:" ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str ("y")) (!dp) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) : float))));
  print_endline (("Hypothesis output:" ^ (Printf.sprintf "%.16g" (Obj.magic (hypothesis_value ((match List.assoc_opt (__str ("x")) (!dp) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) (params)) : float))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let train_data = ref ([[(__str ("x"), Obj.repr ([5.0; 2.0; 3.0])); (__str ("y"), Obj.repr (15.0))]; [(__str ("x"), Obj.repr ([6.0; 5.0; 9.0])); (__str ("y"), Obj.repr (25.0))]; [(__str ("x"), Obj.repr ([11.0; 12.0; 13.0])); (__str ("y"), Obj.repr (41.0))]; [(__str ("x"), Obj.repr ([1.0; 1.0; 1.0])); (__str ("y"), Obj.repr (8.0))]; [(__str ("x"), Obj.repr ([11.0; 12.0; 13.0])); (__str ("y"), Obj.repr (41.0))]])
let test_data = ref ([[(__str ("x"), Obj.repr ([515.0; 22.0; 13.0])); (__str ("y"), Obj.repr (555.0))]; [(__str ("x"), Obj.repr ([61.0; 35.0; 49.0])); (__str ("y"), Obj.repr (150.0))]])
let parameter_vector = ref ([2.0; 4.0; 1.0; 5.0])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  parameter_vector := (Obj.magic (run_gradient_descent ((Obj.magic (!train_data) : (string * Obj.t) list list)) (!parameter_vector)) : float list);
  print_string "\nTesting gradient descent for a linear hypothesis function.\n";
  ignore (test_gradient_descent ((Obj.magic (!test_data) : (string * Obj.t) list list)) (!parameter_vector));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
