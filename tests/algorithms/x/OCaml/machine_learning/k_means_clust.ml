(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec distance_sq a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let sum = ref (0.0) in
  (try for i = 0 to (List.length (a) - 1) do
    try
  let diff = ((let __l = a in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = b in let __i = i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  sum := (!sum +. (diff *. diff));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and assign_clusters data centroids =
  let __ret = ref ([] : (int) list) in
  (try
  let data = (Obj.magic data : float list list) in
  let centroids = (Obj.magic centroids : float list list) in
  let assignments = ref (([] : (int) list)) in
  (try for i = 0 to (List.length (data) - 1) do
    try
  let best_idx = ref (0) in
  let best = ref (distance_sq ((let __l = data in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = centroids in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) in
  (try for j = 1 to (List.length (centroids) - 1) do
    try
  let dist = distance_sq ((let __l = data in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = centroids in let __i = j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if (dist < !best) then (
  best := dist;
  best_idx := j;
  );
    with Continue -> ()
  done with Break -> ());
  assignments := (Obj.magic ((List.append (!assignments) [(Obj.magic (!best_idx) : int)])) : int list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!assignments) : int list); raise Return
  with Return -> !__ret)

and revise_centroids data k assignment =
  let __ret = ref ([] : (float list) list) in
  (try
  let data = (Obj.magic data : float list list) in
  let k = (Obj.magic k : int) in
  let assignment = (Obj.magic assignment : int list) in
  let dim = List.length ((let __l = data in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let sums = ref (([] : (float list) list)) in
  let counts = ref (([] : (int) list)) in
  (try for i = 0 to (k - 1) do
    try
  let row = ref (([] : (float) list)) in
  (try for j = 0 to (dim - 1) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0.0) : float)])) : float list);
    with Continue -> ()
  done with Break -> ());
  sums := (Obj.magic ((List.append (!sums) [(Obj.magic (!row) : float list)])) : float list list);
  counts := (Obj.magic ((List.append (!counts) [(Obj.magic (0) : int)])) : int list);
    with Continue -> ()
  done with Break -> ());
  (try for i = 0 to (List.length (data) - 1) do
    try
  let c = (let __l = assignment in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  counts := (List.mapi (fun __i __x -> if __i = c then ((let __l = !counts in let __i = c in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!counts));
  (try for j = 0 to (dim - 1) do
    try
  sums := (List.mapi (fun __i __x -> if __i = c then (List.mapi (fun __i __x -> if __i = j then ((let __l = (let __l = !sums in let __i = c in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. (let __l = (let __l = data in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) else __x) ((let __l = !sums in let __i = c in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!sums));
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let centroids = ref (([] : (float list) list)) in
  (try for i = 0 to (k - 1) do
    try
  let row = ref (([] : (float) list)) in
  if ((let __l = !counts in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) > 0) then (
  (try for j = 0 to (dim - 1) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (((let __l = (let __l = !sums in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) /. float_of_int ((let __l = !counts in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))) : float)])) : float list);
    with Continue -> ()
  done with Break -> ());
  ) else (
  (try for j = 0 to (dim - 1) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0.0) : float)])) : float list);
    with Continue -> ()
  done with Break -> ());
  );
  centroids := (Obj.magic ((List.append (!centroids) [(Obj.magic (!row) : float list)])) : float list list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!centroids) : float list list); raise Return
  with Return -> !__ret)

and compute_heterogeneity data centroids assignment =
  let __ret = ref 0.0 in
  (try
  let data = (Obj.magic data : float list list) in
  let centroids = (Obj.magic centroids : float list list) in
  let assignment = (Obj.magic assignment : int list) in
  let total = ref (0.0) in
  (try for i = 0 to (List.length (data) - 1) do
    try
  let c = (let __l = assignment in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  total := (!total +. distance_sq ((let __l = data in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = centroids in let __i = c in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and lists_equal a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int list) in
  let b = (Obj.magic b : int list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  (try for i = 0 to (List.length (a) - 1) do
    try
  if ((let __l = a in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) <> (let __l = b in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and kmeans data k initial_centroids max_iter =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let data = (Obj.magic data : float list list) in
  let k = (Obj.magic k : int) in
  let initial_centroids = (Obj.magic initial_centroids : float list list) in
  let max_iter = (Obj.magic max_iter : int) in
  let centroids = ref (initial_centroids) in
  let assignment = ref (([] : (int) list)) in
  let prev = ref (([] : (int) list)) in
  let heterogeneity = ref (([] : (float) list)) in
  let iter = ref (0) in
  (try while (!iter < max_iter) do
    try
  assignment := (Obj.magic (assign_clusters (data) (!centroids)) : int list);
  centroids := (Obj.magic (revise_centroids (data) (Obj.repr (k)) (!assignment)) : float list list);
  let h = compute_heterogeneity (data) (!centroids) (!assignment) in
  heterogeneity := (Obj.magic ((List.append (!heterogeneity) [(Obj.magic (h) : float)])) : float list);
  if ((!iter > 0) && lists_equal (!prev) (!assignment)) then (
  raise Break;
  );
  prev := (Obj.magic (!assignment) : int list);
  iter := (!iter + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("centroids"), Obj.repr (!centroids)); (__str ("assignments"), Obj.repr (!assignment)); (__str ("heterogeneity"), Obj.repr (!heterogeneity))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let data = ref ([[1.0; 2.0]; [1.5; 1.8]; [5.0; 8.0]; [8.0; 8.0]; [1.0; 0.6]; [9.0; 11.0]])
let k = 3
let initial_centroids = ref ([(let __l = !data in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []); (let __l = !data in let __i = 2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []); (let __l = !data in let __i = 5 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])])
let result = ref (kmeans (!data) (Obj.repr (k)) (!initial_centroids) (Obj.repr (10)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str ("centroids")) (!result) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> [])) : Obj.t)));
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str ("assignments")) (!result) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> [])) : Obj.t)));
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str ("heterogeneity")) (!result) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
