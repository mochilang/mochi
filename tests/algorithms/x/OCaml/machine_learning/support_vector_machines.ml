(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec dot a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let s = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  s := (!s +. ((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : float); raise Return
  with Return -> !__ret)

and new_svc lr lambda epochs =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let lr = (Obj.magic lr : float) in
  let lambda = (Obj.magic lambda : float) in
  let epochs = (Obj.magic epochs : int) in
  __ret := (Obj.magic ([(__str ("weights"), Obj.repr ([])); (__str ("bias"), Obj.repr (0.0)); (__str ("lr"), Obj.repr (lr)); (__str ("lambda"), Obj.repr (lambda)); (__str ("epochs"), Obj.repr (epochs))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fit model xs ys =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let model = (Obj.magic model : (string * Obj.t) list) in
  let xs = (Obj.magic xs : float list list) in
  let ys = (Obj.magic ys : int list) in
  let n_features = List.length ((let __l = xs in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let w = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < n_features) do
    try
  w := (Obj.magic ((List.append (!w) [(Obj.magic (0.0) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let b = ref (0.0) in
  let epoch = ref (0) in
  (try while (!epoch < (match List.assoc_opt (__str ("epochs")) (model) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (xs)) do
    try
  let x = ref ((let __l = xs in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let y = float_of_int ((let __l = ys in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  let prod = (dot (!w) (!x) +. !b) in
  if ((y *. prod) < 1.0) then (
  let k = ref (0) in
  (try while (!k < List.length (!w)) do
    try
  w := (List.mapi (fun __i __x -> if __i = !k then ((let __l = !w in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. ((match List.assoc_opt (__str ("lr")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) *. ((y *. (let __l = !x in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) -. ((2.0 *. (match List.assoc_opt (__str ("lambda")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) *. (let __l = !w in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))))) else __x) (!w));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  b := (!b +. ((match List.assoc_opt (__str ("lr")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) *. y));
  ) else (
  let k = ref (0) in
  (try while (!k < List.length (!w)) do
    try
  w := (List.mapi (fun __i __x -> if __i = !k then ((let __l = !w in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. ((match List.assoc_opt (__str ("lr")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.) *. ((2.0 *. (match List.assoc_opt (__str ("lambda")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) *. (let __l = !w in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)))) else __x) (!w));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  epoch := (!epoch + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("weights"), Obj.repr (!w)); (__str ("bias"), Obj.repr (!b)); (__str ("lr"), Obj.repr ((match List.assoc_opt (__str ("lr")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.))); (__str ("lambda"), Obj.repr ((match List.assoc_opt (__str ("lambda")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.))); (__str ("epochs"), Obj.repr ((match List.assoc_opt (__str ("epochs")) (model) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and predict model x =
  let __ret = ref 0 in
  (try
  let model = (Obj.magic model : (string * Obj.t) list) in
  let x = (Obj.magic x : float list) in
  let s = (dot ((match List.assoc_opt (__str ("weights")) (model) with Some v -> (Obj.obj (v : Obj.t) : float list) | None -> [])) (x) +. (match List.assoc_opt (__str ("bias")) (model) with Some v -> (Obj.obj (v : Obj.t) : float) | None -> 0.)) in
  if (s >= 0.0) then (
  __ret := (Obj.magic (1) : int); raise Return
  ) else (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
    !__ret
  with Return -> !__ret)


let xs = ref ([[0.0; 1.0]; [0.0; 2.0]; [1.0; 1.0]; [1.0; 2.0]])
let ys = ref ([1; 1; -(1); -(1)])
let base = ref (new_svc (Obj.repr (0.01)) (Obj.repr (0.01)) (Obj.repr (1000)))
let model = ref (fit (!base) (!xs) (!ys))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_int (predict (!model) ([0.0; 1.0])));
  print_endline (string_of_int (predict (!model) ([1.0; 1.0])));
  print_endline (string_of_int (predict (!model) ([2.0; 2.0])));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
