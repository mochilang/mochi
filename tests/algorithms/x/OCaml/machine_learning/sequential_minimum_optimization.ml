(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec dot a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  sum := (!sum +. ((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and maxf a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  if (a > b) then (
  __ret := (Obj.magic (a) : float); raise Return
  );
  __ret := (Obj.magic (b) : float); raise Return
  with Return -> !__ret)

and minf a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  if (a < b) then (
  __ret := (Obj.magic (a) : float); raise Return
  );
  __ret := (Obj.magic (b) : float); raise Return
  with Return -> !__ret)

and absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x >= 0.0) then (
  __ret := (Obj.magic (x) : float); raise Return
  );
  __ret := (Obj.magic ((0.0 -. x)) : float); raise Return
  with Return -> !__ret)

and predict_raw samples labels alphas b x =
  let __ret = ref 0.0 in
  (try
  let samples = (Obj.magic samples : float list list) in
  let labels = (Obj.magic labels : float list) in
  let alphas = (Obj.magic alphas : float list) in
  let b = (Obj.magic b : float) in
  let x = (Obj.magic x : float list) in
  let res = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (samples)) do
    try
  res := (!res +. (((let __l = alphas in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = labels in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) *. dot ((let __l = samples in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) (x)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res +. b)) : float); raise Return
  with Return -> !__ret)

and smo_train samples labels c tol max_passes =
  let __ret = ref ([] : (float list) list) in
  (try
  let samples = (Obj.magic samples : float list list) in
  let labels = (Obj.magic labels : float list) in
  let c = (Obj.magic c : float) in
  let tol = (Obj.magic tol : float) in
  let max_passes = (Obj.magic max_passes : int) in
  let m = List.length (samples) in
  let alphas = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < m) do
    try
  alphas := (Obj.magic ((List.append (!alphas) [(Obj.magic (0.0) : float)])) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let b = ref (0.0) in
  let passes = ref (0) in
  (try while (!passes < max_passes) do
    try
  let num_changed = ref (0) in
  let i1 = ref (0) in
  (try while (!i1 < m) do
    try
  let _ei = (predict_raw (samples) (labels) (!alphas) (Obj.repr (!b)) ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) -. (let __l = labels in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  if (((((let __l = labels in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. _ei) < (0.0 -. tol)) && ((let __l = !alphas in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < c)) || ((((let __l = labels in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. _ei) > tol) && ((let __l = !alphas in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > 0.0))) then (
  let i2 = ref ((((!i1 + 1) mod m + m) mod m)) in
  let _ej = (predict_raw (samples) (labels) (!alphas) (Obj.repr (!b)) ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) -. (let __l = labels in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  let alpha1_old = (let __l = !alphas in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let alpha2_old = (let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let _l = ref (0.0) in
  let _h = ref (0.0) in
  if ((let __l = labels in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <> (let __l = labels in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) then (
  _l := maxf (Obj.repr (0.0)) (Obj.repr ((alpha2_old -. alpha1_old)));
  _h := minf (Obj.repr (c)) (Obj.repr (((c +. alpha2_old) -. alpha1_old)));
  ) else (
  _l := maxf (Obj.repr (0.0)) (Obj.repr (((alpha2_old +. alpha1_old) -. c)));
  _h := minf (Obj.repr (c)) (Obj.repr ((alpha2_old +. alpha1_old)));
  );
  if (!_l = !_h) then (
  i1 := (!i1 + 1);
  raise Continue;
  );
  let eta = (((2.0 *. dot ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) -. dot ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) -. dot ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) in
  if (eta >= 0.0) then (
  i1 := (!i1 + 1);
  raise Continue;
  );
  alphas := (List.mapi (fun __i __x -> if __i = !i2 then (alpha2_old -. (((let __l = labels in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (_ei -. _ej)) /. eta)) else __x) (!alphas));
  if ((let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > !_h) then (
  alphas := (List.mapi (fun __i __x -> if __i = !i2 then !_h else __x) (!alphas));
  );
  if ((let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < !_l) then (
  alphas := (List.mapi (fun __i __x -> if __i = !i2 then !_l else __x) (!alphas));
  );
  if (absf (Obj.repr (((let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. alpha2_old))) < 0.00001) then (
  i1 := (!i1 + 1);
  raise Continue;
  );
  alphas := (List.mapi (fun __i __x -> if __i = !i1 then (alpha1_old +. (((let __l = labels in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = labels in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) *. (alpha2_old -. (let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)))) else __x) (!alphas));
  let b1 = (((!b -. _ei) -. (((let __l = labels in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. ((let __l = !alphas in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. alpha1_old)) *. dot ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])))) -. (((let __l = labels in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. ((let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. alpha2_old)) *. dot ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])))) in
  let b2 = (((!b -. _ej) -. (((let __l = labels in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. ((let __l = !alphas in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. alpha1_old)) *. dot ((let __l = samples in let __i = !i1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])))) -. (((let __l = labels in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. ((let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. alpha2_old)) *. dot ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) ((let __l = samples in let __i = !i2 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])))) in
  if (((let __l = !alphas in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > 0.0) && ((let __l = !alphas in let __i = !i1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < c)) then (
  b := b1;
  ) else (
  if (((let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > 0.0) && ((let __l = !alphas in let __i = !i2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < c)) then (
  b := b2;
  ) else (
  b := ((b1 +. b2) /. 2.0);
  );
  );
  num_changed := (!num_changed + 1);
  );
  i1 := (!i1 + 1);
    with Continue -> ()
  done with Break -> ());
  if (!num_changed = 0) then (
  passes := (!passes + 1);
  ) else (
  passes := 0;
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([!alphas; [!b]]) : float list list); raise Return
  with Return -> !__ret)

and predict samples labels model x =
  let __ret = ref 0.0 in
  (try
  let samples = (Obj.magic samples : float list list) in
  let labels = (Obj.magic labels : float list) in
  let model = (Obj.magic model : float list list) in
  let x = (Obj.magic x : float list) in
  let alphas = ref ((let __l = model in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let b = (let __l = (let __l = model in let __i = 1 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let val_ = predict_raw (samples) (labels) (!alphas) (Obj.repr (b)) (x) in
  if (val_ >= 0.0) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  __ret := (Obj.magic ((-.(1.0))) : float); raise Return
  with Return -> !__ret)


let samples = ref ([[2.0; 2.0]; [1.5; 1.5]; [0.0; 0.0]; [0.5; 0.0]])
let labels = ref ([1.0; 1.0; (-.(1.0)); (-.(1.0))])
let model = ref (smo_train (!samples) (!labels) (Obj.repr (1.0)) (Obj.repr (0.001)) (Obj.repr (10)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_float (predict (!samples) (!labels) (!model) ([1.5; 1.0])));
  print_endline (string_of_float (predict (!samples) (!labels) (!model) ([0.2; 0.1])));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
