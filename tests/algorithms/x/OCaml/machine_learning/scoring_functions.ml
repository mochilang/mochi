(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((0.0 -. x)) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and ln_series x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let t = ((x -. 1.0) /. (x +. 1.0)) in
  let term = ref (t) in
  let sum = ref (0.0) in
  let n = ref (1) in
  (try while (!n <= 19) do
    try
  sum := (!sum +. (!term /. float_of_int (!n)));
  term := ((!term *. t) *. t);
  n := (!n + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((2.0 *. !sum)) : float); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = ref (x) in
  let k = ref (0) in
  (try while (!y >= 10.0) do
    try
  y := (!y /. 10.0);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!y < 1.0) do
    try
  y := (!y *. 10.0);
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((ln_series (Obj.repr (!y)) +. (float_of_int (!k) *. ln_series (Obj.repr (10.0))))) : float); raise Return
  with Return -> !__ret)

and mae predict actual =
  let __ret = ref 0.0 in
  (try
  let predict = (Obj.magic predict : float list) in
  let actual = (Obj.magic actual : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (predict)) do
    try
  let diff = ((let __l = predict in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = actual in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  sum := (!sum +. absf (Obj.repr (diff)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum /. float_of_int (List.length (predict)))) : float); raise Return
  with Return -> !__ret)

and mse predict actual =
  let __ret = ref 0.0 in
  (try
  let predict = (Obj.magic predict : float list) in
  let actual = (Obj.magic actual : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (predict)) do
    try
  let diff = ((let __l = predict in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = actual in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  sum := (!sum +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum /. float_of_int (List.length (predict)))) : float); raise Return
  with Return -> !__ret)

and rmse predict actual =
  let __ret = ref 0.0 in
  (try
  let predict = (Obj.magic predict : float list) in
  let actual = (Obj.magic actual : float list) in
  __ret := (Obj.magic (sqrtApprox (Obj.repr (mse (predict) (actual)))) : float); raise Return
  with Return -> !__ret)

and rmsle predict actual =
  let __ret = ref 0.0 in
  (try
  let predict = (Obj.magic predict : float list) in
  let actual = (Obj.magic actual : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (predict)) do
    try
  let lp = Float.log (((let __l = predict in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. 1.0)) in
  let la = Float.log (((let __l = actual in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. 1.0)) in
  let diff = (lp -. la) in
  sum := (!sum +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (sqrtApprox (Obj.repr ((!sum /. float_of_int (List.length (predict)))))) : float); raise Return
  with Return -> !__ret)

and mbd predict actual =
  let __ret = ref 0.0 in
  (try
  let predict = (Obj.magic predict : float list) in
  let actual = (Obj.magic actual : float list) in
  let diff_sum = ref (0.0) in
  let actual_sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (predict)) do
    try
  diff_sum := (!diff_sum +. ((let __l = predict in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = actual in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  actual_sum := (!actual_sum +. (let __l = actual in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = float_of_int (List.length (predict)) in
  let numerator = (!diff_sum /. n) in
  let denominator = (!actual_sum /. n) in
  __ret := (Obj.magic (((numerator /. denominator) *. 100.0)) : float); raise Return
  with Return -> !__ret)

and manual_accuracy predict actual =
  let __ret = ref 0.0 in
  (try
  let predict = (Obj.magic predict : float list) in
  let actual = (Obj.magic actual : float list) in
  let correct = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (predict)) do
    try
  if ((let __l = predict in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) = (let __l = actual in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) then (
  correct := (!correct + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((float_of_int (!correct) /. float_of_int (List.length (predict)))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let actual = ref ([1.0; 2.0; 3.0]) in
  let predict = ref ([1.0; 4.0; 3.0]) in
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (mae (!predict) (!actual)) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (mse (!predict) (!actual)) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (rmse (!predict) (!actual)) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (rmsle ([10.0; 2.0; 30.0]) ([10.0; 10.0; 30.0])) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (mbd ([2.0; 3.0; 4.0]) ([1.0; 2.0; 3.0])) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (mbd ([0.0; 1.0; 1.0]) ([1.0; 2.0; 3.0])) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (manual_accuracy (!predict) (!actual)) : float)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
