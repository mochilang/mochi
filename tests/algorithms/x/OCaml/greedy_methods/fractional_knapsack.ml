(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_by_ratio_desc arr =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  arr := (Obj.magic !arr : (string * Obj.t) list list);
  let i = ref (1) in
  (try while (!i < List.length (!arr)) do
    try
  let key = ref ((let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let j = ref ((!i - 1)) in
  (try while (!j >= 0) do
    try
  let current = ref ((let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if (((Obj.obj (List.assoc (__str ("value")) (!current) : Obj.t) : float) /. (Obj.obj (List.assoc (__str ("weight")) (!current) : Obj.t) : float)) < ((Obj.obj (List.assoc (__str ("value")) (!key) : Obj.t) : float) /. (Obj.obj (List.assoc (__str ("weight")) (!key) : Obj.t) : float))) then (
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !current else __x) (!arr));
  j := (!j - 1);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !key else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and sum_first arr k =
  let __ret = ref 0.0 in
  (try
  let arr = (Obj.magic arr : float list) in
  let k = (Obj.magic k : int) in
  let s = ref (0.0) in
  let i = ref (0) in
  (try while ((!i < k) && (!i < List.length (arr))) do
    try
  s := (!s +. (let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : float); raise Return
  with Return -> !__ret)

and frac_knapsack vl wt w n =
  let __ret = ref 0.0 in
  (try
  let vl = (Obj.magic vl : float list) in
  let wt = (Obj.magic wt : float list) in
  let w = (Obj.magic w : float) in
  let n = (Obj.magic n : int) in
  let items = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while ((!i < List.length (vl)) && (!i < List.length (wt))) do
    try
  items := (Obj.magic (List.append (!items) [(Obj.magic ([(__str ("value"), Obj.repr ((let __l = vl in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))); (__str ("weight"), Obj.repr ((let __l = wt in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  items := sort_by_ratio_desc (items);
  let values = ref (([] : (float) list)) in
  let weights = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < List.length (!items)) do
    try
  let itm = ref ((let __l = !items in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  values := (Obj.magic (List.append (!values) [(Obj.magic ((Obj.obj (List.assoc (__str ("value")) (!itm) : Obj.t) : float)) : float)]) : float list);
  weights := (Obj.magic (List.append (!weights) [(Obj.magic ((Obj.obj (List.assoc (__str ("weight")) (!itm) : Obj.t) : float)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let acc = ref (([] : (float) list)) in
  let total = ref (0.0) in
  i := 0;
  (try while (!i < List.length (!weights)) do
    try
  total := (!total +. (let __l = !weights in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  acc := (Obj.magic (List.append (!acc) [(Obj.magic (!total) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref (0) in
  (try while ((!k < List.length (!acc)) && (w >= (let __l = !acc in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if (!k = 0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if (!k >= List.length (!values)) then (
  __ret := (Obj.magic (sum_first (!values) (Obj.repr (List.length (!values)))) : float); raise Return
  );
  if (!k <> n) then (
  __ret := (Obj.magic ((sum_first (!values) (Obj.repr (!k)) +. (((w -. (let __l = !acc in let __i = (!k - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) *. (let __l = !values in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) /. (let __l = !weights in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) : float); raise Return
  );
  __ret := (Obj.magic (sum_first (!values) (Obj.repr (!k))) : float); raise Return
  with Return -> !__ret)


let vl = ref ([60.0; 100.0; 120.0])
let wt = ref ([10.0; 20.0; 30.0])
let result = frac_knapsack (!vl) (!wt) (Obj.repr (50.0)) (Obj.repr (3))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (result)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
