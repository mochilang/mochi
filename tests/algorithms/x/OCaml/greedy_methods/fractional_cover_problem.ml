(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec ratio item =
  let __ret = ref 0.0 in
  (try
  let item = (Obj.magic item : (string * Obj.t) list) in
  __ret := (Obj.magic ((float_of_int ((Obj.obj (List.assoc (__str ("value")) (item) : Obj.t) : int)) /. float_of_int ((Obj.obj (List.assoc (__str ("weight")) (item) : Obj.t) : int)))) : float); raise Return
  with Return -> !__ret)

and fractional_cover items capacity =
  let __ret = ref 0.0 in
  (try
  let items = (Obj.magic items : (string * Obj.t) list list) in
  let capacity = (Obj.magic capacity : int) in
  if (capacity < 0) then (
  (failwith ("Capacity cannot be negative"));
  );
  let total = ref (0.0) in
  let remaining = ref (capacity) in
  let sorted = ref ((let __tmp0 = (List.map (fun it -> it) items) in
  let __tmp0 = List.sort (fun a b -> compare ratio ((Obj.magic b : (string * Obj.t) list)) ratio ((Obj.magic a : (string * Obj.t) list))) __tmp0 in
  __tmp0)) in
  let idx = ref (0) in
  (try while ((!idx < List.length (!sorted)) && (!remaining > 0)) do
    try
  let item = ref ((let __l = !sorted in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let take = if ((Obj.obj (List.assoc (__str ("weight")) (!item) : Obj.t) : int) < !remaining) then (Obj.obj (List.assoc (__str ("weight")) (!item) : Obj.t) : int) else !remaining in
  total := (!total +. (float_of_int (take) *. ratio ((Obj.magic !item : (string * Obj.t) list))));
  remaining := (!remaining - take);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)


let items1 = ref ([[(__str ("weight"), Obj.repr (10)); (__str ("value"), Obj.repr (60))]; [(__str ("weight"), Obj.repr (20)); (__str ("value"), Obj.repr (100))]; [(__str ("weight"), Obj.repr (30)); (__str ("value"), Obj.repr (120))]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (fractional_cover ((Obj.magic !items1 : (string * Obj.t) list list)) (Obj.repr (50)))));
  let items2 = ref ([[(__str ("weight"), Obj.repr (20)); (__str ("value"), Obj.repr (100))]; [(__str ("weight"), Obj.repr (30)); (__str ("value"), Obj.repr (120))]; [(__str ("weight"), Obj.repr (10)); (__str ("value"), Obj.repr (60))]]) in
  print_endline ((Printf.sprintf "%.16g" (fractional_cover ((Obj.magic !items2 : (string * Obj.t) list list)) (Obj.repr (25)))));
  let items3 = ref ([] : (string * Obj.t) list list) in
  print_endline ((Printf.sprintf "%.16g" (fractional_cover ((Obj.magic !items3 : (string * Obj.t) list list)) (Obj.repr (50)))));
  let items4 = ref ([[(__str ("weight"), Obj.repr (10)); (__str ("value"), Obj.repr (60))]]) in
  print_endline ((Printf.sprintf "%.16g" (fractional_cover ((Obj.magic !items4 : (string * Obj.t) list list)) (Obj.repr (5)))));
  print_endline ((Printf.sprintf "%.16g" (fractional_cover ((Obj.magic !items4 : (string * Obj.t) list list)) (Obj.repr (1)))));
  print_endline ((Printf.sprintf "%.16g" (fractional_cover ((Obj.magic !items4 : (string * Obj.t) list list)) (Obj.repr (0)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
