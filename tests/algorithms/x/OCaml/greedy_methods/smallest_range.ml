(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000
let rec smallest_range nums =
  let __ret = ref ([] : (int) list) in
  (try
  let nums = (Obj.magic nums : int list list) in
  let heap = ref (([] : ((string * Obj.t) list) list)) in
  let current_max = ref (-(_inf)) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  let first_val = (let __l = (let __l = nums in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  heap := (Obj.magic (List.append (!heap) [(Obj.magic ([(__str ("value"), Obj.repr (first_val)); (__str ("list_idx"), Obj.repr (!i)); (__str ("elem_idx"), Obj.repr (0))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  if (first_val > !current_max) then (
  current_max := first_val;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let best = ref ([-(_inf); _inf]) in
  (try while (List.length (!heap) > 0) do
    try
  let min_idx = ref (0) in
  let j = ref (1) in
  (try while (!j < List.length (!heap)) do
    try
  let hj = ref ((let __l = !heap in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let hmin = ref ((let __l = !heap in let __i = !min_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if ((Obj.obj (List.assoc (__str ("value")) (!hj) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("value")) (!hmin) : Obj.t) : int)) then (
  min_idx := !j;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let item = ref ((let __l = !heap in let __i = !min_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let new_heap = ref (([] : ((string * Obj.t) list) list)) in
  let k = ref (0) in
  (try while (!k < List.length (!heap)) do
    try
  if (!k <> !min_idx) then (
  new_heap := (Obj.magic (List.append (!new_heap) [(Obj.magic ((let __l = !heap in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  heap := (Obj.magic !new_heap : (string * Obj.t) list list);
  let current_min = (Obj.obj (List.assoc (__str ("value")) (!item) : Obj.t) : int) in
  if ((!current_max - current_min) < ((let __l = !best in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - (let __l = !best in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  best := (Obj.magic [current_min; !current_max] : int list);
  );
  if ((Obj.obj (List.assoc (__str ("elem_idx")) (!item) : Obj.t) : int) = (List.length ((let __l = nums in let __i = (Obj.obj (List.assoc (__str ("list_idx")) (!item) : Obj.t) : int) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) - 1)) then (
  raise Break;
  );
  let next_val = (let __l = (let __l = nums in let __i = (Obj.obj (List.assoc (__str ("list_idx")) (!item) : Obj.t) : int) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = ((Obj.obj (List.assoc (__str ("elem_idx")) (!item) : Obj.t) : int) + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  heap := (Obj.magic (List.append (!heap) [(Obj.magic ([(__str ("value"), Obj.repr (next_val)); (__str ("list_idx"), Obj.repr ((Obj.obj (List.assoc (__str ("list_idx")) (!item) : Obj.t) : int))); (__str ("elem_idx"), Obj.repr (((Obj.obj (List.assoc (__str ("elem_idx")) (!item) : Obj.t) : int) + 1)))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  if (next_val > !current_max) then (
  current_max := next_val;
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!best) : int list); raise Return
  with Return -> !__ret)

and list_to_string arr =
  let __ret = ref "" in
  (try
  let arr = (Obj.magic arr : int list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  s := (!s ^ (string_of_int ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!i < (List.length (arr) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!s ^ "]")) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let result1 = ref (smallest_range ([[4; 10; 15; 24; 26]; [0; 9; 12; 20]; [5; 18; 22; 30]])) in
  print_endline ((list_to_string (!result1)));
  let result2 = ref (smallest_range ([[1; 2; 3]; [1; 2; 3]; [1; 2; 3]])) in
  print_endline ((list_to_string (!result2)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
