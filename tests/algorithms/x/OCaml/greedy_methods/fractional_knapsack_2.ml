(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_by_ratio index ratio =
  let __ret = ref ([] : (int) list) in
  (try
  index := (Obj.magic !index : int list);
  let ratio = (Obj.magic ratio : float list) in
  let i = ref (1) in
  (try while (!i < List.length (!index)) do
    try
  let key = (let __l = !index in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let key_ratio = (let __l = ratio in let __i = key in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && ((let __l = ratio in let __i = (let __l = !index in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < key_ratio)) do
    try
  index := (List.mapi (fun __i __x -> if __i = (!j + 1) then (let __l = !index in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!index));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  index := (List.mapi (fun __i __x -> if __i = (!j + 1) then key else __x) (!index));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!index) : int list); raise Return
  with Return -> !__ret)

and fractional_knapsack value weight capacity =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let value = (Obj.magic value : float list) in
  let weight = (Obj.magic weight : float list) in
  capacity := (Obj.magic !capacity : float);
  let n = List.length (value) in
  let index = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  index := (Obj.magic (List.append (!index) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let ratio = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < n) do
    try
  ratio := (Obj.magic (List.append (!ratio) [(Obj.magic (((let __l = value in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. (let __l = weight in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  index := (Obj.magic sort_by_ratio (index) (!ratio) : int list);
  let fractions = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < n) do
    try
  fractions := (Obj.magic (List.append (!fractions) [(Obj.magic (0.0) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let max_value = ref (0.0) in
  let idx = ref (0) in
  (try while (!idx < List.length (!index)) do
    try
  let item = (let __l = !index in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((let __l = weight in let __i = item in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <= !capacity) then (
  fractions := (List.mapi (fun __i __x -> if __i = item then 1.0 else __x) (!fractions));
  max_value := (!max_value +. (let __l = value in let __i = item in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  capacity := (!capacity -. (let __l = weight in let __i = item in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  ) else (
  fractions := (List.mapi (fun __i __x -> if __i = item then (!capacity /. (let __l = weight in let __i = item in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!fractions));
  max_value := (!max_value +. (((let __l = value in let __i = item in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. !capacity) /. (let __l = weight in let __i = item in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  raise Break;
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("max_value"), Obj.repr (!max_value)); (__str ("fractions"), Obj.repr (!fractions))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let v = ref ([1.0; 3.0; 5.0; 7.0; 9.0])
let w = ref ([0.9; 0.7; 0.5; 0.3; 0.1])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show (fractional_knapsack (!v) (!w) (ref (5.0))));
  print_endline (__show (fractional_knapsack ([1.0; 3.0; 5.0; 7.0]) ([0.9; 0.7; 0.5; 0.3]) (ref (30.0))));
  print_endline (__show (fractional_knapsack ((Obj.magic [] : float list)) ((Obj.magic [] : float list)) (ref (30.0))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
