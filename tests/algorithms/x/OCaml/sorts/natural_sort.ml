(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _digits = "0123456789"
let _lower = "abcdefghijklmnopqrstuvwxyz"
let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let rec index_of s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and is_digit ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((index_of (_digits) (ch) >= 0)) : bool); raise Return
  with Return -> !__ret)

and to_lower ch =
  let __ret = ref "" in
  (try
  let idx = ref (index_of (_upper) (ch)) in
  if (!idx >= 0) then (
  __ret := (Obj.magic ((let __s = _lower in let __st = !idx in let __len = ((!idx + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string); raise Return
  );
  __ret := (Obj.magic (ch) : string); raise Return
  with Return -> !__ret)

and pad_left s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let res = ref (s) in
  (try while (String.length (!res) < width) do
    try
  res := ("0" ^ !res);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and alphanum_key s =
  let __ret = ref ([] : (string) list) in
  (try
  let key = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if is_digit ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  let num = ref ("") in
  (try while ((!i < String.length (s)) && is_digit ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))))) do
    try
  num := (!num ^ (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let len_str = pad_left ((string_of_int (String.length (!num)))) (Obj.repr (3)) in
  key := (Obj.magic (List.append (!key) [(Obj.magic ((("#" ^ len_str) ^ !num)) : string)]) : string list);
  ) else (
  let seg = ref ("") in
  (try while (!i < String.length (s)) do
    try
  if is_digit ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) then (
  raise Break;
  );
  seg := (!seg ^ to_lower ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  key := (Obj.magic (List.append (!key) [(Obj.magic (!seg) : string)]) : string list);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!key) : string list); raise Return
  with Return -> !__ret)

and compare_keys a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : string list) in
  let b = (Obj.magic b : string list) in
  let i = ref (0) in
  (try while ((!i < List.length (a)) && (!i < List.length (b))) do
    try
  if ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  if ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (a) < List.length (b)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  if (List.length (a) > List.length (b)) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and natural_sort arr =
  let __ret = ref ([] : (string) list) in
  (try
  let arr = (Obj.magic arr : string list) in
  let res = ref (([] : (string) list)) in
  let keys = ref (([] : (string list) list)) in
  let k = ref (0) in
  (try while (!k < List.length (arr)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = arr in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string)]) : string list);
  keys := (Obj.magic (List.append (!keys) [(Obj.magic (alphanum_key ((let __l = arr in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : string list)]) : string list list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (1) in
  (try while (!i < List.length (!res)) do
    try
  let current = (let __l = !res in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let current_key = ref ((let __l = !keys in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && (compare_keys ((let __l = !keys in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) (!current_key) > 0)) do
    try
  res := (List.mapi (fun __i __x -> if __i = (!j + 1) then (let __l = !res in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!res));
  keys := (List.mapi (fun __i __x -> if __i = (!j + 1) then (let __l = !keys in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!keys));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.mapi (fun __i __x -> if __i = (!j + 1) then current else __x) (!res));
  keys := (List.mapi (fun __i __x -> if __i = (!j + 1) then !current_key else __x) (!keys));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)


let example1 = ref (["2 ft 7 in"; "1 ft 5 in"; "10 ft 2 in"; "2 ft 11 in"; "7 ft 6 in"])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (natural_sort (!example1))));
  let example2 = ref (["Elm11"; "Elm12"; "Elm2"; "elm0"; "elm1"; "elm10"; "elm13"; "elm9"]) in
  print_endline ((__str (natural_sort (!example2))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
