(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binary_search_insertion_from sorted_list item start =
  let __ret = ref ([] : (int) list) in
  (try
  let sorted_list = (Obj.magic sorted_list : int list) in
  let item = (Obj.magic item : int) in
  let start = (Obj.magic start : int) in
  let left = ref (start) in
  let right = ref ((List.length (sorted_list) - 1)) in
  (try while (!left <= !right) do
    try
  let middle = ((!left + !right) / 2) in
  if (!left = !right) then (
  if ((let __l = sorted_list in let __i = middle in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < item) then (
  left := (middle + 1);
  );
  raise Break;
  ) else (
  if ((let __l = sorted_list in let __i = middle in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < item) then (
  left := (middle + 1);
  ) else (
  right := (middle - 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < !left) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = sorted_list in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (item) : int)]) : int list);
  (try while (!i < List.length (sorted_list)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = sorted_list in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and binary_search_insertion sorted_list item =
  let __ret = ref ([] : (int) list) in
  (try
  let sorted_list = (Obj.magic sorted_list : int list) in
  let item = (Obj.magic item : int) in
  __ret := (Obj.magic (binary_search_insertion_from (sorted_list) (Obj.repr (item)) (Obj.repr (0))) : int list); raise Return
  with Return -> !__ret)

and merge left right =
  let __ret = ref ([] : (int list) list) in
  (try
  let left = (Obj.magic left : int list list) in
  let right = (Obj.magic right : int list list) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  let j = ref (0) in
  (try while ((!i < List.length (left)) && (!j < List.length (right))) do
    try
  if ((let __l = (let __l = left in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = (let __l = right in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = left in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list)]) : int list list);
  i := (!i + 1);
  ) else (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = right in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list)]) : int list list);
  j := (!j + 1);
  );
    with Continue -> ()
  done with Break -> ());
  (try while (!i < List.length (left)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = left in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!j < List.length (right)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = right in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list)]) : int list list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and sortlist_2d list_2d =
  let __ret = ref ([] : (int list) list) in
  (try
  let list_2d = (Obj.magic list_2d : int list list) in
  let length = List.length (list_2d) in
  if (length <= 1) then (
  __ret := (Obj.magic (list_2d) : int list list); raise Return
  );
  let middle = (length / 2) in
  let left = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < middle) do
    try
  left := (Obj.magic (List.append (!left) [(Obj.magic ((let __l = list_2d in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let right = ref (([] : (int list) list)) in
  let j = ref (middle) in
  (try while (!j < length) do
    try
  right := (Obj.magic (List.append (!right) [(Obj.magic ((let __l = list_2d in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list)]) : int list list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (merge (sortlist_2d (!left)) (sortlist_2d (!right))) : int list list); raise Return
  with Return -> !__ret)

and merge_insertion_sort collection =
  let __ret = ref ([] : (int) list) in
  (try
  let collection = (Obj.magic collection : int list) in
  if (List.length (collection) <= 1) then (
  __ret := (Obj.magic (collection) : int list); raise Return
  );
  let two_paired_list = ref (([] : (int list) list)) in
  let has_last_odd_item = ref (false) in
  let i = ref (0) in
  (try while (!i < List.length (collection)) do
    try
  if (!i = (List.length (collection) - 1)) then (
  has_last_odd_item := true;
  ) else (
  let a = (let __l = collection in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let b = (let __l = collection in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (a < b) then (
  two_paired_list := (Obj.magic (List.append (!two_paired_list) [(Obj.magic ([a; b]) : int list)]) : int list list);
  ) else (
  two_paired_list := (Obj.magic (List.append (!two_paired_list) [(Obj.magic ([b; a]) : int list)]) : int list list);
  );
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  let sorted_list_2d = ref (sortlist_2d (!two_paired_list)) in
  let result = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (!sorted_list_2d)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = (let __l = !sorted_list_2d in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = (let __l = !sorted_list_2d in let __i = (List.length (!sorted_list_2d) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  if !has_last_odd_item then (
  result := (Obj.magic binary_search_insertion (!result) (Obj.repr ((let __l = collection in let __i = (List.length (collection) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int list);
  );
  let inserted_before = ref (false) in
  let idx = ref (0) in
  (try while (!idx < (List.length (!sorted_list_2d) - 1)) do
    try
  if (!has_last_odd_item && ((let __l = !result in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (let __l = collection in let __i = (List.length (collection) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  inserted_before := true;
  );
  let pivot = (let __l = (let __l = !sorted_list_2d in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if !inserted_before then (
  result := (Obj.magic binary_search_insertion_from (!result) (Obj.repr (pivot)) (Obj.repr ((!idx + 2))) : int list);
  ) else (
  result := (Obj.magic binary_search_insertion_from (!result) (Obj.repr (pivot)) (Obj.repr ((!idx + 1))) : int list);
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let example1 = ref ([0; 5; 3; 2; 2]) in
  let example2 = ref ([99]) in
  let example3 = ref ([-(2); -(5); -(45)]) in
  print_endline ((__str (merge_insertion_sort (!example1))));
  print_endline ((__str (merge_insertion_sort (!example2))));
  print_endline ((__str (merge_insertion_sort (!example3))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
