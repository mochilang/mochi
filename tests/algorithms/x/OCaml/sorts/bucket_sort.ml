(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec int_to_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic ((float_of_int (x) *. 1.0)) : float); raise Return
  with Return -> !__ret)

and floor_int x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref (0) in
  (try while (int_to_float (Obj.repr ((!i + 1))) <= x) do
    try
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!i) : int); raise Return
  with Return -> !__ret)

and set_at_float xs idx value =
  let __ret = ref ([] : (float) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  let idx = (Obj.magic idx : int) in
  let value = (Obj.magic value : float) in
  let i = ref (0) in
  let res = ref (([] : (float) list)) in
  (try while (!i < List.length (xs)) do
    try
  if (!i = idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (value) : float)]) : float list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and set_at_list_float xs idx value =
  let __ret = ref ([] : (float list) list) in
  (try
  let xs = (Obj.magic xs : float list list) in
  let idx = (Obj.magic idx : int) in
  let value = (Obj.magic value : float list) in
  let i = ref (0) in
  let res = ref (([] : (float list) list)) in
  (try while (!i < List.length (xs)) do
    try
  if (!i = idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (value) : float list)]) : float list list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float list)]) : float list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list list); raise Return
  with Return -> !__ret)

and sort_float xs =
  let __ret = ref ([] : (float) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  let res = ref (xs) in
  let i = ref (1) in
  (try while (!i < List.length (!res)) do
    try
  let key = (let __l = !res in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && ((let __l = !res in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > key)) do
    try
  res := (Obj.magic set_at_float (!res) (Obj.repr ((!j + 1))) (Obj.repr ((let __l = !res in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float list);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic set_at_float (!res) (Obj.repr ((!j + 1))) (Obj.repr (key)) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and bucket_sort_with_count xs bucket_count =
  let __ret = ref ([] : (float) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  let bucket_count = (Obj.magic bucket_count : int) in
  if ((List.length (xs) = 0) || (bucket_count <= 0)) then (
  __ret := (Obj.magic ([]) : float list); raise Return
  );
  let min_value = ref ((let __l = xs in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let max_value = ref ((let __l = xs in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let i = ref (1) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < !min_value) then (
  min_value := (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > !max_value) then (
  max_value := (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!max_value = !min_value) then (
  __ret := (Obj.magic (xs) : float list); raise Return
  );
  let bucket_size = ((!max_value -. !min_value) /. int_to_float (Obj.repr (bucket_count))) in
  let buckets = ref (([] : (float list) list)) in
  i := 0;
  (try while (!i < bucket_count) do
    try
  buckets := (Obj.magic (List.append (!buckets) [(Obj.magic ([]) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (xs)) do
    try
  let val_ = (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let idx = ref (floor_int (Obj.repr (((val_ -. !min_value) /. bucket_size)))) in
  if (!idx < 0) then (
  idx := 0;
  );
  if (!idx >= bucket_count) then (
  idx := (bucket_count - 1);
  );
  let bucket = ref ((let __l = !buckets in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  bucket := (Obj.magic (List.append (!bucket) [(Obj.magic (val_) : float)]) : float list);
  buckets := (Obj.magic set_at_list_float (!buckets) (Obj.repr (!idx)) (!bucket) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < List.length (!buckets)) do
    try
  let sorted_bucket = ref (sort_float ((let __l = !buckets in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  let j = ref (0) in
  (try while (!j < List.length (!sorted_bucket)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !sorted_bucket in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list); raise Return
  with Return -> !__ret)

and bucket_sort xs =
  let __ret = ref ([] : (float) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  __ret := (Obj.magic (bucket_sort_with_count (xs) (Obj.repr (10))) : float list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (bucket_sort ([(-.(1.0)); 2.0; (-.(5.0)); 0.0]))));
  print_endline ((__str (bucket_sort ([9.0; 8.0; 7.0; 6.0; (-.(12.0))]))));
  print_endline ((__str (bucket_sort ([0.4; 1.2; 0.1; 0.2; (-.(0.9))]))));
  print_endline ((__str (bucket_sort ((Obj.magic [] : float list)))));
  print_endline ((__str (bucket_sort ([(-.(10000000000.0)); 10000000000.0]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
