(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec merge a low mid high =
  let __ret = ref ([] : (int) list) in
  (try
  a := (Obj.magic !a : int list);
  let low = (Obj.magic low : int) in
  let mid = (Obj.magic mid : int) in
  let high = (Obj.magic high : int) in
  let left = ref (List.of_seq (Seq.take (mid - low) (Seq.drop low (List.to_seq (!a))))) in
  let right = ref (List.of_seq (Seq.take ((high + 1) - mid) (Seq.drop mid (List.to_seq (!a))))) in
  let result = ref (([] : (int) list)) in
  (try while ((List.length (!left) > 0) && (List.length (!right) > 0)) do
    try
  if ((let __l = !left in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <= (let __l = !right in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !left in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  left := (Obj.magic List.of_seq (Seq.take (List.length (!left) - 1) (Seq.drop 1 (List.to_seq (!left)))) : int list);
  ) else (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !right in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  right := (Obj.magic List.of_seq (Seq.take (List.length (!right) - 1) (Seq.drop 1 (List.to_seq (!right)))) : int list);
  );
    with Continue -> ()
  done with Break -> ());
  let i = ref (0) in
  (try while (!i < List.length (!left)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !left in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!right)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !right in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!result)) do
    try
  a := (List.mapi (fun __i __x -> if __i = (low + !i) then (let __l = !result in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!a));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : int list); raise Return
  with Return -> !__ret)

and iter_merge_sort items =
  let __ret = ref ([] : (int) list) in
  (try
  let items = (Obj.magic items : int list) in
  let n = List.length (items) in
  if (n <= 1) then (
  __ret := (Obj.magic (items) : int list); raise Return
  );
  let arr = ref (List.of_seq (Seq.take (List.length (items) - 0) (Seq.drop 0 (List.to_seq (items))))) in
  let p = ref (2) in
  (try while (!p <= n) do
    try
  let i = ref (0) in
  (try while (!i < n) do
    try
  let high = ref (((!i + !p) - 1)) in
  if (!high >= n) then (
  high := (n - 1);
  );
  let low = !i in
  let mid = (((low + !high) + 1) / 2) in
  arr := (Obj.magic merge (arr) (Obj.repr (low)) (Obj.repr (mid)) (Obj.repr (!high)) : int list);
  i := (!i + !p);
    with Continue -> ()
  done with Break -> ());
  if ((!p * 2) >= n) then (
  let mid2 = (!i - !p) in
  arr := (Obj.magic merge (arr) (Obj.repr (0)) (Obj.repr (mid2)) (Obj.repr ((n - 1))) : int list);
  raise Break;
  );
  p := (!p * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and list_to_string arr =
  let __ret = ref "" in
  (try
  let arr = (Obj.magic arr : int list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  s := (!s ^ (string_of_int ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!i < (List.length (arr) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!s ^ "]")) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((list_to_string (iter_merge_sort ([5; 9; 8; 7; 1; 2; 7]))));
  print_endline ((list_to_string (iter_merge_sort ([1]))));
  print_endline ((list_to_string (iter_merge_sort ([2; 1]))));
  print_endline ((list_to_string (iter_merge_sort ([4; 3; 2; 1]))));
  print_endline ((list_to_string (iter_merge_sort ([5; 4; 3; 2; 1]))));
  print_endline ((list_to_string (iter_merge_sort ([-(2); -(9); -(1); -(4)]))));
  print_endline ((list_to_string (iter_merge_sort ((Obj.magic [] : int list)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
