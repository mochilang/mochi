(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let edges = ref ([(__str ("a"), Obj.repr (["c"; "b"])); (__str ("b"), Obj.repr (["d"; "e"])); (__str ("c"), Obj.repr ([])); (__str ("d"), Obj.repr ([])); (__str ("e"), Obj.repr ([]))])
let vertices = ref (["a"; "b"; "c"; "d"; "e"])
let rec topological_sort start visited sort =
  let __ret = ref ([] : (string) list) in
  (try
  visited := (Obj.magic !visited : (string * bool) list);
  sort := (Obj.magic !sort : string list);
  visited := ((__str (start), true) :: List.remove_assoc (__str (start)) (!visited));
  let neighbors = ref ((Obj.obj (List.assoc (__str (start)) (!edges) : Obj.t) : string list)) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  let neighbor = (let __l = !neighbors in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if not ((List.mem_assoc neighbor !visited)) then (
  sort := (Obj.magic topological_sort (neighbor) (visited) (sort) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  sort := (Obj.magic (List.append (!sort) [(Obj.magic (start) : string)]) : string list);
  if (List.length (!visited) <> List.length (!vertices)) then (
  let j = ref (0) in
  (try while (!j < List.length (!vertices)) do
    try
  let v = (let __l = !vertices in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if not ((List.mem_assoc v !visited)) then (
  sort := (Obj.magic topological_sort (v) (visited) (sort) : string list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!sort) : string list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let result = ref (topological_sort ("a") (ref ([])) (ref ([]))) in
  print_endline ((__str (!result)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
