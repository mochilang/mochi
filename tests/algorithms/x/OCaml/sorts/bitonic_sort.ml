(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec set_at_int xs idx value =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let idx = (Obj.magic idx : int) in
  let value = (Obj.magic value : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i = idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (value) : int)]) : int list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and comp_and_swap arr i j dir =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let dir = (Obj.magic dir : int) in
  let res = ref (arr) in
  let xi = (let __l = arr in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let xj = (let __l = arr in let __i = j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (((dir = 1) && (xi > xj)) || ((dir = 0) && (xi < xj))) then (
  res := (Obj.magic set_at_int (!res) (Obj.repr (i)) (Obj.repr (xj)) : int list);
  res := (Obj.magic set_at_int (!res) (Obj.repr (j)) (Obj.repr (xi)) : int list);
  );
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and bitonic_merge arr low length dir =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let low = (Obj.magic low : int) in
  let length = (Obj.magic length : int) in
  let dir = (Obj.magic dir : int) in
  let res = ref (arr) in
  if (length > 1) then (
  let mid = (length / 2) in
  let k = ref (low) in
  (try while (!k < (low + mid)) do
    try
  res := (Obj.magic comp_and_swap (!res) (Obj.repr (!k)) (Obj.repr ((!k + mid))) (Obj.repr (dir)) : int list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic bitonic_merge (!res) (Obj.repr (low)) (Obj.repr (mid)) (Obj.repr (dir)) : int list);
  res := (Obj.magic bitonic_merge (!res) (Obj.repr ((low + mid))) (Obj.repr (mid)) (Obj.repr (dir)) : int list);
  );
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and bitonic_sort arr low length dir =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let low = (Obj.magic low : int) in
  let length = (Obj.magic length : int) in
  let dir = (Obj.magic dir : int) in
  let res = ref (arr) in
  if (length > 1) then (
  let mid = (length / 2) in
  res := (Obj.magic bitonic_sort (!res) (Obj.repr (low)) (Obj.repr (mid)) (Obj.repr (1)) : int list);
  res := (Obj.magic bitonic_sort (!res) (Obj.repr ((low + mid))) (Obj.repr (mid)) (Obj.repr (0)) : int list);
  res := (Obj.magic bitonic_merge (!res) (Obj.repr (low)) (Obj.repr (length)) (Obj.repr (dir)) : int list);
  );
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let data = ref ([12; 34; 92; -(23); 0; -(121); -(167); 145]) in
  let asc = ref (bitonic_sort (!data) (Obj.repr (0)) (Obj.repr (List.length (!data))) (Obj.repr (1))) in
  print_endline ((__str (!asc)));
  let desc = ref (bitonic_merge (!asc) (Obj.repr (0)) (Obj.repr (List.length (!asc))) (Obj.repr (0))) in
  print_endline ((__str (!desc)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
