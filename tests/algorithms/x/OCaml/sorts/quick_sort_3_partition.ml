(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec quick_sort_3partition arr left right =
  let __ret = ref ([] : (int) list) in
  (try
  arr := (Obj.magic !arr : int list);
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  if (right <= left) then (
  __ret := (Obj.magic (!arr) : int list); raise Return
  );
  let a = ref (left) in
  let i = ref (left) in
  let b = ref (right) in
  let pivot = (let __l = !arr in let __i = left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  (try while (!i <= !b) do
    try
  if ((let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < pivot) then (
  let temp = (let __l = !arr in let __i = !a in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = !a then (let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !i then temp else __x) (!arr));
  a := (!a + 1);
  i := (!i + 1);
  ) else (
  if ((let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > pivot) then (
  let temp = (let __l = !arr in let __i = !b in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = !b then (let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !i then temp else __x) (!arr));
  b := (!b - 1);
  ) else (
  i := (!i + 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  arr := (Obj.magic quick_sort_3partition (arr) (Obj.repr (left)) (Obj.repr ((!a - 1))) : int list);
  arr := (Obj.magic quick_sort_3partition (arr) (Obj.repr ((!b + 1))) (Obj.repr (right)) : int list);
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and quick_sort_lomuto_partition arr left right =
  let __ret = ref ([] : (int) list) in
  (try
  arr := (Obj.magic !arr : int list);
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  if (left < right) then (
  let pivot_index = lomuto_partition (arr) (Obj.repr (left)) (Obj.repr (right)) in
  arr := (Obj.magic quick_sort_lomuto_partition (arr) (Obj.repr (left)) (Obj.repr ((pivot_index - 1))) : int list);
  arr := (Obj.magic quick_sort_lomuto_partition (arr) (Obj.repr ((pivot_index + 1))) (Obj.repr (right)) : int list);
  );
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and lomuto_partition arr left right =
  let __ret = ref 0 in
  (try
  arr := (Obj.magic !arr : int list);
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  let pivot = (let __l = !arr in let __i = right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let store_index = ref (left) in
  let i = ref (left) in
  (try while (!i < right) do
    try
  if ((let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < pivot) then (
  let temp = (let __l = !arr in let __i = !store_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = !store_index then (let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !i then temp else __x) (!arr));
  store_index := (!store_index + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let temp = (let __l = !arr in let __i = right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = right then (let __l = !arr in let __i = !store_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !store_index then temp else __x) (!arr));
  __ret := (Obj.magic (!store_index) : int); raise Return
  with Return -> !__ret)

and three_way_radix_quicksort arr =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  if (List.length (arr) <= 1) then (
  __ret := (Obj.magic (arr) : int list); raise Return
  );
  let pivot = (let __l = arr in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let less = ref (([] : (int) list)) in
  let equal = ref (([] : (int) list)) in
  let greater = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  let val_ = (let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (val_ < pivot) then (
  less := (Obj.magic (List.append (!less) [(Obj.magic (val_) : int)]) : int list);
  ) else (
  if (val_ > pivot) then (
  greater := (Obj.magic (List.append (!greater) [(Obj.magic (val_) : int)]) : int list);
  ) else (
  equal := (Obj.magic (List.append (!equal) [(Obj.magic (val_) : int)]) : int list);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sorted_less = ref (three_way_radix_quicksort (!less)) in
  let sorted_greater = ref (three_way_radix_quicksort (!greater)) in
  let result = ref ((!sorted_less @ !equal)) in
  result := (Obj.magic (!result @ !sorted_greater) : int list);
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)


let array1 = ref ([5; -(1); -(1); 5; 5; 24; 0])
let () =
  let mem_start = _mem () in
  let start = _now () in
  array1 := (Obj.magic quick_sort_3partition (array1) (Obj.repr (0)) (Obj.repr ((List.length (!array1) - 1))) : int list);
  print_endline ((__str (!array1)));
  let array2 = ref ([9; 0; 2; 6]) in
  array2 := (Obj.magic quick_sort_3partition (array2) (Obj.repr (0)) (Obj.repr ((List.length (!array2) - 1))) : int list);
  print_endline ((__str (!array2)));
  let array3 = ref (([] : (int) list)) in
  array3 := (Obj.magic quick_sort_3partition (array3) (Obj.repr (0)) (Obj.repr ((List.length (!array3) - 1))) : int list);
  print_endline ((__str (!array3)));
  let nums1 = ref ([0; 5; 3; 1; 2]) in
  nums1 := (Obj.magic quick_sort_lomuto_partition (nums1) (Obj.repr (0)) (Obj.repr ((List.length (!nums1) - 1))) : int list);
  print_endline ((__str (!nums1)));
  let nums2 = ref (([] : (int) list)) in
  nums2 := (Obj.magic quick_sort_lomuto_partition (nums2) (Obj.repr (0)) (Obj.repr ((List.length (!nums2) - 1))) : int list);
  print_endline ((__str (!nums2)));
  let nums3 = ref ([-(2); 5; 0; -(4)]) in
  nums3 := (Obj.magic quick_sort_lomuto_partition (nums3) (Obj.repr (0)) (Obj.repr ((List.length (!nums3) - 1))) : int list);
  print_endline ((__str (!nums3)));
  print_endline ((__str (three_way_radix_quicksort ((Obj.magic [] : int list)))));
  print_endline ((__str (three_way_radix_quicksort ([1]))));
  print_endline ((__str (three_way_radix_quicksort ([-(5); -(2); 1; -(2); 0; 1]))));
  print_endline ((__str (three_way_radix_quicksort ([1; 2; 5; 1; 2; 0; 0; 5; 2; -(1)]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
