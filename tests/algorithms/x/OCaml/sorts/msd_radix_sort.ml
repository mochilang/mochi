(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_bit_length n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  let length = ref (0) in
  let num = ref (n) in
  (try while (!num > 0) do
    try
  length := (!length + 1);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!length) : int); raise Return
  with Return -> !__ret)

and max_bit_length nums =
  let __ret = ref 0 in
  (try
  let nums = (Obj.magic nums : int list) in
  let i = ref (0) in
  let max_len = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  let l = get_bit_length (Obj.repr ((let __l = nums in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  if (l > !max_len) then (
  max_len := l;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_len) : int); raise Return
  with Return -> !__ret)

and get_bit num pos =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let pos = (Obj.magic pos : int) in
  let n = ref (num) in
  let i = ref (0) in
  (try while (!i < pos) do
    try
  n := (!n / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((!n mod 2 + 2) mod 2)) : int); raise Return
  with Return -> !__ret)

and _msd_radix_sort nums bit_position =
  let __ret = ref ([] : (int) list) in
  (try
  let nums = (Obj.magic nums : int list) in
  let bit_position = (Obj.magic bit_position : int) in
  if ((bit_position = 0) || (List.length (nums) <= 1)) then (
  __ret := (Obj.magic (nums) : int list); raise Return
  );
  let zeros = ref (([] : (int) list)) in
  let ones = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  let num = (let __l = nums in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (get_bit (Obj.repr (num)) (Obj.repr ((bit_position - 1))) = 1) then (
  ones := (Obj.magic (List.append (!ones) [(Obj.magic (num) : int)]) : int list);
  ) else (
  zeros := (Obj.magic (List.append (!zeros) [(Obj.magic (num) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  zeros := (Obj.magic _msd_radix_sort (!zeros) (Obj.repr ((bit_position - 1))) : int list);
  ones := (Obj.magic _msd_radix_sort (!ones) (Obj.repr ((bit_position - 1))) : int list);
  let res = ref (!zeros) in
  i := 0;
  (try while (!i < List.length (!ones)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = !ones in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and msd_radix_sort nums =
  let __ret = ref ([] : (int) list) in
  (try
  let nums = (Obj.magic nums : int list) in
  if (List.length (nums) = 0) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  if ((let __l = nums in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < 0) then (
  (failwith ("All numbers must be positive"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let bits = max_bit_length (nums) in
  let result = ref (_msd_radix_sort (nums) (Obj.repr (bits))) in
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and msd_radix_sort_inplace nums =
  let __ret = ref ([] : (int) list) in
  (try
  let nums = (Obj.magic nums : int list) in
  __ret := (Obj.magic (msd_radix_sort (nums)) : int list); raise Return
  with Return -> !__ret)


let ex1 = ref ([40; 12; 1; 100; 4])
let sorted1 = ref (msd_radix_sort (!ex1))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!sorted1)));
  let ex2 = ref (([] : (int) list)) in
  let sorted2 = ref (msd_radix_sort (!ex2)) in
  print_endline ((__str (!sorted2)));
  let ex3 = ref ([123; 345; 123; 80]) in
  let sorted3 = ref (msd_radix_sort (!ex3)) in
  print_endline ((__str (!sorted3)));
  let ex4 = ref ([1209; 834598; 1; 540402; 45]) in
  let sorted4 = ref (msd_radix_sort (!ex4)) in
  print_endline ((__str (!sorted4)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
