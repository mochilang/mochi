(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_node state value =
  let __ret = ref 0 in
  (try
  state := (Obj.magic !state : (string * Obj.t) list);
  let value = (Obj.magic value : int) in
  state := ((__str ("nodes"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("nodes")) (!state) : Obj.t) : (string * Obj.t) list list)) [(Obj.magic ([(__str ("value"), Obj.repr (value)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]) : (string * Obj.t) list)]))) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!state) : (string * Obj.t) list));
  __ret := (Obj.magic ((List.length ((Obj.obj (List.assoc (__str ("nodes")) (!state) : Obj.t) : (string * Obj.t) list list)) - 1)) : int); raise Return
  with Return -> !__ret)

and insert state value =
  let __ret = ref (Obj.magic 0) in
  (try
  state := (Obj.magic !state : (string * Obj.t) list);
  let value = (Obj.magic value : int) in
  if ((Obj.obj (List.assoc (__str ("root")) (!state) : Obj.t) : int) = -(1)) then (
  state := ((__str ("root"), Obj.repr (new_node (state) (Obj.repr (value)))) :: List.remove_assoc (__str ("root")) (Obj.magic (!state) : (string * Obj.t) list));
  __ret := (); raise Return
  );
  let current = ref ((Obj.obj (List.assoc (__str ("root")) (!state) : Obj.t) : int)) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!state) : Obj.t) : (string * Obj.t) list list)) in
  (try while true do
    try
  let node = ref ((let __l = !nodes in let __i = !current in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if (value < (Obj.obj (List.assoc (__str ("value")) (!node) : Obj.t) : int)) then (
  if ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int) = -(1)) then (
  let idx = new_node (state) (Obj.repr (value)) in
  nodes := (Obj.magic (Obj.obj (List.assoc (__str ("nodes")) (!state) : Obj.t) : (string * Obj.t) list list) : (string * Obj.t) list list);
  node := ((__str ("left"), Obj.repr (idx)) :: List.remove_assoc (__str ("left")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !current then !node else __x) (!nodes));
  state := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!state) : (string * Obj.t) list));
  __ret := (); raise Return
  );
  current := (Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int);
  ) else (
  if (value > (Obj.obj (List.assoc (__str ("value")) (!node) : Obj.t) : int)) then (
  if ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int) = -(1)) then (
  let idx = new_node (state) (Obj.repr (value)) in
  nodes := (Obj.magic (Obj.obj (List.assoc (__str ("nodes")) (!state) : Obj.t) : (string * Obj.t) list list) : (string * Obj.t) list list);
  node := ((__str ("right"), Obj.repr (idx)) :: List.remove_assoc (__str ("right")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !current then !node else __x) (!nodes));
  state := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!state) : (string * Obj.t) list));
  __ret := (); raise Return
  );
  current := (Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int);
  ) else (
  __ret := (); raise Return
  );
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and inorder state idx =
  let __ret = ref ([] : (int) list) in
  (try
  let state = (Obj.magic state : (string * Obj.t) list) in
  let idx = (Obj.magic idx : int) in
  if (idx = -(1)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let node = ref ((let __l = (Obj.obj (List.assoc (__str ("nodes")) (state) : Obj.t) : (string * Obj.t) list list) in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let result = ref (inorder ((Obj.magic state : (string * Obj.t) list)) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int)))) in
  result := (Obj.magic (List.append (!result) [(Obj.magic ((Obj.obj (List.assoc (__str ("value")) (!node) : Obj.t) : int)) : int)]) : int list);
  let right_part = ref (inorder ((Obj.magic state : (string * Obj.t) list)) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int)))) in
  let i = ref (0) in
  (try while (!i < List.length (!right_part)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !right_part in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and tree_sort arr =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let state = ref ([(__str ("nodes"), Obj.repr ([])); (__str ("root"), Obj.repr (-(1)))]) in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  ignore (insert (state) (Obj.repr ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if ((Obj.obj (List.assoc (__str ("root")) (!state) : Obj.t) : int) = -(1)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  __ret := (Obj.magic (inorder (!state) (Obj.repr ((Obj.obj (List.assoc (__str ("root")) (!state) : Obj.t) : int)))) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (tree_sort ((Obj.magic [] : int list)))));
  print_endline ((__str (tree_sort ([1]))));
  print_endline ((__str (tree_sort ([1; 2]))));
  print_endline ((__str (tree_sort ([5; 2; 7]))));
  print_endline ((__str (tree_sort ([5; -(4); 9; 2; 7]))));
  print_endline ((__str (tree_sort ([5; 6; 1; -(1); 4; 37; 2; 7]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
