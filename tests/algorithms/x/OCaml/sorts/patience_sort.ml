(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bisect_left stacks value =
  let __ret = ref 0 in
  (try
  let stacks = (Obj.magic stacks : int list list) in
  let value = (Obj.magic value : int) in
  let low = ref (0) in
  let high = ref (List.length (stacks)) in
  (try while (!low < !high) do
    try
  let mid = ((!low + !high) / 2) in
  let stack = ref ((let __l = stacks in let __i = mid in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let top_idx = (List.length (!stack) - 1) in
  let top = (let __l = !stack in let __i = top_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (top < value) then (
  low := (mid + 1);
  ) else (
  high := mid;
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!low) : int); raise Return
  with Return -> !__ret)

and reverse_list src =
  let __ret = ref ([] : (int) list) in
  (try
  let src = (Obj.magic src : int list) in
  let res = ref (([] : (int) list)) in
  let i = ref ((List.length (src) - 1)) in
  (try while (!i >= 0) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = src in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and patience_sort collection =
  let __ret = ref ([] : (int) list) in
  (try
  collection := (Obj.magic !collection : int list);
  let stacks = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!collection)) do
    try
  let element = (let __l = !collection in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let idx = bisect_left (!stacks) (Obj.repr (element)) in
  if (idx <> List.length (!stacks)) then (
  let stack = ref ((let __l = !stacks in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  stacks := (List.mapi (fun __i __x -> if __i = idx then (List.append (!stack) [(Obj.magic (element) : int)]) else __x) (!stacks));
  ) else (
  let new_stack = ref ([element]) in
  stacks := (Obj.magic (List.append (!stacks) [(Obj.magic (!new_stack) : int list)]) : int list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!stacks)) do
    try
  stacks := (List.mapi (fun __i __x -> if __i = !i then reverse_list ((let __l = !stacks in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!stacks));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let indices = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (!stacks)) do
    try
  indices := (Obj.magic (List.append (!indices) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let total = ref (0) in
  i := 0;
  (try while (!i < List.length (!stacks)) do
    try
  total := (!total + List.length ((let __l = !stacks in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (int) list)) in
  let count = ref (0) in
  (try while (!count < !total) do
    try
  let min_val = ref (0) in
  let min_stack = ref (-(1)) in
  let j = ref (0) in
  (try while (!j < List.length (!stacks)) do
    try
  let idx = (let __l = !indices in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (idx < List.length ((let __l = !stacks in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  let val_ = (let __l = (let __l = !stacks in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (!min_stack < 0) then (
  min_val := val_;
  min_stack := !j;
  ) else (
  if (val_ < !min_val) then (
  min_val := val_;
  min_stack := !j;
  );
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!min_val) : int)]) : int list);
  indices := (List.mapi (fun __i __x -> if __i = !min_stack then ((let __l = !indices in let __i = !min_stack in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + 1) else __x) (!indices));
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!result)) do
    try
  collection := (List.mapi (fun __i __x -> if __i = !i then (let __l = !result in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!collection));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!collection) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (patience_sort (ref ([1; 9; 5; 21; 17; 6])))));
  print_endline ((__str (patience_sort (ref ([])))));
  print_endline ((__str (patience_sort (ref ([-(3); -(17); -(48)])))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
