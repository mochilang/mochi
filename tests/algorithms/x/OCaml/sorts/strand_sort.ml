(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec merge xs ys reverse =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let ys = (Obj.magic ys : int list) in
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  let j = ref (0) in
  (try while ((!i < List.length (xs)) && (!j < List.length (ys))) do
    try
  if reverse then (
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > (let __l = ys in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
  ) else (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = ys in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
  );
  ) else (
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = ys in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
  ) else (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = ys in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  (try while (!i < List.length (xs)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!j < List.length (ys)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = ys in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and strand_sort_rec arr reverse solution =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  solution := (Obj.magic !solution : int list);
  if (List.length (arr) = 0) then (
  __ret := (Obj.magic (!solution) : int list); raise Return
  );
  let sublist = ref (([] : (int) list)) in
  let remaining = ref (([] : (int) list)) in
  sublist := (Obj.magic (List.append (!sublist) [(Obj.magic ((let __l = arr in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  let last = ref ((let __l = arr in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let k = ref (1) in
  (try while (!k < List.length (arr)) do
    try
  let item = (let __l = arr in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if reverse then (
  if (item < !last) then (
  sublist := (Obj.magic (List.append (!sublist) [(Obj.magic (item) : int)]) : int list);
  last := item;
  ) else (
  remaining := (Obj.magic (List.append (!remaining) [(Obj.magic (item) : int)]) : int list);
  );
  ) else (
  if (item > !last) then (
  sublist := (Obj.magic (List.append (!sublist) [(Obj.magic (item) : int)]) : int list);
  last := item;
  ) else (
  remaining := (Obj.magic (List.append (!remaining) [(Obj.magic (item) : int)]) : int list);
  );
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  solution := (Obj.magic merge (!solution) (!sublist) (reverse) : int list);
  __ret := (Obj.magic (strand_sort_rec (!remaining) (reverse) (solution)) : int list); raise Return
  with Return -> !__ret)

and strand_sort arr reverse =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  __ret := (Obj.magic (strand_sort_rec (arr) (reverse) (ref ([]))) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (strand_sort ([4; 3; 5; 1; 2]) (false))));
  print_endline ((__str (strand_sort ([4; 3; 5; 1; 2]) (true))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
