(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec shell_sort collection =
  let __ret = ref ([] : (int) list) in
  (try
  collection := (Obj.magic !collection : int list);
  let gap = ref (List.length (!collection)) in
  let ten = 10 in
  let thirteen = 13 in
  (try while (!gap > 1) do
    try
  gap := ((!gap * ten) / thirteen);
  let i = ref (!gap) in
  (try while (!i < List.length (!collection)) do
    try
  let temp = (let __l = !collection in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let j = ref (!i) in
  (try while ((!j >= !gap) && ((let __l = !collection in let __i = (!j - !gap) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > temp)) do
    try
  collection := (List.mapi (fun __i __x -> if __i = !j then (let __l = !collection in let __i = (!j - !gap) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!collection));
  j := (!j - !gap);
    with Continue -> ()
  done with Break -> ());
  collection := (List.mapi (fun __i __x -> if __i = !j then temp else __x) (!collection));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!collection) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((__str (shell_sort (ref ([3; 2; 1])))));
  print_endline ((__str (shell_sort (ref ([])))));
  print_endline ((__str (shell_sort (ref ([1])))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
