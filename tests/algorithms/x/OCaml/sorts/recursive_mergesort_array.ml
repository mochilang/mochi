(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec subarray xs start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let result = ref (([] : (int) list)) in
  let k = ref (start) in
  (try while (!k < end_) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = xs in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and merge arr =
  let __ret = ref ([] : (int) list) in
  (try
  arr := (Obj.magic !arr : int list);
  if (List.length (!arr) > 1) then (
  let middle_length = (List.length (!arr) / 2) in
  let left_array = ref (subarray (!arr) (Obj.repr (0)) (Obj.repr (middle_length))) in
  let right_array = ref (subarray (!arr) (Obj.repr (middle_length)) (Obj.repr (List.length (!arr)))) in
  let left_size = List.length (!left_array) in
  let right_size = List.length (!right_array) in
  ignore (merge (left_array));
  ignore (merge (right_array));
  let left_index = ref (0) in
  let right_index = ref (0) in
  let index = ref (0) in
  (try while ((!left_index < left_size) && (!right_index < right_size)) do
    try
  if ((let __l = !left_array in let __i = !left_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = !right_array in let __i = !right_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  arr := (List.mapi (fun __i __x -> if __i = !index then (let __l = !left_array in let __i = !left_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  left_index := (!left_index + 1);
  ) else (
  arr := (List.mapi (fun __i __x -> if __i = !index then (let __l = !right_array in let __i = !right_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  right_index := (!right_index + 1);
  );
  index := (!index + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!left_index < left_size) do
    try
  arr := (List.mapi (fun __i __x -> if __i = !index then (let __l = !left_array in let __i = !left_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  left_index := (!left_index + 1);
  index := (!index + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!right_index < right_size) do
    try
  arr := (List.mapi (fun __i __x -> if __i = !index then (let __l = !right_array in let __i = !right_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  right_index := (!right_index + 1);
  index := (!index + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (merge (ref ([10; 9; 8; 7; 6; 5; 4; 3; 2; 1])))));
  print_endline ((__str (merge (ref ([1; 2; 3; 4; 5; 6; 7; 8; 9; 10])))));
  print_endline ((__str (merge (ref ([10; 22; 1; 2; 3; 9; 15; 23])))));
  print_endline ((__str (merge (ref ([100])))));
  print_endline ((__str (merge (ref ([])))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
