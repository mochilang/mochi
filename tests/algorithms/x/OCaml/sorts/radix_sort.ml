(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _radix = 10
let rec make_buckets () =
  let __ret = ref ([] : (int list) list) in
  (try
  let buckets = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < _radix) do
    try
  buckets := (Obj.magic (List.append (!buckets) [(Obj.magic ([]) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!buckets) : int list list); raise Return
  with Return -> !__ret)

and max_value xs =
  let __ret = ref 0 in
  (try
  let xs = (Obj.magic xs : int list) in
  let max_val = ref ((let __l = xs in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let i = ref (1) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > !max_val) then (
  max_val := (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_val) : int); raise Return
  with Return -> !__ret)

and radix_sort list_of_ints =
  let __ret = ref ([] : (int) list) in
  (try
  list_of_ints := (Obj.magic !list_of_ints : int list);
  let placement = ref (1) in
  let max_digit = max_value (!list_of_ints) in
  (try while (!placement <= max_digit) do
    try
  let buckets = ref (make_buckets ()) in
  let i = ref (0) in
  (try while (!i < List.length (!list_of_ints)) do
    try
  let value = (let __l = !list_of_ints in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let tmp = (((value / !placement) mod _radix + _radix) mod _radix) in
  buckets := (List.mapi (fun __i __x -> if __i = tmp then (List.append ((let __l = !buckets in let __i = tmp in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) [(Obj.magic (value) : int)]) else __x) (!buckets));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let a = ref (0) in
  let b = ref (0) in
  (try while (!b < _radix) do
    try
  let bucket = ref ((let __l = !buckets in let __i = !b in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let j = ref (0) in
  (try while (!j < List.length (!bucket)) do
    try
  list_of_ints := (List.mapi (fun __i __x -> if __i = !a then (let __l = !bucket in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!list_of_ints));
  a := (!a + 1);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  placement := (!placement * _radix);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!list_of_ints) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (radix_sort (ref ([0; 5; 3; 2; 2])))));
  print_endline ((__str (radix_sort (ref ([1; 100; 10; 1000])))));
  print_endline ((__str (radix_sort (ref ([15; 14; 13; 12; 11; 10; 9; 8; 7; 6; 5; 4; 3; 2; 1; 0])))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
