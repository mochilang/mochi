(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec swap seq i j =
  let __ret = ref (Obj.magic 0) in
  (try
  seq := (Obj.magic !seq : int list);
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let temp = (let __l = !seq in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  seq := (List.mapi (fun __i __x -> if __i = i then (let __l = !seq in let __i = j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!seq));
  seq := (List.mapi (fun __i __x -> if __i = j then temp else __x) (!seq));
    !__ret
  with Return -> !__ret)

and slowsort_recursive seq start end_index =
  let __ret = ref (Obj.magic 0) in
  (try
  let seq = (Obj.magic seq : int list) in
  let start = (Obj.magic start : int) in
  let end_index = (Obj.magic end_index : int) in
  if (start >= end_index) then (
  __ret := (); raise Return
  );
  let mid = ((start + end_index) / 2) in
  slowsort_recursive (seq) (Obj.repr (start)) (Obj.repr (mid));
  slowsort_recursive (seq) (Obj.repr ((mid + 1))) (Obj.repr (end_index));
  if ((let __l = seq in let __i = end_index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = seq in let __i = mid in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  swap (ref (seq)) (Obj.repr (end_index)) (Obj.repr (mid));
  );
  slowsort_recursive (seq) (Obj.repr (start)) (Obj.repr ((end_index - 1)));
    !__ret
  with Return -> !__ret)

and slow_sort seq =
  let __ret = ref ([] : (int) list) in
  (try
  let seq = (Obj.magic seq : int list) in
  if (List.length (seq) > 0) then (
  slowsort_recursive (seq) (Obj.repr (0)) (Obj.repr ((List.length (seq) - 1)));
  );
  __ret := (Obj.magic (seq) : int list); raise Return
  with Return -> !__ret)


let seq1 = ref ([1; 6; 2; 5; 3; 4; 4; 5])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (slow_sort (!seq1))));
  let seq2 = ref (([] : (int) list)) in
  print_endline ((__str (slow_sort (!seq2))));
  let seq3 = ref ([2]) in
  print_endline ((__str (slow_sort (!seq3))));
  let seq4 = ref ([1; 2; 3; 4]) in
  print_endline ((__str (slow_sort (!seq4))));
  let seq5 = ref ([4; 3; 2; 1]) in
  print_endline ((__str (slow_sort (!seq5))));
  let seq6 = ref ([9; 8; 7; 6; 5; 4; 3; 2; 1; 0]) in
  slowsort_recursive (!seq6) (Obj.repr (2)) (Obj.repr (7));
  print_endline ((__str (!seq6)));
  let seq7 = ref ([9; 8; 7; 6; 5; 4; 3; 2; 1; 0]) in
  slowsort_recursive (!seq7) (Obj.repr (0)) (Obj.repr (4));
  print_endline ((__str (!seq7)));
  let seq8 = ref ([9; 8; 7; 6; 5; 4; 3; 2; 1; 0]) in
  slowsort_recursive (!seq8) (Obj.repr (5)) (Obj.repr ((List.length (!seq8) - 1)));
  print_endline ((__str (!seq8)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
