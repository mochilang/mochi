(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec insertion_sort a start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int list) in
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let arr = ref (a) in
  let i = ref (start) in
  (try while (!i < end_) do
    try
  let key = (let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let j = ref (!i) in
  (try while ((!j > start) && ((let __l = !arr in let __i = (!j - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > key)) do
    try
  arr := (List.mapi (fun __i __x -> if __i = !j then (let __l = !arr in let __i = (!j - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = !j then key else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and heapify a index heap_size =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int list) in
  let index = (Obj.magic index : int) in
  let heap_size = (Obj.magic heap_size : int) in
  let arr = ref (a) in
  let largest = ref (index) in
  let left = ((2 * index) + 1) in
  let right = ((2 * index) + 2) in
  if ((left < heap_size) && ((let __l = !arr in let __i = left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > (let __l = !arr in let __i = !largest in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  largest := left;
  );
  if ((right < heap_size) && ((let __l = !arr in let __i = right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > (let __l = !arr in let __i = !largest in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  largest := right;
  );
  if (!largest <> index) then (
  let temp = (let __l = !arr in let __i = index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = index then (let __l = !arr in let __i = !largest in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !largest then temp else __x) (!arr));
  arr := (Obj.magic heapify (!arr) (Obj.repr (!largest)) (Obj.repr (heap_size)) : int list);
  );
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and heap_sort a =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int list) in
  let arr = ref (a) in
  let n = List.length (!arr) in
  if (n <= 1) then (
  __ret := (Obj.magic (!arr) : int list); raise Return
  );
  let i = ref ((n / 2)) in
  (try while true do
    try
  arr := (Obj.magic heapify (!arr) (Obj.repr (!i)) (Obj.repr (n)) : int list);
  if (!i = 0) then (
  raise Break;
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  i := (n - 1);
  (try while (!i > 0) do
    try
  let temp = (let __l = !arr in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = 0 then (let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !i then temp else __x) (!arr));
  arr := (Obj.magic heapify (!arr) (Obj.repr (0)) (Obj.repr (!i)) : int list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and median_of_3 arr first middle last =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let first = (Obj.magic first : int) in
  let middle = (Obj.magic middle : int) in
  let last = (Obj.magic last : int) in
  let a = (let __l = arr in let __i = first in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let b = (let __l = arr in let __i = middle in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let c = (let __l = arr in let __i = last in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (((a > b) && (a < c)) || ((a < b) && (a > c))) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  if (((b > a) && (b < c)) || ((b < a) && (b > c))) then (
  __ret := (Obj.magic (b) : int); raise Return
  ) else (
  __ret := (Obj.magic (c) : int); raise Return
  );
  );
    !__ret
  with Return -> !__ret)

and partition arr low high pivot =
  let __ret = ref 0 in
  (try
  arr := (Obj.magic !arr : int list);
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  let pivot = (Obj.magic pivot : int) in
  let i = ref (low) in
  let j = ref (high) in
  (try while true do
    try
  (try while ((let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < pivot) do
    try
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j - 1);
  (try while (pivot < (let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) do
    try
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  if (!i >= !j) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  let temp = (let __l = !arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = !i then (let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !j then temp else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and int_log2 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let v = ref (n) in
  let r = ref (0) in
  (try while (!v > 1) do
    try
  v := (!v / 2);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and intro_sort arr start end_ size_threshold max_depth =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let size_threshold = (Obj.magic size_threshold : int) in
  let max_depth = (Obj.magic max_depth : int) in
  let array = ref (arr) in
  let s = ref (start) in
  let e = ref (end_) in
  let depth = ref (max_depth) in
  (try while ((!e - !s) > size_threshold) do
    try
  if (!depth = 0) then (
  __ret := (Obj.magic (heap_sort (!array)) : int list); raise Return
  );
  depth := (!depth - 1);
  let pivot = median_of_3 (!array) (Obj.repr (!s)) (Obj.repr (((!s + ((!e - !s) / 2)) + 1))) (Obj.repr ((!e - 1))) in
  let p = partition (array) (Obj.repr (!s)) (Obj.repr (!e)) (Obj.repr (pivot)) in
  array := (Obj.magic intro_sort (!array) (Obj.repr (p)) (Obj.repr (!e)) (Obj.repr (size_threshold)) (Obj.repr (!depth)) : int list);
  e := p;
    with Continue -> ()
  done with Break -> ());
  let res = ref (insertion_sort (!array) (Obj.repr (!s)) (Obj.repr (!e))) in
  let _ = List.length (!res) in
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and intro_sort_main arr =
  let __ret = ref (Obj.magic 0) in
  (try
  let arr = (Obj.magic arr : int list) in
  if (List.length (arr) = 0) then (
  print_endline (__show_list arr);
  __ret := (); raise Return
  );
  let max_depth = (2 * int_log2 (Obj.repr (List.length (arr)))) in
  let sorted = ref (intro_sort (arr) (Obj.repr (0)) (Obj.repr (List.length (arr))) (Obj.repr (16)) (Obj.repr (max_depth))) in
  print_endline (__show_list !sorted);
    !__ret
  with Return -> !__ret)


let example1 = ref ([4; 2; 6; 8; 1; 7; 8; 22; 14; 56; 27; 79; 23; 45; 14; 12])
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (intro_sort_main (!example1));
  let example2 = ref ([21; 15; 11; 45; -(2); -(11); 46]) in
  ignore (intro_sort_main (!example2));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
