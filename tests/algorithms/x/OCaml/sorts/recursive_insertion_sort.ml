(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec insert_next collection index =
  let __ret = ref ([] : (int) list) in
  (try
  let collection = (Obj.magic collection : int list) in
  let index = (Obj.magic index : int) in
  let arr = ref (collection) in
  if ((index >= List.length (!arr)) || ((let __l = !arr in let __i = (index - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <= (let __l = !arr in let __i = index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  __ret := (Obj.magic (!arr) : int list); raise Return
  );
  let j = ref ((index - 1)) in
  let temp = (let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  arr := (List.mapi (fun __i __x -> if __i = !j then (let __l = !arr in let __i = index in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = index then temp else __x) (!arr));
  __ret := (Obj.magic (insert_next (!arr) (Obj.repr ((index + 1)))) : int list); raise Return
  with Return -> !__ret)

and rec_insertion_sort collection n =
  let __ret = ref ([] : (int) list) in
  (try
  let collection = (Obj.magic collection : int list) in
  let n = (Obj.magic n : int) in
  let arr = ref (collection) in
  if ((List.length (!arr) <= 1) || (n <= 1)) then (
  __ret := (Obj.magic (!arr) : int list); raise Return
  );
  arr := (Obj.magic insert_next (!arr) (Obj.repr ((n - 1))) : int list);
  __ret := (Obj.magic (rec_insertion_sort (!arr) (Obj.repr ((n - 1)))) : int list); raise Return
  with Return -> !__ret)

and test_rec_insertion_sort () =
  let __ret = ref (Obj.magic 0) in
  (try
  let col1 = ref ([1; 2; 1]) in
  col1 := (Obj.magic rec_insertion_sort (!col1) (Obj.repr (List.length (!col1))) : int list);
  if ((((let __l = !col1 in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 1) || ((let __l = !col1 in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 1)) || ((let __l = !col1 in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 2)) then (
  (failwith ("test1 failed"));
  );
  let col2 = ref ([2; 1; 0; -(1); -(2)]) in
  col2 := (Obj.magic rec_insertion_sort (!col2) (Obj.repr (List.length (!col2))) : int list);
  if ((let __l = !col2 in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (0 - 2)) then (
  (failwith ("test2 failed"));
  );
  if ((let __l = !col2 in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (0 - 1)) then (
  (failwith ("test2 failed"));
  );
  if ((let __l = !col2 in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 0) then (
  (failwith ("test2 failed"));
  );
  if ((let __l = !col2 in let __i = 3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 1) then (
  (failwith ("test2 failed"));
  );
  if ((let __l = !col2 in let __i = 4 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 2) then (
  (failwith ("test2 failed"));
  );
  let col3 = ref ([1]) in
  col3 := (Obj.magic rec_insertion_sort (!col3) (Obj.repr (List.length (!col3))) : int list);
  if ((let __l = !col3 in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 1) then (
  (failwith ("test3 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_rec_insertion_sort ());
  let numbers = ref ([5; 3; 4; 1; 2]) in
  numbers := (Obj.magic rec_insertion_sort (!numbers) (Obj.repr (List.length (!numbers))) : int list);
  print_endline ((__str (!numbers)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
