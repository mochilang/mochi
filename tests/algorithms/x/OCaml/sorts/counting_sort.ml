(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec max_val arr =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let m = ref ((let __l = arr in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let i = ref (1) in
  (try while (!i < List.length (arr)) do
    try
  if ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > !m) then (
  m := (let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and min_val arr =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let m = ref ((let __l = arr in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let i = ref (1) in
  (try while (!i < List.length (arr)) do
    try
  if ((let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < !m) then (
  m := (let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and counting_sort collection =
  let __ret = ref ([] : (int) list) in
  (try
  let collection = (Obj.magic collection : int list) in
  if (List.length (collection) = 0) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let coll_len = List.length (collection) in
  let coll_max = max_val (collection) in
  let coll_min = min_val (collection) in
  let counting_arr_length = ((coll_max + 1) - coll_min) in
  let counting_arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < counting_arr_length) do
    try
  counting_arr := (Obj.magic (List.append (!counting_arr) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < coll_len) do
    try
  let number = (let __l = collection in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  counting_arr := (List.mapi (fun __i __x -> if __i = (number - coll_min) then ((let __l = !counting_arr in let __i = (number - coll_min) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + 1) else __x) (!counting_arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 1;
  (try while (!i < counting_arr_length) do
    try
  counting_arr := (List.mapi (fun __i __x -> if __i = !i then ((let __l = !counting_arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + (let __l = !counting_arr in let __i = (!i - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!counting_arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let ordered = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < coll_len) do
    try
  ordered := (Obj.magic (List.append (!ordered) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = ref ((coll_len - 1)) in
  (try while (!idx >= 0) do
    try
  let number = (let __l = collection in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let pos = ((let __l = !counting_arr in let __i = (number - coll_min) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - 1) in
  ordered := (List.mapi (fun __i __x -> if __i = pos then number else __x) (!ordered));
  counting_arr := (List.mapi (fun __i __x -> if __i = (number - coll_min) then ((let __l = !counting_arr in let __i = (number - coll_min) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - 1) else __x) (!counting_arr));
  idx := (!idx - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ordered) : int list); raise Return
  with Return -> !__ret)


let ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
let rec chr code =
  let __ret = ref "" in
  (try
  let code = (Obj.magic code : int) in
  if (code = 10) then (
  __ret := (Obj.magic ("\n") : string); raise Return
  );
  if (code = 13) then (
  __ret := (Obj.magic ("\r") : string); raise Return
  );
  if (code = 9) then (
  __ret := (Obj.magic ("\t") : string); raise Return
  );
  if ((code >= 32) && (code < 127)) then (
  __ret := (Obj.magic ((let __s = ascii_chars in let __st = (code - 32) in let __len = ((code - 31) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string); raise Return
  );
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and ord ch =
  let __ret = ref 0 in
  (try
  if (ch = "\n") then (
  __ret := (Obj.magic (10) : int); raise Return
  );
  if (ch = "\r") then (
  __ret := (Obj.magic (13) : int); raise Return
  );
  if (ch = "\t") then (
  __ret := (Obj.magic (9) : int); raise Return
  );
  let i = ref (0) in
  (try while (!i < String.length (ascii_chars)) do
    try
  if ((let __s = ascii_chars in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = ch) then (
  __ret := (Obj.magic ((32 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and counting_sort_string s =
  let __ret = ref "" in
  (try
  let codes = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  codes := (Obj.magic (List.append (!codes) [(Obj.magic (ord ((let __s = s in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sorted_codes = ref (counting_sort (!codes)) in
  let res = ref ("") in
  i := 0;
  (try while (!i < List.length (!sorted_codes)) do
    try
  res := (!res ^ chr (Obj.repr ((let __l = !sorted_codes in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let example1 = ref (counting_sort ([0; 5; 3; 2; 2]))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!example1)));
  let example2 = ref (counting_sort ((Obj.magic [] : int list))) in
  print_endline ((__str (!example2)));
  let example3 = ref (counting_sort ([-(2); -(5); -(45)])) in
  print_endline ((__str (!example3)));
  print_endline ((counting_sort_string ("thisisthestring")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
