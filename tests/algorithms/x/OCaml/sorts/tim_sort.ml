(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec copy_list xs =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let res = ref (([] : (int) list)) in
  let k = ref (0) in
  (try while (!k < List.length (xs)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and insertion_sort xs =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let arr = ref (copy_list (xs)) in
  let idx = ref (1) in
  (try while (!idx < List.length (!arr)) do
    try
  let value = (let __l = !arr in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let jdx = ref ((!idx - 1)) in
  (try while ((!jdx >= 0) && ((let __l = !arr in let __i = !jdx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > value)) do
    try
  arr := (List.mapi (fun __i __x -> if __i = (!jdx + 1) then (let __l = !arr in let __i = !jdx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  jdx := (!jdx - 1);
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!jdx + 1) then value else __x) (!arr));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and merge left right =
  let __ret = ref ([] : (int) list) in
  (try
  let left = (Obj.magic left : int list) in
  let right = (Obj.magic right : int list) in
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  let j = ref (0) in
  (try while ((!i < List.length (left)) && (!j < List.length (right))) do
    try
  if ((let __l = left in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = right in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = left in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
  ) else (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = right in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
  );
    with Continue -> ()
  done with Break -> ());
  (try while (!i < List.length (left)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = left in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!j < List.length (right)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = right in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and tim_sort xs =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let n = List.length (xs) in
  let runs = ref (([] : (int list) list)) in
  let sorted_runs = ref (([] : (int list) list)) in
  let current = ref (([] : (int) list)) in
  current := (Obj.magic (List.append (!current) [(Obj.magic ((let __l = xs in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  let i = ref (1) in
  (try while (!i < n) do
    try
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = xs in let __i = (!i - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  runs := (Obj.magic (List.append (!runs) [(Obj.magic (copy_list (!current)) : int list)]) : int list list);
  current := [];
  current := (Obj.magic (List.append (!current) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  ) else (
  current := (Obj.magic (List.append (!current) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  runs := (Obj.magic (List.append (!runs) [(Obj.magic (copy_list (!current)) : int list)]) : int list list);
  let r = ref (0) in
  (try while (!r < List.length (!runs)) do
    try
  sorted_runs := (Obj.magic (List.append (!sorted_runs) [(Obj.magic (insertion_sort ((let __l = !runs in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int list)]) : int list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (int) list)) in
  r := 0;
  (try while (!r < List.length (!sorted_runs)) do
    try
  result := (Obj.magic merge (!result) ((let __l = !sorted_runs in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and list_to_string xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : int list) in
  let s = ref ("[") in
  let k = ref (0) in
  (try while (!k < List.length (xs)) do
    try
  s := (!s ^ (string_of_int ((let __l = xs in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!k < (List.length (xs) - 1)) then (
  s := (!s ^ ", ");
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!s ^ "]")) : string); raise Return
  with Return -> !__ret)


let sample = ref ([5; 9; 10; 3; -(4); 5; 178; 92; 46; -(18); 0; 7])
let sorted_sample = ref (tim_sort (!sample))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((list_to_string (!sorted_sample)));
  let sample2 = ref ([3; 2; 1]) in
  let sorted_sample2 = ref (tim_sort (!sample2)) in
  print_endline ((list_to_string (!sorted_sample2)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
