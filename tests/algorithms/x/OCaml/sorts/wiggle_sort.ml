(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec swap xs i j =
  let __ret = ref ([] : (float) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let res = ref (([] : (float) list)) in
  let k = ref (0) in
  (try while (!k < List.length (xs)) do
    try
  if (!k = i) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  ) else (
  if (!k = j) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  );
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and wiggle_sort nums =
  let __ret = ref ([] : (float) list) in
  (try
  let nums = (Obj.magic nums : float list) in
  let i = ref (0) in
  let res = ref (nums) in
  (try while (!i < List.length (!res)) do
    try
  let j = if (!i = 0) then (List.length (!res) - 1) else (!i - 1) in
  let prev = (let __l = !res in let __i = j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let curr = (let __l = !res in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((((!i mod 2 + 2) mod 2) = 1) = (prev > curr)) then (
  res := (Obj.magic swap (!res) (Obj.repr (j)) (Obj.repr (!i)) : float list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (wiggle_sort ([3.0; 5.0; 2.0; 1.0; 6.0; 4.0]))));
  print_endline ((__str (wiggle_sort ([0.0; 5.0; 3.0; 2.0; 2.0]))));
  print_endline ((__str (wiggle_sort ((Obj.magic [] : float list)))));
  print_endline ((__str (wiggle_sort ([(-.(2.0)); (-.(5.0)); (-.(45.0))]))));
  print_endline ((__str (wiggle_sort ([(-.(2.1)); (-.(5.68)); (-.(45.11))]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
