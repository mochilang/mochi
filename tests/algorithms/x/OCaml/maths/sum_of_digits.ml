(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs_int n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  __ret := (Obj.magic (-(n)) : int); raise Return
  );
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

and sum_of_digits n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let m = ref (abs_int (Obj.repr (n))) in
  let res = ref (0) in
  (try while (!m > 0) do
    try
  res := (!res + ((!m mod 10 + 10) mod 10));
  m := (!m / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and sum_of_digits_recursion n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let m = abs_int (Obj.repr (n)) in
  if (m < 10) then (
  __ret := (Obj.magic (m) : int); raise Return
  );
  __ret := (Obj.magic ((((m mod 10 + 10) mod 10) + sum_of_digits_recursion (Obj.repr ((m / 10))))) : int); raise Return
  with Return -> !__ret)

and sum_of_digits_compact n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let s = (string_of_int (Obj.magic (abs_int (Obj.repr (n))) : int)) in
  let res = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  res := (!res + int_of_string ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and test_sum_of_digits () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (sum_of_digits (Obj.repr (12345)) <> 15) then (
  (failwith ("sum_of_digits 12345 failed"));
  );
  if (sum_of_digits (Obj.repr (123)) <> 6) then (
  (failwith ("sum_of_digits 123 failed"));
  );
  if (sum_of_digits (Obj.repr (-(123))) <> 6) then (
  (failwith ("sum_of_digits -123 failed"));
  );
  if (sum_of_digits (Obj.repr (0)) <> 0) then (
  (failwith ("sum_of_digits 0 failed"));
  );
  if (sum_of_digits_recursion (Obj.repr (12345)) <> 15) then (
  (failwith ("recursion 12345 failed"));
  );
  if (sum_of_digits_recursion (Obj.repr (123)) <> 6) then (
  (failwith ("recursion 123 failed"));
  );
  if (sum_of_digits_recursion (Obj.repr (-(123))) <> 6) then (
  (failwith ("recursion -123 failed"));
  );
  if (sum_of_digits_recursion (Obj.repr (0)) <> 0) then (
  (failwith ("recursion 0 failed"));
  );
  if (sum_of_digits_compact (Obj.repr (12345)) <> 15) then (
  (failwith ("compact 12345 failed"));
  );
  if (sum_of_digits_compact (Obj.repr (123)) <> 6) then (
  (failwith ("compact 123 failed"));
  );
  if (sum_of_digits_compact (Obj.repr (-(123))) <> 6) then (
  (failwith ("compact -123 failed"));
  );
  if (sum_of_digits_compact (Obj.repr (0)) <> 0) then (
  (failwith ("compact 0 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_sum_of_digits ());
  print_endline ((string_of_int (Obj.magic (sum_of_digits (Obj.repr (12345))) : int)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
