(* Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and sqrt x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  (failwith ("sqrt domain error"));
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  (failwith ("ln domain error"));
  );
  let y = ((x -. 1.0) /. (x +. 1.0)) in
  let y2 = (y *. y) in
  let term = ref (y) in
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < 10) do
    try
  let denom = float_of_int (((2 * !k) + 1)) in
  sum := (!sum +. (!term /. denom));
  term := (!term *. y2);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((2.0 *. !sum)) : float); raise Return
  with Return -> !__ret)

and exp_series x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 20) do
    try
  term := ((!term *. x) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and powf base exponent =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exponent = (Obj.magic exponent : float) in
  if (base <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (exp_series (Obj.repr ((exponent *. ln (Obj.repr (base)))))) : float); raise Return
  with Return -> !__ret)

and integrand x z =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let z = (Obj.magic z : float) in
  __ret := (Obj.magic ((powf (Obj.repr (x)) (Obj.repr ((z -. 1.0))) *. exp_series (Obj.repr ((-.(x)))))) : float); raise Return
  with Return -> !__ret)

and gamma_iterative num =
  let __ret = ref 0.0 in
  (try
  let num = (Obj.magic num : float) in
  if (num <= 0.0) then (
  (failwith ("math domain error"));
  );
  let step = 0.001 in
  let limit = 100.0 in
  let x = ref (step) in
  let total = ref (0.0) in
  (try while (!x < limit) do
    try
  total := (!total +. (integrand (Obj.repr (!x)) (Obj.repr (num)) *. step));
  x := (!x +. step);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and gamma_recursive num =
  let __ret = ref 0.0 in
  (try
  let num = (Obj.magic num : float) in
  if (num <= 0.0) then (
  (failwith ("math domain error"));
  );
  if (num > 171.5) then (
  (failwith ("math range error"));
  );
  let int_part = int_of_float (num) in
  let frac = (num -. float_of_int (int_part)) in
  if not (((absf (Obj.repr (frac)) < 0.000001) || (absf (Obj.repr ((frac -. 0.5))) < 0.000001))) then (
  (failwith ("num must be an integer or a half-integer"));
  );
  if (absf (Obj.repr ((num -. 0.5))) < 0.000001) then (
  __ret := (Obj.magic (sqrt (Obj.repr (_pi))) : float); raise Return
  );
  if (absf (Obj.repr ((num -. 1.0))) < 0.000001) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  __ret := (Obj.magic (((num -. 1.0) *. gamma_recursive (Obj.repr ((num -. 1.0))))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (string_of_float (gamma_iterative (Obj.repr (5.0))));
  print_endline (string_of_float (gamma_recursive (Obj.repr (5.0))));
  print_endline (string_of_float (gamma_recursive (Obj.repr (0.5))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
