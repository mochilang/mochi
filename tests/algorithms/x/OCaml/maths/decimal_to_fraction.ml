(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow10 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result * 10);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  if (!x < 0) then (
  x := -(!x);
  );
  if (!y < 0) then (
  y := -(!y);
  );
  (try while (!y <> 0) do
    try
  let r = ((!x mod !y + !y) mod !y) in
  x := !y;
  y := r;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and parse_decimal s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if (String.length (s) = 0) then (
  (failwith ("invalid number"));
  );
  let idx = ref (0) in
  let sign = ref (1) in
  let first = (let __s = s in let __st = 0 in let __en = 1 in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (first = "-") then (
  sign := -(1);
  idx := 1;
  ) else (
  if (first = "+") then (
  idx := 1;
  );
  );
  let int_part = ref ("") in
  (try while (!idx < String.length (s)) do
    try
  let c = (let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if ((c >= "0") && (c <= "9")) then (
  int_part := (!int_part ^ c);
  idx := (!idx + 1);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  let frac_part = ref ("") in
  if ((!idx < String.length (s)) && ((let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = ".")) then (
  idx := (!idx + 1);
  (try while (!idx < String.length (s)) do
    try
  let c = (let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if ((c >= "0") && (c <= "9")) then (
  frac_part := (!frac_part ^ c);
  idx := (!idx + 1);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  );
  let exp = ref (0) in
  if ((!idx < String.length (s)) && (((let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = "e") || ((let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = "E"))) then (
  idx := (!idx + 1);
  let exp_sign = ref (1) in
  if ((!idx < String.length (s)) && ((let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = "-")) then (
  exp_sign := -(1);
  idx := (!idx + 1);
  ) else (
  if ((!idx < String.length (s)) && ((let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = "+")) then (
  idx := (!idx + 1);
  );
  );
  let exp_str = ref ("") in
  (try while (!idx < String.length (s)) do
    try
  let c = (let __s = s in let __st = !idx in let __en = (!idx + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if ((c >= "0") && (c <= "9")) then (
  exp_str := (!exp_str ^ c);
  idx := (!idx + 1);
  ) else (
  (failwith ("invalid number"));
  );
    with Continue -> ()
  done with Break -> ());
  if (String.length (!exp_str) = 0) then (
  (failwith ("invalid number"));
  );
  exp := (!exp_sign * int_of_string (!exp_str));
  );
  if (!idx <> String.length (s)) then (
  (failwith ("invalid number"));
  );
  if (String.length (!int_part) = 0) then (
  int_part := "0";
  );
  let num_str = ref ((!int_part ^ !frac_part)) in
  let numerator = ref (int_of_string (!num_str)) in
  if (!sign = (0 - 1)) then (
  numerator := (0 - !numerator);
  );
  let denominator = ref (pow10 (Obj.repr (String.length (!frac_part)))) in
  if (!exp > 0) then (
  numerator := (!numerator * pow10 (Obj.repr (!exp)));
  ) else (
  if (!exp < 0) then (
  denominator := (!denominator * pow10 (Obj.repr (-(!exp))));
  );
  );
  __ret := (Obj.magic ([(__str ("numerator"), Obj.repr (!numerator)); (__str ("denominator"), Obj.repr (!denominator))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and reduce fr =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let fr = (Obj.magic fr : (string * Obj.t) list) in
  let g = gcd (Obj.repr ((match List.assoc_opt (__str ("numerator")) (fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) (Obj.repr ((match List.assoc_opt (__str ("denominator")) (fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) in
  __ret := (Obj.magic ([(__str ("numerator"), Obj.repr (((match List.assoc_opt (__str ("numerator")) (fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) / g))); (__str ("denominator"), Obj.repr (((match List.assoc_opt (__str ("denominator")) (fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) / g)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and decimal_to_fraction_str s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (reduce (parse_decimal (s))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and decimal_to_fraction x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic (decimal_to_fraction_str ((Printf.sprintf "%.16g" (Obj.magic (x) : float)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and assert_fraction name fr num den =
  let __ret = ref (Obj.magic 0) in
  (try
  let fr = (Obj.magic fr : (string * Obj.t) list) in
  let num = (Obj.magic num : int) in
  let den = (Obj.magic den : int) in
  if (((match List.assoc_opt (__str ("numerator")) (fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> num) || ((match List.assoc_opt (__str ("denominator")) (fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> den)) then (
  (failwith (name));
  );
    !__ret
  with Return -> !__ret)

and test_decimal_to_fraction () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (assert_fraction ("case1") (decimal_to_fraction (Obj.repr (2.0))) (Obj.repr (2)) (Obj.repr (1)));
  ignore (assert_fraction ("case2") (decimal_to_fraction (Obj.repr (89.0))) (Obj.repr (89)) (Obj.repr (1)));
  ignore (assert_fraction ("case3") (decimal_to_fraction_str ("67")) (Obj.repr (67)) (Obj.repr (1)));
  ignore (assert_fraction ("case4") (decimal_to_fraction_str ("45.0")) (Obj.repr (45)) (Obj.repr (1)));
  ignore (assert_fraction ("case5") (decimal_to_fraction (Obj.repr (1.5))) (Obj.repr (3)) (Obj.repr (2)));
  ignore (assert_fraction ("case6") (decimal_to_fraction_str ("6.25")) (Obj.repr (25)) (Obj.repr (4)));
  ignore (assert_fraction ("case7") (decimal_to_fraction (Obj.repr (0.0))) (Obj.repr (0)) (Obj.repr (1)));
  ignore (assert_fraction ("case8") (decimal_to_fraction (Obj.repr ((-.(2.5))))) (Obj.repr (-(5))) (Obj.repr (2)));
  ignore (assert_fraction ("case9") (decimal_to_fraction (Obj.repr (0.125))) (Obj.repr (1)) (Obj.repr (8)));
  ignore (assert_fraction ("case10") (decimal_to_fraction (Obj.repr (1000000.25))) (Obj.repr (4000001)) (Obj.repr (4)));
  ignore (assert_fraction ("case11") (decimal_to_fraction (Obj.repr (1.3333))) (Obj.repr (13333)) (Obj.repr (10000)));
  ignore (assert_fraction ("case12") (decimal_to_fraction_str ("1.23e2")) (Obj.repr (123)) (Obj.repr (1)));
  ignore (assert_fraction ("case13") (decimal_to_fraction_str ("0.500")) (Obj.repr (1)) (Obj.repr (2)));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_decimal_to_fraction ());
  let fr = ref (decimal_to_fraction (Obj.repr (1.5))) in
  print_endline ((((string_of_int (Obj.magic ((match List.assoc_opt (__str ("numerator")) (!fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int)) ^ "/") ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str ("denominator")) (!fr) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
