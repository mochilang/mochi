(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let t = ((x -. 1.0) /. (x +. 1.0)) in
  let term = ref (t) in
  let sum = ref (0.0) in
  let k = ref (1) in
  (try while (!k <= 99) do
    try
  sum := (!sum +. (!term /. float_of_int (!k)));
  term := ((!term *. t) *. t);
  k := (!k + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((2.0 *. !sum)) : float); raise Return
  with Return -> !__ret)

and log10 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((ln (Obj.repr (x)) /. ln (Obj.repr (10.0)))) : float); raise Return
  with Return -> !__ret)

and absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and res x y =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  if (x = 0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if (y = 0) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  if (x < 0) then (
  (failwith ("math domain error"));
  );
  __ret := (Obj.magic ((float_of_int (y) *. log10 (Obj.repr (float_of_int (x))))) : float); raise Return
  with Return -> !__ret)

and test_res () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (absf (Obj.repr ((res (Obj.repr (5)) (Obj.repr (7)) -. 4.892790030352132))) > 0.0000001) then (
  (failwith ("res(5,7) failed"));
  );
  if (res (Obj.repr (0)) (Obj.repr (5)) <> 0.0) then (
  (failwith ("res(0,5) failed"));
  );
  if (res (Obj.repr (3)) (Obj.repr (0)) <> 1.0) then (
  (failwith ("res(3,0) failed"));
  );
    !__ret
  with Return -> !__ret)

and compare x1 y1 x2 y2 =
  let __ret = ref "" in
  (try
  let x1 = (Obj.magic x1 : int) in
  let y1 = (Obj.magic y1 : int) in
  let x2 = (Obj.magic x2 : int) in
  let y2 = (Obj.magic y2 : int) in
  let r1 = res (Obj.repr (x1)) (Obj.repr (y1)) in
  let r2 = res (Obj.repr (x2)) (Obj.repr (y2)) in
  if (r1 > r2) then (
  __ret := (Obj.magic (((("Largest number is " ^ (string_of_int (x1))) ^ " ^ ") ^ (string_of_int (y1)))) : string); raise Return
  );
  if (r2 > r1) then (
  __ret := (Obj.magic (((("Largest number is " ^ (string_of_int (x2))) ^ " ^ ") ^ (string_of_int (y2)))) : string); raise Return
  );
  __ret := (Obj.magic ("Both are equal") : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (test_res ());
  print_endline ((compare (Obj.repr (5)) (Obj.repr (7)) (Obj.repr (4)) (Obj.repr (8))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
