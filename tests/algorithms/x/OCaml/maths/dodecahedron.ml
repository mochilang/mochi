(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and abs_val num =
  let __ret = ref 0.0 in
  (try
  let num = (Obj.magic num : float) in
  if (num < 0.0) then (
  __ret := (Obj.magic ((-.(num))) : float); raise Return
  );
  __ret := (Obj.magic (num) : float); raise Return
  with Return -> !__ret)

and approx_equal a b eps =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let eps = (Obj.magic eps : float) in
  __ret := (Obj.magic ((abs_val (Obj.repr ((a -. b))) < eps)) : bool); raise Return
  with Return -> !__ret)

and dodecahedron_surface_area edge =
  let __ret = ref 0.0 in
  (try
  let edge = (Obj.magic edge : int) in
  if (edge <= 0) then (
  (failwith ("Length must be a positive."));
  );
  let term = sqrtApprox (Obj.repr ((25.0 +. (10.0 *. sqrtApprox (Obj.repr (5.0)))))) in
  let e = float_of_int (edge) in
  __ret := (Obj.magic ((((3.0 *. term) *. e) *. e)) : float); raise Return
  with Return -> !__ret)

and dodecahedron_volume edge =
  let __ret = ref 0.0 in
  (try
  let edge = (Obj.magic edge : int) in
  if (edge <= 0) then (
  (failwith ("Length must be a positive."));
  );
  let term = ((15.0 +. (7.0 *. sqrtApprox (Obj.repr (5.0)))) /. 4.0) in
  let e = float_of_int (edge) in
  __ret := (Obj.magic ((((term *. e) *. e) *. e)) : float); raise Return
  with Return -> !__ret)

and test_dodecahedron () =
  let __ret = ref (Obj.magic 0) in
  (try
  if not (approx_equal (Obj.repr (dodecahedron_surface_area (Obj.repr (5)))) (Obj.repr (516.1432201766901)) (Obj.repr (0.0001))) then (
  (failwith ("surface area 5 failed"));
  );
  if not (approx_equal (Obj.repr (dodecahedron_surface_area (Obj.repr (10)))) (Obj.repr (2064.5728807067603)) (Obj.repr (0.0001))) then (
  (failwith ("surface area 10 failed"));
  );
  if not (approx_equal (Obj.repr (dodecahedron_volume (Obj.repr (5)))) (Obj.repr (957.8898700780791)) (Obj.repr (0.0001))) then (
  (failwith ("volume 5 failed"));
  );
  if not (approx_equal (Obj.repr (dodecahedron_volume (Obj.repr (10)))) (Obj.repr (7663.118960624633)) (Obj.repr (0.0001))) then (
  (failwith ("volume 10 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_dodecahedron ());
  print_endline (string_of_float (dodecahedron_surface_area (Obj.repr (5))));
  print_endline (string_of_float (dodecahedron_volume (Obj.repr (5))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
