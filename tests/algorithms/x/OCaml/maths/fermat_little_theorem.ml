(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binary_exponentiation a n mod_ =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let n = (Obj.magic n : int) in
  let mod_ = (Obj.magic mod_ : int) in
  if (n = 0) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (((n mod 2 + 2) mod 2) = 1) then (
  __ret := (Obj.magic ((((binary_exponentiation (Obj.repr (a)) (Obj.repr ((n - 1))) (Obj.repr (mod_)) * a) mod mod_ + mod_) mod mod_)) : int); raise Return
  );
  let b = binary_exponentiation (Obj.repr (a)) (Obj.repr ((n / 2))) (Obj.repr (mod_)) in
  __ret := (Obj.magic ((((b * b) mod mod_ + mod_) mod mod_)) : int); raise Return
  with Return -> !__ret)

and naive_exponent_mod a n mod_ =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let n = (Obj.magic n : int) in
  let mod_ = (Obj.magic mod_ : int) in
  let result = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (((!result * a) mod mod_ + mod_) mod mod_);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and print_bool b =
  let __ret = ref (Obj.magic 0) in
  (try
  if b then (
  print_endline (string_of_bool true);
  ) else (
  print_endline (string_of_bool false);
  );
    !__ret
  with Return -> !__ret)


let p = 701
let a = 1000000000
let b = 10
let left = (((a / b) mod p + p) mod p)
let right_fast = (((a * binary_exponentiation (Obj.repr (b)) (Obj.repr ((p - 2))) (Obj.repr (p))) mod p + p) mod p)
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_bool ((left = right_fast)));
  let right_naive = (((a * naive_exponent_mod (Obj.repr (b)) (Obj.repr ((p - 2))) (Obj.repr (p))) mod p + p) mod p) in
  ignore (print_bool ((left = right_naive)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
