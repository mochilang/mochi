(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs_int x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic (-(x)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

and gcd_iter a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (abs_int (Obj.repr (a))) in
  let y = ref (abs_int (Obj.repr (b))) in
  (try while (!y <> 0) do
    try
  let t = !y in
  y := ((!x mod !y + !y) mod !y);
  x := t;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and is_prime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n <= 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let d = ref (2) in
  (try while ((!d * !d) <= n) do
    try
  if (((n mod !d + !d) mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and sieve_er n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let nums = ref (([] : (int) list)) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  nums := (Obj.magic (List.append (!nums) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = ref (0) in
  (try while (!idx < List.length (!nums)) do
    try
  let j = ref ((!idx + 1)) in
  (try while (!j < List.length (!nums)) do
    try
  if ((let __l = !nums in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 0) then (
  if ((((let __l = !nums in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) mod (let __l = !nums in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + (let __l = !nums in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) mod (let __l = !nums in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) = 0) then (
  nums := (List.mapi (fun __i __x -> if __i = !j then 0 else __x) (!nums));
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref (([] : (int) list)) in
  let k = ref (0) in
  (try while (!k < List.length (!nums)) do
    try
  let v = (let __l = !nums in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (v <> 0) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (v) : int)]) : int list);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and get_prime_numbers n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let ans = ref (([] : (int) list)) in
  let num = ref (2) in
  (try while (!num <= n) do
    try
  if is_prime (Obj.repr (!num)) then (
  ans := (Obj.magic (List.append (!ans) [(Obj.magic (!num) : int)]) : int list);
  );
  num := (!num + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int list); raise Return
  with Return -> !__ret)

and prime_factorization number =
  let __ret = ref ([] : (int) list) in
  (try
  let number = (Obj.magic number : int) in
  if (number = 0) then (
  __ret := (Obj.magic ([0]) : int list); raise Return
  );
  if (number = 1) then (
  __ret := (Obj.magic ([1]) : int list); raise Return
  );
  let ans = ref (([] : (int) list)) in
  if is_prime (Obj.repr (number)) then (
  ans := (Obj.magic (List.append (!ans) [(Obj.magic (number) : int)]) : int list);
  __ret := (Obj.magic (!ans) : int list); raise Return
  );
  let quotient = ref (number) in
  let factor = ref (2) in
  (try while (!quotient <> 1) do
    try
  if (is_prime (Obj.repr (!factor)) && (((!quotient mod !factor + !factor) mod !factor) = 0)) then (
  ans := (Obj.magic (List.append (!ans) [(Obj.magic (!factor) : int)]) : int list);
  quotient := (!quotient / !factor);
  ) else (
  factor := (!factor + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int list); raise Return
  with Return -> !__ret)

and greatest_prime_factor number =
  let __ret = ref 0 in
  (try
  let number = (Obj.magic number : int) in
  let factors = ref (prime_factorization (Obj.repr (number))) in
  let m = ref ((let __l = !factors in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let i = ref (1) in
  (try while (!i < List.length (!factors)) do
    try
  if ((let __l = !factors in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > !m) then (
  m := (let __l = !factors in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and smallest_prime_factor number =
  let __ret = ref 0 in
  (try
  let number = (Obj.magic number : int) in
  let factors = ref (prime_factorization (Obj.repr (number))) in
  let m = ref ((let __l = !factors in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let i = ref (1) in
  (try while (!i < List.length (!factors)) do
    try
  if ((let __l = !factors in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < !m) then (
  m := (let __l = !factors in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and kg_v number1 number2 =
  let __ret = ref 0 in
  (try
  let number1 = (Obj.magic number1 : int) in
  let number2 = (Obj.magic number2 : int) in
  if ((number1 < 1) || (number2 < 1)) then (
  (failwith ("numbers must be positive"));
  );
  let g = gcd_iter (Obj.repr (number1)) (Obj.repr (number2)) in
  __ret := (Obj.magic (((number1 / g) * number2)) : int); raise Return
  with Return -> !__ret)

and is_even number =
  let __ret = ref false in
  (try
  let number = (Obj.magic number : int) in
  __ret := (Obj.magic ((((number mod 2 + 2) mod 2) = 0)) : bool); raise Return
  with Return -> !__ret)

and is_odd number =
  let __ret = ref false in
  (try
  let number = (Obj.magic number : int) in
  __ret := (Obj.magic ((((number mod 2 + 2) mod 2) <> 0)) : bool); raise Return
  with Return -> !__ret)

and goldbach number =
  let __ret = ref ([] : (int) list) in
  (try
  let number = (Obj.magic number : int) in
  if (not (is_even (Obj.repr (number))) || (number <= 2)) then (
  (failwith ("number must be even and > 2"));
  );
  let primes = ref (get_prime_numbers (Obj.repr (number))) in
  let i = ref (0) in
  (try while (!i < List.length (!primes)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < List.length (!primes)) do
    try
  if (((let __l = !primes in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + (let __l = !primes in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) = number) then (
  __ret := (Obj.magic ([(let __l = !primes in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)); (let __l = !primes in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))]) : int list); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([]) : int list); raise Return
  with Return -> !__ret)

and get_prime n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n must be non-negative"));
  );
  let index = ref (0) in
  let ans = ref (2) in
  (try while (!index < n) do
    try
  index := (!index + 1);
  ans := (!ans + 1);
  (try while not (is_prime (Obj.repr (!ans))) do
    try
  ans := (!ans + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int); raise Return
  with Return -> !__ret)

and get_primes_between p1 p2 =
  let __ret = ref ([] : (int) list) in
  (try
  let p1 = (Obj.magic p1 : int) in
  let p2 = (Obj.magic p2 : int) in
  let bad1 = not (is_prime (Obj.repr (p1))) in
  let bad2 = not (is_prime (Obj.repr (p2))) in
  if ((bad1 || bad2) || (p1 >= p2)) then (
  (failwith ("arguments must be prime and p1 < p2"));
  );
  let num = ref ((p1 + 1)) in
  (try while (!num < p2) do
    try
  if is_prime (Obj.repr (!num)) then (
  raise Break;
  );
  num := (!num + 1);
    with Continue -> ()
  done with Break -> ());
  let ans = ref (([] : (int) list)) in
  (try while (!num < p2) do
    try
  ans := (Obj.magic (List.append (!ans) [(Obj.magic (!num) : int)]) : int list);
  num := (!num + 1);
  (try while (!num < p2) do
    try
  if is_prime (Obj.repr (!num)) then (
  raise Break;
  );
  num := (!num + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int list); raise Return
  with Return -> !__ret)

and get_divisors n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 1) then (
  (failwith ("n must be >= 1"));
  );
  let ans = ref (([] : (int) list)) in
  let d = ref (1) in
  (try while (!d <= n) do
    try
  if (((n mod !d + !d) mod !d) = 0) then (
  ans := (Obj.magic (List.append (!ans) [(Obj.magic (!d) : int)]) : int list);
  );
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int list); raise Return
  with Return -> !__ret)

and is_perfect_number number =
  let __ret = ref false in
  (try
  let number = (Obj.magic number : int) in
  if (number <= 1) then (
  (failwith ("number must be > 1"));
  );
  let divisors = ref (get_divisors (Obj.repr (number))) in
  let sum = ref (0) in
  let i = ref (0) in
  (try while (!i < (List.length (!divisors) - 1)) do
    try
  sum := (!sum + (let __l = !divisors in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum = number)) : bool); raise Return
  with Return -> !__ret)

and simplify_fraction numerator denominator =
  let __ret = ref ([] : (int) list) in
  (try
  let numerator = (Obj.magic numerator : int) in
  let denominator = (Obj.magic denominator : int) in
  if (denominator = 0) then (
  (failwith ("denominator cannot be zero"));
  );
  let g = gcd_iter (Obj.repr (abs_int (Obj.repr (numerator)))) (Obj.repr (abs_int (Obj.repr (denominator)))) in
  __ret := (Obj.magic ([(numerator / g); (denominator / g)]) : int list); raise Return
  with Return -> !__ret)

and factorial n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n must be >= 0"));
  );
  let ans = ref (1) in
  let i = ref (1) in
  (try while (!i <= n) do
    try
  ans := (!ans * !i);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int); raise Return
  with Return -> !__ret)

and fib n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n must be >= 0"));
  );
  if (n <= 1) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  let tmp = ref (0) in
  let fib1 = ref (1) in
  let ans = ref (1) in
  let i = ref (0) in
  (try while (!i < (n - 1)) do
    try
  tmp := !ans;
  ans := (!ans + !fib1);
  fib1 := !tmp;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_bool (is_prime (Obj.repr (97)))));
  print_endline ((__str (sieve_er (Obj.repr (20)))));
  print_endline ((__str (get_prime_numbers (Obj.repr (20)))));
  print_endline ((__str (prime_factorization (Obj.repr (287)))));
  print_endline ((string_of_int (greatest_prime_factor (Obj.repr (287)))));
  print_endline ((string_of_int (smallest_prime_factor (Obj.repr (287)))));
  print_endline ((string_of_int (kg_v (Obj.repr (8)) (Obj.repr (10)))));
  print_endline ((__str (goldbach (Obj.repr (28)))));
  print_endline ((string_of_int (get_prime (Obj.repr (8)))));
  print_endline ((__str (get_primes_between (Obj.repr (3)) (Obj.repr (20)))));
  print_endline ((__str (get_divisors (Obj.repr (28)))));
  print_endline ((string_of_bool (is_perfect_number (Obj.repr (28)))));
  print_endline ((__str (simplify_fraction (Obj.repr (10)) (Obj.repr (20)))));
  print_endline ((string_of_int (factorial (Obj.repr (5)))));
  print_endline ((string_of_int (fib (Obj.repr (10)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
