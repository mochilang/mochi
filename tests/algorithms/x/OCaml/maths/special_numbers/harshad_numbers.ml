(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec panic msg =
  let __ret = ref (Obj.magic 0) in
  (try
    !__ret
  with Return -> !__ret)

and char_to_value c =
  let __ret = ref 0 in
  (try
  let digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let i = ref (0) in
  (try while (!i < String.length (digits)) do
    try
  if ((let __s = digits in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = c) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (failwith ("invalid digit"));
    !__ret
  with Return -> !__ret)

and int_to_base number base =
  let __ret = ref "" in
  (try
  let number = (Obj.magic number : int) in
  let base = (Obj.magic base : int) in
  if ((base < 2) || (base > 36)) then (
  (failwith ("'base' must be between 2 and 36 inclusive"));
  );
  if (number < 0) then (
  (failwith ("number must be a positive integer"));
  );
  let digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let n = ref (number) in
  let result = ref ("") in
  (try while (!n > 0) do
    try
  let remainder = ((!n mod base + base) mod base) in
  result := ((let __s = digits in let __i = remainder in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) ^ !result);
  n := (!n / base);
    with Continue -> ()
  done with Break -> ());
  if (!result = "") then (
  result := "0";
  );
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and base_to_int num_str base =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let value = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (num_str)) do
    try
  let c = (let __s = num_str in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  value := ((!value * base) + char_to_value (c));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : int); raise Return
  with Return -> !__ret)

and sum_of_digits num base =
  let __ret = ref "" in
  (try
  let num = (Obj.magic num : int) in
  let base = (Obj.magic base : int) in
  if ((base < 2) || (base > 36)) then (
  (failwith ("'base' must be between 2 and 36 inclusive"));
  );
  let num_str = int_to_base (Obj.repr (num)) (Obj.repr (base)) in
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (num_str)) do
    try
  let c = (let __s = num_str in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  total := (!total + char_to_value (c));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (int_to_base (Obj.repr (!total)) (Obj.repr (base))) : string); raise Return
  with Return -> !__ret)

and harshad_numbers_in_base limit base =
  let __ret = ref ([] : (string) list) in
  (try
  let limit = (Obj.magic limit : int) in
  let base = (Obj.magic base : int) in
  if ((base < 2) || (base > 36)) then (
  (failwith ("'base' must be between 2 and 36 inclusive"));
  );
  if (limit < 0) then (
  __ret := (Obj.magic ([]) : string list); raise Return
  );
  let numbers = ref (([] : (string) list)) in
  let i = ref (1) in
  (try while (!i < limit) do
    try
  let s = sum_of_digits (Obj.repr (!i)) (Obj.repr (base)) in
  let divisor = base_to_int (s) (Obj.repr (base)) in
  if (((!i mod divisor + divisor) mod divisor) = 0) then (
  numbers := (Obj.magic ((List.append (!numbers) [(Obj.magic (int_to_base (Obj.repr (!i)) (Obj.repr (base))) : string)])) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!numbers) : string list); raise Return
  with Return -> !__ret)

and is_harshad_number_in_base num base =
  let __ret = ref false in
  (try
  let num = (Obj.magic num : int) in
  let base = (Obj.magic base : int) in
  if ((base < 2) || (base > 36)) then (
  (failwith ("'base' must be between 2 and 36 inclusive"));
  );
  if (num < 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let n = int_to_base (Obj.repr (num)) (Obj.repr (base)) in
  let d = sum_of_digits (Obj.repr (num)) (Obj.repr (base)) in
  let n_val = base_to_int (n) (Obj.repr (base)) in
  let d_val = base_to_int (d) (Obj.repr (base)) in
  __ret := (Obj.magic ((((n_val mod d_val + d_val) mod d_val) = 0)) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((int_to_base (Obj.repr (0)) (Obj.repr (21))));
  print_endline ((int_to_base (Obj.repr (23)) (Obj.repr (2))));
  print_endline ((int_to_base (Obj.repr (58)) (Obj.repr (5))));
  print_endline ((int_to_base (Obj.repr (167)) (Obj.repr (16))));
  print_endline ((sum_of_digits (Obj.repr (103)) (Obj.repr (12))));
  print_endline ((sum_of_digits (Obj.repr (1275)) (Obj.repr (4))));
  print_endline ((sum_of_digits (Obj.repr (6645)) (Obj.repr (2))));
  print_endline (__show_list (harshad_numbers_in_base (Obj.repr (15)) (Obj.repr (2))));
  print_endline (__show_list (harshad_numbers_in_base (Obj.repr (12)) (Obj.repr (34))));
  print_endline (__show_list (harshad_numbers_in_base (Obj.repr (12)) (Obj.repr (4))));
  print_endline (string_of_bool (is_harshad_number_in_base (Obj.repr (18)) (Obj.repr (10))));
  print_endline (string_of_bool (is_harshad_number_in_base (Obj.repr (21)) (Obj.repr (10))));
  print_endline (string_of_bool (is_harshad_number_in_base (Obj.repr (-(21))) (Obj.repr (5))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
