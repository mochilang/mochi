(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec assign_ranks data =
  let __ret = ref ([] : (int) list) in
  (try
  let data = (Obj.magic data : float list) in
  let ranks = ref (([] : (int) list)) in
  let n = List.length (data) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let rank = ref (1) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (((let __l = data in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) < (let __l = data in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) || (((let __l = data in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) = (let __l = data in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) && (!j < !i))) then (
  rank := (!rank + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  ranks := (Obj.magic ((List.append (!ranks) [(Obj.magic (!rank) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ranks) : int list); raise Return
  with Return -> !__ret)

and calculate_spearman_rank_correlation var1 var2 =
  let __ret = ref 0.0 in
  (try
  let var1 = (Obj.magic var1 : float list) in
  let var2 = (Obj.magic var2 : float list) in
  if (List.length (var1) <> List.length (var2)) then (
  (failwith ("Lists must have equal length"));
  );
  let n = List.length (var1) in
  let rank1 = ref (assign_ranks (var1)) in
  let rank2 = ref (assign_ranks (var2)) in
  let i = ref (0) in
  let d_sq = ref (0.0) in
  (try while (!i < n) do
    try
  let diff = float_of_int (((let __l = !rank1 in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) - (let __l = !rank2 in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) in
  d_sq := (!d_sq +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n_f = float_of_int (n) in
  __ret := (Obj.magic ((1.0 -. ((6.0 *. !d_sq) /. (n_f *. ((n_f *. n_f) -. 1.0))))) : float); raise Return
  with Return -> !__ret)

and test_spearman () =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = ref ([1.0; 2.0; 3.0; 4.0; 5.0]) in
  let y_inc = ref ([2.0; 4.0; 6.0; 8.0; 10.0]) in
  if (calculate_spearman_rank_correlation (!x) (!y_inc) <> 1.0) then (
  (failwith ("case1"));
  );
  let y_dec = ref ([5.0; 4.0; 3.0; 2.0; 1.0]) in
  if (calculate_spearman_rank_correlation (!x) (!y_dec) <> (-.(1.0))) then (
  (failwith ("case2"));
  );
  let y_mix = ref ([5.0; 1.0; 2.0; 9.0; 5.0]) in
  if (calculate_spearman_rank_correlation (!x) (!y_mix) <> 0.6) then (
  (failwith ("case3"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_spearman ());
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (calculate_spearman_rank_correlation ([1.0; 2.0; 3.0; 4.0; 5.0]) ([2.0; 4.0; 6.0; 8.0; 10.0])) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (calculate_spearman_rank_correlation ([1.0; 2.0; 3.0; 4.0; 5.0]) ([5.0; 4.0; 3.0; 2.0; 1.0])) : float)));
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (calculate_spearman_rank_correlation ([1.0; 2.0; 3.0; 4.0; 5.0]) ([5.0; 1.0; 2.0; 9.0; 5.0])) : float)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
