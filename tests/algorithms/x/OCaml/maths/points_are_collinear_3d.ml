(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_vector p1 p2 =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let p1 = (Obj.magic p1 : (string * Obj.t) list) in
  let p2 = (Obj.magic p2 : (string * Obj.t) list) in
  let vx = ((Obj.obj (List.assoc (__str ("x")) (p2) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("x")) (p1) : Obj.t) : float)) in
  let vy = ((Obj.obj (List.assoc (__str ("y")) (p2) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("y")) (p1) : Obj.t) : float)) in
  let vz = ((Obj.obj (List.assoc (__str ("z")) (p2) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("z")) (p1) : Obj.t) : float)) in
  __ret := (Obj.magic ([(__str ("x"), Obj.repr (vx)); (__str ("y"), Obj.repr (vy)); (__str ("z"), Obj.repr (vz))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get_3d_vectors_cross ab ac =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let ab = (Obj.magic ab : (string * Obj.t) list) in
  let ac = (Obj.magic ac : (string * Obj.t) list) in
  let cx = (((Obj.obj (List.assoc (__str ("y")) (ab) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("z")) (ac) : Obj.t) : float)) -. ((Obj.obj (List.assoc (__str ("z")) (ab) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("y")) (ac) : Obj.t) : float))) in
  let cy = (((Obj.obj (List.assoc (__str ("z")) (ab) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("x")) (ac) : Obj.t) : float)) -. ((Obj.obj (List.assoc (__str ("x")) (ab) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("z")) (ac) : Obj.t) : float))) in
  let cz = (((Obj.obj (List.assoc (__str ("x")) (ab) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("y")) (ac) : Obj.t) : float)) -. ((Obj.obj (List.assoc (__str ("y")) (ab) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("x")) (ac) : Obj.t) : float))) in
  __ret := (Obj.magic ([(__str ("x"), Obj.repr (cx)); (__str ("y"), Obj.repr (cy)); (__str ("z"), Obj.repr (cz))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and pow10 exp =
  let __ret = ref 0.0 in
  (try
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and round_float x digits =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let digits = (Obj.magic digits : int) in
  let factor = pow10 (Obj.repr (digits)) in
  let v = ref ((x *. factor)) in
  if (!v >= 0.0) then (
  v := (!v +. 0.5);
  ) else (
  v := (!v -. 0.5);
  );
  let t = (Obj.magic !v : int) in
  __ret := (Obj.magic ((float_of_int (t) /. factor)) : float); raise Return
  with Return -> !__ret)

and is_zero_vector v accuracy =
  let __ret = ref false in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  let accuracy = (Obj.magic accuracy : int) in
  __ret := (Obj.magic ((((round_float (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (v) : Obj.t) : float))) (Obj.repr (accuracy)) = 0.0) && (round_float (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (v) : Obj.t) : float))) (Obj.repr (accuracy)) = 0.0)) && (round_float (Obj.repr ((Obj.obj (List.assoc (__str ("z")) (v) : Obj.t) : float))) (Obj.repr (accuracy)) = 0.0))) : bool); raise Return
  with Return -> !__ret)

and are_collinear a b c accuracy =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let c = (Obj.magic c : (string * Obj.t) list) in
  let accuracy = (Obj.magic accuracy : int) in
  let ab = create_vector ((Obj.magic a : (string * Obj.t) list)) ((Obj.magic b : (string * Obj.t) list)) in
  let ac = create_vector ((Obj.magic a : (string * Obj.t) list)) ((Obj.magic c : (string * Obj.t) list)) in
  let cross = get_3d_vectors_cross (ab) (ac) in
  __ret := (Obj.magic (is_zero_vector (cross) (Obj.repr (accuracy))) : bool); raise Return
  with Return -> !__ret)

and test_are_collinear () =
  let __ret = ref (Obj.magic 0) in
  (try
  let p1 = [(__str ("x"), Obj.repr (0.0)); (__str ("y"), Obj.repr (0.0)); (__str ("z"), Obj.repr (0.0))] in
  let p2 = [(__str ("x"), Obj.repr (1.0)); (__str ("y"), Obj.repr (1.0)); (__str ("z"), Obj.repr (1.0))] in
  let p3 = [(__str ("x"), Obj.repr (2.0)); (__str ("y"), Obj.repr (2.0)); (__str ("z"), Obj.repr (2.0))] in
  if not (are_collinear (p1) (p2) (p3) (Obj.repr (10))) then (
  (failwith ("collinear test failed"));
  );
  let q3 = [(__str ("x"), Obj.repr (1.0)); (__str ("y"), Obj.repr (2.0)); (__str ("z"), Obj.repr (3.0))] in
  if are_collinear (p1) (p2) (q3) (Obj.repr (10)) then (
  (failwith ("non-collinear test failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_are_collinear ());
  let a = [(__str ("x"), Obj.repr (4.802293498137402)); (__str ("y"), Obj.repr (3.536233125455244)); (__str ("z"), Obj.repr (0.0))] in
  let b = [(__str ("x"), Obj.repr ((-.(2.186788107953106)))); (__str ("y"), Obj.repr ((-.(9.24561398001649)))); (__str ("z"), Obj.repr (7.141509524846482))] in
  let c = [(__str ("x"), Obj.repr (1.530169574640268)); (__str ("y"), Obj.repr ((-.(2.447927606600034)))); (__str ("z"), Obj.repr (3.343487096469054))] in
  print_endline ((string_of_bool (are_collinear (a) (b) (c) (Obj.repr (10)))));
  let d = [(__str ("x"), Obj.repr (2.399001826862445)); (__str ("y"), Obj.repr ((-.(2.452009976680793)))); (__str ("z"), Obj.repr (4.464656666157666))] in
  let e = [(__str ("x"), Obj.repr ((-.(3.682816335934376)))); (__str ("y"), Obj.repr (5.753788986533145)); (__str ("z"), Obj.repr (9.490993909044244))] in
  let f = [(__str ("x"), Obj.repr (1.962903518985307)); (__str ("y"), Obj.repr (3.741415730125627)); (__str ("z"), Obj.repr (7.0))] in
  print_endline ((string_of_bool (are_collinear (d) (e) (f) (Obj.repr (10)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
