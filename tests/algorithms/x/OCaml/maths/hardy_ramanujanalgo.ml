(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec exact_prime_factor_count n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let count = ref (0) in
  let num = ref (n) in
  if (((!num mod 2 + 2) mod 2) = 0) then (
  count := (!count + 1);
  (try while (((!num mod 2 + 2) mod 2) = 0) do
    try
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  );
  let i = ref (3) in
  (try while ((!i * !i) <= !num) do
    try
  if (((!num mod !i + !i) mod !i) = 0) then (
  count := (!count + 1);
  (try while (((!num mod !i + !i) mod !i) = 0) do
    try
  num := (!num / !i);
    with Continue -> ()
  done with Break -> ());
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  if (!num > 2) then (
  count := (!count + 1);
  );
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let ln2 = 0.6931471805599453 in
  let y = ref (x) in
  let k = ref (0.0) in
  (try while (!y > 2.0) do
    try
  y := (!y /. 2.0);
  k := (!k +. ln2);
    with Continue -> ()
  done with Break -> ());
  (try while (!y < 1.0) do
    try
  y := (!y *. 2.0);
  k := (!k -. ln2);
    with Continue -> ()
  done with Break -> ());
  let t = ((!y -. 1.0) /. (!y +. 1.0)) in
  let term = ref (t) in
  let sum = ref (0.0) in
  let n = ref (1) in
  (try while (!n <= 19) do
    try
  sum := (!sum +. (!term /. float_of_int (!n)));
  term := ((!term *. t) *. t);
  n := (!n + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!k +. (2.0 *. !sum))) : float); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref ((Obj.magic x : int)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and round4 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = 10000.0 in
  __ret := (Obj.magic ((floor (((x *. m) +. 0.5)) /. m)) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = 51242183 in
  let count = exact_prime_factor_count (Obj.repr (n)) in
  print_endline (("The number of distinct prime factors is/are " ^ (string_of_int (count))));
  let loglog = ln (Obj.repr (ln (Obj.repr (float_of_int (n))))) in
  print_endline (("The value of log(log(n)) is " ^ (Printf.sprintf "%.16g" (round4 (Obj.repr (loglog))))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
