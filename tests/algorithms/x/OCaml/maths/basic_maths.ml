(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow_int base exp =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result * base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and prime_factors n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n <= 0) then (
  (failwith ("Only positive integers have prime factors"));
  );
  let num = ref (n) in
  let pf = ref (([] : (int) list)) in
  (try while (((!num mod 2 + 2) mod 2) = 0) do
    try
  pf := (Obj.magic ((List.append (!pf) [(Obj.magic (2) : int)])) : int list);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  let i = ref (3) in
  (try while ((!i * !i) <= !num) do
    try
  (try while (((!num mod !i + !i) mod !i) = 0) do
    try
  pf := (Obj.magic ((List.append (!pf) [(Obj.magic (!i) : int)])) : int list);
  num := (!num / !i);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  if (!num > 2) then (
  pf := (Obj.magic ((List.append (!pf) [(Obj.magic (!num) : int)])) : int list);
  );
  __ret := (Obj.magic (!pf) : int list); raise Return
  with Return -> !__ret)

and number_of_divisors n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n <= 0) then (
  (failwith ("Only positive numbers are accepted"));
  );
  let num = ref (n) in
  let div = ref (1) in
  let temp = ref (1) in
  (try while (((!num mod 2 + 2) mod 2) = 0) do
    try
  temp := (!temp + 1);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  div := (!div * !temp);
  let i = ref (3) in
  (try while ((!i * !i) <= !num) do
    try
  temp := 1;
  (try while (((!num mod !i + !i) mod !i) = 0) do
    try
  temp := (!temp + 1);
  num := (!num / !i);
    with Continue -> ()
  done with Break -> ());
  div := (!div * !temp);
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  if (!num > 1) then (
  div := (!div * 2);
  );
  __ret := (Obj.magic (!div) : int); raise Return
  with Return -> !__ret)

and sum_of_divisors n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n <= 0) then (
  (failwith ("Only positive numbers are accepted"));
  );
  let num = ref (n) in
  let s = ref (1) in
  let temp = ref (1) in
  (try while (((!num mod 2 + 2) mod 2) = 0) do
    try
  temp := (!temp + 1);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  if (!temp > 1) then (
  s := (!s * ((pow_int (Obj.repr (2)) (Obj.repr (!temp)) - 1) / (2 - 1)));
  );
  let i = ref (3) in
  (try while ((!i * !i) <= !num) do
    try
  temp := 1;
  (try while (((!num mod !i + !i) mod !i) = 0) do
    try
  temp := (!temp + 1);
  num := (!num / !i);
    with Continue -> ()
  done with Break -> ());
  if (!temp > 1) then (
  s := (!s * ((pow_int (Obj.repr (!i)) (Obj.repr (!temp)) - 1) / (!i - 1)));
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : int); raise Return
  with Return -> !__ret)

and contains arr x =
  let __ret = ref false in
  (try
  let arr = (Obj.magic arr : int list) in
  let x = (Obj.magic x : int) in
  let idx = ref (0) in
  (try while (!idx < List.length (arr)) do
    try
  if ((let __l = arr in let __i = !idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and unique arr =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let result = ref (([] : (int) list)) in
  let idx = ref (0) in
  (try while (!idx < List.length (arr)) do
    try
  let v = (let __l = arr in let __i = !idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  if not (contains (!result) (Obj.repr (v))) then (
  result := (Obj.magic ((List.append (!result) [(Obj.magic (v) : int)])) : int list);
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and euler_phi n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n <= 0) then (
  (failwith ("Only positive numbers are accepted"));
  );
  let s = ref (n) in
  let factors = ref (unique (prime_factors (Obj.repr (n)))) in
  let idx = ref (0) in
  (try while (!idx < List.length (!factors)) do
    try
  let x = (let __l = !factors in let __i = !idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  s := ((!s / x) * (x - 1));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((__str (Obj.magic (prime_factors (Obj.repr (100))) : Obj.t)));
  print_endline ((string_of_int (Obj.magic (number_of_divisors (Obj.repr (100))) : int)));
  print_endline ((string_of_int (Obj.magic (sum_of_divisors (Obj.repr (100))) : int)));
  print_endline ((string_of_int (Obj.magic (euler_phi (Obj.repr (100))) : int)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
