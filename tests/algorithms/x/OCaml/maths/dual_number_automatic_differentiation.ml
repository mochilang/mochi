(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_dual real rank =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let real = (Obj.magic real : float) in
  let rank = (Obj.magic rank : int) in
  let ds = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < rank) do
    try
  ds := (Obj.magic (List.append (!ds) [(Obj.magic (1.0) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("real"), Obj.repr (real)); (__str ("duals"), Obj.repr (!ds))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dual_from_list real ds =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let real = (Obj.magic real : float) in
  let ds = (Obj.magic ds : float list) in
  __ret := (Obj.magic ([(__str ("real"), Obj.repr (real)); (__str ("duals"), Obj.repr (ds))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dual_add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let s_dual = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list))) do
    try
  s_dual := (Obj.magic (List.append (!s_dual) [(Obj.magic ((let __l = (Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let o_dual = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length ((Obj.obj (List.assoc (__str ("duals")) (b) : Obj.t) : float list))) do
    try
  o_dual := (Obj.magic (List.append (!o_dual) [(Obj.magic ((let __l = (Obj.obj (List.assoc (__str ("duals")) (b) : Obj.t) : float list) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (!s_dual) > List.length (!o_dual)) then (
  let diff = ref ((List.length (!s_dual) - List.length (!o_dual))) in
  let k = ref (0) in
  (try while (!k < !diff) do
    try
  o_dual := (Obj.magic (List.append (!o_dual) [(Obj.magic (1.0) : float)]) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  if (List.length (!s_dual) < List.length (!o_dual)) then (
  let diff2 = ref ((List.length (!o_dual) - List.length (!s_dual))) in
  let k2 = ref (0) in
  (try while (!k2 < !diff2) do
    try
  s_dual := (Obj.magic (List.append (!s_dual) [(Obj.magic (1.0) : float)]) : float list);
  k2 := (!k2 + 1);
    with Continue -> ()
  done with Break -> ());
  );
  );
  let new_duals = ref (([] : (float) list)) in
  let idx = ref (0) in
  (try while (!idx < List.length (!s_dual)) do
    try
  new_duals := (Obj.magic (List.append (!new_duals) [(Obj.magic (((let __l = !s_dual in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = !o_dual in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("real"), Obj.repr (((Obj.obj (List.assoc (__str ("real")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("real")) (b) : Obj.t) : float)))); (__str ("duals"), Obj.repr (!new_duals))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dual_add_real a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : float) in
  let ds = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list))) do
    try
  ds := (Obj.magic (List.append (!ds) [(Obj.magic ((let __l = (Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("real"), Obj.repr (((Obj.obj (List.assoc (__str ("real")) (a) : Obj.t) : float) +. b))); (__str ("duals"), Obj.repr (!ds))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dual_mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let new_len = ((List.length ((Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list)) + List.length ((Obj.obj (List.assoc (__str ("duals")) (b) : Obj.t) : float list))) + 1) in
  let new_duals = ref (([] : (float) list)) in
  let idx = ref (0) in
  (try while (!idx < new_len) do
    try
  new_duals := (Obj.magic (List.append (!new_duals) [(Obj.magic (0.0) : float)]) : float list);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list))) do
    try
  let j = ref (0) in
  (try while (!j < List.length ((Obj.obj (List.assoc (__str ("duals")) (b) : Obj.t) : float list))) do
    try
  let pos = ((!i + !j) + 1) in
  let val_ = ((let __l = !new_duals in let __i = pos in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((let __l = (Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (Obj.obj (List.assoc (__str ("duals")) (b) : Obj.t) : float list) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  new_duals := (List.mapi (fun __i __x -> if __i = pos then val_ else __x) (!new_duals));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref (0) in
  (try while (!k < List.length ((Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list))) do
    try
  let val_ = ((let __l = !new_duals in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((let __l = (Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (Obj.obj (List.assoc (__str ("real")) (b) : Obj.t) : float))) in
  new_duals := (List.mapi (fun __i __x -> if __i = !k then val_ else __x) (!new_duals));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let l = ref (0) in
  (try while (!l < List.length ((Obj.obj (List.assoc (__str ("duals")) (b) : Obj.t) : float list))) do
    try
  let val_ = ((let __l = !new_duals in let __i = !l in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((let __l = (Obj.obj (List.assoc (__str ("duals")) (b) : Obj.t) : float list) in let __i = !l in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (Obj.obj (List.assoc (__str ("real")) (a) : Obj.t) : float))) in
  new_duals := (List.mapi (fun __i __x -> if __i = !l then val_ else __x) (!new_duals));
  l := (!l + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("real"), Obj.repr (((Obj.obj (List.assoc (__str ("real")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("real")) (b) : Obj.t) : float)))); (__str ("duals"), Obj.repr (!new_duals))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dual_mul_real a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : float) in
  let ds = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list))) do
    try
  ds := (Obj.magic (List.append (!ds) [(Obj.magic (((let __l = (Obj.obj (List.assoc (__str ("duals")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. b)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("real"), Obj.repr (((Obj.obj (List.assoc (__str ("real")) (a) : Obj.t) : float) *. b))); (__str ("duals"), Obj.repr (!ds))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dual_pow x n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : (string * Obj.t) list) in
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("power must be a positive integer"));
  );
  if (n = 0) then (
  __ret := (Obj.magic ([(__str ("real"), Obj.repr (1.0)); (__str ("duals"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  );
  let res = ref (x) in
  let i = ref (1) in
  (try while (!i < n) do
    try
  res := dual_mul ((Obj.magic !res : (string * Obj.t) list)) ((Obj.magic x : (string * Obj.t) list));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and factorial n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (1.0) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  res := (!res *. float_of_int (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float); raise Return
  with Return -> !__ret)

and differentiate func position order =
  let __ret = ref 0.0 in
  (try
  let position = (Obj.magic position : float) in
  let order = (Obj.magic order : int) in
  let d = make_dual (Obj.repr (position)) (Obj.repr (1)) in
  let result = ref (func (d)) in
  if (order = 0) then (
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("real")) (!result) : Obj.t) : float)) : float); raise Return
  );
  __ret := (Obj.magic (((let __l = (Obj.obj (List.assoc (__str ("duals")) (!result) : Obj.t) : float list) in let __i = (order - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. factorial (Obj.repr (order)))) : float); raise Return
  with Return -> !__ret)

and test_differentiate () =
  let __ret = ref (Obj.magic 0) in
  (try
let rec f1 x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : (string * Obj.t) list) in
  __ret := (Obj.magic (dual_pow ((Obj.magic x : (string * Obj.t) list)) (Obj.repr (2))) : (string * Obj.t) list); raise Return
  with Return -> !__ret) in
  if (differentiate (f1) (Obj.repr (2.0)) (Obj.repr (2)) <> 2.0) then (
  (failwith ("f1 failed"));
  );
let rec f2 x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : (string * Obj.t) list) in
  __ret := (Obj.magic (dual_mul (dual_pow ((Obj.magic x : (string * Obj.t) list)) (Obj.repr (2))) (dual_pow ((Obj.magic x : (string * Obj.t) list)) (Obj.repr (4)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret) in
  if (differentiate (f2) (Obj.repr (9.0)) (Obj.repr (2)) <> 196830.0) then (
  (failwith ("f2 failed"));
  );
let rec f3 y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let y = (Obj.magic y : (string * Obj.t) list) in
  __ret := (Obj.magic (dual_mul_real (dual_pow (dual_add_real ((Obj.magic y : (string * Obj.t) list)) (Obj.repr (3.0))) (Obj.repr (6))) (Obj.repr (0.5))) : (string * Obj.t) list); raise Return
  with Return -> !__ret) in
  if (differentiate (f3) (Obj.repr (3.5)) (Obj.repr (4)) <> 7605.0) then (
  (failwith ("f3 failed"));
  );
let rec f4 y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let y = (Obj.magic y : (string * Obj.t) list) in
  __ret := (Obj.magic (dual_pow ((Obj.magic y : (string * Obj.t) list)) (Obj.repr (2))) : (string * Obj.t) list); raise Return
  with Return -> !__ret) in
  if (differentiate (f4) (Obj.repr (4.0)) (Obj.repr (3)) <> 0.0) then (
  (failwith ("f4 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_differentiate ());
let rec f y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let y = (Obj.magic y : (string * Obj.t) list) in
  __ret := (Obj.magic (dual_mul (dual_pow ((Obj.magic y : (string * Obj.t) list)) (Obj.repr (2))) (dual_pow ((Obj.magic y : (string * Obj.t) list)) (Obj.repr (4)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret) in
  let res = differentiate (f) (Obj.repr (9.0)) (Obj.repr (2)) in
  print_endline (Printf.sprintf "%.15f" (res));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
