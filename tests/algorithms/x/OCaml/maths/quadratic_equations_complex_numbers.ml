(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and div_real a r =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let r = (Obj.magic r : float) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) /. r))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) /. r)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sqrt_newton x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and sqrt_to_complex d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let d = (Obj.magic d : float) in
  if (d >= 0.0) then (
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (sqrt_newton (Obj.repr (d)))); (__str ("im"), Obj.repr (0.0))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr (sqrt_newton (Obj.repr ((-.(d))))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and quadratic_roots a b c =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let c = (Obj.magic c : float) in
  if (a = 0.0) then (
  print_endline ("ValueError: coefficient 'a' must not be zero");
  __ret := (Obj.magic ([]) : (string * Obj.t) list list); raise Return
  );
  let delta = ((b *. b) -. ((4.0 *. a) *. c)) in
  let sqrt_d = sqrt_to_complex (Obj.repr (delta)) in
  let minus_b = [(__str ("re"), Obj.repr ((-.(b)))); (__str ("im"), Obj.repr (0.0))] in
  let two_a = (2.0 *. a) in
  let root1 = div_real (add (minus_b) (sqrt_d)) (Obj.repr (two_a)) in
  let root2 = div_real (sub (minus_b) (sqrt_d)) (Obj.repr (two_a)) in
  __ret := (Obj.magic ([root1; root2]) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and root_str r =
  let __ret = ref "" in
  (try
  let r = (Obj.magic r : (string * Obj.t) list) in
  if ((Obj.obj (List.assoc (__str ("im")) (r) : Obj.t) : float) = 0.0) then (
  __ret := (Obj.magic ((Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("re")) (r) : Obj.t) : float)))) : string); raise Return
  );
  let s = ref ((Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("re")) (r) : Obj.t) : float)))) in
  if ((Obj.obj (List.assoc (__str ("im")) (r) : Obj.t) : float) >= 0.0) then (
  s := (((!s ^ "+") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("im")) (r) : Obj.t) : float)))) ^ "i");
  ) else (
  s := ((!s ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("im")) (r) : Obj.t) : float)))) ^ "i");
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let roots = ref (quadratic_roots (Obj.repr (5.0)) (Obj.repr (6.0)) (Obj.repr (1.0))) in
  if (List.length (!roots) = 2) then (
  print_endline (((("The solutions are: " ^ root_str ((let __l = !roots in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) ^ " and ") ^ root_str ((let __l = !roots in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
