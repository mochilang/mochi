(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bubble_sort nums =
  let __ret = ref ([] : (int) list) in
  (try
  let nums = (Obj.magic nums : int list) in
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  arr := (Obj.magic (List.append (!arr) [(Obj.magic ((let __l = nums in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = ref (List.length (!arr)) in
  let a = ref (0) in
  (try while (!a < !n) do
    try
  let b = ref (0) in
  (try while (!b < ((!n - !a) - 1)) do
    try
  if ((let __l = !arr in let __i = !b in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) > (let __l = !arr in let __i = (!b + 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  let tmp = (let __l = !arr in let __i = !b in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  arr := (List.mapi (fun __i __x -> if __i = !b then (let __l = !arr in let __i = (!b + 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!b + 1) then tmp else __x) (!arr));
  );
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and sort3 xs =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  arr := (Obj.magic (List.append (!arr) [(Obj.magic ((let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = ref (List.length (!arr)) in
  let a = ref (0) in
  (try while (!a < !n) do
    try
  let b = ref (0) in
  (try while (!b < ((!n - !a) - 1)) do
    try
  if ((let __l = !arr in let __i = !b in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) > (let __l = !arr in let __i = (!b + 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  let tmp = (let __l = !arr in let __i = !b in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  arr := (List.mapi (fun __i __x -> if __i = !b then (let __l = !arr in let __i = (!b + 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!b + 1) then tmp else __x) (!arr));
  );
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and triplet_sum1 arr target =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let target = (Obj.magic target : int) in
  let i = ref (0) in
  (try while (!i < (List.length (arr) - 2)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < (List.length (arr) - 1)) do
    try
  let k = ref ((!j + 1)) in
  (try while (!k < List.length (arr)) do
    try
  if ((((let __l = arr in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = arr in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) + (let __l = arr in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) = target) then (
  __ret := (Obj.magic (sort3 ([(let __l = arr in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0); (let __l = arr in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0); (let __l = arr in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)])) : int list); raise Return
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([0; 0; 0]) : int list); raise Return
  with Return -> !__ret)

and triplet_sum2 arr target =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = (Obj.magic arr : int list) in
  let target = (Obj.magic target : int) in
  let sorted = ref (bubble_sort (arr)) in
  let n = List.length (!sorted) in
  let i = ref (0) in
  (try while (!i < (n - 2)) do
    try
  let left = ref ((!i + 1)) in
  let right = ref ((n - 1)) in
  (try while (!left < !right) do
    try
  let s = (((let __l = !sorted in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = !sorted in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) + (let __l = !sorted in let __i = !right in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  if (s = target) then (
  __ret := (Obj.magic ([(let __l = !sorted in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0); (let __l = !sorted in let __i = !left in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0); (let __l = !sorted in let __i = !right in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)]) : int list); raise Return
  );
  if (s < target) then (
  left := (!left + 1);
  ) else (
  right := (!right - 1);
  );
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([0; 0; 0]) : int list); raise Return
  with Return -> !__ret)

and list_equal a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int list) in
  let b = (Obj.magic b : int list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if ((let __l = a in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) <> (let __l = b in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and test_triplet_sum () =
  let __ret = ref (Obj.magic 0) in
  (try
  let arr1 = ref ([13; 29; 7; 23; 5]) in
  if not (list_equal (triplet_sum1 (!arr1) (Obj.repr (35))) ([5; 7; 23])) then (
  (failwith ("ts1 case1 failed"));
  );
  if not (list_equal (triplet_sum2 (!arr1) (Obj.repr (35))) ([5; 7; 23])) then (
  (failwith ("ts2 case1 failed"));
  );
  let arr2 = ref ([37; 9; 19; 50; 44]) in
  if not (list_equal (triplet_sum1 (!arr2) (Obj.repr (65))) ([9; 19; 37])) then (
  (failwith ("ts1 case2 failed"));
  );
  if not (list_equal (triplet_sum2 (!arr2) (Obj.repr (65))) ([9; 19; 37])) then (
  (failwith ("ts2 case2 failed"));
  );
  let arr3 = ref ([6; 47; 27; 1; 15]) in
  if not (list_equal (triplet_sum1 (!arr3) (Obj.repr (11))) ([0; 0; 0])) then (
  (failwith ("ts1 case3 failed"));
  );
  if not (list_equal (triplet_sum2 (!arr3) (Obj.repr (11))) ([0; 0; 0])) then (
  (failwith ("ts2 case3 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_triplet_sum ());
  let sample = ref ([13; 29; 7; 23; 5]) in
  let res = ref (triplet_sum2 (!sample) (Obj.repr (35))) in
  print_endline ((((((string_of_int ((let __l = !res in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) ^ " ") ^ (string_of_int ((let __l = !res in let __i = 1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))) ^ " ") ^ (string_of_int ((let __l = !res in let __i = 2 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
