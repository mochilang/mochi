(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let seed = ref (1)
let rec next_seed x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic (((((x * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648)) : int); raise Return
  with Return -> !__ret)

and rand_unit () =
  let __ret = ref 0.0 in
  (try
  seed := next_seed (Obj.repr (!seed));
  __ret := (Obj.magic ((float_of_int (!seed) /. 2147483648.0)) : float); raise Return
  with Return -> !__ret)

and is_in_unit_circle p =
  let __ret = ref false in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  __ret := (Obj.magic (((((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : float)) +. ((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : float))) <= 1.0)) : bool); raise Return
  with Return -> !__ret)

and random_unit_square () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("x"), Obj.repr (rand_unit ())); (__str ("y"), Obj.repr (rand_unit ()))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and estimate_pi simulations =
  let __ret = ref 0.0 in
  (try
  let simulations = (Obj.magic simulations : int) in
  if (simulations < 1) then (
  (failwith ("At least one simulation is necessary to estimate PI."));
  );
  let inside = ref (0) in
  let i = ref (0) in
  (try while (!i < simulations) do
    try
  let p = random_unit_square () in
  if is_in_unit_circle (p) then (
  inside := (!inside + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((4.0 *. float_of_int (!inside)) /. float_of_int (simulations))) : float); raise Return
  with Return -> !__ret)

and abs_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = 10000 in
  let my_pi = estimate_pi (Obj.repr (n)) in
  let error = abs_float (Obj.repr ((my_pi -. _pi))) in
  print_endline (((("An estimate of PI is " ^ (Printf.sprintf "%.16g" (my_pi))) ^ " with an error of ") ^ (Printf.sprintf "%.16g" (error))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
