(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let rec _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (float_of_int (int_of_float ((x /. m))) *. m))) : float); raise Return
  with Return -> !__ret)

and sin_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y3 = (y2 *. y) in
  let y5 = (y3 *. y2) in
  let y7 = (y5 *. y2) in
  __ret := (Obj.magic ((((y -. (y3 /. 6.0)) +. (y5 /. 120.0)) -. (y7 /. 5040.0))) : float); raise Return
  with Return -> !__ret)

and cos_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y4 = (y2 *. y2) in
  let y6 = (y4 *. y2) in
  __ret := (Obj.magic ((((1.0 -. (y2 /. 2.0)) +. (y4 /. 24.0)) -. (y6 /. 720.0))) : float); raise Return
  with Return -> !__ret)

and tan_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((sin_approx (Obj.repr (x)) /. cos_approx (Obj.repr (x)))) : float); raise Return
  with Return -> !__ret)

and sqrt_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and surface_area_cube side_length =
  let __ret = ref 0.0 in
  (try
  let side_length = (Obj.magic side_length : float) in
  if (side_length < 0.0) then (
  print_endline ("ValueError: surface_area_cube() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (((6.0 *. side_length) *. side_length)) : float); raise Return
  with Return -> !__ret)

and surface_area_cuboid length breadth height =
  let __ret = ref 0.0 in
  (try
  let length = (Obj.magic length : float) in
  let breadth = (Obj.magic breadth : float) in
  let height = (Obj.magic height : float) in
  if (((length < 0.0) || (breadth < 0.0)) || (height < 0.0)) then (
  print_endline ("ValueError: surface_area_cuboid() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((2.0 *. (((length *. breadth) +. (breadth *. height)) +. (length *. height)))) : float); raise Return
  with Return -> !__ret)

and surface_area_sphere radius =
  let __ret = ref 0.0 in
  (try
  let radius = (Obj.magic radius : float) in
  if (radius < 0.0) then (
  print_endline ("ValueError: surface_area_sphere() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((((4.0 *. _pi) *. radius) *. radius)) : float); raise Return
  with Return -> !__ret)

and surface_area_hemisphere radius =
  let __ret = ref 0.0 in
  (try
  let radius = (Obj.magic radius : float) in
  if (radius < 0.0) then (
  print_endline ("ValueError: surface_area_hemisphere() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((((3.0 *. _pi) *. radius) *. radius)) : float); raise Return
  with Return -> !__ret)

and surface_area_cone radius height =
  let __ret = ref 0.0 in
  (try
  let radius = (Obj.magic radius : float) in
  let height = (Obj.magic height : float) in
  if ((radius < 0.0) || (height < 0.0)) then (
  print_endline ("ValueError: surface_area_cone() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let slant = sqrt_approx (Obj.repr (((height *. height) +. (radius *. radius)))) in
  __ret := (Obj.magic (((_pi *. radius) *. (radius +. slant))) : float); raise Return
  with Return -> !__ret)

and surface_area_conical_frustum radius1 radius2 height =
  let __ret = ref 0.0 in
  (try
  let radius1 = (Obj.magic radius1 : float) in
  let radius2 = (Obj.magic radius2 : float) in
  let height = (Obj.magic height : float) in
  if (((radius1 < 0.0) || (radius2 < 0.0)) || (height < 0.0)) then (
  print_endline ("ValueError: surface_area_conical_frustum() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let slant = sqrt_approx (Obj.repr (((height *. height) +. ((radius1 -. radius2) *. (radius1 -. radius2))))) in
  __ret := (Obj.magic ((_pi *. (((slant *. (radius1 +. radius2)) +. (radius1 *. radius1)) +. (radius2 *. radius2)))) : float); raise Return
  with Return -> !__ret)

and surface_area_cylinder radius height =
  let __ret = ref 0.0 in
  (try
  let radius = (Obj.magic radius : float) in
  let height = (Obj.magic height : float) in
  if ((radius < 0.0) || (height < 0.0)) then (
  print_endline ("ValueError: surface_area_cylinder() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((((2.0 *. _pi) *. radius) *. (height +. radius))) : float); raise Return
  with Return -> !__ret)

and surface_area_torus torus_radius tube_radius =
  let __ret = ref 0.0 in
  (try
  let torus_radius = (Obj.magic torus_radius : float) in
  let tube_radius = (Obj.magic tube_radius : float) in
  if ((torus_radius < 0.0) || (tube_radius < 0.0)) then (
  print_endline ("ValueError: surface_area_torus() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if (torus_radius < tube_radius) then (
  print_endline ("ValueError: surface_area_torus() does not support spindle or self intersecting tori");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (((((4.0 *. _pi) *. _pi) *. torus_radius) *. tube_radius)) : float); raise Return
  with Return -> !__ret)

and area_rectangle length width =
  let __ret = ref 0.0 in
  (try
  let length = (Obj.magic length : float) in
  let width = (Obj.magic width : float) in
  if ((length < 0.0) || (width < 0.0)) then (
  print_endline ("ValueError: area_rectangle() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((length *. width)) : float); raise Return
  with Return -> !__ret)

and area_square side_length =
  let __ret = ref 0.0 in
  (try
  let side_length = (Obj.magic side_length : float) in
  if (side_length < 0.0) then (
  print_endline ("ValueError: area_square() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((side_length *. side_length)) : float); raise Return
  with Return -> !__ret)

and area_triangle base height =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let height = (Obj.magic height : float) in
  if ((base < 0.0) || (height < 0.0)) then (
  print_endline ("ValueError: area_triangle() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (((base *. height) /. 2.0)) : float); raise Return
  with Return -> !__ret)

and area_triangle_three_sides side1 side2 side3 =
  let __ret = ref 0.0 in
  (try
  let side1 = (Obj.magic side1 : float) in
  let side2 = (Obj.magic side2 : float) in
  let side3 = (Obj.magic side3 : float) in
  if (((side1 < 0.0) || (side2 < 0.0)) || (side3 < 0.0)) then (
  print_endline ("ValueError: area_triangle_three_sides() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if ((((side1 +. side2) < side3) || ((side1 +. side3) < side2)) || ((side2 +. side3) < side1)) then (
  print_endline ("ValueError: Given three sides do not form a triangle");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let s = (((side1 +. side2) +. side3) /. 2.0) in
  let prod = (((s *. (s -. side1)) *. (s -. side2)) *. (s -. side3)) in
  let res = sqrt_approx (Obj.repr (prod)) in
  __ret := (Obj.magic (res) : float); raise Return
  with Return -> !__ret)

and area_parallelogram base height =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let height = (Obj.magic height : float) in
  if ((base < 0.0) || (height < 0.0)) then (
  print_endline ("ValueError: area_parallelogram() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((base *. height)) : float); raise Return
  with Return -> !__ret)

and area_trapezium base1 base2 height =
  let __ret = ref 0.0 in
  (try
  let base1 = (Obj.magic base1 : float) in
  let base2 = (Obj.magic base2 : float) in
  let height = (Obj.magic height : float) in
  if (((base1 < 0.0) || (base2 < 0.0)) || (height < 0.0)) then (
  print_endline ("ValueError: area_trapezium() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (((0.5 *. (base1 +. base2)) *. height)) : float); raise Return
  with Return -> !__ret)

and area_circle radius =
  let __ret = ref 0.0 in
  (try
  let radius = (Obj.magic radius : float) in
  if (radius < 0.0) then (
  print_endline ("ValueError: area_circle() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (((_pi *. radius) *. radius)) : float); raise Return
  with Return -> !__ret)

and area_ellipse radius_x radius_y =
  let __ret = ref 0.0 in
  (try
  let radius_x = (Obj.magic radius_x : float) in
  let radius_y = (Obj.magic radius_y : float) in
  if ((radius_x < 0.0) || (radius_y < 0.0)) then (
  print_endline ("ValueError: area_ellipse() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (((_pi *. radius_x) *. radius_y)) : float); raise Return
  with Return -> !__ret)

and area_rhombus diagonal1 diagonal2 =
  let __ret = ref 0.0 in
  (try
  let diagonal1 = (Obj.magic diagonal1 : float) in
  let diagonal2 = (Obj.magic diagonal2 : float) in
  if ((diagonal1 < 0.0) || (diagonal2 < 0.0)) then (
  print_endline ("ValueError: area_rhombus() only accepts non-negative values");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic (((0.5 *. diagonal1) *. diagonal2)) : float); raise Return
  with Return -> !__ret)

and area_reg_polygon sides length =
  let __ret = ref 0.0 in
  (try
  let sides = (Obj.magic sides : int) in
  let length = (Obj.magic length : float) in
  if (sides < 3) then (
  print_endline ("ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if (length < 0.0) then (
  print_endline ("ValueError: area_reg_polygon() only accepts non-negative values as length of a side");
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let n = float_of_int (sides) in
  __ret := (Obj.magic ((((n *. length) *. length) /. (4.0 *. tan_approx (Obj.repr ((_pi /. n)))))) : float); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ("[DEMO] Areas of various geometric shapes:");
  print_endline (("Rectangle: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_rectangle (Obj.repr (10.0)) (Obj.repr (20.0))) : float))));
  print_endline (("Square: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_square (Obj.repr (10.0))) : float))));
  print_endline (("Triangle: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_triangle (Obj.repr (10.0)) (Obj.repr (10.0))) : float))));
  let _tri_three_sides = area_triangle_three_sides (Obj.repr (5.0)) (Obj.repr (12.0)) (Obj.repr (13.0)) in
  print_endline (("Triangle Three Sides: " ^ (Printf.sprintf "%.16g" (Obj.magic (_tri_three_sides) : float))));
  print_endline (("Parallelogram: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_parallelogram (Obj.repr (10.0)) (Obj.repr (20.0))) : float))));
  print_endline (("Rhombus: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_rhombus (Obj.repr (10.0)) (Obj.repr (20.0))) : float))));
  print_endline (("Trapezium: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_trapezium (Obj.repr (10.0)) (Obj.repr (20.0)) (Obj.repr (30.0))) : float))));
  print_endline (("Circle: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_circle (Obj.repr (20.0))) : float))));
  print_endline (("Ellipse: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_ellipse (Obj.repr (10.0)) (Obj.repr (20.0))) : float))));
  print_endline ("");
  print_endline ("Surface Areas of various geometric shapes:");
  print_endline (("Cube: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_cube (Obj.repr (20.0))) : float))));
  print_endline (("Cuboid: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_cuboid (Obj.repr (10.0)) (Obj.repr (20.0)) (Obj.repr (30.0))) : float))));
  print_endline (("Sphere: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_sphere (Obj.repr (20.0))) : float))));
  print_endline (("Hemisphere: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_hemisphere (Obj.repr (20.0))) : float))));
  print_endline (("Cone: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_cone (Obj.repr (10.0)) (Obj.repr (20.0))) : float))));
  print_endline (("Conical Frustum: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_conical_frustum (Obj.repr (10.0)) (Obj.repr (20.0)) (Obj.repr (30.0))) : float))));
  print_endline (("Cylinder: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_cylinder (Obj.repr (10.0)) (Obj.repr (20.0))) : float))));
  print_endline (("Torus: " ^ (Printf.sprintf "%.16g" (Obj.magic (surface_area_torus (Obj.repr (20.0)) (Obj.repr (10.0))) : float))));
  print_endline (("Equilateral Triangle: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_reg_polygon (Obj.repr (3)) (Obj.repr (10.0))) : float))));
  print_endline (("Square: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_reg_polygon (Obj.repr (4)) (Obj.repr (10.0))) : float))));
  print_endline (("Regular Pentagon: " ^ (Printf.sprintf "%.16g" (Obj.magic (area_reg_polygon (Obj.repr (5)) (Obj.repr (10.0))) : float))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
