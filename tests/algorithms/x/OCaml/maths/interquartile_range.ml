(* Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bubble_sort nums =
  let __ret = ref ([] : (float) list) in
  (try
  let nums = (Obj.magic nums : float list) in
  let arr = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  arr := (Obj.magic (List.append (!arr) [(Obj.magic ((let __l = nums in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = ref (List.length (!arr)) in
  let a = ref (0) in
  (try while (!a < !n) do
    try
  let b = ref (0) in
  (try while (!b < ((!n - !a) - 1)) do
    try
  if ((let __l = !arr in let __i = !b in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > (let __l = !arr in let __i = (!b + 1) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) then (
  let temp = (let __l = !arr in let __i = !b in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  arr := (List.mapi (fun __i __x -> if __i = !b then (let __l = !arr in let __i = (!b + 1) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!b + 1) then temp else __x) (!arr));
  );
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : float list); raise Return
  with Return -> !__ret)

and find_median nums =
  let __ret = ref 0.0 in
  (try
  let nums = (Obj.magic nums : float list) in
  let length = List.length (nums) in
  let div = (length / 2) in
  let mod_ = ((length mod 2 + 2) mod 2) in
  if (mod_ <> 0) then (
  __ret := (Obj.magic ((let __l = nums in let __i = div in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float); raise Return
  );
  __ret := (Obj.magic ((((let __l = nums in let __i = div in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. (let __l = nums in let __i = (div - 1) in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) /. 2.0)) : float); raise Return
  with Return -> !__ret)

and interquartile_range nums =
  let __ret = ref 0.0 in
  (try
  let nums = (Obj.magic nums : float list) in
  if (List.length (nums) = 0) then (
  (failwith ("The list is empty. Provide a non-empty list."));
  );
  let sorted = ref (bubble_sort (nums)) in
  let length = List.length (!sorted) in
  let div = (length / 2) in
  let mod_ = ((length mod 2 + 2) mod 2) in
  let lower = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < div) do
    try
  lower := (Obj.magic (List.append (!lower) [(Obj.magic ((let __l = !sorted in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let upper = ref (([] : (float) list)) in
  let j = ref ((div + mod_)) in
  (try while (!j < length) do
    try
  upper := (Obj.magic (List.append (!upper) [(Obj.magic ((let __l = !sorted in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let q1 = find_median (!lower) in
  let q3 = find_median (!upper) in
  __ret := (Obj.magic ((q3 -. q1)) : float); raise Return
  with Return -> !__ret)

and absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and float_equal a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let diff = absf (Obj.repr ((a -. b))) in
  __ret := (Obj.magic ((diff < 0.0000001)) : bool); raise Return
  with Return -> !__ret)

and test_interquartile_range () =
  let __ret = ref (Obj.magic 0) in
  (try
  if not (float_equal (Obj.repr (interquartile_range ([4.0; 1.0; 2.0; 3.0; 2.0]))) (Obj.repr (2.0))) then (
  (failwith ("interquartile_range case1 failed"));
  );
  if not (float_equal (Obj.repr (interquartile_range ([(-.(2.0)); (-.(7.0)); (-.(10.0)); 9.0; 8.0; 4.0; (-.(67.0)); 45.0]))) (Obj.repr (17.0))) then (
  (failwith ("interquartile_range case2 failed"));
  );
  if not (float_equal (Obj.repr (interquartile_range ([(-.(2.1)); (-.(7.1)); (-.(10.1)); 9.1; 8.1; 4.1; (-.(67.1)); 45.1]))) (Obj.repr (17.2))) then (
  (failwith ("interquartile_range case3 failed"));
  );
  if not (float_equal (Obj.repr (interquartile_range ([0.0; 0.0; 0.0; 0.0; 0.0]))) (Obj.repr (0.0))) then (
  (failwith ("interquartile_range case4 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_interquartile_range ());
  print_endline ((Printf.sprintf "%.16g" (Obj.magic (interquartile_range ([4.0; 1.0; 2.0; 3.0; 2.0])) : float)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
