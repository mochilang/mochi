(* Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec contains_int xs x =
  let __ret = ref false in
  (try
  let xs = (Obj.magic xs : int list) in
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and contains_string xs x =
  let __ret = ref false in
  (try
  let xs = (Obj.magic xs : string list) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and count_int xs x =
  let __ret = ref 0 in
  (try
  let xs = (Obj.magic xs : int list) in
  let x = (Obj.magic x : int) in
  let cnt = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = x) then (
  cnt := (!cnt + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cnt) : int); raise Return
  with Return -> !__ret)

and count_string xs x =
  let __ret = ref 0 in
  (try
  let xs = (Obj.magic xs : string list) in
  let cnt = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") = x) then (
  cnt := (!cnt + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cnt) : int); raise Return
  with Return -> !__ret)

and sort_int xs =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let arr = ref (xs) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < List.length (!arr)) do
    try
  if ((let __l = !arr in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < (let __l = !arr in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  let tmp = (let __l = !arr in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  arr := (List.mapi (fun __i __x -> if __i = !i then (let __l = !arr in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !j then tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and sort_string xs =
  let __ret = ref ([] : (string) list) in
  (try
  let xs = (Obj.magic xs : string list) in
  let arr = ref (xs) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < List.length (!arr)) do
    try
  if ((let __l = !arr in let __i = !j in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") < (let __l = !arr in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "")) then (
  let tmp = (let __l = !arr in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  arr := (List.mapi (fun __i __x -> if __i = !i then (let __l = !arr in let __i = !j in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !j then tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : string list); raise Return
  with Return -> !__ret)

and mode_int lst =
  let __ret = ref ([] : (int) list) in
  (try
  let lst = (Obj.magic lst : int list) in
  if (List.length (lst) = 0) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let counts = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  counts := (Obj.magic (List.append (!counts) [(Obj.magic (count_int (lst) (Obj.repr ((let __l = lst in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let max_count = ref (0) in
  i := 0;
  (try while (!i < List.length (!counts)) do
    try
  if ((let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) > !max_count) then (
  max_count := (let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let modes = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (lst)) do
    try
  if ((let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = !max_count) then (
  let v = (let __l = lst in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  if not (contains_int (!modes) (Obj.repr (v))) then (
  modes := (Obj.magic (List.append (!modes) [(Obj.magic (v) : int)]) : int list);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (sort_int (!modes)) : int list); raise Return
  with Return -> !__ret)

and mode_string lst =
  let __ret = ref ([] : (string) list) in
  (try
  let lst = (Obj.magic lst : string list) in
  if (List.length (lst) = 0) then (
  __ret := (Obj.magic ([]) : string list); raise Return
  );
  let counts = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  counts := (Obj.magic (List.append (!counts) [(Obj.magic (count_string (lst) ((let __l = lst in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> ""))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let max_count = ref (0) in
  i := 0;
  (try while (!i < List.length (!counts)) do
    try
  if ((let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) > !max_count) then (
  max_count := (let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let modes = ref (([] : (string) list)) in
  i := 0;
  (try while (!i < List.length (lst)) do
    try
  if ((let __l = !counts in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = !max_count) then (
  let v = (let __l = lst in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  if not (contains_string (!modes) (v)) then (
  modes := (Obj.magic (List.append (!modes) [(Obj.magic (v) : string)]) : string list);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (sort_string (!modes)) : string list); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (__show_list (mode_int ([2; 3; 4; 5; 3; 4; 2; 5; 2; 2; 4; 2; 2; 2])));
  print_endline (__show_list (mode_int ([3; 4; 5; 3; 4; 2; 5; 2; 2; 4; 4; 2; 2; 2])));
  print_endline (__show_list (mode_int ([3; 4; 5; 3; 4; 2; 5; 2; 2; 4; 4; 4; 2; 2; 4; 2])));
  print_endline (__show_list (mode_string (["x"; "y"; "y"; "z"])));
  print_endline (__show_list (mode_string (["x"; "x"; "y"; "y"; "z"])));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
