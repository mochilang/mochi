(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  ) else (
  __ret := (Obj.magic (x) : float); raise Return
  );
    !__ret
  with Return -> !__ret)

and trapezoidal_area f x_start x_end steps =
  let __ret = ref 0.0 in
  (try
  let x_start = (Obj.magic x_start : float) in
  let x_end = (Obj.magic x_end : float) in
  let steps = (Obj.magic steps : int) in
  let step = ((x_end -. x_start) /. float_of_int (steps)) in
  let x1 = ref (x_start) in
  let fx1 = ref (f (Obj.repr (x_start))) in
  let area = ref (0.0) in
  let i = ref (0) in
  (try while (!i < steps) do
    try
  let x2 = (!x1 +. step) in
  let fx2 = f (Obj.repr (x2)) in
  area := (!area +. ((abs_float (Obj.repr ((fx2 +. !fx1))) *. step) /. 2.0));
  x1 := x2;
  fx1 := fx2;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!area) : float); raise Return
  with Return -> !__ret)

and f x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((((x *. x) *. x) +. (x *. x))) : float); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ("f(x) = x^3 + x^2");
  print_endline ("The area between the curve, x = -5, x = 5 and the x axis is:");
  let i = ref (10) in
  (try while (!i <= 100000) do
    try
  let result = trapezoidal_area (f) (Obj.repr ((-.(5.0)))) (Obj.repr (5.0)) (Obj.repr (!i)) in
  print_endline (((("with " ^ (string_of_int (Obj.magic (!i) : int))) ^ " steps: ") ^ (Printf.sprintf "%.16g" (Obj.magic (result) : float))));
  i := (!i * 10);
    with Continue -> ()
  done with Break -> ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
