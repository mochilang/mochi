(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec is_harmonic_series series =
  let __ret = ref false in
  (try
  let series = (Obj.magic series : float list) in
  if (List.length (series) = 0) then (
  (failwith ("Input list must be a non empty list"));
  );
  if (List.length (series) = 1) then (
  if ((let __l = series in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 0.0) then (
  (failwith ("Input series cannot have 0 as an element"));
  );
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let rec_series = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (series)) do
    try
  let val_ = (let __l = series in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (val_ = 0.0) then (
  (failwith ("Input series cannot have 0 as an element"));
  );
  rec_series := (Obj.magic (List.append (!rec_series) [(Obj.magic ((1.0 /. val_)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let common_diff = ((let __l = !rec_series in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = !rec_series in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let idx = ref (2) in
  (try while (!idx < List.length (!rec_series)) do
    try
  if (((let __l = !rec_series in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = !rec_series in let __i = (!idx - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) <> common_diff) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and harmonic_mean series =
  let __ret = ref 0.0 in
  (try
  let series = (Obj.magic series : float list) in
  if (List.length (series) = 0) then (
  (failwith ("Input list must be a non empty list"));
  );
  let total = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (series)) do
    try
  total := (!total +. (1.0 /. (let __l = series in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((float_of_int (List.length (series)) /. !total)) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_bool (is_harmonic_series ([1.0; (2.0 /. 3.0); (1.0 /. 2.0); (2.0 /. 5.0); (1.0 /. 3.0)])));
  print_endline (string_of_bool (is_harmonic_series ([1.0; (2.0 /. 3.0); (2.0 /. 5.0); (1.0 /. 3.0)])));
  print_endline (string_of_float (harmonic_mean ([1.0; 4.0; 4.0])));
  print_endline (string_of_float (harmonic_mean ([3.0; 6.0; 9.0; 12.0])));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
