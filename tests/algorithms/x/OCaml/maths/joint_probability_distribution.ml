(* Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec key x y =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  __ret := (Obj.magic ((((string_of_int (Obj.magic (x) : int)) ^ ",") ^ (string_of_int (Obj.magic (y) : int)))) : string); raise Return
  with Return -> !__ret)

and joint_probability_distribution x_values y_values x_probabilities y_probabilities =
  let __ret = ref ([] : (string * float) list) in
  (try
  let x_values = (Obj.magic x_values : int list) in
  let y_values = (Obj.magic y_values : int list) in
  let x_probabilities = (Obj.magic x_probabilities : float list) in
  let y_probabilities = (Obj.magic y_probabilities : float list) in
  let result = ref ([] : (string * float) list) in
  let i = ref (0) in
  (try while (!i < List.length (x_values)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (y_values)) do
    try
  let k = key (Obj.repr ((let __l = x_values in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) (Obj.repr ((let __l = y_values in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) in
  result := ((__str (k), ((let __l = x_probabilities in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = y_probabilities in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) :: List.remove_assoc (__str (k)) (!result));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : (string * float) list); raise Return
  with Return -> !__ret)

and expectation values probabilities =
  let __ret = ref 0.0 in
  (try
  let values = (Obj.magic values : int list) in
  let probabilities = (Obj.magic probabilities : float list) in
  let total = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  total := (!total +. (float_of_int ((let __l = values in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) *. (let __l = probabilities in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and variance values probabilities =
  let __ret = ref 0.0 in
  (try
  let values = (Obj.magic values : int list) in
  let probabilities = (Obj.magic probabilities : float list) in
  let mean = expectation (values) (probabilities) in
  let total = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  let diff = (float_of_int ((let __l = values in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) -. mean) in
  total := (!total +. ((diff *. diff) *. (let __l = probabilities in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and covariance x_values y_values x_probabilities y_probabilities =
  let __ret = ref 0.0 in
  (try
  let x_values = (Obj.magic x_values : int list) in
  let y_values = (Obj.magic y_values : int list) in
  let x_probabilities = (Obj.magic x_probabilities : float list) in
  let y_probabilities = (Obj.magic y_probabilities : float list) in
  let mean_x = expectation (x_values) (x_probabilities) in
  let mean_y = expectation (y_values) (y_probabilities) in
  let total = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (x_values)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (y_values)) do
    try
  let diff_x = (float_of_int ((let __l = x_values in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) -. mean_x) in
  let diff_y = (float_of_int ((let __l = y_values in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) -. mean_y) in
  total := (!total +. (((diff_x *. diff_y) *. (let __l = x_probabilities in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) *. (let __l = y_probabilities in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and standard_deviation v =
  let __ret = ref 0.0 in
  (try
  let v = (Obj.magic v : float) in
  __ret := (Obj.magic (sqrtApprox (Obj.repr (v))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let x_values = ref ([1; 2]) in
  let y_values = ref ([-(2); 5; 8]) in
  let x_probabilities = ref ([0.7; 0.3]) in
  let y_probabilities = ref ([0.3; 0.5; 0.2]) in
  let jpd = ref (joint_probability_distribution (!x_values) (!y_values) (!x_probabilities) (!y_probabilities)) in
  let i = ref (0) in
  (try while (!i < List.length (!x_values)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (!y_values)) do
    try
  let k = key (Obj.repr ((let __l = !x_values in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) (Obj.repr ((let __l = !y_values in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) in
  let prob = (match List.assoc_opt (__str (k)) (!jpd) with Some v -> v | None -> 0.) in
  print_endline (((k ^ "=") ^ (Printf.sprintf "%.16g" (Obj.magic (prob) : float))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let ex = expectation (!x_values) (!x_probabilities) in
  let ey = expectation (!y_values) (!y_probabilities) in
  let vx = variance (!x_values) (!x_probabilities) in
  let vy = variance (!y_values) (!y_probabilities) in
  let cov = covariance (!x_values) (!y_values) (!x_probabilities) (!y_probabilities) in
  print_endline (("Ex=" ^ (Printf.sprintf "%.16g" (Obj.magic (ex) : float))));
  print_endline (("Ey=" ^ (Printf.sprintf "%.16g" (Obj.magic (ey) : float))));
  print_endline (("Vx=" ^ (Printf.sprintf "%.16g" (Obj.magic (vx) : float))));
  print_endline (("Vy=" ^ (Printf.sprintf "%.16g" (Obj.magic (vy) : float))));
  print_endline (("Cov=" ^ (Printf.sprintf "%.16g" (Obj.magic (cov) : float))));
  print_endline (("Sx=" ^ (Printf.sprintf "%.16g" (Obj.magic (standard_deviation (Obj.repr (vx))) : float))));
  print_endline (("Sy=" ^ (Printf.sprintf "%.16g" (Obj.magic (standard_deviation (Obj.repr (vy))) : float))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
