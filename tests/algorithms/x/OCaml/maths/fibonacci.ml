(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrt x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and powf x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let res = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (!res *. x);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float); raise Return
  with Return -> !__ret)

and roundf x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  if (x >= 0.0) then (
  __ret := (Obj.magic ((Obj.magic (x +. 0.5) : int)) : int); raise Return
  );
  __ret := (Obj.magic ((Obj.magic (x -. 0.5) : int)) : int); raise Return
  with Return -> !__ret)

and fib_iterative n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n is negative"));
  );
  if (n = 0) then (
  __ret := (Obj.magic ([0]) : int list); raise Return
  );
  let fib = ref ([0; 1]) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  fib := (Obj.magic (List.append (!fib) [(Obj.magic (((let __l = !fib in let __i = (!i - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + (let __l = !fib in let __i = (!i - 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!fib) : int list); raise Return
  with Return -> !__ret)

and fib_recursive_term i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  if (i < 0) then (
  (failwith ("n is negative"));
  );
  if (i < 2) then (
  __ret := (Obj.magic (i) : int); raise Return
  );
  __ret := (Obj.magic ((fib_recursive_term (Obj.repr ((i - 1))) + fib_recursive_term (Obj.repr ((i - 2))))) : int); raise Return
  with Return -> !__ret)

and fib_recursive n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n is negative"));
  );
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (fib_recursive_term (Obj.repr (!i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)


let fib_cache_global = ref ([] : (string * int) list)
let rec fib_recursive_cached_term i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  if (i < 0) then (
  (failwith ("n is negative"));
  );
  if (i < 2) then (
  __ret := (Obj.magic (i) : int); raise Return
  );
  if (List.mem_assoc i !fib_cache_global) then (
  __ret := (Obj.magic (List.assoc (__str (i)) (!fib_cache_global)) : int); raise Return
  );
  let val_ = (fib_recursive_cached_term (Obj.repr ((i - 1))) + fib_recursive_cached_term (Obj.repr ((i - 2)))) in
  fib_cache_global := ((__str (i), val_) :: List.remove_assoc (__str (i)) (!fib_cache_global));
  __ret := (Obj.magic (val_) : int); raise Return
  with Return -> !__ret)

and fib_recursive_cached n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n is negative"));
  );
  let res = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j <= n) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (fib_recursive_cached_term (Obj.repr (!j))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)


let fib_memo_cache = ref ([(__str (0), 0); (__str (1), 1); (__str (2), 1)])
let rec fib_memoization_term num =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  if (List.mem_assoc num !fib_memo_cache) then (
  __ret := (Obj.magic (List.assoc (__str (num)) (!fib_memo_cache)) : int); raise Return
  );
  let value = (fib_memoization_term (Obj.repr ((num - 1))) + fib_memoization_term (Obj.repr ((num - 2)))) in
  fib_memo_cache := ((__str (num), value) :: List.remove_assoc (__str (num)) (!fib_memo_cache));
  __ret := (Obj.magic (value) : int); raise Return
  with Return -> !__ret)

and fib_memoization n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n is negative"));
  );
  let out = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  out := (Obj.magic (List.append (!out) [(Obj.magic (fib_memoization_term (Obj.repr (!i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list); raise Return
  with Return -> !__ret)

and fib_binet n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n is negative"));
  );
  if (n >= 1475) then (
  (failwith ("n is too large"));
  );
  let sqrt5 = sqrt (Obj.repr (5.0)) in
  let phi = ((1.0 +. sqrt5) /. 2.0) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  let val_ = roundf (Obj.repr ((powf (Obj.repr (phi)) (Obj.repr (!i)) /. sqrt5))) in
  res := (Obj.magic (List.append (!res) [(Obj.magic (val_) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and matrix_mul a b =
  let __ret = ref ([] : (int list) list) in
  (try
  let a = (Obj.magic a : int list list) in
  let b = (Obj.magic b : int list list) in
  let a00 = (((let __l = (let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) + ((let __l = (let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  let a01 = (((let __l = (let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) + ((let __l = (let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  let a10 = (((let __l = (let __l = a in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) + ((let __l = (let __l = a in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  let a11 = (((let __l = (let __l = a in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) + ((let __l = (let __l = a in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  __ret := (Obj.magic ([[a00; a01]; [a10; a11]]) : int list list); raise Return
  with Return -> !__ret)

and matrix_pow m power =
  let __ret = ref ([] : (int list) list) in
  (try
  let m = (Obj.magic m : int list list) in
  let power = (Obj.magic power : int) in
  if (power < 0) then (
  (failwith ("power is negative"));
  );
  let result = ref ([[1; 0]; [0; 1]]) in
  let base = ref (m) in
  let p = ref (power) in
  (try while (!p > 0) do
    try
  if (((!p mod 2 + 2) mod 2) = 1) then (
  result := (Obj.magic matrix_mul (!result) (!base) : int list list);
  );
  base := (Obj.magic matrix_mul (!base) (!base) : int list list);
  p := (!p / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and fib_matrix n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n is negative"));
  );
  if (n = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let m = ref ([[1; 1]; [1; 0]]) in
  let res = ref (matrix_pow (!m) (Obj.repr ((n - 1)))) in
  __ret := (Obj.magic ((let __l = (let __l = !res in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int); raise Return
  with Return -> !__ret)

and run_tests () =
  let __ret = ref 0 in
  (try
  let expected = ref ([0; 1; 1; 2; 3; 5; 8; 13; 21; 34; 55]) in
  let it = ref (fib_iterative (Obj.repr (10))) in
  let rec_ = ref (fib_recursive (Obj.repr (10))) in
  let cache = ref (fib_recursive_cached (Obj.repr (10))) in
  let memo = ref (fib_memoization (Obj.repr (10))) in
  let bin = ref (fib_binet (Obj.repr (10))) in
  let m = fib_matrix (Obj.repr (10)) in
  if (!it <> !expected) then (
  (failwith ("iterative failed"));
  );
  if (!rec_ <> !expected) then (
  (failwith ("recursive failed"));
  );
  if (!cache <> !expected) then (
  (failwith ("cached failed"));
  );
  if (!memo <> !expected) then (
  (failwith ("memoization failed"));
  );
  if (!bin <> !expected) then (
  (failwith ("binet failed"));
  );
  if (m <> 55) then (
  (failwith ("matrix failed"));
  );
  __ret := (Obj.magic (m) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (run_tests ())));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
