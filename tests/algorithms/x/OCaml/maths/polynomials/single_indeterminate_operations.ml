(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec copy_list xs =
  let __ret = ref ([] : (float) list) in
  (try
  let xs = (Obj.magic xs : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and polynomial_new degree coeffs =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let degree = (Obj.magic degree : int) in
  let coeffs = (Obj.magic coeffs : float list) in
  if (List.length (coeffs) <> (degree + 1)) then (
  (failwith ("The number of coefficients should be equal to the degree + 1."));
  );
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr (degree)); (__str ("coefficients"), Obj.repr (copy_list (coeffs)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add p q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let q = (Obj.magic q : (string * Obj.t) list) in
  if ((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("degree")) (q) : Obj.t) : int)) then (
  let coeffs = ref (copy_list ((Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list))) in
  let i = ref (0) in
  (try while (!i <= (Obj.obj (List.assoc (__str ("degree")) (q) : Obj.t) : int)) do
    try
  coeffs := (List.mapi (fun __i __x -> if __i = !i then ((let __l = !coeffs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = (Obj.obj (List.assoc (__str ("coefficients")) (q) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!coeffs));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr ((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int))); (__str ("coefficients"), Obj.repr (!coeffs))]) : (string * Obj.t) list); raise Return
  ) else (
  let coeffs = ref (copy_list ((Obj.obj (List.assoc (__str ("coefficients")) (q) : Obj.t) : float list))) in
  let i = ref (0) in
  (try while (!i <= (Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) do
    try
  coeffs := (List.mapi (fun __i __x -> if __i = !i then ((let __l = !coeffs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!coeffs));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr ((Obj.obj (List.assoc (__str ("degree")) (q) : Obj.t) : int))); (__str ("coefficients"), Obj.repr (!coeffs))]) : (string * Obj.t) list); raise Return
  );
    !__ret
  with Return -> !__ret)

and neg p =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let coeffs = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i <= (Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) do
    try
  coeffs := (Obj.magic (List.append (!coeffs) [(Obj.magic ((-.((let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr ((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int))); (__str ("coefficients"), Obj.repr (!coeffs))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sub p q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let q = (Obj.magic q : (string * Obj.t) list) in
  __ret := (Obj.magic (add ((Obj.magic p : (string * Obj.t) list)) (neg ((Obj.magic q : (string * Obj.t) list)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and mul p q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let q = (Obj.magic q : (string * Obj.t) list) in
  let size = ref ((((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("degree")) (q) : Obj.t) : int)) + 1)) in
  let coeffs = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < !size) do
    try
  coeffs := (Obj.magic (List.append (!coeffs) [(Obj.magic (0.0) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i <= (Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) do
    try
  let j = ref (0) in
  (try while (!j <= (Obj.obj (List.assoc (__str ("degree")) (q) : Obj.t) : int)) do
    try
  coeffs := (List.mapi (fun __i __x -> if __i = (!i + !j) then ((let __l = !coeffs in let __i = (!i + !j) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (Obj.obj (List.assoc (__str ("coefficients")) (q) : Obj.t) : float list) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!coeffs));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr (((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("degree")) (q) : Obj.t) : int)))); (__str ("coefficients"), Obj.repr (!coeffs))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and power base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and evaluate p x =
  let __ret = ref 0.0 in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let x = (Obj.magic x : float) in
  let result = ref (0.0) in
  let i = ref (0) in
  (try while (!i <= (Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) do
    try
  result := (!result +. ((let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. power (Obj.repr (x)) (Obj.repr (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and poly_to_string p =
  let __ret = ref "" in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let s = ref ("") in
  let i = ref ((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) in
  (try while (!i >= 0) do
    try
  let coeff = (let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (coeff <> 0.0) then (
  if (String.length (!s) > 0) then (
  if (coeff > 0.0) then (
  s := (!s ^ " + ");
  ) else (
  s := (!s ^ " - ");
  );
  ) else (
  if (coeff < 0.0) then (
  s := (!s ^ "-");
  );
  );
  let abs_coeff = if (coeff < 0.0) then (-.(coeff)) else coeff in
  if (!i = 0) then (
  s := (!s ^ (Printf.sprintf "%.16g" (abs_coeff)));
  ) else (
  if (!i = 1) then (
  s := ((!s ^ (Printf.sprintf "%.16g" (abs_coeff))) ^ "x");
  ) else (
  s := (((!s ^ (Printf.sprintf "%.16g" (abs_coeff))) ^ "x^") ^ (string_of_int (!i)));
  );
  );
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  if (!s = "") then (
  s := "0";
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and derivative p =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  if ((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int) = 0) then (
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr (0)); (__str ("coefficients"), Obj.repr ([0.0]))]) : (string * Obj.t) list); raise Return
  );
  let coeffs = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) do
    try
  coeffs := (Obj.magic (List.append (!coeffs) [(Obj.magic (((let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. float_of_int ((!i + 1)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr (((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int) - 1))); (__str ("coefficients"), Obj.repr (!coeffs))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and integral p constant =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let constant = (Obj.magic constant : float) in
  let coeffs = ref ([constant]) in
  let i = ref (0) in
  (try while (!i <= (Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) do
    try
  coeffs := (Obj.magic (List.append (!coeffs) [(Obj.magic (((let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. float_of_int ((!i + 1)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("degree"), Obj.repr (((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int) + 1))); (__str ("coefficients"), Obj.repr (!coeffs))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and equals p q =
  let __ret = ref false in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let q = (Obj.magic q : (string * Obj.t) list) in
  if ((Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int) <> (Obj.obj (List.assoc (__str ("degree")) (q) : Obj.t) : int)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i <= (Obj.obj (List.assoc (__str ("degree")) (p) : Obj.t) : int)) do
    try
  if ((let __l = (Obj.obj (List.assoc (__str ("coefficients")) (p) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = (Obj.obj (List.assoc (__str ("coefficients")) (q) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and not_equals p q =
  let __ret = ref false in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  let q = (Obj.magic q : (string * Obj.t) list) in
  __ret := (Obj.magic (not (equals ((Obj.magic p : (string * Obj.t) list)) ((Obj.magic q : (string * Obj.t) list)))) : bool); raise Return
  with Return -> !__ret)

and test_polynomial () =
  let __ret = ref (Obj.magic 0) in
  (try
  let p = polynomial_new (Obj.repr (2)) ([1.0; 2.0; 3.0]) in
  let q = polynomial_new (Obj.repr (2)) ([1.0; 2.0; 3.0]) in
  if (poly_to_string (add (p) (q)) <> "6x^2 + 4x + 2") then (
  (failwith ("add failed"));
  );
  if (poly_to_string (sub (p) (q)) <> "0") then (
  (failwith ("sub failed"));
  );
  if (evaluate (p) (Obj.repr (2.0)) <> 17.0) then (
  (failwith ("evaluate failed"));
  );
  if (poly_to_string (derivative (p)) <> "6x + 2") then (
  (failwith ("derivative failed"));
  );
  let integ = poly_to_string (integral (p) (Obj.repr (0.0))) in
  if (integ <> "1x^3 + 1x^2 + 1x") then (
  (failwith ("integral failed"));
  );
  if not (equals (p) (q)) then (
  (failwith ("equals failed"));
  );
  if not_equals (p) (q) then (
  (failwith ("not_equals failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_polynomial ());
  let p = polynomial_new (Obj.repr (2)) ([1.0; 2.0; 3.0]) in
  let d = derivative (p) in
  print_endline ((poly_to_string (d)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
