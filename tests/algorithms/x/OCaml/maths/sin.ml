(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref (int_of_float (x)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and pow x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result *. x);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and factorial n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1.0) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  result := (!result *. float_of_int (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and radians deg =
  let __ret = ref 0.0 in
  (try
  let deg = (Obj.magic deg : float) in
  __ret := (Obj.magic (((deg *. _pi) /. 180.0)) : float); raise Return
  with Return -> !__ret)

and taylor_sin angle_in_degrees accuracy rounded_values_count =
  let __ret = ref 0.0 in
  (try
  let angle_in_degrees = (Obj.magic angle_in_degrees : float) in
  let accuracy = (Obj.magic accuracy : int) in
  let rounded_values_count = (Obj.magic rounded_values_count : int) in
  let k = floor (Obj.repr ((angle_in_degrees /. 360.0))) in
  let angle = ref ((angle_in_degrees -. (k *. 360.0))) in
  let angle_in_radians = radians (Obj.repr (!angle)) in
  let result = ref (angle_in_radians) in
  let a = ref (3) in
  let sign = ref ((-.(1.0))) in
  let i = ref (0) in
  (try while (!i < accuracy) do
    try
  result := (!result +. ((!sign *. pow (Obj.repr (angle_in_radians)) (Obj.repr (!a))) /. factorial (Obj.repr (!a))));
  sign := (-.(!sign));
  a := (!a + 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and test_sin () =
  let __ret = ref (Obj.magic 0) in
  (try
  let eps = 0.0000001 in
  if (abs_float (taylor_sin (Obj.repr (0.0)) (Obj.repr (18)) (Obj.repr (10)) -. 0.0) > eps) then (
  (failwith ("sin(0) failed"));
  );
  if (abs_float (taylor_sin (Obj.repr (90.0)) (Obj.repr (18)) (Obj.repr (10)) -. 1.0) > eps) then (
  (failwith ("sin(90) failed"));
  );
  if (abs_float (taylor_sin (Obj.repr (180.0)) (Obj.repr (18)) (Obj.repr (10)) -. 0.0) > eps) then (
  (failwith ("sin(180) failed"));
  );
  if (abs_float (taylor_sin (Obj.repr (270.0)) (Obj.repr (18)) (Obj.repr (10)) -. (-.(1.0))) > eps) then (
  (failwith ("sin(270) failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_sin ());
  let res = taylor_sin (Obj.repr (64.0)) (Obj.repr (18)) (Obj.repr (10)) in
  print_endline (Printf.sprintf "%.15f" (res));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
