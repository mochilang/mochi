(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:21 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec log2 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let k = ref (0.0) in
  let v = ref (x) in
  (try while (!v >= 2.0) do
    try
  v := (!v /. 2.0);
  k := (!k +. 1.0);
    with Continue -> ()
  done with Break -> ());
  (try while (!v < 1.0) do
    try
  v := (!v *. 2.0);
  k := (!k -. 1.0);
    with Continue -> ()
  done with Break -> ());
  let z = ((!v -. 1.0) /. (!v +. 1.0)) in
  let zpow = ref (z) in
  let sum = ref (z) in
  let i = ref (3) in
  (try while (!i <= 9) do
    try
  zpow := ((!zpow *. z) *. z);
  sum := (!sum +. (!zpow /. float_of_int (!i)));
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  let ln2 = 0.6931471805599453 in
  __ret := (Obj.magic ((!k +. ((2.0 *. !sum) /. ln2))) : float); raise Return
  with Return -> !__ret)

and analyze_text text =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let single = ref ([] : (string * int) list) in
  let double = ref ([] : (string * int) list) in
  let n = String.length (text) in
  if (n = 0) then (
  __ret := (Obj.magic ([(__str ("single"), Obj.repr (!single)); (__str ("double"), Obj.repr (!double))]) : (string * Obj.t) list); raise Return
  );
  let last = (let __s = text in let __st = (n - 1) in let __en = n in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc (__str (last)) !single) then (
  single := ((__str (last), (List.assoc (__str (last)) (!single) + 1)) :: List.remove_assoc (__str (last)) (!single));
  ) else (
  single := ((__str (last), 1) :: List.remove_assoc (__str (last)) (!single));
  );
  let first = (let __s = text in let __st = 0 in let __en = 1 in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  let pair0 = (" " ^ first) in
  double := ((__str (pair0), 1) :: List.remove_assoc (__str (pair0)) (!double));
  let i = ref (0) in
  (try while (!i < (n - 1)) do
    try
  let ch = (let __s = text in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc (__str (ch)) !single) then (
  single := ((__str (ch), (List.assoc (__str (ch)) (!single) + 1)) :: List.remove_assoc (__str (ch)) (!single));
  ) else (
  single := ((__str (ch), 1) :: List.remove_assoc (__str (ch)) (!single));
  );
  let seq = (let __s = text in let __st = !i in let __en = (!i + 2) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc (__str (seq)) !double) then (
  double := ((__str (seq), (List.assoc (__str (seq)) (!double) + 1)) :: List.remove_assoc (__str (seq)) (!double));
  ) else (
  double := ((__str (seq), 1) :: List.remove_assoc (__str (seq)) (!double));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("single"), Obj.repr (!single)); (__str ("double"), Obj.repr (!double))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and round_to_int x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic (int_of_float ((x -. 0.5))) : int); raise Return
  );
  __ret := (Obj.magic (int_of_float ((x +. 0.5))) : int); raise Return
  with Return -> !__ret)

and calculate_entropy text =
  let __ret = ref (Obj.magic 0) in
  (try
  let counts = analyze_text (text) in
  let alphas = " abcdefghijklmnopqrstuvwxyz" in
  let total1 = ref (0) in
  (try List.iter (fun (ch, _) ->
    try
  total1 := (!total1 + List.assoc (__str (ch)) ((Obj.obj (List.assoc (__str ("single")) (counts) : Obj.t) : ( string * int ) list)));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("single")) (counts) : Obj.t) : ( string * int ) list)) with Break -> ());
  let h1 = ref (0.0) in
  let i = ref (0) in
  (try while (!i < String.length (alphas)) do
    try
  let ch = (let __s = alphas in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc (__str (ch)) (Obj.obj (List.assoc (__str ("single")) (counts) : Obj.t) : ( string * int ) list)) then (
  let prob = (float_of_int (List.assoc (__str (ch)) ((Obj.obj (List.assoc (__str ("single")) (counts) : Obj.t) : ( string * int ) list))) /. float_of_int (!total1)) in
  h1 := (!h1 +. (prob *. log2 (Obj.repr (prob))));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let first_entropy = (-.(!h1)) in
  print_endline (((string_of_int (round_to_int (Obj.repr (first_entropy)))) ^ ".0"));
  let total2 = ref (0) in
  (try List.iter (fun (seq, _) ->
    try
  total2 := (!total2 + List.assoc (__str (seq)) ((Obj.obj (List.assoc (__str ("double")) (counts) : Obj.t) : ( string * int ) list)));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("double")) (counts) : Obj.t) : ( string * int ) list)) with Break -> ());
  let h2 = ref (0.0) in
  let a0 = ref (0) in
  (try while (!a0 < String.length (alphas)) do
    try
  let ch0 = (let __s = alphas in let __st = !a0 in let __en = (!a0 + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  let a1 = ref (0) in
  (try while (!a1 < String.length (alphas)) do
    try
  let ch1 = (let __s = alphas in let __st = !a1 in let __en = (!a1 + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  let seq = (ch0 ^ ch1) in
  if (List.mem_assoc (__str (seq)) (Obj.obj (List.assoc (__str ("double")) (counts) : Obj.t) : ( string * int ) list)) then (
  let prob = (float_of_int (List.assoc (__str (seq)) ((Obj.obj (List.assoc (__str ("double")) (counts) : Obj.t) : ( string * int ) list))) /. float_of_int (!total2)) in
  h2 := (!h2 +. (prob *. log2 (Obj.repr (prob))));
  );
  a1 := (!a1 + 1);
    with Continue -> ()
  done with Break -> ());
  a0 := (!a0 + 1);
    with Continue -> ()
  done with Break -> ());
  let second_entropy = (-.(!h2)) in
  print_endline (((string_of_int (round_to_int (Obj.repr (second_entropy)))) ^ ".0"));
  let diff = (second_entropy -. first_entropy) in
  print_endline (((string_of_int (round_to_int (Obj.repr (diff)))) ^ ".0"));
    !__ret
  with Return -> !__ret)


let text1 = (("Behind Winston's back the voice " ^ "from the telescreen was still ") ^ "babbling and the overfulfilment")
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (calculate_entropy (text1));
  let text3 = (((((((((("Had repulsive dashwoods suspicion sincerity but advantage now him. " ^ "Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. ") ^ "You greatest jointure saw horrible. He private he on be imagine ") ^ "suppose. Fertile beloved evident through no service elderly is. Blind ") ^ "there if every no so at. Own neglected you preferred way sincerity ") ^ "delivered his attempted. To of message cottage windows do besides ") ^ "against uncivil.  Delightful unreserved impossible few estimating ") ^ "men favourable see entreaties. She propriety immediate was improving. ") ^ "He or entrance humoured likewise moderate. Much nor game son say ") ^ "feel. Fat make met can must form into gate. Me we offending prevailed ") ^ "discovery.") in
  ignore (calculate_entropy (text3));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
