(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrt x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref (if (x > 1.0) then (x /. 2.0) else 1.0) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := (0.5 *. (!guess +. (x /. !guess)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and runge_kutta_gills func x_initial y_initial step_size x_final =
  let __ret = ref ([] : (float) list) in
  (try
  let x_initial = (Obj.magic x_initial : float) in
  let y_initial = (Obj.magic y_initial : float) in
  let step_size = (Obj.magic step_size : float) in
  let x_final = (Obj.magic x_final : float) in
  if (x_initial >= x_final) then (
  (failwith ("The final value of x must be greater than initial value of x."));
  );
  if (step_size <= 0.0) then (
  (failwith ("Step size must be positive."));
  );
  let n = (Obj.magic ((x_final -. x_initial) /. step_size) : int) in
  let y = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  y := (Obj.magic (List.append (!y) [(Obj.magic (0.0) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  y := (List.mapi (fun __i __x -> if __i = 0 then y_initial else __x) (!y));
  let xi = ref (x_initial) in
  let idx = ref (0) in
  let root2 = sqrt (Obj.repr (2.0)) in
  (try while (!idx < n) do
    try
  let k1 = (step_size *. func (Obj.repr (!xi)) (Obj.repr ((let __l = !y in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  let k2 = (step_size *. func (Obj.repr ((!xi +. (step_size /. 2.0)))) (Obj.repr (((let __l = !y in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (k1 /. 2.0))))) in
  let k3 = (step_size *. func (Obj.repr ((!xi +. (step_size /. 2.0)))) (Obj.repr ((((let __l = !y in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (((-.(0.5)) +. (1.0 /. root2)) *. k1)) +. ((1.0 -. (1.0 /. root2)) *. k2))))) in
  let k4 = (step_size *. func (Obj.repr ((!xi +. step_size))) (Obj.repr ((((let __l = !y in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. ((1.0 /. root2) *. k2)) +. ((1.0 +. (1.0 /. root2)) *. k3))))) in
  y := (List.mapi (fun __i __x -> if __i = (!idx + 1) then ((let __l = !y in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((((k1 +. ((2.0 -. root2) *. k2)) +. ((2.0 +. root2) *. k3)) +. k4) /. 6.0)) else __x) (!y));
  xi := (!xi +. step_size);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!y) : float list); raise Return
  with Return -> !__ret)

and f1 x y =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  __ret := (Obj.magic (((x -. y) /. 2.0)) : float); raise Return
  with Return -> !__ret)


let y1 = ref (runge_kutta_gills (f1) (Obj.repr (0.0)) (Obj.repr (3.0)) (Obj.repr (0.2)) (Obj.repr (5.0)))
let rec f2 x y =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" ((let __l = !y1 in let __i = (List.length (!y1) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  let y2 = ref (runge_kutta_gills (f2) (Obj.repr ((-.(1.0)))) (Obj.repr (0.0)) (Obj.repr (0.2)) (Obj.repr (0.0))) in
  print_endline ((__str (!y2)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
