(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  ) else (
  __ret := (Obj.magic (x) : float); raise Return
  );
    !__ret
  with Return -> !__ret)

and validate_inputs x_initials step_size x_final =
  let __ret = ref (Obj.magic 0) in
  (try
  let x_initials = (Obj.magic x_initials : float list) in
  let step_size = (Obj.magic step_size : float) in
  let x_final = (Obj.magic x_final : float) in
  if ((let __l = x_initials in let __i = (List.length (x_initials) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) >= x_final) then (
  (failwith ("The final value of x must be greater than the initial values of x."));
  );
  if (step_size <= 0.0) then (
  (failwith ("Step size must be positive."));
  );
  let i = ref (0) in
  (try while (!i < (List.length (x_initials) - 1)) do
    try
  let diff = ((let __l = x_initials in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = x_initials in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if (abs_float (Obj.repr ((diff -. step_size))) > 0.0000000001) then (
  (failwith ("x-values must be equally spaced according to step size."));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and list_to_string xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : float list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if ((!i + 1) < List.length (xs)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and adams_bashforth_step2 f x_initials y_initials step_size x_final =
  let __ret = ref ([] : (float) list) in
  (try
  let x_initials = (Obj.magic x_initials : float list) in
  let y_initials = (Obj.magic y_initials : float list) in
  let step_size = (Obj.magic step_size : float) in
  let x_final = (Obj.magic x_final : float) in
  ignore (validate_inputs (x_initials) (Obj.repr (step_size)) (Obj.repr (x_final)));
  if ((List.length (x_initials) <> 2) || (List.length (y_initials) <> 2)) then (
  (failwith ("Insufficient initial points information."));
  );
  let x0 = ref ((let __l = x_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x1 = ref ((let __l = x_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let y = ref (([] : (float) list)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  let n = (Obj.magic ((x_final -. !x1) /. step_size) : int) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let term = ((3.0 *. f (Obj.repr (!x1)) (Obj.repr ((let __l = !y in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) -. f (Obj.repr (!x0)) (Obj.repr ((let __l = !y in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  let y_next = ((let __l = !y in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((step_size /. 2.0) *. term)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic (y_next) : float)]) : float list);
  x0 := !x1;
  x1 := (!x1 +. step_size);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!y) : float list); raise Return
  with Return -> !__ret)

and adams_bashforth_step3 f x_initials y_initials step_size x_final =
  let __ret = ref ([] : (float) list) in
  (try
  let x_initials = (Obj.magic x_initials : float list) in
  let y_initials = (Obj.magic y_initials : float list) in
  let step_size = (Obj.magic step_size : float) in
  let x_final = (Obj.magic x_final : float) in
  ignore (validate_inputs (x_initials) (Obj.repr (step_size)) (Obj.repr (x_final)));
  if ((List.length (x_initials) <> 3) || (List.length (y_initials) <> 3)) then (
  (failwith ("Insufficient initial points information."));
  );
  let x0 = ref ((let __l = x_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x1 = ref ((let __l = x_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x2 = ref ((let __l = x_initials in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let y = ref (([] : (float) list)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  let n = (Obj.magic ((x_final -. !x2) /. step_size) : int) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  let term = (((23.0 *. f (Obj.repr (!x2)) (Obj.repr ((let __l = !y in let __i = (!i + 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) -. (16.0 *. f (Obj.repr (!x1)) (Obj.repr ((let __l = !y in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) +. (5.0 *. f (Obj.repr (!x0)) (Obj.repr ((let __l = !y in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) in
  let y_next = ((let __l = !y in let __i = (!i + 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((step_size /. 12.0) *. term)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic (y_next) : float)]) : float list);
  x0 := !x1;
  x1 := !x2;
  x2 := (!x2 +. step_size);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!y) : float list); raise Return
  with Return -> !__ret)

and adams_bashforth_step4 f x_initials y_initials step_size x_final =
  let __ret = ref ([] : (float) list) in
  (try
  let x_initials = (Obj.magic x_initials : float list) in
  let y_initials = (Obj.magic y_initials : float list) in
  let step_size = (Obj.magic step_size : float) in
  let x_final = (Obj.magic x_final : float) in
  ignore (validate_inputs (x_initials) (Obj.repr (step_size)) (Obj.repr (x_final)));
  if ((List.length (x_initials) <> 4) || (List.length (y_initials) <> 4)) then (
  (failwith ("Insufficient initial points information."));
  );
  let x0 = ref ((let __l = x_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x1 = ref ((let __l = x_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x2 = ref ((let __l = x_initials in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x3 = ref ((let __l = x_initials in let __i = 3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let y = ref (([] : (float) list)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  let n = (Obj.magic ((x_final -. !x3) /. step_size) : int) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let term = ((((55.0 *. f (Obj.repr (!x3)) (Obj.repr ((let __l = !y in let __i = (!i + 3) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) -. (59.0 *. f (Obj.repr (!x2)) (Obj.repr ((let __l = !y in let __i = (!i + 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) +. (37.0 *. f (Obj.repr (!x1)) (Obj.repr ((let __l = !y in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) -. (9.0 *. f (Obj.repr (!x0)) (Obj.repr ((let __l = !y in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) in
  let y_next = ((let __l = !y in let __i = (!i + 3) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((step_size /. 24.0) *. term)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic (y_next) : float)]) : float list);
  x0 := !x1;
  x1 := !x2;
  x2 := !x3;
  x3 := (!x3 +. step_size);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!y) : float list); raise Return
  with Return -> !__ret)

and adams_bashforth_step5 f x_initials y_initials step_size x_final =
  let __ret = ref ([] : (float) list) in
  (try
  let x_initials = (Obj.magic x_initials : float list) in
  let y_initials = (Obj.magic y_initials : float list) in
  let step_size = (Obj.magic step_size : float) in
  let x_final = (Obj.magic x_final : float) in
  ignore (validate_inputs (x_initials) (Obj.repr (step_size)) (Obj.repr (x_final)));
  if ((List.length (x_initials) <> 5) || (List.length (y_initials) <> 5)) then (
  (failwith ("Insufficient initial points information."));
  );
  let x0 = ref ((let __l = x_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x1 = ref ((let __l = x_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x2 = ref ((let __l = x_initials in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x3 = ref ((let __l = x_initials in let __i = 3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let x4 = ref ((let __l = x_initials in let __i = 4 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let y = ref (([] : (float) list)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  y := (Obj.magic (List.append (!y) [(Obj.magic ((let __l = y_initials in let __i = 4 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  let n = (Obj.magic ((x_final -. !x4) /. step_size) : int) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  let term = (((((1901.0 *. f (Obj.repr (!x4)) (Obj.repr ((let __l = !y in let __i = (!i + 4) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) -. (2774.0 *. f (Obj.repr (!x3)) (Obj.repr ((let __l = !y in let __i = (!i + 3) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) -. (2616.0 *. f (Obj.repr (!x2)) (Obj.repr ((let __l = !y in let __i = (!i + 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) -. (1274.0 *. f (Obj.repr (!x1)) (Obj.repr ((let __l = !y in let __i = (!i + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) +. (251.0 *. f (Obj.repr (!x0)) (Obj.repr ((let __l = !y in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) in
  let y_next = ((let __l = !y in let __i = (!i + 4) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((step_size /. 720.0) *. term)) in
  y := (Obj.magic (List.append (!y) [(Obj.magic (y_next) : float)]) : float list);
  x0 := !x1;
  x1 := !x2;
  x2 := !x3;
  x3 := !x4;
  x4 := (!x4 +. step_size);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!y) : float list); raise Return
  with Return -> !__ret)

and f_x x y =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and f_xy x y =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  __ret := (Obj.magic ((x +. y)) : float); raise Return
  with Return -> !__ret)


let y2 = ref (adams_bashforth_step2 (f_x) ([0.0; 0.2]) ([0.0; 0.0]) (Obj.repr (0.2)) (Obj.repr (1.0)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((list_to_string (!y2)));
  let y3 = ref (adams_bashforth_step3 (f_xy) ([0.0; 0.2; 0.4]) ([0.0; 0.0; 0.04]) (Obj.repr (0.2)) (Obj.repr (1.0))) in
  print_endline ((Printf.sprintf "%.16g" ((let __l = !y3 in let __i = 3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  let y4 = ref (adams_bashforth_step4 (f_xy) ([0.0; 0.2; 0.4; 0.6]) ([0.0; 0.0; 0.04; 0.128]) (Obj.repr (0.2)) (Obj.repr (1.0))) in
  print_endline ((Printf.sprintf "%.16g" ((let __l = !y4 in let __i = 4 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  print_endline ((Printf.sprintf "%.16g" ((let __l = !y4 in let __i = 5 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  let y5 = ref (adams_bashforth_step5 (f_xy) ([0.0; 0.2; 0.4; 0.6; 0.8]) ([0.0; 0.0214; 0.0214; 0.22211; 0.42536]) (Obj.repr (0.2)) (Obj.repr (1.0))) in
  print_endline ((Printf.sprintf "%.16g" ((let __l = !y5 in let __i = (List.length (!y5) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
