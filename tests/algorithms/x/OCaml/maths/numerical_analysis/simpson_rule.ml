(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec f x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic (((x -. 0.0) *. (x -. 0.0))) : float); raise Return
  with Return -> !__ret)

and make_points a b h =
  let __ret = ref ([] : (float) list) in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let h = (Obj.magic h : float) in
  let points = ref (([] : (float) list)) in
  let x = ref ((a +. h)) in
  (try while (!x < (b -. h)) do
    try
  points := (Obj.magic (List.append (!points) [(Obj.magic (!x) : float)]) : float list);
  x := (!x +. h);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!points) : float list); raise Return
  with Return -> !__ret)

and simpson_rule boundary steps =
  let __ret = ref 0.0 in
  (try
  let boundary = (Obj.magic boundary : float list) in
  let steps = (Obj.magic steps : int) in
  if (steps <= 0) then (
  (failwith ("Number of steps must be greater than zero"));
  );
  let a = (let __l = boundary in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let b = (let __l = boundary in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let h = ((b -. a) /. float_of_int (steps)) in
  let pts = ref (make_points (Obj.repr (a)) (Obj.repr (b)) (Obj.repr (h))) in
  let y = ref (((h /. 3.0) *. f (Obj.repr (a)))) in
  let cnt = ref (2) in
  let i = ref (0) in
  (try while (!i < List.length (!pts)) do
    try
  let coeff = (4.0 -. (2.0 *. float_of_int (((!cnt mod 2 + 2) mod 2)))) in
  y := (!y +. (((h /. 3.0) *. coeff) *. f (Obj.repr ((let __l = !pts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))));
  cnt := (!cnt + 1);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y +. ((h /. 3.0) *. f (Obj.repr (b))));
  __ret := (Obj.magic (!y) : float); raise Return
  with Return -> !__ret)


let result = simpson_rule ([0.0; 1.0]) (Obj.repr (10))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (result)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
