(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow2_int n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and pow2_float n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1.0) in
  if (n >= 0) then (
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result *. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  let i = ref (0) in
  let m = (0 - n) in
  (try while (!i < m) do
    try
  result := (!result /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and lshift num k =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let k = (Obj.magic k : int) in
  let result = ref (num) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  result := (!result * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and rshift num k =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let k = (Obj.magic k : int) in
  let result = ref (num) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  result := ((!result - ((!result mod 2 + 2) mod 2)) / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and log2_floor x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  let n = ref (x) in
  let e = ref (0) in
  (try while (!n >= 2.0) do
    try
  n := (!n /. 2.0);
  e := (!e + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!n < 1.0) do
    try
  n := (!n *. 2.0);
  e := (!e - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!e) : int); raise Return
  with Return -> !__ret)

and float_to_bits x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  let num = ref (x) in
  let sign = ref (0) in
  if (!num < 0.0) then (
  sign := 1;
  num := (-.(!num));
  );
  let exp = log2_floor (Obj.repr (!num)) in
  let pow = pow2_float (Obj.repr (exp)) in
  let normalized = (!num /. pow) in
  let frac = (normalized -. 1.0) in
  let mantissa = (Obj.magic (frac *. pow2_float (Obj.repr (23))) : int) in
  let exp_bits = (exp + 127) in
  __ret := (Obj.magic (((lshift (Obj.repr (!sign)) (Obj.repr (31)) + lshift (Obj.repr (exp_bits)) (Obj.repr (23))) + mantissa)) : int); raise Return
  with Return -> !__ret)

and bits_to_float bits =
  let __ret = ref 0.0 in
  (try
  let bits = (Obj.magic bits : int) in
  let sign_bit = ((rshift (Obj.repr (bits)) (Obj.repr (31)) mod 2 + 2) mod 2) in
  let sign = ref (1.0) in
  if (sign_bit = 1) then (
  sign := (-.(1.0));
  );
  let exp_bits = ((rshift (Obj.repr (bits)) (Obj.repr (23)) mod 256 + 256) mod 256) in
  let exp = (exp_bits - 127) in
  let mantissa_bits = ((bits mod pow2_int (Obj.repr (23)) + pow2_int (Obj.repr (23))) mod pow2_int (Obj.repr (23))) in
  let mantissa = (1.0 +. (float_of_int (mantissa_bits) /. pow2_float (Obj.repr (23)))) in
  __ret := (Obj.magic (((!sign *. mantissa) *. pow2_float (Obj.repr (exp)))) : float); raise Return
  with Return -> !__ret)

and absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and is_close a b rel_tol =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let rel_tol = (Obj.magic rel_tol : float) in
  __ret := (Obj.magic ((absf (Obj.repr ((a -. b))) <= (rel_tol *. absf (Obj.repr (b))))) : bool); raise Return
  with Return -> !__ret)

and fast_inverse_sqrt number =
  let __ret = ref 0.0 in
  (try
  let number = (Obj.magic number : float) in
  if (number <= 0.0) then (
  (failwith ("Input must be a positive number."));
  );
  let i = float_to_bits (Obj.repr (number)) in
  let magic = 1597463007 in
  let y_bits = (magic - rshift (Obj.repr (i)) (Obj.repr (1))) in
  let y = ref (bits_to_float (Obj.repr (y_bits))) in
  y := (!y *. (1.5 -. (((0.5 *. number) *. !y) *. !y)));
  __ret := (Obj.magic (!y) : float); raise Return
  with Return -> !__ret)

and test_fast_inverse_sqrt () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (absf (Obj.repr ((fast_inverse_sqrt (Obj.repr (10.0)) -. 0.3156857923527257))) > 0.0001) then (
  (failwith ("fast_inverse_sqrt(10) failed"));
  );
  if (absf (Obj.repr ((fast_inverse_sqrt (Obj.repr (4.0)) -. 0.49915357479239103))) > 0.0001) then (
  (failwith ("fast_inverse_sqrt(4) failed"));
  );
  if (absf (Obj.repr ((fast_inverse_sqrt (Obj.repr (4.1)) -. 0.4932849504615651))) > 0.0001) then (
  (failwith ("fast_inverse_sqrt(4.1) failed"));
  );
  let i = ref (50) in
  (try while (!i < 60) do
    try
  let y = fast_inverse_sqrt (Obj.repr (float_of_int (!i))) in
  let actual = (1.0 /. sqrtApprox (Obj.repr (float_of_int (!i)))) in
  if not (is_close (Obj.repr (y)) (Obj.repr (actual)) (Obj.repr (0.00132))) then (
  (failwith ("relative error too high"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_fast_inverse_sqrt ());
  let i = ref (5) in
  (try while (!i <= 100) do
    try
  let diff = ((1.0 /. sqrtApprox (Obj.repr (float_of_int (!i)))) -. fast_inverse_sqrt (Obj.repr (float_of_int (!i)))) in
  print_endline ((((string_of_int (!i)) ^ ": ") ^ (Printf.sprintf "%.16g" (diff))));
  i := (!i + 5);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
