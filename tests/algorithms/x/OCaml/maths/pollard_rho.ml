(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (if (a < 0) then -(a) else a) in
  let y = ref (if (b < 0) then -(b) else b) in
  (try while (!y <> 0) do
    try
  let t = ((!x mod !y + !y) mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and rand_fn value step modulus =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  let step = (Obj.magic step : int) in
  let modulus = (Obj.magic modulus : int) in
  __ret := (Obj.magic (((((value * value) + step) mod modulus + modulus) mod modulus)) : int); raise Return
  with Return -> !__ret)

and pollard_rho num seed step attempts =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let num = (Obj.magic num : int) in
  let seed = (Obj.magic seed : int) in
  let step = (Obj.magic step : int) in
  let attempts = (Obj.magic attempts : int) in
  if (num < 2) then (
  (failwith ("The input value cannot be less than 2"));
  );
  if ((num > 2) && (((num mod 2 + 2) mod 2) = 0)) then (
  __ret := (Obj.magic ([(__str ("factor"), Obj.repr (2)); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  );
  let s = ref (seed) in
  let st = ref (step) in
  let i = ref (0) in
  (try while (!i < attempts) do
    try
  let tortoise = ref (!s) in
  let hare = ref (!s) in
  (try while true do
    try
  tortoise := rand_fn (Obj.repr (!tortoise)) (Obj.repr (!st)) (Obj.repr (num));
  hare := rand_fn (Obj.repr (!hare)) (Obj.repr (!st)) (Obj.repr (num));
  hare := rand_fn (Obj.repr (!hare)) (Obj.repr (!st)) (Obj.repr (num));
  let divisor = gcd (Obj.repr ((!hare - !tortoise))) (Obj.repr (num)) in
  if (divisor = 1) then (
  raise Continue;
  ) else (
  if (divisor = num) then (
  raise Break;
  ) else (
  __ret := (Obj.magic ([(__str ("factor"), Obj.repr (divisor)); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  );
  );
    with Continue -> ()
  done with Break -> ());
  s := !hare;
  st := (!st + 1);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("factor"), Obj.repr (0)); (__str ("ok"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and test_pollard_rho () =
  let __ret = ref (Obj.magic 0) in
  (try
  let r1 = pollard_rho (Obj.repr (8051)) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (5)) in
  if (not ((Obj.obj (List.assoc (__str ("ok")) (r1) : Obj.t) : bool)) || (((Obj.obj (List.assoc (__str ("factor")) (r1) : Obj.t) : int) <> 83) && ((Obj.obj (List.assoc (__str ("factor")) (r1) : Obj.t) : int) <> 97))) then (
  (failwith ("test1 failed"));
  );
  let r2 = pollard_rho (Obj.repr (10403)) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (5)) in
  if (not ((Obj.obj (List.assoc (__str ("ok")) (r2) : Obj.t) : bool)) || (((Obj.obj (List.assoc (__str ("factor")) (r2) : Obj.t) : int) <> 101) && ((Obj.obj (List.assoc (__str ("factor")) (r2) : Obj.t) : int) <> 103))) then (
  (failwith ("test2 failed"));
  );
  let r3 = pollard_rho (Obj.repr (100)) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (3)) in
  if (not ((Obj.obj (List.assoc (__str ("ok")) (r3) : Obj.t) : bool)) || ((Obj.obj (List.assoc (__str ("factor")) (r3) : Obj.t) : int) <> 2)) then (
  (failwith ("test3 failed"));
  );
  let r4 = pollard_rho (Obj.repr (17)) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (3)) in
  if (Obj.obj (List.assoc (__str ("ok")) (r4) : Obj.t) : bool) then (
  (failwith ("test4 failed"));
  );
  let r5 = pollard_rho (Obj.repr (((17 * 17) * 17))) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (3)) in
  if (not ((Obj.obj (List.assoc (__str ("ok")) (r5) : Obj.t) : bool)) || ((Obj.obj (List.assoc (__str ("factor")) (r5) : Obj.t) : int) <> 17)) then (
  (failwith ("test5 failed"));
  );
  let r6 = pollard_rho (Obj.repr (((17 * 17) * 17))) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (1)) in
  if (Obj.obj (List.assoc (__str ("ok")) (r6) : Obj.t) : bool) then (
  (failwith ("test6 failed"));
  );
  let r7 = pollard_rho (Obj.repr (((3 * 5) * 7))) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (3)) in
  if (not ((Obj.obj (List.assoc (__str ("ok")) (r7) : Obj.t) : bool)) || ((Obj.obj (List.assoc (__str ("factor")) (r7) : Obj.t) : int) <> 21)) then (
  (failwith ("test7 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_pollard_rho ());
  let a = pollard_rho (Obj.repr (100)) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (3)) in
  if (Obj.obj (List.assoc (__str ("ok")) (a) : Obj.t) : bool) then (
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("factor")) (a) : Obj.t) : int))));
  ) else (
  print_endline ("None");
  );
  let b = pollard_rho (Obj.repr (17)) (Obj.repr (2)) (Obj.repr (1)) (Obj.repr (3)) in
  if (Obj.obj (List.assoc (__str ("ok")) (b) : Obj.t) : bool) then (
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("factor")) (b) : Obj.t) : int))));
  ) else (
  print_endline ("None");
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
