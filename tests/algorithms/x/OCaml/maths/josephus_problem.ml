(* Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec josephus_recursive num_people step_size =
  let __ret = ref 0 in
  (try
  let num_people = (Obj.magic num_people : int) in
  let step_size = (Obj.magic step_size : int) in
  if ((num_people <= 0) || (step_size <= 0)) then (
  (failwith ("num_people or step_size is not a positive integer."));
  );
  if (num_people = 1) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  __ret := (Obj.magic ((((josephus_recursive (Obj.repr ((num_people - 1))) (Obj.repr (step_size)) + step_size) mod num_people + num_people) mod num_people)) : int); raise Return
  with Return -> !__ret)

and find_winner num_people step_size =
  let __ret = ref 0 in
  (try
  let num_people = (Obj.magic num_people : int) in
  let step_size = (Obj.magic step_size : int) in
  __ret := (Obj.magic ((josephus_recursive (Obj.repr (num_people)) (Obj.repr (step_size)) + 1)) : int); raise Return
  with Return -> !__ret)

and remove_at xs idx =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i <> idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and josephus_iterative num_people step_size =
  let __ret = ref 0 in
  (try
  let num_people = (Obj.magic num_people : int) in
  let step_size = (Obj.magic step_size : int) in
  if ((num_people <= 0) || (step_size <= 0)) then (
  (failwith ("num_people or step_size is not a positive integer."));
  );
  let circle = ref (([] : (int) list)) in
  let i = ref (1) in
  (try while (!i <= num_people) do
    try
  circle := (Obj.magic (List.append (!circle) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let current = ref (0) in
  (try while (List.length (!circle) > 1) do
    try
  current := ((((!current + step_size) - 1) mod List.length (!circle) + List.length (!circle)) mod List.length (!circle));
  circle := (Obj.magic remove_at (!circle) (Obj.repr (!current)) : int list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = !circle in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int); raise Return
  with Return -> !__ret)


let r = josephus_recursive (Obj.repr (7)) (Obj.repr (3))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((string_of_int (Obj.magic (r) : int)));
  print_endline ((string_of_int (Obj.magic (find_winner (Obj.repr (7)) (Obj.repr (3))) : int)));
  print_endline ((string_of_int (Obj.magic (josephus_iterative (Obj.repr (7)) (Obj.repr (3))) : int)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
