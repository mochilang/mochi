(* Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binary_exp_recursive base exponent =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exponent = (Obj.magic exponent : int) in
  if (exponent < 0) then (
  (failwith ("exponent must be non-negative"));
  );
  if (exponent = 0) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  if (((exponent mod 2 + 2) mod 2) = 1) then (
  __ret := (Obj.magic ((binary_exp_recursive (Obj.repr (base)) (Obj.repr ((exponent - 1))) *. base)) : float); raise Return
  );
  let half = binary_exp_recursive (Obj.repr (base)) (Obj.repr ((exponent / 2))) in
  __ret := (Obj.magic ((half *. half)) : float); raise Return
  with Return -> !__ret)

and binary_exp_iterative base exponent =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exponent = (Obj.magic exponent : int) in
  if (exponent < 0) then (
  (failwith ("exponent must be non-negative"));
  );
  let result = ref (1.0) in
  let b = ref (base) in
  let e = ref (exponent) in
  (try while (!e > 0) do
    try
  if (((!e mod 2 + 2) mod 2) = 1) then (
  result := (!result *. !b);
  );
  b := (!b *. !b);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and binary_exp_mod_recursive base exponent modulus =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exponent = (Obj.magic exponent : int) in
  let modulus = (Obj.magic modulus : int) in
  if (exponent < 0) then (
  (failwith ("exponent must be non-negative"));
  );
  if (modulus <= 0) then (
  (failwith ("modulus must be positive"));
  );
  if (exponent = 0) then (
  __ret := (Obj.magic (((1 mod modulus + modulus) mod modulus)) : int); raise Return
  );
  if (((exponent mod 2 + 2) mod 2) = 1) then (
  __ret := (Obj.magic ((((binary_exp_mod_recursive (Obj.repr (base)) (Obj.repr ((exponent - 1))) (Obj.repr (modulus)) * ((base mod modulus + modulus) mod modulus)) mod modulus + modulus) mod modulus)) : int); raise Return
  );
  let r = binary_exp_mod_recursive (Obj.repr (base)) (Obj.repr ((exponent / 2))) (Obj.repr (modulus)) in
  __ret := (Obj.magic ((((r * r) mod modulus + modulus) mod modulus)) : int); raise Return
  with Return -> !__ret)

and binary_exp_mod_iterative base exponent modulus =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exponent = (Obj.magic exponent : int) in
  let modulus = (Obj.magic modulus : int) in
  if (exponent < 0) then (
  (failwith ("exponent must be non-negative"));
  );
  if (modulus <= 0) then (
  (failwith ("modulus must be positive"));
  );
  let result = ref (((1 mod modulus + modulus) mod modulus)) in
  let b = ref (((base mod modulus + modulus) mod modulus)) in
  let e = ref (exponent) in
  (try while (!e > 0) do
    try
  if (((!e mod 2 + 2) mod 2) = 1) then (
  result := (((!result * !b) mod modulus + modulus) mod modulus);
  );
  b := (((!b * !b) mod modulus + modulus) mod modulus);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_float (binary_exp_recursive (Obj.repr (3.0)) (Obj.repr (5))));
  print_endline (string_of_float (binary_exp_iterative (Obj.repr (1.5)) (Obj.repr (4))));
  print_endline (string_of_int (binary_exp_mod_recursive (Obj.repr (3)) (Obj.repr (4)) (Obj.repr (5))));
  print_endline (string_of_int (binary_exp_mod_iterative (Obj.repr (11)) (Obj.repr (13)) (Obj.repr (7))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
