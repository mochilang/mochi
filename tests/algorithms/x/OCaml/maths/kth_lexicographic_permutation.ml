(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec remove_at xs idx =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i <> idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and kth_permutation k n =
  let __ret = ref ([] : (int) list) in
  (try
  k := (Obj.magic !k : int);
  let n = (Obj.magic n : int) in
  if (n <= 0) then (
  (failwith ("n must be positive"));
  );
  let factorials = ref ([1]) in
  let i = ref (2) in
  (try while (!i < n) do
    try
  factorials := (Obj.magic (List.append (!factorials) [(Obj.magic (((let __l = !factorials in let __i = (List.length (!factorials) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * !i)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let total = ((let __l = !factorials in let __i = (List.length (!factorials) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * n) in
  if ((!k < 0) || (!k >= total)) then (
  (failwith ("k out of bounds"));
  );
  let elements = ref (([] : (int) list)) in
  let e = ref (0) in
  (try while (!e < n) do
    try
  elements := (Obj.magic (List.append (!elements) [(Obj.magic (!e) : int)]) : int list);
  e := (!e + 1);
    with Continue -> ()
  done with Break -> ());
  let permutation = ref (([] : (int) list)) in
  let idx = ref ((List.length (!factorials) - 1)) in
  (try while (!idx >= 0) do
    try
  let factorial = (let __l = !factorials in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let number = (!k / factorial) in
  k := ((!k mod factorial + factorial) mod factorial);
  permutation := (Obj.magic (List.append (!permutation) [(Obj.magic ((let __l = !elements in let __i = number in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  elements := (Obj.magic remove_at (!elements) (Obj.repr (number)) : int list);
  idx := (!idx - 1);
    with Continue -> ()
  done with Break -> ());
  permutation := (Obj.magic (List.append (!permutation) [(Obj.magic ((let __l = !elements in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  __ret := (Obj.magic (!permutation) : int list); raise Return
  with Return -> !__ret)

and list_equal a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int list) in
  let b = (Obj.magic b : int list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and list_to_string xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : int list) in
  if (List.length (xs) = 0) then (
  __ret := (Obj.magic ("[]") : string); raise Return
  );
  let s = ref (("[" ^ (string_of_int ((let __l = xs in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) in
  let i = ref (1) in
  (try while (!i < List.length (xs)) do
    try
  s := ((!s ^ ", ") ^ (string_of_int ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and test_kth_permutation () =
  let __ret = ref (Obj.magic 0) in
  (try
  let expected1 = ref ([0; 1; 2; 3; 4]) in
  let res1 = ref (kth_permutation (ref (0)) (Obj.repr (5))) in
  if not (list_equal (!res1) (!expected1)) then (
  (failwith ("test case 1 failed"));
  );
  let expected2 = ref ([1; 3; 0; 2]) in
  let res2 = ref (kth_permutation (ref (10)) (Obj.repr (4))) in
  if not (list_equal (!res2) (!expected2)) then (
  (failwith ("test case 2 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_kth_permutation ());
  let res = ref (kth_permutation (ref (10)) (Obj.repr (4))) in
  print_endline ((list_to_string (!res)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
