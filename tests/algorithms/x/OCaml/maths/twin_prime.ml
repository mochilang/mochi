(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec is_prime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (((n mod 2 + 2) mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  let i = ref (3) in
  (try while ((!i * !i) <= n) do
    try
  if (((n mod !i + !i) mod !i) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and twin_prime number =
  let __ret = ref 0 in
  (try
  let number = (Obj.magic number : int) in
  if (is_prime (Obj.repr (number)) && is_prime (Obj.repr ((number + 2)))) then (
  __ret := (Obj.magic ((number + 2)) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and test_twin_prime () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (twin_prime (Obj.repr (3)) <> 5) then (
  (failwith ("twin_prime(3) failed"));
  );
  if (twin_prime (Obj.repr (4)) <> -(1)) then (
  (failwith ("twin_prime(4) failed"));
  );
  if (twin_prime (Obj.repr (5)) <> 7) then (
  (failwith ("twin_prime(5) failed"));
  );
  if (twin_prime (Obj.repr (17)) <> 19) then (
  (failwith ("twin_prime(17) failed"));
  );
  if (twin_prime (Obj.repr (0)) <> -(1)) then (
  (failwith ("twin_prime(0) failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_twin_prime ());
  print_endline (string_of_int (twin_prime (Obj.repr (3))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
