(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec identity n =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let i = ref (0) in
  let mat = ref (([] : (int list) list)) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!i = !j) then (
  row := (Obj.magic (List.append (!row) [(Obj.magic (1) : int)]) : int list);
  ) else (
  row := (Obj.magic (List.append (!row) [(Obj.magic (0) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  mat := (Obj.magic (List.append (!mat) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!mat) : int list list); raise Return
  with Return -> !__ret)

and matrix_mul a b =
  let __ret = ref ([] : (int list) list) in
  (try
  let a = (Obj.magic a : int list list) in
  let b = (Obj.magic b : int list list) in
  let n = List.length (a) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  let cell = ref (0) in
  let k = ref (0) in
  (try while (!k < n) do
    try
  cell := (!cell + ((let __l = (let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * (let __l = (let __l = b in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic (List.append (!row) [(Obj.magic (!cell) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and matrix_pow base exp =
  let __ret = ref ([] : (int list) list) in
  (try
  let base = (Obj.magic base : int list list) in
  let exp = (Obj.magic exp : int) in
  let result = ref (identity (Obj.repr (List.length (base)))) in
  let b = ref (base) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if (((!e mod 2 + 2) mod 2) = 1) then (
  result := (Obj.magic matrix_mul (!result) (!b) : int list list);
  );
  b := (Obj.magic matrix_mul (!b) (!b) : int list list);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and fibonacci_with_matrix_exponentiation n f1 f2 =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let f1 = (Obj.magic f1 : int) in
  let f2 = (Obj.magic f2 : int) in
  if (n = 1) then (
  __ret := (Obj.magic (f1) : int); raise Return
  );
  if (n = 2) then (
  __ret := (Obj.magic (f2) : int); raise Return
  );
  let base = ref ([[1; 1]; [1; 0]]) in
  let m = ref (matrix_pow (!base) (Obj.repr ((n - 2)))) in
  __ret := (Obj.magic (((f2 * (let __l = (let __l = !m in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) + (f1 * (let __l = (let __l = !m in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) : int); raise Return
  with Return -> !__ret)

and simple_fibonacci n f1 f2 =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let f1 = (Obj.magic f1 : int) in
  let f2 = (Obj.magic f2 : int) in
  if (n = 1) then (
  __ret := (Obj.magic (f1) : int); raise Return
  );
  if (n = 2) then (
  __ret := (Obj.magic (f2) : int); raise Return
  );
  let a = ref (f1) in
  let b = ref (f2) in
  let count = ref ((n - 2)) in
  (try while (!count > 0) do
    try
  let tmp = (!a + !b) in
  a := !b;
  b := tmp;
  count := (!count - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!b) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (fibonacci_with_matrix_exponentiation (Obj.repr (1)) (Obj.repr (5)) (Obj.repr (6)))));
  print_endline ((string_of_int (fibonacci_with_matrix_exponentiation (Obj.repr (2)) (Obj.repr (10)) (Obj.repr (11)))));
  print_endline ((string_of_int (fibonacci_with_matrix_exponentiation (Obj.repr (13)) (Obj.repr (0)) (Obj.repr (1)))));
  print_endline ((string_of_int (fibonacci_with_matrix_exponentiation (Obj.repr (10)) (Obj.repr (5)) (Obj.repr (9)))));
  print_endline ((string_of_int (fibonacci_with_matrix_exponentiation (Obj.repr (9)) (Obj.repr (2)) (Obj.repr (3)))));
  print_endline ((string_of_int (simple_fibonacci (Obj.repr (1)) (Obj.repr (5)) (Obj.repr (6)))));
  print_endline ((string_of_int (simple_fibonacci (Obj.repr (2)) (Obj.repr (10)) (Obj.repr (11)))));
  print_endline ((string_of_int (simple_fibonacci (Obj.repr (13)) (Obj.repr (0)) (Obj.repr (1)))));
  print_endline ((string_of_int (simple_fibonacci (Obj.repr (10)) (Obj.repr (5)) (Obj.repr (9)))));
  print_endline ((string_of_int (simple_fibonacci (Obj.repr (9)) (Obj.repr (2)) (Obj.repr (3)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
