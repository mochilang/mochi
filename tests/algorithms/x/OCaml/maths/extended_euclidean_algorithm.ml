(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs_val n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  __ret := (Obj.magic (-(n)) : int); raise Return
  );
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

and extended_euclidean_algorithm a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (abs_val (Obj.repr (a)) = 1) then (
  __ret := (Obj.magic ([(__str ("x"), Obj.repr (a)); (__str ("y"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  if (abs_val (Obj.repr (b)) = 1) then (
  __ret := (Obj.magic ([(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr (b))]) : (string * Obj.t) list); raise Return
  );
  let old_remainder = ref (a) in
  let remainder = ref (b) in
  let old_coeff_a = ref (1) in
  let coeff_a = ref (0) in
  let old_coeff_b = ref (0) in
  let coeff_b = ref (1) in
  (try while (!remainder <> 0) do
    try
  let quotient = (!old_remainder / !remainder) in
  let temp_remainder = (!old_remainder - (quotient * !remainder)) in
  old_remainder := !remainder;
  remainder := temp_remainder;
  let temp_a = (!old_coeff_a - (quotient * !coeff_a)) in
  old_coeff_a := !coeff_a;
  coeff_a := temp_a;
  let temp_b = (!old_coeff_b - (quotient * !coeff_b)) in
  old_coeff_b := !coeff_b;
  coeff_b := temp_b;
    with Continue -> ()
  done with Break -> ());
  if (a < 0) then (
  old_coeff_a := -(!old_coeff_a);
  );
  if (b < 0) then (
  old_coeff_b := -(!old_coeff_b);
  );
  __ret := (Obj.magic ([(__str ("x"), Obj.repr (!old_coeff_a)); (__str ("y"), Obj.repr (!old_coeff_b))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and test_extended_euclidean_algorithm () =
  let __ret = ref (Obj.magic 0) in
  (try
  let r1 = extended_euclidean_algorithm (Obj.repr (1)) (Obj.repr (24)) in
  if (((Obj.obj (List.assoc (__str ("x")) (r1) : Obj.t) : int) <> 1) || ((Obj.obj (List.assoc (__str ("y")) (r1) : Obj.t) : int) <> 0)) then (
  (failwith ("test1 failed"));
  );
  let r2 = extended_euclidean_algorithm (Obj.repr (8)) (Obj.repr (14)) in
  if (((Obj.obj (List.assoc (__str ("x")) (r2) : Obj.t) : int) <> 2) || ((Obj.obj (List.assoc (__str ("y")) (r2) : Obj.t) : int) <> -(1))) then (
  (failwith ("test2 failed"));
  );
  let r3 = extended_euclidean_algorithm (Obj.repr (240)) (Obj.repr (46)) in
  if (((Obj.obj (List.assoc (__str ("x")) (r3) : Obj.t) : int) <> -(9)) || ((Obj.obj (List.assoc (__str ("y")) (r3) : Obj.t) : int) <> 47)) then (
  (failwith ("test3 failed"));
  );
  let r4 = extended_euclidean_algorithm (Obj.repr (1)) (Obj.repr (-(4))) in
  if (((Obj.obj (List.assoc (__str ("x")) (r4) : Obj.t) : int) <> 1) || ((Obj.obj (List.assoc (__str ("y")) (r4) : Obj.t) : int) <> 0)) then (
  (failwith ("test4 failed"));
  );
  let r5 = extended_euclidean_algorithm (Obj.repr (-(2))) (Obj.repr (-(4))) in
  if (((Obj.obj (List.assoc (__str ("x")) (r5) : Obj.t) : int) <> -(1)) || ((Obj.obj (List.assoc (__str ("y")) (r5) : Obj.t) : int) <> 0)) then (
  (failwith ("test5 failed"));
  );
  let r6 = extended_euclidean_algorithm (Obj.repr (0)) (Obj.repr (-(4))) in
  if (((Obj.obj (List.assoc (__str ("x")) (r6) : Obj.t) : int) <> 0) || ((Obj.obj (List.assoc (__str ("y")) (r6) : Obj.t) : int) <> -(1))) then (
  (failwith ("test6 failed"));
  );
  let r7 = extended_euclidean_algorithm (Obj.repr (2)) (Obj.repr (0)) in
  if (((Obj.obj (List.assoc (__str ("x")) (r7) : Obj.t) : int) <> 1) || ((Obj.obj (List.assoc (__str ("y")) (r7) : Obj.t) : int) <> 0)) then (
  (failwith ("test7 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_extended_euclidean_algorithm ());
  let res = extended_euclidean_algorithm (Obj.repr (240)) (Obj.repr (46)) in
  print_endline ((((("(" ^ (string_of_int ((Obj.obj (List.assoc (__str ("x")) (res) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("y")) (res) : Obj.t) : int)))) ^ ")"));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
