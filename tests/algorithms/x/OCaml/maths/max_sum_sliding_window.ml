(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec max_sum_sliding_window arr k =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let k = (Obj.magic k : int) in
  if ((k < 0) || (List.length (arr) < k)) then (
  (failwith ("Invalid Input"));
  );
  let idx = ref (0) in
  let current_sum = ref (0) in
  (try while (!idx < k) do
    try
  current_sum := (!current_sum + (let __l = arr in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let max_sum = ref (!current_sum) in
  let i = ref (0) in
  (try while (!i < (List.length (arr) - k)) do
    try
  current_sum := ((!current_sum - (let __l = arr in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) + (let __l = arr in let __i = (!i + k) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  if (!current_sum > !max_sum) then (
  max_sum := !current_sum;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_sum) : int); raise Return
  with Return -> !__ret)

and test_max_sum_sliding_window () =
  let __ret = ref (Obj.magic 0) in
  (try
  let arr1 = ref ([1; 4; 2; 10; 2; 3; 1; 0; 20]) in
  if (max_sum_sliding_window (!arr1) (Obj.repr (4)) <> 24) then (
  (failwith ("test1 failed"));
  );
  let arr2 = ref ([1; 4; 2; 10; 2; 13; 1; 0; 2]) in
  if (max_sum_sliding_window (!arr2) (Obj.repr (4)) <> 27) then (
  (failwith ("test2 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_max_sum_sliding_window ());
  let sample = ref ([1; 4; 2; 10; 2; 3; 1; 0; 20]) in
  print_endline ((string_of_int (max_sum_sliding_window (!sample) (Obj.repr (4)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
