(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec mod_ a n =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let n = (Obj.magic n : int) in
  let r = ((a mod n + n) mod n) in
  if (r < 0) then (
  __ret := (Obj.magic ((r + n)) : int); raise Return
  );
  __ret := (Obj.magic (r) : int); raise Return
  with Return -> !__ret)

and greatest_common_divisor a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (if (a < 0) then -(a) else a) in
  let y = ref (if (b < 0) then -(b) else b) in
  (try while (!y <> 0) do
    try
  let t = ((!x mod !y + !y) mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and extended_gcd a b =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (b = 0) then (
  __ret := (Obj.magic ([a; 1; 0]) : int list); raise Return
  );
  let res = ref (extended_gcd (Obj.repr (b)) (Obj.repr (((a mod b + b) mod b)))) in
  let d = (let __l = !res in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let p = (let __l = !res in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let q = (let __l = !res in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let x = q in
  let y = (p - (q * (a / b))) in
  __ret := (Obj.magic ([d; x; y]) : int list); raise Return
  with Return -> !__ret)

and extended_euclid a b =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (b = 0) then (
  __ret := (Obj.magic ([1; 0]) : int list); raise Return
  );
  let res = ref (extended_euclid (Obj.repr (b)) (Obj.repr (((a mod b + b) mod b)))) in
  let x = (let __l = !res in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let y = ((let __l = !res in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - ((a / b) * (let __l = !res in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  __ret := (Obj.magic ([x; y]) : int list); raise Return
  with Return -> !__ret)

and invert_modulo a n =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let n = (Obj.magic n : int) in
  let res = ref (extended_euclid (Obj.repr (a)) (Obj.repr (n))) in
  let inv = (let __l = !res in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  __ret := (Obj.magic (mod_ (Obj.repr (inv)) (Obj.repr (n))) : int); raise Return
  with Return -> !__ret)

and modular_division a b n =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let n = (Obj.magic n : int) in
  if (n <= 1) then (
  (failwith ("n must be > 1"));
  );
  if (a <= 0) then (
  (failwith ("a must be > 0"));
  );
  if (greatest_common_divisor (Obj.repr (a)) (Obj.repr (n)) <> 1) then (
  (failwith ("gcd(a,n) != 1"));
  );
  let eg = ref (extended_gcd (Obj.repr (n)) (Obj.repr (a))) in
  let s = (let __l = !eg in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  __ret := (Obj.magic (mod_ (Obj.repr ((b * s))) (Obj.repr (n))) : int); raise Return
  with Return -> !__ret)

and modular_division2 a b n =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let n = (Obj.magic n : int) in
  let s = invert_modulo (Obj.repr (a)) (Obj.repr (n)) in
  __ret := (Obj.magic (mod_ (Obj.repr ((b * s))) (Obj.repr (n))) : int); raise Return
  with Return -> !__ret)

and tests () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (modular_division (Obj.repr (4)) (Obj.repr (8)) (Obj.repr (5)) <> 2) then (
  (failwith ("md1"));
  );
  if (modular_division (Obj.repr (3)) (Obj.repr (8)) (Obj.repr (5)) <> 1) then (
  (failwith ("md2"));
  );
  if (modular_division (Obj.repr (4)) (Obj.repr (11)) (Obj.repr (5)) <> 4) then (
  (failwith ("md3"));
  );
  if (modular_division2 (Obj.repr (4)) (Obj.repr (8)) (Obj.repr (5)) <> 2) then (
  (failwith ("md21"));
  );
  if (modular_division2 (Obj.repr (3)) (Obj.repr (8)) (Obj.repr (5)) <> 1) then (
  (failwith ("md22"));
  );
  if (modular_division2 (Obj.repr (4)) (Obj.repr (11)) (Obj.repr (5)) <> 4) then (
  (failwith ("md23"));
  );
  if (invert_modulo (Obj.repr (2)) (Obj.repr (5)) <> 3) then (
  (failwith ("inv"));
  );
  let eg = ref (extended_gcd (Obj.repr (10)) (Obj.repr (6))) in
  if ((((let __l = !eg in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 2) || ((let __l = !eg in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> -(1))) || ((let __l = !eg in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 2)) then (
  (failwith ("eg"));
  );
  let eu = ref (extended_euclid (Obj.repr (10)) (Obj.repr (6))) in
  if (((let __l = !eu in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> -(1)) || ((let __l = !eu in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 2)) then (
  (failwith ("eu"));
  );
  if (greatest_common_divisor (Obj.repr (121)) (Obj.repr (11)) <> 11) then (
  (failwith ("gcd"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (tests ());
  print_endline ((string_of_int (modular_division (Obj.repr (4)) (Obj.repr (8)) (Obj.repr (5)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
