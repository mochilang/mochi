(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec normalize_index index n =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  let n = (Obj.magic n : int) in
  if (index < 0) then (
  __ret := (Obj.magic ((n + index)) : int); raise Return
  );
  __ret := (Obj.magic (index) : int); raise Return
  with Return -> !__ret)

and find_max_iterative nums =
  let __ret = ref 0.0 in
  (try
  let nums = (Obj.magic nums : float list) in
  if (List.length (nums) = 0) then (
  (failwith ("find_max_iterative() arg is an empty sequence"));
  );
  let max_num = ref ((let __l = nums in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  let x = (let __l = nums in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (x > !max_num) then (
  max_num := x;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_num) : float); raise Return
  with Return -> !__ret)

and find_max_recursive nums left right =
  let __ret = ref 0.0 in
  (try
  let nums = (Obj.magic nums : float list) in
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  let n = List.length (nums) in
  if (n = 0) then (
  (failwith ("find_max_recursive() arg is an empty sequence"));
  );
  if ((((left >= n) || (left < (0 - n))) || (right >= n)) || (right < (0 - n))) then (
  (failwith ("list index out of range"));
  );
  let l = ref (normalize_index (Obj.repr (left)) (Obj.repr (n))) in
  let r = ref (normalize_index (Obj.repr (right)) (Obj.repr (n))) in
  if (!l = !r) then (
  __ret := (Obj.magic ((let __l = nums in let __i = !l in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float); raise Return
  );
  let mid = ((!l + !r) / 2) in
  let left_max = find_max_recursive (nums) (Obj.repr (!l)) (Obj.repr (mid)) in
  let right_max = find_max_recursive (nums) (Obj.repr ((mid + 1))) (Obj.repr (!r)) in
  if (left_max >= right_max) then (
  __ret := (Obj.magic (left_max) : float); raise Return
  );
  __ret := (Obj.magic (right_max) : float); raise Return
  with Return -> !__ret)

and test_find_max () =
  let __ret = ref (Obj.magic 0) in
  (try
  let arr = ref ([2.0; 4.0; 9.0; 7.0; 19.0; 94.0; 5.0]) in
  if (find_max_iterative (!arr) <> 94.0) then (
  (failwith ("find_max_iterative failed"));
  );
  if (find_max_recursive (!arr) (Obj.repr (0)) (Obj.repr ((List.length (!arr) - 1))) <> 94.0) then (
  (failwith ("find_max_recursive failed"));
  );
  if (find_max_recursive (!arr) (Obj.repr (-(List.length (!arr)))) (Obj.repr (-(1))) <> 94.0) then (
  (failwith ("negative index handling failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_find_max ());
  let nums = ref ([2.0; 4.0; 9.0; 7.0; 19.0; 94.0; 5.0]) in
  print_endline (string_of_float (find_max_iterative (!nums)));
  print_endline (string_of_float (find_max_recursive (!nums) (Obj.repr (0)) (Obj.repr ((List.length (!nums) - 1)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
