(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec odd_sieve num =
  let __ret = ref ([] : (int) list) in
  (try
  let num = (Obj.magic num : int) in
  if (num <= 2) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  if (num = 3) then (
  __ret := (Obj.magic ([2]) : int list); raise Return
  );
  let size = ((num / 2) - 1) in
  let sieve = ref (([] : (bool) list)) in
  let idx = ref (0) in
  (try while (!idx < size) do
    try
  sieve := (Obj.magic (List.append (!sieve) [(Obj.magic (true) : bool)]) : bool list);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (3) in
  (try while ((!i * !i) <= num) do
    try
  let s_idx = ((!i / 2) - 1) in
  if (let __l = !sieve in let __i = s_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) then (
  let j = ref ((!i * !i)) in
  (try while (!j < num) do
    try
  let j_idx = ((!j / 2) - 1) in
  sieve := (List.mapi (fun __i __x -> if __i = j_idx then false else __x) (!sieve));
  j := (!j + (2 * !i));
    with Continue -> ()
  done with Break -> ());
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  let primes = ref ([2]) in
  let n = ref (3) in
  let k = ref (0) in
  (try while (!n < num) do
    try
  if (let __l = !sieve in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) then (
  primes := (Obj.magic (List.append (!primes) [(Obj.magic (!n) : int)]) : int list);
  );
  n := (!n + 2);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!primes) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list (odd_sieve (Obj.repr (2))));
  print_endline (__show_list (odd_sieve (Obj.repr (3))));
  print_endline (__show_list (odd_sieve (Obj.repr (10))));
  print_endline (__show_list (odd_sieve (Obj.repr (20))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
