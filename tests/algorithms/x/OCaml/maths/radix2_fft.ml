(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 07:47 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec c_add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and c_sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and c_mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr ((((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)) -. ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))))); (__str ("im"), Obj.repr ((((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float)) +. ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and c_mul_scalar a s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let s = (Obj.magic s : float) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. s))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. s)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and c_div_scalar a s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let s = (Obj.magic s : float) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) /. s))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) /. s)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let _pi = 3.141592653589793
let rec sin_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = (2.0 *. float_of_int (!i)) in
  let k2 = (k1 +. 1.0) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cos_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = ((2.0 *. float_of_int (!i)) -. 1.0) in
  let k2 = (2.0 *. float_of_int (!i)) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and exp_i theta =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let theta = (Obj.magic theta : float) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (cos_taylor (Obj.repr (theta)))); (__str ("im"), Obj.repr (sin_taylor (Obj.repr (theta))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and make_complex_list n value =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let n = (Obj.magic n : int) in
  let value = (Obj.magic value : (string * Obj.t) list) in
  let arr = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  arr := (Obj.magic (List.append (!arr) [(Obj.magic (value) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and fft a invert =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list list) in
  let n = List.length (a) in
  if (n = 1) then (
  __ret := (Obj.magic ([(let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))]) : (string * Obj.t) list list); raise Return
  );
  let a0 = ref (([] : ((string * Obj.t) list) list)) in
  let a1 = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < (n / 2)) do
    try
  a0 := (Obj.magic (List.append (!a0) [(Obj.magic ((let __l = a in let __i = (2 * !i) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  a1 := (Obj.magic (List.append (!a1) [(Obj.magic ((let __l = a in let __i = ((2 * !i) + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let y0 = ref (fft (!a0) (invert)) in
  let y1 = ref (fft (!a1) (invert)) in
  let angle = (((2.0 *. _pi) /. float_of_int (n)) *. if invert then (-.(1.0)) else 1.0) in
  let w = ref ([(__str ("re"), Obj.repr (1.0)); (__str ("im"), Obj.repr (0.0))]) in
  let wn = exp_i (Obj.repr (angle)) in
  let y = ref (make_complex_list (Obj.repr (n)) ([(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr (0.0))])) in
  i := 0;
  (try while (!i < (n / 2)) do
    try
  let t = c_mul (!w) ((let __l = !y1 in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let u = (let __l = !y0 in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let even = ref (c_add (u) (t)) in
  let odd = ref (c_sub (u) (t)) in
  if invert then (
  even := c_div_scalar (!even) (Obj.repr (2.0));
  odd := c_div_scalar (!odd) (Obj.repr (2.0));
  );
  y := (List.mapi (fun __i __x -> if __i = !i then !even else __x) (!y));
  y := (List.mapi (fun __i __x -> if __i = (!i + (n / 2)) then !odd else __x) (!y));
  w := c_mul (!w) (wn);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!y) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref ((Obj.magic x : int)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  p := (!p *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : float); raise Return
  with Return -> !__ret)

and round_to x ndigits =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let ndigits = (Obj.magic ndigits : int) in
  let m = pow10 (Obj.repr (ndigits)) in
  __ret := (Obj.magic ((floor (((x *. m) +. 0.5)) /. m)) : float); raise Return
  with Return -> !__ret)

and list_to_string l =
  let __ret = ref "" in
  (try
  let l = (Obj.magic l : float list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (l)) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" ((let __l = l in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if ((!i + 1) < List.length (l)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and multiply_poly a b =
  let __ret = ref ([] : (float) list) in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let n = ref (1) in
  (try while (!n < ((List.length (a) + List.length (b)) - 1)) do
    try
  n := (!n * 2);
    with Continue -> ()
  done with Break -> ());
  let fa = ref (make_complex_list (Obj.repr (!n)) ([(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr (0.0))])) in
  let fb = ref (make_complex_list (Obj.repr (!n)) ([(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr (0.0))])) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  fa := (List.mapi (fun __i __x -> if __i = !i then [(__str ("re"), Obj.repr ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))); (__str ("im"), Obj.repr (0.0))] else __x) (!fa));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (b)) do
    try
  fb := (List.mapi (fun __i __x -> if __i = !i then [(__str ("re"), Obj.repr ((let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))); (__str ("im"), Obj.repr (0.0))] else __x) (!fb));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  fa := (Obj.magic fft ((Obj.magic !fa : (string * Obj.t) list list)) (false) : (string * Obj.t) list list);
  fb := (Obj.magic fft ((Obj.magic !fb : (string * Obj.t) list list)) (false) : (string * Obj.t) list list);
  i := 0;
  (try while (!i < !n) do
    try
  fa := (List.mapi (fun __i __x -> if __i = !i then c_mul ((let __l = !fa in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) ((let __l = !fb in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!fa));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  fa := (Obj.magic fft ((Obj.magic !fa : (string * Obj.t) list list)) (true) : (string * Obj.t) list list);
  let res = ref (([] : (float) list)) in
  i := 0;
  (try while (!i < ((List.length (a) + List.length (b)) - 1)) do
    try
  let val_ = (let __l = !fa in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  res := (Obj.magic (List.append (!res) [(Obj.magic (round_to (Obj.repr ((Obj.obj (List.assoc (__str ("re")) (val_) : Obj.t) : float))) (Obj.repr (8))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while ((List.length (!res) > 0) && ((let __l = !res in let __i = (List.length (!res) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 0.0)) do
    try
  res := (Obj.magic List.of_seq (Seq.take ((List.length (!res) - 1) - 0) (Seq.drop 0 (List.to_seq (!res)))) : float list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)


let _a = ref ([0.0; 1.0; 0.0; 2.0])
let _b = ref ([2.0; 3.0; 4.0; 0.0])
let product = ref (multiply_poly (!_a) (!_b))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((list_to_string (!product)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
