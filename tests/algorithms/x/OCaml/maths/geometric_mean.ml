(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and pow_int base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and nth_root x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  if (x = 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 100) do
    try
  let denom = ref (pow_int (Obj.repr (!guess)) (Obj.repr ((n - 1)))) in
  guess := (((float_of_int ((n - 1)) *. !guess) +. (x /. !denom)) /. float_of_int (n));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and round_nearest x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x >= 0.0) then (
  let n = int_of_float ((x +. 0.5)) in
  __ret := (Obj.magic (float_of_int (n)) : float); raise Return
  );
  let n = int_of_float ((x -. 0.5)) in
  __ret := (Obj.magic (float_of_int (n)) : float); raise Return
  with Return -> !__ret)

and compute_geometric_mean nums =
  let __ret = ref 0.0 in
  (try
  let nums = (Obj.magic nums : float list) in
  if (List.length (nums) = 0) then (
  (failwith ("no numbers"));
  );
  let product = ref (1.0) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  product := (!product *. (let __l = nums in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if ((!product < 0.0) && (((List.length (nums) mod 2 + 2) mod 2) = 0)) then (
  (failwith ("Cannot Compute Geometric Mean for these numbers."));
  );
  let mean = ref (nth_root (Obj.repr (abs_float !product)) (Obj.repr (List.length (nums)))) in
  if (!product < 0.0) then (
  mean := (-.(!mean));
  );
  let possible = round_nearest (Obj.repr (!mean)) in
  if (pow_int (Obj.repr (possible)) (Obj.repr (List.length (nums))) = !product) then (
  mean := possible;
  );
  __ret := (Obj.magic (!mean) : float); raise Return
  with Return -> !__ret)

and test_compute_geometric_mean () =
  let __ret = ref (Obj.magic 0) in
  (try
  let eps = 0.0001 in
  let m1 = compute_geometric_mean ([2.0; 8.0]) in
  if (abs_float (m1 -. 4.0) > eps) then (
  (failwith ("test1 failed"));
  );
  let m2 = compute_geometric_mean ([5.0; 125.0]) in
  if (abs_float (m2 -. 25.0) > eps) then (
  (failwith ("test2 failed"));
  );
  let m3 = compute_geometric_mean ([1.0; 0.0]) in
  if (abs_float (m3 -. 0.0) > eps) then (
  (failwith ("test3 failed"));
  );
  let m4 = compute_geometric_mean ([1.0; 5.0; 25.0; 5.0]) in
  if (abs_float (m4 -. 5.0) > eps) then (
  (failwith ("test4 failed"));
  );
  let m5 = compute_geometric_mean ([(-.(5.0)); 25.0; 1.0]) in
  if (abs_float (m5 +. 5.0) > eps) then (
  (failwith ("test5 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_compute_geometric_mean ());
  print_endline (string_of_float (compute_geometric_mean ([(-.(3.0)); (-.(27.0))])));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
