(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec prefix_function s =
  let __ret = ref ([] : (int) list) in
  (try
  let pi = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  pi := (Obj.magic (List.append (!pi) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 1;
  (try while (!i < String.length (s)) do
    try
  let j = ref (List.nth (!pi) ((!i - 1))) in
  (try while ((!j > 0) && (String.make 1 (String.get (s) !i) <> String.make 1 (String.get (s) !j))) do
    try
  j := List.nth (!pi) ((!j - 1));
    with Continue -> ()
  done with Break -> ());
  if (String.make 1 (String.get (s) !i) = String.make 1 (String.get (s) !j)) then (
  j := (!j + 1);
  );
  pi := (List.mapi (fun __i __x -> if __i = !i then !j else __x) (!pi));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!pi) : int list); raise Return
  with Return -> !__ret)

and longest_prefix s =
  let __ret = ref 0 in
  (try
  let pi = ref (prefix_function (s)) in
  let max_val = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!pi)) do
    try
  if (List.nth (!pi) (!i) > !max_val) then (
  max_val := List.nth (!pi) (!i);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_val) : int); raise Return
  with Return -> !__ret)

and list_eq_int a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int list) in
  let b = (Obj.magic b : int list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if (List.nth (a) (!i) <> List.nth (b) (!i)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and test_prefix_function () =
  let __ret = ref (Obj.magic 0) in
  (try
  let s1 = "aabcdaabc" in
  let expected1 = ref ([0; 1; 0; 0; 0; 1; 2; 3; 4]) in
  let r1 = ref (prefix_function (s1)) in
  if not (list_eq_int (!r1) (!expected1)) then (
  (failwith ("prefix_function aabcdaabc failed"));
  );
  let s2 = "asdasdad" in
  let expected2 = ref ([0; 0; 0; 1; 2; 3; 4; 0]) in
  let r2 = ref (prefix_function (s2)) in
  if not (list_eq_int (!r2) (!expected2)) then (
  (failwith ("prefix_function asdasdad failed"));
  );
    !__ret
  with Return -> !__ret)

and test_longest_prefix () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (longest_prefix ("aabcdaabc") <> 4) then (
  (failwith ("longest_prefix example1 failed"));
  );
  if (longest_prefix ("asdasdad") <> 4) then (
  (failwith ("longest_prefix example2 failed"));
  );
  if (longest_prefix ("abcab") <> 2) then (
  (failwith ("longest_prefix example3 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_prefix_function ());
  ignore (test_longest_prefix ());
  let r1 = ref (prefix_function ("aabcdaabc")) in
  let r2 = ref (prefix_function ("asdasdad")) in
  print_endline ((__str (!r1)));
  print_endline ((__str (!r2)));
  print_endline ((string_of_int (longest_prefix ("aabcdaabc"))));
  print_endline ((string_of_int (longest_prefix ("abcab"))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
