(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _etaoin = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
let _letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let rec etaoin_index letter =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_etaoin)) do
    try
  if ((let __s = _etaoin in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = letter) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.length (_etaoin)) : int); raise Return
  with Return -> !__ret)

and get_letter_count message =
  let __ret = ref ([] : (string * int) list) in
  (try
  let letter_count = ref ([] : (string * int) list) in
  let i = ref (0) in
  (try while (!i < String.length (_letters)) do
    try
  let c = (let __s = _letters in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  letter_count := ((__str (c), 0) :: List.remove_assoc (__str (c)) (!letter_count));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let msg = String.uppercase_ascii (message) in
  let j = ref (0) in
  (try while (!j < String.length (msg)) do
    try
  let ch = (let __s = msg in let __st = !j in let __len = ((!j + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (let len_s = String.length _letters and len_sub = String.length ch in let rec aux i = if i + len_sub > len_s then false else if String.sub _letters i len_sub = ch then true else aux (i + 1) in aux 0) then (
  letter_count := ((__str (ch), (List.assoc (__str (ch)) (!letter_count) + 1)) :: List.remove_assoc (__str (ch)) (!letter_count));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!letter_count) : (string * int) list); raise Return
  with Return -> !__ret)

and get_frequency_order message =
  let __ret = ref "" in
  (try
  let letter_to_freq = ref (get_letter_count (message)) in
  let max_freq = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (_letters)) do
    try
  let letter = (let __s = _letters in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let f = List.assoc (__str (letter)) (!letter_to_freq) in
  if (f > !max_freq) then (
  max_freq := f;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref ("") in
  let freq = ref (!max_freq) in
  (try while (!freq >= 0) do
    try
  let group = ref (([] : (string) list)) in
  let j = ref (0) in
  (try while (!j < String.length (_letters)) do
    try
  let letter = (let __s = _letters in let __st = !j in let __len = ((!j + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (List.assoc (__str (letter)) (!letter_to_freq) = !freq) then (
  group := (Obj.magic (List.append (!group) [(Obj.magic (letter) : string)]) : string list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let g_len = ref (List.length (!group)) in
  let a = ref (0) in
  (try while (!a < !g_len) do
    try
  let b = ref (0) in
  (try while (!b < ((!g_len - !a) - 1)) do
    try
  let g1 = List.nth (!group) (!b) in
  let g2 = List.nth (!group) ((!b + 1)) in
  let idx1 = etaoin_index (g1) in
  let idx2 = etaoin_index (g2) in
  if (idx1 < idx2) then (
  let tmp = List.nth (!group) (!b) in
  group := (List.mapi (fun __i __x -> if __i = !b then List.nth (!group) ((!b + 1)) else __x) (!group));
  group := (List.mapi (fun __i __x -> if __i = (!b + 1) then tmp else __x) (!group));
  );
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  let g = ref (0) in
  (try while (!g < List.length (!group)) do
    try
  result := (!result ^ List.nth (!group) (!g));
  g := (!g + 1);
    with Continue -> ()
  done with Break -> ());
  freq := (!freq - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and english_freq_match_score message =
  let __ret = ref 0 in
  (try
  let freq_order = get_frequency_order (message) in
  let top = (let __s = freq_order in let __st = 0 in let __len = (6 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let bottom = (let __s = freq_order in let __st = (String.length (freq_order) - 6) in let __len = (String.length (freq_order) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let score = ref (0) in
  let i = ref (0) in
  (try while (!i < 6) do
    try
  let c = (let __s = _etaoin in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (let len_s = String.length top and len_sub = String.length c in let rec aux i = if i + len_sub > len_s then false else if String.sub top i len_sub = c then true else aux (i + 1) in aux 0) then (
  score := (!score + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref ((String.length (_etaoin) - 6)) in
  (try while (!j < String.length (_etaoin)) do
    try
  let c = (let __s = _etaoin in let __st = !j in let __len = ((!j + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (let len_s = String.length bottom and len_sub = String.length c in let rec aux i = if i + len_sub > len_s then false else if String.sub bottom i len_sub = c then true else aux (i + 1) in aux 0) then (
  score := (!score + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!score) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((get_frequency_order ("Hello World")));
  print_endline (string_of_int (english_freq_match_score ("Hello World")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
