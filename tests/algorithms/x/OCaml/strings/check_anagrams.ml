(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec strip_and_remove_spaces s =
  let __ret = ref "" in
  (try
  let start = ref (0) in
  let end_ = ref ((String.length (s) - 1)) in
  (try while ((!start < String.length (s)) && ((let __s = s in let __i = !start in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = " ")) do
    try
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  (try while ((!end_ >= !start) && ((let __s = s in let __i = !end_ in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = " ")) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  let i = ref (!start) in
  (try while (!i <= !end_) do
    try
  let ch = (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if (ch <> " ") then (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and check_anagrams a b =
  let __ret = ref false in
  (try
  let s1 = ref (String.lowercase_ascii (a)) in
  let s2 = ref (String.lowercase_ascii (b)) in
  s1 := strip_and_remove_spaces (!s1);
  s2 := strip_and_remove_spaces (!s2);
  if (String.length (!s1) <> String.length (!s2)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let count = ref ([] : (string * int) list) in
  let i = ref (0) in
  (try while (!i < String.length (!s1)) do
    try
  let c1 = (let __s = !s1 in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  let c2 = (let __s = !s2 in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if (List.mem_assoc c1 !count) then (
  count := ((__str (c1), (List.assoc (__str (c1)) (!count) + 1)) :: List.remove_assoc (__str (c1)) (!count));
  ) else (
  count := ((__str (c1), 1) :: List.remove_assoc (__str (c1)) (!count));
  );
  if (List.mem_assoc c2 !count) then (
  count := ((__str (c2), (List.assoc (__str (c2)) (!count) - 1)) :: List.remove_assoc (__str (c2)) (!count));
  ) else (
  count := ((__str (c2), -(1)) :: List.remove_assoc (__str (c2)) (!count));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun (ch, _) ->
    try
  if (List.assoc (__str (ch)) (!count) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) (!count) with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and print_bool b =
  let __ret = ref (Obj.magic 0) in
  (try
  if b then (
  print_endline (string_of_bool true);
  ) else (
  print_endline (string_of_bool false);
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_bool (check_anagrams ("Silent") ("Listen")));
  ignore (print_bool (check_anagrams ("This is a string") ("Is this a string")));
  ignore (print_bool (check_anagrams ("This is    a      string") ("Is     this a string")));
  ignore (print_bool (check_anagrams ("There") ("Their")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
