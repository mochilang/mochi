(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec split_words s =
  let __ret = ref ([] : (string) list) in
  (try
  let words = ref (([] : (string) list)) in
  let current = ref ("") in
  (try List.iter (fun ch ->
    try
  if (ch = " ") then (
  if (!current <> "") then (
  words := (Obj.magic (List.append (!words) [(Obj.magic (!current) : string)]) : string list);
  current := "";
  );
  ) else (
  current := (!current ^ __show (ch));
  );
    with Continue -> ()) (List.of_seq (Seq.map (fun c -> String.make 1 c) (String.to_seq s))) with Break -> ());
  if (!current <> "") then (
  words := (Obj.magic (List.append (!words) [(Obj.magic (!current) : string)]) : string list);
  );
  __ret := (Obj.magic (!words) : string list); raise Return
  with Return -> !__ret)

and is_alnum c =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((((let len_s = String.length "0123456789" and len_sub = String.length c in let rec aux i = if i + len_sub > len_s then false else if String.sub "0123456789" i len_sub = c then true else aux (i + 1) in aux 0) || (let len_s = String.length "abcdefghijklmnopqrstuvwxyz" and len_sub = String.length c in let rec aux i = if i + len_sub > len_s then false else if String.sub "abcdefghijklmnopqrstuvwxyz" i len_sub = c then true else aux (i + 1) in aux 0)) || (let len_s = String.length "ABCDEFGHIJKLMNOPQRSTUVWXYZ" and len_sub = String.length c in let rec aux i = if i + len_sub > len_s then false else if String.sub "ABCDEFGHIJKLMNOPQRSTUVWXYZ" i len_sub = c then true else aux (i + 1) in aux 0)) || (c = " "))) : bool); raise Return
  with Return -> !__ret)

and split_input text =
  let __ret = ref ([] : (string list) list) in
  (try
  let result = ref (([] : (string list) list)) in
  let current = ref ("") in
  (try List.iter (fun ch ->
    try
  if is_alnum (ch) then (
  current := (!current ^ __show (ch));
  ) else (
  if (!current <> "") then (
  result := (Obj.magic (List.append (!result) [(Obj.magic (split_words (!current)) : string list)]) : string list list);
  current := "";
  );
  );
    with Continue -> ()) (List.of_seq (Seq.map (fun c -> String.make 1 c) (String.to_seq text))) with Break -> ());
  if (!current <> "") then (
  result := (Obj.magic (List.append (!result) [(Obj.magic (split_words (!current)) : string list)]) : string list list);
  );
  __ret := (Obj.magic (!result) : string list list); raise Return
  with Return -> !__ret)

and capitalize word =
  let __ret = ref "" in
  (try
  if (String.length (word) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  if (String.length (word) = 1) then (
  __ret := (Obj.magic (String.uppercase_ascii (word)) : string); raise Return
  );
  __ret := (Obj.magic ((String.uppercase_ascii ((let __s = word in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) ^ String.lowercase_ascii ((let __s = word in let __st = 1 in let __len = (String.length (word) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")))) : string); raise Return
  with Return -> !__ret)

and to_simple_case text =
  let __ret = ref "" in
  (try
  let parts = ref (split_input (text)) in
  let res = ref ("") in
  (try List.iter (fun sub ->
    try
  (try List.iter (fun w ->
    try
  res := (!res ^ capitalize (w));
    with Continue -> ()) (sub) with Break -> ());
    with Continue -> ()) (!parts) with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and to_complex_case text upper_flag sep =
  let __ret = ref "" in
  (try
  let parts = ref (split_input (text)) in
  let res = ref ("") in
  (try List.iter (fun sub ->
    try
  let first = ref (true) in
  (try List.iter (fun w ->
    try
  let word = ref (if upper_flag then String.uppercase_ascii (w) else String.lowercase_ascii (w)) in
  if !first then (
  res := (!res ^ !word);
  first := false;
  ) else (
  res := ((!res ^ sep) ^ !word);
  );
    with Continue -> ()) (sub) with Break -> ());
    with Continue -> ()) (!parts) with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and to_pascal_case text =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (to_simple_case (text)) : string); raise Return
  with Return -> !__ret)

and to_camel_case text =
  let __ret = ref "" in
  (try
  let s = to_simple_case (text) in
  if (String.length (s) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  __ret := (Obj.magic ((String.lowercase_ascii ((let __s = s in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) ^ (let __s = s in let __st = 1 in let __len = (String.length (s) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) : string); raise Return
  with Return -> !__ret)

and to_snake_case text upper_flag =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (to_complex_case (text) (upper_flag) ("_")) : string); raise Return
  with Return -> !__ret)

and to_kebab_case text upper_flag =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (to_complex_case (text) (upper_flag) ("-")) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((to_pascal_case ("one two 31235three4four")));
  print_endline ((to_camel_case ("one two 31235three4four")));
  print_endline ((to_snake_case ("one two 31235three4four") (true)));
  print_endline ((to_snake_case ("one two 31235three4four") (false)));
  print_endline ((to_kebab_case ("one two 31235three4four") (true)));
  print_endline ((to_kebab_case ("one two 31235three4four") (false)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
