(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _digits = "0123456789"
let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _lower = "abcdefghijklmnopqrstuvwxyz"
let _lookup_letters = "TRWAGMYFPDXBNJZSQVHLCKE"
let _error_msg = "Input must be a string of 8 numbers plus letter"
let rec to_upper s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  let j = ref (0) in
  let converted = ref (ch) in
  (try while (!j < String.length (_lower)) do
    try
  if ((let __s = _lower in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  converted := (let __s = _upper in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)));
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ !converted);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and is_digit ch =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_digits)) do
    try
  if ((let __s = _digits in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and clean_id spanish_id =
  let __ret = ref "" in
  (try
  let upper_id = to_upper (spanish_id) in
  let cleaned = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (upper_id)) do
    try
  let ch = (let __s = upper_id in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if (ch <> "-") then (
  cleaned := (!cleaned ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cleaned) : string); raise Return
  with Return -> !__ret)

and is_spain_national_id spanish_id =
  let __ret = ref false in
  (try
  let sid = clean_id (spanish_id) in
  if (String.length (sid) <> 9) then (
  (failwith (_error_msg));
  );
  let i = ref (0) in
  (try while (!i < 8) do
    try
  if not (is_digit ((let __s = sid in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))))) then (
  (failwith (_error_msg));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let number = Char.code (String.get (sid) 0) in
  let letter = (let __s = sid in let __i = 8 in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if is_digit (letter) then (
  (failwith (_error_msg));
  );
  let expected = (let __s = _lookup_letters in let __i = ((number mod 23 + 23) mod 23) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  __ret := (Obj.magic ((letter = expected)) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (string_of_bool (is_spain_national_id ("12345678Z")));
  print_endline (string_of_bool (is_spain_national_id ("12345678z")));
  print_endline (string_of_bool (is_spain_national_id ("12345678x")));
  print_endline (string_of_bool (is_spain_national_id ("12345678I")));
  print_endline (string_of_bool (is_spain_national_id ("12345678-Z")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
