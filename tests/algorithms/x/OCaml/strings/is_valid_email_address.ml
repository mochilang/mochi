(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _max_local_part_octets = 64
let _max_domain_octets = 255
let _ascii_letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _digits = "0123456789"
let _local_extra = ".(!#$%&'*+-/=?^_`{|}~)"
let _domain_extra = ".-"
let rec count_char s target =
  let __ret = ref 0 in
  (try
  let cnt = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if ((let __s = s in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = target) then (
  cnt := (!cnt + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cnt) : int); raise Return
  with Return -> !__ret)

and char_in c allowed =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (allowed)) do
    try
  if ((let __s = allowed in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = c) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and starts_with_char s c =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((String.length (s) > 0) && ((let __s = s in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = c))) : bool); raise Return
  with Return -> !__ret)

and ends_with_char s c =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((String.length (s) > 0) && ((let __s = s in let __st = (String.length (s) - 1) in let __len = (String.length (s) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = c))) : bool); raise Return
  with Return -> !__ret)

and contains_double_dot s =
  let __ret = ref false in
  (try
  if (String.length (s) < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < (String.length (s) - 1)) do
    try
  if ((let __s = s in let __st = !i in let __len = ((!i + 2) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = "..") then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_valid_email_address email =
  let __ret = ref false in
  (try
  if (count_char (email) ("@") <> 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let at_idx = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (email)) do
    try
  if ((let __s = email in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = "@") then (
  at_idx := !i;
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let local_part = (let __s = email in let __st = 0 in let __len = (!at_idx - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let domain = (let __s = email in let __st = (!at_idx + 1) in let __len = (String.length (email) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if ((String.length (local_part) > _max_local_part_octets) || (String.length (domain) > _max_domain_octets)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < String.length (local_part)) do
    try
  let ch = (let __s = local_part in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if not (char_in (ch) (((_ascii_letters ^ _digits) ^ _local_extra))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if ((starts_with_char (local_part) (".") || ends_with_char (local_part) (".")) || contains_double_dot (local_part)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := 0;
  (try while (!i < String.length (domain)) do
    try
  let ch = (let __s = domain in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if not (char_in (ch) (((_ascii_letters ^ _digits) ^ _domain_extra))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (starts_with_char (domain) ("-") || ends_with_char (domain) (".")) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((starts_with_char (domain) (".") || ends_with_char (domain) (".")) || contains_double_dot (domain)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let email_tests = ref (["simple@example.com"; "very.common@example.com"; "disposable.style.email.with+symbol@example.com"; "other-email-with-hyphen@and.subdomains.example.com"; "fully-qualified-domain@example.com"; "user.name+tag+sorting@example.com"; "x@example.com"; "example-indeed@strange-example.com"; "test/test@test.com"; "123456789012345678901234567890123456789012345678901234567890123@example.com"; "admin@mailserver1"; "example@s.example"; "Abc.example.com"; "A@b@c@example.com"; "abc@example..com"; "a(c)d,e:f;g<h>i[j\\k]l@example.com"; "12345678901234567890123456789012345678901234567890123456789012345@example.com"; "i.like.underscores@but_its_not_allowed_in_this_part"; ""])
let idx = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!idx < List.length (!email_tests)) do
    try
  let email = List.nth (!email_tests) (!idx) in
  print_endline ((string_of_bool (is_valid_email_address (email))));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
