(* Generated by Mochi transpiler v0.10.70 on 2025-08-23 13:46 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

let _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/strings"

let _read_file path =
  let p = if Sys.file_exists path then path else Filename.concat _dataDir path in
  try
    let ic = open_in p in
    let len = in_channel_length ic in
    let s = really_input_string ic len in
    close_in ic;
    s
  with _ -> ""

exception Break
exception Continue

exception Return

let rec split s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (ch = sep) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!current) : string)])) : string list);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!current) : string)])) : string list);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and insertion_sort arr =
  let __ret = ref ([] : (string) list) in
  (try
  let arr = (Obj.magic arr : string list) in
  let a = ref (arr) in
  let i = ref (1) in
  (try while (!i < List.length (!a)) do
    try
  let key = (let __l = !a in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && ((let __l = !a in let __i = !j in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") > key)) do
    try
  a := (List.mapi (fun __i __x -> if __i = (!j + 1) then (let __l = !a in let __i = !j in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") else __x) (!a));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  a := (List.mapi (fun __i __x -> if __i = (!j + 1) then key else __x) (!a));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : string list); raise Return
  with Return -> !__ret)

and sort_chars word =
  let __ret = ref "" in
  (try
  let chars = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (word)) do
    try
  chars := (Obj.magic ((List.append (!chars) [(Obj.magic ((let __s = word in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string)])) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  chars := (Obj.magic (insertion_sort (!chars)) : string list);
  let res = ref ("") in
  i := 0;
  (try while (!i < List.length (!chars)) do
    try
  res := (!res ^ (let __l = !chars in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> ""));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and unique_sorted words =
  let __ret = ref ([] : (string) list) in
  (try
  let words = (Obj.magic words : string list) in
  let seen = ref ([] : (string * bool) list) in
  let res = ref (([] : (string) list)) in
  (try List.iter (fun w ->
    try
  if ((w <> "") && not ((List.mem_assoc (__str (Obj.repr (w))) !seen))) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic (w) : string)])) : string list);
  seen := ((__str (Obj.repr (w)), true) :: List.remove_assoc (__str (Obj.repr (w))) (!seen));
  );
    with Continue -> ()) (words) with Break -> ());
  res := (Obj.magic (insertion_sort (!res)) : string list);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)


let word_by_signature = ref ([] : (string * string list) list)
let rec build_map words =
  let __ret = ref (Obj.magic 0) in
  (try
  let words = (Obj.magic words : string list) in
  (try List.iter (fun w ->
    try
  let sig_ = sort_chars (w) in
  let arr = ref (([] : (string) list)) in
  if (List.mem_assoc (__str (Obj.repr (sig_))) !word_by_signature) then (
  arr := (Obj.magic ((match List.assoc_opt (__str (Obj.repr (sig_))) (!word_by_signature) with Some v -> (Obj.magic v : string list) | None -> [])) : string list);
  );
  arr := (Obj.magic ((List.append (!arr) [(Obj.magic (w) : string)])) : string list);
  word_by_signature := ((__str (Obj.repr (sig_)), !arr) :: List.remove_assoc (__str (Obj.repr (sig_))) (!word_by_signature));
    with Continue -> ()) (words) with Break -> ());
    !__ret
  with Return -> !__ret)

and anagram my_word =
  let __ret = ref ([] : (string) list) in
  (try
  let sig_ = sort_chars (my_word) in
  if (List.mem_assoc (__str (Obj.repr (sig_))) !word_by_signature) then (
  __ret := (Obj.magic ((match List.assoc_opt (__str (Obj.repr (sig_))) (!word_by_signature) with Some v -> (Obj.magic v : string list) | None -> [])) : string list); raise Return
  );
  __ret := (Obj.magic ([]) : string list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let text = _read_file ("words.txt") in
  let lines = ref (split (text) ("\n")) in
  let words = ref (unique_sorted (!lines)) in
  ignore (build_map (!words));
  (try List.iter (fun w ->
    try
  let anas = ref (anagram (w)) in
  if (List.length (!anas) > 1) then (
  let line = ref ((w ^ ":")) in
  let i = ref (0) in
  (try while (!i < List.length (!anas)) do
    try
  if (!i > 0) then (
  line := (!line ^ ",");
  );
  line := (!line ^ (let __l = !anas in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> ""));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  );
    with Continue -> ()) (!words) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
