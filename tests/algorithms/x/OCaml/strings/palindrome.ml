(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec reverse s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref ((String.length (s) - 1)) in
  (try while (!i >= 0) do
    try
  res := (!res ^ String.make 1 (String.get (s) !i));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and is_palindrome s =
  let __ret = ref false in
  (try
  let start_i = ref (0) in
  let end_i = ref ((String.length (s) - 1)) in
  (try while (!start_i < !end_i) do
    try
  if (String.make 1 (String.get (s) !start_i) = String.make 1 (String.get (s) !end_i)) then (
  start_i := (!start_i + 1);
  end_i := (!end_i - 1);
  ) else (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and is_palindrome_traversal s =
  let __ret = ref false in
  (try
  let end_ = (String.length (s) / 2) in
  let n = String.length (s) in
  let i = ref (0) in
  (try while (!i < end_) do
    try
  if (String.make 1 (String.get (s) !i) <> String.make 1 (String.get (s) ((n - !i) - 1))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and is_palindrome_recursive s =
  let __ret = ref false in
  (try
  if (String.length (s) <= 1) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if (String.make 1 (String.get (s) 0) = String.make 1 (String.get (s) (String.length (s) - 1))) then (
  __ret := (Obj.magic (is_palindrome_recursive ((let __s = s in let __st = 1 in let __len = ((String.length (s) - 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) : bool); raise Return
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_palindrome_slice s =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((s = reverse (s))) : bool); raise Return
  with Return -> !__ret)


let test_data = ref ([[(__str ("text"), Obj.repr ("MALAYALAM")); (__str ("expected"), Obj.repr (true))]; [(__str ("text"), Obj.repr ("String")); (__str ("expected"), Obj.repr (false))]; [(__str ("text"), Obj.repr ("rotor")); (__str ("expected"), Obj.repr (true))]; [(__str ("text"), Obj.repr ("level")); (__str ("expected"), Obj.repr (true))]; [(__str ("text"), Obj.repr ("A")); (__str ("expected"), Obj.repr (true))]; [(__str ("text"), Obj.repr ("BB")); (__str ("expected"), Obj.repr (true))]; [(__str ("text"), Obj.repr ("ABC")); (__str ("expected"), Obj.repr (false))]; [(__str ("text"), Obj.repr ("amanaplanacanalpanama")); (__str ("expected"), Obj.repr (true))]])
let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  (try List.iter (fun t ->
    try
  let s = (Obj.obj (List.assoc (__str ("text")) (t) : Obj.t) : string) in
  let expected = (Obj.obj (List.assoc (__str ("expected")) (t) : Obj.t) : bool) in
  let r1 = is_palindrome (s) in
  let r2 = is_palindrome_traversal (s) in
  let r3 = is_palindrome_recursive (s) in
  let r4 = is_palindrome_slice (s) in
  if ((((r1 <> expected) || (r2 <> expected)) || (r3 <> expected)) || (r4 <> expected)) then (
  (failwith ("algorithm mismatch"));
  );
  print_endline (((s ^ " ") ^ (string_of_bool (expected))));
    with Continue -> ()) (!test_data) with Break -> ());
  print_endline ("a man a plan a canal panama");
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
