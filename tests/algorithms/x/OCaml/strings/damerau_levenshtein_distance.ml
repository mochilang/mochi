(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec damerau_levenshtein_distance first_string second_string =
  let __ret = ref 0 in
  (try
  let len1 = String.length (first_string) in
  let len2 = String.length (second_string) in
  let dp_matrix = ref (([] : (int list) list)) in
  (try for _ = 0 to ((len1 + 1) - 1) do
    try
  let row = ref (([] : (int) list)) in
  (try for _2 = 0 to ((len2 + 1) - 1) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (0) : int)]) : int list);
    with Continue -> ()
  done with Break -> ());
  dp_matrix := (Obj.magic (List.append (!dp_matrix) [(Obj.magic (!row) : int list)]) : int list list);
    with Continue -> ()
  done with Break -> ());
  (try for i = 0 to ((len1 + 1) - 1) do
    try
  let row = ref ((let __l = !dp_matrix in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  row := (List.mapi (fun __i __x -> if __i = 0 then i else __x) (!row));
  dp_matrix := (List.mapi (fun __i __x -> if __i = i then !row else __x) (!dp_matrix));
    with Continue -> ()
  done with Break -> ());
  let first_row = ref ((let __l = !dp_matrix in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  (try for j = 0 to ((len2 + 1) - 1) do
    try
  first_row := (List.mapi (fun __i __x -> if __i = j then j else __x) (!first_row));
    with Continue -> ()
  done with Break -> ());
  dp_matrix := (List.mapi (fun __i __x -> if __i = 0 then !first_row else __x) (!dp_matrix));
  (try for i = 1 to ((len1 + 1) - 1) do
    try
  let row = ref ((let __l = !dp_matrix in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let first_char = (let __s = first_string in let __st = (i - 1) in let __en = i in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  (try for j = 1 to ((len2 + 1) - 1) do
    try
  let second_char = (let __s = second_string in let __st = (j - 1) in let __en = j in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  let cost = if (first_char = second_char) then 0 else 1 in
  let value = ref (((let __l = (let __l = !dp_matrix in let __i = (i - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + 1)) in
  let insertion = ((let __l = !row in let __i = (j - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + 1) in
  if (insertion < !value) then (
  value := insertion;
  );
  let substitution = ((let __l = (let __l = !dp_matrix in let __i = (i - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (j - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + cost) in
  if (substitution < !value) then (
  value := substitution;
  );
  row := (List.mapi (fun __i __x -> if __i = j then !value else __x) (!row));
  if ((((i > 1) && (j > 1)) && ((let __s = first_string in let __st = (i - 1) in let __en = i in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = (let __s = second_string in let __st = (j - 2) in let __en = (j - 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)))) && ((let __s = first_string in let __st = (i - 2) in let __en = (i - 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = (let __s = second_string in let __st = (j - 1) in let __en = j in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)))) then (
  let transposition = ((let __l = (let __l = !dp_matrix in let __i = (i - 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (j - 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + cost) in
  if (transposition < (let __l = !row in let __i = j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  row := (List.mapi (fun __i __x -> if __i = j then transposition else __x) (!row));
  );
  );
    with Continue -> ()
  done with Break -> ());
  dp_matrix := (List.mapi (fun __i __x -> if __i = i then !row else __x) (!dp_matrix));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = (let __l = !dp_matrix in let __i = len1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = len2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (damerau_levenshtein_distance ("cat") ("cut"))));
  print_endline ((string_of_int (damerau_levenshtein_distance ("kitten") ("sitting"))));
  print_endline ((string_of_int (damerau_levenshtein_distance ("hello") ("world"))));
  print_endline ((string_of_int (damerau_levenshtein_distance ("book") ("back"))));
  print_endline ((string_of_int (damerau_levenshtein_distance ("container") ("containment"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
