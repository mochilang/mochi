(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_matrix_bool rows cols init =
  let __ret = ref ([] : (bool list) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let matrix = ref (([] : (bool list) list)) in
  (try for _ = 0 to (rows - 1) do
    try
  let row = ref (([] : (bool) list)) in
  (try for _2 = 0 to (cols - 1) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (init) : bool)]) : bool list);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic (List.append (!matrix) [(Obj.magic (!row) : bool list)]) : bool list list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix) : bool list list); raise Return
  with Return -> !__ret)

and match_pattern input_string pattern =
  let __ret = ref false in
  (try
  let len_string = (String.length (input_string) + 1) in
  let len_pattern = (String.length (pattern) + 1) in
  let dp = ref (make_matrix_bool (Obj.repr (len_string)) (Obj.repr (len_pattern)) (false)) in
  let row0 = ref ((let __l = !dp in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  row0 := (List.mapi (fun __i __x -> if __i = 0 then true else __x) (!row0));
  dp := (List.mapi (fun __i __x -> if __i = 0 then !row0 else __x) (!dp));
  let j = ref (1) in
  (try while (!j < len_pattern) do
    try
  row0 := (Obj.magic (let __l = !dp in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : bool list);
  if ((let __s = pattern in let __st = (!j - 1) in let __en = !j in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = "*") then (
  row0 := (List.mapi (fun __i __x -> if __i = !j then (let __l = !row0 in let __i = (!j - 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!row0));
  ) else (
  row0 := (List.mapi (fun __i __x -> if __i = !j then false else __x) (!row0));
  );
  dp := (List.mapi (fun __i __x -> if __i = 0 then !row0 else __x) (!dp));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (1) in
  (try while (!i < len_string) do
    try
  let row = ref ((let __l = !dp in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let j2 = ref (1) in
  (try while (!j2 < len_pattern) do
    try
  let s_char = (let __s = input_string in let __st = (!i - 1) in let __en = !i in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  let p_char = (let __s = pattern in let __st = (!j2 - 1) in let __en = !j2 in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if ((s_char = p_char) || (p_char = ".")) then (
  row := (List.mapi (fun __i __x -> if __i = !j2 then (let __l = (let __l = !dp in let __i = (!i - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!j2 - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!row));
  ) else (
  if (p_char = "*") then (
  let val_ = ref ((let __l = (let __l = !dp in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!j2 - 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let prev_p = (let __s = pattern in let __st = (!j2 - 2) in let __en = (!j2 - 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (not (!val_) && ((prev_p = s_char) || (prev_p = "."))) then (
  val_ := (let __l = (let __l = !dp in let __i = (!i - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  );
  row := (List.mapi (fun __i __x -> if __i = !j2 then !val_ else __x) (!row));
  ) else (
  row := (List.mapi (fun __i __x -> if __i = !j2 then false else __x) (!row));
  );
  );
  j2 := (!j2 + 1);
    with Continue -> ()
  done with Break -> ());
  dp := (List.mapi (fun __i __x -> if __i = !i then !row else __x) (!dp));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = (let __l = !dp in let __i = (len_string - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (len_pattern - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  if not (match_pattern ("aab") ("c*a*b")) then (
  (failwith ("case1 failed"));
  );
  if match_pattern ("dabc") ("*abc") then (
  (failwith ("case2 failed"));
  );
  if match_pattern ("aaa") ("aa") then (
  (failwith ("case3 failed"));
  );
  if not (match_pattern ("aaa") ("a.a")) then (
  (failwith ("case4 failed"));
  );
  if match_pattern ("aaab") ("aa*") then (
  (failwith ("case5 failed"));
  );
  if not (match_pattern ("aaab") (".*")) then (
  (failwith ("case6 failed"));
  );
  if match_pattern ("a") ("bbbb") then (
  (failwith ("case7 failed"));
  );
  if match_pattern ("") ("bbbb") then (
  (failwith ("case8 failed"));
  );
  if match_pattern ("a") ("") then (
  (failwith ("case9 failed"));
  );
  if not (match_pattern ("") ("")) then (
  (failwith ("case10 failed"));
  );
  print_endline ((string_of_bool (match_pattern ("aab") ("c*a*b"))));
  print_endline ((string_of_bool (match_pattern ("dabc") ("*abc"))));
  print_endline ((string_of_bool (match_pattern ("aaa") ("aa"))));
  print_endline ((string_of_bool (match_pattern ("aaa") ("a.a"))));
  print_endline ((string_of_bool (match_pattern ("aaab") ("aa*"))));
  print_endline ((string_of_bool (match_pattern ("aaab") (".*"))));
  print_endline ((string_of_bool (match_pattern ("a") ("bbbb"))));
  print_endline ((string_of_bool (match_pattern ("") ("bbbb"))));
  print_endline ((string_of_bool (match_pattern ("a") (""))));
  print_endline ((string_of_bool (match_pattern ("") (""))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
