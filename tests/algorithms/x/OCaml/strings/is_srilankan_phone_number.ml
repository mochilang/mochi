(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec starts_with s prefix =
  let __ret = ref false in
  (try
  if (String.length (s) < String.length (prefix)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  __ret := (Obj.magic (((let __s = s in let __st = 0 in let __len = (String.length (prefix) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = prefix)) : bool); raise Return
  with Return -> !__ret)

and all_digits s =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.make 1 (String.get (s) !i) in
  if ((c < "0") || (c > "9")) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and is_sri_lankan_phone_number phone =
  let __ret = ref false in
  (try
  let p = ref (phone) in
  if starts_with (!p) ("+94") then (
  p := (let __s = !p in let __st = 3 in let __len = (String.length (!p) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  ) else (
  if starts_with (!p) ("0094") then (
  p := (let __s = !p in let __st = 4 in let __len = (String.length (!p) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  ) else (
  if starts_with (!p) ("94") then (
  p := (let __s = !p in let __st = 2 in let __len = (String.length (!p) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  ) else (
  if starts_with (!p) ("0") then (
  p := (let __s = !p in let __st = 1 in let __len = (String.length (!p) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  ) else (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  );
  );
  );
  if ((String.length (!p) <> 9) && (String.length (!p) <> 10)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (String.make 1 (String.get (!p) 0) <> "7") then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let second = String.make 1 (String.get (!p) 1) in
  let allowed = ref (["0"; "1"; "2"; "4"; "5"; "6"; "7"; "8"]) in
  if not ((List.mem second !allowed)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let idx = ref (2) in
  if (String.length (!p) = 10) then (
  let sep = String.make 1 (String.get (!p) 2) in
  if ((sep <> "-") && (sep <> " ")) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  idx := 3;
  );
  if ((String.length (!p) - !idx) <> 7) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let rest = (let __s = !p in let __st = !idx in let __len = (String.length (!p) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  __ret := (Obj.magic (all_digits (rest)) : bool); raise Return
  with Return -> !__ret)


let phone = "0094702343221"
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_bool (is_sri_lankan_phone_number (phone))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
