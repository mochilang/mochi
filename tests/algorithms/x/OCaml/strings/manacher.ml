(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec palindromic_string input_string =
  let __ret = ref "" in
  (try
  let max_length = ref (0) in
  let new_input_string = ref ("") in
  let output_string = ref ("") in
  let n = String.length (input_string) in
  let i = ref (0) in
  (try while (!i < (n - 1)) do
    try
  new_input_string := ((!new_input_string ^ (let __s = input_string in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) ^ "|");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  new_input_string := (!new_input_string ^ (let __s = input_string in let __st = (n - 1) in let __len = (n - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""));
  let left = ref (0) in
  let right = ref (0) in
  let length = ref (([] : (int) list)) in
  i := 0;
  let m = String.length (!new_input_string) in
  (try while (!i < m) do
    try
  length := (Obj.magic (List.append (!length) [(Obj.magic (1) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let start = ref (0) in
  let j = ref (0) in
  (try while (!j < m) do
    try
  let k = ref (1) in
  if (!j <= !right) then (
  let mirror = ((!left + !right) - !j) in
  k := (List.nth (!length) (mirror) / 2);
  let diff = ((!right - !j) + 1) in
  if (diff < !k) then (
  k := diff;
  );
  if (!k < 1) then (
  k := 1;
  );
  );
  (try while ((((!j - !k) >= 0) && ((!j + !k) < m)) && ((let __s = !new_input_string in let __st = (!j + !k) in let __len = (((!j + !k) + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = (let __s = !new_input_string in let __st = (!j - !k) in let __len = (((!j - !k) + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) do
    try
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  length := (List.mapi (fun __i __x -> if __i = !j then ((2 * !k) - 1) else __x) (!length));
  if (((!j + !k) - 1) > !right) then (
  left := ((!j - !k) + 1);
  right := ((!j + !k) - 1);
  );
  if (List.nth (!length) (!j) > !max_length) then (
  max_length := List.nth (!length) (!j);
  start := !j;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let s = (let __s = !new_input_string in let __st = (!start - (!max_length / 2)) in let __len = (((!start + (!max_length / 2)) + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let idx = ref (0) in
  (try while (!idx < String.length (s)) do
    try
  let ch = (let __s = s in let __st = !idx in let __len = ((!idx + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (ch <> "|") then (
  output_string := (!output_string ^ ch);
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output_string) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((palindromic_string ("abbbaba")));
  print_endline ((palindromic_string ("ababa")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
