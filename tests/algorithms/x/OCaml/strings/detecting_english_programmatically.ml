(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _letters_and_space = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n"
let _lower = "abcdefghijklmnopqrstuvwxyz"
let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let rec to_upper s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = (let __s = s in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let j = ref (0) in
  let up = ref (c) in
  (try while (!j < String.length (_lower)) do
    try
  if (c = (let __s = _lower in let __st = !j in let __len = ((!j + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) then (
  up := (let __s = _upper in let __st = !j in let __len = ((!j + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ !up);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and char_in chars c =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (chars)) do
    try
  if ((let __s = chars in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = c) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and remove_non_letters message =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let ch = (let __s = message in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if char_in (_letters_and_space) (ch) then (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and split_spaces text =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  let ch = (let __s = text in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (ch = " ") then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (!current) : string)]) : string list);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (!current) : string)]) : string list);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and load_dictionary () =
  let __ret = ref ([] : (string * bool) list) in
  (try
  let words = ref (["HELLO"; "WORLD"; "HOW"; "ARE"; "YOU"; "THE"; "QUICK"; "BROWN"; "FOX"; "JUMPS"; "OVER"; "LAZY"; "DOG"]) in
  let dict = ref ([] : (string * bool) list) in
  (try List.iter (fun w ->
    try
  dict := ((__str (w), true) :: List.remove_assoc (__str (w)) (!dict));
    with Continue -> ()) (!words) with Break -> ());
  __ret := (Obj.magic (!dict) : (string * bool) list); raise Return
  with Return -> !__ret)


let _english_words = ref (load_dictionary ())
let rec get_english_count message =
  let __ret = ref 0.0 in
  (try
  let upper = to_upper (message) in
  let cleaned = remove_non_letters (upper) in
  let possible = ref (split_spaces (cleaned)) in
  let matches = ref (0) in
  let total = ref (0) in
  (try List.iter (fun w ->
    try
  if (w <> "") then (
  total := (!total + 1);
  if (List.mem_assoc w !_english_words) then (
  matches := (!matches + 1);
  );
  );
    with Continue -> ()) (!possible) with Break -> ());
  if (!total = 0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  __ret := (Obj.magic ((float_of_int (!matches) /. float_of_int (!total))) : float); raise Return
  with Return -> !__ret)

and is_english message word_percentage letter_percentage =
  let __ret = ref false in
  (try
  let word_percentage = (Obj.magic word_percentage : int) in
  let letter_percentage = (Obj.magic letter_percentage : int) in
  let words_match = ((get_english_count (message) *. 100.0) >= float_of_int (word_percentage)) in
  let num_letters = String.length (remove_non_letters (message)) in
  let letters_pct = if (String.length (message) = 0) then 0.0 else ((float_of_int (num_letters) /. float_of_int (String.length (message))) *. 100.0) in
  let letters_match = (letters_pct >= float_of_int (letter_percentage)) in
  __ret := (Obj.magic ((words_match && letters_match)) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_bool (is_english ("Hello World") (Obj.repr (20)) (Obj.repr (85)))));
  print_endline ((string_of_bool (is_english ("llold HorWd") (Obj.repr (20)) (Obj.repr (85)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
