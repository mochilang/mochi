(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec z_function s =
  let __ret = ref ([] : (int) list) in
  (try
  let z = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  z := (Obj.magic (List.append (!z) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let l = ref (0) in
  let r = ref (0) in
  i := 1;
  (try while (!i < String.length (s)) do
    try
  if (!i <= !r) then (
  let min_edge = ref (((!r - !i) + 1)) in
  let zi = (let __l = !z in let __i = (!i - !l) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (zi < !min_edge) then (
  min_edge := zi;
  );
  z := (List.mapi (fun __i __x -> if __i = !i then !min_edge else __x) (!z));
  );
  (try while go_next (Obj.repr (!i)) (!z) (s) do
    try
  z := (List.mapi (fun __i __x -> if __i = !i then ((let __l = !z in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + 1) else __x) (!z));
    with Continue -> ()
  done with Break -> ());
  if (((!i + (let __l = !z in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) - 1) > !r) then (
  l := !i;
  r := ((!i + (let __l = !z in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) - 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!z) : int list); raise Return
  with Return -> !__ret)

and go_next i z s =
  let __ret = ref false in
  (try
  let i = (Obj.magic i : int) in
  let z = (Obj.magic z : int list) in
  __ret := (Obj.magic ((((i + (let __l = z in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) < String.length (s)) && ((let __s = s in let __i = (let __l = z in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = (let __s = s in let __i = (i + (let __l = z in let __i = i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))))) : bool); raise Return
  with Return -> !__ret)

and find_pattern pattern input_str =
  let __ret = ref 0 in
  (try
  let answer = ref (0) in
  let z_res = ref (z_function ((pattern ^ input_str))) in
  let i = ref (0) in
  (try while (!i < List.length (!z_res)) do
    try
  if ((let __l = !z_res in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) >= String.length (pattern)) then (
  answer := (!answer + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!answer) : int); raise Return
  with Return -> !__ret)

and list_eq_int a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int list) in
  let b = (Obj.magic b : int list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and test_z_function () =
  let __ret = ref (Obj.magic 0) in
  (try
  let s1 = "abracadabra" in
  let expected1 = ref ([0; 0; 0; 1; 0; 1; 0; 4; 0; 0; 1]) in
  let r1 = ref (z_function (s1)) in
  if not (list_eq_int (!r1) (!expected1)) then (
  (failwith ("z_function abracadabra failed"));
  );
  let s2 = "aaaa" in
  let expected2 = ref ([0; 3; 2; 1]) in
  let r2 = ref (z_function (s2)) in
  if not (list_eq_int (!r2) (!expected2)) then (
  (failwith ("z_function aaaa failed"));
  );
  let s3 = "zxxzxxz" in
  let expected3 = ref ([0; 0; 0; 4; 0; 0; 1]) in
  let r3 = ref (z_function (s3)) in
  if not (list_eq_int (!r3) (!expected3)) then (
  (failwith ("z_function zxxzxxz failed"));
  );
    !__ret
  with Return -> !__ret)

and test_find_pattern () =
  let __ret = ref (Obj.magic 0) in
  (try
  if (find_pattern ("abr") ("abracadabra") <> 2) then (
  (failwith ("find_pattern abr failed"));
  );
  if (find_pattern ("a") ("aaaa") <> 4) then (
  (failwith ("find_pattern aaaa failed"));
  );
  if (find_pattern ("xz") ("zxxzxxz") <> 2) then (
  (failwith ("find_pattern xz failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_z_function ());
  ignore (test_find_pattern ());
  let r1 = ref (z_function ("abracadabra")) in
  let r2 = ref (z_function ("aaaa")) in
  let r3 = ref (z_function ("zxxzxxz")) in
  print_endline ((__str (!r1)));
  print_endline ((__str (!r2)));
  print_endline ((__str (!r3)));
  print_endline ((string_of_int (find_pattern ("abr") ("abracadabra"))));
  print_endline ((string_of_int (find_pattern ("a") ("aaaa"))));
  print_endline ((string_of_int (find_pattern ("xz") ("zxxzxxz"))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
