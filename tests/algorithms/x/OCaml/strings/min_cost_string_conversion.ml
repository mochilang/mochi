(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec string_to_chars s =
  let __ret = ref ([] : (string) list) in
  (try
  let chars = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  chars := (Obj.magic (List.append (!chars) [(Obj.magic ((let __s = s in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string)]) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!chars) : string list); raise Return
  with Return -> !__ret)

and join_chars chars =
  let __ret = ref "" in
  (try
  let chars = (Obj.magic chars : string list) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (chars)) do
    try
  res := (!res ^ List.nth (chars) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and insert_at chars index ch =
  let __ret = ref ([] : (string) list) in
  (try
  let chars = (Obj.magic chars : string list) in
  let index = (Obj.magic index : int) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < index) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (chars) (!i)) : string)]) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (ch) : string)]) : string list);
  (try while (!i < List.length (chars)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (chars) (!i)) : string)]) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and remove_at chars index =
  let __ret = ref ([] : (string) list) in
  (try
  let chars = (Obj.magic chars : string list) in
  let index = (Obj.magic index : int) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (chars)) do
    try
  if (!i <> index) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (chars) (!i)) : string)]) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and make_matrix_int rows cols init =
  let __ret = ref ([] : (int list) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let init = (Obj.magic init : int) in
  let matrix = ref (([] : (int list) list)) in
  (try for _ = 0 to (rows - 1) do
    try
  let row = ref (([] : (int) list)) in
  (try for _2 = 0 to (cols - 1) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (init) : int)]) : int list);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic (List.append (!matrix) [(Obj.magic (!row) : int list)]) : int list list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix) : int list list); raise Return
  with Return -> !__ret)

and make_matrix_string rows cols init =
  let __ret = ref ([] : (string list) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let matrix = ref (([] : (string list) list)) in
  (try for _ = 0 to (rows - 1) do
    try
  let row = ref (([] : (string) list)) in
  (try for _2 = 0 to (cols - 1) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (init) : string)]) : string list);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic (List.append (!matrix) [(Obj.magic (!row) : string list)]) : string list list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix) : string list list); raise Return
  with Return -> !__ret)

and compute_transform_tables source_string destination_string copy_cost replace_cost delete_cost insert_cost =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let copy_cost = (Obj.magic copy_cost : int) in
  let replace_cost = (Obj.magic replace_cost : int) in
  let delete_cost = (Obj.magic delete_cost : int) in
  let insert_cost = (Obj.magic insert_cost : int) in
  let source_seq = ref (string_to_chars (source_string)) in
  let dest_seq = ref (string_to_chars (destination_string)) in
  let m = List.length (!source_seq) in
  let n = List.length (!dest_seq) in
  let costs = ref (make_matrix_int (Obj.repr ((m + 1))) (Obj.repr ((n + 1))) (Obj.repr (0))) in
  let ops = ref (make_matrix_string (Obj.repr ((m + 1))) (Obj.repr ((n + 1))) ("0")) in
  let i = ref (1) in
  (try while (!i <= m) do
    try
  costs := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = 0 then (!i * delete_cost) else __x) (List.nth (!costs) (!i))) else __x) (!costs));
  ops := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = 0 then ("D" ^ List.nth (!source_seq) ((!i - 1))) else __x) (List.nth (!ops) (!i))) else __x) (!ops));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (1) in
  (try while (!j <= n) do
    try
  costs := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = !j then (!j * insert_cost) else __x) (List.nth (!costs) (0))) else __x) (!costs));
  ops := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = !j then ("I" ^ List.nth (!dest_seq) ((!j - 1))) else __x) (List.nth (!ops) (0))) else __x) (!ops));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := 1;
  (try while (!i <= m) do
    try
  j := 1;
  (try while (!j <= n) do
    try
  if (List.nth (!source_seq) ((!i - 1)) = List.nth (!dest_seq) ((!j - 1))) then (
  costs := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then (List.nth (List.nth (!costs) ((!i - 1))) ((!j - 1)) + copy_cost) else __x) (List.nth (!costs) (!i))) else __x) (!costs));
  ops := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then ("C" ^ List.nth (!source_seq) ((!i - 1))) else __x) (List.nth (!ops) (!i))) else __x) (!ops));
  ) else (
  costs := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then (List.nth (List.nth (!costs) ((!i - 1))) ((!j - 1)) + replace_cost) else __x) (List.nth (!costs) (!i))) else __x) (!costs));
  ops := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then (("R" ^ List.nth (!source_seq) ((!i - 1))) ^ List.nth (!dest_seq) ((!j - 1))) else __x) (List.nth (!ops) (!i))) else __x) (!ops));
  );
  if ((List.nth (List.nth (!costs) ((!i - 1))) (!j) + delete_cost) < List.nth (List.nth (!costs) (!i)) (!j)) then (
  costs := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then (List.nth (List.nth (!costs) ((!i - 1))) (!j) + delete_cost) else __x) (List.nth (!costs) (!i))) else __x) (!costs));
  ops := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then ("D" ^ List.nth (!source_seq) ((!i - 1))) else __x) (List.nth (!ops) (!i))) else __x) (!ops));
  );
  if ((List.nth (List.nth (!costs) (!i)) ((!j - 1)) + insert_cost) < List.nth (List.nth (!costs) (!i)) (!j)) then (
  costs := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then (List.nth (List.nth (!costs) (!i)) ((!j - 1)) + insert_cost) else __x) (List.nth (!costs) (!i))) else __x) (!costs));
  ops := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then ("I" ^ List.nth (!dest_seq) ((!j - 1))) else __x) (List.nth (!ops) (!i))) else __x) (!ops));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("costs"), Obj.repr (!costs)); (__str ("ops"), Obj.repr (!ops))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and assemble_transformation ops i j =
  let __ret = ref ([] : (string) list) in
  (try
  let ops = (Obj.magic ops : string list list) in
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  if ((i = 0) && (j = 0)) then (
  __ret := (Obj.magic ([]) : string list); raise Return
  );
  let op = List.nth (List.nth (ops) (i)) (j) in
  let kind = (let __s = op in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if ((kind = "C") || (kind = "R")) then (
  let seq = ref (assemble_transformation (ops) (Obj.repr ((i - 1))) (Obj.repr ((j - 1)))) in
  seq := (Obj.magic (List.append (!seq) [(Obj.magic (op) : string)]) : string list);
  __ret := (Obj.magic (!seq) : string list); raise Return
  ) else (
  if (kind = "D") then (
  let seq = ref (assemble_transformation (ops) (Obj.repr ((i - 1))) (Obj.repr (j))) in
  seq := (Obj.magic (List.append (!seq) [(Obj.magic (op) : string)]) : string list);
  __ret := (Obj.magic (!seq) : string list); raise Return
  ) else (
  let seq = ref (assemble_transformation (ops) (Obj.repr (i)) (Obj.repr ((j - 1)))) in
  seq := (Obj.magic (List.append (!seq) [(Obj.magic (op) : string)]) : string list);
  __ret := (Obj.magic (!seq) : string list); raise Return
  );
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let copy_cost = -(1) in
  let replace_cost = 1 in
  let delete_cost = 2 in
  let insert_cost = 2 in
  let src = "Python" in
  let dst = "Algorithms" in
  let tables = compute_transform_tables (src) (dst) (Obj.repr (copy_cost)) (Obj.repr (replace_cost)) (Obj.repr (delete_cost)) (Obj.repr (insert_cost)) in
  let operations = ref ((Obj.obj (List.assoc (__str ("ops")) (tables) : Obj.t) : string list list)) in
  let m = List.length (!operations) in
  let n = List.length (List.nth (!operations) (0)) in
  let sequence = ref (assemble_transformation (!operations) (Obj.repr ((m - 1))) (Obj.repr ((n - 1)))) in
  let string_list = ref (string_to_chars (src)) in
  let idx = ref (0) in
  let cost = ref (0) in
  let k = ref (0) in
  (try while (!k < List.length (!sequence)) do
    try
  print_endline ((join_chars (!string_list)));
  let op = List.nth (!sequence) (!k) in
  let kind = (let __s = op in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (kind = "C") then (
  cost := (!cost + copy_cost);
  ) else (
  if (kind = "R") then (
  string_list := (List.mapi (fun __i __x -> if __i = !idx then (let __s = op in let __st = 2 in let __len = (3 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") else __x) (!string_list));
  cost := (!cost + replace_cost);
  ) else (
  if (kind = "D") then (
  string_list := (Obj.magic remove_at (!string_list) (Obj.repr (!idx)) : string list);
  cost := (!cost + delete_cost);
  ) else (
  string_list := (Obj.magic insert_at (!string_list) (Obj.repr (!idx)) ((let __s = op in let __st = 1 in let __len = (2 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string list);
  cost := (!cost + insert_cost);
  );
  );
  );
  idx := (!idx + 1);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((join_chars (!string_list)));
  print_endline (("Cost: " ^ (string_of_int (!cost))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
