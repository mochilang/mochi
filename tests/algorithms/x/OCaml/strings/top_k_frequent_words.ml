(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let freq_map = ref ([] : (string * int) list)
let rec heapify arr index heap_size =
  let __ret = ref (Obj.magic 0) in
  (try
  arr := (Obj.magic !arr : (string * Obj.t) list list);
  let index = (Obj.magic index : int) in
  let heap_size = (Obj.magic heap_size : int) in
  let largest = ref (index) in
  let left = ((2 * index) + 1) in
  let right = ((2 * index) + 2) in
  if (left < heap_size) then (
  let left_item = List.nth (!arr) (left) in
  let largest_item = List.nth (!arr) (!largest) in
  if ((Obj.obj (List.assoc (__str ("count")) (left_item) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("count")) (largest_item) : Obj.t) : int)) then (
  largest := left;
  );
  );
  if (right < heap_size) then (
  let right_item = List.nth (!arr) (right) in
  let largest_item2 = List.nth (!arr) (!largest) in
  if ((Obj.obj (List.assoc (__str ("count")) (right_item) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("count")) (largest_item2) : Obj.t) : int)) then (
  largest := right;
  );
  );
  if (!largest <> index) then (
  let temp = List.nth (!arr) (!largest) in
  arr := (List.mapi (fun __i __x -> if __i = !largest then List.nth (!arr) (index) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = index then temp else __x) (!arr));
  ignore (heapify (arr) (Obj.repr (!largest)) (Obj.repr (heap_size)));
  );
    !__ret
  with Return -> !__ret)

and build_max_heap arr =
  let __ret = ref (Obj.magic 0) in
  (try
  let arr = (Obj.magic arr : (string * Obj.t) list list) in
  let i = ref (((List.length (arr) / 2) - 1)) in
  (try while (!i >= 0) do
    try
  ignore (heapify (ref (arr)) (Obj.repr (!i)) (Obj.repr (List.length (arr))));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and top_k_frequent_words words k_value =
  let __ret = ref ([] : (string) list) in
  (try
  let words = (Obj.magic words : string list) in
  let k_value = (Obj.magic k_value : int) in
  freq_map := [];
  let i = ref (0) in
  (try while (!i < List.length (words)) do
    try
  let w = List.nth (words) (!i) in
  if (List.mem_assoc w !freq_map) then (
  freq_map := ((__str (w), (List.assoc (__str (w)) (!freq_map) + 1)) :: List.remove_assoc (__str (w)) (!freq_map));
  ) else (
  freq_map := ((__str (w), 1) :: List.remove_assoc (__str (w)) (!freq_map));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let heap = ref (([] : ((string * Obj.t) list) list)) in
  (try List.iter (fun (w, _) ->
    try
  heap := (Obj.magic (List.append (!heap) [(Obj.magic ([(__str ("word"), Obj.repr (w)); (__str ("count"), Obj.repr (List.assoc (__str (w)) (!freq_map)))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()) (!freq_map) with Break -> ());
  ignore (build_max_heap (!heap));
  let result = ref (([] : (string) list)) in
  let heap_size = ref (List.length (!heap)) in
  let limit = ref (k_value) in
  if (!limit > !heap_size) then (
  limit := !heap_size;
  );
  let j = ref (0) in
  (try while (!j < !limit) do
    try
  let item = List.nth (!heap) (0) in
  result := (Obj.magic (List.append (!result) [(Obj.magic ((Obj.obj (List.assoc (__str ("word")) (item) : Obj.t) : string)) : string)]) : string list);
  heap := (List.mapi (fun __i __x -> if __i = 0 then List.nth (!heap) ((!heap_size - 1)) else __x) (!heap));
  heap := (List.mapi (fun __i __x -> if __i = (!heap_size - 1) then item else __x) (!heap));
  heap_size := (!heap_size - 1);
  ignore (heapify (heap) (Obj.repr (0)) (Obj.repr (!heap_size)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let sample = ref (["a"; "b"; "c"; "a"; "c"; "c"]) in
  print_endline (__show_list (top_k_frequent_words (!sample) (Obj.repr (3))));
  print_endline (__show_list (top_k_frequent_words (!sample) (Obj.repr (2))));
  print_endline (__show_list (top_k_frequent_words (!sample) (Obj.repr (1))));
  print_endline (__show_list (top_k_frequent_words (!sample) (Obj.repr (0))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
