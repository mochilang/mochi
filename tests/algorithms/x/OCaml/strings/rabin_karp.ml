(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let alphabet_size = 256
let modulus = 1000003
let rec index_of_char s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and ord ch =
  let __ret = ref 0 in
  (try
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let digits = "0123456789" in
  let idx = ref (index_of_char (upper) (ch)) in
  if (!idx >= 0) then (
  __ret := (Obj.magic ((65 + !idx)) : int); raise Return
  );
  idx := index_of_char (lower) (ch);
  if (!idx >= 0) then (
  __ret := (Obj.magic ((97 + !idx)) : int); raise Return
  );
  idx := index_of_char (digits) (ch);
  if (!idx >= 0) then (
  __ret := (Obj.magic ((48 + !idx)) : int); raise Return
  );
  if (ch = "ü") then (
  __ret := (Obj.magic (252) : int); raise Return
  );
  if (ch = "Ü") then (
  __ret := (Obj.magic (220) : int); raise Return
  );
  if (ch = " ") then (
  __ret := (Obj.magic (32) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and rabin_karp pattern text =
  let __ret = ref false in
  (try
  let p_len = String.length (pattern) in
  let t_len = String.length (text) in
  if (p_len > t_len) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let p_hash = ref (0) in
  let t_hash = ref (0) in
  let modulus_power = ref (1) in
  let i = ref (0) in
  (try while (!i < p_len) do
    try
  p_hash := (((ord (String.make 1 (String.get (pattern) !i)) + (!p_hash * alphabet_size)) mod modulus + modulus) mod modulus);
  t_hash := (((ord (String.make 1 (String.get (text) !i)) + (!t_hash * alphabet_size)) mod modulus + modulus) mod modulus);
  if (!i <> (p_len - 1)) then (
  modulus_power := (((!modulus_power * alphabet_size) mod modulus + modulus) mod modulus);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j <= (t_len - p_len)) do
    try
  if ((!t_hash = !p_hash) && ((let __s = text in let __st = !j in let __len = ((!j + p_len) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = pattern)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if (!j = (t_len - p_len)) then (
  j := (!j + 1);
  raise Continue;
  );
  t_hash := (((((!t_hash - (ord (String.make 1 (String.get (text) !j)) * !modulus_power)) * alphabet_size) + ord (String.make 1 (String.get (text) (!j + p_len)))) mod modulus + modulus) mod modulus);
  if (!t_hash < 0) then (
  t_hash := (!t_hash + modulus);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and test_rabin_karp () =
  let __ret = ref (Obj.magic 0) in
  (try
  let pattern1 = "abc1abc12" in
  let text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc" in
  let text2 = "alskfjaldsk23adsfabcabc" in
  if (not (rabin_karp (pattern1) (text1)) || rabin_karp (pattern1) (text2)) then (
  print_endline ("Failure");
  __ret := (); raise Return
  );
  let pattern2 = "ABABX" in
  let text3 = "ABABZABABYABABX" in
  if not (rabin_karp (pattern2) (text3)) then (
  print_endline ("Failure");
  __ret := (); raise Return
  );
  let pattern3 = "AAAB" in
  let text4 = "ABAAAAAB" in
  if not (rabin_karp (pattern3) (text4)) then (
  print_endline ("Failure");
  __ret := (); raise Return
  );
  let pattern4 = "abcdabcy" in
  let text5 = "abcxabcdabxabcdabcdabcy" in
  if not (rabin_karp (pattern4) (text5)) then (
  print_endline ("Failure");
  __ret := (); raise Return
  );
  let pattern5 = "Lü" in
  let text6 = "Lüsai" in
  if not (rabin_karp (pattern5) (text6)) then (
  print_endline ("Failure");
  __ret := (); raise Return
  );
  let pattern6 = "Lue" in
  if rabin_karp (pattern6) (text6) then (
  print_endline ("Failure");
  __ret := (); raise Return
  );
  print_endline ("Success.");
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (test_rabin_karp ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
