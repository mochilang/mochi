(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec is_pangram input_str =
  let __ret = ref false in
  (try
  let letters = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (input_str)) do
    try
  let c = String.lowercase_ascii ((let __s = input_str in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) in
  let is_new = not ((List.mem c !letters)) in
  if ((((c <> " ") && ("a" <= c)) && (c <= "z")) && is_new) then (
  letters := (Obj.magic (List.append (!letters) [(Obj.magic (c) : string)]) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((List.length (!letters) = 26)) : bool); raise Return
  with Return -> !__ret)

and is_pangram_faster input_str =
  let __ret = ref false in
  (try
  let alphabet = "abcdefghijklmnopqrstuvwxyz" in
  let flag = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < 26) do
    try
  flag := (Obj.magic (List.append (!flag) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < String.length (input_str)) do
    try
  let c = String.lowercase_ascii ((let __s = input_str in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) in
  let k = ref (0) in
  (try while (!k < 26) do
    try
  if ((let __s = alphabet in let __i = !k in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = c) then (
  flag := (List.mapi (fun __i __x -> if __i = !k then true else __x) (!flag));
  raise Break;
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let t = ref (0) in
  (try while (!t < 26) do
    try
  if not ((let __l = !flag in let __i = !t in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and is_pangram_fastest input_str =
  let __ret = ref false in
  (try
  let s = String.lowercase_ascii (input_str) in
  let alphabet = "abcdefghijklmnopqrstuvwxyz" in
  let i = ref (0) in
  (try while (!i < String.length (alphabet)) do
    try
  let letter = (let __s = alphabet in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if not ((let len_s = String.length s and len_sub = String.length letter in let rec aux i = if i + len_sub > len_s then false else if String.sub s i len_sub = letter then true else aux (i + 1) in aux 0)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let s1 = "The quick brown fox jumps over the lazy dog"
let s2 = "My name is Unknown"
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_bool (is_pangram (s1))));
  print_endline ((string_of_bool (is_pangram (s2))));
  print_endline ((string_of_bool (is_pangram_faster (s1))));
  print_endline ((string_of_bool (is_pangram_faster (s2))));
  print_endline ((string_of_bool (is_pangram_fastest (s1))));
  print_endline ((string_of_bool (is_pangram_fastest (s2))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
