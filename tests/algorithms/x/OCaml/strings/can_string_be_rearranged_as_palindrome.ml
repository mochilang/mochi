(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _lowercase = "abcdefghijklmnopqrstuvwxyz"
let rec char_to_lower c =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_letters)) do
    try
  if (c = (let __s = _letters in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) then (
  __ret := (Obj.magic ((let __s = _lowercase in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st))) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (c) : string); raise Return
  with Return -> !__ret)

and normalize input_str =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (input_str)) do
    try
  let ch = (let __s = input_str in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  let lc = char_to_lower (ch) in
  if ((lc >= "a") && (lc <= "z")) then (
  res := (!res ^ lc);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and can_string_be_rearranged_as_palindrome_counter input_str =
  let __ret = ref false in
  (try
  let s = normalize (input_str) in
  let freq = ref ([] : (string * int) list) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc ch !freq) then (
  freq := ((__str (ch), (List.assoc (__str (ch)) (!freq) + 1)) :: List.remove_assoc (__str (ch)) (!freq));
  ) else (
  freq := ((__str (ch), 1) :: List.remove_assoc (__str (ch)) (!freq));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let odd = ref (0) in
  (try List.iter (fun (key, _) ->
    try
  if (((List.assoc (__str (key)) (!freq) mod 2 + 2) mod 2) <> 0) then (
  odd := (!odd + 1);
  );
    with Continue -> ()) (!freq) with Break -> ());
  __ret := (Obj.magic ((!odd < 2)) : bool); raise Return
  with Return -> !__ret)

and can_string_be_rearranged_as_palindrome input_str =
  let __ret = ref false in
  (try
  let s = normalize (input_str) in
  if (String.length (s) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let character_freq_dict = ref ([] : (string * int) list) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let character = (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc character !character_freq_dict) then (
  character_freq_dict := ((__str (character), (List.assoc (__str (character)) (!character_freq_dict) + 1)) :: List.remove_assoc (__str (character)) (!character_freq_dict));
  ) else (
  character_freq_dict := ((__str (character), 1) :: List.remove_assoc (__str (character)) (!character_freq_dict));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let odd_char = ref (0) in
  (try List.iter (fun (character_key, _) ->
    try
  let character_count = List.assoc (__str (character_key)) (!character_freq_dict) in
  if (((character_count mod 2 + 2) mod 2) <> 0) then (
  odd_char := (!odd_char + 1);
  );
    with Continue -> ()) (!character_freq_dict) with Break -> ());
  __ret := (Obj.magic (not ((!odd_char > 1))) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_bool (can_string_be_rearranged_as_palindrome_counter ("Momo")));
  print_endline (string_of_bool (can_string_be_rearranged_as_palindrome_counter ("Mother")));
  print_endline (string_of_bool (can_string_be_rearranged_as_palindrome ("Momo")));
  print_endline (string_of_bool (can_string_be_rearranged_as_palindrome ("Mother")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
