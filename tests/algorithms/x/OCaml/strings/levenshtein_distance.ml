(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec range_list n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let lst = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  lst := (Obj.magic (List.append (!lst) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!lst) : int list); raise Return
  with Return -> !__ret)

and min3 a b c =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let m = ref (a) in
  if (b < !m) then (
  m := b;
  );
  if (c < !m) then (
  m := c;
  );
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and levenshtein_distance first_word second_word =
  let __ret = ref 0 in
  (try
  if (String.length (first_word) < String.length (second_word)) then (
  __ret := (Obj.magic (levenshtein_distance (second_word) (first_word)) : int); raise Return
  );
  if (String.length (second_word) = 0) then (
  __ret := (Obj.magic (String.length (first_word)) : int); raise Return
  );
  let previous_row = ref (range_list (Obj.repr ((String.length (second_word) + 1)))) in
  let i = ref (0) in
  (try while (!i < String.length (first_word)) do
    try
  let c1 = String.make 1 (String.get (first_word) !i) in
  let current_row = ref (([] : (int) list)) in
  current_row := (Obj.magic (List.append (!current_row) [(Obj.magic ((!i + 1)) : int)]) : int list);
  let j = ref (0) in
  (try while (!j < String.length (second_word)) do
    try
  let c2 = String.make 1 (String.get (second_word) !j) in
  let insertions = (List.nth (!previous_row) ((!j + 1)) + 1) in
  let deletions = (List.nth (!current_row) (!j) + 1) in
  let substitutions = (List.nth (!previous_row) (!j) + if (c1 = c2) then 0 else 1) in
  let min_val = min3 (Obj.repr (insertions)) (Obj.repr (deletions)) (Obj.repr (substitutions)) in
  current_row := (Obj.magic (List.append (!current_row) [(Obj.magic (min_val) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  previous_row := (Obj.magic !current_row : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!previous_row) ((List.length (!previous_row) - 1))) : int); raise Return
  with Return -> !__ret)

and levenshtein_distance_optimized first_word second_word =
  let __ret = ref 0 in
  (try
  if (String.length (first_word) < String.length (second_word)) then (
  __ret := (Obj.magic (levenshtein_distance_optimized (second_word) (first_word)) : int); raise Return
  );
  if (String.length (second_word) = 0) then (
  __ret := (Obj.magic (String.length (first_word)) : int); raise Return
  );
  let previous_row = ref (range_list (Obj.repr ((String.length (second_word) + 1)))) in
  let i = ref (0) in
  (try while (!i < String.length (first_word)) do
    try
  let c1 = String.make 1 (String.get (first_word) !i) in
  let current_row = ref (([] : (int) list)) in
  current_row := (Obj.magic (List.append (!current_row) [(Obj.magic ((!i + 1)) : int)]) : int list);
  let k = ref (0) in
  (try while (!k < String.length (second_word)) do
    try
  current_row := (Obj.magic (List.append (!current_row) [(Obj.magic (0) : int)]) : int list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < String.length (second_word)) do
    try
  let c2 = String.make 1 (String.get (second_word) !j) in
  let insertions = (List.nth (!previous_row) ((!j + 1)) + 1) in
  let deletions = (List.nth (!current_row) (!j) + 1) in
  let substitutions = (List.nth (!previous_row) (!j) + if (c1 = c2) then 0 else 1) in
  let min_val = min3 (Obj.repr (insertions)) (Obj.repr (deletions)) (Obj.repr (substitutions)) in
  current_row := (List.mapi (fun __i __x -> if __i = (!j + 1) then min_val else __x) (!current_row));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  previous_row := (Obj.magic !current_row : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!previous_row) ((List.length (!previous_row) - 1))) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = "kitten" in
  let b = "sitting" in
  print_endline ((string_of_int (levenshtein_distance (a) (b))));
  print_endline ((string_of_int (levenshtein_distance_optimized (a) (b))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
