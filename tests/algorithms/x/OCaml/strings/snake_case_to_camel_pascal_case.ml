(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec split s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  if (ch = sep) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (!current) : string)]) : string list);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (!current) : string)]) : string list);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and capitalize word =
  let __ret = ref "" in
  (try
  if (String.length (word) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let first = String.uppercase_ascii ((let __s = word in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) in
  let rest = (let __s = word in let __st = 1 in let __len = (String.length (word) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  __ret := (Obj.magic ((first ^ rest)) : string); raise Return
  with Return -> !__ret)

and snake_to_camel_case input_str use_pascal =
  let __ret = ref "" in
  (try
  let words = ref (split (input_str) ("_")) in
  let result = ref ("") in
  let index = ref (0) in
  if not (use_pascal) then (
  if (List.length (!words) > 0) then (
  result := List.nth (!words) (0);
  index := 1;
  );
  );
  (try while (!index < List.length (!words)) do
    try
  let word = List.nth (!words) (!index) in
  result := (!result ^ capitalize (word));
  index := (!index + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((snake_to_camel_case ("some_random_string") (false)));
  print_endline ((snake_to_camel_case ("some_random_string") (true)));
  print_endline ((snake_to_camel_case ("some_random_string_with_numbers_123") (false)));
  print_endline ((snake_to_camel_case ("some_random_string_with_numbers_123") (true)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
