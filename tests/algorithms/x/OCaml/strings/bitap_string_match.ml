(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow2 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (!res * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_and a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  (try while ((!x > 0) || (!y > 0)) do
    try
  if ((((!x mod 2 + 2) mod 2) = 1) && (((!y mod 2 + 2) mod 2) = 1)) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_or a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  (try while ((!x > 0) || (!y > 0)) do
    try
  if ((((!x mod 2 + 2) mod 2) = 1) || (((!y mod 2 + 2) mod 2) = 1)) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and char_to_index ch =
  let __ret = ref 0 in
  (try
  let letters = "abcdefghijklmnopqrstuvwxyz" in
  let i = ref (0) in
  (try while (!i < String.length (letters)) do
    try
  if ((let __s = letters in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (26) : int); raise Return
  with Return -> !__ret)

and bitap_string_match text pattern =
  let __ret = ref 0 in
  (try
  if (pattern = "") then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let m = String.length (pattern) in
  if (m > String.length (text)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let limit = pow2 (Obj.repr ((m + 1))) in
  let all_ones = (limit - 1) in
  let pattern_mask = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < 27) do
    try
  pattern_mask := (Obj.magic (List.append (!pattern_mask) [(Obj.magic (all_ones) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < m) do
    try
  let ch = (let __s = pattern in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let idx = char_to_index (ch) in
  pattern_mask := (List.mapi (fun __i __x -> if __i = idx then bit_and (Obj.repr ((let __l = !pattern_mask in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) (Obj.repr ((all_ones - pow2 (Obj.repr (!i))))) else __x) (!pattern_mask));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let state = ref ((all_ones - 1)) in
  i := 0;
  (try while (!i < String.length (text)) do
    try
  let ch = (let __s = text in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let idx = char_to_index (ch) in
  state := bit_or (Obj.repr (!state)) (Obj.repr ((let __l = !pattern_mask in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  state := (((!state * 2) mod limit + limit) mod limit);
  if (bit_and (Obj.repr (!state)) (Obj.repr (pow2 (Obj.repr (m)))) = 0) then (
  __ret := (Obj.magic (((!i - m) + 1)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((string_of_int (bitap_string_match ("abdabababc") ("ababc"))));
  print_endline ((string_of_int (bitap_string_match ("abdabababc") (""))));
  print_endline ((string_of_int (bitap_string_match ("abdabababc") ("c"))));
  print_endline ((string_of_int (bitap_string_match ("abdabababc") ("fofosdfo"))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
