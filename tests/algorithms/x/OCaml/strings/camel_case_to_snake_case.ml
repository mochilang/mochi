(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _lower = "abcdefghijklmnopqrstuvwxyz"
let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _digits = "0123456789"
let rec is_lower ch =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_lower)) do
    try
  if ((let __s = _lower in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_upper ch =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_upper)) do
    try
  if ((let __s = _upper in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_digit ch =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_digits)) do
    try
  if ((let __s = _digits in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_alpha ch =
  let __ret = ref false in
  (try
  if is_lower (ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if is_upper (ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_alnum ch =
  let __ret = ref false in
  (try
  if is_alpha (ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if is_digit (ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and to_lower ch =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_upper)) do
    try
  if ((let __s = _upper in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic ((let __s = _lower in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (ch) : string); raise Return
  with Return -> !__ret)

and camel_to_snake_case input_str =
  let __ret = ref "" in
  (try
  let snake_str = ref ("") in
  let i = ref (0) in
  let prev_is_digit = ref (false) in
  let prev_is_alpha = ref (false) in
  (try while (!i < String.length (input_str)) do
    try
  let ch = (let __s = input_str in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if is_upper (ch) then (
  snake_str := ((!snake_str ^ "_") ^ to_lower (ch));
  ) else (
  if (!prev_is_digit && is_lower (ch)) then (
  snake_str := ((!snake_str ^ "_") ^ ch);
  ) else (
  if (!prev_is_alpha && is_digit (ch)) then (
  snake_str := ((!snake_str ^ "_") ^ ch);
  ) else (
  if not (is_alnum (ch)) then (
  snake_str := (!snake_str ^ "_");
  ) else (
  snake_str := (!snake_str ^ ch);
  );
  );
  );
  );
  prev_is_digit := is_digit (ch);
  prev_is_alpha := is_alpha (ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if ((String.length (!snake_str) > 0) && ((let __s = !snake_str in let __i = 0 in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = "_")) then (
  snake_str := (let __s = !snake_str in let __st = 1 in let __len = (String.length (!snake_str) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  );
  __ret := (Obj.magic (!snake_str) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((camel_to_snake_case ("someRandomString")));
  print_endline ((camel_to_snake_case ("SomeRandomStr#ng")));
  print_endline ((camel_to_snake_case ("123SomeRandom123String123")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
