(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec min_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a < b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and max_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and repeat_bool n value =
  let __ret = ref ([] : (bool) list) in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (value) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : bool list); raise Return
  with Return -> !__ret)

and set_bool xs idx value =
  let __ret = ref ([] : (bool) list) in
  (try
  let xs = (Obj.magic xs : bool list) in
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i = idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (value) : bool)]) : bool list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : bool)]) : bool list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : bool list); raise Return
  with Return -> !__ret)

and jaro_winkler s1 s2 =
  let __ret = ref 0.0 in
  (try
  let len1 = String.length (s1) in
  let len2 = String.length (s2) in
  let limit = (min_int (Obj.repr (len1)) (Obj.repr (len2)) / 2) in
  let match1 = ref (repeat_bool (Obj.repr (len1)) (false)) in
  let match2 = ref (repeat_bool (Obj.repr (len2)) (false)) in
  let matches = ref (0) in
  let i = ref (0) in
  (try while (!i < len1) do
    try
  let start = max_int (Obj.repr (0)) (Obj.repr ((!i - limit))) in
  let end_ = min_int (Obj.repr (((!i + limit) + 1))) (Obj.repr (len2)) in
  let j = ref (start) in
  (try while (!j < end_) do
    try
  if (not (List.nth (!match2) (!j)) && ((let __s = s1 in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = (let __s = s2 in let __st = !j in let __len = ((!j + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) then (
  match1 := (Obj.magic set_bool (!match1) (Obj.repr (!i)) (true) : bool list);
  match2 := (Obj.magic set_bool (!match2) (Obj.repr (!j)) (true) : bool list);
  matches := (!matches + 1);
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!matches = 0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let transpositions = ref (0) in
  let k = ref (0) in
  i := 0;
  (try while (!i < len1) do
    try
  if List.nth (!match1) (!i) then (
  (try while not (List.nth (!match2) (!k)) do
    try
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if ((let __s = s1 in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") <> (let __s = s2 in let __st = !k in let __len = ((!k + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) then (
  transpositions := (!transpositions + 1);
  );
  k := (!k + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let m = float_of_int (!matches) in
  let jaro = ((((m /. float_of_int (len1)) +. (m /. float_of_int (len2))) +. ((m -. (float_of_int (!transpositions) /. 2.0)) /. m)) /. 3.0) in
  let prefix_len = ref (0) in
  i := 0;
  (try while (((!i < 4) && (!i < len1)) && (!i < len2)) do
    try
  if ((let __s = s1 in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = (let __s = s2 in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) then (
  prefix_len := (!prefix_len + 1);
  ) else (
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((jaro +. ((0.1 *. float_of_int (!prefix_len)) *. (1.0 -. jaro)))) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (jaro_winkler ("hello") ("world"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
