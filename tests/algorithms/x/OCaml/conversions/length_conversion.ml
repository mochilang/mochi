(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec rstrip_s s =
  let __ret = ref "" in
  (try
  if ((String.length (s) > 0) && (String.make 1 (String.get (s) (String.length (s) - 1)) = "s")) then (
  __ret := (Obj.magic (String.sub (s) (0) ((String.length (s) - 1) - 0)) : string); raise Return
  );
  __ret := (Obj.magic (s) : string); raise Return
  with Return -> !__ret)

and normalize_alias u =
  let __ret = ref "" in
  (try
  if (u = "millimeter") then (
  __ret := (Obj.magic ("mm") : string); raise Return
  );
  if (u = "centimeter") then (
  __ret := (Obj.magic ("cm") : string); raise Return
  );
  if (u = "meter") then (
  __ret := (Obj.magic ("m") : string); raise Return
  );
  if (u = "kilometer") then (
  __ret := (Obj.magic ("km") : string); raise Return
  );
  if (u = "inch") then (
  __ret := (Obj.magic ("in") : string); raise Return
  );
  if (u = "inche") then (
  __ret := (Obj.magic ("in") : string); raise Return
  );
  if (u = "feet") then (
  __ret := (Obj.magic ("ft") : string); raise Return
  );
  if (u = "foot") then (
  __ret := (Obj.magic ("ft") : string); raise Return
  );
  if (u = "yard") then (
  __ret := (Obj.magic ("yd") : string); raise Return
  );
  if (u = "mile") then (
  __ret := (Obj.magic ("mi") : string); raise Return
  );
  __ret := (Obj.magic (u) : string); raise Return
  with Return -> !__ret)

and has_unit u =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((((((((u = "mm") || (u = "cm")) || (u = "m")) || (u = "km")) || (u = "in")) || (u = "ft")) || (u = "yd")) || (u = "mi"))) : bool); raise Return
  with Return -> !__ret)

and from_factor u =
  let __ret = ref 0.0 in
  (try
  if (u = "mm") then (
  __ret := (Obj.magic (0.001) : float); raise Return
  );
  if (u = "cm") then (
  __ret := (Obj.magic (0.01) : float); raise Return
  );
  if (u = "m") then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  if (u = "km") then (
  __ret := (Obj.magic (1000.0) : float); raise Return
  );
  if (u = "in") then (
  __ret := (Obj.magic (0.0254) : float); raise Return
  );
  if (u = "ft") then (
  __ret := (Obj.magic (0.3048) : float); raise Return
  );
  if (u = "yd") then (
  __ret := (Obj.magic (0.9144) : float); raise Return
  );
  if (u = "mi") then (
  __ret := (Obj.magic (1609.34) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and to_factor u =
  let __ret = ref 0.0 in
  (try
  if (u = "mm") then (
  __ret := (Obj.magic (1000.0) : float); raise Return
  );
  if (u = "cm") then (
  __ret := (Obj.magic (100.0) : float); raise Return
  );
  if (u = "m") then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  if (u = "km") then (
  __ret := (Obj.magic (0.001) : float); raise Return
  );
  if (u = "in") then (
  __ret := (Obj.magic (39.3701) : float); raise Return
  );
  if (u = "ft") then (
  __ret := (Obj.magic (3.28084) : float); raise Return
  );
  if (u = "yd") then (
  __ret := (Obj.magic (1.09361) : float); raise Return
  );
  if (u = "mi") then (
  __ret := (Obj.magic (0.000621371) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and length_conversion value from_type to_type =
  let __ret = ref 0.0 in
  (try
  let value = (Obj.magic value : float) in
  let new_from = ref (normalize_alias (rstrip_s (String.lowercase_ascii (from_type)))) in
  let new_to = ref (normalize_alias (rstrip_s (String.lowercase_ascii (to_type)))) in
  if not (has_unit (!new_from)) then (
  (failwith ((("Invalid 'from_type' value: '" ^ from_type) ^ "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi")));
  );
  if not (has_unit (!new_to)) then (
  (failwith ((("Invalid 'to_type' value: '" ^ to_type) ^ "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi")));
  );
  __ret := (Obj.magic (((value *. from_factor (!new_from)) *. to_factor (!new_to))) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_float (length_conversion (Obj.repr (4.0)) ("METER") ("FEET")));
  print_endline (string_of_float (length_conversion (Obj.repr (1.0)) ("kilometer") ("inch")));
  print_endline (string_of_float (length_conversion (Obj.repr (2.0)) ("feet") ("meter")));
  print_endline (string_of_float (length_conversion (Obj.repr (2.0)) ("centimeter") ("millimeter")));
  print_endline (string_of_float (length_conversion (Obj.repr (4.0)) ("yard") ("kilometer")));
  print_endline (string_of_float (length_conversion (Obj.repr (3.0)) ("foot") ("inch")));
  print_endline (string_of_float (length_conversion (Obj.repr (3.0)) ("mm") ("in")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()