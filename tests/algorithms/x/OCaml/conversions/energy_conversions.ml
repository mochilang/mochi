(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let _energy_conversion = ref ([(__str ("joule"), 1.0); (__str ("kilojoule"), 1000.0); (__str ("megajoule"), 1000000.0); (__str ("gigajoule"), 1000000000.0); (__str ("wattsecond"), 1.0); (__str ("watthour"), 3600.0); (__str ("kilowatthour"), 3600000.0); (__str ("newtonmeter"), 1.0); (__str ("calorie_nutr"), 4186.8); (__str ("kilocalorie_nutr"), 4186800.0); (__str ("electronvolt"), 0.0000000000000000001602176634); (__str ("britishthermalunit_it"), 1055.05585); (__str ("footpound"), 1.355818)])
let rec energy_conversion from_type to_type value =
  let __ret = ref 0.0 in
  (try
  let value = (Obj.magic value : float) in
  if (((List.mem_assoc from_type !_energy_conversion) = false) || ((List.mem_assoc to_type !_energy_conversion) = false)) then (
  (failwith ("Incorrect 'from_type' or 'to_type'"));
  );
  __ret := (Obj.magic (((value *. List.assoc (__str (from_type)) (!_energy_conversion)) /. List.assoc (__str (to_type)) (!_energy_conversion))) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (energy_conversion ("joule") ("kilojoule") (Obj.repr (1.0)))));
  print_endline ((Printf.sprintf "%.16g" (energy_conversion ("kilowatthour") ("joule") (Obj.repr (10.0)))));
  print_endline ((Printf.sprintf "%.16g" (energy_conversion ("britishthermalunit_it") ("footpound") (Obj.repr (1.0)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()