(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and atanApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x > 1.0) then (
  __ret := (Obj.magic (((_pi /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  if (x < (-.(1.0))) then (
  __ret := (Obj.magic ((((-.(_pi)) /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  __ret := (Obj.magic ((x /. (1.0 +. ((0.28 *. x) *. x)))) : float); raise Return
  with Return -> !__ret)

and atan2Approx y x =
  let __ret = ref 0.0 in
  (try
  let y = (Obj.magic y : float) in
  let x = (Obj.magic x : float) in
  if (x > 0.0) then (
  let r = atanApprox (Obj.repr ((y /. x))) in
  __ret := (Obj.magic (r) : float); raise Return
  );
  if (x < 0.0) then (
  if (y >= 0.0) then (
  __ret := (Obj.magic ((atanApprox (Obj.repr ((y /. x))) +. _pi)) : float); raise Return
  );
  __ret := (Obj.magic ((atanApprox (Obj.repr ((y /. x))) -. _pi)) : float); raise Return
  );
  if (y > 0.0) then (
  __ret := (Obj.magic ((_pi /. 2.0)) : float); raise Return
  );
  if (y < 0.0) then (
  __ret := (Obj.magic (((-.(_pi)) /. 2.0)) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and deg rad =
  let __ret = ref 0.0 in
  (try
  let rad = (Obj.magic rad : float) in
  __ret := (Obj.magic (((rad *. 180.0) /. _pi)) : float); raise Return
  with Return -> !__ret)

and floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref ((Obj.magic x : int)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  p := (!p *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : float); raise Return
  with Return -> !__ret)

and round x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let m = pow10 (Obj.repr (n)) in
  __ret := (Obj.magic ((floor (Obj.repr (((x *. m) +. 0.5))) /. m)) : float); raise Return
  with Return -> !__ret)

and rectangular_to_polar real img =
  let __ret = ref ([] : (float) list) in
  (try
  let real = (Obj.magic real : float) in
  let img = (Obj.magic img : float) in
  let mod_ = round (Obj.repr (sqrtApprox (Obj.repr (((real *. real) +. (img *. img)))))) (Obj.repr (2)) in
  let ang = round (Obj.repr (deg (Obj.repr (atan2Approx (Obj.repr (img)) (Obj.repr (real)))))) (Obj.repr (2)) in
  __ret := (Obj.magic ([mod_; ang]) : float list); raise Return
  with Return -> !__ret)

and show real img =
  let __ret = ref (Obj.magic 0) in
  (try
  let real = (Obj.magic real : float) in
  let img = (Obj.magic img : float) in
  let r = ref (rectangular_to_polar (Obj.repr (real)) (Obj.repr (img))) in
  print_endline ((__str (!r)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (show (Obj.repr (5.0)) (Obj.repr ((-.(5.0)))));
  ignore (show (Obj.repr ((-.(1.0)))) (Obj.repr (1.0)));
  ignore (show (Obj.repr ((-.(1.0)))) (Obj.repr ((-.(1.0)))));
  ignore (show (Obj.repr (0.0000000001)) (Obj.repr (0.0000000001)));
  ignore (show (Obj.repr ((-.(0.0000000001)))) (Obj.repr (0.0000000001)));
  ignore (show (Obj.repr (9.75)) (Obj.repr (5.93)));
  ignore (show (Obj.repr (10000.0)) (Obj.repr (99999.0)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()