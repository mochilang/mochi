(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let units = ref (["cubic meter"; "litre"; "kilolitre"; "gallon"; "cubic yard"; "cubic foot"; "cup"])
let from_factors = ref ([1.0; 0.001; 1.0; 0.00454; 0.76455; 0.028; 0.000236588])
let to_factors = ref ([1.0; 1000.0; 1.0; 264.172; 1.30795; 35.3147; 4226.75])
let rec supported_values () =
  let __ret = ref "" in
  (try
  let result = ref (List.nth (!units) (0)) in
  let i = ref (1) in
  (try while (!i < List.length (!units)) do
    try
  result := ((!result ^ ", ") ^ List.nth (!units) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and find_index name =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (!units)) do
    try
  if (List.nth (!units) (!i) = name) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and get_from_factor name =
  let __ret = ref 0.0 in
  (try
  let idx = find_index (name) in
  if (idx < 0) then (
  (failwith (((("Invalid 'from_type' value: '" ^ name) ^ "' Supported values are: ") ^ supported_values ())));
  );
  __ret := (Obj.magic (List.nth (!from_factors) (idx)) : float); raise Return
  with Return -> !__ret)

and get_to_factor name =
  let __ret = ref 0.0 in
  (try
  let idx = find_index (name) in
  if (idx < 0) then (
  (failwith (((("Invalid 'to_type' value: '" ^ name) ^ "' Supported values are: ") ^ supported_values ())));
  );
  __ret := (Obj.magic (List.nth (!to_factors) (idx)) : float); raise Return
  with Return -> !__ret)

and volume_conversion value from_type to_type =
  let __ret = ref 0.0 in
  (try
  let value = (Obj.magic value : float) in
  let from_factor = get_from_factor (from_type) in
  let to_factor = get_to_factor (to_type) in
  __ret := (Obj.magic (((value *. from_factor) *. to_factor)) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (volume_conversion (Obj.repr (4.0)) ("cubic meter") ("litre"))));
  print_endline ((Printf.sprintf "%.16g" (volume_conversion (Obj.repr (1.0)) ("litre") ("gallon"))));
  print_endline ((Printf.sprintf "%.16g" (volume_conversion (Obj.repr (1.0)) ("kilolitre") ("cubic meter"))));
  print_endline ((Printf.sprintf "%.16g" (volume_conversion (Obj.repr (3.0)) ("gallon") ("cubic yard"))));
  print_endline ((Printf.sprintf "%.16g" (volume_conversion (Obj.repr (2.0)) ("cubic yard") ("litre"))));
  print_endline ((Printf.sprintf "%.16g" (volume_conversion (Obj.repr (4.0)) ("cubic foot") ("cup"))));
  print_endline ((Printf.sprintf "%.16g" (volume_conversion (Obj.repr (1.0)) ("cup") ("kilolitre"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()