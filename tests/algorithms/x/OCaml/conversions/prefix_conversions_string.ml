(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let si_positive = ref ([[(__str ("name"), Obj.repr ("yotta")); (__str ("exp"), Obj.repr (24))]; [(__str ("name"), Obj.repr ("zetta")); (__str ("exp"), Obj.repr (21))]; [(__str ("name"), Obj.repr ("exa")); (__str ("exp"), Obj.repr (18))]; [(__str ("name"), Obj.repr ("peta")); (__str ("exp"), Obj.repr (15))]; [(__str ("name"), Obj.repr ("tera")); (__str ("exp"), Obj.repr (12))]; [(__str ("name"), Obj.repr ("giga")); (__str ("exp"), Obj.repr (9))]; [(__str ("name"), Obj.repr ("mega")); (__str ("exp"), Obj.repr (6))]; [(__str ("name"), Obj.repr ("kilo")); (__str ("exp"), Obj.repr (3))]; [(__str ("name"), Obj.repr ("hecto")); (__str ("exp"), Obj.repr (2))]; [(__str ("name"), Obj.repr ("deca")); (__str ("exp"), Obj.repr (1))]])
let si_negative = ref ([[(__str ("name"), Obj.repr ("deci")); (__str ("exp"), Obj.repr (-(1)))]; [(__str ("name"), Obj.repr ("centi")); (__str ("exp"), Obj.repr (-(2)))]; [(__str ("name"), Obj.repr ("milli")); (__str ("exp"), Obj.repr (-(3)))]; [(__str ("name"), Obj.repr ("micro")); (__str ("exp"), Obj.repr (-(6)))]; [(__str ("name"), Obj.repr ("nano")); (__str ("exp"), Obj.repr (-(9)))]; [(__str ("name"), Obj.repr ("pico")); (__str ("exp"), Obj.repr (-(12)))]; [(__str ("name"), Obj.repr ("femto")); (__str ("exp"), Obj.repr (-(15)))]; [(__str ("name"), Obj.repr ("atto")); (__str ("exp"), Obj.repr (-(18)))]; [(__str ("name"), Obj.repr ("zepto")); (__str ("exp"), Obj.repr (-(21)))]; [(__str ("name"), Obj.repr ("yocto")); (__str ("exp"), Obj.repr (-(24)))]])
let binary_prefixes = ref ([[(__str ("name"), Obj.repr ("yotta")); (__str ("exp"), Obj.repr (80))]; [(__str ("name"), Obj.repr ("zetta")); (__str ("exp"), Obj.repr (70))]; [(__str ("name"), Obj.repr ("exa")); (__str ("exp"), Obj.repr (60))]; [(__str ("name"), Obj.repr ("peta")); (__str ("exp"), Obj.repr (50))]; [(__str ("name"), Obj.repr ("tera")); (__str ("exp"), Obj.repr (40))]; [(__str ("name"), Obj.repr ("giga")); (__str ("exp"), Obj.repr (30))]; [(__str ("name"), Obj.repr ("mega")); (__str ("exp"), Obj.repr (20))]; [(__str ("name"), Obj.repr ("kilo")); (__str ("exp"), Obj.repr (10))]])
let rec pow base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let e = ref (exp) in
  if (!e < 0) then (
  e := -(!e);
  let i = ref (0) in
  (try while (!i < !e) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((1.0 /. !result)) : float); raise Return
  );
  let i = ref (0) in
  (try while (!i < !e) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and add_si_prefix value =
  let __ret = ref "" in
  (try
  let value = (Obj.magic value : float) in
  let prefixes = ref (([] : ((string * Obj.t) list) list)) in
  if (value > 0.0) then (
  prefixes := !si_positive;
  ) else (
  prefixes := !si_negative;
  );
  let i = ref (0) in
  (try while (!i < List.length (!prefixes)) do
    try
  let p = List.nth (!prefixes) (!i) in
  let num = (value /. pow (Obj.repr (10.0)) (Obj.repr ((Obj.obj (List.assoc (__str ("exp")) (p) : Obj.t) : int)))) in
  if (num > 1.0) then (
  __ret := (Obj.magic ((((Printf.sprintf "%.16g" (num)) ^ " ") ^ (Obj.obj (List.assoc (__str ("name")) (p) : Obj.t) : string))) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((Printf.sprintf "%.16g" (value))) : string); raise Return
  with Return -> !__ret)

and add_binary_prefix value =
  let __ret = ref "" in
  (try
  let value = (Obj.magic value : float) in
  let i = ref (0) in
  (try while (!i < List.length (!binary_prefixes)) do
    try
  let p = List.nth (!binary_prefixes) (!i) in
  let num = (value /. pow (Obj.repr (2.0)) (Obj.repr ((Obj.obj (List.assoc (__str ("exp")) (p) : Obj.t) : int)))) in
  if (num > 1.0) then (
  __ret := (Obj.magic ((((Printf.sprintf "%.16g" (num)) ^ " ") ^ (Obj.obj (List.assoc (__str ("name")) (p) : Obj.t) : string))) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((Printf.sprintf "%.16g" (value))) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((add_si_prefix (Obj.repr (10000.0))));
  print_endline ((add_si_prefix (Obj.repr (0.005))));
  print_endline ((add_binary_prefix (Obj.repr (65536.0))));
  print_endline ((add_binary_prefix (Obj.repr (512.0))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()