(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _unit_symbol = ref ([(__str ("meter"), "m"); (__str ("kilometer"), "km"); (__str ("megametre"), "Mm"); (__str ("gigametre"), "Gm"); (__str ("terametre"), "Tm"); (__str ("petametre"), "Pm"); (__str ("exametre"), "Em"); (__str ("zettametre"), "Zm"); (__str ("yottametre"), "Ym")])
let _metric_conversion = ref ([(__str ("m"), 0); (__str ("km"), 3); (__str ("Mm"), 6); (__str ("Gm"), 9); (__str ("Tm"), 12); (__str ("Pm"), 15); (__str ("Em"), 18); (__str ("Zm"), 21); (__str ("Ym"), 24)])
let _abbreviations = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"
let rec sanitize unit =
  let __ret = ref "" in
  (try
  let res = ref (String.lowercase_ascii (unit)) in
  if (String.length (!res) > 0) then (
  let last = String.sub (!res) ((String.length (!res) - 1)) (String.length (!res) - (String.length (!res) - 1)) in
  if (last = "s") then (
  res := String.sub (!res) (0) ((String.length (!res) - 1) - 0);
  );
  );
  if (List.mem_assoc !res !_unit_symbol) then (
  __ret := (Obj.magic (List.assoc (__str (!res)) (!_unit_symbol)) : string); raise Return
  );
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and pow10 exp =
  let __ret = ref 0.0 in
  (try
  let exp = (Obj.magic exp : int) in
  if (exp = 0) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  let e = ref (exp) in
  let res = ref (1.0) in
  if (!e < 0) then (
  e := -(!e);
  );
  let i = ref (0) in
  (try while (!i < !e) do
    try
  res := (!res *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (exp < 0) then (
  __ret := (Obj.magic ((1.0 /. !res)) : float); raise Return
  );
  __ret := (Obj.magic (!res) : float); raise Return
  with Return -> !__ret)

and length_conversion value from_type to_type =
  let __ret = ref 0.0 in
  (try
  let value = (Obj.magic value : float) in
  let from_sanitized = sanitize (from_type) in
  let to_sanitized = sanitize (to_type) in
  if not ((List.mem_assoc from_sanitized !_metric_conversion)) then (
  (failwith (((("Invalid 'from_type' value: '" ^ from_type) ^ "'.\nConversion abbreviations are: ") ^ _abbreviations)));
  );
  if not ((List.mem_assoc to_sanitized !_metric_conversion)) then (
  (failwith (((("Invalid 'to_type' value: '" ^ to_type) ^ "'.\nConversion abbreviations are: ") ^ _abbreviations)));
  );
  let from_exp = List.assoc (__str (from_sanitized)) (!_metric_conversion) in
  let to_exp = List.assoc (__str (to_sanitized)) (!_metric_conversion) in
  let exponent = ref (0) in
  if (from_exp > to_exp) then (
  exponent := (from_exp - to_exp);
  ) else (
  exponent := -((to_exp - from_exp));
  );
  __ret := (Obj.magic ((value *. pow10 (Obj.repr (!exponent)))) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (length_conversion (Obj.repr (1.0)) ("meter") ("kilometer"))));
  print_endline ((Printf.sprintf "%.16g" (length_conversion (Obj.repr (1.0)) ("meter") ("megametre"))));
  print_endline ((Printf.sprintf "%.16g" (length_conversion (Obj.repr (1.0)) ("gigametre") ("meter"))));
  print_endline ((Printf.sprintf "%.16g" (length_conversion (Obj.repr (1.0)) ("terametre") ("zettametre"))));
  print_endline ((Printf.sprintf "%.16g" (length_conversion (Obj.repr (1.0)) ("yottametre") ("zettametre"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()