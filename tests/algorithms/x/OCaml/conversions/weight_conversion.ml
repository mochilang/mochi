(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow10 exp =
  let __ret = ref 0.0 in
  (try
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  if (exp >= 0) then (
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  let i = ref (0) in
  (try while (!i < (0 - exp)) do
    try
  result := (!result /. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)


let _kilogram_chart = ref ([(__str ("kilogram"), 1.0); (__str ("gram"), 1000.0); (__str ("milligram"), 1000000.0); (__str ("metric-ton"), 0.001); (__str ("long-ton"), 0.0009842073); (__str ("short-ton"), 0.0011023122); (__str ("pound"), 2.2046244202); (__str ("stone"), 0.1574731728); (__str ("ounce"), 35.273990723); (__str ("carrat"), 5000.0); (__str ("atomic-mass-unit"), (6.022136652 *. pow10 (Obj.repr (26))))])
let _weight_type_chart = ref ([(__str ("kilogram"), 1.0); (__str ("gram"), 0.001); (__str ("milligram"), 0.000001); (__str ("metric-ton"), 1000.0); (__str ("long-ton"), 1016.04608); (__str ("short-ton"), 907.184); (__str ("pound"), 0.453592); (__str ("stone"), 6.35029); (__str ("ounce"), 0.0283495); (__str ("carrat"), 0.0002); (__str ("atomic-mass-unit"), (1.660540199 *. pow10 (Obj.repr (-(27)))))])
let rec weight_conversion from_type to_type value =
  let __ret = ref 0.0 in
  (try
  let value = (Obj.magic value : float) in
  let has_to = (List.mem_assoc to_type !_kilogram_chart) in
  let has_from = (List.mem_assoc from_type !_weight_type_chart) in
  if (has_to && has_from) then (
  __ret := (Obj.magic (((value *. List.assoc (__str (to_type)) (!_kilogram_chart)) *. List.assoc (__str (from_type)) (!_weight_type_chart))) : float); raise Return
  );
  print_endline ("Invalid 'from_type' or 'to_type'");
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_float (weight_conversion ("kilogram") ("gram") (Obj.repr (1.0))));
  print_endline (string_of_float (weight_conversion ("gram") ("pound") (Obj.repr (3.0))));
  print_endline (string_of_float (weight_conversion ("ounce") ("kilogram") (Obj.repr (3.0))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()