(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _si_units = ref ([(__str ("yotta"), 24); (__str ("zetta"), 21); (__str ("exa"), 18); (__str ("peta"), 15); (__str ("tera"), 12); (__str ("giga"), 9); (__str ("mega"), 6); (__str ("kilo"), 3); (__str ("hecto"), 2); (__str ("deca"), 1); (__str ("deci"), -(1)); (__str ("centi"), -(2)); (__str ("milli"), -(3)); (__str ("micro"), -(6)); (__str ("nano"), -(9)); (__str ("pico"), -(12)); (__str ("femto"), -(15)); (__str ("atto"), -(18)); (__str ("zepto"), -(21)); (__str ("yocto"), -(24))])
let _binary_units = ref ([(__str ("yotta"), 8); (__str ("zetta"), 7); (__str ("exa"), 6); (__str ("peta"), 5); (__str ("tera"), 4); (__str ("giga"), 3); (__str ("mega"), 2); (__str ("kilo"), 1)])
let rec pow base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  if (exp = 0) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  let e = ref (exp) in
  if (!e < 0) then (
  e := -(!e);
  );
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < !e) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (exp < 0) then (
  __ret := (Obj.magic ((1.0 /. !result)) : float); raise Return
  );
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and convert_si_prefix known_amount known_prefix unknown_prefix =
  let __ret = ref 0.0 in
  (try
  let known_amount = (Obj.magic known_amount : float) in
  let kp = String.lowercase_ascii (known_prefix) in
  let up = String.lowercase_ascii (unknown_prefix) in
  if not ((List.mem_assoc kp !_si_units)) then (
  (failwith (("unknown prefix: " ^ known_prefix)));
  );
  if not ((List.mem_assoc up !_si_units)) then (
  (failwith (("unknown prefix: " ^ unknown_prefix)));
  );
  let diff = (List.assoc (__str (kp)) (!_si_units) - List.assoc (__str (up)) (!_si_units)) in
  __ret := (Obj.magic ((known_amount *. pow (Obj.repr (10.0)) (Obj.repr (diff)))) : float); raise Return
  with Return -> !__ret)

and convert_binary_prefix known_amount known_prefix unknown_prefix =
  let __ret = ref 0.0 in
  (try
  let known_amount = (Obj.magic known_amount : float) in
  let kp = String.lowercase_ascii (known_prefix) in
  let up = String.lowercase_ascii (unknown_prefix) in
  if not ((List.mem_assoc kp !_binary_units)) then (
  (failwith (("unknown prefix: " ^ known_prefix)));
  );
  if not ((List.mem_assoc up !_binary_units)) then (
  (failwith (("unknown prefix: " ^ unknown_prefix)));
  );
  let diff = ((List.assoc (__str (kp)) (!_binary_units) - List.assoc (__str (up)) (!_binary_units)) * 10) in
  __ret := (Obj.magic ((known_amount *. pow (Obj.repr (2.0)) (Obj.repr (diff)))) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (convert_si_prefix (Obj.repr (1.0)) ("giga") ("mega"))));
  print_endline ((Printf.sprintf "%.16g" (convert_si_prefix (Obj.repr (1.0)) ("mega") ("giga"))));
  print_endline ((Printf.sprintf "%.16g" (convert_si_prefix (Obj.repr (1.0)) ("kilo") ("kilo"))));
  print_endline ((Printf.sprintf "%.16g" (convert_binary_prefix (Obj.repr (1.0)) ("giga") ("mega"))));
  print_endline ((Printf.sprintf "%.16g" (convert_binary_prefix (Obj.repr (1.0)) ("mega") ("giga"))));
  print_endline ((Printf.sprintf "%.16g" (convert_binary_prefix (Obj.repr (1.0)) ("kilo") ("kilo"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()