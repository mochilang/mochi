(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let hex_digits = "0123456789abcdef"
let rec split_by_dot s =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.make 1 (String.get (s) !i) in
  if (c = ".") then (
  res := (List.append (!res) [(Obj.magic (!current) : string)]);
  current := "";
  ) else (
  current := (!current ^ c);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!current) : string)]);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and parse_decimal s =
  let __ret = ref 0 in
  (try
  if (String.length (s) = 0) then (
  (failwith ("Invalid IPv4 address format"));
  );
  let value = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.make 1 (String.get (s) !i) in
  if ((c < "0") || (c > "9")) then (
  (failwith ("Invalid IPv4 address format"));
  );
  value := ((!value * 10) + int_of_string (c));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : int); raise Return
  with Return -> !__ret)

and to_hex2 n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let x = ref (n) in
  let res = ref ("") in
  (try while (!x > 0) do
    try
  let d = ((!x mod 16 + 16) mod 16) in
  res := (String.make 1 (String.get (hex_digits) d) ^ !res);
  x := (!x / 16);
    with Continue -> ()
  done with Break -> ());
  (try while (String.length (!res) < 2) do
    try
  res := ("0" ^ !res);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and ipv4_to_decimal ipv4_address =
  let __ret = ref 0 in
  (try
  let parts = ref (split_by_dot (ipv4_address)) in
  if (List.length (!parts) <> 4) then (
  (failwith ("Invalid IPv4 address format"));
  );
  let result = ref (0) in
  let i = ref (0) in
  (try while (!i < 4) do
    try
  let oct = parse_decimal (List.nth (!parts) (!i)) in
  if ((oct < 0) || (oct > 255)) then (
  (failwith (("Invalid IPv4 octet " ^ (string_of_int (oct)))));
  );
  result := ((!result * 256) + oct);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and alt_ipv4_to_decimal ipv4_address =
  let __ret = ref 0 in
  (try
  let parts = ref (split_by_dot (ipv4_address)) in
  if (List.length (!parts) <> 4) then (
  (failwith ("Invalid IPv4 address format"));
  );
  let hex_str = ref ("") in
  let i = ref (0) in
  (try while (!i < 4) do
    try
  let oct = parse_decimal (List.nth (!parts) (!i)) in
  if ((oct < 0) || (oct > 255)) then (
  (failwith (("Invalid IPv4 octet " ^ (string_of_int (oct)))));
  );
  hex_str := (!hex_str ^ to_hex2 (Obj.repr (oct)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let value = ref (0) in
  let k = ref (0) in
  (try while (!k < String.length (!hex_str)) do
    try
  let c = String.make 1 (String.get (!hex_str) !k) in
  let digit = ref ((0 - 1)) in
  let j = ref (0) in
  (try while (!j < String.length (hex_digits)) do
    try
  if (String.make 1 (String.get (hex_digits) !j) = c) then (
  digit := !j;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!digit < 0) then (
  (failwith ("Invalid hex digit"));
  );
  value := ((!value * 16) + !digit);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : int); raise Return
  with Return -> !__ret)

and decimal_to_ipv4 decimal_ipv4 =
  let __ret = ref "" in
  (try
  let decimal_ipv4 = (Obj.magic decimal_ipv4 : int) in
  if ((decimal_ipv4 < 0) || (decimal_ipv4 > 4294967295)) then (
  (failwith ("Invalid decimal IPv4 address"));
  );
  let n = ref (decimal_ipv4) in
  let parts = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < 4) do
    try
  let octet = ((!n mod 256 + 256) mod 256) in
  parts := (List.append (!parts) [(Obj.magic ((string_of_int (octet))) : string)]);
  n := (!n / 256);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  let j = ref ((List.length (!parts) - 1)) in
  (try while (!j >= 0) do
    try
  res := (!res ^ List.nth (!parts) (!j));
  if (!j > 0) then (
  res := (!res ^ ".");
  );
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (ipv4_to_decimal ("192.168.0.1")));
  print_endline (string_of_int (ipv4_to_decimal ("10.0.0.255")));
  print_endline (string_of_int (alt_ipv4_to_decimal ("192.168.0.1")));
  print_endline (string_of_int (alt_ipv4_to_decimal ("10.0.0.255")));
  print_endline ((decimal_to_ipv4 (Obj.repr (3232235521))));
  print_endline ((decimal_to_ipv4 (Obj.repr (167772415))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()