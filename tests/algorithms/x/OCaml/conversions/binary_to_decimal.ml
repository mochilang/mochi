(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec trim s =
  let __ret = ref "" in
  (try
  let start = ref (0) in
  (try while (!start < String.length (s)) do
    try
  let ch = String.sub (s) !start ((!start + 1) - !start) in
  if ((((ch <> " ") && (ch <> "\n")) && (ch <> "\t")) && (ch <> "\r")) then (
  raise Break;
  );
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  let end_ = ref (String.length (s)) in
  (try while (!end_ > !start) do
    try
  let ch = String.sub (s) (!end_ - 1) (!end_ - (!end_ - 1)) in
  if ((((ch <> " ") && (ch <> "\n")) && (ch <> "\t")) && (ch <> "\r")) then (
  raise Break;
  );
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.sub (s) (!start) (!end_ - !start)) : string); raise Return
  with Return -> !__ret)

and bin_to_decimal bin_string =
  let __ret = ref 0 in
  (try
  let trimmed = trim (bin_string) in
  if (trimmed = "") then (
  (failwith ("Empty string was passed to the function"));
  );
  let is_negative = ref (false) in
  let s = ref (trimmed) in
  if (String.sub (!s) 0 (1 - 0) = "-") then (
  is_negative := true;
  s := String.sub (!s) (1) (String.length (!s) - 1);
  );
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  let c = String.sub (!s) !i ((!i + 1) - !i) in
  if ((c <> "0") && (c <> "1")) then (
  (failwith ("Non-binary value was passed to the function"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let decimal_number = ref (0) in
  i := 0;
  (try while (!i < String.length (!s)) do
    try
  let c = String.sub (!s) !i ((!i + 1) - !i) in
  let digit = int_of_string (c) in
  decimal_number := ((2 * !decimal_number) + digit);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !is_negative then (
  __ret := (Obj.magic (-(!decimal_number)) : int); raise Return
  );
  __ret := (Obj.magic (!decimal_number) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (bin_to_decimal ("101"))));
  print_endline ((string_of_int (bin_to_decimal (" 1010   "))));
  print_endline ((string_of_int (bin_to_decimal ("-11101"))));
  print_endline ((string_of_int (bin_to_decimal ("0"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()