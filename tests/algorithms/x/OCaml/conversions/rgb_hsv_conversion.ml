(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and fmod a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  __ret := (Obj.magic ((a -. (b *. float_of_int (int_of_float ((a /. b)))))) : float); raise Return
  with Return -> !__ret)

and roundf x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : float) in
  if (x >= 0.0) then (
  __ret := (Obj.magic (int_of_float ((x +. 0.5))) : int); raise Return
  );
  __ret := (Obj.magic (int_of_float ((x -. 0.5))) : int); raise Return
  with Return -> !__ret)

and maxf a b c =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let c = (Obj.magic c : float) in
  let m = ref (a) in
  if (b > !m) then (
  m := b;
  );
  if (c > !m) then (
  m := c;
  );
  __ret := (Obj.magic (!m) : float); raise Return
  with Return -> !__ret)

and minf a b c =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let c = (Obj.magic c : float) in
  let m = ref (a) in
  if (b < !m) then (
  m := b;
  );
  if (c < !m) then (
  m := c;
  );
  __ret := (Obj.magic (!m) : float); raise Return
  with Return -> !__ret)

and hsv_to_rgb hue saturation value =
  let __ret = ref ([] : (int) list) in
  (try
  let hue = (Obj.magic hue : float) in
  let saturation = (Obj.magic saturation : float) in
  let value = (Obj.magic value : float) in
  if ((hue < 0.0) || (hue > 360.0)) then (
  print_endline ("hue should be between 0 and 360");
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  if ((saturation < 0.0) || (saturation > 1.0)) then (
  print_endline ("saturation should be between 0 and 1");
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  if ((value < 0.0) || (value > 1.0)) then (
  print_endline ("value should be between 0 and 1");
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let chroma = (value *. saturation) in
  let hue_section = (hue /. 60.0) in
  let second_largest_component = (chroma *. (1.0 -. absf (Obj.repr ((fmod (Obj.repr (hue_section)) (Obj.repr (2.0)) -. 1.0))))) in
  let match_value = (value -. chroma) in
  let red = ref (0) in
  let green = ref (0) in
  let blue = ref (0) in
  if ((hue_section >= 0.0) && (hue_section <= 1.0)) then (
  red := roundf (Obj.repr ((255.0 *. (chroma +. match_value))));
  green := roundf (Obj.repr ((255.0 *. (second_largest_component +. match_value))));
  blue := roundf (Obj.repr ((255.0 *. match_value)));
  ) else (
  if ((hue_section > 1.0) && (hue_section <= 2.0)) then (
  red := roundf (Obj.repr ((255.0 *. (second_largest_component +. match_value))));
  green := roundf (Obj.repr ((255.0 *. (chroma +. match_value))));
  blue := roundf (Obj.repr ((255.0 *. match_value)));
  ) else (
  if ((hue_section > 2.0) && (hue_section <= 3.0)) then (
  red := roundf (Obj.repr ((255.0 *. match_value)));
  green := roundf (Obj.repr ((255.0 *. (chroma +. match_value))));
  blue := roundf (Obj.repr ((255.0 *. (second_largest_component +. match_value))));
  ) else (
  if ((hue_section > 3.0) && (hue_section <= 4.0)) then (
  red := roundf (Obj.repr ((255.0 *. match_value)));
  green := roundf (Obj.repr ((255.0 *. (second_largest_component +. match_value))));
  blue := roundf (Obj.repr ((255.0 *. (chroma +. match_value))));
  ) else (
  if ((hue_section > 4.0) && (hue_section <= 5.0)) then (
  red := roundf (Obj.repr ((255.0 *. (second_largest_component +. match_value))));
  green := roundf (Obj.repr ((255.0 *. match_value)));
  blue := roundf (Obj.repr ((255.0 *. (chroma +. match_value))));
  ) else (
  red := roundf (Obj.repr ((255.0 *. (chroma +. match_value))));
  green := roundf (Obj.repr ((255.0 *. match_value)));
  blue := roundf (Obj.repr ((255.0 *. (second_largest_component +. match_value))));
  );
  );
  );
  );
  );
  __ret := (Obj.magic ([!red; !green; !blue]) : int list); raise Return
  with Return -> !__ret)

and rgb_to_hsv red green blue =
  let __ret = ref ([] : (float) list) in
  (try
  let red = (Obj.magic red : int) in
  let green = (Obj.magic green : int) in
  let blue = (Obj.magic blue : int) in
  if ((red < 0) || (red > 255)) then (
  print_endline ("red should be between 0 and 255");
  __ret := (Obj.magic ([]) : float list); raise Return
  );
  if ((green < 0) || (green > 255)) then (
  print_endline ("green should be between 0 and 255");
  __ret := (Obj.magic ([]) : float list); raise Return
  );
  if ((blue < 0) || (blue > 255)) then (
  print_endline ("blue should be between 0 and 255");
  __ret := (Obj.magic ([]) : float list); raise Return
  );
  let float_red = (float_of_int (red) /. 255.0) in
  let float_green = (float_of_int (green) /. 255.0) in
  let float_blue = (float_of_int (blue) /. 255.0) in
  let value = maxf (Obj.repr (float_red)) (Obj.repr (float_green)) (Obj.repr (float_blue)) in
  let min_val = minf (Obj.repr (float_red)) (Obj.repr (float_green)) (Obj.repr (float_blue)) in
  let chroma = (value -. min_val) in
  let saturation = if (value = 0.0) then 0.0 else (chroma /. value) in
  let hue = ref (0.0) in
  if (chroma = 0.0) then (
  hue := 0.0;
  ) else (
  if (value = float_red) then (
  hue := (60.0 *. (0.0 +. ((float_green -. float_blue) /. chroma)));
  ) else (
  if (value = float_green) then (
  hue := (60.0 *. (2.0 +. ((float_blue -. float_red) /. chroma)));
  ) else (
  hue := (60.0 *. (4.0 +. ((float_red -. float_green) /. chroma)));
  );
  );
  );
  hue := fmod (Obj.repr ((!hue +. 360.0))) (Obj.repr (360.0));
  __ret := (Obj.magic ([!hue; saturation; value]) : float list); raise Return
  with Return -> !__ret)

and approximately_equal_hsv hsv1 hsv2 =
  let __ret = ref false in
  (try
  let check_hue = (absf (Obj.repr ((List.nth (hsv1) (0) -. List.nth (hsv2) (0)))) < 0.2) in
  let check_saturation = (absf (Obj.repr ((List.nth (hsv1) (1) -. List.nth (hsv2) (1)))) < 0.002) in
  let check_value = (absf (Obj.repr ((List.nth (hsv1) (2) -. List.nth (hsv2) (2)))) < 0.002) in
  __ret := (Obj.magic (((check_hue && check_saturation) && check_value)) : bool); raise Return
  with Return -> !__ret)


let rgb = ref (hsv_to_rgb (Obj.repr (180.0)) (Obj.repr (0.5)) (Obj.repr (0.5)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!rgb)));
  let hsv = ref (rgb_to_hsv (Obj.repr (64)) (Obj.repr (128)) (Obj.repr (128))) in
  print_endline ((__str (!hsv)));
  print_endline ((string_of_bool (approximately_equal_hsv (!hsv) ([180.0; 0.5; 0.5]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()