(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bin_to_octal bin_string =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < String.length (bin_string)) do
    try
  let c = String.make 1 (String.get (bin_string) !i) in
  if not (((c = "0") || (c = "1"))) then (
  (failwith ("Non-binary value was passed to the function"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (bin_string) = 0) then (
  (failwith ("Empty string was passed to the function"));
  );
  let padded = ref (bin_string) in
  (try while (((String.length (!padded) mod 3 + 3) mod 3) <> 0) do
    try
  padded := ("0" ^ !padded);
    with Continue -> ()
  done with Break -> ());
  let oct_string = ref ("") in
  let index = ref (0) in
  (try while (!index < String.length (!padded)) do
    try
  let group = String.sub (!padded) !index ((!index + 3) - !index) in
  let b0 = if (String.make 1 (String.get (group) 0) = "1") then 1 else 0 in
  let b1 = if (String.make 1 (String.get (group) 1) = "1") then 1 else 0 in
  let b2 = if (String.make 1 (String.get (group) 2) = "1") then 1 else 0 in
  let oct_val = (((b0 * 4) + (b1 * 2)) + b2) in
  oct_string := (!oct_string ^ (string_of_int (oct_val)));
  index := (!index + 3);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!oct_string) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((bin_to_octal ("1111")));
  print_endline ((bin_to_octal ("101010101010011")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()