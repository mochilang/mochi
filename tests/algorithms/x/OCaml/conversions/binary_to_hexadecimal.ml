(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec strip_spaces s =
  let __ret = ref "" in
  (try
  let start = ref (0) in
  let end_ = ref ((String.length (s) - 1)) in
  (try while ((!start < String.length (s)) && (String.make 1 (String.get (s) !start) = " ")) do
    try
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  (try while ((!end_ >= !start) && (String.make 1 (String.get (s) !end_) = " ")) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  let i = ref (!start) in
  (try while (!i <= !end_) do
    try
  res := (!res ^ String.make 1 (String.get (s) !i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and repeat_char ch count =
  let __ret = ref "" in
  (try
  let count = (Obj.magic count : int) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < count) do
    try
  res := (!res ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and slice s start end_ =
  let __ret = ref "" in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let res = ref ("") in
  let i = ref (start) in
  (try while (!i < end_) do
    try
  res := (!res ^ String.make 1 (String.get (s) !i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and bits_to_int bits =
  let __ret = ref 0 in
  (try
  let value = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (bits)) do
    try
  value := (!value * 2);
  if (String.make 1 (String.get (bits) !i) = "1") then (
  value := (!value + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : int); raise Return
  with Return -> !__ret)

and bin_to_hexadecimal binary_str =
  let __ret = ref "" in
  (try
  let s = ref (strip_spaces (binary_str)) in
  if (String.length (!s) = 0) then (
  (failwith ("Empty string was passed to the function"));
  );
  let is_negative = ref (false) in
  if (String.make 1 (String.get (!s) 0) = "-") then (
  is_negative := true;
  s := String.sub (!s) 1 (String.length (!s) - 1);
  );
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  let c = String.make 1 (String.get (!s) !i) in
  if ((c <> "0") && (c <> "1")) then (
  (failwith ("Non-binary value was passed to the function"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let groups = ((String.length (!s) / 4) + 1) in
  let pad_len = ((groups * 4) - String.length (!s)) in
  s := (repeat_char ("0") (Obj.repr (pad_len)) ^ !s);
  let digits = "0123456789abcdef" in
  let res = ref ("0x") in
  let j = ref (0) in
  (try while (!j < String.length (!s)) do
    try
  let chunk = String.sub (!s) !j ((!j + 4) - !j) in
  let val_ = bits_to_int (chunk) in
  res := (!res ^ String.make 1 (String.get (digits) val_));
  j := (!j + 4);
    with Continue -> ()
  done with Break -> ());
  if !is_negative then (
  __ret := (Obj.magic (("-" ^ !res)) : string); raise Return
  );
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((bin_to_hexadecimal ("101011111")));
  print_endline ((bin_to_hexadecimal (" 1010   ")));
  print_endline ((bin_to_hexadecimal ("-11101")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()