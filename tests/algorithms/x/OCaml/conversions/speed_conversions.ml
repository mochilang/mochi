(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let units = ref (["km/h"; "m/s"; "mph"; "knot"])
let speed_chart = ref ([1.0; 3.6; 1.609344; 1.852])
let speed_chart_inverse = ref ([1.0; 0.277777778; 0.621371192; 0.539956803])
let rec index_of arr value =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  if (List.nth (arr) (!i) = value) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and units_string arr =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  if (!i > 0) then (
  s := (!s ^ ", ");
  );
  s := (!s ^ List.nth (arr) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and round3 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = ((x *. 1000.0) +. 0.5) in
  let z = (Obj.magic y : int) in
  let zf = float_of_int (z) in
  __ret := (Obj.magic ((zf /. 1000.0)) : float); raise Return
  with Return -> !__ret)

and convert_speed speed unit_from unit_to =
  let __ret = ref 0.0 in
  (try
  let speed = (Obj.magic speed : float) in
  let from_index = index_of (!units) (unit_from) in
  let to_index = index_of (!units) (unit_to) in
  if ((from_index < 0) || (to_index < 0)) then (
  let msg = ((((("Incorrect 'from_type' or 'to_type' value: " ^ unit_from) ^ ", ") ^ unit_to) ^ "\nValid values are: ") ^ units_string (!units)) in
  (failwith (msg));
  );
  let result = ((speed *. List.nth (!speed_chart) (from_index)) *. List.nth (!speed_chart_inverse) (to_index)) in
  let r = round3 (Obj.repr (result)) in
  __ret := (Obj.magic (r) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("km/h") ("m/s"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("km/h") ("mph"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("km/h") ("knot"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("m/s") ("km/h"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("m/s") ("mph"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("m/s") ("knot"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("mph") ("km/h"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("mph") ("m/s"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("mph") ("knot"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("knot") ("km/h"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("knot") ("m/s"))));
  print_endline ((Printf.sprintf "%.16g" (convert_speed (Obj.repr (100.0)) ("knot") ("mph"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()