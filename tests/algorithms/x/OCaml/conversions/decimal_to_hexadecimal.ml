(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let values = ref (["0"; "1"; "2"; "3"; "4"; "5"; "6"; "7"; "8"; "9"; "a"; "b"; "c"; "d"; "e"; "f"])
let rec decimal_to_hexadecimal decimal =
  let __ret = ref "" in
  (try
  let decimal = (Obj.magic decimal : int) in
  let num = ref (decimal) in
  let negative = ref (false) in
  if (!num < 0) then (
  negative := true;
  num := -(!num);
  );
  if (!num = 0) then (
  if !negative then (
  __ret := (Obj.magic ("-0x0") : string); raise Return
  );
  __ret := (Obj.magic ("0x0") : string); raise Return
  );
  let hex = ref ("") in
  (try while (!num > 0) do
    try
  let remainder = ((!num mod 16 + 16) mod 16) in
  hex := (List.nth (!values) (remainder) ^ !hex);
  num := (!num / 16);
    with Continue -> ()
  done with Break -> ());
  if !negative then (
  __ret := (Obj.magic (("-0x" ^ !hex)) : string); raise Return
  );
  __ret := (Obj.magic (("0x" ^ !hex)) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((decimal_to_hexadecimal (Obj.repr (5))));
  print_endline ((decimal_to_hexadecimal (Obj.repr (15))));
  print_endline ((decimal_to_hexadecimal (Obj.repr (37))));
  print_endline ((decimal_to_hexadecimal (Obj.repr (255))));
  print_endline ((decimal_to_hexadecimal (Obj.repr (4096))));
  print_endline ((decimal_to_hexadecimal (Obj.repr (999098))));
  print_endline ((decimal_to_hexadecimal (Obj.repr (-(256)))));
  print_endline ((decimal_to_hexadecimal (Obj.repr (0))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()