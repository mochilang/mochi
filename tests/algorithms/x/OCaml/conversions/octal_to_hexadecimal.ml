(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec octal_to_hex octal =
  let __ret = ref "" in
  (try
  let s = ref (octal) in
  if (((String.length (!s) >= 2) && (String.make 1 (String.get (!s) 0) = "0")) && (String.make 1 (String.get (!s) 1) = "o")) then (
  s := String.sub (!s) (2) (String.length (!s) - 2);
  );
  if (String.length (!s) = 0) then (
  (failwith ("Empty string was passed to the function"));
  );
  let j = ref (0) in
  (try while (!j < String.length (!s)) do
    try
  let c = String.make 1 (String.get (!s) !j) in
  if ((((((((c <> "0") && (c <> "1")) && (c <> "2")) && (c <> "3")) && (c <> "4")) && (c <> "5")) && (c <> "6")) && (c <> "7")) then (
  (failwith ("Not a Valid Octal Number"));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let decimal = ref (0) in
  let k = ref (0) in
  (try while (!k < String.length (!s)) do
    try
  let d = int_of_string (String.make 1 (String.get (!s) !k)) in
  decimal := ((!decimal * 8) + d);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let hex_chars = "0123456789ABCDEF" in
  if (!decimal = 0) then (
  __ret := (Obj.magic ("0x") : string); raise Return
  );
  let hex = ref ("") in
  (try while (!decimal > 0) do
    try
  let idx = ((!decimal mod 16 + 16) mod 16) in
  hex := (String.make 1 (String.get (hex_chars) idx) ^ !hex);
  decimal := (!decimal / 16);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (("0x" ^ !hex)) : string); raise Return
  with Return -> !__ret)


let nums = ref (["030"; "100"; "247"; "235"; "007"])
let t = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!t < List.length (!nums)) do
    try
  let num = List.nth (!nums) (!t) in
  print_endline ((octal_to_hex (num)));
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()