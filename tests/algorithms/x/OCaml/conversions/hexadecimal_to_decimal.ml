(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec strip s =
  let __ret = ref "" in
  (try
  let start = ref (0) in
  let end_ = ref (String.length (s)) in
  (try while ((!start < !end_) && (String.sub (s) (!start) ((!start + 1) - !start) = " ")) do
    try
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  (try while ((!end_ > !start) && (String.sub (s) ((!end_ - 1)) (!end_ - (!end_ - 1)) = " ")) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.sub (s) (!start) (!end_ - !start)) : string); raise Return
  with Return -> !__ret)

and hex_digit_value c =
  let __ret = ref 0 in
  (try
  if (c = "0") then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (c = "1") then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (c = "2") then (
  __ret := (Obj.magic (2) : int); raise Return
  );
  if (c = "3") then (
  __ret := (Obj.magic (3) : int); raise Return
  );
  if (c = "4") then (
  __ret := (Obj.magic (4) : int); raise Return
  );
  if (c = "5") then (
  __ret := (Obj.magic (5) : int); raise Return
  );
  if (c = "6") then (
  __ret := (Obj.magic (6) : int); raise Return
  );
  if (c = "7") then (
  __ret := (Obj.magic (7) : int); raise Return
  );
  if (c = "8") then (
  __ret := (Obj.magic (8) : int); raise Return
  );
  if (c = "9") then (
  __ret := (Obj.magic (9) : int); raise Return
  );
  if ((c = "a") || (c = "A")) then (
  __ret := (Obj.magic (10) : int); raise Return
  );
  if ((c = "b") || (c = "B")) then (
  __ret := (Obj.magic (11) : int); raise Return
  );
  if ((c = "c") || (c = "C")) then (
  __ret := (Obj.magic (12) : int); raise Return
  );
  if ((c = "d") || (c = "D")) then (
  __ret := (Obj.magic (13) : int); raise Return
  );
  if ((c = "e") || (c = "E")) then (
  __ret := (Obj.magic (14) : int); raise Return
  );
  if ((c = "f") || (c = "F")) then (
  __ret := (Obj.magic (15) : int); raise Return
  );
  print_endline ("Non-hexadecimal value was passed to the function");
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and hex_to_decimal hex_string =
  let __ret = ref 0 in
  (try
  let s = ref (strip (hex_string)) in
  if (String.length (!s) = 0) then (
  print_endline ("Empty string was passed to the function");
  __ret := (Obj.magic (0) : int); raise Return
  );
  let is_negative = ref (false) in
  if (String.sub (!s) (0) (1 - 0) = "-") then (
  is_negative := true;
  s := String.sub (!s) (1) (String.length (!s) - 1);
  );
  let decimal_number = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  let c = String.sub (!s) (!i) ((!i + 1) - !i) in
  let value = hex_digit_value (c) in
  decimal_number := ((16 * !decimal_number) + value);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !is_negative then (
  __ret := (Obj.magic (-(!decimal_number)) : int); raise Return
  );
  __ret := (Obj.magic (!decimal_number) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((string_of_int (hex_to_decimal ("a"))));
  print_endline ((string_of_int (hex_to_decimal ("12f"))));
  print_endline ((string_of_int (hex_to_decimal ("   12f   "))));
  print_endline ((string_of_int (hex_to_decimal ("FfFf"))));
  print_endline ((string_of_int (hex_to_decimal ("-Ff"))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()