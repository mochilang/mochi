(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let ones = ref (["zero"; "one"; "two"; "three"; "four"; "five"; "six"; "seven"; "eight"; "nine"])
let teens = ref (["ten"; "eleven"; "twelve"; "thirteen"; "fourteen"; "fifteen"; "sixteen"; "seventeen"; "eighteen"; "nineteen"])
let tens = ref ([""; ""; "twenty"; "thirty"; "forty"; "fifty"; "sixty"; "seventy"; "eighty"; "ninety"])
let short_powers = ref ([15; 12; 9; 6; 3; 2])
let short_units = ref (["quadrillion"; "trillion"; "billion"; "million"; "thousand"; "hundred"])
let long_powers = ref ([15; 9; 6; 3; 2])
let long_units = ref (["billiard"; "milliard"; "million"; "thousand"; "hundred"])
let indian_powers = ref ([14; 12; 7; 5; 3; 2])
let indian_units = ref (["crore crore"; "lakh crore"; "crore"; "lakh"; "thousand"; "hundred"])
let rec pow10 exp =
  let __ret = ref 0 in
  (try
  let exp = (Obj.magic exp : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  res := (!res * 10);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and max_value system =
  let __ret = ref 0 in
  (try
  if (system = "short") then (
  __ret := (Obj.magic ((pow10 (Obj.repr (18)) - 1)) : int); raise Return
  );
  if (system = "long") then (
  __ret := (Obj.magic ((pow10 (Obj.repr (21)) - 1)) : int); raise Return
  );
  if (system = "indian") then (
  __ret := (Obj.magic ((pow10 (Obj.repr (19)) - 1)) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and join_words words =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (words)) do
    try
  if (!i > 0) then (
  res := (!res ^ " ");
  );
  res := (!res ^ List.nth (words) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and convert_small_number num =
  let __ret = ref "" in
  (try
  let num = (Obj.magic num : int) in
  if (num < 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  if (num >= 100) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let tens_digit = (num / 10) in
  let ones_digit = ((num mod 10 + 10) mod 10) in
  if (tens_digit = 0) then (
  __ret := (Obj.magic (List.nth (!ones) (ones_digit)) : string); raise Return
  );
  if (tens_digit = 1) then (
  __ret := (Obj.magic (List.nth (!teens) (ones_digit)) : string); raise Return
  );
  let hyphen = if (ones_digit > 0) then "-" else "" in
  let tail = if (ones_digit > 0) then List.nth (!ones) (ones_digit) else "" in
  __ret := (Obj.magic (((List.nth (!tens) (tens_digit) ^ hyphen) ^ tail)) : string); raise Return
  with Return -> !__ret)

and convert_number num system =
  let __ret = ref "" in
  (try
  let num = (Obj.magic num : int) in
  let word_groups = ref (([] : (string) list)) in
  let n = ref (num) in
  if (!n < 0) then (
  word_groups := (List.append (!word_groups) [(Obj.magic ("negative") : string)]);
  n := -(!n);
  );
  if (!n > max_value (system)) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let powers = ref (([] : (int) list)) in
  let units = ref (([] : (string) list)) in
  if (system = "short") then (
  powers := !short_powers;
  units := !short_units;
  ) else (
  if (system = "long") then (
  powers := !long_powers;
  units := !long_units;
  ) else (
  if (system = "indian") then (
  powers := !indian_powers;
  units := !indian_units;
  ) else (
  __ret := (Obj.magic ("") : string); raise Return
  );
  );
  );
  let i = ref (0) in
  (try while (!i < List.length (!powers)) do
    try
  let power = List.nth (!powers) (!i) in
  let unit = List.nth (!units) (!i) in
  let divisor = pow10 (Obj.repr (power)) in
  let digit_group = (!n / divisor) in
  n := ((!n mod divisor + divisor) mod divisor);
  if (digit_group > 0) then (
  let word_group = if (digit_group >= 100) then convert_number (Obj.repr (digit_group)) (system) else convert_small_number (Obj.repr (digit_group)) in
  word_groups := (List.append (!word_groups) [(Obj.magic (((word_group ^ " ") ^ unit)) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if ((!n > 0) || (List.length (!word_groups) = 0)) then (
  word_groups := (List.append (!word_groups) [(Obj.magic (convert_small_number (Obj.repr (!n))) : string)]);
  );
  let joined = join_words (!word_groups) in
  __ret := (Obj.magic (joined) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((convert_number (Obj.repr (123456789012345)) ("short")));
  print_endline ((convert_number (Obj.repr (123456789012345)) ("long")));
  print_endline ((convert_number (Obj.repr (123456789012345)) ("indian")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()