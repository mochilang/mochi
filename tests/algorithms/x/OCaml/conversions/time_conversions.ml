(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let time_chart = ref ([(__str ("seconds"), 1.0); (__str ("minutes"), 60.0); (__str ("hours"), 3600.0); (__str ("days"), 86400.0); (__str ("weeks"), 604800.0); (__str ("months"), 2629800.0); (__str ("years"), 31557600.0)])
let time_chart_inverse = ref ([(__str ("seconds"), 1.0); (__str ("minutes"), (1.0 /. 60.0)); (__str ("hours"), (1.0 /. 3600.0)); (__str ("days"), (1.0 /. 86400.0)); (__str ("weeks"), (1.0 /. 604800.0)); (__str ("months"), (1.0 /. 2629800.0)); (__str ("years"), (1.0 /. 31557600.0))])
let units = ref (["seconds"; "minutes"; "hours"; "days"; "weeks"; "months"; "years"])
let units_str = "seconds, minutes, hours, days, weeks, months, years"
let rec contains arr t =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  if (List.nth (arr) (!i) = t) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and convert_time time_value unit_from unit_to =
  let __ret = ref 0.0 in
  (try
  let time_value = (Obj.magic time_value : float) in
  if (time_value < 0.0) then (
  (failwith ("'time_value' must be a non-negative number."));
  );
  let from = String.lowercase_ascii (unit_from) in
  let to = String.lowercase_ascii (unit_to) in
  if (not (contains (!units) (from)) || not (contains (!units) (to))) then (
  let invalid_unit = ref (from) in
  if contains (!units) (from) then (
  invalid_unit := to;
  );
  (failwith ((((("Invalid unit " ^ !invalid_unit) ^ " is not in ") ^ units_str) ^ ".")));
  );
  let seconds = (time_value *. List.assoc (__str (from)) (!time_chart)) in
  let converted = (seconds *. List.assoc (__str (to)) (!time_chart_inverse)) in
  let scaled = (converted *. 1000.0) in
  let int_part = int_of_float ((scaled +. 0.5)) in
  __ret := (Obj.magic (((float_of_int (int_part) +. 0.0) /. 1000.0)) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_float (convert_time (Obj.repr (3600.0)) ("seconds") ("hours")));
  print_endline (string_of_float (convert_time (Obj.repr (360.0)) ("days") ("months")));
  print_endline (string_of_float (convert_time (Obj.repr (360.0)) ("months") ("years")));
  print_endline (string_of_float (convert_time (Obj.repr (1.0)) ("years") ("seconds")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()