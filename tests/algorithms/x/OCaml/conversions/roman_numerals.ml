(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let roman_values = ref ([1000; 900; 500; 400; 100; 90; 50; 40; 10; 9; 5; 4; 1])
let roman_symbols = ref (["M"; "CM"; "D"; "CD"; "C"; "XC"; "L"; "XL"; "X"; "IX"; "V"; "IV"; "I"])
let rec char_value c =
  let __ret = ref 0 in
  (try
  if (c = "I") then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (c = "V") then (
  __ret := (Obj.magic (5) : int); raise Return
  );
  if (c = "X") then (
  __ret := (Obj.magic (10) : int); raise Return
  );
  if (c = "L") then (
  __ret := (Obj.magic (50) : int); raise Return
  );
  if (c = "C") then (
  __ret := (Obj.magic (100) : int); raise Return
  );
  if (c = "D") then (
  __ret := (Obj.magic (500) : int); raise Return
  );
  if (c = "M") then (
  __ret := (Obj.magic (1000) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and roman_to_int roman =
  let __ret = ref 0 in
  (try
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (roman)) do
    try
  if (((!i + 1) < String.length (roman)) && (char_value (String.make 1 (String.get (roman) !i)) < char_value (String.make 1 (String.get (roman) (!i + 1))))) then (
  total := ((!total + char_value (String.make 1 (String.get (roman) (!i + 1)))) - char_value (String.make 1 (String.get (roman) !i)));
  i := (!i + 2);
  ) else (
  total := (!total + char_value (String.make 1 (String.get (roman) !i)));
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : int); raise Return
  with Return -> !__ret)

and int_to_roman number =
  let __ret = ref "" in
  (try
  let number = (Obj.magic number : int) in
  let num = ref (number) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (!roman_values)) do
    try
  let value = List.nth (!roman_values) (!i) in
  let symbol = List.nth (!roman_symbols) (!i) in
  let factor = (!num / value) in
  num := ((!num mod value + value) mod value);
  let j = ref (0) in
  (try while (!j < factor) do
    try
  res := (!res ^ symbol);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!num = 0) then (
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()