(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec processes_resource_summation alloc =
  let __ret = ref ([] : (int) list) in
  (try
  let alloc = (Obj.magic alloc : int list list) in
  let resources = List.length ((let __l = alloc in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let sums = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < resources) do
    try
  let total = ref (0) in
  let j = ref (0) in
  (try while (!j < List.length (alloc)) do
    try
  total := (!total + (let __l = (let __l = alloc in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  sums := (Obj.magic (List.append (!sums) [(Obj.magic (!total) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sums) : int list); raise Return
  with Return -> !__ret)

and available_resources claim alloc_sum =
  let __ret = ref ([] : (int) list) in
  (try
  let claim = (Obj.magic claim : int list) in
  let alloc_sum = (Obj.magic alloc_sum : int list) in
  let avail = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (claim)) do
    try
  avail := (Obj.magic (List.append (!avail) [(Obj.magic (((let __l = claim in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - (let __l = alloc_sum in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!avail) : int list); raise Return
  with Return -> !__ret)

and need max alloc =
  let __ret = ref ([] : (int list) list) in
  (try
  let max = (Obj.magic max : int list list) in
  let alloc = (Obj.magic alloc : int list list) in
  let needs = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (max)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = max in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((let __l = (let __l = max in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - (let __l = (let __l = alloc in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  needs := (Obj.magic (List.append (!needs) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!needs) : int list list); raise Return
  with Return -> !__ret)

and pretty_print claim alloc max =
  let __ret = ref (Obj.magic 0) in
  (try
  let claim = (Obj.magic claim : int list) in
  let alloc = (Obj.magic alloc : int list list) in
  let max = (Obj.magic max : int list list) in
  print_endline ("         Allocated Resource Table");
  let i = ref (0) in
  (try while (!i < List.length (alloc)) do
    try
  let row = ref ((let __l = alloc in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let line = ref ((("P" ^ (string_of_int ((!i + 1)))) ^ "       ")) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  line := (!line ^ (string_of_int ((let __l = !row in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!j < (List.length (!row) - 1)) then (
  line := (!line ^ "        ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  print_endline ("");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("         System Resource Table");
  i := 0;
  (try while (!i < List.length (max)) do
    try
  let row = ref ((let __l = max in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let line = ref ((("P" ^ (string_of_int ((!i + 1)))) ^ "       ")) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  line := (!line ^ (string_of_int ((let __l = !row in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!j < (List.length (!row) - 1)) then (
  line := (!line ^ "        ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  print_endline ("");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let usage = ref ("") in
  i := 0;
  (try while (!i < List.length (claim)) do
    try
  if (!i > 0) then (
  usage := (!usage ^ " ");
  );
  usage := (!usage ^ (string_of_int ((let __l = claim in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let alloc_sum = ref (processes_resource_summation (alloc)) in
  let avail = ref (available_resources (claim) (!alloc_sum)) in
  let avail_str = ref ("") in
  i := 0;
  (try while (!i < List.length (!avail)) do
    try
  if (!i > 0) then (
  avail_str := (!avail_str ^ " ");
  );
  avail_str := (!avail_str ^ (string_of_int ((let __l = !avail in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (("Current Usage by Active Processes: " ^ !usage));
  print_endline (("Initial Available Resources:       " ^ !avail_str));
    !__ret
  with Return -> !__ret)

and bankers_algorithm claim alloc max =
  let __ret = ref (Obj.magic 0) in
  (try
  let claim = (Obj.magic claim : int list) in
  let alloc = (Obj.magic alloc : int list list) in
  let max = (Obj.magic max : int list list) in
  let need_list = ref (need (max) (alloc)) in
  let alloc_sum = ref (processes_resource_summation (alloc)) in
  let avail = ref (available_resources (claim) (!alloc_sum)) in
  print_endline ("__________________________________________________");
  print_endline ("");
  let finished = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!need_list)) do
    try
  finished := (Obj.magic (List.append (!finished) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let remaining = ref (List.length (!need_list)) in
  (try while (!remaining > 0) do
    try
  let safe = ref (false) in
  let p = ref (0) in
  (try while (!p < List.length (!need_list)) do
    try
  if not ((let __l = !finished in let __i = !p in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  let exec = ref (true) in
  let r = ref (0) in
  (try while (!r < List.length (!avail)) do
    try
  if ((let __l = (let __l = !need_list in let __i = !p in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > (let __l = !avail in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  exec := false;
  raise Break;
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  if !exec then (
  safe := true;
  print_endline ((("Process " ^ (string_of_int ((!p + 1)))) ^ " is executing."));
  r := 0;
  (try while (!r < List.length (!avail)) do
    try
  avail := (List.mapi (fun __i __x -> if __i = !r then ((let __l = !avail in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + (let __l = (let __l = alloc in let __i = !p in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!avail));
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let avail_str = ref ("") in
  r := 0;
  (try while (!r < List.length (!avail)) do
    try
  if (!r > 0) then (
  avail_str := (!avail_str ^ " ");
  );
  avail_str := (!avail_str ^ (string_of_int ((let __l = !avail in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (("Updated available resource stack for processes: " ^ !avail_str));
  print_endline ("The process is in a safe state.");
  print_endline ("");
  finished := (List.mapi (fun __i __x -> if __i = !p then true else __x) (!finished));
  remaining := (!remaining - 1);
  );
  );
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!safe) then (
  print_endline ("System in unsafe state. Aborting...");
  print_endline ("");
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let claim_vector = ref ([8; 5; 9; 7])
let allocated_resources_table = ref ([[2; 0; 1; 1]; [0; 1; 2; 1]; [4; 0; 0; 3]; [0; 2; 1; 0]; [1; 0; 3; 0]])
let maximum_claim_table = ref ([[3; 2; 1; 4]; [0; 2; 5; 2]; [5; 1; 0; 5]; [1; 5; 3; 0]; [3; 0; 3; 3]])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (pretty_print (!claim_vector) (!allocated_resources_table) (!maximum_claim_table));
  ignore (bankers_algorithm (!claim_vector) (!allocated_resources_table) (!maximum_claim_table));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
