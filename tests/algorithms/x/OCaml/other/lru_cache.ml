(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:04 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec new_list () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nodes = ref (([] : ((string * Obj.t) list) list)) in
  let head = [(__str ("key"), Obj.repr (0)); (__str ("value"), Obj.repr (0)); (__str ("prev"), Obj.repr ((0 - 1))); (__str ("next"), Obj.repr (1))] in
  let tail = [(__str ("key"), Obj.repr (0)); (__str ("value"), Obj.repr (0)); (__str ("prev"), Obj.repr (0)); (__str ("next"), Obj.repr ((0 - 1)))] in
  nodes := (Obj.magic (List.append (!nodes) [(Obj.magic (head) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  nodes := (Obj.magic (List.append (!nodes) [(Obj.magic (tail) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr (!nodes)); (__str ("head"), Obj.repr (0)); (__str ("tail"), Obj.repr (1))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dll_add lst idx =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  lst := (Obj.magic !lst : (string * Obj.t) list);
  let idx = (Obj.magic idx : int) in
  let nodes = ref ((match List.assoc_opt (__str ("nodes")) (!lst) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> [])) in
  let tail_idx = (match List.assoc_opt (__str ("tail")) (!lst) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let tail_node = ref ((let __l = !nodes in let __i = tail_idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let prev_idx = (match List.assoc_opt (__str ("prev")) (!tail_node) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let node = ref ((let __l = !nodes in let __i = idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  node := ((__str ("prev"), Obj.repr (Obj.magic (prev_idx) : int)) :: List.remove_assoc (__str ("prev")) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str ("next"), Obj.repr (Obj.magic (tail_idx) : int)) :: List.remove_assoc (__str ("next")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  let prev_node = ref ((let __l = !nodes in let __i = prev_idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  prev_node := ((__str ("next"), Obj.repr (Obj.magic (idx) : int)) :: List.remove_assoc (__str ("next")) (Obj.magic (!prev_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = prev_idx then !prev_node else __x) (!nodes));
  tail_node := ((__str ("prev"), Obj.repr (Obj.magic (idx) : int)) :: List.remove_assoc (__str ("prev")) (Obj.magic (!tail_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = tail_idx then !tail_node else __x) (!nodes));
  lst := ((__str ("nodes"), Obj.repr (Obj.magic (!nodes) : (string * Obj.t) list list)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!lst) : (string * Obj.t) list));
  __ret := (Obj.magic (!lst) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dll_remove lst idx =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  lst := (Obj.magic !lst : (string * Obj.t) list);
  let idx = (Obj.magic idx : int) in
  let nodes = ref ((match List.assoc_opt (__str ("nodes")) (!lst) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> [])) in
  let node = ref ((let __l = !nodes in let __i = idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let prev_idx = (match List.assoc_opt (__str ("prev")) (!node) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let next_idx = (match List.assoc_opt (__str ("next")) (!node) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  if ((prev_idx = (0 - 1)) || (next_idx = (0 - 1))) then (
  __ret := (Obj.magic (!lst) : (string * Obj.t) list); raise Return
  );
  let prev_node = ref ((let __l = !nodes in let __i = prev_idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  prev_node := ((__str ("next"), Obj.repr (Obj.magic (next_idx) : int)) :: List.remove_assoc (__str ("next")) (Obj.magic (!prev_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = prev_idx then !prev_node else __x) (!nodes));
  let next_node = ref ((let __l = !nodes in let __i = next_idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  next_node := ((__str ("prev"), Obj.repr (Obj.magic (prev_idx) : int)) :: List.remove_assoc (__str ("prev")) (Obj.magic (!next_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = next_idx then !next_node else __x) (!nodes));
  node := ((__str ("prev"), Obj.repr (Obj.magic ((0 - 1)) : int)) :: List.remove_assoc (__str ("prev")) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str ("next"), Obj.repr (Obj.magic ((0 - 1)) : int)) :: List.remove_assoc (__str ("next")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  lst := ((__str ("nodes"), Obj.repr (Obj.magic (!nodes) : (string * Obj.t) list list)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!lst) : (string * Obj.t) list));
  __ret := (Obj.magic (!lst) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and new_cache cap =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cap = (Obj.magic cap : int) in
  let empty_map = ref ([] : (string * int) list) in
  __ret := (Obj.magic ([(__str ("list"), Obj.repr (new_list ())); (__str ("capacity"), Obj.repr (cap)); (__str ("num_keys"), Obj.repr (0)); (__str ("hits"), Obj.repr (0)); (__str ("misses"), Obj.repr (0)); (__str ("cache"), Obj.repr (!empty_map))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and lru_get c key =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let c = (Obj.magic c : (string * Obj.t) list) in
  let key = (Obj.magic key : int) in
  let cache = ref (c) in
  let key_str = (string_of_int (key)) in
  if (List.mem_assoc (__str (key_str)) (match List.assoc_opt (__str ("cache")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) then (
  let idx = (match List.assoc_opt (__str (key_str)) ((match List.assoc_opt (__str ("cache")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0) in
  if (idx <> (0 - 1)) then (
  cache := ((__str ("hits"), Obj.repr (Obj.magic (((match List.assoc_opt (__str ("hits")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) + 1)) : int)) :: List.remove_assoc (__str ("hits")) (Obj.magic (!cache) : (string * Obj.t) list));
  let node = ref ((let __l = (match List.assoc_opt (__str ("nodes")) ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []) in let __i = idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let value = (match List.assoc_opt (__str ("value")) (!node) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  cache := ((__str ("list"), Obj.repr (Obj.magic (dll_remove (ref ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []))) (Obj.repr (idx))) : (string * Obj.t) list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  cache := ((__str ("list"), Obj.repr (Obj.magic (dll_add (ref ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []))) (Obj.repr (idx))) : (string * Obj.t) list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  __ret := (Obj.magic ([(__str ("cache"), Obj.repr (!cache)); (__str ("value"), Obj.repr (value)); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  );
  );
  cache := ((__str ("misses"), Obj.repr (Obj.magic (((match List.assoc_opt (__str ("misses")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) + 1)) : int)) :: List.remove_assoc (__str ("misses")) (Obj.magic (!cache) : (string * Obj.t) list));
  __ret := (Obj.magic ([(__str ("cache"), Obj.repr (!cache)); (__str ("value"), Obj.repr (0)); (__str ("ok"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and lru_put c key value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let c = (Obj.magic c : (string * Obj.t) list) in
  let key = (Obj.magic key : int) in
  let value = (Obj.magic value : int) in
  let cache = ref (c) in
  let key_str = (string_of_int (key)) in
  if not ((List.mem_assoc (__str (key_str)) (match List.assoc_opt (__str ("cache")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> []))) then (
  if ((match List.assoc_opt (__str ("num_keys")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) >= (match List.assoc_opt (__str ("capacity")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) then (
  let head_node = ref ((let __l = (match List.assoc_opt (__str ("nodes")) ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []) in let __i = (match List.assoc_opt (__str ("head")) ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let first_idx = (match List.assoc_opt (__str ("next")) (!head_node) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let first_node = ref ((let __l = (match List.assoc_opt (__str ("nodes")) ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []) in let __i = first_idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let old_key = (match List.assoc_opt (__str ("key")) (!first_node) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  cache := ((__str ("list"), Obj.repr (Obj.magic (dll_remove (ref ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []))) (Obj.repr (first_idx))) : (string * Obj.t) list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  let mdel = ref ((match List.assoc_opt (__str ("cache")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) in
  mdel := ((__str ((string_of_int (old_key))), (0 - 1)) :: List.remove_assoc (__str ((string_of_int (old_key)))) (!mdel));
  cache := ((__str ("cache"), Obj.repr (Obj.magic (!mdel) : (string * int) list)) :: List.remove_assoc (__str ("cache")) (Obj.magic (!cache) : (string * Obj.t) list));
  cache := ((__str ("num_keys"), Obj.repr (Obj.magic (((match List.assoc_opt (__str ("num_keys")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) - 1)) : int)) :: List.remove_assoc (__str ("num_keys")) (Obj.magic (!cache) : (string * Obj.t) list));
  );
  let nodes = ref ((match List.assoc_opt (__str ("nodes")) ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> [])) in
  let new_node = [(__str ("key"), Obj.repr (key)); (__str ("value"), Obj.repr (value)); (__str ("prev"), Obj.repr ((0 - 1))); (__str ("next"), Obj.repr ((0 - 1)))] in
  nodes := (Obj.magic (List.append (!nodes) [(Obj.magic (new_node) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  let idx = (List.length (!nodes) - 1) in
  cache := ((__str ("list"), Obj.repr (Obj.magic (!nodes) : (string * Obj.t) list list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  cache := ((__str ("list"), Obj.repr (Obj.magic (dll_add (ref ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []))) (Obj.repr (idx))) : (string * Obj.t) list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  let m = ref ((match List.assoc_opt (__str ("cache")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) in
  m := ((__str (key_str), idx) :: List.remove_assoc (__str (key_str)) (!m));
  cache := ((__str ("cache"), Obj.repr (Obj.magic (!m) : (string * int) list)) :: List.remove_assoc (__str ("cache")) (Obj.magic (!cache) : (string * Obj.t) list));
  cache := ((__str ("num_keys"), Obj.repr (Obj.magic (((match List.assoc_opt (__str ("num_keys")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) + 1)) : int)) :: List.remove_assoc (__str ("num_keys")) (Obj.magic (!cache) : (string * Obj.t) list));
  ) else (
  let m = ref ((match List.assoc_opt (__str ("cache")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) in
  let idx = (match List.assoc_opt (__str (key_str)) (!m) with Some v -> v | None -> 0) in
  let nodes = ref ((match List.assoc_opt (__str ("nodes")) ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> [])) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> [])) in
  let node = ref ((let __l = !nodes in let __i = idx in match List.nth_opt __l __i with Some v -> v | None -> [])) in
  node := ((__str ("value"), Obj.repr (Obj.magic (value) : int)) :: List.remove_assoc (__str ("value")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  cache := ((__str ("list"), Obj.repr (Obj.magic (!nodes) : (string * Obj.t) list list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  cache := ((__str ("list"), Obj.repr (Obj.magic (dll_remove (ref ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []))) (Obj.repr (idx))) : (string * Obj.t) list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  cache := ((__str ("list"), Obj.repr (Obj.magic (dll_add (ref ((match List.assoc_opt (__str ("list")) (!cache) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []))) (Obj.repr (idx))) : (string * Obj.t) list)) :: List.remove_assoc (__str ("list")) (Obj.magic (!cache) : (string * Obj.t) list));
  cache := ((__str ("cache"), Obj.repr (Obj.magic (!m) : (string * int) list)) :: List.remove_assoc (__str ("cache")) (Obj.magic (!cache) : (string * Obj.t) list));
  );
  __ret := (Obj.magic (!cache) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and cache_info cache =
  let __ret = ref "" in
  (try
  let cache = (Obj.magic cache : (string * Obj.t) list) in
  __ret := (Obj.magic ((((((((("CacheInfo(hits=" ^ (string_of_int ((match List.assoc_opt (__str ("hits")) (cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))) ^ ", misses=") ^ (string_of_int ((match List.assoc_opt (__str ("misses")) (cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))) ^ ", capacity=") ^ (string_of_int ((match List.assoc_opt (__str ("capacity")) (cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))) ^ ", current size=") ^ (string_of_int ((match List.assoc_opt (__str ("num_keys")) (cache) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))) ^ ")")) : string); raise Return
  with Return -> !__ret)

and print_result res =
  let __ret = ref (Obj.magic 0) in
  (try
  let res = (Obj.magic res : (string * Obj.t) list) in
  if (match List.assoc_opt (__str ("ok")) (res) with Some v -> (Obj.obj (v : Obj.t) : bool) | None -> false) then (
  print_endline ((string_of_int ((match List.assoc_opt (__str ("value")) (res) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))));
  ) else (
  print_endline ("None");
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let cache = ref (new_cache (Obj.repr (2))) in
  cache := lru_put (!cache) (Obj.repr (1)) (Obj.repr (1));
  cache := lru_put (!cache) (Obj.repr (2)) (Obj.repr (2));
  let r1 = ref (lru_get (!cache) (Obj.repr (1))) in
  cache := (match List.assoc_opt (__str ("cache")) (!r1) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  ignore (print_result (!r1));
  cache := lru_put (!cache) (Obj.repr (3)) (Obj.repr (3));
  let r2 = ref (lru_get (!cache) (Obj.repr (2))) in
  cache := (match List.assoc_opt (__str ("cache")) (!r2) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  ignore (print_result (!r2));
  cache := lru_put (!cache) (Obj.repr (4)) (Obj.repr (4));
  let r3 = ref (lru_get (!cache) (Obj.repr (1))) in
  cache := (match List.assoc_opt (__str ("cache")) (!r3) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  ignore (print_result (!r3));
  let r4 = ref (lru_get (!cache) (Obj.repr (3))) in
  cache := (match List.assoc_opt (__str ("cache")) (!r4) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  ignore (print_result (!r4));
  let r5 = ref (lru_get (!cache) (Obj.repr (4))) in
  cache := (match List.assoc_opt (__str ("cache")) (!r5) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  ignore (print_result (!r5));
  print_endline ((cache_info (!cache)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
