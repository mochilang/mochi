(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_cache n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  (failwith ("n should be an integer greater than 0."));
  );
  let cap = if (n = 0) then 2147483647 else n in
  __ret := (Obj.magic ([(__str ("max_capacity"), Obj.repr (cap)); (__str ("store"), Obj.repr ((Obj.magic [] : string list)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_element xs x =
  let __ret = ref ([] : (string) list) in
  (try
  let xs = (Obj.magic xs : string list) in
  let res = ref (([] : (string) list)) in
  let removed = ref (false) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  let v = (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((!removed = false) && (v = x)) then (
  removed := true;
  ) else (
  res := (Obj.magic (!res @ [v]) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and refer cache x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cache = (Obj.magic cache : (string * Obj.t) list) in
  let store = ref ((Obj.obj (List.assoc (__str ("store")) (cache) : Obj.t) : string list)) in
  let exists = ref (false) in
  let i = ref (0) in
  (try while (!i < List.length (!store)) do
    try
  if ((let __l = !store in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = x) then (
  exists := true;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !exists then (
  store := (Obj.magic remove_element (!store) (x) : string list);
  ) else (
  if (List.length (!store) = (Obj.obj (List.assoc (__str ("max_capacity")) (cache) : Obj.t) : int)) then (
  let new_store = ref (([] : (string) list)) in
  let j = ref (0) in
  (try while (!j < (List.length (!store) - 1)) do
    try
  new_store := (Obj.magic (!new_store @ [(let __l = !store in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))]) : string list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  store := (Obj.magic !new_store : string list);
  );
  );
  store := (Obj.magic ([x] @ !store) : string list);
  __ret := (Obj.magic ([(__str ("max_capacity"), Obj.repr ((Obj.obj (List.assoc (__str ("max_capacity")) (cache) : Obj.t) : int))); (__str ("store"), Obj.repr (!store))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and display cache =
  let __ret = ref (Obj.magic 0) in
  (try
  let cache = (Obj.magic cache : (string * Obj.t) list) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("store")) (cache) : Obj.t) : string list))) do
    try
  print_endline ((let __l = (Obj.obj (List.assoc (__str ("store")) (cache) : Obj.t) : string list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and repr_item s =
  let __ret = ref "" in
  (try
  let all_digits = ref (true) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if ((ch < "0") || (ch > "9")) then (
  all_digits := false;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !all_digits then (
  __ret := (Obj.magic (s) : string); raise Return
  );
  __ret := (Obj.magic ((("'" ^ s) ^ "'")) : string); raise Return
  with Return -> !__ret)

and cache_repr cache =
  let __ret = ref "" in
  (try
  let cache = (Obj.magic cache : (string * Obj.t) list) in
  let res = ref ((("LRUCache(" ^ (string_of_int ((Obj.obj (List.assoc (__str ("max_capacity")) (cache) : Obj.t) : int)))) ^ ") => [")) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("store")) (cache) : Obj.t) : string list))) do
    try
  res := (!res ^ repr_item ((let __l = (Obj.obj (List.assoc (__str ("store")) (cache) : Obj.t) : string list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  if (!i < (List.length ((Obj.obj (List.assoc (__str ("store")) (cache) : Obj.t) : string list)) - 1)) then (
  res := (!res ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ "]");
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let lru = ref (new_cache (Obj.repr (4)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  lru := refer (!lru) ("A");
  lru := refer (!lru) ("2");
  lru := refer (!lru) ("3");
  lru := refer (!lru) ("A");
  lru := refer (!lru) ("4");
  lru := refer (!lru) ("5");
  let r = ref (cache_repr (!lru)) in
  print_endline (!r);
  if (!r <> "LRUCache(4) => [5, 4, 'A', 3]") then (
  (failwith ("Assertion error"));
  );
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
