(* Generated by Mochi transpiler v0.10.69 on 2025-08-19 09:22 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec index_of xs x =
  let __ret = ref 0 in
  (try
  let xs = (Obj.magic xs : int list) in
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = x) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  with Return -> !__ret)

and majority_vote votes votes_needed_to_win =
  let __ret = ref ([] : (int) list) in
  (try
  let votes = (Obj.magic votes : int list) in
  let votes_needed_to_win = (Obj.magic votes_needed_to_win : int) in
  if (votes_needed_to_win < 2) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let candidates = ref (([] : (int) list)) in
  let counts = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (votes)) do
    try
  let v = (let __l = votes in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let idx = index_of (!candidates) (Obj.repr (v)) in
  if (idx <> (0 - 1)) then (
  counts := (List.mapi (fun __i __x -> if __i = idx then ((let __l = !counts in let __i = idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!counts));
  ) else (
  if (List.length (!candidates) < (votes_needed_to_win - 1)) then (
  candidates := (Obj.magic ((List.append (!candidates) [(Obj.magic (v) : int)])) : int list);
  counts := (Obj.magic ((List.append (!counts) [(Obj.magic (1) : int)])) : int list);
  ) else (
  let j = ref (0) in
  (try while (!j < List.length (!counts)) do
    try
  counts := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !counts in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) - 1) else __x) (!counts));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let new_candidates = ref (([] : (int) list)) in
  let new_counts = ref (([] : (int) list)) in
  j := 0;
  (try while (!j < List.length (!candidates)) do
    try
  if ((let __l = !counts in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) > 0) then (
  new_candidates := (Obj.magic ((List.append (!new_candidates) [(Obj.magic ((let __l = !candidates in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  new_counts := (Obj.magic ((List.append (!new_counts) [(Obj.magic ((let __l = !counts in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  candidates := (Obj.magic (!new_candidates) : int list);
  counts := (Obj.magic (!new_counts) : int list);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let final_counts = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!candidates)) do
    try
  final_counts := (Obj.magic ((List.append (!final_counts) [(Obj.magic (0) : int)])) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (votes)) do
    try
  let v = (let __l = votes in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let idx = index_of (!candidates) (Obj.repr (v)) in
  if (idx <> (0 - 1)) then (
  final_counts := (List.mapi (fun __i __x -> if __i = idx then ((let __l = !final_counts in let __i = idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!final_counts));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (int) list)) in
  j := 0;
  (try while (!j < List.length (!candidates)) do
    try
  if (((let __l = !final_counts in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) * votes_needed_to_win) > List.length (votes)) then (
  result := (Obj.magic ((List.append (!result) [(Obj.magic ((let __l = !candidates in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let votes = ref ([1; 2; 2; 3; 1; 3; 2]) in
  print_endline ((__str (Obj.magic (majority_vote (!votes) (Obj.repr (3))) : Obj.t)));
  print_endline ((__str (Obj.magic (majority_vote (!votes) (Obj.repr (2))) : Obj.t)));
  print_endline ((__str (Obj.magic (majority_vote (!votes) (Obj.repr (4))) : Obj.t)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
