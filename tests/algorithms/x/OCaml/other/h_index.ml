(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec subarray xs start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let result = ref (([] : (int) list)) in
  let k = ref (start) in
  (try while (!k < end_) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = xs in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and merge left_half right_half =
  let __ret = ref ([] : (int) list) in
  (try
  let left_half = (Obj.magic left_half : int list) in
  let right_half = (Obj.magic right_half : int list) in
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  let j = ref (0) in
  (try while ((!i < List.length (left_half)) && (!j < List.length (right_half))) do
    try
  if ((let __l = left_half in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = right_half in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = left_half in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
  ) else (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = right_half in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
  );
    with Continue -> ()
  done with Break -> ());
  (try while (!i < List.length (left_half)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = left_half in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!j < List.length (right_half)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = right_half in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and merge_sort array =
  let __ret = ref ([] : (int) list) in
  (try
  let array = (Obj.magic array : int list) in
  if (List.length (array) <= 1) then (
  __ret := (Obj.magic (array) : int list); raise Return
  );
  let middle = (List.length (array) / 2) in
  let left_half = ref (subarray (array) (Obj.repr (0)) (Obj.repr (middle))) in
  let right_half = ref (subarray (array) (Obj.repr (middle)) (Obj.repr (List.length (array)))) in
  let sorted_left = ref (merge_sort (!left_half)) in
  let sorted_right = ref (merge_sort (!right_half)) in
  __ret := (Obj.magic (merge (!sorted_left) (!sorted_right)) : int list); raise Return
  with Return -> !__ret)

and h_index citations =
  let __ret = ref 0 in
  (try
  let citations = (Obj.magic citations : int list) in
  let idx = ref (0) in
  (try while (!idx < List.length (citations)) do
    try
  if ((let __l = citations in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < 0) then (
  (failwith ("The citations should be a list of non negative integers."));
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let sorted = ref (merge_sort (citations)) in
  let n = List.length (!sorted) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  if ((let __l = !sorted in let __i = ((n - 1) - !i) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <= !i) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((string_of_int (h_index ([3; 0; 6; 1; 5]))));
  print_endline ((string_of_int (h_index ([1; 3; 1]))));
  print_endline ((string_of_int (h_index ([1; 2; 3]))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
