(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec apply_table inp table =
  let __ret = ref "" in
  (try
  let table = (Obj.magic table : int list) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (table)) do
    try
  let idx = ref (((let __l = table in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - 1)) in
  if (!idx < 0) then (
  idx := (String.length (inp) - 1);
  );
  res := (!res ^ (let __s = inp in let __st = !idx in let __len = ((!idx + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and left_shift data =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (((let __s = data in let __st = 1 in let __len = (String.length (data) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") ^ (let __s = data in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) : string); raise Return
  with Return -> !__ret)

and xor a b =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while ((!i < String.length (a)) && (!i < String.length (b))) do
    try
  if ((let __s = a in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = (let __s = b in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) then (
  res := (!res ^ "0");
  ) else (
  res := (!res ^ "1");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and int_to_binary n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let res = ref ("") in
  let num = ref (n) in
  (try while (!num > 0) do
    try
  res := ((string_of_int (((!num mod 2 + 2) mod 2))) ^ !res);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and pad_left s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let res = ref (s) in
  (try while (String.length (!res) < width) do
    try
  res := ("0" ^ !res);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and bin_to_int s =
  let __ret = ref 0 in
  (try
  let result = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let digit = int_of_string ((let __s = s in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) in
  result := ((!result * 2) + digit);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and apply_sbox s data =
  let __ret = ref "" in
  (try
  let s = (Obj.magic s : int list list) in
  let row_bits = ((let __s = data in let __st = 0 in let __len = (1 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") ^ (let __s = data in let __st = (String.length (data) - 1) in let __len = (String.length (data) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) in
  let col_bits = (let __s = data in let __st = 1 in let __len = (3 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let row = bin_to_int (row_bits) in
  let col = bin_to_int (col_bits) in
  let val_ = (let __l = (let __l = s in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let out = int_to_binary (Obj.repr (val_)) in
  __ret := (Obj.magic (out) : string); raise Return
  with Return -> !__ret)


let p4_table = ref ([2; 4; 3; 1])
let rec f expansion s0 s1 key message =
  let __ret = ref "" in
  (try
  let expansion = (Obj.magic expansion : int list) in
  let s0 = (Obj.magic s0 : int list list) in
  let s1 = (Obj.magic s1 : int list list) in
  let left = (let __s = message in let __st = 0 in let __len = (4 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let right = (let __s = message in let __st = 4 in let __len = (8 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let temp = ref (apply_table (right) (expansion)) in
  temp := xor (!temp) (key);
  let left_bin_str = ref (apply_sbox (s0) ((let __s = !temp in let __st = 0 in let __len = (4 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) in
  let right_bin_str = ref (apply_sbox (s1) ((let __s = !temp in let __st = 4 in let __len = (8 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) in
  left_bin_str := pad_left (!left_bin_str) (Obj.repr (2));
  right_bin_str := pad_left (!right_bin_str) (Obj.repr (2));
  temp := apply_table ((!left_bin_str ^ !right_bin_str)) (!p4_table);
  temp := xor (left) (!temp);
  __ret := (Obj.magic ((!temp ^ right)) : string); raise Return
  with Return -> !__ret)


let key = "1010000010"
let message = "11010111"
let p8_table = ref ([6; 3; 7; 4; 8; 5; 10; 9])
let p10_table = ref ([3; 5; 2; 7; 4; 10; 1; 9; 8; 6])
let _ip = ref ([2; 6; 3; 1; 4; 8; 5; 7])
let _ip_inv = ref ([4; 1; 3; 5; 7; 2; 8; 6])
let expansion = ref ([4; 1; 2; 3; 2; 3; 4; 1])
let s0 = ref ([[1; 0; 3; 2]; [3; 2; 1; 0]; [0; 2; 1; 3]; [3; 1; 3; 2]])
let s1 = ref ([[0; 1; 2; 3]; [2; 0; 1; 3]; [3; 0; 1; 0]; [2; 1; 0; 3]])
let temp = ref (apply_table (key) (!p10_table))
let left = ref ((let __s = !temp in let __st = 0 in let __len = (5 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))
let right = ref ((let __s = !temp in let __st = 5 in let __len = (10 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  left := left_shift (!left);
  right := left_shift (!right);
  let key1 = apply_table ((!left ^ !right)) (!p8_table) in
  left := left_shift (!left);
  right := left_shift (!right);
  left := left_shift (!left);
  right := left_shift (!right);
  let key2 = apply_table ((!left ^ !right)) (!p8_table) in
  temp := apply_table (message) (!_ip);
  temp := f (!expansion) (!s0) (!s1) (key1) (!temp);
  temp := ((let __s = !temp in let __st = 4 in let __len = (8 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") ^ (let __s = !temp in let __st = 0 in let __len = (4 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""));
  temp := f (!expansion) (!s0) (!s1) (key2) (!temp);
  let _ct = apply_table (!temp) (!_ip_inv) in
  print_endline (("Cipher text is: " ^ _ct));
  temp := apply_table (_ct) (!_ip);
  temp := f (!expansion) (!s0) (!s1) (key2) (!temp);
  temp := ((let __s = !temp in let __st = 4 in let __len = (8 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") ^ (let __s = !temp in let __st = 0 in let __len = (4 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""));
  temp := f (!expansion) (!s0) (!s1) (key1) (!temp);
  let _pt = apply_table (!temp) (!_ip_inv) in
  print_endline (("Plain text after decypting is: " ^ _pt));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
