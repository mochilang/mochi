(* Generated by Mochi transpiler v0.10.73 on 2025-08-26 08:36 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec lfu_new cap =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cap = (Obj.magic cap : int) in
  __ret := (Obj.magic ([(__str (Obj.repr ("entries")), Obj.repr ([])); (__str (Obj.repr ("capacity")), Obj.repr (cap)); (__str (Obj.repr ("hits")), Obj.repr (0)); (__str (Obj.repr ("miss")), Obj.repr (0)); (__str (Obj.repr ("tick")), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and find_entry entries key =
  let __ret = ref 0 in
  (try
  let entries = (Obj.magic entries : (string * Obj.t) list list) in
  let key = (Obj.magic key : int) in
  let i = ref (0) in
  (try while (!i < List.length (entries)) do
    try
  let e = ref ((let __l = entries in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> (Obj.magic v : (string * Obj.t) list) | None -> [])) in
  if ((match List.assoc_opt (__str (Obj.repr ("key"))) (!e) with Some v -> (Obj.magic v : int) | None -> 0) = key) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  with Return -> !__ret)

and lfu_get cache key =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cache = (Obj.magic cache : (string * Obj.t) list) in
  let key = (Obj.magic key : int) in
  let idx = find_entry ((match List.assoc_opt (__str (Obj.repr ("entries"))) (cache) with Some v -> (Obj.magic v : (string * Obj.t) list list) | None -> [])) (Obj.repr (key)) in
  if (idx = (0 - 1)) then (
  let new_cache = ref ([(__str (Obj.repr ("entries")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("entries"))) (cache) with Some v -> (Obj.magic v : (string * Obj.t) list list) | None -> []))); (__str (Obj.repr ("capacity")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("capacity"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("hits")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("hits"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("miss")), Obj.repr (((match List.assoc_opt (__str (Obj.repr ("miss"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0) + 1))); (__str (Obj.repr ("tick")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("tick"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0)))]) in
  __ret := (Obj.magic ([(__str (Obj.repr ("cache")), Obj.repr (!new_cache)); (__str (Obj.repr ("value")), Obj.repr (0)); (__str (Obj.repr ("ok")), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  );
  let entries = ref ((match List.assoc_opt (__str (Obj.repr ("entries"))) (cache) with Some v -> (Obj.magic v : (string * Obj.t) list list) | None -> [])) in
  let e = ref ((let __l = !entries in let __i = idx in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> (Obj.magic v : (string * Obj.t) list) | None -> [])) in
  e := ((__str (Obj.repr ("freq")), Obj.repr (Obj.magic (((match List.assoc_opt (__str (Obj.repr ("freq"))) (!e) with Some v -> (Obj.magic v : int) | None -> 0) + 1)) : int)) :: List.remove_assoc (__str (Obj.repr ("freq"))) (Obj.magic (!e) : (string * Obj.t) list));
  let new_tick = ((match List.assoc_opt (__str (Obj.repr ("tick"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0) + 1) in
  e := ((__str (Obj.repr ("order")), Obj.repr (Obj.magic (new_tick) : int)) :: List.remove_assoc (__str (Obj.repr ("order"))) (Obj.magic (!e) : (string * Obj.t) list));
  entries := (List.mapi (fun __i __x -> if __i = idx then !e else __x) (!entries));
  let new_cache = ref ([(__str (Obj.repr ("entries")), Obj.repr (!entries)); (__str (Obj.repr ("capacity")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("capacity"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("hits")), Obj.repr (((match List.assoc_opt (__str (Obj.repr ("hits"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0) + 1))); (__str (Obj.repr ("miss")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("miss"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("tick")), Obj.repr (new_tick))]) in
  __ret := (Obj.magic ([(__str (Obj.repr ("cache")), Obj.repr (!new_cache)); (__str (Obj.repr ("value")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("val"))) (!e) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("ok")), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_lfu entries =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let entries = (Obj.magic entries : (string * Obj.t) list list) in
  if (List.length (entries) = 0) then (
  __ret := (Obj.magic (entries) : (string * Obj.t) list list); raise Return
  );
  let min_idx = ref (0) in
  let i = ref (1) in
  (try while (!i < List.length (entries)) do
    try
  let e = ref ((let __l = entries in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> (Obj.magic v : (string * Obj.t) list) | None -> [])) in
  let m = ref ((let __l = entries in let __i = !min_idx in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> (Obj.magic v : (string * Obj.t) list) | None -> [])) in
  if (((match List.assoc_opt (__str (Obj.repr ("freq"))) (!e) with Some v -> (Obj.magic v : int) | None -> 0) < (match List.assoc_opt (__str (Obj.repr ("freq"))) (!m) with Some v -> (Obj.magic v : int) | None -> 0)) || (((match List.assoc_opt (__str (Obj.repr ("freq"))) (!e) with Some v -> (Obj.magic v : int) | None -> 0) = (match List.assoc_opt (__str (Obj.repr ("freq"))) (!m) with Some v -> (Obj.magic v : int) | None -> 0)) && ((match List.assoc_opt (__str (Obj.repr ("order"))) (!e) with Some v -> (Obj.magic v : int) | None -> 0) < (match List.assoc_opt (__str (Obj.repr ("order"))) (!m) with Some v -> (Obj.magic v : int) | None -> 0)))) then (
  min_idx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref (([] : ((string * Obj.t) list) list)) in
  let j = ref (0) in
  (try while (!j < List.length (entries)) do
    try
  if (!j <> !min_idx) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = entries in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> (Obj.magic v : (string * Obj.t) list) | None -> [])) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and lfu_put cache key value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cache = (Obj.magic cache : (string * Obj.t) list) in
  let key = (Obj.magic key : int) in
  let value = (Obj.magic value : int) in
  let entries = ref ((match List.assoc_opt (__str (Obj.repr ("entries"))) (cache) with Some v -> (Obj.magic v : (string * Obj.t) list list) | None -> [])) in
  let idx = find_entry (!entries) (Obj.repr (key)) in
  if (idx <> (0 - 1)) then (
  let e = ref ((let __l = !entries in let __i = idx in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> (Obj.magic v : (string * Obj.t) list) | None -> [])) in
  e := ((__str (Obj.repr ("val")), Obj.repr (Obj.magic (value) : int)) :: List.remove_assoc (__str (Obj.repr ("val"))) (Obj.magic (!e) : (string * Obj.t) list));
  e := ((__str (Obj.repr ("freq")), Obj.repr (Obj.magic (((match List.assoc_opt (__str (Obj.repr ("freq"))) (!e) with Some v -> (Obj.magic v : int) | None -> 0) + 1)) : int)) :: List.remove_assoc (__str (Obj.repr ("freq"))) (Obj.magic (!e) : (string * Obj.t) list));
  let new_tick = ((match List.assoc_opt (__str (Obj.repr ("tick"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0) + 1) in
  e := ((__str (Obj.repr ("order")), Obj.repr (Obj.magic (new_tick) : int)) :: List.remove_assoc (__str (Obj.repr ("order"))) (Obj.magic (!e) : (string * Obj.t) list));
  entries := (List.mapi (fun __i __x -> if __i = idx then !e else __x) (!entries));
  __ret := (Obj.magic ([(__str (Obj.repr ("entries")), Obj.repr (!entries)); (__str (Obj.repr ("capacity")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("capacity"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("hits")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("hits"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("miss")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("miss"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("tick")), Obj.repr (new_tick))]) : (string * Obj.t) list); raise Return
  );
  if (List.length (!entries) >= (match List.assoc_opt (__str (Obj.repr ("capacity"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0)) then (
  entries := remove_lfu (!entries);
  );
  let new_tick = ((match List.assoc_opt (__str (Obj.repr ("tick"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0) + 1) in
  let new_entry = ref ([(__str (Obj.repr ("key")), Obj.repr (key)); (__str (Obj.repr ("val")), Obj.repr (value)); (__str (Obj.repr ("freq")), Obj.repr (1)); (__str (Obj.repr ("order")), Obj.repr (new_tick))]) in
  entries := (Obj.magic ((List.append (!entries) [(Obj.magic (!new_entry) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  __ret := (Obj.magic ([(__str (Obj.repr ("entries")), Obj.repr (!entries)); (__str (Obj.repr ("capacity")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("capacity"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("hits")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("hits"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("miss")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("miss"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("tick")), Obj.repr (new_tick))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and cache_info cache =
  let __ret = ref "" in
  (try
  let cache = (Obj.magic cache : (string * Obj.t) list) in
  __ret := (Obj.magic ((((((((("CacheInfo(hits=" ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("hits"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0)) : int))) ^ ", misses=") ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("miss"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0)) : int))) ^ ", capacity=") ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("capacity"))) (cache) with Some v -> (Obj.magic v : int) | None -> 0)) : int))) ^ ", current_size=") ^ (string_of_int (Obj.magic (List.length ((match List.assoc_opt (__str (Obj.repr ("entries"))) (cache) with Some v -> (Obj.magic v : (string * Obj.t) list list) | None -> []))) : int))) ^ ")")) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let cache = ref (lfu_new (Obj.repr (2))) in
  cache := lfu_put (!cache) (Obj.repr (1)) (Obj.repr (1));
  cache := lfu_put (!cache) (Obj.repr (2)) (Obj.repr (2));
  let r = ref (lfu_get (!cache) (Obj.repr (1))) in
  cache := (match List.assoc_opt (__str (Obj.repr ("cache"))) (!r) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> []);
  if (match List.assoc_opt (__str (Obj.repr ("ok"))) (!r) with Some v -> (Obj.magic v : bool) | None -> false) then (
  print_endline ((string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("value"))) (!r) with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  ) else (
  print_endline ("None");
  );
  cache := lfu_put (!cache) (Obj.repr (3)) (Obj.repr (3));
  r := lfu_get (!cache) (Obj.repr (2));
  cache := (match List.assoc_opt (__str (Obj.repr ("cache"))) (!r) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> []);
  if (match List.assoc_opt (__str (Obj.repr ("ok"))) (!r) with Some v -> (Obj.magic v : bool) | None -> false) then (
  print_endline ((string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("value"))) (!r) with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  ) else (
  print_endline ("None");
  );
  cache := lfu_put (!cache) (Obj.repr (4)) (Obj.repr (4));
  r := lfu_get (!cache) (Obj.repr (1));
  cache := (match List.assoc_opt (__str (Obj.repr ("cache"))) (!r) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> []);
  if (match List.assoc_opt (__str (Obj.repr ("ok"))) (!r) with Some v -> (Obj.magic v : bool) | None -> false) then (
  print_endline ((string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("value"))) (!r) with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  ) else (
  print_endline ("None");
  );
  r := lfu_get (!cache) (Obj.repr (3));
  cache := (match List.assoc_opt (__str (Obj.repr ("cache"))) (!r) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> []);
  if (match List.assoc_opt (__str (Obj.repr ("ok"))) (!r) with Some v -> (Obj.magic v : bool) | None -> false) then (
  print_endline ((string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("value"))) (!r) with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  ) else (
  print_endline ("None");
  );
  r := lfu_get (!cache) (Obj.repr (4));
  cache := (match List.assoc_opt (__str (Obj.repr ("cache"))) (!r) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> []);
  if (match List.assoc_opt (__str (Obj.repr ("ok"))) (!r) with Some v -> (Obj.magic v : bool) | None -> false) then (
  print_endline ((string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("value"))) (!r) with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  ) else (
  print_endline ("None");
  );
  print_endline ((cache_info (!cache)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
