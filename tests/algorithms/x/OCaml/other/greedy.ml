(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_value t =
  let __ret = ref 0.0 in
  (try
  let t = (Obj.magic t : (string * Obj.t) list) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("value")) (t) : Obj.t) : float)) : float); raise Return
  with Return -> !__ret)

and get_weight t =
  let __ret = ref 0.0 in
  (try
  let t = (Obj.magic t : (string * Obj.t) list) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("weight")) (t) : Obj.t) : float)) : float); raise Return
  with Return -> !__ret)

and get_name t =
  let __ret = ref "" in
  (try
  let t = (Obj.magic t : (string * Obj.t) list) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("name")) (t) : Obj.t) : string)) : string); raise Return
  with Return -> !__ret)

and value_weight t =
  let __ret = ref 0.0 in
  (try
  let t = (Obj.magic t : (string * Obj.t) list) in
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("value")) (t) : Obj.t) : float) /. (Obj.obj (List.assoc (__str ("weight")) (t) : Obj.t) : float))) : float); raise Return
  with Return -> !__ret)

and build_menu names values weights =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let names = (Obj.magic names : string list) in
  let values = (Obj.magic values : float list) in
  let weights = (Obj.magic weights : float list) in
  let menu = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (((!i < List.length (values)) && (!i < List.length (names))) && (!i < List.length (weights))) do
    try
  menu := (Obj.magic (List.append (!menu) [(Obj.magic ([(__str ("name"), Obj.repr ((let __l = names in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))); (__str ("value"), Obj.repr ((let __l = values in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))); (__str ("weight"), Obj.repr ((let __l = weights in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!menu) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and sort_desc items key_func =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let items = (Obj.magic items : (string * Obj.t) list list) in
  let arr = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (items)) do
    try
  arr := (Obj.magic (List.append (!arr) [(Obj.magic ((let __l = items in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (1) in
  (try while (!j < List.length (!arr)) do
    try
  let key_item = ref ((let __l = !arr in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let key_val = key_func (!key_item) in
  let k = ref ((!j - 1)) in
  (try while ((!k >= 0) && (key_func ((let __l = !arr in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) < key_val)) do
    try
  arr := (List.mapi (fun __i __x -> if __i = (!k + 1) then (let __l = !arr in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!arr));
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!k + 1) then !key_item else __x) (!arr));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and greedy items max_cost key_func =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let items = (Obj.magic items : (string * Obj.t) list list) in
  let max_cost = (Obj.magic max_cost : float) in
  let items_copy = ref (sort_desc (items) (key_func)) in
  let result = ref (([] : ((string * Obj.t) list) list)) in
  let total_value = ref (0.0) in
  let total_cost = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (!items_copy)) do
    try
  let it = (let __l = !items_copy in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let w = get_weight (it) in
  if ((!total_cost +. w) <= max_cost) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic (it) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  total_cost := (!total_cost +. w);
  total_value := (!total_value +. get_value (it));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("items"), Obj.repr (!result)); (__str ("total_value"), Obj.repr (!total_value))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and thing_to_string t =
  let __ret = ref "" in
  (try
  let t = (Obj.magic t : (string * Obj.t) list) in
  __ret := (Obj.magic ((((((("Thing(" ^ (Obj.obj (List.assoc (__str ("name")) (t) : Obj.t) : string)) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("value")) (t) : Obj.t) : float)))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("weight")) (t) : Obj.t) : float)))) ^ ")")) : string); raise Return
  with Return -> !__ret)

and list_to_string ts =
  let __ret = ref "" in
  (try
  let ts = (Obj.magic ts : (string * Obj.t) list list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (ts)) do
    try
  s := (!s ^ thing_to_string ((Obj.magic (let __l = ts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)));
  if (!i < (List.length (ts) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)


let food = ref (["Burger"; "Pizza"; "Coca Cola"; "Rice"; "Sambhar"; "Chicken"; "Fries"; "Milk"])
let value = ref ([80.0; 100.0; 60.0; 70.0; 50.0; 110.0; 90.0; 60.0])
let weight = ref ([40.0; 60.0; 40.0; 70.0; 100.0; 85.0; 55.0; 70.0])
let foods = ref (build_menu (!food) (!value) (!weight))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((list_to_string ((Obj.magic !foods : (string * Obj.t) list list))));
  let res = greedy ((Obj.magic !foods : (string * Obj.t) list list)) (Obj.repr (500.0)) (get_value) in
  print_endline ((list_to_string ((Obj.obj (List.assoc (__str ("items")) (res) : Obj.t) : (string * Obj.t) list list))));
  print_endline ((Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("total_value")) (res) : Obj.t) : float))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
