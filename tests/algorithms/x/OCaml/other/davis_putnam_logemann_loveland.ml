(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_clause lits =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let lits = (Obj.magic lits : string list) in
  let m = ref ([] : (string * int) list) in
  let names = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (lits)) do
    try
  let lit = (let __l = lits in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  m := ((__str (lit), (0 - 1)) :: List.remove_assoc (__str (lit)) (!m));
  names := (Obj.magic (List.append (!names) [(Obj.magic (lit) : string)]) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("literals"), Obj.repr (!m)); (__str ("names"), Obj.repr (!names))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and assign_clause c model =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  c := (Obj.magic !c : (string * Obj.t) list);
  let model = (Obj.magic model : (string * int) list) in
  let lits = ref ((Obj.obj (List.assoc (__str ("literals")) (!c) : Obj.t) : ( string * int ) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list))) do
    try
  let lit = (let __l = (Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let symbol = (let __s = lit in let __st = 0 in let __en = 2 in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc (__str (symbol)) model) then (
  let value = ref (List.assoc (__str (symbol)) (model)) in
  if (((let __s = lit in let __st = (String.length (lit) - 1) in let __en = String.length (lit) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = "'") && (!value <> (0 - 1))) then (
  value := (1 - !value);
  );
  lits := ((__str (lit), !value) :: List.remove_assoc (__str (lit)) (!lits));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  c := ((__str ("literals"), Obj.repr (Obj.magic (!lits) : (string * int) list)) :: List.remove_assoc (__str ("literals")) (Obj.magic (!c) : (string * Obj.t) list));
  __ret := (Obj.magic (!c) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and evaluate_clause c model =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  c := (Obj.magic !c : (string * Obj.t) list);
  let model = (Obj.magic model : (string * int) list) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list))) do
    try
  let lit = (let __l = (Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let sym = if ((let __s = lit in let __st = (String.length (lit) - 1) in let __en = String.length (lit) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) = "'") then (let __s = lit in let __st = 0 in let __en = 2 in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) else (lit ^ "'") in
  if (List.mem_assoc (__str (sym)) (Obj.obj (List.assoc (__str ("literals")) (!c) : Obj.t) : ( string * int ) list)) then (
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (1)); (__str ("clause"), Obj.repr (!c))]) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  c := assign_clause (c) ((Obj.magic model : (string * int) list));
  i := 0;
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list))) do
    try
  let lit = (let __l = (Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let value = List.assoc (__str (lit)) ((Obj.obj (List.assoc (__str ("literals")) (!c) : Obj.t) : ( string * int ) list)) in
  if (value = 1) then (
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (1)); (__str ("clause"), Obj.repr (!c))]) : (string * Obj.t) list); raise Return
  );
  if (value = (0 - 1)) then (
  __ret := (Obj.magic ([(__str ("value"), Obj.repr ((0 - 1))); (__str ("clause"), Obj.repr (!c))]) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let any_true = ref (0) in
  i := 0;
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list))) do
    try
  let lit = (let __l = (Obj.obj (List.assoc (__str ("names")) (!c) : Obj.t) : string list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (List.assoc (__str (lit)) ((Obj.obj (List.assoc (__str ("literals")) (!c) : Obj.t) : ( string * int ) list)) = 1) then (
  any_true := 1;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (!any_true)); (__str ("clause"), Obj.repr (!c))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and new_formula cs =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cs = (Obj.magic cs : (string * Obj.t) list list) in
  __ret := (Obj.magic ([(__str ("clauses"), Obj.repr (cs))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_symbol symbols s =
  let __ret = ref ([] : (string) list) in
  (try
  let symbols = (Obj.magic symbols : string list) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (symbols)) do
    try
  if ((let __l = symbols in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> s) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = symbols in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string)]) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and dpll_algorithm clauses symbols model =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  clauses := (Obj.magic !clauses : (string * Obj.t) list list);
  let symbols = (Obj.magic symbols : string list) in
  let model = (Obj.magic model : (string * int) list) in
  let all_true = ref (true) in
  let i = ref (0) in
  (try while (!i < List.length (!clauses)) do
    try
  let ev = evaluate_clause (ref ((let __l = !clauses in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) ((Obj.magic model : (string * int) list)) in
  clauses := (List.mapi (fun __i __x -> if __i = !i then (Obj.obj (List.assoc (__str ("clause")) (ev) : Obj.t) : ( string * Obj.t ) list) else __x) (!clauses));
  if ((Obj.obj (List.assoc (__str ("value")) (ev) : Obj.t) : int) = 0) then (
  __ret := (Obj.magic ([(__str ("sat"), Obj.repr (false)); (__str ("model"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  ) else (
  if ((Obj.obj (List.assoc (__str ("value")) (ev) : Obj.t) : int) = (0 - 1)) then (
  all_true := false;
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !all_true then (
  __ret := (Obj.magic ([(__str ("sat"), Obj.repr (true)); (__str ("model"), Obj.repr (model))]) : (string * Obj.t) list); raise Return
  );
  let p = (let __l = symbols in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let rest = ref (remove_symbol (symbols) (p)) in
  let tmp1 = ref (model) in
  let tmp2 = ref (model) in
  tmp1 := ((__str (p), 1) :: List.remove_assoc (__str (p)) (!tmp1));
  tmp2 := ((__str (p), 0) :: List.remove_assoc (__str (p)) (!tmp2));
  let res1 = dpll_algorithm (clauses) (!rest) ((Obj.magic !tmp1 : (string * int) list)) in
  if (Obj.obj (List.assoc (__str ("sat")) (res1) : Obj.t) : bool) then (
  __ret := (Obj.magic (res1) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic (dpll_algorithm (clauses) (!rest) ((Obj.magic !tmp2 : (string * int) list))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and str_clause c =
  let __ret = ref "" in
  (try
  let c = (Obj.magic c : (string * Obj.t) list) in
  let line = ref ("{") in
  let first = ref (true) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("names")) (c) : Obj.t) : string list))) do
    try
  let lit = (let __l = (Obj.obj (List.assoc (__str ("names")) (c) : Obj.t) : string list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if !first then (
  first := false;
  ) else (
  line := (!line ^ " , ");
  );
  line := (!line ^ lit);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  line := (!line ^ "}");
  __ret := (Obj.magic (!line) : string); raise Return
  with Return -> !__ret)

and str_formula f =
  let __ret = ref "" in
  (try
  let f = (Obj.magic f : (string * Obj.t) list) in
  let line = ref ("{") in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("clauses")) (f) : Obj.t) : (string * Obj.t) list list))) do
    try
  line := (!line ^ str_clause ((Obj.magic (let __l = (Obj.obj (List.assoc (__str ("clauses")) (f) : Obj.t) : (string * Obj.t) list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)));
  if (!i < (List.length ((Obj.obj (List.assoc (__str ("clauses")) (f) : Obj.t) : (string * Obj.t) list list)) - 1)) then (
  line := (!line ^ " , ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  line := (!line ^ "}");
  __ret := (Obj.magic (!line) : string); raise Return
  with Return -> !__ret)


let clause1 = new_clause (["A4"; "A3"; "A5'"; "A1"; "A3'"])
let clause2 = new_clause (["A4"])
let formula = new_formula ((Obj.magic [clause1; clause2] : (string * Obj.t) list list))
let formula_str = str_formula (formula)
let clauses = ref ([clause1; clause2])
let symbols = ref (["A4"; "A3"; "A5"; "A1"])
let model = ref ([] : (string * int) list)
let result = dpll_algorithm (clauses) (!symbols) ((Obj.magic !model : (string * int) list))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  if (Obj.obj (List.assoc (__str ("sat")) (result) : Obj.t) : bool) then (
  print_endline ((("The formula " ^ formula_str) ^ " is satisfiable."));
  ) else (
  print_endline ((("The formula " ^ formula_str) ^ " is not satisfiable."));
  );
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
