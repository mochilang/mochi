(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec rand () =
  let __ret = ref 0 in
  (try
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic ((!seed / 65536)) : int); raise Return
  with Return -> !__ret)

and randint a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let r = rand () in
  __ret := (Obj.magic ((a + ((r mod ((b - a) + 1) + ((b - a) + 1)) mod ((b - a) + 1)))) : int); raise Return
  with Return -> !__ret)

and fisher_yates_shuffle_int data =
  let __ret = ref ([] : (int) list) in
  (try
  let data = (Obj.magic data : int list) in
  let res = ref (data) in
  let i = ref (0) in
  (try while (!i < List.length (!res)) do
    try
  let a = randint (Obj.repr (0)) (Obj.repr ((List.length (!res) - 1))) in
  let b = randint (Obj.repr (0)) (Obj.repr ((List.length (!res) - 1))) in
  let temp = (let __l = !res in let __i = a in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  res := (List.mapi (fun __i __x -> if __i = a then (let __l = !res in let __i = b in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!res));
  res := (List.mapi (fun __i __x -> if __i = b then temp else __x) (!res));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and fisher_yates_shuffle_str data =
  let __ret = ref ([] : (string) list) in
  (try
  let data = (Obj.magic data : string list) in
  let res = ref (data) in
  let i = ref (0) in
  (try while (!i < List.length (!res)) do
    try
  let a = randint (Obj.repr (0)) (Obj.repr ((List.length (!res) - 1))) in
  let b = randint (Obj.repr (0)) (Obj.repr ((List.length (!res) - 1))) in
  let temp = (let __l = !res in let __i = a in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  res := (List.mapi (fun __i __x -> if __i = a then (let __l = !res in let __i = b in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!res));
  res := (List.mapi (fun __i __x -> if __i = b then temp else __x) (!res));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)


let integers = ref ([0; 1; 2; 3; 4; 5; 6; 7])
let strings = ref (["python"; "says"; "hello"; "!"])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ("Fisher-Yates Shuffle:");
  print_endline (((("List " ^ (__str (Obj.magic (!integers) : Obj.t))) ^ " ") ^ (__str (Obj.magic (!strings) : Obj.t))));
  print_endline (((("FY Shuffle " ^ (__str (Obj.magic (fisher_yates_shuffle_int (!integers)) : Obj.t))) ^ " ") ^ (__str (Obj.magic (fisher_yates_shuffle_str (!strings)) : Obj.t))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
