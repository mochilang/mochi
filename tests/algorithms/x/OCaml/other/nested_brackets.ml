(* Generated by Mochi transpiler v0.10.69 on 2025-08-19 09:22 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _open_to_closed = ref ([(__str (Obj.repr ("(")), ")"); (__str (Obj.repr ("[")), "]"); (__str (Obj.repr ("{")), "}")])
let rec slice_without_last xs =
  let __ret = ref ([] : (string) list) in
  (try
  let xs = (Obj.magic xs : string list) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < (List.length (xs) - 1)) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "")) : string)])) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and is_balanced s =
  let __ret = ref false in
  (try
  let stack = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let symbol = (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (List.mem_assoc (__str (Obj.repr (symbol))) !_open_to_closed) then (
  stack := (Obj.magic ((List.append (!stack) [(Obj.magic (symbol) : string)])) : string list);
  ) else (
  if (((symbol = ")") || (symbol = "]")) || (symbol = "}")) then (
  if (List.length (!stack) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let top = (let __l = !stack in let __i = (List.length (!stack) - 1) in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  if ((match List.assoc_opt (__str (Obj.repr (top))) (!_open_to_closed) with Some v -> v | None -> "") <> symbol) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  stack := (Obj.magic (slice_without_last (!stack)) : string list);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((List.length (!stack) = 0)) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (string_of_bool (is_balanced ("")));
  print_endline (string_of_bool (is_balanced ("()")));
  print_endline (string_of_bool (is_balanced ("[]")));
  print_endline (string_of_bool (is_balanced ("{}")));
  print_endline (string_of_bool (is_balanced ("()[]{}")));
  print_endline (string_of_bool (is_balanced ("(())")));
  print_endline (string_of_bool (is_balanced ("[[")));
  print_endline (string_of_bool (is_balanced ("([{}])")));
  print_endline (string_of_bool (is_balanced ("(()[)]")));
  print_endline (string_of_bool (is_balanced ("([)]")));
  print_endline (string_of_bool (is_balanced ("[[()]]")));
  print_endline (string_of_bool (is_balanced ("(()(()))")));
  print_endline (string_of_bool (is_balanced ("]")));
  print_endline (string_of_bool (is_balanced ("Life is a bowl of cherries.")));
  print_endline (string_of_bool (is_balanced ("Life is a bowl of che{}ies.")));
  print_endline (string_of_bool (is_balanced ("Life is a bowl of che}{ies.")));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
