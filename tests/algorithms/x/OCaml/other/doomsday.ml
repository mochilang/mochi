(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let _doomsday_leap = ref ([4; 1; 7; 4; 2; 6; 4; 1; 5; 3; 7; 5])
let _doomsday_not_leap = ref ([3; 7; 7; 4; 2; 6; 4; 1; 5; 3; 7; 5])
let _week_day_names = ref ([(__str (0), "Sunday"); (__str (1), "Monday"); (__str (2), "Tuesday"); (__str (3), "Wednesday"); (__str (4), "Thursday"); (__str (5), "Friday"); (__str (6), "Saturday")])
let rec get_week_day year month day =
  let __ret = ref "" in
  (try
  let year = (Obj.magic year : int) in
  let month = (Obj.magic month : int) in
  let day = (Obj.magic day : int) in
  if (year < 100) then (
  (failwith ("year should be in YYYY format"));
  );
  if ((month < 1) || (month > 12)) then (
  (failwith ("month should be between 1 to 12"));
  );
  if ((day < 1) || (day > 31)) then (
  (failwith ("day should be between 1 to 31"));
  );
  let century = (year / 100) in
  let century_anchor = ((((5 * ((century mod 4 + 4) mod 4)) + 2) mod 7 + 7) mod 7) in
  let centurian = ((year mod 100 + 100) mod 100) in
  let centurian_m = ((centurian mod 12 + 12) mod 12) in
  let dooms_day = ((((((centurian / 12) + centurian_m) + (centurian_m / 4)) + century_anchor) mod 7 + 7) mod 7) in
  let day_anchor = if ((((year mod 4 + 4) mod 4) <> 0) || ((centurian = 0) && (((year mod 400 + 400) mod 400) <> 0))) then (let __l = !_doomsday_not_leap in let __i = (month - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else (let __l = !_doomsday_leap in let __i = (month - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let week_day = ref (((((dooms_day + day) - day_anchor) mod 7 + 7) mod 7)) in
  if (!week_day < 0) then (
  week_day := (!week_day + 7);
  );
  __ret := (Obj.magic (List.assoc (__str (!week_day)) (!_week_day_names)) : string); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((get_week_day (Obj.repr (2020)) (Obj.repr (10)) (Obj.repr (24))));
  print_endline ((get_week_day (Obj.repr (2017)) (Obj.repr (10)) (Obj.repr (24))));
  print_endline ((get_week_day (Obj.repr (2019)) (Obj.repr (5)) (Obj.repr (3))));
  print_endline ((get_week_day (Obj.repr (1970)) (Obj.repr (9)) (Obj.repr (16))));
  print_endline ((get_week_day (Obj.repr (1870)) (Obj.repr (8)) (Obj.repr (13))));
  print_endline ((get_week_day (Obj.repr (2040)) (Obj.repr (3)) (Obj.repr (14))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
