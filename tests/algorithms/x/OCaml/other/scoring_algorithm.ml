(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_data source_data =
  let __ret = ref ([] : (float list) list) in
  (try
  let source_data = (Obj.magic source_data : float list list) in
  let data_lists = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (source_data)) do
    try
  let row = ref ((let __l = source_data in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  if (List.length (!data_lists) < (!j + 1)) then (
  let empty = ref (([] : (float) list)) in
  data_lists := (Obj.magic (List.append (!data_lists) [(Obj.magic (!empty) : float list)]) : float list list);
  );
  data_lists := (List.mapi (fun __i __x -> if __i = !j then (List.append ((let __l = !data_lists in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) [(Obj.magic ((let __l = !row in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) else __x) (!data_lists));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!data_lists) : float list list); raise Return
  with Return -> !__ret)

and calculate_each_score data_lists weights =
  let __ret = ref ([] : (float list) list) in
  (try
  let data_lists = (Obj.magic data_lists : float list list) in
  let weights = (Obj.magic weights : int list) in
  let score_lists = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (data_lists)) do
    try
  let dlist = ref ((let __l = data_lists in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let weight = (let __l = weights in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let mind = ref ((let __l = !dlist in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let maxd = ref ((let __l = !dlist in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let j = ref (1) in
  (try while (!j < List.length (!dlist)) do
    try
  let val_ = (let __l = !dlist in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (val_ < !mind) then (
  mind := val_;
  );
  if (val_ > !maxd) then (
  maxd := val_;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let score = ref (([] : (float) list)) in
  j := 0;
  if (weight = 0) then (
  (try while (!j < List.length (!dlist)) do
    try
  let item = (let __l = !dlist in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((!maxd -. !mind) = 0.0) then (
  score := (Obj.magic (List.append (!score) [(Obj.magic (1.0) : float)]) : float list);
  ) else (
  score := (Obj.magic (List.append (!score) [(Obj.magic ((1.0 -. ((item -. !mind) /. (!maxd -. !mind)))) : float)]) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  (try while (!j < List.length (!dlist)) do
    try
  let item = (let __l = !dlist in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((!maxd -. !mind) = 0.0) then (
  score := (Obj.magic (List.append (!score) [(Obj.magic (0.0) : float)]) : float list);
  ) else (
  score := (Obj.magic (List.append (!score) [(Obj.magic (((item -. !mind) /. (!maxd -. !mind))) : float)]) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  );
  score_lists := (Obj.magic (List.append (!score_lists) [(Obj.magic (!score) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!score_lists) : float list list); raise Return
  with Return -> !__ret)

and generate_final_scores score_lists =
  let __ret = ref ([] : (float) list) in
  (try
  let score_lists = (Obj.magic score_lists : float list list) in
  let count = List.length ((let __l = score_lists in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let final_scores = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < count) do
    try
  final_scores := (Obj.magic (List.append (!final_scores) [(Obj.magic (0.0) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (score_lists)) do
    try
  let slist = ref ((let __l = score_lists in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let j = ref (0) in
  (try while (!j < List.length (!slist)) do
    try
  final_scores := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !final_scores in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = !slist in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) (!final_scores));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!final_scores) : float list); raise Return
  with Return -> !__ret)

and procentual_proximity source_data weights =
  let __ret = ref ([] : (float list) list) in
  (try
  source_data := (Obj.magic !source_data : float list list);
  let weights = (Obj.magic weights : int list) in
  let data_lists = ref (get_data (!source_data)) in
  let score_lists = ref (calculate_each_score (!data_lists) (weights)) in
  let final_scores = ref (generate_final_scores (!score_lists)) in
  let i = ref (0) in
  (try while (!i < List.length (!final_scores)) do
    try
  source_data := (List.mapi (fun __i __x -> if __i = !i then (List.append ((let __l = !source_data in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) [(Obj.magic ((let __l = !final_scores in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) else __x) (!source_data));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!source_data) : float list list); raise Return
  with Return -> !__ret)


let vehicles = ref (([] : (float list) list))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  vehicles := (Obj.magic (List.append (!vehicles) [(Obj.magic ([20.0; 60.0; 2012.0]) : float list)]) : float list list);
  vehicles := (Obj.magic (List.append (!vehicles) [(Obj.magic ([23.0; 90.0; 2015.0]) : float list)]) : float list list);
  vehicles := (Obj.magic (List.append (!vehicles) [(Obj.magic ([22.0; 50.0; 2011.0]) : float list)]) : float list list);
  let weights = ref ([0; 0; 1]) in
  let result = ref (procentual_proximity (vehicles) (!weights)) in
  print_endline ((__str (Obj.magic (!result) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
