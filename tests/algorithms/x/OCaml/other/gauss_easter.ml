(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec gauss_easter year =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let year = (Obj.magic year : int) in
  let metonic_cycle = ((year mod 19 + 19) mod 19) in
  let julian_leap_year = ((year mod 4 + 4) mod 4) in
  let non_leap_year = ((year mod 7 + 7) mod 7) in
  let leap_day_inhibits = (year / 100) in
  let lunar_orbit_correction = ((13 + (8 * leap_day_inhibits)) / 25) in
  let leap_day_reinstall_number = (float_of_int (leap_day_inhibits) /. 4.0) in
  let secular_moon_shift = (Float.rem (((15.0 -. float_of_int (lunar_orbit_correction)) +. float_of_int (leap_day_inhibits)) -. leap_day_reinstall_number) 30.0) in
  let century_starting_point = (Float.rem ((4.0 +. float_of_int (leap_day_inhibits)) -. leap_day_reinstall_number) 7.0) in
  let days_to_add = (Float.rem ((19.0 *. float_of_int (metonic_cycle)) +. secular_moon_shift) 30.0) in
  let days_from_phm_to_sunday = (Float.rem ((((2.0 *. float_of_int (julian_leap_year)) +. (4.0 *. float_of_int (non_leap_year))) +. (6.0 *. days_to_add)) +. century_starting_point) 7.0) in
  if ((days_to_add = 29.0) && (days_from_phm_to_sunday = 6.0)) then (
  __ret := (Obj.magic ([(__str ("month"), Obj.repr (4)); (__str ("day"), Obj.repr (19))]) : (string * Obj.t) list); raise Return
  );
  if ((days_to_add = 28.0) && (days_from_phm_to_sunday = 6.0)) then (
  __ret := (Obj.magic ([(__str ("month"), Obj.repr (4)); (__str ("day"), Obj.repr (18))]) : (string * Obj.t) list); raise Return
  );
  let offset = int_of_float ((days_to_add +. days_from_phm_to_sunday)) in
  let total = (22 + offset) in
  if (total > 31) then (
  __ret := (Obj.magic ([(__str ("month"), Obj.repr (4)); (__str ("day"), Obj.repr ((total - 31)))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("month"), Obj.repr (3)); (__str ("day"), Obj.repr (total))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and format_date year d =
  let __ret = ref "" in
  (try
  let year = (Obj.magic year : int) in
  let d = (Obj.magic d : (string * Obj.t) list) in
  let month = if ((Obj.obj (List.assoc (__str ("month")) (d) : Obj.t) : int) < 10) then ("0" ^ (string_of_int ((Obj.obj (List.assoc (__str ("month")) (d) : Obj.t) : int)))) else (string_of_int ((Obj.obj (List.assoc (__str ("month")) (d) : Obj.t) : int))) in
  let day = if ((Obj.obj (List.assoc (__str ("day")) (d) : Obj.t) : int) < 10) then ("0" ^ (string_of_int ((Obj.obj (List.assoc (__str ("day")) (d) : Obj.t) : int)))) else (string_of_int ((Obj.obj (List.assoc (__str ("day")) (d) : Obj.t) : int))) in
  __ret := (Obj.magic ((((((string_of_int (year)) ^ "-") ^ month) ^ "-") ^ day)) : string); raise Return
  with Return -> !__ret)


let years = ref ([1994; 2000; 2010; 2021; 2023; 2032; 2100])
let i = ref (0)
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  (try while (!i < List.length (!years)) do
    try
  let y = (let __l = !years in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let e = gauss_easter (Obj.repr (y)) in
  print_endline (((("Easter in " ^ (string_of_int (y))) ^ " is ") ^ format_date (Obj.repr (y)) (e)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
