(* Generated by Mochi transpiler v0.10.66 on 2025-08-16 09:25 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec from_int x =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : int) in
  __ret := Obj.repr ([(__str ("tag"), Obj.repr ("Int")); (__str ("value"), Obj.repr (x))]); raise Return
  with Return -> !__ret)

and from_string s =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := Obj.repr ([(__str ("tag"), Obj.repr ("Str")); (__str ("value"), Obj.repr (s))]); raise Return
  with Return -> !__ret)

and item_to_string it =
  let __ret = ref "" in
  (try
  let it = (Obj.magic it : (string * Obj.t) list) in
  __ret := (Obj.magic ((match it with | [("tag", (__tag0 : Obj.t)); ("value", (v : Obj.t))] when (__str (__tag0) = "Int") -> (Obj.magic (string_of_int (Obj.magic (v) : int)) : string) | [("tag", (__tag1 : Obj.t)); ("value", (s : Obj.t))] when (__str (__tag1) = "Str") -> (Obj.magic s : string))) : string); raise Return
  with Return -> !__ret)

and alternative_list_arrange first second =
  let __ret = ref [] in
  (try
  let first = (Obj.magic first : Obj.t list) in
  let second = (Obj.magic second : Obj.t list) in
  let len1 = List.length (first) in
  let len2 = List.length (second) in
  let abs_len = if (len1 > len2) then len1 else len2 in
  let result = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < abs_len) do
    try
  if (!i < len1) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic (let __l = first in let __i = !i in if __i < 0 then Obj.repr [] else match List.nth_opt __l __i with Some v -> v | None -> Obj.repr []) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  if (!i < len2) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic (let __l = second in let __i = !i in if __i < 0 then Obj.repr [] else match List.nth_opt __l __i with Some v -> v | None -> Obj.repr []) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : Obj.t list); raise Return
  with Return -> !__ret)

and list_to_string xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : Obj.t list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ item_to_string ((Obj.magic (let __l = xs in let __i = !i in if __i < 0 then Obj.repr [] else match List.nth_opt __l __i with Some v -> v | None -> Obj.repr []) : (string * Obj.t) list)));
  if (!i < (List.length (xs) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)


let example1 = ref (alternative_list_arrange ((Obj.magic [from_int (Obj.repr (1)); from_int (Obj.repr (2)); from_int (Obj.repr (3)); from_int (Obj.repr (4)); from_int (Obj.repr (5))] : Obj.t list)) ((Obj.magic [from_string ("A"); from_string ("B"); from_string ("C")] : Obj.t list)))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((list_to_string ((Obj.magic !example1 : Obj.t list))));
  let example2 = ref (alternative_list_arrange ((Obj.magic [from_string ("A"); from_string ("B"); from_string ("C")] : Obj.t list)) ((Obj.magic [from_int (Obj.repr (1)); from_int (Obj.repr (2)); from_int (Obj.repr (3)); from_int (Obj.repr (4)); from_int (Obj.repr (5))] : Obj.t list))) in
  print_endline ((list_to_string ((Obj.magic !example2 : Obj.t list))));
  let example3 = ref (alternative_list_arrange ((Obj.magic [from_string ("X"); from_string ("Y"); from_string ("Z")] : Obj.t list)) ((Obj.magic [from_int (Obj.repr (9)); from_int (Obj.repr (8)); from_int (Obj.repr (7)); from_int (Obj.repr (6))] : Obj.t list))) in
  print_endline ((list_to_string ((Obj.magic !example3 : Obj.t list))));
  let example4 = ref (alternative_list_arrange ((Obj.magic [from_int (Obj.repr (1)); from_int (Obj.repr (2)); from_int (Obj.repr (3)); from_int (Obj.repr (4)); from_int (Obj.repr (5))] : Obj.t list)) ((Obj.magic (Obj.magic [] : (string * Obj.t) list list) : Obj.t list))) in
  print_endline ((list_to_string ((Obj.magic !example4 : Obj.t list))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
