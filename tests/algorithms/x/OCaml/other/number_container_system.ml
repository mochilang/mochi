(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec remove_at xs idx =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i <> idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and insert_at xs idx val_ =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let idx = (Obj.magic idx : int) in
  let val_ = (Obj.magic val_ : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i = idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (val_) : int)]) : int list);
  );
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (idx = List.length (xs)) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (val_) : int)]) : int list);
  );
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and binary_search_delete array item =
  let __ret = ref ([] : (int) list) in
  (try
  let array = (Obj.magic array : int list) in
  let item = (Obj.magic item : int) in
  let low = ref (0) in
  let high = ref ((List.length (array) - 1)) in
  let arr = ref (array) in
  (try while (!low <= !high) do
    try
  let mid = ((!low + !high) / 2) in
  if ((let __l = !arr in let __i = mid in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = item) then (
  arr := (Obj.magic remove_at (!arr) (Obj.repr (mid)) : int list);
  __ret := (Obj.magic (!arr) : int list); raise Return
  ) else (
  if ((let __l = !arr in let __i = mid in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < item) then (
  low := (mid + 1);
  ) else (
  high := (mid - 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  print_endline ("ValueError: Either the item is not in the array or the array was unsorted");
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and binary_search_insert array index =
  let __ret = ref ([] : (int) list) in
  (try
  let array = (Obj.magic array : int list) in
  let index = (Obj.magic index : int) in
  let low = ref (0) in
  let high = ref ((List.length (array) - 1)) in
  let arr = ref (array) in
  (try while (!low <= !high) do
    try
  let mid = ((!low + !high) / 2) in
  if ((let __l = !arr in let __i = mid in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = index) then (
  arr := (Obj.magic insert_at (!arr) (Obj.repr ((mid + 1))) (Obj.repr (index)) : int list);
  __ret := (Obj.magic (!arr) : int list); raise Return
  ) else (
  if ((let __l = !arr in let __i = mid in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < index) then (
  low := (mid + 1);
  ) else (
  high := (mid - 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  arr := (Obj.magic insert_at (!arr) (Obj.repr (!low)) (Obj.repr (index)) : int list);
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and change cont idx num =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cont = (Obj.magic cont : (string * Obj.t) list) in
  let idx = (Obj.magic idx : int) in
  let num = (Obj.magic num : int) in
  let numbermap = ref ((Obj.obj (List.assoc (__str ("numbermap")) (cont) : Obj.t) : ( string * int list ) list)) in
  let indexmap = ref ((Obj.obj (List.assoc (__str ("indexmap")) (cont) : Obj.t) : ( string * int ) list)) in
  if (List.mem_assoc (__str (idx)) !indexmap) then (
  let old = List.assoc (__str (idx)) (!indexmap) in
  let indexes = ref (List.assoc (__str (old)) (!numbermap)) in
  if (List.length (!indexes) = 1) then (
  numbermap := ((__str (old), []) :: List.remove_assoc (__str (old)) (!numbermap));
  ) else (
  numbermap := ((__str (old), binary_search_delete (!indexes) (Obj.repr (idx))) :: List.remove_assoc (__str (old)) (!numbermap));
  );
  );
  indexmap := ((__str (idx), num) :: List.remove_assoc (__str (idx)) (!indexmap));
  if (List.mem_assoc (__str (num)) !numbermap) then (
  numbermap := ((__str (num), binary_search_insert (List.assoc (__str (num)) (!numbermap)) (Obj.repr (idx))) :: List.remove_assoc (__str (num)) (!numbermap));
  ) else (
  numbermap := ((__str (num), [idx]) :: List.remove_assoc (__str (num)) (!numbermap));
  );
  __ret := (Obj.magic ([(__str ("numbermap"), Obj.repr (!numbermap)); (__str ("indexmap"), Obj.repr (!indexmap))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and find cont num =
  let __ret = ref 0 in
  (try
  let cont = (Obj.magic cont : (string * Obj.t) list) in
  let num = (Obj.magic num : int) in
  let numbermap = ref ((Obj.obj (List.assoc (__str ("numbermap")) (cont) : Obj.t) : ( string * int list ) list)) in
  if (List.mem_assoc (__str (num)) !numbermap) then (
  let arr = ref (List.assoc (__str (num)) (!numbermap)) in
  if (List.length (!arr) > 0) then (
  __ret := (Obj.magic ((let __l = !arr in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int); raise Return
  );
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)


let nm = ref ([] : (string * int list) list)
let im = ref ([] : (string * int) list)
let cont = ref ([(__str ("numbermap"), Obj.repr (!nm)); (__str ("indexmap"), Obj.repr (!im))])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_int (find (!cont) (Obj.repr (10))));
  cont := change (!cont) (Obj.repr (0)) (Obj.repr (10));
  print_endline (string_of_int (find (!cont) (Obj.repr (10))));
  cont := change (!cont) (Obj.repr (0)) (Obj.repr (20));
  print_endline (string_of_int (find (!cont) (Obj.repr (10))));
  print_endline (string_of_int (find (!cont) (Obj.repr (20))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
