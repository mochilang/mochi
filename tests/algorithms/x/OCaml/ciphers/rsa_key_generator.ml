(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow2 exp =
  let __ret = ref 0 in
  (try
  let exp = (Obj.magic exp : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  res := (!res * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)


let seed = ref (1)
let rec next_seed x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic ((((x * 1103515245) + 12345) mod 2147483648)) : int); raise Return
  with Return -> !__ret)

and rand_range min max =
  let __ret = ref 0 in
  (try
  let min = (Obj.magic min : int) in
  let max = (Obj.magic max : int) in
  seed := next_seed (Obj.repr (!seed));
  __ret := (Obj.magic ((min + (!seed mod (max - min)))) : int); raise Return
  with Return -> !__ret)

and gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  (try while (!y <> 0) do
    try
  let temp = (!x mod !y) in
  x := !y;
  y := temp;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and mod_inverse e phi =
  let __ret = ref 0 in
  (try
  let e = (Obj.magic e : int) in
  let phi = (Obj.magic phi : int) in
  let t = ref (0) in
  let newt = ref (1) in
  let r = ref (phi) in
  let newr = ref (e) in
  (try while (!newr <> 0) do
    try
  let quotient = (!r / !newr) in
  let tmp = !newt in
  newt := (!t - (quotient * !newt));
  t := tmp;
  let tmp_r = !newr in
  newr := (!r - (quotient * !newr));
  r := tmp_r;
    with Continue -> ()
  done with Break -> ());
  if (!r > 1) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (!t < 0) then (
  t := (!t + phi);
  );
  __ret := (Obj.magic (!t) : int); raise Return
  with Return -> !__ret)

and is_prime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (2) in
  (try while ((!i * !i) <= n) do
    try
  if ((n mod !i) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and generate_prime bits =
  let __ret = ref 0 in
  (try
  let bits = (Obj.magic bits : int) in
  let min = pow2 (Obj.repr ((bits - 1))) in
  let max = pow2 (Obj.repr (bits)) in
  let p = ref (rand_range (Obj.repr (min)) (Obj.repr (max))) in
  if ((!p mod 2) = 0) then (
  p := (!p + 1);
  );
  (try while not (is_prime (Obj.repr (!p))) do
    try
  p := (!p + 2);
  if (!p >= max) then (
  p := (min + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : int); raise Return
  with Return -> !__ret)

and generate_key bits =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let bits = (Obj.magic bits : int) in
  let p = generate_prime (Obj.repr (bits)) in
  let q = generate_prime (Obj.repr (bits)) in
  let n = (p * q) in
  let phi = ((p - 1) * (q - 1)) in
  let e = ref (rand_range (Obj.repr (2)) (Obj.repr (phi))) in
  (try while (gcd (Obj.repr (!e)) (Obj.repr (phi)) <> 1) do
    try
  e := (!e + 1);
  if (!e >= phi) then (
  e := 2;
  );
    with Continue -> ()
  done with Break -> ());
  let d = mod_inverse (Obj.repr (!e)) (Obj.repr (phi)) in
  __ret := (Obj.magic ([(__str ("public_key"), Obj.repr ([n; !e])); (__str ("private_key"), Obj.repr ([n; d]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let keys = generate_key (Obj.repr (8)) in
  let pub = ref ((Obj.obj (List.assoc (__str ("public_key")) (keys) : Obj.t) : int list)) in
  let priv = ref ((Obj.obj (List.assoc (__str ("private_key")) (keys) : Obj.t) : int list)) in
  print_endline ((((("Public key: (" ^ (string_of_int (List.nth (!pub) (0)))) ^ ", ") ^ (string_of_int (List.nth (!pub) (1)))) ^ ")"));
  print_endline ((((("Private key: (" ^ (string_of_int (List.nth (!priv) (0)))) ^ ", ") ^ (string_of_int (List.nth (!priv) (1)))) ^ ")"));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()