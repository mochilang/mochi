(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec encrypt_message key message =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  let result = ref ("") in
  let col = ref (0) in
  (try while (!col < key) do
    try
  let pointer = ref (!col) in
  (try while (!pointer < String.length (message)) do
    try
  result := (!result ^ String.make 1 (String.get (message) !pointer));
  pointer := (!pointer + key);
    with Continue -> ()
  done with Break -> ());
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and decrypt_message key message =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  let msg_len = String.length (message) in
  let num_cols = ref ((msg_len / key)) in
  if ((msg_len mod key) <> 0) then (
  num_cols := (!num_cols + 1);
  );
  let num_rows = key in
  let num_shaded_boxes = ((!num_cols * num_rows) - msg_len) in
  let plain = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < !num_cols) do
    try
  plain := (List.append (!plain) [(Obj.magic ("") : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let col = ref (0) in
  let row = ref (0) in
  let idx = ref (0) in
  (try while (!idx < msg_len) do
    try
  let ch = String.make 1 (String.get (message) !idx) in
  plain := (List.mapi (fun __i __x -> if __i = !col then (List.nth (!plain) (!col) ^ ch) else __x) (!plain));
  col := (!col + 1);
  if ((!col = !num_cols) || ((!col = (!num_cols - 1)) && (!row >= (num_rows - num_shaded_boxes)))) then (
  col := 0;
  row := (!row + 1);
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref ("") in
  i := 0;
  (try while (!i < !num_cols) do
    try
  result := (!result ^ List.nth (!plain) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let key = 6
let message = "Harshil Darji"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let encrypted = encrypt_message (Obj.repr (key)) (message) in
  print_endline (encrypted);
  let decrypted = decrypt_message (Obj.repr (key)) (encrypted) in
  print_endline (decrypted);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()