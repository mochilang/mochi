(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec base16_encode data =
  let __ret = ref "" in
  (try
  let digits = "0123456789ABCDEF" in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (data)) do
    try
  let b = List.nth (data) (!i) in
  if ((b < 0) || (b > 255)) then (
  (failwith ("byte out of range"));
  );
  let hi = (b / 16) in
  let lo = (b mod 16) in
  res := ((!res ^ String.sub (digits) hi ((hi + 1) - hi)) ^ String.sub (digits) lo ((lo + 1) - lo));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and base16_decode data =
  let __ret = ref ([] : (int) list) in
  (try
  let digits = "0123456789ABCDEF" in
  if ((String.length (data) mod 2) <> 0) then (
  (failwith ("Base16 encoded data is invalid: Data does not have an even number of hex digits."));
  );
let rec hex_value ch =
  let __ret = ref 0 in
  (try
  let j = ref (0) in
  (try while (!j < 16) do
    try
  if (String.sub (digits) !j ((!j + 1) - !j) = ch) then (
  __ret := (Obj.magic (!j) : int); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret) in
  let out = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (data)) do
    try
  let hi_char = String.sub (data) !i ((!i + 1) - !i) in
  let lo_char = String.sub (data) (!i + 1) ((!i + 2) - (!i + 1)) in
  let hi = hex_value (hi_char) in
  let lo = hex_value (lo_char) in
  if ((hi < 0) || (lo < 0)) then (
  (failwith ("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters."));
  );
  out := (List.append (!out) [(Obj.magic (((hi * 16) + lo)) : int)]);
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list); raise Return
  with Return -> !__ret)


let example1 = ref ([72; 101; 108; 108; 111; 32; 87; 111; 114; 108; 100; 33])
let example2 = ref ([72; 69; 76; 76; 79; 32; 87; 79; 82; 76; 68; 33])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((base16_encode (!example1)));
  print_endline ((base16_encode (!example2)));
  print_endline ((base16_encode ((Obj.magic [] : int list))));
  print_endline ((__str (base16_decode ("48656C6C6F20576F726C6421"))));
  print_endline ((__str (base16_decode ("48454C4C4F20574F524C4421"))));
  print_endline ((__str (base16_decode (""))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()