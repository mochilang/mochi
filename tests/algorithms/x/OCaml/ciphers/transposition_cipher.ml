(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec join_strings xs =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  res := (!res ^ List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and encrypt_message key message =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  let result = ref ("") in
  let col = ref (0) in
  (try while (!col < key) do
    try
  let pointer = ref (!col) in
  (try while (!pointer < String.length (message)) do
    try
  result := (!result ^ String.sub (message) (!pointer) ((!pointer + 1) - !pointer));
  pointer := (!pointer + key);
    with Continue -> ()
  done with Break -> ());
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and decrypt_message key message =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  let num_cols = (((String.length (message) + key) - 1) / key) in
  let num_rows = key in
  let num_shaded_boxes = ((num_cols * num_rows) - String.length (message)) in
  let plain_text = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < num_cols) do
    try
  plain_text := (List.append (!plain_text) [(Obj.magic ("") : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let col = ref (0) in
  let row = ref (0) in
  let index = ref (0) in
  (try while (!index < String.length (message)) do
    try
  plain_text := (List.mapi (fun __i __x -> if __i = !col then (List.nth (!plain_text) (!col) ^ String.sub (message) (!index) ((!index + 1) - !index)) else __x) (!plain_text));
  col := (!col + 1);
  if ((!col = num_cols) || ((!col = (num_cols - 1)) && (!row >= (num_rows - num_shaded_boxes)))) then (
  col := 0;
  row := (!row + 1);
  );
  index := (!index + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (join_strings (!plain_text)) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Enter message: ");
  let message = (try read_line () with End_of_file -> "") in
  let max_key = (String.length (message) - 1) in
  print_endline ((("Enter key [2-" ^ (string_of_int (max_key))) ^ "]: "));
  let key = int_of_string ((try read_line () with End_of_file -> "")) in
  print_endline ("Encryption/Decryption [e/d]: ");
  let mode = (try read_line () with End_of_file -> "") in
  let text = ref ("") in
  let first = String.sub (mode) (0) (1 - 0) in
  if ((first = "e") || (first = "E")) then (
  text := encrypt_message (Obj.repr (key)) (message);
  ) else (
  if ((first = "d") || (first = "D")) then (
  text := decrypt_message (Obj.repr (key)) (message);
  );
  );
  print_endline ((("Output:\n" ^ !text) ^ "|"));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()