(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _chars = ref (["A"; "B"; "C"; "D"; "E"; "F"; "G"; "H"; "I"; "J"; "K"; "L"; "M"; "N"; "O"; "P"; "Q"; "R"; "S"; "T"; "U"; "V"; "W"; "X"; "Y"; "Z"; "1"; "2"; "3"; "4"; "5"; "6"; "7"; "8"; "9"; "0"; "&"; "@"; ":"; ","; "."; "'"; "\""; "?"; "/"; "="; "+"; "-"; "("; ")"; "!"; " "])
let _codes = ref ([".-"; "-..."; "-.-."; "-.."; "."; "..-."; "--."; "...."; ".."; ".---"; "-.-"; ".-.."; "--"; "-."; "---"; ".--."; "--.-"; ".-."; "..."; "-"; "..-"; "...-"; ".--"; "-..-"; "-.--"; "--.."; ".----"; "..---"; "...--"; "....-"; "....."; "-...."; "--..."; "---.."; "----."; "-----"; ".-..."; ".--.-."; "---..."; "--..--"; ".-.-.-"; ".----."; ".-..-."; "..--.."; "-..-."; "-...-"; ".-.-."; "-....-"; "-.--."; "-.--.-"; "-.-.--"; "/"])
let rec to_upper_char c =
  let __ret = ref "" in
  (try
  if (c = "a") then (
  __ret := (Obj.magic ("A") : string); raise Return
  );
  if (c = "b") then (
  __ret := (Obj.magic ("B") : string); raise Return
  );
  if (c = "c") then (
  __ret := (Obj.magic ("C") : string); raise Return
  );
  if (c = "d") then (
  __ret := (Obj.magic ("D") : string); raise Return
  );
  if (c = "e") then (
  __ret := (Obj.magic ("E") : string); raise Return
  );
  if (c = "f") then (
  __ret := (Obj.magic ("F") : string); raise Return
  );
  if (c = "g") then (
  __ret := (Obj.magic ("G") : string); raise Return
  );
  if (c = "h") then (
  __ret := (Obj.magic ("H") : string); raise Return
  );
  if (c = "i") then (
  __ret := (Obj.magic ("I") : string); raise Return
  );
  if (c = "j") then (
  __ret := (Obj.magic ("J") : string); raise Return
  );
  if (c = "k") then (
  __ret := (Obj.magic ("K") : string); raise Return
  );
  if (c = "l") then (
  __ret := (Obj.magic ("L") : string); raise Return
  );
  if (c = "m") then (
  __ret := (Obj.magic ("M") : string); raise Return
  );
  if (c = "n") then (
  __ret := (Obj.magic ("N") : string); raise Return
  );
  if (c = "o") then (
  __ret := (Obj.magic ("O") : string); raise Return
  );
  if (c = "p") then (
  __ret := (Obj.magic ("P") : string); raise Return
  );
  if (c = "q") then (
  __ret := (Obj.magic ("Q") : string); raise Return
  );
  if (c = "r") then (
  __ret := (Obj.magic ("R") : string); raise Return
  );
  if (c = "s") then (
  __ret := (Obj.magic ("S") : string); raise Return
  );
  if (c = "t") then (
  __ret := (Obj.magic ("T") : string); raise Return
  );
  if (c = "u") then (
  __ret := (Obj.magic ("U") : string); raise Return
  );
  if (c = "v") then (
  __ret := (Obj.magic ("V") : string); raise Return
  );
  if (c = "w") then (
  __ret := (Obj.magic ("W") : string); raise Return
  );
  if (c = "x") then (
  __ret := (Obj.magic ("X") : string); raise Return
  );
  if (c = "y") then (
  __ret := (Obj.magic ("Y") : string); raise Return
  );
  if (c = "z") then (
  __ret := (Obj.magic ("Z") : string); raise Return
  );
  __ret := (Obj.magic (c) : string); raise Return
  with Return -> !__ret)

and to_upper s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  res := (!res ^ to_upper_char (String.make 1 (String.get (s) !i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and index_of xs target =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = target) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and encrypt message =
  let __ret = ref "" in
  (try
  let msg = to_upper (message) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (msg)) do
    try
  let c = String.make 1 (String.get (msg) !i) in
  let idx = index_of (!_chars) (c) in
  if (idx >= 0) then (
  if (!res <> "") then (
  res := (!res ^ " ");
  );
  res := (!res ^ List.nth (!_codes) (idx));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and split_spaces s =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.make 1 (String.get (s) !i) in
  if (ch = " ") then (
  if (!current <> "") then (
  res := (List.append (!res) [(Obj.magic (!current) : string)]);
  current := "";
  );
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!current <> "") then (
  res := (List.append (!res) [(Obj.magic (!current) : string)]);
  );
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and decrypt message =
  let __ret = ref "" in
  (try
  let parts = ref (split_spaces (message)) in
  let res = ref ("") in
  (try List.iter (fun code ->
    try
  let idx = index_of (!_codes) (code) in
  if (idx >= 0) then (
  res := (!res ^ List.nth (!_chars) (idx));
  );
    with Continue -> ()) (!parts) with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let msg = "Morse code here!"
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (msg);
  let enc = encrypt (msg) in
  print_endline (enc);
  let dec = decrypt (enc) in
  print_endline (dec);
  print_endline ((encrypt ("Sos!")));
  print_endline ((decrypt ("... --- ... -.-.--")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()