(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _lowercase = "abcdefghijklmnopqrstuvwxyz"
let seed = ref (1)
let rec rand n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  seed := (((!seed * 1664525) + 1013904223) mod 2147483647);
  __ret := (Obj.magic ((!seed mod n)) : int); raise Return
  with Return -> !__ret)

and get_random_key () =
  let __ret = ref "" in
  (try
  let chars = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (_letters)) do
    try
  chars := (List.append (!chars) [(Obj.magic (String.make 1 (String.get (_letters) !i)) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref ((List.length (!chars) - 1)) in
  (try while (!j > 0) do
    try
  let k = rand (Obj.repr ((!j + 1))) in
  let tmp = List.nth (!chars) (!j) in
  chars := (List.mapi (fun __i __x -> if __i = !j then List.nth (!chars) (k) else __x) (!chars));
  chars := (List.mapi (fun __i __x -> if __i = k then tmp else __x) (!chars));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  i := 0;
  (try while (!i < List.length (!chars)) do
    try
  res := (!res ^ List.nth (!chars) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and check_valid_key key =
  let __ret = ref false in
  (try
  if (String.length (key) <> String.length (_letters)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let used = ref ([]) in
  let i = ref (0) in
  (try while (!i < String.length (key)) do
    try
  let ch = String.make 1 (String.get (key) !i) in
  if List.assoc (__str (ch)) (!used) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  used := ((__str (ch), true) :: List.remove_assoc (__str (ch)) !used);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < String.length (_letters)) do
    try
  let ch = String.make 1 (String.get (_letters) !i) in
  if not (List.assoc (__str (ch)) (!used)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and index_in s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and char_to_upper c =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_lowercase)) do
    try
  if (c = String.make 1 (String.get (_lowercase) !i)) then (
  __ret := (Obj.magic (String.make 1 (String.get (_letters) !i)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (c) : string); raise Return
  with Return -> !__ret)

and char_to_lower c =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_letters)) do
    try
  if (c = String.make 1 (String.get (_letters) !i)) then (
  __ret := (Obj.magic (String.make 1 (String.get (_lowercase) !i)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (c) : string); raise Return
  with Return -> !__ret)

and is_upper c =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_letters)) do
    try
  if (c = String.make 1 (String.get (_letters) !i)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and translate_message key message mode =
  let __ret = ref "" in
  (try
  let chars_a = ref (_letters) in
  let chars_b = ref (key) in
  if (mode = "decrypt") then (
  let tmp = !chars_a in
  chars_a := !chars_b;
  chars_b := tmp;
  );
  let translated = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let symbol = String.make 1 (String.get (message) !i) in
  let upper_symbol = char_to_upper (symbol) in
  let idx = index_in (!chars_a) (upper_symbol) in
  if (idx >= 0) then (
  let mapped = String.make 1 (String.get (!chars_b) idx) in
  if is_upper (symbol) then (
  translated := (!translated ^ mapped);
  ) else (
  translated := (!translated ^ char_to_lower (mapped));
  );
  ) else (
  translated := (!translated ^ symbol);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!translated) : string); raise Return
  with Return -> !__ret)

and encrypt_message key message =
  let __ret = ref "" in
  (try
  let res = translate_message (key) (message) ("encrypt") in
  __ret := (Obj.magic (res) : string); raise Return
  with Return -> !__ret)

and decrypt_message key message =
  let __ret = ref "" in
  (try
  let res = translate_message (key) (message) ("decrypt") in
  __ret := (Obj.magic (res) : string); raise Return
  with Return -> !__ret)


let key = "LFWOAYUISVKMNXPBDCRJTQEGHZ"
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((encrypt_message (key) ("Harshil Darji")));
  print_endline ((decrypt_message (key) ("Ilcrism Olcvs")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()