(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _ascii_uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _ascii_lowercase = "abcdefghijklmnopqrstuvwxyz"
let _neg_one = (0 - 1)
let rec index_of s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (_neg_one) : int); raise Return
  with Return -> !__ret)

and to_uppercase s =
  let __ret = ref "" in
  (try
  let result = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub s (!i) ((!i + 1) - !i) in
  let idx = index_of (_ascii_lowercase) (ch) in
  if (idx = _neg_one) then (
  result := (!result ^ ch);
  ) else (
  result := (!result ^ String.sub _ascii_uppercase (idx) ((idx + 1) - idx));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and gronsfeld text key =
  let __ret = ref "" in
  (try
  let ascii_len = String.length (_ascii_uppercase) in
  let key_len = String.length (key) in
  if (key_len = 0) then (
  (failwith ("integer modulo by zero"));
  );
  let upper_text = to_uppercase (text) in
  let encrypted = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (upper_text)) do
    try
  let ch = String.sub upper_text (!i) ((!i + 1) - !i) in
  let idx = index_of (_ascii_uppercase) (ch) in
  if (idx = _neg_one) then (
  encrypted := (!encrypted ^ ch);
  ) else (
  let key_idx = (!i mod key_len) in
  let shift = Char.code (String.get (key) key_idx) in
  let new_position = ((idx + shift) mod ascii_len) in
  encrypted := (!encrypted ^ String.sub _ascii_uppercase (new_position) ((new_position + 1) - new_position));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encrypted) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((gronsfeld ("hello") ("412")));
  print_endline ((gronsfeld ("hello") ("123")));
  print_endline ((gronsfeld ("") ("123")));
  print_endline ((gronsfeld ("yes, ¥€$ - _!@#%?") ("0")));
  print_endline ((gronsfeld ("yes, ¥€$ - _!@#%?") ("01")));
  print_endline ((gronsfeld ("yes, ¥€$ - _!@#%?") ("012")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()