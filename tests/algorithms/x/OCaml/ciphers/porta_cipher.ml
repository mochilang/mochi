(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _lower = "abcdefghijklmnopqrstuvwxyz"
let _base_top = "ABCDEFGHIJKLM"
let _base_bottom = "NOPQRSTUVWXYZ"
let rec to_upper s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub s (!i) ((!i + 1) - !i) in
  let j = ref (0) in
  let replaced = ref (false) in
  (try while (!j < String.length (_lower)) do
    try
  if (String.sub _lower (!j) ((!j + 1) - !j) = ch) then (
  res := (!res ^ String.sub _upper (!j) ((!j + 1) - !j));
  replaced := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!replaced) then (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and char_index c =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_upper)) do
    try
  if (String.sub _upper (!i) ((!i + 1) - !i) = c) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and rotate_right s k =
  let __ret = ref "" in
  (try
  let k = (Obj.magic k : int) in
  let n = String.length (s) in
  let shift = (k mod n) in
  __ret := (Obj.magic ((String.sub s ((n - shift)) (n - (n - shift)) ^ String.sub s (0) ((n - shift) - 0))) : string); raise Return
  with Return -> !__ret)

and table_for c =
  let __ret = ref ([] : (string) list) in
  (try
  let idx = char_index (c) in
  let shift = (idx / 2) in
  let row1 = rotate_right (_base_bottom) (Obj.repr (shift)) in
  let pair = ref ([_base_top; row1]) in
  __ret := (Obj.magic (!pair) : string list); raise Return
  with Return -> !__ret)

and generate_table key =
  let __ret = ref ([] : (string list) list) in
  (try
  let up = to_upper (key) in
  let i = ref (0) in
  let result = ref (([] : (string list) list)) in
  (try while (!i < String.length (up)) do
    try
  let ch = String.sub up (!i) ((!i + 1) - !i) in
  let pair = ref (table_for (ch)) in
  result := (List.append (!result) [(Obj.magic (!pair) : string list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string list list); raise Return
  with Return -> !__ret)

and str_index s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  with Return -> !__ret)

and get_position table ch =
  let __ret = ref ([] : (int) list) in
  (try
  let row = ref (0) in
  if (str_index (List.nth (table) (0)) (ch) = (0 - 1)) then (
  row := 1;
  );
  let col = str_index (List.nth (table) (!row)) (ch) in
  __ret := (Obj.magic ([!row; col]) : int list); raise Return
  with Return -> !__ret)

and get_opponent table ch =
  let __ret = ref "" in
  (try
  let pos = ref (get_position (table) (ch)) in
  let row = List.nth (!pos) (0) in
  let col = List.nth (!pos) (1) in
  if (col = (0 - 1)) then (
  __ret := (Obj.magic (ch) : string); raise Return
  );
  if (row = 1) then (
  __ret := (Obj.magic (String.sub List.nth (table) (0) (col) ((col + 1) - col)) : string); raise Return
  );
  __ret := (Obj.magic (String.sub List.nth (table) (1) (col) ((col + 1) - col)) : string); raise Return
  with Return -> !__ret)

and encrypt key words =
  let __ret = ref "" in
  (try
  let table = ref (generate_table (key)) in
  let up_words = to_upper (words) in
  let cipher = ref ("") in
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (up_words)) do
    try
  let ch = String.sub up_words (!i) ((!i + 1) - !i) in
  cipher := (!cipher ^ get_opponent (List.nth (!table) (!count)) (ch));
  count := ((!count + 1) mod List.length (!table));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cipher) : string); raise Return
  with Return -> !__ret)

and decrypt key words =
  let __ret = ref "" in
  (try
  let res = encrypt (key) (words) in
  __ret := (Obj.magic (res) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((encrypt ("marvin") ("jessica")));
  print_endline ((decrypt ("marvin") ("QRACRWU")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()