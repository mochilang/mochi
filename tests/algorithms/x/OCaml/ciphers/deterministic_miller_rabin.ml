(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec mod_pow base exp mod_ =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let mod_ = (Obj.magic mod_ : int) in
  let result = ref (1) in
  let b = ref ((base mod mod_)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod mod_);
  );
  b := ((!b * !b) mod mod_);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and miller_rabin n allow_probable =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n = 2) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if ((n < 2) || ((n mod 2) = 0)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (n > 5) then (
  let last = (n mod 10) in
  if not (((((last = 1) || (last = 3)) || (last = 7)) || (last = 9))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  );
  let limit = 3825123056546413051 in
  if ((n > limit) && not (allow_probable)) then (
  (failwith ("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test."));
  );
  let bounds = ref ([2047; 1373653; 25326001; 3215031751; 2152302898747; 3474749660383; 341550071728321; limit]) in
  let primes = ref ([2; 3; 5; 7; 11; 13; 17; 19]) in
  let i = ref (0) in
  let plist_len = ref (List.length (!primes)) in
  (try while (!i < List.length (!bounds)) do
    try
  if (n < List.nth (!bounds) (!i)) then (
  plist_len := (!i + 1);
  i := List.length (!bounds);
  ) else (
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  let d = ref ((n - 1)) in
  let s = ref (0) in
  (try while ((!d mod 2) = 0) do
    try
  d := (!d / 2);
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < !plist_len) do
    try
  let prime = List.nth (!primes) (!j) in
  let x = ref (mod_pow (Obj.repr (prime)) (Obj.repr (!d)) (Obj.repr (n))) in
  let pr = ref (false) in
  if ((!x = 1) || (!x = (n - 1))) then (
  pr := true;
  ) else (
  let r = ref (1) in
  (try while ((!r < !s) && not (!pr)) do
    try
  x := ((!x * !x) mod n);
  if (!x = (n - 1)) then (
  pr := true;
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  );
  if not (!pr) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_bool (miller_rabin (Obj.repr (561)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (563)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (838201)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (838207)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (17316001)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (17316017)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (3078386641)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (3078386653)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (1713045574801)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (1713045574819)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (2779799728307)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (2779799728327)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (113850023909441)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (113850023909527)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (1275041018848804351)) (false))));
  print_endline ((string_of_bool (miller_rabin (Obj.repr (1275041018848804391)) (false))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()