(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec ord ch =
  let __ret = ref 0 in
  (try
  let digits = "0123456789" in
  let i = ref (0) in
  (try while (!i < String.length (digits)) do
    try
  if (String.sub (digits) (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic ((48 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  i := 0;
  (try while (!i < String.length (upper)) do
    try
  if (String.sub (upper) (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic ((65 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  i := 0;
  (try while (!i < String.length (lower)) do
    try
  if (String.sub (lower) (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic ((97 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and neg_pos iterlist =
  let __ret = ref ([] : (int) list) in
  (try
  let i = ref (1) in
  (try while (!i < List.length (!iterlist)) do
    try
  iterlist := (List.mapi (fun __i __x -> if __i = !i then -(List.nth (!iterlist) (!i)) else __x) (!iterlist));
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!iterlist) : int list); raise Return
  with Return -> !__ret)

and passcode_creator () =
  let __ret = ref ([] : (string) list) in
  (try
  let choices = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" in
  let seed = ref (_now ()) in
  let length = (10 + (!seed mod 11)) in
  let password = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < length) do
    try
  seed := (((!seed * 1103515245) + 12345) mod 2147483647);
  let idx = (!seed mod String.length (choices)) in
  password := (List.append (!password) [(Obj.magic (String.sub (choices) (idx) ((idx + 1) - idx)) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!password) : string list); raise Return
  with Return -> !__ret)

and unique_sorted chars =
  let __ret = ref ([] : (string) list) in
  (try
  let uniq = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (chars)) do
    try
  let ch = List.nth (chars) (!i) in
  if not ((List.mem ch !uniq)) then (
  uniq := (List.append (!uniq) [(Obj.magic (ch) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < List.length (!uniq)) do
    try
  let k = ref ((!j + 1)) in
  let min_idx = ref (!j) in
  (try while (!k < List.length (!uniq)) do
    try
  if (List.nth (!uniq) (!k) < List.nth (!uniq) (!min_idx)) then (
  min_idx := !k;
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if (!min_idx <> !j) then (
  let tmp = List.nth (!uniq) (!j) in
  uniq := (List.mapi (fun __i __x -> if __i = !j then List.nth (!uniq) (!min_idx) else __x) (!uniq));
  uniq := (List.mapi (fun __i __x -> if __i = !min_idx then tmp else __x) (!uniq));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!uniq) : string list); raise Return
  with Return -> !__ret)

and make_key_list passcode =
  let __ret = ref ([] : (string) list) in
  (try
  let key_list_options = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n" in
  let breakpoints = ref (unique_sorted (passcode)) in
  let keys_l = ref (([] : (string) list)) in
  let temp_list = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (key_list_options)) do
    try
  let ch = String.sub (key_list_options) (!i) ((!i + 1) - !i) in
  temp_list := (List.append (!temp_list) [(Obj.magic (ch) : string)]);
  if ((List.mem ch !breakpoints) || (!i = (String.length (key_list_options) - 1))) then (
  let k = ref ((List.length (!temp_list) - 1)) in
  (try while (!k >= 0) do
    try
  keys_l := (List.append (!keys_l) [(Obj.magic (List.nth (!temp_list) (!k)) : string)]);
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  temp_list := [];
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!keys_l) : string list); raise Return
  with Return -> !__ret)

and make_shift_key passcode =
  let __ret = ref 0 in
  (try
  let codes = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (passcode)) do
    try
  codes := (List.append (!codes) [(Obj.magic (ord (List.nth (passcode) (!i))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  codes := neg_pos (codes);
  let total = ref (0) in
  i := 0;
  (try while (!i < List.length (!codes)) do
    try
  total := (!total + List.nth (!codes) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!total > 0) then (
  __ret := (Obj.magic (!total) : int); raise Return
  );
  __ret := (Obj.magic (List.length (passcode)) : int); raise Return
  with Return -> !__ret)

and new_cipher passcode_str =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let passcode = ref (([] : (string) list)) in
  if (String.length (passcode_str) = 0) then (
  passcode := passcode_creator ();
  ) else (
  let i = ref (0) in
  (try while (!i < String.length (passcode_str)) do
    try
  passcode := (List.append (!passcode) [(Obj.magic (String.sub (passcode_str) (!i) ((!i + 1) - !i)) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  let key_list = ref (make_key_list (!passcode)) in
  let shift_key = make_shift_key (!passcode) in
  __ret := (Obj.magic ([(__str ("passcode"), Obj.repr (!passcode)); (__str ("key_list"), Obj.repr (!key_list)); (__str ("shift_key"), Obj.repr (shift_key))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and index_of lst ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  if (List.nth (lst) (!i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and encrypt c plaintext =
  let __ret = ref "" in
  (try
  let encoded = ref ("") in
  let i = ref (0) in
  let n = List.length ((Obj.obj (List.assoc (__str ("key_list")) (c) : Obj.t) : string list)) in
  (try while (!i < String.length (plaintext)) do
    try
  let ch = String.sub (plaintext) (!i) ((!i + 1) - !i) in
  let position = index_of ((Obj.obj (List.assoc (__str ("key_list")) (c) : Obj.t) : string list)) (ch) in
  let new_pos = ((position + (Obj.obj (List.assoc (__str ("shift_key")) (c) : Obj.t) : int)) mod n) in
  encoded := (!encoded ^ List.nth ((Obj.obj (List.assoc (__str ("key_list")) (c) : Obj.t) : string list)) (new_pos));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encoded) : string); raise Return
  with Return -> !__ret)

and decrypt c encoded_message =
  let __ret = ref "" in
  (try
  let decoded = ref ("") in
  let i = ref (0) in
  let n = List.length ((Obj.obj (List.assoc (__str ("key_list")) (c) : Obj.t) : string list)) in
  (try while (!i < String.length (encoded_message)) do
    try
  let ch = String.sub (encoded_message) (!i) ((!i + 1) - !i) in
  let position = index_of ((Obj.obj (List.assoc (__str ("key_list")) (c) : Obj.t) : string list)) (ch) in
  let new_pos = ref (((position - (Obj.obj (List.assoc (__str ("shift_key")) (c) : Obj.t) : int)) mod n)) in
  if (!new_pos < 0) then (
  new_pos := (!new_pos + n);
  );
  decoded := (!decoded ^ List.nth ((Obj.obj (List.assoc (__str ("key_list")) (c) : Obj.t) : string list)) (!new_pos));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!decoded) : string); raise Return
  with Return -> !__ret)

and test_end_to_end () =
  let __ret = ref "" in
  (try
  let msg = "Hello, this is a modified Caesar cipher" in
  let cip = new_cipher ("") in
  __ret := (Obj.magic (decrypt (cip) (encrypt (cip) (msg))) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let ssc = new_cipher ("4PYIXyqeQZr44") in
  let encoded = encrypt (ssc) ("Hello, this is a modified Caesar cipher") in
  print_endline (encoded);
  print_endline ((decrypt (ssc) (encoded)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()