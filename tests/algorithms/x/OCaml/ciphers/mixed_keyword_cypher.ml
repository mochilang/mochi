(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _lower = "abcdefghijklmnopqrstuvwxyz"
let rec to_upper s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.make 1 (String.get (s) !i) in
  let j = ref (0) in
  let found = ref (false) in
  (try while (!j < 26) do
    try
  if (ch = String.make 1 (String.get (_lower) !j)) then (
  res := (!res ^ String.make 1 (String.get (_upper) !j));
  found := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!found = false) then (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and contains xs x =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and contains_char s ch =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and get_value keys values key =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < List.length (keys)) do
    try
  if (List.nth (keys) (!i) = key) then (
  __ret := (Obj.magic (List.nth (values) (!i)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (nil) : string); raise Return
  with Return -> !__ret)

and print_mapping keys values =
  let __ret = ref (Obj.magic 0) in
  (try
  let s = ref ("{") in
  let i = ref (0) in
  (try while (!i < List.length (keys)) do
    try
  s := (((((!s ^ "'") ^ List.nth (keys) (!i)) ^ "': '") ^ List.nth (values) (!i)) ^ "'");
  if ((!i + 1) < List.length (keys)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "}");
  print_endline (!s);
    !__ret
  with Return -> !__ret)

and mixed_keyword keyword plaintext verbose =
  let __ret = ref "" in
  (try
  let alphabet = _upper in
  let keyword_u = to_upper (keyword) in
  let plaintext_u = to_upper (plaintext) in
  let unique = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (keyword_u)) do
    try
  let ch = String.make 1 (String.get (keyword_u) !i) in
  if (contains_char (alphabet) (ch) && (contains (!unique) (ch) = false)) then (
  unique := (List.append (!unique) [(Obj.magic (ch) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let num_unique = List.length (!unique) in
  let shifted = ref (([] : (string) list)) in
  i := 0;
  (try while (!i < List.length (!unique)) do
    try
  shifted := (List.append (!shifted) [(Obj.magic (List.nth (!unique) (!i)) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < String.length (alphabet)) do
    try
  let ch = String.make 1 (String.get (alphabet) !i) in
  if (contains (!unique) (ch) = false) then (
  shifted := (List.append (!shifted) [(Obj.magic (ch) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let modified = ref (([] : (string list) list)) in
  let k = ref (0) in
  (try while (!k < List.length (!shifted)) do
    try
  let row = ref (([] : (string) list)) in
  let r = ref (0) in
  (try while ((!r < num_unique) && ((!k + !r) < List.length (!shifted))) do
    try
  row := (List.append (!row) [(Obj.magic (List.nth (!shifted) ((!k + !r))) : string)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  modified := (List.append (!modified) [(Obj.magic (!row) : string list)]);
  k := (!k + num_unique);
    with Continue -> ()
  done with Break -> ());
  let keys = ref (([] : (string) list)) in
  let values = ref (([] : (string) list)) in
  let column = ref (0) in
  let letter_index = ref (0) in
  (try while (!column < num_unique) do
    try
  let row_idx = ref (0) in
  (try while (!row_idx < List.length (!modified)) do
    try
  let row = ref (List.nth (!modified) (!row_idx)) in
  if (List.length (!row) <= !column) then (
  raise Break;
  );
  keys := (List.append (!keys) [(Obj.magic (String.make 1 (String.get (alphabet) !letter_index)) : string)]);
  values := (List.append (!values) [(Obj.magic (List.nth (!row) (!column)) : string)]);
  letter_index := (!letter_index + 1);
  row_idx := (!row_idx + 1);
    with Continue -> ()
  done with Break -> ());
  column := (!column + 1);
    with Continue -> ()
  done with Break -> ());
  if verbose then (
  ignore (print_mapping (!keys) (!values));
  );
  let result = ref ("") in
  i := 0;
  (try while (!i < String.length (plaintext_u)) do
    try
  let ch = String.make 1 (String.get (plaintext_u) !i) in
  let mapped = get_value (!keys) (!values) (ch) in
  if ((Obj.repr (mapped)) = nil) then (
  result := (!result ^ ch);
  ) else (
  result := (!result ^ mapped);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((mixed_keyword ("college") ("UNIVERSITY") (true)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()