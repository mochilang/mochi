(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec int_pow base exp =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result * base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and pow_mod base exp mod_ =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let mod_ = (Obj.magic mod_ : int) in
  let result = ref (1) in
  let b = ref ((base mod mod_)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod mod_);
  );
  e := (!e / 2);
  b := ((!b * !b) mod mod_);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and rand_range low high =
  let __ret = ref 0 in
  (try
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  __ret := (Obj.magic (((_now () mod (high - low)) + low)) : int); raise Return
  with Return -> !__ret)

and rabin_miller num =
  let __ret = ref false in
  (try
  let num = (Obj.magic num : int) in
  let s = ref ((num - 1)) in
  let t = ref (0) in
  (try while ((!s mod 2) = 0) do
    try
  s := (!s / 2);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref (0) in
  (try while (!k < 5) do
    try
  let a = rand_range (Obj.repr (2)) (Obj.repr ((num - 1))) in
  let v = ref (pow_mod (Obj.repr (a)) (Obj.repr (!s)) (Obj.repr (num))) in
  if (!v <> 1) then (
  let i = ref (0) in
  (try while (!v <> (num - 1)) do
    try
  if (!i = (!t - 1)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
  v := ((!v * !v) mod num);
    with Continue -> ()
  done with Break -> ());
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and is_prime_low_num num =
  let __ret = ref false in
  (try
  let num = (Obj.magic num : int) in
  if (num < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let low_primes = ref ([2; 3; 5; 7; 11; 13; 17; 19; 23; 29; 31; 37; 41; 43; 47; 53; 59; 61; 67; 71; 73; 79; 83; 89; 97; 101; 103; 107; 109; 113; 127; 131; 137; 139; 149; 151; 157; 163; 167; 173; 179; 181; 191; 193; 197; 199; 211; 223; 227; 229; 233; 239; 241; 251; 257; 263; 269; 271; 277; 281; 283; 293; 307; 311; 313; 317; 331; 337; 347; 349; 353; 359; 367; 373; 379; 383; 389; 397; 401; 409; 419; 421; 431; 433; 439; 443; 449; 457; 461; 463; 467; 479; 487; 491; 499; 503; 509; 521; 523; 541; 547; 557; 563; 569; 571; 577; 587; 593; 599; 601; 607; 613; 617; 619; 631; 641; 643; 647; 653; 659; 661; 673; 677; 683; 691; 701; 709; 719; 727; 733; 739; 743; 751; 757; 761; 769; 773; 787; 797; 809; 811; 821; 823; 827; 829; 839; 853; 857; 859; 863; 877; 881; 883; 887; 907; 911; 919; 929; 937; 941; 947; 953; 967; 971; 977; 983; 991; 997]) in
  if (List.mem num !low_primes) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (!low_primes)) do
    try
  let p = List.nth (!low_primes) (!i) in
  if ((num mod p) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (rabin_miller (Obj.repr (num))) : bool); raise Return
  with Return -> !__ret)

and generate_large_prime keysize =
  let __ret = ref 0 in
  (try
  let keysize = (Obj.magic keysize : int) in
  let start = ref (int_pow (Obj.repr (2)) (Obj.repr ((keysize - 1)))) in
  let end_ = ref (int_pow (Obj.repr (2)) (Obj.repr (keysize))) in
  (try while true do
    try
  let num = rand_range (Obj.repr (!start)) (Obj.repr (!end_)) in
  if is_prime_low_num (Obj.repr (num)) then (
  __ret := (Obj.magic (num) : int); raise Return
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let p = generate_large_prime (Obj.repr (16)) in
  print_endline (("Prime number: " ^ (string_of_int (p))));
  print_endline (("is_prime_low_num: " ^ (string_of_bool (is_prime_low_num (Obj.repr (p))))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()