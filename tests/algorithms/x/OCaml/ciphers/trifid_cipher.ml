(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let triagrams = ref (["111"; "112"; "113"; "121"; "122"; "123"; "131"; "132"; "133"; "211"; "212"; "213"; "221"; "222"; "223"; "231"; "232"; "233"; "311"; "312"; "313"; "321"; "322"; "323"; "331"; "332"; "333"])
let rec remove_spaces s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.sub (s) (!i) ((!i + 1) - !i) in
  if (c <> " ") then (
  res := (!res ^ c);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and char_to_trigram ch alphabet =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < String.length (alphabet)) do
    try
  if (String.sub (alphabet) (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (List.nth (!triagrams) (!i)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and trigram_to_char tri alphabet =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < List.length (!triagrams)) do
    try
  if (List.nth (!triagrams) (!i) = tri) then (
  __ret := (Obj.magic (String.sub (alphabet) (!i) ((!i + 1) - !i)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and encrypt_part part alphabet =
  let __ret = ref "" in
  (try
  let one = ref ("") in
  let two = ref ("") in
  let three = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (part)) do
    try
  let tri = char_to_trigram (String.sub (part) (!i) ((!i + 1) - !i)) (alphabet) in
  one := (!one ^ String.sub (tri) (0) (1 - 0));
  two := (!two ^ String.sub (tri) (1) (2 - 1));
  three := (!three ^ String.sub (tri) (2) (3 - 2));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((!one ^ !two) ^ !three)) : string); raise Return
  with Return -> !__ret)

and encrypt_message message alphabet period =
  let __ret = ref "" in
  (try
  let period = (Obj.magic period : int) in
  let msg = remove_spaces (message) in
  let alpha = remove_spaces (alphabet) in
  if (String.length (alpha) <> 27) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let encrypted_numeric = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (msg)) do
    try
  let end_ = ref ((!i + period)) in
  if (!end_ > String.length (msg)) then (
  end_ := String.length (msg);
  );
  let part = String.sub (msg) (!i) (!end_ - !i) in
  encrypted_numeric := (!encrypted_numeric ^ encrypt_part (part) (alpha));
  i := (!i + period);
    with Continue -> ()
  done with Break -> ());
  let encrypted = ref ("") in
  let j = ref (0) in
  (try while (!j < String.length (!encrypted_numeric)) do
    try
  let tri = String.sub (!encrypted_numeric) (!j) ((!j + 3) - !j) in
  encrypted := (!encrypted ^ trigram_to_char (tri) (alpha));
  j := (!j + 3);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encrypted) : string); raise Return
  with Return -> !__ret)

and decrypt_part part alphabet =
  let __ret = ref ([] : (string) list) in
  (try
  let converted = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (part)) do
    try
  let tri = char_to_trigram (String.sub (part) (!i) ((!i + 1) - !i)) (alphabet) in
  converted := (!converted ^ tri);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (string) list)) in
  let tmp = ref ("") in
  let j = ref (0) in
  (try while (!j < String.length (!converted)) do
    try
  tmp := (!tmp ^ String.sub (!converted) (!j) ((!j + 1) - !j));
  if (String.length (!tmp) = String.length (part)) then (
  result := (List.append (!result) [(Obj.magic (!tmp) : string)]);
  tmp := "";
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string list); raise Return
  with Return -> !__ret)

and decrypt_message message alphabet period =
  let __ret = ref "" in
  (try
  let period = (Obj.magic period : int) in
  let msg = remove_spaces (message) in
  let alpha = remove_spaces (alphabet) in
  if (String.length (alpha) <> 27) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let decrypted_numeric = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (msg)) do
    try
  let end_ = ref ((!i + period)) in
  if (!end_ > String.length (msg)) then (
  end_ := String.length (msg);
  );
  let part = String.sub (msg) (!i) (!end_ - !i) in
  let groups = ref (decrypt_part (part) (alpha)) in
  let k = ref (0) in
  (try while (!k < String.length (List.nth (!groups) (0))) do
    try
  let tri = ((String.sub (List.nth (!groups) (0)) (!k) ((!k + 1) - !k) ^ String.sub (List.nth (!groups) (1)) (!k) ((!k + 1) - !k)) ^ String.sub (List.nth (!groups) (2)) (!k) ((!k + 1) - !k)) in
  decrypted_numeric := (List.append (!decrypted_numeric) [(Obj.magic (tri) : string)]);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + period);
    with Continue -> ()
  done with Break -> ());
  let decrypted = ref ("") in
  let j = ref (0) in
  (try while (!j < List.length (!decrypted_numeric)) do
    try
  decrypted := (!decrypted ^ trigram_to_char (List.nth (!decrypted_numeric) (!j)) (alpha));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!decrypted) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let msg = "DEFEND THE EAST WALL OF THE CASTLE." in
  let alphabet = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ" in
  let encrypted = encrypt_message (msg) (alphabet) (Obj.repr (5)) in
  let decrypted = decrypt_message (encrypted) (alphabet) (Obj.repr (5)) in
  print_endline (("Encrypted: " ^ encrypted));
  print_endline (("Decrypted: " ^ decrypted));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()