(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec contains xs x =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and index_of xs x =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and prepare_input dirty =
  let __ret = ref "" in
  (try
  let letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let upper_dirty = String.uppercase_ascii (dirty) in
  let filtered = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (upper_dirty)) do
    try
  let c = String.sub upper_dirty (!i) ((!i + 1) - !i) in
  if (let len_s = String.length letters and len_sub = String.length c in let rec aux i = if i + len_sub > len_s then false else if String.sub letters i len_sub = c then true else aux (i + 1) in aux 0) then (
  filtered := (!filtered ^ c);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!filtered) < 2) then (
  __ret := (Obj.magic (!filtered) : string); raise Return
  );
  let clean = ref ("") in
  i := 0;
  (try while (!i < (String.length (!filtered) - 1)) do
    try
  let c1 = String.sub !filtered (!i) ((!i + 1) - !i) in
  let c2 = String.sub !filtered ((!i + 1)) ((!i + 2) - (!i + 1)) in
  clean := (!clean ^ c1);
  if (c1 = c2) then (
  clean := (!clean ^ "X");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  clean := (!clean ^ String.sub !filtered ((String.length (!filtered) - 1)) (String.length (!filtered) - (String.length (!filtered) - 1)));
  if ((String.length (!clean) mod 2) = 1) then (
  clean := (!clean ^ "X");
  );
  __ret := (Obj.magic (!clean) : string); raise Return
  with Return -> !__ret)

and generate_table key =
  let __ret = ref ([] : (string) list) in
  (try
  let alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ" in
  let table = ref (([] : (string) list)) in
  let upper_key = String.uppercase_ascii (key) in
  let i = ref (0) in
  (try while (!i < String.length (upper_key)) do
    try
  let c = String.sub upper_key (!i) ((!i + 1) - !i) in
  if (let len_s = String.length alphabet and len_sub = String.length c in let rec aux i = if i + len_sub > len_s then false else if String.sub alphabet i len_sub = c then true else aux (i + 1) in aux 0) then (
  if not (contains (!table) (c)) then (
  table := (List.append (!table) [(Obj.magic (c) : string)]);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < String.length (alphabet)) do
    try
  let c = String.sub alphabet (!i) ((!i + 1) - !i) in
  if not (contains (!table) (c)) then (
  table := (List.append (!table) [(Obj.magic (c) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!table) : string list); raise Return
  with Return -> !__ret)

and encode plaintext key =
  let __ret = ref "" in
  (try
  let table = ref (generate_table (key)) in
  let text = prepare_input (plaintext) in
  let cipher = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  let c1 = String.sub text (!i) ((!i + 1) - !i) in
  let c2 = String.sub text ((!i + 1)) ((!i + 2) - (!i + 1)) in
  let idx1 = index_of (!table) (c1) in
  let idx2 = index_of (!table) (c2) in
  let row1 = (idx1 / 5) in
  let col1 = (idx1 mod 5) in
  let row2 = (idx2 / 5) in
  let col2 = (idx2 mod 5) in
  if (row1 = row2) then (
  cipher := (!cipher ^ List.nth (!table) (((row1 * 5) + ((col1 + 1) mod 5))));
  cipher := (!cipher ^ List.nth (!table) (((row2 * 5) + ((col2 + 1) mod 5))));
  ) else (
  if (col1 = col2) then (
  cipher := (!cipher ^ List.nth (!table) (((((row1 + 1) mod 5) * 5) + col1)));
  cipher := (!cipher ^ List.nth (!table) (((((row2 + 1) mod 5) * 5) + col2)));
  ) else (
  cipher := (!cipher ^ List.nth (!table) (((row1 * 5) + col2)));
  cipher := (!cipher ^ List.nth (!table) (((row2 * 5) + col1)));
  );
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cipher) : string); raise Return
  with Return -> !__ret)

and decode cipher key =
  let __ret = ref "" in
  (try
  let table = ref (generate_table (key)) in
  let plain = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (cipher)) do
    try
  let c1 = String.sub cipher (!i) ((!i + 1) - !i) in
  let c2 = String.sub cipher ((!i + 1)) ((!i + 2) - (!i + 1)) in
  let idx1 = index_of (!table) (c1) in
  let idx2 = index_of (!table) (c2) in
  let row1 = (idx1 / 5) in
  let col1 = (idx1 mod 5) in
  let row2 = (idx2 / 5) in
  let col2 = (idx2 mod 5) in
  if (row1 = row2) then (
  plain := (!plain ^ List.nth (!table) (((row1 * 5) + ((col1 + 4) mod 5))));
  plain := (!plain ^ List.nth (!table) (((row2 * 5) + ((col2 + 4) mod 5))));
  ) else (
  if (col1 = col2) then (
  plain := (!plain ^ List.nth (!table) (((((row1 + 4) mod 5) * 5) + col1)));
  plain := (!plain ^ List.nth (!table) (((((row2 + 4) mod 5) * 5) + col2)));
  ) else (
  plain := (!plain ^ List.nth (!table) (((row1 * 5) + col2)));
  plain := (!plain ^ List.nth (!table) (((row2 * 5) + col1)));
  );
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!plain) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Encoded:");
  print_endline ((encode ("BYE AND THANKS") ("GREETING")));
  print_endline ("Decoded:");
  print_endline ((decode ("CXRBANRLBALQ") ("GREETING")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()