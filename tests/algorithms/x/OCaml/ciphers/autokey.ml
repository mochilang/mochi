(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _lower = "abcdefghijklmnopqrstuvwxyz"
let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let rec to_lowercase s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.make 1 (String.get (s) !i) in
  let j = ref (0) in
  let found = ref (false) in
  (try while (!j < 26) do
    try
  if (c = String.make 1 (String.get (_upper) !j)) then (
  res := (!res ^ String.make 1 (String.get (_lower) !j));
  found := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  res := (!res ^ c);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and char_index c =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < 26) do
    try
  if (c = String.make 1 (String.get (_lower) !i)) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and index_char i =
  let __ret = ref "" in
  (try
  let i = (Obj.magic i : int) in
  __ret := (Obj.magic (String.make 1 (String.get (_lower) i)) : string); raise Return
  with Return -> !__ret)

and encrypt plaintext key =
  let __ret = ref "" in
  (try
  if (String.length (!plaintext) = 0) then (
  (failwith ("plaintext is empty"));
  );
  if (String.length (key) = 0) then (
  (failwith ("key is empty"));
  );
  let full_key = ref ((key ^ !plaintext)) in
  plaintext := to_lowercase (!plaintext);
  full_key := to_lowercase (!full_key);
  let p_i = ref (0) in
  let k_i = ref (0) in
  let ciphertext = ref ("") in
  (try while (!p_i < String.length (!plaintext)) do
    try
  let p_char = String.make 1 (String.get (!plaintext) !p_i) in
  let p_idx = char_index (p_char) in
  if (p_idx < 0) then (
  ciphertext := (!ciphertext ^ p_char);
  p_i := (!p_i + 1);
  ) else (
  let k_char = String.make 1 (String.get (!full_key) !k_i) in
  let k_idx = char_index (k_char) in
  if (k_idx < 0) then (
  k_i := (!k_i + 1);
  ) else (
  let c_idx = ((p_idx + k_idx) mod 26) in
  ciphertext := (!ciphertext ^ index_char (Obj.repr (c_idx)));
  k_i := (!k_i + 1);
  p_i := (!p_i + 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ciphertext) : string); raise Return
  with Return -> !__ret)

and decrypt ciphertext key =
  let __ret = ref "" in
  (try
  if (String.length (ciphertext) = 0) then (
  (failwith ("ciphertext is empty"));
  );
  if (String.length (key) = 0) then (
  (failwith ("key is empty"));
  );
  let current_key = ref (to_lowercase (key)) in
  let c_i = ref (0) in
  let k_i = ref (0) in
  let plaintext = ref ("") in
  (try while (!c_i < String.length (ciphertext)) do
    try
  let c_char = String.make 1 (String.get (ciphertext) !c_i) in
  let c_idx = char_index (c_char) in
  if (c_idx < 0) then (
  plaintext := (!plaintext ^ c_char);
  ) else (
  let k_char = String.make 1 (String.get (!current_key) !k_i) in
  let k_idx = char_index (k_char) in
  let p_idx = (((c_idx - k_idx) + 26) mod 26) in
  let p_char = index_char (Obj.repr (p_idx)) in
  plaintext := (!plaintext ^ p_char);
  current_key := (!current_key ^ p_char);
  k_i := (!k_i + 1);
  );
  c_i := (!c_i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!plaintext) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((encrypt (ref ("hello world")) ("coffee")));
  print_endline ((decrypt ("jsqqs avvwo") ("coffee")));
  print_endline ((encrypt (ref ("coffee is good as python")) ("TheAlgorithms")));
  print_endline ((decrypt ("vvjfpk wj ohvp su ddylsv") ("TheAlgorithms")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()