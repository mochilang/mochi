(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec encrypt input_string key =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  if (key <= 0) then (
  (failwith ("Height of grid can't be 0 or negative"));
  );
  if ((key = 1) || (String.length (input_string) <= key)) then (
  __ret := (Obj.magic (input_string) : string); raise Return
  );
  let lowest = (key - 1) in
  let temp_grid = ref (([] : (string list) list)) in
  let i = ref (0) in
  (try while (!i < key) do
    try
  temp_grid := (List.append (!temp_grid) [(Obj.magic ((Obj.magic [] : string list)) : string list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let position = ref (0) in
  (try while (!position < String.length (input_string)) do
    try
  let num = ref ((!position mod (lowest * 2))) in
  let alt = ((lowest * 2) - !num) in
  if (!num > alt) then (
  num := alt;
  );
  let row = ref (List.nth (!temp_grid) (!num)) in
  row := (List.append (!row) [(Obj.magic (String.sub (input_string) (!position) ((!position + 1) - !position)) : string)]);
  temp_grid := (List.mapi (fun __i __x -> if __i = !num then !row else __x) (!temp_grid));
  position := (!position + 1);
    with Continue -> ()
  done with Break -> ());
  let output = ref ("") in
  i := 0;
  (try while (!i < key) do
    try
  let row = ref (List.nth (!temp_grid) (!i)) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  output := (!output ^ List.nth (!row) (!j));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : string); raise Return
  with Return -> !__ret)

and decrypt input_string key =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  if (key <= 0) then (
  (failwith ("Height of grid can't be 0 or negative"));
  );
  if (key = 1) then (
  __ret := (Obj.magic (input_string) : string); raise Return
  );
  let lowest = (key - 1) in
  let counts = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < key) do
    try
  counts := (List.append (!counts) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let pos = ref (0) in
  (try while (!pos < String.length (input_string)) do
    try
  let num = ref ((!pos mod (lowest * 2))) in
  let alt = ((lowest * 2) - !num) in
  if (!num > alt) then (
  num := alt;
  );
  counts := (List.mapi (fun __i __x -> if __i = !num then (List.nth (!counts) (!num) + 1) else __x) (!counts));
  pos := (!pos + 1);
    with Continue -> ()
  done with Break -> ());
  let grid = ref (([] : (string list) list)) in
  let counter = ref (0) in
  i := 0;
  (try while (!i < key) do
    try
  let length = List.nth (!counts) (!i) in
  let slice = String.sub (input_string) (!counter) ((!counter + length) - !counter) in
  let row = ref (([] : (string) list)) in
  let j = ref (0) in
  (try while (!j < String.length (slice)) do
    try
  row := (List.append (!row) [(Obj.magic (String.make 1 (String.get (slice) !j)) : string)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  grid := (List.append (!grid) [(Obj.magic (!row) : string list)]);
  counter := (!counter + length);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let indices = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < key) do
    try
  indices := (List.append (!indices) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let output = ref ("") in
  pos := 0;
  (try while (!pos < String.length (input_string)) do
    try
  let num = ref ((!pos mod (lowest * 2))) in
  let alt = ((lowest * 2) - !num) in
  if (!num > alt) then (
  num := alt;
  );
  output := (!output ^ List.nth (List.nth (!grid) (!num)) (List.nth (!indices) (!num)));
  indices := (List.mapi (fun __i __x -> if __i = !num then (List.nth (!indices) (!num) + 1) else __x) (!indices));
  pos := (!pos + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : string); raise Return
  with Return -> !__ret)

and bruteforce input_string =
  let __ret = ref ([] : (string * string) list) in
  (try
  let results = ref ([]) in
  let key_guess = ref (1) in
  (try while (!key_guess < String.length (input_string)) do
    try
  results := ((__str (!key_guess), decrypt (input_string) (Obj.repr (!key_guess))) :: List.remove_assoc (__str (!key_guess)) !results);
  key_guess := (!key_guess + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!results) : (string * string) list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((encrypt ("Hello World") (Obj.repr (4))));
  print_endline ((decrypt ("HWe olordll") (Obj.repr (4))));
  let bf = ref (bruteforce ("HWe olordll")) in
  print_endline (__show (List.assoc (__str (4)) (!bf) ));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()