(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec default_alphabet () =
  let __ret = ref ([] : (string) list) in
  (try
  __ret := (Obj.magic (["a"; "b"; "c"; "d"; "e"; "f"; "g"; "h"; "i"; "j"; "k"; "l"; "m"; "n"; "o"; "p"; "q"; "r"; "s"; "t"; "u"; "v"; "w"; "x"; "y"; "z"]) : string list); raise Return
  with Return -> !__ret)

and default_frequencies () =
  let __ret = ref ([] : (string * float) list) in
  (try
  __ret := (Obj.magic ([("a", 0.08497); ("b", 0.01492); ("c", 0.02202); ("d", 0.04253); ("e", 0.11162); ("f", 0.02228); ("g", 0.02015); ("h", 0.06094); ("i", 0.07546); ("j", 0.00153); ("k", 0.01292); ("l", 0.04025); ("m", 0.02406); ("n", 0.06749); ("o", 0.07507); ("p", 0.01929); ("q", 0.00095); ("r", 0.07587); ("s", 0.06327); ("t", 0.09356); ("u", 0.02758); ("v", 0.00978); ("w", 0.0256); ("x", 0.0015); ("y", 0.01994); ("z", 0.00077)]) : (string * float) list); raise Return
  with Return -> !__ret)

and index_of xs ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and count_char s ch =
  let __ret = ref 0 in
  (try
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) = ch) then (
  count := (!count + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and decrypt_caesar_with_chi_squared ciphertext cipher_alphabet frequencies_dict case_sensitive =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let alphabet_letters = ref (cipher_alphabet) in
  if (List.length (!alphabet_letters) = 0) then (
  alphabet_letters := default_alphabet ();
  );
  let frequencies = ref (frequencies_dict) in
  if (List.length (!frequencies) = 0) then (
  frequencies := default_frequencies ();
  );
  if not (case_sensitive) then (
  ciphertext := String.lowercase_ascii (!ciphertext);
  );
  let best_shift = ref (0) in
  let best_chi = ref (0.0) in
  let best_text = ref ("") in
  let shift = ref (0) in
  (try while (!shift < List.length (!alphabet_letters)) do
    try
  let decrypted = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (!ciphertext)) do
    try
  let ch = String.sub !ciphertext (!i) ((!i + 1) - !i) in
  let idx = index_of (!alphabet_letters) (String.lowercase_ascii (ch)) in
  if (idx >= 0) then (
  let m = List.length (!alphabet_letters) in
  let new_idx = ref (((idx - !shift) mod m)) in
  if (!new_idx < 0) then (
  new_idx := (!new_idx + m);
  );
  let new_char = List.nth (!alphabet_letters) (!new_idx) in
  if (case_sensitive && (ch <> String.lowercase_ascii (ch))) then (
  decrypted := (!decrypted ^ String.uppercase_ascii (new_char));
  ) else (
  decrypted := (!decrypted ^ new_char);
  );
  ) else (
  decrypted := (!decrypted ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let chi = ref (0.0) in
  let lowered = if case_sensitive then String.lowercase_ascii (!decrypted) else !decrypted in
  let j = ref (0) in
  (try while (!j < List.length (!alphabet_letters)) do
    try
  let letter = List.nth (!alphabet_letters) (!j) in
  let occ = count_char (lowered) (letter) in
  if (occ > 0) then (
  let occf = float_of_int (occ) in
  let expected = (List.assoc (letter) (!frequencies) *. occf) in
  let diff = (occf -. expected) in
  chi := (!chi +. (((diff *. diff) /. expected) *. occf));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if ((!shift = 0) || (!chi < !best_chi)) then (
  best_shift := !shift;
  best_chi := !chi;
  best_text := !decrypted;
  );
  shift := (!shift + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([("shift", Obj.repr (!best_shift)); ("chi", Obj.repr (!best_chi)); ("decoded", Obj.repr (!best_text))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let r1 = decrypt_caesar_with_chi_squared (ref ("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!")) ((Obj.magic [] : string list)) ([]) (false) in
  print_endline ((((((string_of_int ((Obj.obj (List.assoc ("shift") (r1) : Obj.t) : int))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("chi") (r1) : Obj.t) : float)))) ^ ", ") ^ (Obj.obj (List.assoc ("decoded") (r1) : Obj.t) : string)));
  let r2 = decrypt_caesar_with_chi_squared (ref ("crybd cdbsxq")) ((Obj.magic [] : string list)) ([]) (false) in
  print_endline ((((((string_of_int ((Obj.obj (List.assoc ("shift") (r2) : Obj.t) : int))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("chi") (r2) : Obj.t) : float)))) ^ ", ") ^ (Obj.obj (List.assoc ("decoded") (r2) : Obj.t) : string)));
  let r3 = decrypt_caesar_with_chi_squared (ref ("Crybd Cdbsxq")) ((Obj.magic [] : string list)) ([]) (true) in
  print_endline ((((((string_of_int ((Obj.obj (List.assoc ("shift") (r3) : Obj.t) : int))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("chi") (r3) : Obj.t) : float)))) ^ ", ") ^ (Obj.obj (List.assoc ("decoded") (r3) : Obj.t) : string)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()