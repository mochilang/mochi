(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec index_in_string s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and contains_char s ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((index_in_string (s) (ch) >= 0)) : bool); raise Return
  with Return -> !__ret)

and is_alpha ch =
  let __ret = ref false in
  (try
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  __ret := (Obj.magic ((contains_char (lower) (ch) || contains_char (upper) (ch))) : bool); raise Return
  with Return -> !__ret)

and to_upper s =
  let __ret = ref "" in
  (try
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.make 1 (String.get (s) !i) in
  let idx = index_in_string (lower) (ch) in
  if (idx >= 0) then (
  res := (!res ^ String.make 1 (String.get (upper) idx));
  ) else (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and remove_duplicates key =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (key)) do
    try
  let ch = String.make 1 (String.get (key) !i) in
  if ((ch = " ") || (is_alpha (ch) && (contains_char (!res) (ch) = false))) then (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and create_cipher_map key =
  let __ret = ref ([] : (string) list) in
  (try
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let cleaned = remove_duplicates (to_upper (key)) in
  let cipher = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (cleaned)) do
    try
  cipher := (List.append (!cipher) [(Obj.magic (String.make 1 (String.get (cleaned) !i)) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let offset = ref (String.length (cleaned)) in
  let j = ref (List.length (!cipher)) in
  (try while (!j < 26) do
    try
  let char = ref (String.make 1 (String.get (alphabet) (!j - !offset))) in
  (try while contains_char (cleaned) (!char) do
    try
  offset := (!offset - 1);
  char := String.make 1 (String.get (alphabet) (!j - !offset));
    with Continue -> ()
  done with Break -> ());
  cipher := (List.append (!cipher) [(Obj.magic (!char) : string)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cipher) : string list); raise Return
  with Return -> !__ret)

and index_in_list lst ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  if (List.nth (lst) (!i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and encipher message cipher =
  let __ret = ref "" in
  (try
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let msg = to_upper (message) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (msg)) do
    try
  let ch = String.make 1 (String.get (msg) !i) in
  let idx = index_in_string (alphabet) (ch) in
  if (idx >= 0) then (
  res := (!res ^ List.nth (cipher) (idx));
  ) else (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and decipher message cipher =
  let __ret = ref "" in
  (try
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let msg = to_upper (message) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (msg)) do
    try
  let ch = String.make 1 (String.get (msg) !i) in
  let idx = index_in_list (cipher) (ch) in
  if (idx >= 0) then (
  res := (!res ^ String.make 1 (String.get (alphabet) idx));
  ) else (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let cipher_map = ref (create_cipher_map ("Goodbye!!"))
let () =
  let mem_start = _mem () in
  let start = _now () in
  let encoded = encipher ("Hello World!!") (!cipher_map) in
  print_endline (encoded);
  print_endline ((decipher (encoded) (!cipher_map)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()