(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _b64_charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
let rec to_binary n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let num = ref (n) in
  let res = ref ("") in
  (try while (!num > 0) do
    try
  let bit = (!num mod 2) in
  res := ((string_of_int (bit)) ^ !res);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and zfill s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let res = ref (s) in
  let pad = ref ((width - String.length (s))) in
  (try while (!pad > 0) do
    try
  res := ("0" ^ !res);
  pad := (!pad - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and from_binary s =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  let result = ref (0) in
  (try while (!i < String.length (s)) do
    try
  result := (!result * 2);
  if (String.sub s (!i) ((!i + 1) - !i) = "1") then (
  result := (!result + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and repeat ch times =
  let __ret = ref "" in
  (try
  let times = (Obj.magic times : int) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < times) do
    try
  res := (!res ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and char_index s c =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) = c) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and base64_encode data =
  let __ret = ref "" in
  (try
  let bits = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (data)) do
    try
  bits := (!bits ^ zfill (to_binary (Obj.repr (List.nth (data) (!i)))) (Obj.repr (8)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let pad_bits = ref (0) in
  if ((String.length (!bits) mod 6) <> 0) then (
  pad_bits := (6 - (String.length (!bits) mod 6));
  bits := (!bits ^ repeat ("0") (Obj.repr (!pad_bits)));
  );
  let j = ref (0) in
  let encoded = ref ("") in
  (try while (!j < String.length (!bits)) do
    try
  let chunk = String.sub !bits (!j) ((!j + 6) - !j) in
  let idx = from_binary (chunk) in
  encoded := (!encoded ^ String.sub _b64_charset (idx) ((idx + 1) - idx));
  j := (!j + 6);
    with Continue -> ()
  done with Break -> ());
  let pad = ref ((!pad_bits / 2)) in
  (try while (!pad > 0) do
    try
  encoded := (!encoded ^ "=");
  pad := (!pad - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encoded) : string); raise Return
  with Return -> !__ret)

and base64_decode s =
  let __ret = ref ([] : (int) list) in
  (try
  let padding = ref (0) in
  let end_ = ref (String.length (s)) in
  (try while ((!end_ > 0) && (String.sub s ((!end_ - 1)) (!end_ - (!end_ - 1)) = "=")) do
    try
  padding := (!padding + 1);
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  let bits = ref ("") in
  let k = ref (0) in
  (try while (!k < !end_) do
    try
  let c = String.sub s (!k) ((!k + 1) - !k) in
  let idx = char_index (_b64_charset) (c) in
  bits := (!bits ^ zfill (to_binary (Obj.repr (idx))) (Obj.repr (6)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if (!padding > 0) then (
  bits := String.sub !bits (0) ((String.length (!bits) - (!padding * 2)) - 0);
  );
  let bytes = ref (([] : (int) list)) in
  let m = ref (0) in
  (try while (!m < String.length (!bits)) do
    try
  let byte = from_binary (String.sub !bits (!m) ((!m + 8) - !m)) in
  bytes := (List.append (!bytes) [(Obj.magic (byte) : int)]);
  m := (!m + 8);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!bytes) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let data = ref ([77; 111; 99; 104; 105]) in
  let encoded = base64_encode (!data) in
  print_endline (encoded);
  print_endline (__show_list (base64_decode (encoded)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()