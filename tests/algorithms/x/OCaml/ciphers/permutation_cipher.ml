(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec rand max =
  let __ret = ref 0 in
  (try
  let max = (Obj.magic max : int) in
  seed := (((!seed * 1103515245) + 12345) mod 2147483647);
  __ret := (Obj.magic ((!seed mod max)) : int); raise Return
  with Return -> !__ret)

and generate_valid_block_size message_length =
  let __ret = ref 0 in
  (try
  let message_length = (Obj.magic message_length : int) in
  let factors = ref (([] : (int) list)) in
  let i = ref (2) in
  (try while (!i <= message_length) do
    try
  if ((message_length mod !i) = 0) then (
  factors := (List.append (!factors) [(Obj.magic (!i) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = rand (Obj.repr (List.length (!factors))) in
  __ret := (Obj.magic (List.nth (!factors) (idx)) : int); raise Return
  with Return -> !__ret)

and generate_permutation_key block_size =
  let __ret = ref ([] : (int) list) in
  (try
  let block_size = (Obj.magic block_size : int) in
  let digits = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < block_size) do
    try
  digits := (List.append (!digits) [(Obj.magic (!i) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref ((block_size - 1)) in
  (try while (!j > 0) do
    try
  let k = rand (Obj.repr ((!j + 1))) in
  let temp = List.nth (!digits) (!j) in
  digits := (List.mapi (fun __i __x -> if __i = !j then List.nth (!digits) (k) else __x) (!digits));
  digits := (List.mapi (fun __i __x -> if __i = k then temp else __x) (!digits));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!digits) : int list); raise Return
  with Return -> !__ret)

and encrypt message key block_size =
  let __ret = ref "" in
  (try
  let block_size = (Obj.magic block_size : int) in
  let encrypted = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let block = String.sub message (!i) ((!i + block_size) - !i) in
  let j = ref (0) in
  (try while (!j < block_size) do
    try
  encrypted := (!encrypted ^ String.sub block (List.nth (key) (!j)) ((List.nth (key) (!j) + 1) - List.nth (key) (!j)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + block_size);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encrypted) : string); raise Return
  with Return -> !__ret)

and repeat_string times =
  let __ret = ref ([] : (string) list) in
  (try
  let times = (Obj.magic times : int) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < times) do
    try
  res := (List.append (!res) [(Obj.magic ("") : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and decrypt encrypted key =
  let __ret = ref "" in
  (try
  let klen = List.length (key) in
  let decrypted = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (encrypted)) do
    try
  let block = String.sub encrypted (!i) ((!i + klen) - !i) in
  let original = ref (repeat_string (Obj.repr (klen))) in
  let j = ref (0) in
  (try while (!j < klen) do
    try
  original := (List.mapi (fun __i __x -> if __i = List.nth (key) (!j) then String.sub block (!j) ((!j + 1) - !j) else __x) (!original));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  j := 0;
  (try while (!j < klen) do
    try
  decrypted := (!decrypted ^ List.nth (!original) (!j));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + klen);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!decrypted) : string); raise Return
  with Return -> !__ret)


let message = "HELLO WORLD"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let block_size = generate_valid_block_size (Obj.repr (String.length (message))) in
  let key = ref (generate_permutation_key (Obj.repr (block_size))) in
  let encrypted = encrypt (message) (!key) (Obj.repr (block_size)) in
  let decrypted = decrypt (encrypted) (!key) in
  print_endline (("Block size: " ^ (string_of_int (block_size))));
  print_endline (("Key: " ^ (__str (!key))));
  print_endline (("Encrypted: " ^ encrypted));
  print_endline (("Decrypted: " ^ decrypted));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()