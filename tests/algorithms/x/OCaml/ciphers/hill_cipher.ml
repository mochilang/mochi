(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _key_string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
let rec mod36 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let r = ref ((n mod 36)) in
  if (!r < 0) then (
  r := (!r + 36);
  );
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  (try while (!y <> 0) do
    try
  let t = !y in
  y := (!x mod !y);
  x := t;
    with Continue -> ()
  done with Break -> ());
  if (!x < 0) then (
  x := -(!x);
  );
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and replace_letters letter =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_key_string)) do
    try
  if (String.make 1 (String.get (_key_string) !i) = letter) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and replace_digits num =
  let __ret = ref "" in
  (try
  let num = (Obj.magic num : int) in
  let idx = mod36 (Obj.repr (num)) in
  __ret := (Obj.magic (String.make 1 (String.get (_key_string) idx)) : string); raise Return
  with Return -> !__ret)

and to_upper c =
  let __ret = ref "" in
  (try
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let i = ref (0) in
  (try while (!i < String.length (lower)) do
    try
  if (c = String.make 1 (String.get (lower) !i)) then (
  __ret := (Obj.magic (String.make 1 (String.get (upper) !i)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (c) : string); raise Return
  with Return -> !__ret)

and process_text text break_key =
  let __ret = ref "" in
  (try
  let break_key = (Obj.magic break_key : int) in
  let chars = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  let c = ref (to_upper (String.make 1 (String.get (text) !i))) in
  let j = ref (0) in
  let ok = ref (false) in
  (try while (!j < String.length (_key_string)) do
    try
  if (String.make 1 (String.get (_key_string) !j) = !c) then (
  ok := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !ok then (
  chars := (List.append (!chars) [(Obj.magic (!c) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (!chars) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let last = List.nth (!chars) ((List.length (!chars) - 1)) in
  (try while ((List.length (!chars) mod break_key) <> 0) do
    try
  chars := (List.append (!chars) [(Obj.magic (last) : string)]);
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  let k = ref (0) in
  (try while (!k < List.length (!chars)) do
    try
  res := (!res ^ List.nth (!chars) (!k));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and matrix_minor m row col =
  let __ret = ref ([] : (int list) list) in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let res = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  if (!i <> row) then (
  let r = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (m) (!i))) do
    try
  if (!j <> col) then (
  r := (List.append (!r) [(Obj.magic (List.nth (List.nth (m) (!i)) (!j)) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!r) : int list)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and determinant m =
  let __ret = ref 0 in
  (try
  let n = List.length (m) in
  if (n = 1) then (
  __ret := (Obj.magic (List.nth (List.nth (m) (0)) (0)) : int); raise Return
  );
  if (n = 2) then (
  __ret := (Obj.magic (((List.nth (List.nth (m) (0)) (0) * List.nth (List.nth (m) (1)) (1)) - (List.nth (List.nth (m) (0)) (1) * List.nth (List.nth (m) (1)) (0)))) : int); raise Return
  );
  let det = ref (0) in
  let col = ref (0) in
  (try while (!col < n) do
    try
  let minor_mat = ref (matrix_minor (m) (Obj.repr (0)) (Obj.repr (!col))) in
  let sign = ref (1) in
  if ((!col mod 2) = 1) then (
  sign := -(1);
  );
  det := (!det + ((!sign * List.nth (List.nth (m) (0)) (!col)) * determinant (!minor_mat)));
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!det) : int); raise Return
  with Return -> !__ret)

and cofactor_matrix m =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = List.length (m) in
  let res = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  let minor_mat = ref (matrix_minor (m) (Obj.repr (!i)) (Obj.repr (!j))) in
  let det_minor = determinant (!minor_mat) in
  let sign = ref (1) in
  if (((!i + !j) mod 2) = 1) then (
  sign := -(1);
  );
  row := (List.append (!row) [(Obj.magic ((!sign * det_minor)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and transpose m =
  let __ret = ref ([] : (int list) list) in
  (try
  let rows = List.length (m) in
  let cols = List.length (List.nth (m) (0)) in
  let res = ref (([] : (int list) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  let row = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  row := (List.append (!row) [(Obj.magic (List.nth (List.nth (m) (!i)) (!j)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!row) : int list)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and matrix_mod m =
  let __ret = ref ([] : (int list) list) in
  (try
  let res = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (m) (!i))) do
    try
  row := (List.append (!row) [(Obj.magic (mod36 (Obj.repr (List.nth (List.nth (m) (!i)) (!j)))) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and scalar_matrix_mult s m =
  let __ret = ref ([] : (int list) list) in
  (try
  let s = (Obj.magic s : int) in
  let res = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (m) (!i))) do
    try
  row := (List.append (!row) [(Obj.magic (mod36 (Obj.repr ((s * List.nth (List.nth (m) (!i)) (!j))))) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and adjugate m =
  let __ret = ref ([] : (int list) list) in
  (try
  let cof = ref (cofactor_matrix (m)) in
  let n = List.length (!cof) in
  let res = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (List.append (!row) [(Obj.magic (List.nth (List.nth (!cof) (!j)) (!i)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and multiply_matrix_vector m v =
  let __ret = ref ([] : (int) list) in
  (try
  let n = List.length (m) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let sum = ref (0) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  sum := (!sum + (List.nth (List.nth (m) (!i)) (!j) * List.nth (v) (!j)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (mod36 (Obj.repr (!sum))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and inverse_key key =
  let __ret = ref ([] : (int list) list) in
  (try
  let det_val = determinant (key) in
  let det_mod = ref (mod36 (Obj.repr (det_val))) in
  let det_inv = ref (0) in
  let i = ref (0) in
  (try while (!i < 36) do
    try
  if (((!det_mod * !i) mod 36) = 1) then (
  det_inv := !i;
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let adj = ref (adjugate (key)) in
  let tmp = ref (scalar_matrix_mult (Obj.repr (!det_inv)) (!adj)) in
  let res = ref (matrix_mod (!tmp)) in
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and hill_encrypt key text =
  let __ret = ref "" in
  (try
  let break_key = List.length (key) in
  let processed = process_text (text) (Obj.repr (break_key)) in
  let encrypted = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (processed)) do
    try
  let vec = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < break_key) do
    try
  vec := (List.append (!vec) [(Obj.magic (replace_letters (String.make 1 (String.get (processed) (!i + !j)))) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let enc_vec = ref (multiply_matrix_vector (key) (!vec)) in
  let k = ref (0) in
  (try while (!k < break_key) do
    try
  encrypted := (!encrypted ^ replace_digits (Obj.repr (List.nth (!enc_vec) (!k))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + break_key);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encrypted) : string); raise Return
  with Return -> !__ret)

and hill_decrypt key text =
  let __ret = ref "" in
  (try
  let break_key = List.length (key) in
  let decrypt_key = ref (inverse_key (key)) in
  let processed = process_text (text) (Obj.repr (break_key)) in
  let decrypted = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (processed)) do
    try
  let vec = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < break_key) do
    try
  vec := (List.append (!vec) [(Obj.magic (replace_letters (String.make 1 (String.get (processed) (!i + !j)))) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let dec_vec = ref (multiply_matrix_vector (!decrypt_key) (!vec)) in
  let k = ref (0) in
  (try while (!k < break_key) do
    try
  decrypted := (!decrypted ^ replace_digits (Obj.repr (List.nth (!dec_vec) (!k))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + break_key);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!decrypted) : string); raise Return
  with Return -> !__ret)


let key = ref ([[2; 5]; [1; 6]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((hill_encrypt (!key) ("testing hill cipher")));
  print_endline ((hill_encrypt (!key) ("hello")));
  print_endline ((hill_decrypt (!key) ("WHXYJOLM9C6XT085LL")));
  print_endline ((hill_decrypt (!key) ("85FF00")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()