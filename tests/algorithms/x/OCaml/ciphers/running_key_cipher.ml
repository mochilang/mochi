(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and ord ch =
  let __ret = ref 0 in
  (try
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let idx = ref ((try String.index (upper) (String.get (ch) 0) with Not_found -> -1)) in
  if (!idx >= 0) then (
  __ret := (Obj.magic ((65 + !idx)) : int); raise Return
  );
  idx := (try String.index (lower) (String.get (ch) 0) with Not_found -> -1);
  if (!idx >= 0) then (
  __ret := (Obj.magic ((97 + !idx)) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and chr n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  if ((n >= 65) && (n < 91)) then (
  __ret := (Obj.magic (String.sub (upper) (n - 65) ((n - 64) - (n - 65))) : string); raise Return
  );
  if ((n >= 97) && (n < 123)) then (
  __ret := (Obj.magic (String.sub (lower) (n - 97) ((n - 96) - (n - 97))) : string); raise Return
  );
  __ret := (Obj.magic ("?") : string); raise Return
  with Return -> !__ret)

and clean_text s =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.make 1 (String.get (s) !i) in
  if ((ch >= "A") && (ch <= "Z")) then (
  out := (!out ^ ch);
  ) else (
  if ((ch >= "a") && (ch <= "z")) then (
  out := (!out ^ chr (Obj.repr ((ord (ch) - 32))));
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and running_key_encrypt key plaintext =
  let __ret = ref "" in
  (try
  let pt = clean_text (plaintext) in
  let k = clean_text (key) in
  let key_len = String.length (k) in
  let res = ref ("") in
  let ord_a = ord ("A") in
  let i = ref (0) in
  (try while (!i < String.length (pt)) do
    try
  let p = (ord (String.make 1 (String.get (pt) !i)) - ord_a) in
  let kv = (ord (String.make 1 (String.get (k) (!i mod key_len))) - ord_a) in
  let c = ((p + kv) mod 26) in
  res := (!res ^ chr (Obj.repr ((c + ord_a))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and running_key_decrypt key ciphertext =
  let __ret = ref "" in
  (try
  let ct = clean_text (ciphertext) in
  let k = clean_text (key) in
  let key_len = String.length (k) in
  let res = ref ("") in
  let ord_a = ord ("A") in
  let i = ref (0) in
  (try while (!i < String.length (ct)) do
    try
  let c = (ord (String.make 1 (String.get (ct) !i)) - ord_a) in
  let kv = (ord (String.make 1 (String.get (k) (!i mod key_len))) - ord_a) in
  let p = (((c - kv) + 26) mod 26) in
  res := (!res ^ chr (Obj.repr ((p + ord_a))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let key = "How does the duck know that? said Victor"
let plaintext = "DEFEND THIS"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let ciphertext = running_key_encrypt (key) (plaintext) in
  print_endline (ciphertext);
  print_endline ((running_key_decrypt (key) (ciphertext)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()