(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (123456789)
let rec rand () =
  let __ret = ref 0 in
  (try
  seed := (((!seed * 1103515245) + 12345) mod 2147483647);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)

and rand_range min max =
  let __ret = ref 0 in
  (try
  let min = (Obj.magic min : int) in
  let max = (Obj.magic max : int) in
  __ret := (Obj.magic ((min + (rand () mod ((max - min) + 1)))) : int); raise Return
  with Return -> !__ret)

and mod_pow base exponent modulus =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exponent = (Obj.magic exponent : int) in
  let modulus = (Obj.magic modulus : int) in
  let result = ref (1) in
  let b = ref ((base mod modulus)) in
  let e = ref (exponent) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod modulus);
  );
  e := (!e / 2);
  b := ((!b * !b) mod modulus);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and extended_gcd a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (b = 0) then (
  __ret := (Obj.magic ([("g", Obj.repr (a)); ("x", Obj.repr (1)); ("y", Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let res = extended_gcd (Obj.repr (b)) (Obj.repr ((a mod b))) in
  __ret := (Obj.magic ([("g", Obj.repr ((Obj.obj (List.assoc ("g") (res) : Obj.t) : int))); ("x", Obj.repr ((Obj.obj (List.assoc ("y") (res) : Obj.t) : int))); ("y", Obj.repr (((Obj.obj (List.assoc ("x") (res) : Obj.t) : int) - ((a / b) * (Obj.obj (List.assoc ("y") (res) : Obj.t) : int)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and mod_inverse a m =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let m = (Obj.magic m : int) in
  let res = extended_gcd (Obj.repr (a)) (Obj.repr (m)) in
  if ((Obj.obj (List.assoc ("g") (res) : Obj.t) : int) <> 1) then (
  (failwith ("inverse does not exist"));
  );
  let r = ((Obj.obj (List.assoc ("x") (res) : Obj.t) : int) mod m) in
  if (r < 0) then (
  __ret := (Obj.magic ((r + m)) : int); raise Return
  );
  __ret := (Obj.magic (r) : int); raise Return
  with Return -> !__ret)

and pow2 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let r = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  r := (!r * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and is_probable_prime n k =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let k = (Obj.magic k : int) in
  if (n <= 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (n <= 3) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let r = ref (0) in
  let d = ref ((n - 1)) in
  (try while ((!d mod 2) = 0) do
    try
  d := (!d / 2);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (0) in
  (try while (!i < k) do
    try
  let a = rand_range (Obj.repr (2)) (Obj.repr ((n - 2))) in
  let x = ref (mod_pow (Obj.repr (a)) (Obj.repr (!d)) (Obj.repr (n))) in
  if ((!x = 1) || (!x = (n - 1))) then (
  i := (!i + 1);
  raise Continue;
  );
  let j = ref (1) in
  let found = ref (false) in
  (try while (!j < !r) do
    try
  x := mod_pow (Obj.repr (!x)) (Obj.repr (2)) (Obj.repr (n));
  if (!x = (n - 1)) then (
  found := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and generate_large_prime bits =
  let __ret = ref 0 in
  (try
  let bits = (Obj.magic bits : int) in
  let min = pow2 (Obj.repr ((bits - 1))) in
  let max = (pow2 (Obj.repr (bits)) - 1) in
  let p = ref (rand_range (Obj.repr (min)) (Obj.repr (max))) in
  if ((!p mod 2) = 0) then (
  p := (!p + 1);
  );
  (try while not (is_probable_prime (Obj.repr (!p)) (Obj.repr (5))) do
    try
  p := (!p + 2);
  if (!p > max) then (
  p := (min + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : int); raise Return
  with Return -> !__ret)

and primitive_root p =
  let __ret = ref 0 in
  (try
  let p = (Obj.magic p : int) in
  (try while true do
    try
  let g = rand_range (Obj.repr (3)) (Obj.repr ((p - 1))) in
  if (mod_pow (Obj.repr (g)) (Obj.repr (2)) (Obj.repr (p)) = 1) then (
  raise Continue;
  );
  if (mod_pow (Obj.repr (g)) (Obj.repr (p)) (Obj.repr (p)) = 1) then (
  raise Continue;
  );
  __ret := (Obj.magic (g) : int); raise Return
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and generate_key key_size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let key_size = (Obj.magic key_size : int) in
  let p = generate_large_prime (Obj.repr (key_size)) in
  let e1 = primitive_root (Obj.repr (p)) in
  let d = rand_range (Obj.repr (3)) (Obj.repr ((p - 1))) in
  let e2 = mod_inverse (Obj.repr (mod_pow (Obj.repr (e1)) (Obj.repr (d)) (Obj.repr (p)))) (Obj.repr (p)) in
  let public_key = [("key_size", Obj.repr (key_size)); ("g", Obj.repr (e1)); ("e2", Obj.repr (e2)); ("p", Obj.repr (p))] in
  let private_key = [("key_size", Obj.repr (key_size)); ("d", Obj.repr (d))] in
  __ret := (Obj.magic ([("public_key", Obj.repr (public_key)); ("private_key", Obj.repr (private_key))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let key_size = 16 in
  let kp = generate_key (Obj.repr (key_size)) in
  let pub = ref ((Obj.obj (List.assoc ("public_key") (kp) : Obj.t) : ( string * Obj.t ) list)) in
  let priv = ref ((Obj.obj (List.assoc ("private_key") (kp) : Obj.t) : ( string * Obj.t ) list)) in
  print_endline ((((((((("public key: (" ^ (string_of_int ((Obj.obj (List.assoc ("key_size") (!pub) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc ("g") (!pub) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc ("e2") (!pub) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc ("p") (!pub) : Obj.t) : int)))) ^ ")"));
  print_endline ((((("private key: (" ^ (string_of_int ((Obj.obj (List.assoc ("key_size") (!priv) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc ("d") (!priv) : Obj.t) : int)))) ^ ")"));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()