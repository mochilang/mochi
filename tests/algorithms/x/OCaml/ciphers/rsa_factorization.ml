(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  (try while (!y <> 0) do
    try
  let t = (!x mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  if (!x < 0) then (
  __ret := (Obj.magic (-(!x)) : int); raise Return
  );
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and pow_mod base exp mod_ =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let mod_ = (Obj.magic mod_ : int) in
  let result = ref (1) in
  let b = ref ((base mod mod_)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod mod_);
  );
  e := (!e / 2);
  b := ((!b * !b) mod mod_);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and rsa_factor d e n =
  let __ret = ref ([] : (int) list) in
  (try
  let d = (Obj.magic d : int) in
  let e = (Obj.magic e : int) in
  let n = (Obj.magic n : int) in
  let k = ((d * e) - 1) in
  let p = ref (0) in
  let q = ref (0) in
  let g = ref (2) in
  (try while ((!p = 0) && (!g < n)) do
    try
  let t = ref (k) in
  (try while ((!t mod 2) = 0) do
    try
  t := (!t / 2);
  let x = pow_mod (Obj.repr (!g)) (Obj.repr (!t)) (Obj.repr (n)) in
  let y = gcd (Obj.repr ((x - 1))) (Obj.repr (n)) in
  if ((x > 1) && (y > 1)) then (
  p := y;
  q := (n / y);
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  g := (!g + 1);
    with Continue -> ()
  done with Break -> ());
  if (!p > !q) then (
  __ret := (Obj.magic ([!q; !p]) : int list); raise Return
  );
  __ret := (Obj.magic ([!p; !q]) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list (rsa_factor (Obj.repr (3)) (Obj.repr (16971)) (Obj.repr (25777))));
  print_endline (__show_list (rsa_factor (Obj.repr (7331)) (Obj.repr (11)) (Obj.repr (27233))));
  print_endline (__show_list (rsa_factor (Obj.repr (4021)) (Obj.repr (13)) (Obj.repr (17711))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()