(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _symbols = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
let rec gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  (try while (!y <> 0) do
    try
  let temp = (!x mod !y) in
  x := !y;
  y := temp;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and mod_inverse a m =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let m = (Obj.magic m : int) in
  if (gcd (Obj.repr (a)) (Obj.repr (m)) <> 1) then (
  (failwith ((((("mod inverse of " ^ (string_of_int (a))) ^ " and ") ^ (string_of_int (m))) ^ " does not exist")));
  );
  let u1 = ref (1) in
  let u2 = ref (0) in
  let u3 = ref (a) in
  let v1 = ref (0) in
  let v2 = ref (1) in
  let v3 = ref (m) in
  (try while (!v3 <> 0) do
    try
  let q = (!u3 / !v3) in
  let t1 = (!u1 - (q * !v1)) in
  let t2 = (!u2 - (q * !v2)) in
  let t3 = (!u3 - (q * !v3)) in
  u1 := !v1;
  u2 := !v2;
  u3 := !v3;
  v1 := t1;
  v2 := t2;
  v3 := t3;
    with Continue -> ()
  done with Break -> ());
  let res = (!u1 mod m) in
  if (res < 0) then (
  __ret := (Obj.magic ((res + m)) : int); raise Return
  );
  __ret := (Obj.magic (res) : int); raise Return
  with Return -> !__ret)

and find_symbol ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_symbols)) do
    try
  if (String.make 1 (String.get (_symbols) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and check_keys key_a key_b mode =
  let __ret = ref (Obj.magic 0) in
  (try
  let key_a = (Obj.magic key_a : int) in
  let key_b = (Obj.magic key_b : int) in
  let m = String.length (_symbols) in
  if (mode = "encrypt") then (
  if (key_a = 1) then (
  (failwith ("The affine cipher becomes weak when key A is set to 1. Choose different key"));
  );
  if (key_b = 0) then (
  (failwith ("The affine cipher becomes weak when key B is set to 0. Choose different key"));
  );
  );
  if (((key_a < 0) || (key_b < 0)) || (key_b > (m - 1))) then (
  (failwith (("Key A must be greater than 0 and key B must be between 0 and " ^ (string_of_int ((m - 1))))));
  );
  if (gcd (Obj.repr (key_a)) (Obj.repr (m)) <> 1) then (
  (failwith ((((("Key A " ^ (string_of_int (key_a))) ^ " and the symbol set size ") ^ (string_of_int (m))) ^ " are not relatively prime. Choose a different key.")));
  );
    !__ret
  with Return -> !__ret)

and encrypt_message key message =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  let m = String.length (_symbols) in
  let key_a = (key / m) in
  let key_b = (key mod m) in
  ignore (check_keys (Obj.repr (key_a)) (Obj.repr (key_b)) ("encrypt"));
  let cipher_text = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let ch = String.make 1 (String.get (message) !i) in
  let index = find_symbol (ch) in
  if (index >= 0) then (
  cipher_text := (!cipher_text ^ String.make 1 (String.get (_symbols) (((index * key_a) + key_b) mod m)));
  ) else (
  cipher_text := (!cipher_text ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!cipher_text) : string); raise Return
  with Return -> !__ret)

and decrypt_message key message =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  let m = String.length (_symbols) in
  let key_a = (key / m) in
  let key_b = (key mod m) in
  ignore (check_keys (Obj.repr (key_a)) (Obj.repr (key_b)) ("decrypt"));
  let inv = mod_inverse (Obj.repr (key_a)) (Obj.repr (m)) in
  let plain_text = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let ch = String.make 1 (String.get (message) !i) in
  let index = find_symbol (ch) in
  if (index >= 0) then (
  let n = ref (((index - key_b) * inv)) in
  let pos = (!n mod m) in
  let final = if (pos < 0) then (pos + m) else pos in
  plain_text := (!plain_text ^ String.make 1 (String.get (_symbols) final));
  ) else (
  plain_text := (!plain_text ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!plain_text) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let key = 4545 in
  let msg = "The affine cipher is a type of monoalphabetic substitution cipher." in
  let enc = encrypt_message (Obj.repr (key)) (msg) in
  print_endline (enc);
  print_endline ((decrypt_message (Obj.repr (key)) (enc)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()