(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let low_abc = "abcdefghijklmnopqrstuvwxyz"
let rotor1 = "EGZWVONAHDCLFQMSIPJBYUKXTR"
let rotor2 = "FOBHMDKEXQNRAULPGSJVTYICZW"
let rotor3 = "ZJXESIUQLHAVRMDOYGTNFWPBKC"
let rotor4 = "RMDJXFUWGISLHVTCQNKYPBEZOA"
let rotor5 = "SGLCPQWZHKXAREONTFBVIYJUDM"
let rotor6 = "HVSICLTYKQUBXDWAJZOMFGPREN"
let rotor7 = "RZWQHFMVDBKICJLNTUXAGYPSOE"
let rotor8 = "LFKIJODBEGAMQPXVUHYSTCZRWN"
let rotor9 = "KOAEGVDHXPQZMLFTYWJNBRCIUS"
let reflector_pairs = ref (["AN"; "BO"; "CP"; "DQ"; "ER"; "FS"; "GT"; "HU"; "IV"; "JW"; "KX"; "LY"; "MZ"])
let rec list_contains xs x =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and index_in_string s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and contains_char s ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((index_in_string (s) (ch) >= 0)) : bool); raise Return
  with Return -> !__ret)

and to_uppercase s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub s (!i) ((!i + 1) - !i) in
  let idx = index_in_string (low_abc) (ch) in
  if (idx >= 0) then (
  res := (!res ^ String.sub abc (idx) ((idx + 1) - idx));
  ) else (
  res := (!res ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and plugboard_map pb ch =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < List.length (pb)) do
    try
  let pair = List.nth (pb) (!i) in
  let a = String.sub pair (0) (1 - 0) in
  let b = String.sub pair (1) (2 - 1) in
  if (ch = a) then (
  __ret := (Obj.magic (b) : string); raise Return
  );
  if (ch = b) then (
  __ret := (Obj.magic (a) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (ch) : string); raise Return
  with Return -> !__ret)

and reflector_map ch =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < List.length (!reflector_pairs)) do
    try
  let pair = List.nth (!reflector_pairs) (!i) in
  let a = String.sub pair (0) (1 - 0) in
  let b = String.sub pair (1) (2 - 1) in
  if (ch = a) then (
  __ret := (Obj.magic (b) : string); raise Return
  );
  if (ch = b) then (
  __ret := (Obj.magic (a) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (ch) : string); raise Return
  with Return -> !__ret)

and count_unique xs =
  let __ret = ref 0 in
  (try
  let unique = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if not (list_contains (!unique) (List.nth (xs) (!i))) then (
  unique := (List.append (!unique) [(Obj.magic (List.nth (xs) (!i)) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.length (!unique)) : int); raise Return
  with Return -> !__ret)

and build_plugboard pbstring =
  let __ret = ref ([] : (string) list) in
  (try
  if (String.length (pbstring) = 0) then (
  __ret := (Obj.magic ((Obj.magic [] : string list)) : string list); raise Return
  );
  if ((String.length (pbstring) mod 2) <> 0) then (
  (failwith ((("Odd number of symbols(" ^ (string_of_int (String.length (pbstring)))) ^ ")")));
  );
  let pbstring_nospace = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (pbstring)) do
    try
  let ch = String.sub pbstring (!i) ((!i + 1) - !i) in
  if (ch <> " ") then (
  pbstring_nospace := (!pbstring_nospace ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let seen = ref (([] : (string) list)) in
  i := 0;
  (try while (!i < String.length (!pbstring_nospace)) do
    try
  let ch = String.sub !pbstring_nospace (!i) ((!i + 1) - !i) in
  if not (contains_char (abc) (ch)) then (
  (failwith ((("'" ^ ch) ^ "' not in list of symbols")));
  );
  if list_contains (!seen) (ch) then (
  (failwith ((("Duplicate symbol(" ^ ch) ^ ")")));
  );
  seen := (List.append (!seen) [(Obj.magic (ch) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let pb = ref (([] : (string) list)) in
  i := 0;
  (try while (!i < (String.length (!pbstring_nospace) - 1)) do
    try
  let a = String.sub !pbstring_nospace (!i) ((!i + 1) - !i) in
  let b = String.sub !pbstring_nospace ((!i + 1)) ((!i + 2) - (!i + 1)) in
  pb := (List.append (!pb) [(Obj.magic ((a ^ b)) : string)]);
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!pb) : string list); raise Return
  with Return -> !__ret)

and validator rotpos rotsel pb =
  let __ret = ref (Obj.magic 0) in
  (try
  if (count_unique (rotsel) < 3) then (
  (failwith ((("Please use 3 unique rotors (not " ^ (string_of_int (count_unique (rotsel)))) ^ ")")));
  );
  if (List.length (rotpos) <> 3) then (
  (failwith ("Rotor position must have 3 values"));
  );
  let r1 = List.nth (rotpos) (0) in
  let r2 = List.nth (rotpos) (1) in
  let r3 = List.nth (rotpos) (2) in
  if not (((0 < r1) && (r1 <= String.length (abc)))) then (
  (failwith ((("First rotor position is not within range of 1..26 (" ^ (string_of_int (r1))) ^ ")")));
  );
  if not (((0 < r2) && (r2 <= String.length (abc)))) then (
  (failwith ((("Second rotor position is not within range of 1..26 (" ^ (string_of_int (r2))) ^ ")")));
  );
  if not (((0 < r3) && (r3 <= String.length (abc)))) then (
  (failwith ((("Third rotor position is not within range of 1..26 (" ^ (string_of_int (r3))) ^ ")")));
  );
    !__ret
  with Return -> !__ret)

and enigma text rotor_position rotor_selection plugb =
  let __ret = ref "" in
  (try
  let up_text = to_uppercase (text) in
  let up_pb = to_uppercase (plugb) in
  ignore (validator (rotor_position) (rotor_selection) (up_pb));
  let plugboard = ref (build_plugboard (up_pb)) in
  let rotorpos1 = ref ((List.nth (rotor_position) (0) - 1)) in
  let rotorpos2 = ref ((List.nth (rotor_position) (1) - 1)) in
  let rotorpos3 = ref ((List.nth (rotor_position) (2) - 1)) in
  let rotor_a = List.nth (rotor_selection) (0) in
  let rotor_b = List.nth (rotor_selection) (1) in
  let rotor_c = List.nth (rotor_selection) (2) in
  let result = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (up_text)) do
    try
  let symbol = ref (String.sub up_text (!i) ((!i + 1) - !i)) in
  if contains_char (abc) (!symbol) then (
  symbol := plugboard_map (!plugboard) (!symbol);
  let index = ref ((index_in_string (abc) (!symbol) + !rotorpos1)) in
  symbol := String.sub rotor_a ((!index mod String.length (abc))) (((!index mod String.length (abc)) + 1) - (!index mod String.length (abc)));
  index := (index_in_string (abc) (!symbol) + !rotorpos2);
  symbol := String.sub rotor_b ((!index mod String.length (abc))) (((!index mod String.length (abc)) + 1) - (!index mod String.length (abc)));
  index := (index_in_string (abc) (!symbol) + !rotorpos3);
  symbol := String.sub rotor_c ((!index mod String.length (abc))) (((!index mod String.length (abc)) + 1) - (!index mod String.length (abc)));
  symbol := reflector_map (!symbol);
  index := (index_in_string (rotor_c) (!symbol) - !rotorpos3);
  if (!index < 0) then (
  index := (!index + String.length (abc));
  );
  symbol := String.sub abc (!index) ((!index + 1) - !index);
  index := (index_in_string (rotor_b) (!symbol) - !rotorpos2);
  if (!index < 0) then (
  index := (!index + String.length (abc));
  );
  symbol := String.sub abc (!index) ((!index + 1) - !index);
  index := (index_in_string (rotor_a) (!symbol) - !rotorpos1);
  if (!index < 0) then (
  index := (!index + String.length (abc));
  );
  symbol := String.sub abc (!index) ((!index + 1) - !index);
  symbol := plugboard_map (!plugboard) (!symbol);
  rotorpos1 := (!rotorpos1 + 1);
  if (!rotorpos1 >= String.length (abc)) then (
  rotorpos1 := 0;
  rotorpos2 := (!rotorpos2 + 1);
  );
  if (!rotorpos2 >= String.length (abc)) then (
  rotorpos2 := 0;
  rotorpos3 := (!rotorpos3 + 1);
  );
  if (!rotorpos3 >= String.length (abc)) then (
  rotorpos3 := 0;
  );
  );
  result := (!result ^ !symbol);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let message = "This is my Python script that emulates the Enigma machine from WWII." in
  let rotor_pos = ref ([1; 1; 1]) in
  let pb = "pictures" in
  let rotor_sel = ref ([rotor2; rotor4; rotor8]) in
  let en = enigma (message) (!rotor_pos) (!rotor_sel) (pb) in
  print_endline (("Encrypted message: " ^ en));
  print_endline (("Decrypted message: " ^ enigma (en) (!rotor_pos) (!rotor_sel) (pb)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()