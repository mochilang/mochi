(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _b32_charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
let rec indexOfChar s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and ord ch =
  let __ret = ref 0 in
  (try
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let digits = "0123456789" in
  let idx = ref (indexOfChar (upper) (ch)) in
  if (!idx >= 0) then (
  __ret := (Obj.magic ((65 + !idx)) : int); raise Return
  );
  idx := indexOfChar (lower) (ch);
  if (!idx >= 0) then (
  __ret := (Obj.magic ((97 + !idx)) : int); raise Return
  );
  idx := indexOfChar (digits) (ch);
  if (!idx >= 0) then (
  __ret := (Obj.magic ((48 + !idx)) : int); raise Return
  );
  if (ch = " ") then (
  __ret := (Obj.magic (32) : int); raise Return
  );
  if (ch = "!") then (
  __ret := (Obj.magic (33) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and chr code =
  let __ret = ref "" in
  (try
  let code = (Obj.magic code : int) in
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let digits = "0123456789" in
  if (code = 32) then (
  __ret := (Obj.magic (" ") : string); raise Return
  );
  if (code = 33) then (
  __ret := (Obj.magic ("!") : string); raise Return
  );
  let idx = ref ((code - 65)) in
  if ((!idx >= 0) && (!idx < String.length (upper))) then (
  __ret := (Obj.magic (String.make 1 (String.get (upper) !idx)) : string); raise Return
  );
  idx := (code - 97);
  if ((!idx >= 0) && (!idx < String.length (lower))) then (
  __ret := (Obj.magic (String.make 1 (String.get (lower) !idx)) : string); raise Return
  );
  idx := (code - 48);
  if ((!idx >= 0) && (!idx < String.length (digits))) then (
  __ret := (Obj.magic (String.make 1 (String.get (digits) !idx)) : string); raise Return
  );
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and repeat s n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  out := (!out ^ s);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and to_binary n bits =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let bits = (Obj.magic bits : int) in
  let v = ref (n) in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < bits) do
    try
  out := ((string_of_int ((!v mod 2))) ^ !out);
  v := (!v / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and binary_to_int bits =
  let __ret = ref 0 in
  (try
  let n = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (bits)) do
    try
  n := (!n * 2);
  if (String.make 1 (String.get (bits) !i) = "1") then (
  n := (!n + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and base32_encode data =
  let __ret = ref "" in
  (try
  let binary_data = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (data)) do
    try
  binary_data := (!binary_data ^ to_binary (Obj.repr (ord (String.make 1 (String.get (data) !i)))) (Obj.repr (8)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let remainder = (String.length (!binary_data) mod 5) in
  if (remainder <> 0) then (
  binary_data := (!binary_data ^ repeat ("0") (Obj.repr ((5 - remainder))));
  );
  let b32_result = ref ("") in
  let j = ref (0) in
  (try while (!j < String.length (!binary_data)) do
    try
  let chunk = String.sub (!binary_data) !j ((!j + 5) - !j) in
  let index = binary_to_int (chunk) in
  b32_result := (!b32_result ^ String.make 1 (String.get (_b32_charset) index));
  j := (!j + 5);
    with Continue -> ()
  done with Break -> ());
  let rem = (String.length (!b32_result) mod 8) in
  if (rem <> 0) then (
  b32_result := (!b32_result ^ repeat ("=") (Obj.repr ((8 - rem))));
  );
  __ret := (Obj.magic (!b32_result) : string); raise Return
  with Return -> !__ret)

and base32_decode data =
  let __ret = ref "" in
  (try
  let clean = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (data)) do
    try
  let ch = String.make 1 (String.get (data) !i) in
  if (ch <> "=") then (
  clean := (!clean ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let binary_chunks = ref ("") in
  i := 0;
  (try while (!i < String.length (!clean)) do
    try
  let idx = indexOfChar (_b32_charset) (String.make 1 (String.get (!clean) !i)) in
  binary_chunks := (!binary_chunks ^ to_binary (Obj.repr (idx)) (Obj.repr (5)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref ("") in
  let j = ref (0) in
  (try while ((!j + 8) <= String.length (!binary_chunks)) do
    try
  let byte_bits = String.sub (!binary_chunks) !j ((!j + 8) - !j) in
  let code = binary_to_int (byte_bits) in
  result := (!result ^ chr (Obj.repr (code)));
  j := (!j + 8);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((base32_encode ("Hello World!")));
  print_endline ((base32_encode ("123456")));
  print_endline ((base32_encode ("some long complex string")));
  print_endline ((base32_decode ("JBSWY3DPEBLW64TMMQQQ====")));
  print_endline ((base32_decode ("GEZDGNBVGY======")));
  print_endline ((base32_decode ("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()