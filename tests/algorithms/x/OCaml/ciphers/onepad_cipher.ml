(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec set_seed s =
  let __ret = ref (Obj.magic 0) in
  (try
  let s = (Obj.magic s : int) in
  seed := s;
    !__ret
  with Return -> !__ret)

and randint a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  seed := (((!seed * 1103515245) + 12345) mod 2147483648);
  __ret := (Obj.magic (((!seed mod ((b - a) + 1)) + a)) : int); raise Return
  with Return -> !__ret)


let ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
let rec ord ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (ascii_chars)) do
    try
  if (String.make 1 (String.get (ascii_chars) !i) = ch) then (
  __ret := (Obj.magic ((32 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and chr code =
  let __ret = ref "" in
  (try
  let code = (Obj.magic code : int) in
  if ((code < 32) || (code > 126)) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  __ret := (Obj.magic (String.make 1 (String.get (ascii_chars) (code - 32))) : string); raise Return
  with Return -> !__ret)

and encrypt text =
  let __ret = ref ([] : (string * int list) list) in
  (try
  let cipher = ref (([] : (int) list)) in
  let key = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  let p = ord (String.make 1 (String.get (text) !i)) in
  let k = randint (Obj.repr (1)) (Obj.repr (300)) in
  let c = ((p + k) * k) in
  cipher := (List.append (!cipher) [(Obj.magic (c) : int)]);
  key := (List.append (!key) [(Obj.magic (k) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ([]) in
  res := (("cipher", !cipher) :: List.remove_assoc ("cipher") !res);
  res := (("key", !key) :: List.remove_assoc ("key") !res);
  __ret := (Obj.magic (!res) : (string * int list) list); raise Return
  with Return -> !__ret)

and decrypt cipher key =
  let __ret = ref "" in
  (try
  let plain = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (key)) do
    try
  let p = ((List.nth (cipher) (!i) - (List.nth (key) (!i) * List.nth (key) (!i))) / List.nth (key) (!i)) in
  plain := (!plain ^ chr (Obj.repr (p)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!plain) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (set_seed (Obj.repr (1)));
  let res = ref (encrypt ("Hello")) in
  let cipher = List.assoc ("cipher") (!res) in
  let key = List.assoc ("key") (!res) in
  print_endline (string_of_int cipher);
  print_endline (string_of_int key);
  print_endline ((decrypt (cipher) (key)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()