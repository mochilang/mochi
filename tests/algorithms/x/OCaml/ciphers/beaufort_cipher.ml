(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let rec index_of ch =
  let __ret = ref 0 in
  (try
  (try for i = 0 to (String.length (_alphabet) - 1) do
    try
  if (String.make 1 (String.get (_alphabet) i) = ch) then (
  __ret := (Obj.magic (i) : int); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and generate_key message key =
  let __ret = ref "" in
  (try
  let key_new = ref (key) in
  let i = ref (0) in
  (try while (String.length (!key_new) < String.length (message)) do
    try
  key_new := (!key_new ^ String.make 1 (String.get (key) !i));
  i := (!i + 1);
  if (!i = String.length (key)) then (
  i := 0;
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!key_new) : string); raise Return
  with Return -> !__ret)

and cipher_text message key_new =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try for idx = 0 to (String.length (message) - 1) do
    try
  let ch = String.make 1 (String.get (message) idx) in
  if (ch = " ") then (
  res := (!res ^ " ");
  ) else (
  let x = (((index_of (ch) - index_of (String.make 1 (String.get (key_new) !i))) + 26) mod 26) in
  i := (!i + 1);
  res := (!res ^ String.make 1 (String.get (_alphabet) x));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and original_text cipher key_new =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try for idx = 0 to (String.length (cipher) - 1) do
    try
  let ch = String.make 1 (String.get (cipher) idx) in
  if (ch = " ") then (
  res := (!res ^ " ");
  ) else (
  let x = (((index_of (ch) + index_of (String.make 1 (String.get (key_new) !i))) + 26) mod 26) in
  i := (!i + 1);
  res := (!res ^ String.make 1 (String.get (_alphabet) x));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let message = "THE GERMAN ATTACK"
let key = "SECRET"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let key_new = generate_key (message) (key) in
  let encrypted = cipher_text (message) (key_new) in
  print_endline (("Encrypted Text = " ^ encrypted));
  print_endline (("Original Text = " ^ original_text (encrypted) (key_new)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()