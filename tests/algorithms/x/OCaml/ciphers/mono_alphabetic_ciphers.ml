(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let rec find_char s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and encrypt_message key message =
  let __ret = ref "" in
  (try
  let chars_a = key in
  let chars_b = _letters in
  let translated = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let symbol = String.make 1 (String.get (message) !i) in
  let upper_sym = String.uppercase_ascii (symbol) in
  let sym_index = find_char (chars_a) (upper_sym) in
  if (sym_index >= 0) then (
  let sub_char = String.make 1 (String.get (chars_b) sym_index) in
  if (symbol = upper_sym) then (
  translated := (!translated ^ String.uppercase_ascii (sub_char));
  ) else (
  translated := (!translated ^ String.lowercase_ascii (sub_char));
  );
  ) else (
  translated := (!translated ^ symbol);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!translated) : string); raise Return
  with Return -> !__ret)

and decrypt_message key message =
  let __ret = ref "" in
  (try
  let chars_a = _letters in
  let chars_b = key in
  let translated = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let symbol = String.make 1 (String.get (message) !i) in
  let upper_sym = String.uppercase_ascii (symbol) in
  let sym_index = find_char (chars_a) (upper_sym) in
  if (sym_index >= 0) then (
  let sub_char = String.make 1 (String.get (chars_b) sym_index) in
  if (symbol = upper_sym) then (
  translated := (!translated ^ String.uppercase_ascii (sub_char));
  ) else (
  translated := (!translated ^ String.lowercase_ascii (sub_char));
  );
  ) else (
  translated := (!translated ^ symbol);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!translated) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let message = "Hello World" in
  let key = "QWERTYUIOPASDFGHJKLZXCVBNM" in
  let mode = "decrypt" in
  let translated = ref ("") in
  if (mode = "encrypt") then (
  translated := encrypt_message (key) (message);
  ) else (
  if (mode = "decrypt") then (
  translated := decrypt_message (key) (message);
  );
  );
  print_endline (((((("Using the key " ^ key) ^ ", the ") ^ mode) ^ "ed message is: ") ^ !translated));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()