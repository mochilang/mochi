(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let square = ref ([["a"; "b"; "c"; "d"; "e"]; ["f"; "g"; "h"; "i"; "k"]; ["l"; "m"; "n"; "o"; "p"]; ["q"; "r"; "s"; "t"; "u"]; ["v"; "w"; "x"; "y"; "z"]])
let rec letter_to_numbers letter =
  let __ret = ref ([] : (int) list) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (!square)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (List.nth (!square) (!i))) do
    try
  if (List.nth (List.nth (!square) (!i)) (!j) = letter) then (
  __ret := (Obj.magic ([(!i + 1); (!j + 1)]) : int list); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([0; 0]) : int list); raise Return
  with Return -> !__ret)

and numbers_to_letter index1 index2 =
  let __ret = ref "" in
  (try
  let index1 = (Obj.magic index1 : int) in
  let index2 = (Obj.magic index2 : int) in
  __ret := (Obj.magic (List.nth (List.nth (!square) ((index1 - 1))) ((index2 - 1))) : string); raise Return
  with Return -> !__ret)

and char_to_int ch =
  let __ret = ref 0 in
  (try
  if (ch = "1") then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (ch = "2") then (
  __ret := (Obj.magic (2) : int); raise Return
  );
  if (ch = "3") then (
  __ret := (Obj.magic (3) : int); raise Return
  );
  if (ch = "4") then (
  __ret := (Obj.magic (4) : int); raise Return
  );
  if (ch = "5") then (
  __ret := (Obj.magic (5) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and encode message =
  let __ret = ref "" in
  (try
  message := String.lowercase_ascii (!message);
  let encoded = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (!message)) do
    try
  let ch = ref (String.make 1 (String.get (!message) !i)) in
  if (!ch = "j") then (
  ch := "i";
  );
  if (!ch <> " ") then (
  let nums = ref (letter_to_numbers (!ch)) in
  encoded := ((!encoded ^ (string_of_int (List.nth (!nums) (0)))) ^ (string_of_int (List.nth (!nums) (1))));
  ) else (
  encoded := (!encoded ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encoded) : string); raise Return
  with Return -> !__ret)

and decode message =
  let __ret = ref "" in
  (try
  let decoded = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  if (String.make 1 (String.get (message) !i) = " ") then (
  decoded := (!decoded ^ " ");
  i := (!i + 1);
  ) else (
  let index1 = char_to_int (String.make 1 (String.get (message) !i)) in
  let index2 = char_to_int (String.make 1 (String.get (message) (!i + 1))) in
  let letter = numbers_to_letter (Obj.repr (index1)) (Obj.repr (index2)) in
  decoded := (!decoded ^ letter);
  i := (!i + 2);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!decoded) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((encode (ref ("test message"))));
  print_endline ((encode (ref ("Test Message"))));
  print_endline ((decode ("44154344 32154343112215")));
  print_endline ((decode ("4415434432154343112215")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()