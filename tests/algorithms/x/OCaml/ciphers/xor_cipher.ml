(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec xor a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let res = ref (0) in
  let bit = ref (1) in
  let x = ref (a) in
  let y = ref (b) in
  (try while ((!x > 0) || (!y > 0)) do
    try
  let abit = ((!x mod 2 + 2) mod 2) in
  let bbit = ((!y mod 2 + 2) mod 2) in
  if (abit <> bbit) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)


let ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
let rec ord ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (ascii)) do
    try
  if (String.sub (ascii) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic ((32 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and chr n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if ((n >= 32) && (n < 127)) then (
  __ret := (Obj.magic (String.sub (ascii) (n - 32) ((n - 31) - (n - 32))) : string); raise Return
  );
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and normalize_key key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  let k = ref (key) in
  if (!k = 0) then (
  k := 1;
  );
  k := ((!k mod 256 + 256) mod 256);
  if (!k < 0) then (
  k := (!k + 256);
  );
  __ret := (Obj.magic (!k) : int); raise Return
  with Return -> !__ret)

and encrypt content key =
  let __ret = ref ([] : (string) list) in
  (try
  let key = (Obj.magic key : int) in
  let k = normalize_key (Obj.repr (key)) in
  let result = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (content)) do
    try
  let c = ord (String.sub (content) !i ((!i + 1) - !i)) in
  let e = xor (Obj.repr (c)) (Obj.repr (k)) in
  result := (List.append (!result) [(Obj.magic (chr (Obj.repr (e))) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string list); raise Return
  with Return -> !__ret)

and encrypt_string content key =
  let __ret = ref "" in
  (try
  let key = (Obj.magic key : int) in
  let chars = ref (encrypt (content) (Obj.repr (key))) in
  let out = ref ("") in
  (try List.iter (fun ch ->
    try
  out := (!out ^ ch);
    with Continue -> ()) (!chars) with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)


let sample = "hallo welt"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let enc = encrypt_string (sample) (Obj.repr (1)) in
  let dec = encrypt_string (enc) (Obj.repr (1)) in
  print_endline ((__str (encrypt (sample) (Obj.repr (1)))));
  print_endline (enc);
  print_endline (dec);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()