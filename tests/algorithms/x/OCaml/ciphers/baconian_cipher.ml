(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let encode_map = ref ([("a", "AAAAA"); ("b", "AAAAB"); ("c", "AAABA"); ("d", "AAABB"); ("e", "AABAA"); ("f", "AABAB"); ("g", "AABBA"); ("h", "AABBB"); ("i", "ABAAA"); ("j", "BBBAA"); ("k", "ABAAB"); ("l", "ABABA"); ("m", "ABABB"); ("n", "ABBAA"); ("o", "ABBAB"); ("p", "ABBBA"); ("q", "ABBBB"); ("r", "BAAAA"); ("s", "BAAAB"); ("t", "BAABA"); ("u", "BAABB"); ("v", "BBBAB"); ("w", "BABAA"); ("x", "BABAB"); ("y", "BABBA"); ("z", "BABBB"); (" ", " ")])
let rec make_decode_map () =
  let __ret = ref ([] : (string * string) list) in
  (try
  let m = ref ([]) in
  (try List.iter (fun (k, _) ->
    try
  m := ((List.assoc (k) (!encode_map), k) :: List.remove_assoc (List.assoc (k) (!encode_map)) !m);
    with Continue -> ()) (!encode_map) with Break -> ());
  __ret := (Obj.magic (!m) : (string * string) list); raise Return
  with Return -> !__ret)


let decode_map = ref (make_decode_map ())
let rec split_spaces s =
  let __ret = ref ([] : (string) list) in
  (try
  let parts = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub s (!i) ((!i + 1) - !i) in
  if (ch = " ") then (
  parts := (List.append (!parts) [(Obj.magic (!current) : string)]);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  parts := (List.append (!parts) [(Obj.magic (!current) : string)]);
  __ret := (Obj.magic (!parts) : string list); raise Return
  with Return -> !__ret)

and encode word =
  let __ret = ref "" in
  (try
  let w = String.lowercase_ascii (word) in
  let encoded = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (w)) do
    try
  let ch = String.sub w (!i) ((!i + 1) - !i) in
  if (List.mem_assoc ch !encode_map) then (
  encoded := (!encoded ^ List.assoc (ch) (!encode_map));
  ) else (
  (failwith ("encode() accepts only letters of the alphabet and spaces"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encoded) : string); raise Return
  with Return -> !__ret)

and decode coded =
  let __ret = ref "" in
  (try
  let i = ref (0) in
  (try while (!i < String.length (coded)) do
    try
  let ch = String.sub coded (!i) ((!i + 1) - !i) in
  if (((ch <> "A") && (ch <> "B")) && (ch <> " ")) then (
  (failwith ("decode() accepts only 'A', 'B' and spaces"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let words = ref (split_spaces (coded)) in
  let decoded = ref ("") in
  let w = ref (0) in
  (try while (!w < List.length (!words)) do
    try
  let word = List.nth (!words) (!w) in
  let j = ref (0) in
  (try while (!j < String.length (word)) do
    try
  let segment = String.sub word (!j) ((!j + 5) - !j) in
  decoded := (!decoded ^ List.assoc (segment) (!decode_map));
  j := (!j + 5);
    with Continue -> ()
  done with Break -> ());
  if (!w < (List.length (!words) - 1)) then (
  decoded := (!decoded ^ " ");
  );
  w := (!w + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!decoded) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((encode ("hello")));
  print_endline ((encode ("hello world")));
  print_endline ((decode ("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB")));
  print_endline ((decode ("AABBBAABAAABABAABABAABBAB")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()