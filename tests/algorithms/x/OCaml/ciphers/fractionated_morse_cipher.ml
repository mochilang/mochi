(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _morse_code_dict = ref ([("A", ".-"); ("B", "-..."); ("C", "-.-."); ("D", "-.."); ("E", "."); ("F", "..-."); ("G", "--."); ("H", "...."); ("I", ".."); ("J", ".---"); ("K", "-.-"); ("L", ".-.."); ("M", "--"); ("N", "-."); ("O", "---"); ("P", ".--."); ("Q", "--.-"); ("R", ".-."); ("S", "..."); ("T", "-"); ("U", "..-"); ("V", "...-"); ("W", ".--"); ("X", "-..-"); ("Y", "-.--"); ("Z", "--.."); (" ", "")])
let _morse_combinations = ref (["..."; "..-"; "..x"; ".-."; ".--"; ".-x"; ".x."; ".x-"; ".xx"; "-.."; "-.-"; "-.x"; "--."; "---"; "--x"; "-x."; "-x-"; "-xx"; "x.."; "x.-"; "x.x"; "x-."; "x--"; "x-x"; "xx."; "xx-"; "xxx"])
let _reverse_dict = ref ([(".-", "A"); ("-...", "B"); ("-.-.", "C"); ("-..", "D"); (".", "E"); ("..-.", "F"); ("--.", "G"); ("....", "H"); ("..", "I"); (".---", "J"); ("-.-", "K"); (".-..", "L"); ("--", "M"); ("-.", "N"); ("---", "O"); (".--.", "P"); ("--.-", "Q"); (".-.", "R"); ("...", "S"); ("-", "T"); ("..-", "U"); ("...-", "V"); (".--", "W"); ("-..-", "X"); ("-.--", "Y"); ("--..", "Z"); ("", " ")])
let rec encodeToMorse plaintext =
  let __ret = ref "" in
  (try
  let morse = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (plaintext)) do
    try
  let ch = String.uppercase_ascii (String.sub (plaintext) !i ((!i + 1) - !i)) in
  let code = ref ("") in
  if (List.mem_assoc ch !_morse_code_dict) then (
  code := List.assoc (ch) (!_morse_code_dict);
  );
  if (!i > 0) then (
  morse := (!morse ^ "x");
  );
  morse := (!morse ^ !code);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!morse) : string); raise Return
  with Return -> !__ret)

and encryptFractionatedMorse plaintext key =
  let __ret = ref "" in
  (try
  let morseCode = ref (encodeToMorse (plaintext)) in
  let combinedKey = ref ((String.uppercase_ascii (key) ^ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")) in
  let dedupKey = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (!combinedKey)) do
    try
  let ch = String.sub (!combinedKey) !i ((!i + 1) - !i) in
  if not ((let len_s = String.length !dedupKey and len_sub = String.length ch in let rec aux i = if i + len_sub > len_s then false else if String.sub !dedupKey i len_sub = ch then true else aux (i + 1) in aux 0)) then (
  dedupKey := (!dedupKey ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let paddingLength = ref ((3 - (String.length (!morseCode) mod 3))) in
  let p = ref (0) in
  (try while (!p < !paddingLength) do
    try
  morseCode := (!morseCode ^ "x");
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  let dict = ref ([]) in
  let j = ref (0) in
  (try while (!j < 26) do
    try
  let combo = List.nth (!_morse_combinations) (!j) in
  let letter = String.sub (!dedupKey) !j ((!j + 1) - !j) in
  dict := ((combo, letter) :: List.remove_assoc (combo) !dict);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  dict := (("xxx", "") :: List.remove_assoc ("xxx") !dict);
  let encrypted = ref ("") in
  let k = ref (0) in
  (try while (!k < String.length (!morseCode)) do
    try
  let group = String.sub (!morseCode) !k ((!k + 3) - !k) in
  encrypted := (!encrypted ^ List.assoc (group) (!dict));
  k := (!k + 3);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encrypted) : string); raise Return
  with Return -> !__ret)

and decryptFractionatedMorse ciphertext key =
  let __ret = ref "" in
  (try
  let combinedKey = ref ((String.uppercase_ascii (key) ^ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")) in
  let dedupKey = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (!combinedKey)) do
    try
  let ch = String.sub (!combinedKey) !i ((!i + 1) - !i) in
  if not ((let len_s = String.length !dedupKey and len_sub = String.length ch in let rec aux i = if i + len_sub > len_s then false else if String.sub !dedupKey i len_sub = ch then true else aux (i + 1) in aux 0)) then (
  dedupKey := (!dedupKey ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let inv = ref ([]) in
  let j = ref (0) in
  (try while (!j < 26) do
    try
  let letter = String.sub (!dedupKey) !j ((!j + 1) - !j) in
  inv := ((letter, List.nth (!_morse_combinations) (!j)) :: List.remove_assoc (letter) !inv);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let morse = ref ("") in
  let k = ref (0) in
  (try while (!k < String.length (ciphertext)) do
    try
  let ch = String.sub (ciphertext) !k ((!k + 1) - !k) in
  if (List.mem_assoc ch !inv) then (
  morse := (!morse ^ List.assoc (ch) (!inv));
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let codes = ref (([] : (string) list)) in
  let current = ref ("") in
  let m = ref (0) in
  (try while (!m < String.length (!morse)) do
    try
  let ch = String.sub (!morse) !m ((!m + 1) - !m) in
  if (ch = "x") then (
  codes := (List.append (!codes) [(Obj.magic (!current) : string)]);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  codes := (List.append (!codes) [(Obj.magic (!current) : string)]);
  let decrypted = ref ("") in
  let idx = ref (0) in
  (try while (!idx < List.length (!codes)) do
    try
  let code = List.nth (!codes) (!idx) in
  decrypted := (!decrypted ^ List.assoc (code) (!_reverse_dict));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let start = ref (0) in
  (try while true do
    try
  if (!start < String.length (!decrypted)) then (
  if (String.sub (!decrypted) !start ((!start + 1) - !start) = " ") then (
  start := (!start + 1);
  raise Continue;
  );
  );
  raise Break;
    with Continue -> ()
  done with Break -> ());
  let end_ = ref (String.length (!decrypted)) in
  (try while true do
    try
  if (!end_ > !start) then (
  if (String.sub (!decrypted) (!end_ - 1) (!end_ - (!end_ - 1)) = " ") then (
  end_ := (!end_ - 1);
  raise Continue;
  );
  );
  raise Break;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.sub (!decrypted) !start (!end_ - !start)) : string); raise Return
  with Return -> !__ret)


let plaintext = "defend the east"
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Plain Text:");
  print_endline (plaintext);
  let key = "ROUNDTABLE" in
  let ciphertext = encryptFractionatedMorse (plaintext) (key) in
  print_endline ("Encrypted:");
  print_endline (ciphertext);
  let decrypted = decryptFractionatedMorse (ciphertext) (key) in
  print_endline ("Decrypted:");
  print_endline (decrypted);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()