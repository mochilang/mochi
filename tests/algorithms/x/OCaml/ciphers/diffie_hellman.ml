(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec int_to_hex n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let digits = "0123456789abcdef" in
  let num = ref (n) in
  let res = ref ("") in
  (try while (!num > 0) do
    try
  let d = (!num mod 16) in
  res := (String.make 1 (String.get (digits) d) ^ !res);
  num := (!num / 16);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let seed = ref (123456789)
let rec rand_int () =
  let __ret = ref 0 in
  (try
  seed := (((1103515245 * !seed) + 12345) mod 2147483648);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)


let _prime = 23
let rec mod_pow base exp =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1) in
  let b = ref ((base mod _prime)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod _prime);
  );
  b := ((!b * !b) mod _prime);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and is_valid_public_key key =
  let __ret = ref false in
  (try
  let key = (Obj.magic key : int) in
  if ((key < 2) || (key > (_prime - 2))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  __ret := (Obj.magic ((mod_pow (Obj.repr (key)) (Obj.repr (((_prime - 1) / 2))) = 1)) : bool); raise Return
  with Return -> !__ret)

and generate_private_key () =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (((rand_int () mod (_prime - 2)) + 2)) : int); raise Return
  with Return -> !__ret)


let generator = 5
let () =
  let mem_start = _mem () in
  let start = _now () in
  let alice_private = generate_private_key () in
  let alice_public = mod_pow (Obj.repr (generator)) (Obj.repr (alice_private)) in
  let bob_private = generate_private_key () in
  let bob_public = mod_pow (Obj.repr (generator)) (Obj.repr (bob_private)) in
  if not (is_valid_public_key (Obj.repr (alice_public))) then (
  (failwith ("Invalid public key"));
  );
  if not (is_valid_public_key (Obj.repr (bob_public))) then (
  (failwith ("Invalid public key"));
  );
  let alice_shared = mod_pow (Obj.repr (bob_public)) (Obj.repr (alice_private)) in
  let bob_shared = mod_pow (Obj.repr (alice_public)) (Obj.repr (bob_private)) in
  print_endline ((int_to_hex (Obj.repr (alice_shared))));
  print_endline ((int_to_hex (Obj.repr (bob_shared))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()