(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _square = ref ([["a"; "b"; "c"; "d"; "e"]; ["f"; "g"; "h"; "i"; "k"]; ["l"; "m"; "n"; "o"; "p"]; ["q"; "r"; "s"; "t"; "u"]; ["v"; "w"; "x"; "y"; "z"]])
let rec index_of s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and to_lower_without_spaces message replace_j =
  let __ret = ref "" in
  (try
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let ch = ref (String.make 1 (String.get (message) !i)) in
  let pos = index_of (upper) (!ch) in
  if (pos >= 0) then (
  ch := String.make 1 (String.get (lower) pos);
  );
  if (!ch <> " ") then (
  if (replace_j && (!ch = "j")) then (
  ch := "i";
  );
  res := (!res ^ !ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and letter_to_numbers letter =
  let __ret = ref ([] : (int) list) in
  (try
  let r = ref (0) in
  (try while (!r < List.length (!_square)) do
    try
  let c = ref (0) in
  (try while (!c < List.length (List.nth (!_square) (!r))) do
    try
  if (List.nth (List.nth (!_square) (!r)) (!c) = letter) then (
  __ret := (Obj.magic ((Obj.magic [(!r + 1); (!c + 1)] : int list)) : int list); raise Return
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((Obj.magic [0; 0] : int list)) : int list); raise Return
  with Return -> !__ret)

and numbers_to_letter row col =
  let __ret = ref "" in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  __ret := (Obj.magic (List.nth (List.nth (!_square) ((row - 1))) ((col - 1))) : string); raise Return
  with Return -> !__ret)

and encode message =
  let __ret = ref "" in
  (try
  let clean = to_lower_without_spaces (message) (true) in
  let l = String.length (clean) in
  let rows = ref ((Obj.magic [] : int list)) in
  let cols = ref ((Obj.magic [] : int list)) in
  let i = ref (0) in
  (try while (!i < l) do
    try
  let nums = ref (letter_to_numbers (String.make 1 (String.get (clean) !i))) in
  rows := (List.append (!rows) [(Obj.magic (List.nth (!nums) (0)) : int)]);
  cols := (List.append (!cols) [(Obj.magic (List.nth (!nums) (1)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let seq = ref ((Obj.magic [] : int list)) in
  i := 0;
  (try while (!i < l) do
    try
  seq := (List.append (!seq) [(Obj.magic (List.nth (!rows) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < l) do
    try
  seq := (List.append (!seq) [(Obj.magic (List.nth (!cols) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let encoded = ref ("") in
  i := 0;
  (try while (!i < l) do
    try
  let r = List.nth (!seq) ((2 * !i)) in
  let c = List.nth (!seq) (((2 * !i) + 1)) in
  encoded := (!encoded ^ numbers_to_letter (Obj.repr (r)) (Obj.repr (c)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encoded) : string); raise Return
  with Return -> !__ret)

and decode message =
  let __ret = ref "" in
  (try
  let clean = to_lower_without_spaces (message) (false) in
  let l = String.length (clean) in
  let first = ref ((Obj.magic [] : int list)) in
  let i = ref (0) in
  (try while (!i < l) do
    try
  let nums = ref (letter_to_numbers (String.make 1 (String.get (clean) !i))) in
  first := (List.append (!first) [(Obj.magic (List.nth (!nums) (0)) : int)]);
  first := (List.append (!first) [(Obj.magic (List.nth (!nums) (1)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let top = ref ((Obj.magic [] : int list)) in
  let bottom = ref ((Obj.magic [] : int list)) in
  i := 0;
  (try while (!i < l) do
    try
  top := (List.append (!top) [(Obj.magic (List.nth (!first) (!i)) : int)]);
  bottom := (List.append (!bottom) [(Obj.magic (List.nth (!first) ((!i + l))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let decoded = ref ("") in
  i := 0;
  (try while (!i < l) do
    try
  let r = List.nth (!top) (!i) in
  let c = List.nth (!bottom) (!i) in
  decoded := (!decoded ^ numbers_to_letter (Obj.repr (r)) (Obj.repr (c)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!decoded) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((encode ("testmessage")));
  print_endline ((encode ("Test Message")));
  print_endline ((encode ("test j")));
  print_endline ((encode ("test i")));
  print_endline ((decode ("qtltbdxrxlk")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()