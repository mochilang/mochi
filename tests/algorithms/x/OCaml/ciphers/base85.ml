(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let ascii85_chars = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu"
let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and ord ch =
  let __ret = ref 0 in
  (try
  let idx = (try String.index (ascii85_chars) (String.get (ch) 0) with Not_found -> -1) in
  if (idx >= 0) then (
  __ret := (Obj.magic ((33 + idx)) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and chr n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if ((n >= 33) && (n <= 117)) then (
  __ret := (Obj.magic (String.sub (ascii85_chars) (n - 33) ((n - 32) - (n - 33))) : string); raise Return
  );
  __ret := (Obj.magic ("?") : string); raise Return
  with Return -> !__ret)

and to_binary n bits =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let bits = (Obj.magic bits : int) in
  let b = ref ("") in
  let val_ = ref (n) in
  (try while (!val_ > 0) do
    try
  b := ((string_of_int ((!val_ mod 2))) ^ !b);
  val_ := (!val_ / 2);
    with Continue -> ()
  done with Break -> ());
  (try while (String.length (!b) < bits) do
    try
  b := ("0" ^ !b);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!b) = 0) then (
  b := "0";
  );
  __ret := (Obj.magic (!b) : string); raise Return
  with Return -> !__ret)

and bin_to_int bits =
  let __ret = ref 0 in
  (try
  let n = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (bits)) do
    try
  if (String.make 1 (String.get (bits) !i) = "1") then (
  n := ((!n * 2) + 1);
  ) else (
  n := (!n * 2);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and reverse s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref ((String.length (s) - 1)) in
  (try while (!i >= 0) do
    try
  res := (!res ^ String.make 1 (String.get (s) !i));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and base10_to_85 d =
  let __ret = ref "" in
  (try
  let d = (Obj.magic d : int) in
  if (d > 0) then (
  __ret := (Obj.magic ((chr (Obj.repr (((d mod 85) + 33))) ^ base10_to_85 (Obj.repr ((d / 85))))) : string); raise Return
  );
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and base85_to_10 digits =
  let __ret = ref 0 in
  (try
  let value = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (digits)) do
    try
  value := ((!value * 85) + (ord (String.make 1 (String.get (digits) !i)) - 33));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : int); raise Return
  with Return -> !__ret)

and ascii85_encode data =
  let __ret = ref "" in
  (try
  let binary_data = ref ("") in
  (try List.iter (fun ch ->
    try
  binary_data := (!binary_data ^ to_binary (Obj.repr (ord (ch))) (Obj.repr (8)));
    with Continue -> ()) (List.of_seq (Seq.map (fun c -> String.make 1 c) (String.to_seq data))) with Break -> ());
  let null_values = ref ((((32 * ((String.length (!binary_data) / 32) + 1)) - String.length (!binary_data)) / 8)) in
  let total_bits = ref ((32 * ((String.length (!binary_data) / 32) + 1))) in
  (try while (String.length (!binary_data) < !total_bits) do
    try
  binary_data := (!binary_data ^ "0");
    with Continue -> ()
  done with Break -> ());
  let result = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (!binary_data)) do
    try
  let chunk_bits = String.sub (!binary_data) !i ((!i + 32) - !i) in
  let chunk_val = bin_to_int (chunk_bits) in
  let encoded = reverse (base10_to_85 (Obj.repr (chunk_val))) in
  result := (!result ^ encoded);
  i := (!i + 32);
    with Continue -> ()
  done with Break -> ());
  if ((!null_values mod 4) <> 0) then (
  result := String.sub (!result) 0 ((String.length (!result) - !null_values) - 0);
  );
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and ascii85_decode data =
  let __ret = ref "" in
  (try
  let null_values = ref (((5 * ((String.length (data) / 5) + 1)) - String.length (data))) in
  let binary_data = ref (data) in
  let i = ref (0) in
  (try while (!i < !null_values) do
    try
  binary_data := (!binary_data ^ "u");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref ("") in
  i := 0;
  (try while (!i < String.length (!binary_data)) do
    try
  let chunk = String.sub (!binary_data) !i ((!i + 5) - !i) in
  let value = base85_to_10 (chunk) in
  let bits = to_binary (Obj.repr (value)) (Obj.repr (32)) in
  let j = ref (0) in
  (try while (!j < 32) do
    try
  let byte_bits = String.sub (bits) !j ((!j + 8) - !j) in
  let c = chr (Obj.repr (bin_to_int (byte_bits))) in
  result := (!result ^ c);
  j := (!j + 8);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 5);
    with Continue -> ()
  done with Break -> ());
  let trim = ref (!null_values) in
  if ((!null_values mod 5) = 0) then (
  trim := (!null_values - 1);
  );
  __ret := (Obj.magic (String.sub (!result) 0 ((String.length (!result) - !trim) - 0)) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((ascii85_encode ("")));
  print_endline ((ascii85_encode ("12345")));
  print_endline ((ascii85_encode ("base 85")));
  print_endline ((ascii85_decode ("")));
  print_endline ((ascii85_decode ("0etOA2#")));
  print_endline ((ascii85_decode ("@UX=h+?24")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()