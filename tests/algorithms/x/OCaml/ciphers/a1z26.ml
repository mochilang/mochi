(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and charToNum ch =
  let __ret = ref 0 in
  (try
  let letters = "abcdefghijklmnopqrstuvwxyz" in
  let idx = (try String.index (letters) (String.get (ch) 0) with Not_found -> -1) in
  if (idx >= 0) then (
  __ret := (Obj.magic ((idx + 1)) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and numToChar n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let letters = "abcdefghijklmnopqrstuvwxyz" in
  if ((n >= 1) && (n <= 26)) then (
  __ret := (Obj.magic (String.sub letters ((n - 1)) (n - (n - 1))) : string); raise Return
  );
  __ret := (Obj.magic ("?") : string); raise Return
  with Return -> !__ret)

and encode plain =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (plain)) do
    try
  let ch = String.lowercase_ascii (String.sub plain (!i) ((!i + 1) - !i)) in
  let val_ = charToNum (ch) in
  if (val_ > 0) then (
  res := (List.append (!res) [(Obj.magic (val_) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and decode encoded =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  (try List.iter (fun n ->
    try
  out := (!out ^ numToChar (Obj.repr (n)));
    with Continue -> ()) (encoded) with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("-> ");
  let text = String.lowercase_ascii ((try read_line () with End_of_file -> "")) in
  let enc = ref (encode (text)) in
  print_endline (("Encoded: " ^ (__str (!enc))));
  print_endline (("Decoded: " ^ decode (!enc)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()