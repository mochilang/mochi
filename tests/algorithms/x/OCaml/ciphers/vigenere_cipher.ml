(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let _letters_lower = "abcdefghijklmnopqrstuvwxyz"
let rec find_index s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.make 1 (String.get (s) !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and to_upper_char ch =
  let __ret = ref "" in
  (try
  let idx = find_index (_letters_lower) (ch) in
  if (idx >= 0) then (
  __ret := (Obj.magic (String.make 1 (String.get (_letters) idx)) : string); raise Return
  );
  __ret := (Obj.magic (ch) : string); raise Return
  with Return -> !__ret)

and to_lower_char ch =
  let __ret = ref "" in
  (try
  let idx = find_index (_letters) (ch) in
  if (idx >= 0) then (
  __ret := (Obj.magic (String.make 1 (String.get (_letters_lower) idx)) : string); raise Return
  );
  __ret := (Obj.magic (ch) : string); raise Return
  with Return -> !__ret)

and is_upper ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((find_index (_letters) (ch) >= 0)) : bool); raise Return
  with Return -> !__ret)

and to_upper_string s =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  res := (!res ^ to_upper_char (String.make 1 (String.get (s) !i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let key = "HDarji"
let message = "This is Harshil Darji from Dharmaj."
let () =
  let mem_start = _mem () in
  let start = _now () in
  let key_up = to_upper_string (key) in
  let encrypted = ref ("") in
  let key_index = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let symbol = String.make 1 (String.get (message) !i) in
  let upper_symbol = to_upper_char (symbol) in
  let num = ref (find_index (_letters) (upper_symbol)) in
  if (!num >= 0) then (
  num := (!num + find_index (_letters) (String.make 1 (String.get (key_up) !key_index)));
  num := ((!num mod String.length (_letters) + String.length (_letters)) mod String.length (_letters));
  if is_upper (symbol) then (
  encrypted := (!encrypted ^ String.make 1 (String.get (_letters) !num));
  ) else (
  encrypted := (!encrypted ^ to_lower_char (String.make 1 (String.get (_letters) !num)));
  );
  key_index := (!key_index + 1);
  if (!key_index = String.length (key_up)) then (
  key_index := 0;
  );
  ) else (
  encrypted := (!encrypted ^ symbol);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!encrypted);
  let decrypted = ref ("") in
  key_index := 0;
  i := 0;
  (try while (!i < String.length (!encrypted)) do
    try
  let symbol = String.make 1 (String.get (!encrypted) !i) in
  let upper_symbol = to_upper_char (symbol) in
  let num = ref (find_index (_letters) (upper_symbol)) in
  if (!num >= 0) then (
  num := (!num - find_index (_letters) (String.make 1 (String.get (key_up) !key_index)));
  num := ((!num mod String.length (_letters) + String.length (_letters)) mod String.length (_letters));
  if is_upper (symbol) then (
  decrypted := (!decrypted ^ String.make 1 (String.get (_letters) !num));
  ) else (
  decrypted := (!decrypted ^ to_lower_char (String.make 1 (String.get (_letters) !num)));
  );
  key_index := (!key_index + 1);
  if (!key_index = String.length (key_up)) then (
  key_index := 0;
  );
  ) else (
  decrypted := (!decrypted ^ symbol);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!decrypted);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()