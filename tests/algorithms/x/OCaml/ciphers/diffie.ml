(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec mod_pow base exp mod_ =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let mod_ = (Obj.magic mod_ : int) in
  let result = ref (1) in
  let b = ref ((base mod mod_)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod mod_);
  );
  e := (!e / 2);
  b := ((!b * !b) mod mod_);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and contains xs val_ =
  let __ret = ref false in
  (try
  let val_ = (Obj.magic val_ : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = val_) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and find_primitive modulus =
  let __ret = ref 0 in
  (try
  let modulus = (Obj.magic modulus : int) in
  let r = ref (1) in
  (try while (!r < modulus) do
    try
  let li = ref (([] : (int) list)) in
  let x = ref (0) in
  let valid = ref (true) in
  (try while ((!x < (modulus - 1)) && !valid) do
    try
  let value = mod_pow (Obj.repr (!r)) (Obj.repr (!x)) (Obj.repr (modulus)) in
  if contains (!li) (Obj.repr (value)) then (
  valid := false;
  ) else (
  li := (List.append (!li) [(Obj.magic (value) : int)]);
  x := (!x + 1);
  );
    with Continue -> ()
  done with Break -> ());
  if !valid then (
  __ret := (Obj.magic (!r) : int); raise Return
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (find_primitive (Obj.repr (7))));
  print_endline (string_of_int (find_primitive (Obj.repr (11))));
  print_endline (string_of_int (find_primitive (Obj.repr (8))));
  let prime = 23 in
  let primitive_root = find_primitive (Obj.repr (prime)) in
  if (primitive_root = (0 - 1)) then (
  print_endline ("Cannot find the primitive for the value: -1");
  ) else (
  let a_private = 6 in
  let b_private = 15 in
  let a_public = mod_pow (Obj.repr (primitive_root)) (Obj.repr (a_private)) (Obj.repr (prime)) in
  let b_public = mod_pow (Obj.repr (primitive_root)) (Obj.repr (b_private)) (Obj.repr (prime)) in
  let a_secret = mod_pow (Obj.repr (b_public)) (Obj.repr (a_private)) (Obj.repr (prime)) in
  let b_secret = mod_pow (Obj.repr (a_public)) (Obj.repr (b_private)) (Obj.repr (prime)) in
  print_endline (("The key value generated by A is: " ^ (string_of_int (a_secret))));
  print_endline (("The key value generated by B is: " ^ (string_of_int (b_secret))));
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()