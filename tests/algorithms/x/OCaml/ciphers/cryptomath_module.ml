(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:55 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (if (a < 0) then -(a) else a) in
  let y = ref (if (b < 0) then -(b) else b) in
  (try while (!y <> 0) do
    try
  let t = (!x mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and find_mod_inverse a m =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let m = (Obj.magic m : int) in
  if (gcd (Obj.repr (a)) (Obj.repr (m)) <> 1) then (
  (failwith ((((("mod inverse of " ^ (string_of_int (a))) ^ " and ") ^ (string_of_int (m))) ^ " does not exist")));
  );
  let u1 = ref (1) in
  let u2 = ref (0) in
  let u3 = ref (a) in
  let v1 = ref (0) in
  let v2 = ref (1) in
  let v3 = ref (m) in
  (try while (!v3 <> 0) do
    try
  let q = (!u3 / !v3) in
  let t1 = (!u1 - (q * !v1)) in
  let t2 = (!u2 - (q * !v2)) in
  let t3 = (!u3 - (q * !v3)) in
  u1 := !v1;
  u2 := !v2;
  u3 := !v3;
  v1 := t1;
  v2 := t2;
  v3 := t3;
    with Continue -> ()
  done with Break -> ());
  let res = ref ((!u1 mod m)) in
  if (!res < 0) then (
  res := (!res + m);
  );
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (find_mod_inverse (Obj.repr (3)) (Obj.repr (11)))));
  print_endline ((string_of_int (find_mod_inverse (Obj.repr (7)) (Obj.repr (26)))));
  print_endline ((string_of_int (find_mod_inverse (Obj.repr (11)) (Obj.repr (26)))));
  print_endline ((string_of_int (find_mod_inverse (Obj.repr (17)) (Obj.repr (43)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()