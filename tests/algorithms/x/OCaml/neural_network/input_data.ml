(* Generated by Mochi transpiler v0.10.73 on 2025-08-26 08:36 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec dense_to_one_hot labels num_classes =
  let __ret = ref ([] : (int list) list) in
  (try
  let labels = (Obj.magic labels : int list) in
  let num_classes = (Obj.magic num_classes : int) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (labels)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < num_classes) do
    try
  if (!j = (let __l = labels in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (1) : int)])) : int list);
  ) else (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0) : int)])) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : int list)])) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and new_dataset images labels =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let images = (Obj.magic images : int list list) in
  let labels = (Obj.magic labels : int list list) in
  __ret := (Obj.magic ([(__str (Obj.repr ("images")), Obj.repr (images)); (__str (Obj.repr ("labels")), Obj.repr (labels)); (__str (Obj.repr ("num_examples")), Obj.repr (List.length (images))); (__str (Obj.repr ("index_in_epoch")), Obj.repr (0)); (__str (Obj.repr ("epochs_completed")), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and next_batch ds batch_size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let ds = (Obj.magic ds : (string * Obj.t) list) in
  let batch_size = (Obj.magic batch_size : int) in
  let start = (match List.assoc_opt (__str (Obj.repr ("index_in_epoch"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0) in
  if ((start + batch_size) > (match List.assoc_opt (__str (Obj.repr ("num_examples"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0)) then (
  let rest = ((match List.assoc_opt (__str (Obj.repr ("num_examples"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0) - start) in
  let images_rest = ref (List.of_seq (Seq.take ((match List.assoc_opt (__str (Obj.repr ("num_examples"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0) - start) (Seq.drop start (List.to_seq ((match List.assoc_opt (__str (Obj.repr ("images"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> [])))))) in
  let labels_rest = ref (List.of_seq (Seq.take ((match List.assoc_opt (__str (Obj.repr ("num_examples"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0) - start) (Seq.drop start (List.to_seq ((match List.assoc_opt (__str (Obj.repr ("labels"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> [])))))) in
  let new_index = (batch_size - rest) in
  let images_new = ref (List.of_seq (Seq.take (new_index - 0) (Seq.drop 0 (List.to_seq ((match List.assoc_opt (__str (Obj.repr ("images"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> [])))))) in
  let labels_new = ref (List.of_seq (Seq.take (new_index - 0) (Seq.drop 0 (List.to_seq ((match List.assoc_opt (__str (Obj.repr ("labels"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> [])))))) in
  let batch_images = ref ((!images_rest @ !images_new)) in
  let batch_labels = ref ((!labels_rest @ !labels_new)) in
  let new_ds = ref ([(__str (Obj.repr ("images")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("images"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> []))); (__str (Obj.repr ("labels")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("labels"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> []))); (__str (Obj.repr ("num_examples")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("num_examples"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("index_in_epoch")), Obj.repr (new_index)); (__str (Obj.repr ("epochs_completed")), Obj.repr (((match List.assoc_opt (__str (Obj.repr ("epochs_completed"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0) + 1)))]) in
  __ret := (Obj.magic ([(__str (Obj.repr ("dataset")), Obj.repr (!new_ds)); (__str (Obj.repr ("images")), Obj.repr (!batch_images)); (__str (Obj.repr ("labels")), Obj.repr (!batch_labels))]) : (string * Obj.t) list); raise Return
  ) else (
  let end_ = (start + batch_size) in
  let batch_images = ref (List.of_seq (Seq.take (end_ - start) (Seq.drop start (List.to_seq ((match List.assoc_opt (__str (Obj.repr ("images"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> [])))))) in
  let batch_labels = ref (List.of_seq (Seq.take (end_ - start) (Seq.drop start (List.to_seq ((match List.assoc_opt (__str (Obj.repr ("labels"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> [])))))) in
  let new_ds = ref ([(__str (Obj.repr ("images")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("images"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> []))); (__str (Obj.repr ("labels")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("labels"))) (ds) with Some v -> (Obj.magic v : int list list) | None -> []))); (__str (Obj.repr ("num_examples")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("num_examples"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0))); (__str (Obj.repr ("index_in_epoch")), Obj.repr (end_)); (__str (Obj.repr ("epochs_completed")), Obj.repr ((match List.assoc_opt (__str (Obj.repr ("epochs_completed"))) (ds) with Some v -> (Obj.magic v : int) | None -> 0)))]) in
  __ret := (Obj.magic ([(__str (Obj.repr ("dataset")), Obj.repr (!new_ds)); (__str (Obj.repr ("images")), Obj.repr (!batch_images)); (__str (Obj.repr ("labels")), Obj.repr (!batch_labels))]) : (string * Obj.t) list); raise Return
  );
    !__ret
  with Return -> !__ret)

and read_data_sets train_images train_labels_raw test_images test_labels_raw validation_size num_classes =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let train_images = (Obj.magic train_images : int list list) in
  let train_labels_raw = (Obj.magic train_labels_raw : int list) in
  let test_images = (Obj.magic test_images : int list list) in
  let test_labels_raw = (Obj.magic test_labels_raw : int list) in
  let validation_size = (Obj.magic validation_size : int) in
  let num_classes = (Obj.magic num_classes : int) in
  let train_labels = ref (dense_to_one_hot (train_labels_raw) (Obj.repr (num_classes))) in
  let test_labels = ref (dense_to_one_hot (test_labels_raw) (Obj.repr (num_classes))) in
  let validation_images = ref (List.of_seq (Seq.take (validation_size - 0) (Seq.drop 0 (List.to_seq (train_images))))) in
  let validation_labels = ref (List.of_seq (Seq.take (validation_size - 0) (Seq.drop 0 (List.to_seq (!train_labels))))) in
  let train_images_rest = ref (List.of_seq (Seq.take (List.length (train_images) - validation_size) (Seq.drop validation_size (List.to_seq (train_images))))) in
  let train_labels_rest = ref (List.of_seq (Seq.take (List.length (!train_labels) - validation_size) (Seq.drop validation_size (List.to_seq (!train_labels))))) in
  let train = ref (new_dataset (!train_images_rest) (!train_labels_rest)) in
  let validation = ref (new_dataset (!validation_images) (!validation_labels)) in
  let testset = ref (new_dataset (test_images) (!test_labels)) in
  __ret := (Obj.magic ([(__str (Obj.repr ("train")), Obj.repr (!train)); (__str (Obj.repr ("validation")), Obj.repr (!validation)); (__str (Obj.repr ("test_ds")), Obj.repr (!testset))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let train_images = ref ([[0; 1]; [1; 2]; [2; 3]; [3; 4]; [4; 5]]) in
  let train_labels_raw = ref ([0; 1; 2; 3; 4]) in
  let test_images = ref ([[5; 6]; [6; 7]]) in
  let test_labels_raw = ref ([5; 6]) in
  let data = ref (read_data_sets (!train_images) (!train_labels_raw) (!test_images) (!test_labels_raw) (Obj.repr (2)) (Obj.repr (10))) in
  let ds = ref ((match List.assoc_opt (__str (Obj.repr ("train"))) (!data) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> [])) in
  let res = ref (next_batch ((Obj.magic (!ds) : (string * Obj.t) list)) (Obj.repr (2))) in
  ds := (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("dataset"))) (!res) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> [])) : (string * Obj.t) list);
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("images"))) (!res) with Some v -> (Obj.magic v : int list list) | None -> [])) : Obj.t)));
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("labels"))) (!res) with Some v -> (Obj.magic v : int list list) | None -> [])) : Obj.t)));
  res := next_batch ((Obj.magic (!ds) : (string * Obj.t) list)) (Obj.repr (2));
  ds := (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("dataset"))) (!res) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> [])) : (string * Obj.t) list);
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("images"))) (!res) with Some v -> (Obj.magic v : int list list) | None -> [])) : Obj.t)));
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("labels"))) (!res) with Some v -> (Obj.magic v : int list list) | None -> [])) : Obj.t)));
  res := next_batch ((Obj.magic (!ds) : (string * Obj.t) list)) (Obj.repr (2));
  ds := (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("dataset"))) (!res) with Some v -> (Obj.magic v : ( string * Obj.t ) list) | None -> [])) : (string * Obj.t) list);
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("images"))) (!res) with Some v -> (Obj.magic v : int list list) | None -> [])) : Obj.t)));
  print_endline ((__str (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("labels"))) (!res) with Some v -> (Obj.magic v : int list list) | None -> [])) : Obj.t)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
