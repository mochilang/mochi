(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec random () =
  let __ret = ref 0.0 in
  (try
  seed := ((((!seed * 13) + 7) mod 100 + 100) mod 100);
  __ret := (Obj.magic ((float_of_int (!seed) /. 100.0)) : float); raise Return
  with Return -> !__ret)

and sigmoid x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((1.0 /. (1.0 +. exp (Obj.repr ((-.(x))))))) : float); raise Return
  with Return -> !__ret)

and to_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic ((float_of_int (x) *. 1.0)) : float); raise Return
  with Return -> !__ret)

and exp x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n < 20) do
    try
  term := ((!term *. x) /. float_of_int (!n));
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and convolve data kernel step bias =
  let __ret = ref ([] : (float list) list) in
  (try
  let data = (Obj.magic data : float list list) in
  let kernel = (Obj.magic kernel : float list list) in
  let step = (Obj.magic step : int) in
  let bias = (Obj.magic bias : float) in
  let size_data = List.length (data) in
  let size_kernel = List.length (kernel) in
  let out = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i <= (size_data - size_kernel)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j <= (size_data - size_kernel)) do
    try
  let sum = ref (0.0) in
  let a = ref (0) in
  (try while (!a < size_kernel) do
    try
  let b = ref (0) in
  (try while (!b < size_kernel) do
    try
  sum := (!sum +. ((let __l = (let __l = data in let __i = (!i + !a) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!j + !b) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = kernel in let __i = !a in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !b in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic (List.append (!row) [(Obj.magic (sigmoid (Obj.repr ((!sum -. bias)))) : float)]) : float list);
  j := (!j + step);
    with Continue -> ()
  done with Break -> ());
  out := (Obj.magic (List.append (!out) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + step);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and average_pool map size =
  let __ret = ref ([] : (float list) list) in
  (try
  let map = (Obj.magic map : float list list) in
  let size = (Obj.magic size : int) in
  let out = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (map)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = map in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  let sum = ref (0.0) in
  let a = ref (0) in
  (try while (!a < size) do
    try
  let b = ref (0) in
  (try while (!b < size) do
    try
  sum := (!sum +. (let __l = (let __l = map in let __i = (!i + !a) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!j + !b) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic (List.append (!row) [(Obj.magic ((!sum /. float_of_int ((size * size)))) : float)]) : float list);
  j := (!j + size);
    with Continue -> ()
  done with Break -> ());
  out := (Obj.magic (List.append (!out) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + size);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and flatten maps =
  let __ret = ref ([] : (float) list) in
  (try
  let maps = (Obj.magic maps : float list list list) in
  let out = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (maps)) do
    try
  let j = ref (0) in
  (try while (!j < List.length ((let __l = maps in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  let k = ref (0) in
  (try while (!k < List.length ((let __l = (let __l = maps in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  out := (Obj.magic (List.append (!out) [(Obj.magic ((let __l = (let __l = (let __l = maps in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list); raise Return
  with Return -> !__ret)

and vec_mul_mat v m =
  let __ret = ref ([] : (float) list) in
  (try
  let v = (Obj.magic v : float list) in
  let m = (Obj.magic m : float list list) in
  let cols = ref (List.length ((let __l = m in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  let res = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < !cols) do
    try
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (v)) do
    try
  sum := (!sum +. ((let __l = v in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = m in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (!sum) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and matT_vec_mul m v =
  let __ret = ref ([] : (float) list) in
  (try
  let m = (Obj.magic m : float list list) in
  let v = (Obj.magic v : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  let sum = ref (0.0) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = m in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  sum := (!sum +. ((let __l = (let __l = m in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = v in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (!sum) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and vec_add a b =
  let __ret = ref ([] : (float) list) in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and vec_sub a b =
  let __ret = ref ([] : (float) list) in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and vec_mul a b =
  let __ret = ref ([] : (float) list) in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and vec_map_sig v =
  let __ret = ref ([] : (float) list) in
  (try
  let v = (Obj.magic v : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (v)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (sigmoid (Obj.repr ((let __l = v in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and new_cnn () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let k1 = ref ([[1.0; 0.0]; [0.0; 1.0]]) in
  let k2 = ref ([[0.0; 1.0]; [1.0; 0.0]]) in
  let conv_kernels = ref ([!k1; !k2]) in
  let conv_bias = ref ([0.0; 0.0]) in
  let conv_step = 2 in
  let pool_size = 2 in
  let input_size = 2 in
  let hidden_size = 2 in
  let output_size = 2 in
  let w_hidden = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < input_size) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < hidden_size) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((random () -. 0.5)) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  w_hidden := (Obj.magic (List.append (!w_hidden) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let w_out = ref (([] : (float list) list)) in
  i := 0;
  (try while (!i < hidden_size) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < output_size) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((random () -. 0.5)) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  w_out := (Obj.magic (List.append (!w_out) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let b_hidden = ref ([0.0; 0.0]) in
  let b_out = ref ([0.0; 0.0]) in
  __ret := (Obj.magic ([(__str ("conv_kernels"), Obj.repr (!conv_kernels)); (__str ("conv_bias"), Obj.repr (!conv_bias)); (__str ("conv_step"), Obj.repr (conv_step)); (__str ("pool_size"), Obj.repr (pool_size)); (__str ("w_hidden"), Obj.repr (!w_hidden)); (__str ("w_out"), Obj.repr (!w_out)); (__str ("b_hidden"), Obj.repr (!b_hidden)); (__str ("b_out"), Obj.repr (!b_out)); (__str ("rate_weight"), Obj.repr (0.2)); (__str ("rate_bias"), Obj.repr (0.2))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and forward cnn data =
  let __ret = ref ([] : (float) list) in
  (try
  let cnn = (Obj.magic cnn : (string * Obj.t) list) in
  let data = (Obj.magic data : float list list) in
  let maps = ref (([] : (float list list) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("conv_kernels")) (cnn) : Obj.t) : float list list list))) do
    try
  let conv_map = ref (convolve (data) ((let __l = (Obj.obj (List.assoc (__str ("conv_kernels")) (cnn) : Obj.t) : float list list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) (Obj.repr ((Obj.obj (List.assoc (__str ("conv_step")) (cnn) : Obj.t) : int))) (Obj.repr ((let __l = (Obj.obj (List.assoc (__str ("conv_bias")) (cnn) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  let pooled = ref (average_pool (!conv_map) (Obj.repr ((Obj.obj (List.assoc (__str ("pool_size")) (cnn) : Obj.t) : int)))) in
  maps := (Obj.magic (List.append (!maps) [(Obj.magic (!pooled) : float list list)]) : float list list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let flat = ref (flatten (!maps)) in
  let hidden_net = ref (vec_add (vec_mul_mat (!flat) ((Obj.obj (List.assoc (__str ("w_hidden")) (cnn) : Obj.t) : float list list))) ((Obj.obj (List.assoc (__str ("b_hidden")) (cnn) : Obj.t) : float list))) in
  let hidden_out = ref (vec_map_sig (!hidden_net)) in
  let out_net = ref (vec_add (vec_mul_mat (!hidden_out) ((Obj.obj (List.assoc (__str ("w_out")) (cnn) : Obj.t) : float list list))) ((Obj.obj (List.assoc (__str ("b_out")) (cnn) : Obj.t) : float list))) in
  let out = ref (vec_map_sig (!out_net)) in
  __ret := (Obj.magic (!out) : float list); raise Return
  with Return -> !__ret)

and train cnn samples epochs =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cnn = (Obj.magic cnn : (string * Obj.t) list) in
  let samples = (Obj.magic samples : (string * Obj.t) list list) in
  let epochs = (Obj.magic epochs : int) in
  let w_out = ref ((Obj.obj (List.assoc (__str ("w_out")) (cnn) : Obj.t) : float list list)) in
  let b_out = ref ((Obj.obj (List.assoc (__str ("b_out")) (cnn) : Obj.t) : float list)) in
  let w_hidden = ref ((Obj.obj (List.assoc (__str ("w_hidden")) (cnn) : Obj.t) : float list list)) in
  let b_hidden = ref ((Obj.obj (List.assoc (__str ("b_hidden")) (cnn) : Obj.t) : float list)) in
  let e = ref (0) in
  (try while (!e < epochs) do
    try
  let s = ref (0) in
  (try while (!s < List.length (samples)) do
    try
  let data = ref ((Obj.obj (List.assoc (__str ("image")) ((let __l = samples in let __i = !s in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : Obj.t) : float list list)) in
  let target = ref ((Obj.obj (List.assoc (__str ("target")) ((let __l = samples in let __i = !s in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : Obj.t) : float list)) in
  let maps = ref (([] : (float list list) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("conv_kernels")) (cnn) : Obj.t) : float list list list))) do
    try
  let conv_map = ref (convolve (!data) ((let __l = (Obj.obj (List.assoc (__str ("conv_kernels")) (cnn) : Obj.t) : float list list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) (Obj.repr ((Obj.obj (List.assoc (__str ("conv_step")) (cnn) : Obj.t) : int))) (Obj.repr ((let __l = (Obj.obj (List.assoc (__str ("conv_bias")) (cnn) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  let pooled = ref (average_pool (!conv_map) (Obj.repr ((Obj.obj (List.assoc (__str ("pool_size")) (cnn) : Obj.t) : int)))) in
  maps := (Obj.magic (List.append (!maps) [(Obj.magic (!pooled) : float list list)]) : float list list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let flat = ref (flatten (!maps)) in
  let hidden_net = ref (vec_add (vec_mul_mat (!flat) (!w_hidden)) (!b_hidden)) in
  let hidden_out = ref (vec_map_sig (!hidden_net)) in
  let out_net = ref (vec_add (vec_mul_mat (!hidden_out) (!w_out)) (!b_out)) in
  let out = ref (vec_map_sig (!out_net)) in
  let error_out = ref (vec_sub (!target) (!out)) in
  let pd_out = ref (vec_mul (!error_out) (vec_mul (!out) (vec_sub ([1.0; 1.0]) (!out)))) in
  let error_hidden = ref (matT_vec_mul (!w_out) (!pd_out)) in
  let pd_hidden = ref (vec_mul (!error_hidden) (vec_mul (!hidden_out) (vec_sub ([1.0; 1.0]) (!hidden_out)))) in
  let j = ref (0) in
  (try while (!j < List.length (!w_out)) do
    try
  let k = ref (0) in
  (try while (!k < List.length ((let __l = !w_out in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  w_out := (List.mapi (fun __i __x -> if __i = !j then (List.mapi (fun __i __x -> if __i = !k then ((let __l = (let __l = !w_out in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (((Obj.obj (List.assoc (__str ("rate_weight")) (cnn) : Obj.t) : float) *. (let __l = !hidden_out in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) *. (let __l = !pd_out in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) ((let __l = !w_out in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!w_out));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  j := 0;
  (try while (!j < List.length (!b_out)) do
    try
  b_out := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !b_out in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. ((Obj.obj (List.assoc (__str ("rate_bias")) (cnn) : Obj.t) : float) *. (let __l = !pd_out in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!b_out));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let i_h = ref (0) in
  (try while (!i_h < List.length (!w_hidden)) do
    try
  let j_h = ref (0) in
  (try while (!j_h < List.length ((let __l = !w_hidden in let __i = !i_h in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  w_hidden := (List.mapi (fun __i __x -> if __i = !i_h then (List.mapi (fun __i __x -> if __i = !j_h then ((let __l = (let __l = !w_hidden in let __i = !i_h in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j_h in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (((Obj.obj (List.assoc (__str ("rate_weight")) (cnn) : Obj.t) : float) *. (let __l = !flat in let __i = !i_h in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) *. (let __l = !pd_hidden in let __i = !j_h in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) ((let __l = !w_hidden in let __i = !i_h in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!w_hidden));
  j_h := (!j_h + 1);
    with Continue -> ()
  done with Break -> ());
  i_h := (!i_h + 1);
    with Continue -> ()
  done with Break -> ());
  j := 0;
  (try while (!j < List.length (!b_hidden)) do
    try
  b_hidden := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !b_hidden in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. ((Obj.obj (List.assoc (__str ("rate_bias")) (cnn) : Obj.t) : float) *. (let __l = !pd_hidden in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!b_hidden));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  e := (!e + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("conv_kernels"), Obj.repr ((Obj.obj (List.assoc (__str ("conv_kernels")) (cnn) : Obj.t) : float list list list))); (__str ("conv_bias"), Obj.repr ((Obj.obj (List.assoc (__str ("conv_bias")) (cnn) : Obj.t) : float list))); (__str ("conv_step"), Obj.repr ((Obj.obj (List.assoc (__str ("conv_step")) (cnn) : Obj.t) : int))); (__str ("pool_size"), Obj.repr ((Obj.obj (List.assoc (__str ("pool_size")) (cnn) : Obj.t) : int))); (__str ("w_hidden"), Obj.repr (!w_hidden)); (__str ("w_out"), Obj.repr (!w_out)); (__str ("b_hidden"), Obj.repr (!b_hidden)); (__str ("b_out"), Obj.repr (!b_out)); (__str ("rate_weight"), Obj.repr ((Obj.obj (List.assoc (__str ("rate_weight")) (cnn) : Obj.t) : float))); (__str ("rate_bias"), Obj.repr ((Obj.obj (List.assoc (__str ("rate_bias")) (cnn) : Obj.t) : float)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let cnn = new_cnn () in
  let image = ref ([[1.0; 0.0; 1.0; 0.0]; [0.0; 1.0; 0.0; 1.0]; [1.0; 0.0; 1.0; 0.0]; [0.0; 1.0; 0.0; 1.0]]) in
  let sample = [(__str ("image"), Obj.repr (!image)); (__str ("target"), Obj.repr ([1.0; 0.0]))] in
  print_endline ("Before training:");
  print_endline (__show_list (forward (cnn) (!image)));
  let trained = train (cnn) ((Obj.magic [sample] : (string * Obj.t) list list)) (Obj.repr (50)) in
  print_endline ("After training:");
  print_endline (__show_list (forward (trained) (!image)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
