(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec exp_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let sum = ref (1.0) in
  let term = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  term := ((!term *. x) /. float_of_int (!i));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and sigmoid x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((1.0 /. (1.0 +. exp_approx (Obj.repr ((-.(x))))))) : float); raise Return
  with Return -> !__ret)

and sigmoid_derivative x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((x *. (1.0 -. x))) : float); raise Return
  with Return -> !__ret)

and new_network () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("w1"), Obj.repr ([[0.1; 0.2; 0.3; 0.4]; [0.5; 0.6; 0.7; 0.8]; [0.9; 1.0; 1.1; 1.2]])); (__str ("w2"), Obj.repr ([[0.1; 0.2; 0.3]; [0.4; 0.5; 0.6]; [0.7; 0.8; 0.9]; [1.0; 1.1; 1.2]])); (__str ("w3"), Obj.repr ([[0.1]; [0.2]; [0.3]]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and feedforward net input =
  let __ret = ref 0.0 in
  (try
  let net = (Obj.magic net : (string * Obj.t) list) in
  let input = (Obj.magic input : float list) in
  let hidden1 = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < 4) do
    try
  let sum1 = ref (0.0) in
  let i = ref (0) in
  (try while (!i < 3) do
    try
  sum1 := (!sum1 +. ((let __l = input in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("w1")) (net) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  hidden1 := (Obj.magic (List.append (!hidden1) [(Obj.magic (sigmoid (Obj.repr (!sum1))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let hidden2 = ref (([] : (float) list)) in
  let k = ref (0) in
  (try while (!k < 3) do
    try
  let sum2 = ref (0.0) in
  let j2 = ref (0) in
  (try while (!j2 < 4) do
    try
  sum2 := (!sum2 +. ((let __l = !hidden1 in let __i = !j2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("w2")) (net) : Obj.t) : float list list) in let __i = !j2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  j2 := (!j2 + 1);
    with Continue -> ()
  done with Break -> ());
  hidden2 := (Obj.magic (List.append (!hidden2) [(Obj.magic (sigmoid (Obj.repr (!sum2))) : float)]) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let sum3 = ref (0.0) in
  let k2 = ref (0) in
  (try while (!k2 < 3) do
    try
  sum3 := (!sum3 +. ((let __l = !hidden2 in let __i = !k2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("w3")) (net) : Obj.t) : float list list) in let __i = !k2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  k2 := (!k2 + 1);
    with Continue -> ()
  done with Break -> ());
  let out = sigmoid (Obj.repr (!sum3)) in
  __ret := (Obj.magic (out) : float); raise Return
  with Return -> !__ret)

and train net inputs outputs iterations =
  let __ret = ref (Obj.magic 0) in
  (try
  net := (Obj.magic !net : (string * Obj.t) list);
  let inputs = (Obj.magic inputs : float list list) in
  let outputs = (Obj.magic outputs : float list) in
  let iterations = (Obj.magic iterations : int) in
  let iter = ref (0) in
  (try while (!iter < iterations) do
    try
  let s = ref (0) in
  (try while (!s < List.length (inputs)) do
    try
  let inp = ref ((let __l = inputs in let __i = !s in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let target = (let __l = outputs in let __i = !s in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let hidden1 = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < 4) do
    try
  let sum1 = ref (0.0) in
  let i = ref (0) in
  (try while (!i < 3) do
    try
  sum1 := (!sum1 +. ((let __l = !inp in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("w1")) (!net) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  hidden1 := (Obj.magic (List.append (!hidden1) [(Obj.magic (sigmoid (Obj.repr (!sum1))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let hidden2 = ref (([] : (float) list)) in
  let k = ref (0) in
  (try while (!k < 3) do
    try
  let sum2 = ref (0.0) in
  let j2 = ref (0) in
  (try while (!j2 < 4) do
    try
  sum2 := (!sum2 +. ((let __l = !hidden1 in let __i = !j2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("w2")) (!net) : Obj.t) : float list list) in let __i = !j2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  j2 := (!j2 + 1);
    with Continue -> ()
  done with Break -> ());
  hidden2 := (Obj.magic (List.append (!hidden2) [(Obj.magic (sigmoid (Obj.repr (!sum2))) : float)]) : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let sum3 = ref (0.0) in
  let k3 = ref (0) in
  (try while (!k3 < 3) do
    try
  sum3 := (!sum3 +. ((let __l = !hidden2 in let __i = !k3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("w3")) (!net) : Obj.t) : float list list) in let __i = !k3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  k3 := (!k3 + 1);
    with Continue -> ()
  done with Break -> ());
  let output = sigmoid (Obj.repr (!sum3)) in
  let error = (target -. output) in
  let delta_output = (error *. sigmoid_derivative (Obj.repr (output))) in
  let new_w3 = ref (([] : (float list) list)) in
  let k4 = ref (0) in
  (try while (!k4 < 3) do
    try
  let w3row = ref ((let __l = (Obj.obj (List.assoc (__str ("w3")) (!net) : Obj.t) : float list list) in let __i = !k4 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  w3row := (List.mapi (fun __i __x -> if __i = 0 then ((let __l = !w3row in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((let __l = !hidden2 in let __i = !k4 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. delta_output)) else __x) (!w3row));
  new_w3 := (Obj.magic (List.append (!new_w3) [(Obj.magic (!w3row) : float list)]) : float list list);
  k4 := (!k4 + 1);
    with Continue -> ()
  done with Break -> ());
  net := ((__str ("w3"), Obj.repr (Obj.magic (!new_w3) : float list list)) :: List.remove_assoc (__str ("w3")) (Obj.magic (!net) : (string * Obj.t) list));
  let delta_hidden2 = ref (([] : (float) list)) in
  let k5 = ref (0) in
  (try while (!k5 < 3) do
    try
  let row = ref ((let __l = (Obj.obj (List.assoc (__str ("w3")) (!net) : Obj.t) : float list list) in let __i = !k5 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let dh2 = (((let __l = !row in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. delta_output) *. sigmoid_derivative (Obj.repr ((let __l = !hidden2 in let __i = !k5 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  delta_hidden2 := (Obj.magic (List.append (!delta_hidden2) [(Obj.magic (dh2) : float)]) : float list);
  k5 := (!k5 + 1);
    with Continue -> ()
  done with Break -> ());
  let new_w2 = ref (([] : (float list) list)) in
  j := 0;
  (try while (!j < 4) do
    try
  let w2row = ref ((let __l = (Obj.obj (List.assoc (__str ("w2")) (!net) : Obj.t) : float list list) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let k6 = ref (0) in
  (try while (!k6 < 3) do
    try
  w2row := (List.mapi (fun __i __x -> if __i = !k6 then ((let __l = !w2row in let __i = !k6 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((let __l = !hidden1 in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = !delta_hidden2 in let __i = !k6 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!w2row));
  k6 := (!k6 + 1);
    with Continue -> ()
  done with Break -> ());
  new_w2 := (Obj.magic (List.append (!new_w2) [(Obj.magic (!w2row) : float list)]) : float list list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  net := ((__str ("w2"), Obj.repr (Obj.magic (!new_w2) : float list list)) :: List.remove_assoc (__str ("w2")) (Obj.magic (!net) : (string * Obj.t) list));
  let delta_hidden1 = ref (([] : (float) list)) in
  j := 0;
  (try while (!j < 4) do
    try
  let sumdh = ref (0.0) in
  let k7 = ref (0) in
  (try while (!k7 < 3) do
    try
  let row2 = ref ((let __l = (Obj.obj (List.assoc (__str ("w2")) (!net) : Obj.t) : float list list) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  sumdh := (!sumdh +. ((let __l = !row2 in let __i = !k7 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = !delta_hidden2 in let __i = !k7 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  k7 := (!k7 + 1);
    with Continue -> ()
  done with Break -> ());
  delta_hidden1 := (Obj.magic (List.append (!delta_hidden1) [(Obj.magic ((!sumdh *. sigmoid_derivative (Obj.repr ((let __l = !hidden1 in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let new_w1 = ref (([] : (float list) list)) in
  let i2 = ref (0) in
  (try while (!i2 < 3) do
    try
  let w1row = ref ((let __l = (Obj.obj (List.assoc (__str ("w1")) (!net) : Obj.t) : float list list) in let __i = !i2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  j := 0;
  (try while (!j < 4) do
    try
  w1row := (List.mapi (fun __i __x -> if __i = !j then ((let __l = !w1row in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. ((let __l = !inp in let __i = !i2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = !delta_hidden1 in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!w1row));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  new_w1 := (Obj.magic (List.append (!new_w1) [(Obj.magic (!w1row) : float list)]) : float list list);
  i2 := (!i2 + 1);
    with Continue -> ()
  done with Break -> ());
  net := ((__str ("w1"), Obj.repr (Obj.magic (!new_w1) : float list list)) :: List.remove_assoc (__str ("w1")) (Obj.magic (!net) : (string * Obj.t) list));
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  iter := (!iter + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and predict net input =
  let __ret = ref 0 in
  (try
  let net = (Obj.magic net : (string * Obj.t) list) in
  let input = (Obj.magic input : float list) in
  let out = feedforward ((Obj.magic net : (string * Obj.t) list)) (input) in
  if (out > 0.6) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and example () =
  let __ret = ref 0 in
  (try
  let inputs = ref ([[0.0; 0.0; 0.0]; [0.0; 0.0; 1.0]; [0.0; 1.0; 0.0]; [0.0; 1.0; 1.0]; [1.0; 0.0; 0.0]; [1.0; 0.0; 1.0]; [1.0; 1.0; 0.0]; [1.0; 1.0; 1.0]]) in
  let outputs = ref ([0.0; 1.0; 1.0; 0.0; 1.0; 0.0; 0.0; 1.0]) in
  let net = ref (new_network ()) in
  ignore (train (net) (!inputs) (!outputs) (Obj.repr (10)));
  let result = predict (!net) ([1.0; 1.0; 1.0]) in
  print_endline ((string_of_int (result)));
  __ret := (Obj.magic (result) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (example ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
