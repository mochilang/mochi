(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec add matrices =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrices = (Obj.magic matrices : float list list list) in
  let rows = List.length ((let __l = matrices in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let cols = List.length ((let __l = (let __l = matrices in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let r = ref (0) in
  let result = ref (([] : (float list) list)) in
  (try while (!r < rows) do
    try
  let row = ref (([] : (float) list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  let sum = ref (0.0) in
  let m = ref (0) in
  (try while (!m < List.length (matrices)) do
    try
  sum := (!sum +. (let __l = (let __l = (let __l = matrices in let __i = !m in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.));
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!sum) : float)])) : float list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and subtract a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let b = (Obj.magic b : float list list) in
  let rows = List.length (a) in
  let cols = List.length ((let __l = a in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let r = ref (0) in
  let result = ref (([] : (float list) list)) in
  (try while (!r < rows) do
    try
  let row = ref (([] : (float) list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (((let __l = (let __l = a in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = (let __l = b in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) : float)])) : float list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and scalar_multiply matrix n =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let n = (Obj.magic n : float) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (matrix)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = matrix in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (((let __l = (let __l = matrix in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. n)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and multiply a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let b = (Obj.magic b : float list list) in
  let rowsA = List.length (a) in
  let colsA = List.length ((let __l = a in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let rowsB = List.length (b) in
  let colsB = List.length ((let __l = b in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rowsA) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < colsB) do
    try
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < colsA) do
    try
  sum := (!sum +. ((let __l = (let __l = a in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = (let __l = b in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!sum) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and identity n =
  let __ret = ref ([] : (float list) list) in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!i = !j) then (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (1.0) : float)])) : float list);
  ) else (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0.0) : float)])) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and transpose matrix =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let rows = List.length (matrix) in
  let cols = List.length ((let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let result = ref (([] : (float list) list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  let row = ref (([] : (float) list)) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((let __l = (let __l = matrix in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : float list)])) : float list list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and minor matrix row column =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let row = (Obj.magic row : int) in
  let column = (Obj.magic column : int) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (matrix)) do
    try
  if (!i <> row) then (
  let new_row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = matrix in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) do
    try
  if (!j <> column) then (
  new_row := (Obj.magic ((List.append (!new_row) [(Obj.magic ((let __l = (let __l = matrix in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!new_row) : float list)])) : float list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and determinant matrix =
  let __ret = ref 0.0 in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  if (List.length (matrix) = 1) then (
  __ret := (Obj.magic ((let __l = (let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float); raise Return
  );
  let det = ref (0.0) in
  let c = ref (0) in
  (try while (!c < List.length ((let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) do
    try
  let sub = ref (minor (matrix) (Obj.repr (0)) (Obj.repr (!c))) in
  let sign = if (((!c mod 2 + 2) mod 2) = 0) then 1.0 else (-.(1.0)) in
  det := (!det +. (((let __l = (let __l = matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. determinant (!sub)) *. sign));
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!det) : float); raise Return
  with Return -> !__ret)

and inverse matrix =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let det = determinant (matrix) in
  if (det = 0.0) then (
  __ret := (Obj.magic ([]) : float list list); raise Return
  );
  let size = List.length (matrix) in
  let matrix_minor = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < size) do
    try
  let m = ref (minor (matrix) (Obj.repr (!i)) (Obj.repr (!j))) in
  row := (Obj.magic ((List.append (!row) [(Obj.magic (determinant (!m)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  matrix_minor := (Obj.magic ((List.append (!matrix_minor) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let cofactors = ref (([] : (float list) list)) in
  i := 0;
  (try while (!i < size) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < size) do
    try
  let sign = if ((((!i + !j) mod 2 + 2) mod 2) = 0) then 1.0 else (-.(1.0)) in
  row := (Obj.magic ((List.append (!row) [(Obj.magic (((let __l = (let __l = !matrix_minor in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. sign)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  cofactors := (Obj.magic ((List.append (!cofactors) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let adjugate = ref (transpose (!cofactors)) in
  __ret := (Obj.magic (scalar_multiply (!adjugate) (Obj.repr ((1.0 /. det)))) : float list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let matrix_a = ref ([[12.0; 10.0]; [3.0; 9.0]]) in
  let matrix_b = ref ([[3.0; 4.0]; [7.0; 4.0]]) in
  let matrix_c = ref ([[11.0; 12.0; 13.0; 14.0]; [21.0; 22.0; 23.0; 24.0]; [31.0; 32.0; 33.0; 34.0]; [41.0; 42.0; 43.0; 44.0]]) in
  let matrix_d = ref ([[3.0; 0.0; 2.0]; [2.0; 0.0; (-.(2.0))]; [0.0; 1.0; 1.0]]) in
  print_endline ((("Add Operation, add(matrix_a, matrix_b) = " ^ (__str (Obj.magic (add ([!matrix_a; !matrix_b])) : Obj.t))) ^ " \n"));
  print_endline ((("Multiply Operation, multiply(matrix_a, matrix_b) = " ^ (__str (Obj.magic (multiply (!matrix_a) (!matrix_b)) : Obj.t))) ^ " \n"));
  print_endline ((("Identity: " ^ (__str (Obj.magic (identity (Obj.repr (5))) : Obj.t))) ^ "\n"));
  print_endline ((((("Minor of " ^ (__str (Obj.magic (!matrix_c) : Obj.t))) ^ " = ") ^ (__str (Obj.magic (minor (!matrix_c) (Obj.repr (1)) (Obj.repr (2))) : Obj.t))) ^ " \n"));
  print_endline ((((("Determinant of " ^ (__str (Obj.magic (!matrix_b) : Obj.t))) ^ " = ") ^ (Printf.sprintf "%.16g" (Obj.magic (determinant (!matrix_b)) : float))) ^ " \n"));
  print_endline ((((("Inverse of " ^ (__str (Obj.magic (!matrix_d) : Obj.t))) ^ " = ") ^ (__str (Obj.magic (inverse (!matrix_d)) : Obj.t))) ^ "\n"));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
