(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binary_search arr lower_bound upper_bound value =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let lower_bound = (Obj.magic lower_bound : int) in
  let upper_bound = (Obj.magic upper_bound : int) in
  let value = (Obj.magic value : int) in
  let r = ((lower_bound + upper_bound) / 2) in
  if ((let __l = arr in let __i = r in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = value) then (
  __ret := (Obj.magic (r) : int); raise Return
  );
  if (lower_bound >= upper_bound) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  if ((let __l = arr in let __i = r in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < value) then (
  __ret := (Obj.magic (binary_search (arr) (Obj.repr ((r + 1))) (Obj.repr (upper_bound)) (Obj.repr (value))) : int); raise Return
  );
  __ret := (Obj.magic (binary_search (arr) (Obj.repr (lower_bound)) (Obj.repr ((r - 1))) (Obj.repr (value))) : int); raise Return
  with Return -> !__ret)

and mat_bin_search value matrix =
  let __ret = ref ([] : (int) list) in
  (try
  let value = (Obj.magic value : int) in
  let matrix = (Obj.magic matrix : int list list) in
  let index = ref (0) in
  if ((let __l = (let __l = matrix in let __i = !index in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = value) then (
  __ret := (Obj.magic ([!index; 0]) : int list); raise Return
  );
  (try while ((!index < List.length (matrix)) && ((let __l = (let __l = matrix in let __i = !index in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < value)) do
    try
  let r = binary_search ((let __l = matrix in let __i = !index in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) (Obj.repr (0)) (Obj.repr ((List.length ((let __l = matrix in let __i = !index in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) - 1))) (Obj.repr (value)) in
  if (r <> -(1)) then (
  __ret := (Obj.magic ([!index; r]) : int list); raise Return
  );
  index := (!index + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([-(1); -(1)]) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let row = ref ([1; 4; 7; 11; 15]) in
  print_endline ((string_of_int (binary_search (!row) (Obj.repr (0)) (Obj.repr ((List.length (!row) - 1))) (Obj.repr (1)))));
  print_endline ((string_of_int (binary_search (!row) (Obj.repr (0)) (Obj.repr ((List.length (!row) - 1))) (Obj.repr (23)))));
  let matrix = ref ([[1; 4; 7; 11; 15]; [2; 5; 8; 12; 19]; [3; 6; 9; 16; 22]; [10; 13; 14; 17; 24]; [18; 21; 23; 26; 30]]) in
  print_endline ((__str (Obj.magic (mat_bin_search (Obj.repr (1)) (!matrix)) : Obj.t)));
  print_endline ((__str (Obj.magic (mat_bin_search (Obj.repr (34)) (!matrix)) : Obj.t)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
