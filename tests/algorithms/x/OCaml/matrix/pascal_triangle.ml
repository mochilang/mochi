(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec populate_current_row triangle current_row_idx =
  let __ret = ref ([] : (int) list) in
  (try
  let triangle = (Obj.magic triangle : int list list) in
  let current_row_idx = (Obj.magic current_row_idx : int) in
  let row = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i <= current_row_idx) do
    try
  if ((!i = 0) || (!i = current_row_idx)) then (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (1) : int)])) : int list);
  ) else (
  let left = (let __l = (let __l = triangle in let __i = (current_row_idx - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = (!i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let right = (let __l = (let __l = triangle in let __i = (current_row_idx - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((left + right)) : int)])) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!row) : int list); raise Return
  with Return -> !__ret)

and generate_pascal_triangle num_rows =
  let __ret = ref ([] : (int list) list) in
  (try
  let num_rows = (Obj.magic num_rows : int) in
  if (num_rows <= 0) then (
  __ret := (Obj.magic ([]) : int list list); raise Return
  );
  let triangle = ref (([] : (int list) list)) in
  let row_idx = ref (0) in
  (try while (!row_idx < num_rows) do
    try
  let row = ref (populate_current_row (!triangle) (Obj.repr (!row_idx))) in
  triangle := (Obj.magic ((List.append (!triangle) [(Obj.magic (!row) : int list)])) : int list list);
  row_idx := (!row_idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!triangle) : int list list); raise Return
  with Return -> !__ret)

and row_to_string row total_rows row_idx =
  let __ret = ref "" in
  (try
  let row = (Obj.magic row : int list) in
  let total_rows = (Obj.magic total_rows : int) in
  let row_idx = (Obj.magic row_idx : int) in
  let line = ref ("") in
  let spaces = ref (((total_rows - row_idx) - 1)) in
  let s = ref (0) in
  (try while (!s < !spaces) do
    try
  line := (!line ^ " ");
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  let c = ref (0) in
  (try while (!c <= row_idx) do
    try
  line := (!line ^ (string_of_int (Obj.magic ((let __l = row in let __i = !c in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  if (!c <> row_idx) then (
  line := (!line ^ " ");
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!line) : string); raise Return
  with Return -> !__ret)

and print_pascal_triangle num_rows =
  let __ret = ref (Obj.magic 0) in
  (try
  let num_rows = (Obj.magic num_rows : int) in
  let triangle = ref (generate_pascal_triangle (Obj.repr (num_rows))) in
  let r = ref (0) in
  (try while (!r < num_rows) do
    try
  let line = row_to_string ((let __l = !triangle in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) (Obj.repr (num_rows)) (Obj.repr (!r)) in
  print_endline (line);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (print_pascal_triangle (Obj.repr (5)));
  print_endline ((__str (Obj.magic (generate_pascal_triangle (Obj.repr (5))) : Obj.t)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
