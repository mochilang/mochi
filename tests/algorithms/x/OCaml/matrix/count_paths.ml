(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec depth_first_search grid row col visit =
  let __ret = ref 0 in
  (try
  let grid = (Obj.magic grid : int list list) in
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  visit := (Obj.magic !visit : bool list list);
  let row_length = List.length (grid) in
  let col_length = List.length ((let __l = grid in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if ((((row < 0) || (col < 0)) || (row = row_length)) || (col = col_length)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (let __l = (let __l = !visit in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if ((let __l = (let __l = grid in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 1) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if ((row = (row_length - 1)) && (col = (col_length - 1))) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  visit := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then true else __x) ((let __l = !visit in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!visit));
  let count = ref (0) in
  count := (!count + depth_first_search (grid) (Obj.repr ((row + 1))) (Obj.repr (col)) (visit));
  count := (!count + depth_first_search (grid) (Obj.repr ((row - 1))) (Obj.repr (col)) (visit));
  count := (!count + depth_first_search (grid) (Obj.repr (row)) (Obj.repr ((col + 1))) (visit));
  count := (!count + depth_first_search (grid) (Obj.repr (row)) (Obj.repr ((col - 1))) (visit));
  visit := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then false else __x) ((let __l = !visit in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!visit));
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and count_paths grid =
  let __ret = ref 0 in
  (try
  let grid = (Obj.magic grid : int list list) in
  let rows = List.length (grid) in
  let cols = List.length ((let __l = grid in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let visit = ref (([] : (bool list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row_visit = ref (([] : (bool) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  row_visit := (Obj.magic (List.append (!row_visit) [(Obj.magic (false) : bool)]) : bool list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  visit := (Obj.magic (List.append (!visit) [(Obj.magic (!row_visit) : bool list)]) : bool list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (depth_first_search (grid) (Obj.repr (0)) (Obj.repr (0)) (visit)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let grid1 = ref ([[0; 0; 0; 0]; [1; 1; 0; 0]; [0; 0; 0; 1]; [0; 1; 0; 0]]) in
  print_endline ((string_of_int (count_paths (!grid1))));
  let grid2 = ref ([[0; 0; 0; 0; 0]; [0; 1; 1; 1; 0]; [0; 1; 1; 1; 0]; [0; 0; 0; 0; 0]]) in
  print_endline ((string_of_int (count_paths (!grid2))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
