(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec cramers_rule_2x2 eq1 eq2 =
  let __ret = ref ([] : (float) list) in
  (try
  let eq1 = (Obj.magic eq1 : float list) in
  let eq2 = (Obj.magic eq2 : float list) in
  if ((List.length (eq1) <> 3) || (List.length (eq2) <> 3)) then (
  (failwith ("Please enter a valid equation."));
  );
  if (((((let __l = eq1 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) = 0.0) && ((let __l = eq1 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) = 0.0)) && ((let __l = eq2 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) = 0.0)) && ((let __l = eq2 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) = 0.0)) then (
  (failwith ("Both a & b of two equations can't be zero."));
  );
  let a1 = (let __l = eq1 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let b1 = (let __l = eq1 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let c1 = (let __l = eq1 in let __i = 2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let a2 = (let __l = eq2 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let b2 = (let __l = eq2 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let c2 = (let __l = eq2 in let __i = 2 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) in
  let determinant = ((a1 *. b2) -. (a2 *. b1)) in
  let determinant_x = ((c1 *. b2) -. (c2 *. b1)) in
  let determinant_y = ((a1 *. c2) -. (a2 *. c1)) in
  if (determinant = 0.0) then (
  if ((determinant_x = 0.0) && (determinant_y = 0.0)) then (
  (failwith ("Infinite solutions. (Consistent system)"));
  );
  (failwith ("No solution. (Inconsistent system)"));
  );
  if ((determinant_x = 0.0) && (determinant_y = 0.0)) then (
  __ret := (Obj.magic ([0.0; 0.0]) : float list); raise Return
  );
  let x = (determinant_x /. determinant) in
  let y = (determinant_y /. determinant) in
  __ret := (Obj.magic ([x; y]) : float list); raise Return
  with Return -> !__ret)

and test_cramers_rule_2x2 () =
  let __ret = ref (Obj.magic 0) in
  (try
  let r1 = ref (cramers_rule_2x2 ([2.0; 3.0; 0.0]) ([5.0; 1.0; 0.0])) in
  if (((let __l = !r1 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <> 0.0) || ((let __l = !r1 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <> 0.0)) then (
  (failwith ("Test1 failed"));
  );
  let r2 = ref (cramers_rule_2x2 ([0.0; 4.0; 50.0]) ([2.0; 0.0; 26.0])) in
  if (((let __l = !r2 in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <> 13.0) || ((let __l = !r2 in let __i = 1 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) <> 12.5)) then (
  (failwith ("Test2 failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (test_cramers_rule_2x2 ());
  print_endline (__show_list (cramers_rule_2x2 ([11.0; 2.0; 30.0]) ([1.0; 0.0; 4.0])));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
