(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec multiply matrix_a matrix_b =
  let __ret = ref ([] : (int list) list) in
  (try
  let matrix_a = (Obj.magic matrix_a : int list list) in
  let matrix_b = (Obj.magic matrix_b : int list list) in
  let n = List.length (matrix_a) in
  let matrix_c = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  let val_ = ref (0) in
  let k = ref (0) in
  (try while (!k < n) do
    try
  val_ := (!val_ + ((let __l = (let __l = matrix_a in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) * (let __l = (let __l = matrix_b in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!val_) : int)])) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  matrix_c := (Obj.magic ((List.append (!matrix_c) [(Obj.magic (!row) : int list)])) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix_c) : int list list); raise Return
  with Return -> !__ret)

and identity n =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!i = !j) then (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (1) : int)])) : int list);
  ) else (
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0) : int)])) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : int list)])) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and nth_fibonacci_matrix n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n <= 1) then (
  __ret := (Obj.magic (n) : int); raise Return
  );
  let res_matrix = ref (identity (Obj.repr (2))) in
  let fib_matrix = ref ([[1; 1]; [1; 0]]) in
  let m = ref ((n - 1)) in
  (try while (!m > 0) do
    try
  if (((!m mod 2 + 2) mod 2) = 1) then (
  res_matrix := (Obj.magic (multiply (!res_matrix) (!fib_matrix)) : int list list);
  );
  fib_matrix := (Obj.magic (multiply (!fib_matrix) (!fib_matrix)) : int list list);
  m := (!m / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = (let __l = !res_matrix in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int); raise Return
  with Return -> !__ret)

and nth_fibonacci_bruteforce n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n <= 1) then (
  __ret := (Obj.magic (n) : int); raise Return
  );
  let fib0 = ref (0) in
  let fib1 = ref (1) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  let next = (!fib0 + !fib1) in
  fib0 := !fib1;
  fib1 := next;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!fib1) : int); raise Return
  with Return -> !__ret)

and parse_number s =
  let __ret = ref 0 in
  (try
  let result = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if ((ch >= "0") && (ch <= "9")) then (
  result := ((!result * 10) + int_of_string (ch));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let ordinals = ref (["0th"; "1st"; "2nd"; "3rd"; "10th"; "100th"; "1000th"]) in
  let i = ref (0) in
  (try while (!i < List.length (!ordinals)) do
    try
  let ordinal = (let __l = !ordinals in let __i = !i in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  let n = parse_number (ordinal) in
  let msg = ((((ordinal ^ " fibonacci number using matrix exponentiation is ") ^ (string_of_int (Obj.magic (nth_fibonacci_matrix (Obj.repr (n))) : int))) ^ " and using bruteforce is ") ^ (string_of_int (Obj.magic (nth_fibonacci_bruteforce (Obj.repr (n))) : int))) in
  print_endline (msg);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
