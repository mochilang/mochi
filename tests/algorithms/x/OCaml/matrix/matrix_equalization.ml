(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec unique nums =
  let __ret = ref ([] : (int) list) in
  (try
  let nums = (Obj.magic nums : int list) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  let v = (let __l = nums in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let found = ref (false) in
  let j = ref (0) in
  (try while (!j < List.length (!res)) do
    try
  if ((let __l = !res in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = v) then (
  found := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic (v) : int)])) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and array_equalization vector step_size =
  let __ret = ref 0 in
  (try
  let vector = (Obj.magic vector : int list) in
  let step_size = (Obj.magic step_size : int) in
  if (step_size <= 0) then (
  (failwith ("Step size must be positive and non-zero."));
  );
  let elems = ref (unique (vector)) in
  let min_updates = ref (List.length (vector)) in
  let i = ref (0) in
  (try while (!i < List.length (!elems)) do
    try
  let target = (let __l = !elems in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let idx = ref (0) in
  let updates = ref (0) in
  (try while (!idx < List.length (vector)) do
    try
  if ((let __l = vector in let __i = !idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) <> target) then (
  updates := (!updates + 1);
  idx := (!idx + step_size);
  ) else (
  idx := (!idx + 1);
  );
    with Continue -> ()
  done with Break -> ());
  if (!updates < !min_updates) then (
  min_updates := !updates;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!min_updates) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((string_of_int (Obj.magic (array_equalization ([1; 1; 6; 2; 4; 6; 5; 1; 7; 2; 2; 1; 7; 2; 2]) (Obj.repr (4))) : int)));
  print_endline ((string_of_int (Obj.magic (array_equalization ([22; 81; 88; 71; 22; 81; 632; 81; 81; 22; 92]) (Obj.repr (2))) : int)));
  print_endline ((string_of_int (Obj.magic (array_equalization ([0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]) (Obj.repr (5))) : int)));
  print_endline ((string_of_int (Obj.magic (array_equalization ([22; 22; 22; 33; 33; 33]) (Obj.repr (2))) : int)));
  print_endline ((string_of_int (Obj.magic (array_equalization ([1; 2; 3]) (Obj.repr (2147483647))) : int)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
