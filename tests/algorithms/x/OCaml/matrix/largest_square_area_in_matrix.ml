(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec update_area_of_max_square row col rows cols mat largest_square_area =
  let __ret = ref 0 in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let mat = (Obj.magic mat : int list list) in
  largest_square_area := (Obj.magic !largest_square_area : int list);
  if ((row >= rows) || (col >= cols)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let right = update_area_of_max_square (Obj.repr (row)) (Obj.repr ((col + 1))) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (largest_square_area) in
  let diagonal = update_area_of_max_square (Obj.repr ((row + 1))) (Obj.repr ((col + 1))) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (largest_square_area) in
  let down = update_area_of_max_square (Obj.repr ((row + 1))) (Obj.repr (col)) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (largest_square_area) in
  if ((let __l = (let __l = mat in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 1) then (
  let sub = (1 + (List.fold_left min max_int [right; diagonal; down])) in
  if (sub > (let __l = !largest_square_area in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  largest_square_area := (List.mapi (fun __i __x -> if __i = 0 then sub else __x) (!largest_square_area));
  );
  __ret := (Obj.magic (sub) : int); raise Return
  ) else (
  __ret := (Obj.magic (0) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and largest_square_area_in_matrix_top_down rows cols mat =
  let __ret = ref 0 in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let mat = (Obj.magic mat : int list list) in
  let largest = ref ([0]) in
  ignore (update_area_of_max_square (Obj.repr (0)) (Obj.repr (0)) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (largest));
  __ret := (Obj.magic ((let __l = !largest in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int); raise Return
  with Return -> !__ret)

and update_area_of_max_square_with_dp row col rows cols mat dp_array largest_square_area =
  let __ret = ref 0 in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let mat = (Obj.magic mat : int list list) in
  dp_array := (Obj.magic !dp_array : int list list);
  largest_square_area := (Obj.magic !largest_square_area : int list);
  if ((row >= rows) || (col >= cols)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if ((let __l = (let __l = !dp_array in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> -(1)) then (
  __ret := (Obj.magic ((let __l = (let __l = !dp_array in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int); raise Return
  );
  let right = update_area_of_max_square_with_dp (Obj.repr (row)) (Obj.repr ((col + 1))) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (dp_array) (largest_square_area) in
  let diagonal = update_area_of_max_square_with_dp (Obj.repr ((row + 1))) (Obj.repr ((col + 1))) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (dp_array) (largest_square_area) in
  let down = update_area_of_max_square_with_dp (Obj.repr ((row + 1))) (Obj.repr (col)) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (dp_array) (largest_square_area) in
  if ((let __l = (let __l = mat in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 1) then (
  let sub = (1 + (List.fold_left min max_int [right; diagonal; down])) in
  if (sub > (let __l = !largest_square_area in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  largest_square_area := (List.mapi (fun __i __x -> if __i = 0 then sub else __x) (!largest_square_area));
  );
  dp_array := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then sub else __x) ((let __l = !dp_array in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!dp_array));
  __ret := (Obj.magic (sub) : int); raise Return
  ) else (
  dp_array := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then 0 else __x) ((let __l = !dp_array in let __i = row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!dp_array));
  __ret := (Obj.magic (0) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and largest_square_area_in_matrix_top_down_with_dp rows cols mat =
  let __ret = ref 0 in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let mat = (Obj.magic mat : int list list) in
  let largest = ref ([0]) in
  let dp_array = ref (([] : (int list) list)) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let row_list = ref (([] : (int) list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  row_list := (Obj.magic (List.append (!row_list) [(Obj.magic (-(1)) : int)]) : int list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  dp_array := (Obj.magic (List.append (!dp_array) [(Obj.magic (!row_list) : int list)]) : int list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (update_area_of_max_square_with_dp (Obj.repr (0)) (Obj.repr (0)) (Obj.repr (rows)) (Obj.repr (cols)) (mat) (dp_array) (largest));
  __ret := (Obj.magic ((let __l = !largest in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int); raise Return
  with Return -> !__ret)

and largest_square_area_in_matrix_bottom_up rows cols mat =
  let __ret = ref 0 in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let mat = (Obj.magic mat : int list list) in
  let dp_array = ref (([] : (int list) list)) in
  let r = ref (0) in
  (try while (!r <= rows) do
    try
  let row_list = ref (([] : (int) list)) in
  let c = ref (0) in
  (try while (!c <= cols) do
    try
  row_list := (Obj.magic (List.append (!row_list) [(Obj.magic (0) : int)]) : int list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  dp_array := (Obj.magic (List.append (!dp_array) [(Obj.magic (!row_list) : int list)]) : int list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let largest = ref (0) in
  let row = ref ((rows - 1)) in
  (try while (!row >= 0) do
    try
  let col = ref ((cols - 1)) in
  (try while (!col >= 0) do
    try
  let right = (let __l = (let __l = !dp_array in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!col + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let diagonal = (let __l = (let __l = !dp_array in let __i = (!row + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!col + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let bottom = (let __l = (let __l = !dp_array in let __i = (!row + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((let __l = (let __l = mat in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 1) then (
  let value = (1 + (List.fold_left min max_int [right; diagonal; bottom])) in
  dp_array := (List.mapi (fun __i __x -> if __i = !row then (List.mapi (fun __i __x -> if __i = !col then value else __x) ((let __l = !dp_array in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!dp_array));
  if (value > !largest) then (
  largest := value;
  );
  ) else (
  dp_array := (List.mapi (fun __i __x -> if __i = !row then (List.mapi (fun __i __x -> if __i = !col then 0 else __x) ((let __l = !dp_array in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!dp_array));
  );
  col := (!col - 1);
    with Continue -> ()
  done with Break -> ());
  row := (!row - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!largest) : int); raise Return
  with Return -> !__ret)

and largest_square_area_in_matrix_bottom_up_space_optimization rows cols mat =
  let __ret = ref 0 in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let mat = (Obj.magic mat : int list list) in
  let current_row = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i <= cols) do
    try
  current_row := (Obj.magic (List.append (!current_row) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let next_row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j <= cols) do
    try
  next_row := (Obj.magic (List.append (!next_row) [(Obj.magic (0) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let largest = ref (0) in
  let row = ref ((rows - 1)) in
  (try while (!row >= 0) do
    try
  let col = ref ((cols - 1)) in
  (try while (!col >= 0) do
    try
  let right = (let __l = !current_row in let __i = (!col + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let diagonal = (let __l = !next_row in let __i = (!col + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let bottom = (let __l = !next_row in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((let __l = (let __l = mat in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 1) then (
  let value = (1 + (List.fold_left min max_int [right; diagonal; bottom])) in
  current_row := (List.mapi (fun __i __x -> if __i = !col then value else __x) (!current_row));
  if (value > !largest) then (
  largest := value;
  );
  ) else (
  current_row := (List.mapi (fun __i __x -> if __i = !col then 0 else __x) (!current_row));
  );
  col := (!col - 1);
    with Continue -> ()
  done with Break -> ());
  next_row := (Obj.magic !current_row : int list);
  current_row := [];
  let t = ref (0) in
  (try while (!t <= cols) do
    try
  current_row := (Obj.magic (List.append (!current_row) [(Obj.magic (0) : int)]) : int list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  row := (!row - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!largest) : int); raise Return
  with Return -> !__ret)


let sample = ref ([[1; 1]; [1; 1]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (largest_square_area_in_matrix_top_down (Obj.repr (2)) (Obj.repr (2)) (!sample)));
  print_endline (string_of_int (largest_square_area_in_matrix_top_down_with_dp (Obj.repr (2)) (Obj.repr (2)) (!sample)));
  print_endline (string_of_int (largest_square_area_in_matrix_bottom_up (Obj.repr (2)) (Obj.repr (2)) (!sample)));
  print_endline (string_of_int (largest_square_area_in_matrix_bottom_up_space_optimization (Obj.repr (2)) (Obj.repr (2)) (!sample)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
