(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec is_valid_matrix matrix =
  let __ret = ref false in
  (try
  let matrix = (Obj.magic matrix : int list list) in
  if (List.length (matrix) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let cols = List.length ((let __l = matrix in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  (try List.iter (fun row ->
    try
  if (List.length (row) <> cols) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) (matrix) with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and spiral_traversal matrix =
  let __ret = ref ([] : (int) list) in
  (try
  let matrix = (Obj.magic matrix : int list list) in
  if not (is_valid_matrix (matrix)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let rows = List.length (matrix) in
  let cols = List.length ((let __l = matrix in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let top = ref (0) in
  let bottom = ref ((rows - 1)) in
  let left = ref (0) in
  let right = ref ((cols - 1)) in
  let result = ref (([] : (int) list)) in
  (try while ((!left <= !right) && (!top <= !bottom)) do
    try
  let i = ref (!left) in
  (try while (!i <= !right) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = (let __l = matrix in let __i = !top in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  top := (!top + 1);
  i := !top;
  (try while (!i <= !bottom) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = (let __l = matrix in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !right in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  right := (!right - 1);
  if (!top <= !bottom) then (
  i := !right;
  (try while (!i >= !left) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = (let __l = matrix in let __i = !bottom in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  bottom := (!bottom - 1);
  );
  if (!left <= !right) then (
  i := !bottom;
  (try while (!i >= !top) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = (let __l = matrix in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !left in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  left := (!left + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and spiral_print_clockwise matrix =
  let __ret = ref (Obj.magic 0) in
  (try
  let matrix = (Obj.magic matrix : int list list) in
  (try List.iter (fun value ->
    try
  print_endline ((string_of_int (value)));
    with Continue -> ()) (spiral_traversal (matrix)) with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = ref ([[1; 2; 3; 4]; [5; 6; 7; 8]; [9; 10; 11; 12]]) in
  ignore (spiral_print_clockwise (!a));
  print_endline ((__str (Obj.magic (spiral_traversal (!a)) : Obj.t)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
