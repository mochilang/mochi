(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec is_safe grid visited row col =
  let __ret = ref false in
  (try
  let grid = (Obj.magic grid : int list list) in
  let visited = (Obj.magic visited : bool list list) in
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let rows = List.length (grid) in
  let cols = List.length ((let __l = grid in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let within_bounds = ((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols)) in
  if not (within_bounds) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let visited_cell = (let __l = (let __l = visited in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = col in if __i < 0 then false else match List.nth_opt __l __i with Some v -> (Obj.magic v : bool) | None -> false) in
  let not_visited = (visited_cell = false) in
  __ret := (Obj.magic ((not_visited && ((let __l = (let __l = grid in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = col in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = 1))) : bool); raise Return
  with Return -> !__ret)

and dfs grid visited row col =
  let __ret = ref (Obj.magic 0) in
  (try
  let grid = (Obj.magic grid : int list list) in
  visited := (Obj.magic !visited : bool list list);
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let row_nbr = ref ([-(1); -(1); -(1); 0; 0; 1; 1; 1]) in
  let col_nbr = ref ([-(1); 0; 1; -(1); 1; -(1); 0; 1]) in
  visited := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then true else __x) ((let __l = !visited in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!visited));
  let k = ref (0) in
  (try while (!k < 8) do
    try
  let new_row = (row + (let __l = !row_nbr in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  let new_col = (col + (let __l = !col_nbr in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  if is_safe (grid) (!visited) (Obj.repr (new_row)) (Obj.repr (new_col)) then (
  ignore (dfs (grid) (visited) (Obj.repr (new_row)) (Obj.repr (new_col)));
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and count_islands grid =
  let __ret = ref 0 in
  (try
  let grid = (Obj.magic grid : int list list) in
  let rows = List.length (grid) in
  let cols = List.length ((let __l = grid in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let visited = ref (([] : (bool list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row_list = ref (([] : (bool) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  row_list := (Obj.magic ((List.append (!row_list) [(Obj.magic (false) : bool)])) : bool list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  visited := (Obj.magic ((List.append (!visited) [(Obj.magic (!row_list) : bool list)])) : bool list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let count = ref (0) in
  i := 0;
  (try while (!i < rows) do
    try
  let j = ref (0) in
  (try while (!j < cols) do
    try
  if (not ((let __l = (let __l = !visited in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then false else match List.nth_opt __l __i with Some v -> (Obj.magic v : bool) | None -> false)) && ((let __l = (let __l = grid in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = 1)) then (
  ignore (dfs (grid) (visited) (Obj.repr (!i)) (Obj.repr (!j)));
  count := (!count + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)


let grid = ref ([[1; 1; 0; 0; 0]; [0; 1; 0; 0; 1]; [1; 0; 0; 1; 1]; [0; 0; 0; 0; 0]; [1; 0; 1; 0; 1]])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_int (count_islands (!grid)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
