(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_matrix rows cols value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let value = (Obj.magic value : float) in
  let arr = ref (([] : (float list) list)) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let row = ref (([] : (float) list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (value) : float)])) : float list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  arr := (Obj.magic ((List.append (!arr) [(Obj.magic (!row) : float list)])) : float list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!arr)); (__str ("rows"), Obj.repr (rows)); (__str ("cols"), Obj.repr (cols))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_from_lists vals =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let vals = (Obj.magic vals : float list list) in
  let r = List.length (vals) in
  let c = if (r = 0) then 0 else List.length ((let __l = vals in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (vals)); (__str ("rows"), Obj.repr (r)); (__str ("cols"), Obj.repr (c))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_to_string m =
  let __ret = ref "" in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < (match List.assoc_opt (__str ("rows")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  s := (!s ^ "[");
  let j = ref (0) in
  (try while (!j < (match List.assoc_opt (__str ("cols")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" (Obj.magic ((let __l = (let __l = (match List.assoc_opt (__str ("data")) (m) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)));
  if (!j < ((match List.assoc_opt (__str ("cols")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) - 1)) then (
  s := (!s ^ ", ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  if (!i < ((match List.assoc_opt (__str ("rows")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) - 1)) then (
  s := (!s ^ "\n");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and matrix_add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  if (((match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> (match List.assoc_opt (__str ("rows")) (b) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) || ((match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> (match List.assoc_opt (__str ("cols")) (b) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) then (
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([])); (__str ("rows"), Obj.repr (0)); (__str ("cols"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (((let __l = (let __l = (match List.assoc_opt (__str ("data")) (a) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. (let __l = (let __l = (match List.assoc_opt (__str ("data")) (b) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res)); (__str ("rows"), Obj.repr ((match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("cols"), Obj.repr ((match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  if (((match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> (match List.assoc_opt (__str ("rows")) (b) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) || ((match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> (match List.assoc_opt (__str ("cols")) (b) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) then (
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([])); (__str ("rows"), Obj.repr (0)); (__str ("cols"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (((let __l = (let __l = (match List.assoc_opt (__str ("data")) (a) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = (let __l = (match List.assoc_opt (__str ("data")) (b) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.))) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res)); (__str ("rows"), Obj.repr ((match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("cols"), Obj.repr ((match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_mul_scalar m k =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let k = (Obj.magic k : float) in
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (match List.assoc_opt (__str ("rows")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (match List.assoc_opt (__str ("cols")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (((let __l = (let __l = (match List.assoc_opt (__str ("data")) (m) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. k)) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res)); (__str ("rows"), Obj.repr ((match List.assoc_opt (__str ("rows")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("cols"), Obj.repr ((match List.assoc_opt (__str ("cols")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  if ((match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> (match List.assoc_opt (__str ("rows")) (b) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) then (
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([])); (__str ("rows"), Obj.repr (0)); (__str ("cols"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (match List.assoc_opt (__str ("cols")) (b) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < (match List.assoc_opt (__str ("cols")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  sum := (!sum +. ((let __l = (let __l = (match List.assoc_opt (__str ("data")) (a) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) *. (let __l = (let __l = (match List.assoc_opt (__str ("data")) (b) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !j in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!sum) : float)])) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : float list)])) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res)); (__str ("rows"), Obj.repr ((match List.assoc_opt (__str ("rows")) (a) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("cols"), Obj.repr ((match List.assoc_opt (__str ("cols")) (b) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_transpose m =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let res = ref (([] : (float list) list)) in
  let c = ref (0) in
  (try while (!c < (match List.assoc_opt (__str ("cols")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  let row = ref (([] : (float) list)) in
  let r = ref (0) in
  (try while (!r < (match List.assoc_opt (__str ("rows")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic ((let __l = (let __l = (match List.assoc_opt (__str ("data")) (m) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !c in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) : float)])) : float list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!row) : float list)])) : float list list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res)); (__str ("rows"), Obj.repr ((match List.assoc_opt (__str ("cols")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("cols"), Obj.repr ((match List.assoc_opt (__str ("rows")) (m) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sherman_morrison ainv u v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let ainv = (Obj.magic ainv : (string * Obj.t) list) in
  let u = (Obj.magic u : (string * Obj.t) list) in
  let v = (Obj.magic v : (string * Obj.t) list) in
  let vt = ref (matrix_transpose ((Obj.magic (v) : (string * Obj.t) list))) in
  let vu = ref (matrix_mul (matrix_mul (!vt) ((Obj.magic (ainv) : (string * Obj.t) list))) ((Obj.magic (u) : (string * Obj.t) list))) in
  let factor = ((let __l = (let __l = (match List.assoc_opt (__str ("data")) (!vu) with Some v -> (Obj.obj (v : Obj.t) : float list list) | None -> []) in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = 0 in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) +. 1.0) in
  if (factor = 0.0) then (
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([])); (__str ("rows"), Obj.repr (0)); (__str ("cols"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let term1 = ref (matrix_mul ((Obj.magic (ainv) : (string * Obj.t) list)) ((Obj.magic (u) : (string * Obj.t) list))) in
  let term2 = ref (matrix_mul (!vt) ((Obj.magic (ainv) : (string * Obj.t) list))) in
  let numerator = ref (matrix_mul (!term1) (!term2)) in
  let scaled = ref (matrix_mul_scalar (!numerator) (Obj.repr ((1.0 /. factor)))) in
  __ret := (Obj.magic (matrix_sub ((Obj.magic (ainv) : (string * Obj.t) list)) (!scaled)) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let ainv = ref (matrix_from_lists ([[1.0; 0.0; 0.0]; [0.0; 1.0; 0.0]; [0.0; 0.0; 1.0]])) in
  let u = ref (matrix_from_lists ([[1.0]; [2.0]; [(-.(3.0))]])) in
  let v = ref (matrix_from_lists ([[4.0]; [(-.(2.0))]; [5.0]])) in
  let result = ref (sherman_morrison (!ainv) (!u) (!v)) in
  print_endline ((matrix_to_string (!result)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
