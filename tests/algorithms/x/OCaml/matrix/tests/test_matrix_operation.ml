(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec check_matrix mat =
  let __ret = ref (Obj.magic 0) in
  (try
  let mat = (Obj.magic mat : float list list) in
  if ((List.length (mat) < 2) || (List.length ((let __l = mat in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) < 2)) then (
  (failwith ("Expected a matrix with at least 2x2 dimensions"));
  );
    !__ret
  with Return -> !__ret)

and add a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let b = (Obj.magic b : float list list) in
  ignore (check_matrix (a));
  ignore (check_matrix (b));
  if ((List.length (a) <> List.length (b)) || (List.length ((let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) <> List.length ((let __l = b in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) then (
  (failwith ("Matrices must have the same dimensions"));
  );
  let rows = List.length (a) in
  let cols = List.length ((let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((let __l = (let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and subtract a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let b = (Obj.magic b : float list list) in
  ignore (check_matrix (a));
  ignore (check_matrix (b));
  if ((List.length (a) <> List.length (b)) || (List.length ((let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) <> List.length ((let __l = b in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) then (
  (failwith ("Matrices must have the same dimensions"));
  );
  let rows = List.length (a) in
  let cols = List.length ((let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((let __l = (let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and scalar_multiply a s =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let s = (Obj.magic s : float) in
  ignore (check_matrix (a));
  let rows = List.length (a) in
  let cols = List.length ((let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((let __l = (let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. s)) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and multiply a b =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  let b = (Obj.magic b : float list list) in
  ignore (check_matrix (a));
  ignore (check_matrix (b));
  if (List.length ((let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) <> List.length (b)) then (
  (failwith ("Invalid dimensions for matrix multiplication"));
  );
  let rows = List.length (a) in
  let cols = List.length ((let __l = b in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  let sum = ref (0.0) in
  let k = ref (0) in
  (try while (!k < List.length (b)) do
    try
  sum := (!sum +. ((let __l = (let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = b in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic (List.append (!row) [(Obj.magic (!sum) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and identity n =
  let __ret = ref ([] : (float list) list) in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!i = !j) then (
  row := (Obj.magic (List.append (!row) [(Obj.magic (1.0) : float)]) : float list);
  ) else (
  row := (Obj.magic (List.append (!row) [(Obj.magic (0.0) : float)]) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and transpose a =
  let __ret = ref ([] : (float list) list) in
  (try
  let a = (Obj.magic a : float list list) in
  ignore (check_matrix (a));
  let rows = List.length (a) in
  let cols = List.length ((let __l = a in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let result = ref (([] : (float list) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  let row = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : float list)]) : float list list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let mat_a = ref ([[12.0; 10.0]; [3.0; 9.0]]) in
  let mat_b = ref ([[3.0; 4.0]; [7.0; 4.0]]) in
  let mat_c = ref ([[3.0; 0.0; 2.0]; [2.0; 0.0; (-.(2.0))]; [0.0; 1.0; 1.0]]) in
  print_endline ((__str (Obj.magic (add (!mat_a) (!mat_b)) : Obj.t)));
  print_endline ((__str (Obj.magic (subtract (!mat_a) (!mat_b)) : Obj.t)));
  print_endline ((__str (Obj.magic (multiply (!mat_a) (!mat_b)) : Obj.t)));
  print_endline ((__str (Obj.magic (scalar_multiply (!mat_a) (Obj.repr (3.5))) : Obj.t)));
  print_endline ((__str (Obj.magic (identity (Obj.repr (5))) : Obj.t)));
  print_endline ((__str (Obj.magic (transpose (!mat_c)) : Obj.t)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
