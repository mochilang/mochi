(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec encode row col =
  let __ret = ref "" in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  __ret := (Obj.magic ((((string_of_int (Obj.magic (row) : int)) ^ ",") ^ (string_of_int (Obj.magic (col) : int)))) : string); raise Return
  with Return -> !__ret)

and is_safe row col rows cols =
  let __ret = ref false in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  __ret := (Obj.magic (((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols))) : bool); raise Return
  with Return -> !__ret)

and has seen key =
  let __ret = ref false in
  (try
  let seen = (Obj.magic seen : (string * bool) list) in
  __ret := (Obj.magic ((List.mem_assoc (__str (key)) seen)) : bool); raise Return
  with Return -> !__ret)

and depth_first_search row col seen mat =
  let __ret = ref 0 in
  (try
  let row = (Obj.magic row : int) in
  let col = (Obj.magic col : int) in
  seen := (Obj.magic !seen : (string * bool) list);
  let mat = (Obj.magic mat : int list list) in
  let rows = List.length (mat) in
  let cols = List.length ((let __l = mat in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let key = encode (Obj.repr (row)) (Obj.repr (col)) in
  if ((is_safe (Obj.repr (row)) (Obj.repr (col)) (Obj.repr (rows)) (Obj.repr (cols)) && not (has ((Obj.magic (!seen) : (string * bool) list)) (key))) && ((let __l = (let __l = mat in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = col in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = 1)) then (
  seen := ((__str (key), true) :: List.remove_assoc (__str (key)) (!seen));
  __ret := (Obj.magic (((((1 + depth_first_search (Obj.repr ((row + 1))) (Obj.repr (col)) (seen) (mat)) + depth_first_search (Obj.repr ((row - 1))) (Obj.repr (col)) (seen) (mat)) + depth_first_search (Obj.repr (row)) (Obj.repr ((col + 1))) (seen) (mat)) + depth_first_search (Obj.repr (row)) (Obj.repr ((col - 1))) (seen) (mat))) : int); raise Return
  ) else (
  __ret := (Obj.magic (0) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and find_max_area mat =
  let __ret = ref 0 in
  (try
  let mat = (Obj.magic mat : int list list) in
  let seen = ref ([] : (string * bool) list) in
  let rows = List.length (mat) in
  let max_area = ref (0) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let line = ref ((let __l = mat in let __i = !r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let cols = List.length (!line) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  if ((let __l = !line in let __i = !c in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = 1) then (
  let key = encode (Obj.repr (!r)) (Obj.repr (!c)) in
  if not ((List.mem_assoc (__str (key)) !seen)) then (
  let area = depth_first_search (Obj.repr (!r)) (Obj.repr (!c)) (seen) (mat) in
  if (area > !max_area) then (
  max_area := area;
  );
  );
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_area) : int); raise Return
  with Return -> !__ret)


let matrix = ref ([[0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0]; [0; 1; 1; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0]; [0; 1; 0; 0; 1; 1; 0; 0; 1; 0; 1; 0; 0]; [0; 1; 0; 0; 1; 1; 0; 0; 1; 1; 1; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0; 1; 1; 0; 0; 0; 0]])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_int (find_max_area (!matrix)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
