(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _num_squares = 9
let _empty_cell = "."
let rec is_valid_sudoku_board board =
  let __ret = ref false in
  (try
  let board = (Obj.magic board : string list list) in
  if (List.length (board) <> _num_squares) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < _num_squares) do
    try
  if (List.length ((let __l = board in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) <> _num_squares) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let rows = ref (([] : (string list) list)) in
  let cols = ref (([] : (string list) list)) in
  let boxes = ref (([] : (string list) list)) in
  i := 0;
  (try while (!i < _num_squares) do
    try
  rows := (Obj.magic ((List.append (!rows) [(Obj.magic ([]) : string list)])) : string list list);
  cols := (Obj.magic ((List.append (!cols) [(Obj.magic ([]) : string list)])) : string list list);
  boxes := (Obj.magic ((List.append (!boxes) [(Obj.magic ([]) : string list)])) : string list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try for r = 0 to (_num_squares - 1) do
    try
  (try for c = 0 to (_num_squares - 1) do
    try
  let value = (let __l = (let __l = board in let __i = r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = c in if __i < 0 then "" else match List.nth_opt __l __i with Some v -> (Obj.magic v : string) | None -> "") in
  if (value = _empty_cell) then (
  raise Continue;
  );
  let box = (((r / 3) * 3) + (c / 3)) in
  if (((List.mem value (let __l = !rows in let __i = r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) || (List.mem value (let __l = !cols in let __i = c in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) || (List.mem value (let __l = !boxes in let __i = box in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  rows := (List.mapi (fun __i __x -> if __i = r then (List.append ((let __l = !rows in let __i = r in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) [(Obj.magic (value) : string)]) else __x) (!rows));
  cols := (List.mapi (fun __i __x -> if __i = c then (List.append ((let __l = !cols in let __i = c in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) [(Obj.magic (value) : string)]) else __x) (!cols));
  boxes := (List.mapi (fun __i __x -> if __i = box then (List.append ((let __l = !boxes in let __i = box in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) [(Obj.magic (value) : string)]) else __x) (!boxes));
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let valid_board = ref ([["5"; "3"; "."; "."; "7"; "."; "."; "."; "."]; ["6"; "."; "."; "1"; "9"; "5"; "."; "."; "."]; ["."; "9"; "8"; "."; "."; "."; "."; "6"; "."]; ["8"; "."; "."; "."; "6"; "."; "."; "."; "3"]; ["4"; "."; "."; "8"; "."; "3"; "."; "."; "1"]; ["7"; "."; "."; "."; "2"; "."; "."; "."; "6"]; ["."; "6"; "."; "."; "."; "."; "2"; "8"; "."]; ["."; "."; "."; "4"; "1"; "9"; "."; "."; "5"]; ["."; "."; "."; "."; "8"; "."; "."; "7"; "9"]])
let invalid_board = ref ([["8"; "3"; "."; "."; "7"; "."; "."; "."; "."]; ["6"; "."; "."; "1"; "9"; "5"; "."; "."; "."]; ["."; "9"; "8"; "."; "."; "."; "."; "6"; "."]; ["8"; "."; "."; "."; "6"; "."; "."; "."; "3"]; ["4"; "."; "."; "8"; "."; "3"; "."; "."; "1"]; ["7"; "."; "."; "."; "2"; "."; "."; "."; "6"]; ["."; "6"; "."; "."; "."; "."; "2"; "8"; "."]; ["."; "."; "."; "4"; "1"; "9"; "."; "."; "5"]; ["."; "."; "."; "."; "8"; "."; "."; "7"; "9"]])
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_bool (is_valid_sudoku_board (!valid_board)));
  print_endline (string_of_bool (is_valid_sudoku_board (!invalid_board)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
