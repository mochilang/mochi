(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs_int n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  __ret := (Obj.magic (-(n)) : int); raise Return
  );
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

and make_matrix row_size =
  let __ret = ref ([] : (int list) list) in
  (try
  let row_size = (Obj.magic row_size : int) in
  let size = ref (abs_int (Obj.repr (row_size))) in
  if (!size = 0) then (
  size := 4;
  );
  let mat = ref (([] : (int list) list)) in
  let y = ref (0) in
  (try while (!y < !size) do
    try
  let row = ref (([] : (int) list)) in
  let x = ref (0) in
  (try while (!x < !size) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((1 + !x) + (!y * !size))) : int)]) : int list);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  mat := (Obj.magic (List.append (!mat) [(Obj.magic (!row) : int list)]) : int list list);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!mat) : int list list); raise Return
  with Return -> !__ret)

and transpose mat =
  let __ret = ref ([] : (int list) list) in
  (try
  let mat = (Obj.magic mat : int list list) in
  let n = List.length (mat) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = mat in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and reverse_row mat =
  let __ret = ref ([] : (int list) list) in
  (try
  let mat = (Obj.magic mat : int list list) in
  let result = ref (([] : (int list) list)) in
  let i = ref ((List.length (mat) - 1)) in
  (try while (!i >= 0) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int list)]) : int list list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and reverse_column mat =
  let __ret = ref ([] : (int list) list) in
  (try
  let mat = (Obj.magic mat : int list list) in
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref ((List.length ((let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) - 1)) in
  (try while (!j >= 0) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and rotate_90 mat =
  let __ret = ref ([] : (int list) list) in
  (try
  let mat = (Obj.magic mat : int list list) in
  let t = ref (transpose (mat)) in
  let rr = ref (reverse_row (!t)) in
  __ret := (Obj.magic (!rr) : int list list); raise Return
  with Return -> !__ret)

and rotate_180 mat =
  let __ret = ref ([] : (int list) list) in
  (try
  let mat = (Obj.magic mat : int list list) in
  let rc = ref (reverse_column (mat)) in
  let rr = ref (reverse_row (!rc)) in
  __ret := (Obj.magic (!rr) : int list list); raise Return
  with Return -> !__ret)

and rotate_270 mat =
  let __ret = ref ([] : (int list) list) in
  (try
  let mat = (Obj.magic mat : int list list) in
  let t = ref (transpose (mat)) in
  let rc = ref (reverse_column (!t)) in
  __ret := (Obj.magic (!rc) : int list list); raise Return
  with Return -> !__ret)

and row_to_string row =
  let __ret = ref "" in
  (try
  let row = (Obj.magic row : int list) in
  let line = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (row)) do
    try
  if (!i = 0) then (
  line := (string_of_int ((let __l = row in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  ) else (
  line := ((!line ^ " ") ^ (string_of_int ((let __l = row in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!line) : string); raise Return
  with Return -> !__ret)

and print_matrix mat =
  let __ret = ref (Obj.magic 0) in
  (try
  let mat = (Obj.magic mat : int list list) in
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  print_endline ((row_to_string ((let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let mat = ref (make_matrix (Obj.repr (4)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_string "\norigin:\n";
  ignore (print_matrix (!mat));
  print_string "\nrotate 90 counterclockwise:\n";
  let r90 = ref (rotate_90 (!mat)) in
  ignore (print_matrix (!r90));
  mat := (Obj.magic make_matrix (Obj.repr (4)) : int list list);
  print_string "\norigin:\n";
  ignore (print_matrix (!mat));
  print_string "\nrotate 180:\n";
  let r180 = ref (rotate_180 (!mat)) in
  ignore (print_matrix (!r180));
  mat := (Obj.magic make_matrix (Obj.repr (4)) : int list list);
  print_string "\norigin:\n";
  ignore (print_matrix (!mat));
  print_string "\nrotate 270 counterclockwise:\n";
  let r270 = ref (rotate_270 (!mat)) in
  ignore (print_matrix (!r270));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
