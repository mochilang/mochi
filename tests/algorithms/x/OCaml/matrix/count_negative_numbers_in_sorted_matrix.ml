(* Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec generate_large_matrix () =
  let __ret = ref ([] : (int list) list) in
  (try
  let result = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < 1000) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref ((1000 - !i)) in
  (try while (!j > (-(1000) - !i)) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (!j) : int)])) : int list);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic ((List.append (!result) [(Obj.magic (!row) : int list)])) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and find_negative_index arr =
  let __ret = ref 0 in
  (try
  let arr = (Obj.magic arr : int list) in
  let left = ref (0) in
  let right = ref ((List.length (arr) - 1)) in
  if (List.length (arr) = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if ((let __l = arr in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  (try while (!left <= !right) do
    try
  let mid = ((!left + !right) / 2) in
  let num = (let __l = arr in let __i = mid in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  if (num < 0) then (
  if (mid = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if ((let __l = arr in let __i = (mid - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) >= 0) then (
  __ret := (Obj.magic (mid) : int); raise Return
  );
  right := (mid - 1);
  ) else (
  left := (mid + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.length (arr)) : int); raise Return
  with Return -> !__ret)

and count_negatives_binary_search grid =
  let __ret = ref 0 in
  (try
  let grid = (Obj.magic grid : int list list) in
  let total = ref (0) in
  let bound = ref (List.length ((let __l = grid in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) in
  let i = ref (0) in
  (try while (!i < List.length (grid)) do
    try
  let row = ref ((let __l = grid in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let idx = find_negative_index (List.of_seq (Seq.take (!bound - 0) (Seq.drop 0 (List.to_seq (!row))))) in
  bound := idx;
  total := (!total + idx);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((List.length (grid) * List.length ((let __l = grid in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) - !total)) : int); raise Return
  with Return -> !__ret)

and count_negatives_brute_force grid =
  let __ret = ref 0 in
  (try
  let grid = (Obj.magic grid : int list list) in
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (grid)) do
    try
  let row = ref ((let __l = grid in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  if ((let __l = !row in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < 0) then (
  count := (!count + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and count_negatives_brute_force_with_break grid =
  let __ret = ref 0 in
  (try
  let grid = (Obj.magic grid : int list list) in
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (grid)) do
    try
  let row = ref ((let __l = grid in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  let number = (let __l = !row in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  if (number < 0) then (
  total := (!total + (List.length (!row) - !j));
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : int); raise Return
  with Return -> !__ret)


let grid = ref (generate_large_matrix ())
let test_grids = ref ([[[4; 3; 2; -(1)]; [3; 2; 1; -(1)]; [1; 1; -(1); -(2)]; [-(1); -(1); -(2); -(3)]]; [[3; 2]; [1; 0]]; [[7; 7; 6]]; [[7; 7; 6]; [-(1); -(2); -(3)]]; !grid])
let results_bin = ref (([] : (int) list))
let i = ref (0)
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  (try while (!i < List.length (!test_grids)) do
    try
  results_bin := (Obj.magic ((List.append (!results_bin) [(Obj.magic (count_negatives_binary_search ((let __l = !test_grids in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((__str (Obj.magic (!results_bin) : Obj.t)));
  let results_brute = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (!test_grids)) do
    try
  results_brute := (Obj.magic ((List.append (!results_brute) [(Obj.magic (count_negatives_brute_force ((let __l = !test_grids in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((__str (Obj.magic (!results_brute) : Obj.t)));
  let results_break = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (!test_grids)) do
    try
  results_break := (Obj.magic ((List.append (!results_break) [(Obj.magic (count_negatives_brute_force_with_break ((let __l = !test_grids in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((__str (Obj.magic (!results_break) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
