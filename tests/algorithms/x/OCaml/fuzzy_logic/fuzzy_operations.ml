(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec stringify fs =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (((((((((Obj.obj (List.assoc (__str ("name")) (fs) : Obj.t) : string) ^ ": [") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("left_boundary")) (fs) : Obj.t) : float)))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("peak")) (fs) : Obj.t) : float)))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("right_boundary")) (fs) : Obj.t) : float)))) ^ "]")) : string); raise Return
  with Return -> !__ret)

and max2 a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  if (a > b) then (
  __ret := (Obj.magic (a) : float); raise Return
  );
  __ret := (Obj.magic (b) : float); raise Return
  with Return -> !__ret)

and min2 a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  if (a < b) then (
  __ret := (Obj.magic (a) : float); raise Return
  );
  __ret := (Obj.magic (b) : float); raise Return
  with Return -> !__ret)

and complement fs =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("name"), Obj.repr (("¬" ^ (Obj.obj (List.assoc (__str ("name")) (fs) : Obj.t) : string)))); (__str ("left_boundary"), Obj.repr ((1.0 -. (Obj.obj (List.assoc (__str ("right_boundary")) (fs) : Obj.t) : float)))); (__str ("peak"), Obj.repr ((1.0 -. (Obj.obj (List.assoc (__str ("left_boundary")) (fs) : Obj.t) : float)))); (__str ("right_boundary"), Obj.repr ((1.0 -. (Obj.obj (List.assoc (__str ("peak")) (fs) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and intersection a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ((((Obj.obj (List.assoc (__str ("name")) (a) : Obj.t) : string) ^ " ∩ ") ^ (Obj.obj (List.assoc (__str ("name")) (b) : Obj.t) : string)))); (__str ("left_boundary"), Obj.repr (max2 (Obj.repr ((Obj.obj (List.assoc (__str ("left_boundary")) (a) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("left_boundary")) (b) : Obj.t) : float))))); (__str ("peak"), Obj.repr (min2 (Obj.repr ((Obj.obj (List.assoc (__str ("right_boundary")) (a) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("right_boundary")) (b) : Obj.t) : float))))); (__str ("right_boundary"), Obj.repr ((((Obj.obj (List.assoc (__str ("peak")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("peak")) (b) : Obj.t) : float)) /. 2.0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and union a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("name"), Obj.repr ((((Obj.obj (List.assoc (__str ("name")) (a) : Obj.t) : string) ^ " U ") ^ (Obj.obj (List.assoc (__str ("name")) (b) : Obj.t) : string)))); (__str ("left_boundary"), Obj.repr (min2 (Obj.repr ((Obj.obj (List.assoc (__str ("left_boundary")) (a) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("left_boundary")) (b) : Obj.t) : float))))); (__str ("peak"), Obj.repr (max2 (Obj.repr ((Obj.obj (List.assoc (__str ("right_boundary")) (a) : Obj.t) : float))) (Obj.repr ((Obj.obj (List.assoc (__str ("right_boundary")) (b) : Obj.t) : float))))); (__str ("right_boundary"), Obj.repr ((((Obj.obj (List.assoc (__str ("peak")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("peak")) (b) : Obj.t) : float)) /. 2.0)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and membership fs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if ((x <= (Obj.obj (List.assoc (__str ("left_boundary")) (fs) : Obj.t) : float)) || (x >= (Obj.obj (List.assoc (__str ("right_boundary")) (fs) : Obj.t) : float))) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if (((Obj.obj (List.assoc (__str ("left_boundary")) (fs) : Obj.t) : float) < x) && (x <= (Obj.obj (List.assoc (__str ("peak")) (fs) : Obj.t) : float))) then (
  __ret := (Obj.magic (((x -. (Obj.obj (List.assoc (__str ("left_boundary")) (fs) : Obj.t) : float)) /. ((Obj.obj (List.assoc (__str ("peak")) (fs) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("left_boundary")) (fs) : Obj.t) : float)))) : float); raise Return
  );
  if (((Obj.obj (List.assoc (__str ("peak")) (fs) : Obj.t) : float) < x) && (x < (Obj.obj (List.assoc (__str ("right_boundary")) (fs) : Obj.t) : float))) then (
  __ret := (Obj.magic ((((Obj.obj (List.assoc (__str ("right_boundary")) (fs) : Obj.t) : float) -. x) /. ((Obj.obj (List.assoc (__str ("right_boundary")) (fs) : Obj.t) : float) -. (Obj.obj (List.assoc (__str ("peak")) (fs) : Obj.t) : float)))) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)


let sheru = [(__str ("name"), Obj.repr ("Sheru")); (__str ("left_boundary"), Obj.repr (0.4)); (__str ("peak"), Obj.repr (1.0)); (__str ("right_boundary"), Obj.repr (0.6))]
let siya = [(__str ("name"), Obj.repr ("Siya")); (__str ("left_boundary"), Obj.repr (0.5)); (__str ("peak"), Obj.repr (1.0)); (__str ("right_boundary"), Obj.repr (0.7))]
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((stringify (sheru)));
  print_endline ((stringify (siya)));
  let sheru_comp = complement (sheru) in
  print_endline ((stringify (sheru_comp)));
  let inter = intersection (siya) (sheru) in
  print_endline ((stringify (inter)));
  print_endline (("Sheru membership 0.5: " ^ (Printf.sprintf "%.16g" (membership (sheru) (Obj.repr (0.5))))));
  print_endline (("Sheru membership 0.6: " ^ (Printf.sprintf "%.16g" (membership (sheru) (Obj.repr (0.6))))));
  let uni = union (siya) (sheru) in
  print_endline ((stringify (uni)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
