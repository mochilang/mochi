(* Generated by Mochi transpiler v0.10.70 on 2025-08-22 15:25 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec is_substring_divisible num =
  let __ret = ref false in
  (try
  let num = (Obj.magic num : int list) in
  if ((((let __l = num in let __i = 3 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) mod 2 + 2) mod 2) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((((((let __l = num in let __i = 2 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = num in let __i = 3 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) + (let __l = num in let __i = 4 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) mod 3 + 3) mod 3) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((((let __l = num in let __i = 5 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) mod 5 + 5) mod 5) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let primes = ref ([7; 11; 13; 17]) in
  let i = ref (0) in
  (try while (!i < List.length (!primes)) do
    try
  let p = (let __l = !primes in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let idx = (!i + 4) in
  let val_ = ((((let __l = num in let __i = idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) * 100) + ((let __l = num in let __i = (idx + 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) * 10)) + (let __l = num in let __i = (idx + 2) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  if (((val_ mod p + p) mod p) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and remove_at xs idx =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i <> idx) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and digits_to_number xs =
  let __ret = ref 0 in
  (try
  let xs = (Obj.magic xs : int list) in
  let value = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  value := ((!value * 10) + (let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : int); raise Return
  with Return -> !__ret)

and search prefix remaining =
  let __ret = ref 0 in
  (try
  let prefix = (Obj.magic prefix : int list) in
  let remaining = (Obj.magic remaining : int list) in
  if (List.length (remaining) = 0) then (
  if is_substring_divisible (prefix) then (
  __ret := (Obj.magic (digits_to_number (prefix)) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  );
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (remaining)) do
    try
  let d = (let __l = remaining in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let next_prefix = ref ((List.append (prefix) [(Obj.magic (d) : int)])) in
  let next_remaining = ref (remove_at (remaining) (Obj.repr (!i))) in
  total := (!total + search (!next_prefix) (!next_remaining));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : int); raise Return
  with Return -> !__ret)

and solution n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let digits = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  digits := (Obj.magic ((List.append (!digits) [(Obj.magic (!i) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (search ((Obj.magic ([]) : int list)) (!digits)) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ("solution() =");
  print_endline (string_of_int (solution (Obj.repr (10))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
