(* Generated by Mochi transpiler v0.10.70 on 2025-08-22 23:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_totients max_one =
  let __ret = ref ([] : (int) list) in
  (try
  let max_one = (Obj.magic max_one : int) in
  let totients = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < max_one) do
    try
  totients := (Obj.magic ((List.append (!totients) [(Obj.magic (!i) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 2;
  (try while (!i < max_one) do
    try
  if ((let __l = !totients in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = !i) then (
  let x = ref (!i) in
  (try while (!x < max_one) do
    try
  totients := (List.mapi (fun __i __x -> if __i = !x then ((let __l = !totients in let __i = !x in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) - ((let __l = !totients in let __i = !x in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) / !i)) else __x) (!totients));
  x := (!x + !i);
    with Continue -> ()
  done with Break -> ());
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!totients) : int list); raise Return
  with Return -> !__ret)

and has_same_digits num1 num2 =
  let __ret = ref false in
  (try
  let num1 = (Obj.magic num1 : int) in
  let num2 = (Obj.magic num2 : int) in
  let count1 = ref (([] : (int) list)) in
  let count2 = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  count1 := (Obj.magic ((List.append (!count1) [(Obj.magic (0) : int)])) : int list);
  count2 := (Obj.magic ((List.append (!count2) [(Obj.magic (0) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n1 = ref (num1) in
  let n2 = ref (num2) in
  if (!n1 = 0) then (
  count1 := (List.mapi (fun __i __x -> if __i = 0 then ((let __l = !count1 in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!count1));
  );
  if (!n2 = 0) then (
  count2 := (List.mapi (fun __i __x -> if __i = 0 then ((let __l = !count2 in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!count2));
  );
  (try while (!n1 > 0) do
    try
  let d1 = ((!n1 mod 10 + 10) mod 10) in
  count1 := (List.mapi (fun __i __x -> if __i = d1 then ((let __l = !count1 in let __i = d1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!count1));
  n1 := (!n1 / 10);
    with Continue -> ()
  done with Break -> ());
  (try while (!n2 > 0) do
    try
  let d2 = ((!n2 mod 10 + 10) mod 10) in
  count2 := (List.mapi (fun __i __x -> if __i = d2 then ((let __l = !count2 in let __i = d2 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!count2));
  n2 := (!n2 / 10);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < 10) do
    try
  if ((let __l = !count1 in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) <> (let __l = !count2 in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and solution max_n =
  let __ret = ref 0 in
  (try
  let max_n = (Obj.magic max_n : int) in
  let min_numerator = ref (1) in
  let min_denominator = ref (0) in
  let totients = ref (get_totients (Obj.repr ((max_n + 1)))) in
  let i = ref (2) in
  (try while (!i <= max_n) do
    try
  let t = (let __l = !totients in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  if (((!i * !min_denominator) < (!min_numerator * t)) && has_same_digits (Obj.repr (!i)) (Obj.repr (t))) then (
  min_numerator := !i;
  min_denominator := t;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!min_numerator) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (10000))) : int)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
