(* Generated by Mochi transpiler v0.10.70 on 2025-08-22 23:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec parse_row row_str =
  let __ret = ref ([] : (int) list) in
  (try
  let nums = ref (([] : (int) list)) in
  let current = ref (0) in
  let has_digit = ref (false) in
  let i = ref (0) in
  (try while (!i < String.length (row_str)) do
    try
  let ch = (let __s = row_str in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (ch = " ") then (
  if !has_digit then (
  nums := (Obj.magic ((List.append (!nums) [(Obj.magic (!current) : int)])) : int list);
  current := 0;
  has_digit := false;
  );
  ) else (
  current := ((!current * 10) + int_of_string (ch));
  has_digit := true;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !has_digit then (
  nums := (Obj.magic ((List.append (!nums) [(Obj.magic (!current) : int)])) : int list);
  );
  __ret := (Obj.magic (!nums) : int list); raise Return
  with Return -> !__ret)

and parse_matrix matrix_str =
  let __ret = ref ([] : (int list) list) in
  (try
  let matrix_str = (Obj.magic matrix_str : string list) in
  let matrix = ref (([] : (int list) list)) in
  (try List.iter (fun row_str ->
    try
  let row = ref (parse_row (row_str)) in
  matrix := (Obj.magic ((List.append (!matrix) [(Obj.magic (!row) : int list)])) : int list list);
    with Continue -> ()) (matrix_str) with Break -> ());
  __ret := (Obj.magic (!matrix) : int list list); raise Return
  with Return -> !__ret)

and bitcount x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let count = ref (0) in
  let y = ref (x) in
  (try while (!y > 0) do
    try
  if (((!y mod 2 + 2) mod 2) = 1) then (
  count := (!count + 1);
  );
  y := (!y / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and build_powers n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let powers = ref (([] : (int) list)) in
  let i = ref (0) in
  let current = ref (1) in
  (try while (!i <= n) do
    try
  powers := (Obj.magic ((List.append (!powers) [(Obj.magic (!current) : int)])) : int list);
  current := (!current * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!powers) : int list); raise Return
  with Return -> !__ret)

and solution matrix_str =
  let __ret = ref 0 in
  (try
  let matrix_str = (Obj.magic matrix_str : string list) in
  let arr = ref (parse_matrix (matrix_str)) in
  let n = List.length (!arr) in
  let powers = ref (build_powers (Obj.repr (n))) in
  let size = (let __l = !powers in let __i = n in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let dp = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  dp := (Obj.magic ((List.append (!dp) [(Obj.magic (0) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let mask = ref (0) in
  (try while (!mask < size) do
    try
  let row = bitcount (Obj.repr (!mask)) in
  if (row < n) then (
  let col = ref (0) in
  (try while (!col < n) do
    try
  if ((((!mask / (let __l = !powers in let __i = !col in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) mod 2 + 2) mod 2) = 0) then (
  let new_mask = (!mask + (let __l = !powers in let __i = !col in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  let value = ((let __l = !dp in let __i = !mask in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = (let __l = !arr in let __i = row in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !col in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  if (value > (let __l = !dp in let __i = new_mask in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  dp := (List.mapi (fun __i __x -> if __i = new_mask then value else __x) (!dp));
  );
  );
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  );
  mask := (!mask + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = !dp in let __i = (size - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int); raise Return
  with Return -> !__ret)


let _matrix_2 = ref (["7 53 183 439 863 497 383 563 79 973 287 63 343 169 583"; "627 343 773 959 943 767 473 103 699 303 957 703 583 639 913"; "447 283 463 29 23 487 463 993 119 883 327 493 423 159 743"; "217 623 3 399 853 407 103 983 89 463 290 516 212 462 350"; "960 376 682 962 300 780 486 502 912 800 250 346 172 812 350"; "870 456 192 162 593 473 915 45 989 873 823 965 425 329 803"; "973 965 905 919 133 673 665 235 509 613 673 815 165 992 326"; "322 148 972 962 286 255 941 541 265 323 925 281 601 95 973"; "445 721 11 525 473 65 511 164 138 672 18 428 154 448 848"; "414 456 310 312 798 104 566 520 302 248 694 976 430 392 198"; "184 829 373 181 631 101 969 613 840 740 778 458 284 760 390"; "821 461 843 513 17 901 711 993 293 157 274 94 192 156 574"; "34 124 4 878 450 476 712 914 838 669 875 299 823 329 699"; "815 559 813 459 522 788 168 586 966 232 308 833 251 631 107"; "813 883 451 509 615 77 281 613 459 205 380 274 302 35 805"])
let result = solution (!_matrix_2)
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (("solution() = " ^ (string_of_int (Obj.magic (result) : int))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
