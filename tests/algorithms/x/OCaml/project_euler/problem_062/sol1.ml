(* Generated by Mochi transpiler v0.10.70 on 2025-08-22 23:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_digits num =
  let __ret = ref "" in
  (try
  let num = (Obj.magic num : int) in
  let cube = ((num * num) * num) in
  let s = (string_of_int (Obj.magic (cube) : int)) in
  let counts = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < 10) do
    try
  counts := (Obj.magic ((List.append (!counts) [(Obj.magic (0) : int)])) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let d = int_of_string ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) in
  counts := (List.mapi (fun __i __x -> if __i = d then ((let __l = !counts in let __i = d in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!counts));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref ("") in
  let d = ref (0) in
  (try while (!d < 10) do
    try
  let c = ref ((let __l = !counts in let __i = !d in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  (try while (!c > 0) do
    try
  result := (!result ^ (string_of_int (Obj.magic (!d) : int)));
  c := (!c - 1);
    with Continue -> ()
  done with Break -> ());
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and solution max_base =
  let __ret = ref 0 in
  (try
  let max_base = (Obj.magic max_base : int) in
  let freqs = ref ([] : (string * int list) list) in
  let num = ref (0) in
  (try while true do
    try
  let digits = get_digits (Obj.repr (!num)) in
  let arr = ref (([] : (int) list)) in
  if (List.mem_assoc (__str (Obj.repr (digits))) !freqs) then (
  arr := (Obj.magic ((match List.assoc_opt (__str (Obj.repr (digits))) (!freqs) with Some v -> (Obj.magic v : int list) | None -> [])) : int list);
  );
  arr := (Obj.magic ((List.append (!arr) [(Obj.magic (!num) : int)])) : int list);
  freqs := ((__str (Obj.repr (digits)), !arr) :: List.remove_assoc (__str (Obj.repr (digits))) (!freqs));
  if (List.length (!arr) = max_base) then (
  let base = (let __l = !arr in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  __ret := (Obj.magic (((base * base) * base)) : int); raise Return
  );
  num := (!num + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (("solution() = " ^ (string_of_int (Obj.magic (solution (Obj.repr (5))) : int))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
