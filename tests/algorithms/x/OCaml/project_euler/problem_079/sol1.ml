(* Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec parse_int s =
  let __ret = ref 0 in
  (try
  let value = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = (let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  value := ((!value * 10) + int_of_string (c));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!value) : int); raise Return
  with Return -> !__ret)

and join xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : string list) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and contains xs c =
  let __ret = ref false in
  (try
  let xs = (Obj.magic xs : string list) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = c) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and index_of xs c =
  let __ret = ref 0 in
  (try
  let xs = (Obj.magic xs : string list) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = c) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and remove_at xs idx =
  let __ret = ref ([] : (string) list) in
  (try
  let xs = (Obj.magic xs : string list) in
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i <> idx) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string)]) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and unique_chars logins =
  let __ret = ref ([] : (string) list) in
  (try
  let logins = (Obj.magic logins : string list) in
  let chars = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (logins)) do
    try
  let login = (let __l = logins in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let j = ref (0) in
  (try while (!j < String.length (login)) do
    try
  let c = (let __s = login in let __i = !j in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) in
  if not (contains (!chars) (c)) then (
  chars := (Obj.magic (List.append (!chars) [(Obj.magic (c) : string)]) : string list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!chars) : string list); raise Return
  with Return -> !__ret)

and satisfies permutation logins =
  let __ret = ref false in
  (try
  let permutation = (Obj.magic permutation : string list) in
  let logins = (Obj.magic logins : string list) in
  let i = ref (0) in
  (try while (!i < List.length (logins)) do
    try
  let login = (let __l = logins in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let i0 = index_of (permutation) ((let __s = login in let __i = 0 in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) in
  let i1 = index_of (permutation) ((let __s = login in let __i = 1 in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) in
  let i2 = index_of (permutation) ((let __s = login in let __i = 2 in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) in
  if not (((i0 < i1) && (i1 < i2))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and search chars current logins =
  let __ret = ref "" in
  (try
  let chars = (Obj.magic chars : string list) in
  let current = (Obj.magic current : string list) in
  let logins = (Obj.magic logins : string list) in
  if (List.length (chars) = 0) then (
  if satisfies (current) (logins) then (
  __ret := (Obj.magic (join (current)) : string); raise Return
  );
  __ret := (Obj.magic ("") : string); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (chars)) do
    try
  let c = (let __l = chars in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let rest = ref (remove_at (chars) (Obj.repr (!i))) in
  let next = ref ((List.append (current) [(Obj.magic (c) : string)])) in
  let res = search (!rest) (!next) (logins) in
  if (res <> "") then (
  __ret := (Obj.magic (res) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and find_secret_passcode logins =
  let __ret = ref 0 in
  (try
  let logins = (Obj.magic logins : string list) in
  let chars = ref (unique_chars (logins)) in
  let s = search (!chars) ((Obj.magic [] : string list)) (logins) in
  if (s = "") then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  __ret := (Obj.magic (parse_int (s)) : int); raise Return
  with Return -> !__ret)


let logins1 = ref (["135"; "259"; "235"; "189"; "690"; "168"; "120"; "136"; "289"; "589"; "160"; "165"; "580"; "369"; "250"; "280"])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (find_secret_passcode (!logins1))));
  let logins2 = ref (["426"; "281"; "061"; "819"; "268"; "406"; "420"; "428"; "209"; "689"; "019"; "421"; "469"; "261"; "681"; "201"]) in
  print_endline ((string_of_int (find_secret_passcode (!logins2))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
