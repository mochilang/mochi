(* Generated by Mochi transpiler v0.10.70 on 2025-08-22 23:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _digit_factorial = ref ([1; 1; 2; 6; 24; 120; 720; 5040; 40320; 362880])
let rec digit_factorial_sum number =
  let __ret = ref 0 in
  (try
  let number = (Obj.magic number : int) in
  if (number < 0) then (
  (failwith ("Parameter number must be greater than or equal to 0"));
  );
  if (number = 0) then (
  __ret := (Obj.magic ((let __l = !_digit_factorial in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int); raise Return
  );
  let n = ref (number) in
  let total = ref (0) in
  (try while (!n > 0) do
    try
  let digit = ((!n mod 10 + 10) mod 10) in
  total := (!total + (let __l = !_digit_factorial in let __i = digit in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0));
  n := (!n / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : int); raise Return
  with Return -> !__ret)

and chain_len n limit =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let limit = (Obj.magic limit : int) in
  let seen = ref ([] : (string * bool) list) in
  let length = ref (0) in
  let cur = ref (n) in
  (try while (((List.mem_assoc (__str (Obj.repr (!cur))) !seen) = false) && (!length <= limit)) do
    try
  seen := ((__str (Obj.repr (!cur)), true) :: List.remove_assoc (__str (Obj.repr (!cur))) (!seen));
  length := (!length + 1);
  cur := digit_factorial_sum (Obj.repr (!cur));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!length) : int); raise Return
  with Return -> !__ret)

and solution chain_length number_limit =
  let __ret = ref 0 in
  (try
  let chain_length = (Obj.magic chain_length : int) in
  let number_limit = (Obj.magic number_limit : int) in
  if ((chain_length <= 0) || (number_limit <= 0)) then (
  (failwith ("Parameters chain_length and number_limit must be greater than 0"));
  );
  let count = ref (0) in
  let start = ref (1) in
  (try while (!start < number_limit) do
    try
  if (chain_len (Obj.repr (!start)) (Obj.repr (chain_length)) = chain_length) then (
  count := (!count + 1);
  );
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (60)) (Obj.repr (1000000))) : int)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
