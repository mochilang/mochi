(* Generated by Mochi transpiler v0.10.70 on 2025-08-23 14:49 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _n = ((((((((((((((((((("73167176531330624919225119674426574742355349194934" ^ "96983520312774506326239578318016984801869478851843") ^ "85861560789112949495459501737958331952853208805511") ^ "12540698747158523863050715693290963295227443043557") ^ "66896648950445244523161731856403098711121722383113") ^ "62229893423380308135336276614282806444486645238749") ^ "30358907296290491560440772390713810515859307960866") ^ "70172427121883998797908792274921901699720888093776") ^ "65727333001053367881220235421809751254540594752243") ^ "52584907711670556013604839586446706324415722155397") ^ "53697817977846174064955149290862569321978468622482") ^ "83972241375657056057490261407972968652414535100474") ^ "82166370484403199890008895243450658541227588666881") ^ "16427171479924442928230863465674813919123162824586") ^ "17866458359124566529476545682848912883142607690042") ^ "24219022671055626321111109370544217506941658960408") ^ "07198403850962455444362981230987879927244284909188") ^ "84580156166097919133875499200524063689912560717606") ^ "05886116467109405077541002256983155200055935729725") ^ "71636269561882670428252483600823257530420752963450")
let rec solution n =
  let __ret = ref 0 in
  (try
  let max_product = ref (0) in
  let i = ref (0) in
  (try while (!i <= (String.length (n) - 13)) do
    try
  let product = ref (1) in
  let j = ref (0) in
  (try while (!j < 13) do
    try
  product := (!product * int_of_string ((let __s = n in let __i = (!i + !j) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (!product > !max_product) then (
  max_product := !product;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_product) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline (string_of_int (solution ("13978431290823798458352374")));
  print_endline (string_of_int (solution ("13978431295823798458352374")));
  print_endline (string_of_int (solution ("1397843129582379841238352374")));
  print_endline (string_of_int (solution (_n)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
