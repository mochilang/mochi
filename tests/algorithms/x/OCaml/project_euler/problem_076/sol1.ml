(* Generated by Mochi transpiler v0.10.70 on 2025-08-22 23:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec solution m =
  let __ret = ref 0 in
  (try
  let m = (Obj.magic m : int) in
  let memo = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i <= m) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < m) do
    try
  row := (Obj.magic ((List.append (!row) [(Obj.magic (0) : int)])) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  memo := (Obj.magic ((List.append (!memo) [(Obj.magic (!row) : int list)])) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i <= m) do
    try
  memo := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = 0 then 1 else __x) ((let __l = !memo in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!memo));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = ref (0) in
  (try while (!n <= m) do
    try
  let k = ref (1) in
  (try while (!k < m) do
    try
  memo := (List.mapi (fun __i __x -> if __i = !n then (List.mapi (fun __i __x -> if __i = !k then ((let __l = (let __l = !memo in let __i = !n in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = (let __l = !memo in let __i = !n in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = (!k - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) else __x) ((let __l = !memo in let __i = !n in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!memo));
  if (!n > !k) then (
  memo := (List.mapi (fun __i __x -> if __i = !n then (List.mapi (fun __i __x -> if __i = !k then ((let __l = (let __l = !memo in let __i = !n in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = (let __l = !memo in let __i = ((!n - !k) - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) else __x) ((let __l = !memo in let __i = !n in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!memo));
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((let __l = (let __l = !memo in let __i = m in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = (m - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) - 1)) : int); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (100))) : int)));
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (50))) : int)));
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (30))) : int)));
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (10))) : int)));
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (5))) : int)));
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (3))) : int)));
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (2))) : int)));
  print_endline ((string_of_int (Obj.magic (solution (Obj.repr (1))) : int)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
