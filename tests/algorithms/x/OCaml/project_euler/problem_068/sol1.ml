(* Generated by Mochi transpiler v0.10.70 on 2025-08-22 23:09 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec range_desc start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (start) in
  (try while (!i >= end_) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!i) : int)])) : int list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and range_asc start end_ =
  let __ret = ref ([] : (int) list) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let res = ref (([] : (int) list)) in
  let i = ref (start) in
  (try while (!i <= end_) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic (!i) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and concat_lists a b =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int list) in
  let b = (Obj.magic b : int list) in
  let res = ref (a) in
  let i = ref (0) in
  (try while (!i < List.length (b)) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = b in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and swap xs i j =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let res = ref (([] : (int) list)) in
  let k = ref (0) in
  (try while (!k < List.length (xs)) do
    try
  if (!k = i) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = xs in let __i = j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  ) else (
  if (!k = j) then (
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = xs in let __i = i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  ) else (
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = xs in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  );
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and generate_gon_ring gon_side perm =
  let __ret = ref ([] : (int) list) in
  (try
  let gon_side = (Obj.magic gon_side : int) in
  let perm = (Obj.magic perm : int list) in
  let result = ref (([] : (int) list)) in
  result := (Obj.magic ((List.append (!result) [(Obj.magic ((let __l = perm in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  result := (Obj.magic ((List.append (!result) [(Obj.magic ((let __l = perm in let __i = 1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  result := (Obj.magic ((List.append (!result) [(Obj.magic ((let __l = perm in let __i = 2 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  let extended = ref ((List.append (perm) [(Obj.magic ((let __l = perm in let __i = 1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) in
  let magic_number = if (gon_side < 5) then 1 else 2 in
  let i = ref (1) in
  (try while (!i < ((List.length (!extended) / 3) + magic_number)) do
    try
  result := (Obj.magic ((List.append (!result) [(Obj.magic ((let __l = !extended in let __i = ((2 * !i) + 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  result := (Obj.magic ((List.append (!result) [(Obj.magic ((let __l = !result in let __i = ((3 * !i) - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  result := (Obj.magic ((List.append (!result) [(Obj.magic ((let __l = !extended in let __i = ((2 * !i) + 2) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and min_outer numbers =
  let __ret = ref 0 in
  (try
  let numbers = (Obj.magic numbers : int list) in
  let min_val = ref ((let __l = numbers in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  let i = ref (3) in
  (try while (!i < List.length (numbers)) do
    try
  if ((let __l = numbers in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < !min_val) then (
  min_val := (let __l = numbers in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0);
  );
  i := (!i + 3);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!min_val) : int); raise Return
  with Return -> !__ret)

and is_magic_gon numbers =
  let __ret = ref false in
  (try
  let numbers = (Obj.magic numbers : int list) in
  if (((List.length (numbers) mod 3 + 3) mod 3) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (min_outer (numbers) <> (let __l = numbers in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let total = (((let __l = numbers in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = numbers in let __i = 1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) + (let __l = numbers in let __i = 2 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  let i = ref (3) in
  (try while (!i < List.length (numbers)) do
    try
  if ((((let __l = numbers in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = numbers in let __i = (!i + 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) + (let __l = numbers in let __i = (!i + 2) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) <> total) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 3);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and permute_search nums start gon_side current_max =
  let __ret = ref "" in
  (try
  let nums = (Obj.magic nums : int list) in
  let start = (Obj.magic start : int) in
  let gon_side = (Obj.magic gon_side : int) in
  if (start = List.length (nums)) then (
  let ring = ref (generate_gon_ring (Obj.repr (gon_side)) (nums)) in
  if is_magic_gon (!ring) then (
  let s = ref ("") in
  let k = ref (0) in
  (try while (!k < List.length (!ring)) do
    try
  s := (!s ^ (string_of_int (Obj.magic ((let __l = !ring in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if (!s > current_max) then (
  __ret := (Obj.magic (!s) : string); raise Return
  );
  );
  __ret := (Obj.magic (current_max) : string); raise Return
  );
  let res = ref (current_max) in
  let i = ref (start) in
  (try while (!i < List.length (nums)) do
    try
  let swapped = ref (swap (nums) (Obj.repr (start)) (Obj.repr (!i))) in
  let candidate = permute_search (!swapped) (Obj.repr ((start + 1))) (Obj.repr (gon_side)) (!res) in
  if (candidate > !res) then (
  res := candidate;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and solution gon_side =
  let __ret = ref "" in
  (try
  let gon_side = (Obj.magic gon_side : int) in
  if ((gon_side < 3) || (gon_side > 5)) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let small = ref (range_desc (Obj.repr ((gon_side + 1))) (Obj.repr (1))) in
  let big = ref (range_asc (Obj.repr ((gon_side + 2))) (Obj.repr ((gon_side * 2)))) in
  let numbers = ref (concat_lists (!small) (!big)) in
  let max_str = permute_search (!numbers) (Obj.repr (0)) (Obj.repr (gon_side)) ("") in
  __ret := (Obj.magic (max_str) : string); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((solution (Obj.repr (5))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
