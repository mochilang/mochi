(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ " " ^ rest
  in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec repeat_bool times =
  let __ret = ref ([] : (bool) list) in
  (try
  let times = (Obj.magic times : int) in
  let res = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < times) do
    try
  res := (List.append (!res) [(Obj.magic (false) : bool)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : bool list); raise Return
  with Return -> !__ret)

and set_bool xs idx value =
  let __ret = ref ([] : (bool) list) in
  (try
  let idx = (Obj.magic idx : int) in
  let res = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i = idx) then (
  res := (List.append (!res) [(Obj.magic (value) : bool)]);
  ) else (
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : bool)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : bool list); raise Return
  with Return -> !__ret)

and create_state_space_tree sequence current index used =
  let __ret = ref (Obj.magic 0) in
  (try
  let index = (Obj.magic index : int) in
  if (index = List.length (sequence)) then (
  print_endline (__show (__show (current)));
  __ret := (); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (sequence)) do
    try
  if not (List.nth (used) (!i)) then (
  let next_current = (List.append (current) [List.nth (sequence) (!i)]) in
  let next_used = ref (set_bool (used) (Obj.repr (!i)) (true)) in
  ignore (create_state_space_tree ((Obj.magic sequence : Obj.t list)) ((Obj.magic next_current : Obj.t list)) (Obj.repr ((index + 1))) (!next_used));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and generate_all_permutations sequence =
  let __ret = ref (Obj.magic 0) in
  (try
  let used = ref (repeat_bool (Obj.repr (List.length (sequence)))) in
  ignore (create_state_space_tree ((Obj.magic sequence : Obj.t list)) ((Obj.magic (Obj.magic [] : Obj.t list) : Obj.t list)) (Obj.repr (0)) (!used));
    !__ret
  with Return -> !__ret)


let sequence = ref ([3; 1; 2; 4])
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (generate_all_permutations ((Obj.magic !sequence : Obj.t list)));
  let sequence_2 = ref (["A"; "B"; "C"]) in
  ignore (generate_all_permutations ((Obj.magic !sequence_2 : Obj.t list)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()