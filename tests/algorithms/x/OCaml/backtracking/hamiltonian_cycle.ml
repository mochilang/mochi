(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:51 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec valid_connection graph next_ver curr_ind path =
  let __ret = ref false in
  (try
  let next_ver = (Obj.magic next_ver : int) in
  let curr_ind = (Obj.magic curr_ind : int) in
  if (List.nth (List.nth (graph) (List.nth (path) ((curr_ind - 1)))) (next_ver) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  (try List.iter (fun v ->
    try
  if (v = next_ver) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) (path) with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and util_hamilton_cycle graph path curr_ind =
  let __ret = ref false in
  (try
  let curr_ind = (Obj.magic curr_ind : int) in
  if (curr_ind = List.length (graph)) then (
  __ret := (Obj.magic ((List.nth (List.nth (graph) (List.nth (!path) ((curr_ind - 1)))) (List.nth (!path) (0)) = 1)) : bool); raise Return
  );
  let next_ver = ref (0) in
  (try while (!next_ver < List.length (graph)) do
    try
  if valid_connection (graph) (Obj.repr (!next_ver)) (Obj.repr (curr_ind)) (!path) then (
  path := (List.mapi (fun __i __x -> if __i = curr_ind then !next_ver else __x) (!path));
  if util_hamilton_cycle (graph) (path) (Obj.repr ((curr_ind + 1))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  path := (List.mapi (fun __i __x -> if __i = curr_ind then -(1) else __x) (!path));
  );
  next_ver := (!next_ver + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and hamilton_cycle graph start_index =
  let __ret = ref ([] : (int) list) in
  (try
  let start_index = (Obj.magic start_index : int) in
  let path = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (List.length (graph) + 1)) do
    try
  path := (List.mapi (fun __i __x -> if __i = !i then -(1) else __x) (!path));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  path := (List.mapi (fun __i __x -> if __i = 0 then start_index else __x) (!path));
  let last = ref ((List.length (!path) - 1)) in
  path := (List.mapi (fun __i __x -> if __i = !last then start_index else __x) (!path));
  if util_hamilton_cycle (graph) (path) (Obj.repr (1)) then (
  __ret := (Obj.magic (!path) : int list); raise Return
  );
  __ret := (Obj.magic ([]) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()