(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:51 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec contains xs x =
  let __ret = ref false in
  (try
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and repeat s times =
  let __ret = ref "" in
  (try
  let times = (Obj.magic times : int) in
  let result = ref ("") in
  let i = ref (0) in
  (try while (!i < times) do
    try
  result := (!result ^ s);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)

and build_board pos n =
  let __ret = ref ([] : (string) list) in
  (try
  let n = (Obj.magic n : int) in
  let board = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (pos)) do
    try
  let col = List.nth (pos) (!i) in
  let line = ((repeat (". ") (Obj.repr (col)) ^ "Q ") ^ repeat (". ") (Obj.repr (((n - 1) - col)))) in
  board := (List.append (!board) [(Obj.magic (line) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!board) : string list); raise Return
  with Return -> !__ret)

and depth_first_search pos dr dl n =
  let __ret = ref ([] : (string list) list) in
  (try
  let n = (Obj.magic n : int) in
  let row = List.length (pos) in
  if (row = n) then (
  let single = ref (([] : (string list) list)) in
  single := (List.append (!single) [(Obj.magic (build_board (pos) (Obj.repr (n))) : string list)]);
  __ret := (Obj.magic (!single) : string list list); raise Return
  );
  let boards = ref (([] : (string list) list)) in
  let col = ref (0) in
  (try while (!col < n) do
    try
  if ((contains (pos) (Obj.repr (!col)) || contains (dr) (Obj.repr ((row - !col)))) || contains (dl) (Obj.repr ((row + !col)))) then (
  col := (!col + 1);
  raise Continue;
  );
  let result = ref (depth_first_search ((List.append (pos) [(Obj.magic (!col) : int)])) ((List.append (dr) [(Obj.magic ((row - !col)) : int)])) ((List.append (dl) [(Obj.magic ((row + !col)) : int)])) (Obj.repr (n))) in
  boards := (!boards @ !result);
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!boards) : string list list); raise Return
  with Return -> !__ret)

and n_queens_solution n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let boards = ref (depth_first_search ((Obj.magic [] : int list)) ((Obj.magic [] : int list)) ((Obj.magic [] : int list)) (Obj.repr (n))) in
  let i = ref (0) in
  (try while (!i < List.length (!boards)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (List.nth (!boards) (!i))) do
    try
  print_endline (List.nth (List.nth (!boards) (!i)) (!j));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (string_of_int (List.length (!boards)));
  print_endline ("solutions were found.");
  __ret := (Obj.magic (List.length (!boards)) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (n_queens_solution (Obj.repr (4)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()