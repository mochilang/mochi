(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_board n =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let board = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  board := (List.append (!board) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!board) : int list list); raise Return
  with Return -> !__ret)

and is_safe board row column =
  let __ret = ref false in
  (try
  let row = (Obj.magic row : int) in
  let column = (Obj.magic column : int) in
  let n = List.length (board) in
  let i = ref (0) in
  (try while (!i < row) do
    try
  if (List.nth (List.nth (board) (!i)) (column) = 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := (row - 1);
  let j = ref ((column - 1)) in
  (try while ((!i >= 0) && (!j >= 0)) do
    try
  if (List.nth (List.nth (board) (!i)) (!j) = 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i - 1);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  i := (row - 1);
  j := (column + 1);
  (try while ((!i >= 0) && (!j < n)) do
    try
  if (List.nth (List.nth (board) (!i)) (!j) = 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i - 1);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and row_string row =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let j = ref (0) in
  (try while (!j < List.length (row)) do
    try
  if (List.nth (row) (!j) = 1) then (
  s := (!s ^ "Q ");
  ) else (
  s := (!s ^ ". ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and printboard board =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (board)) do
    try
  print_endline ((row_string (List.nth (board) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and solve board row =
  let __ret = ref 0 in
  (try
  let row = (Obj.magic row : int) in
  if (row >= List.length (!board)) then (
  ignore (printboard (!board));
  print_endline ("");
  __ret := (Obj.magic (1) : int); raise Return
  );
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!board)) do
    try
  if is_safe (!board) (Obj.repr (row)) (Obj.repr (!i)) then (
  board := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = !i then 1 else __x) (List.nth (!board) (row))) else __x) (!board));
  count := (!count + solve (board) (Obj.repr ((row + 1))));
  board := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = !i then 0 else __x) (List.nth (!board) (row))) else __x) (!board));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and n_queens n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let board = ref (create_board (Obj.repr (n))) in
  let total = solve (board) (Obj.repr (0)) in
  print_endline (("The total number of solutions are: " ^ (string_of_int (total))));
  __ret := (Obj.magic (total) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (n_queens (Obj.repr (4)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()