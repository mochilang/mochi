(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:51 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let alphabet = "abcdefghijklmnopqrstuvwxyz"
let rec contains xs x =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and remove_item xs x =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let removed = ref (false) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (not (!removed) && (List.nth (xs) (!i) = x)) then (
  removed := true;
  ) else (
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and word_ladder current path target words =
  let __ret = ref ([] : (string) list) in
  (try
  if (current = target) then (
  __ret := (Obj.magic (path) : string list); raise Return
  );
  let i = ref (0) in
  (try while (!i < String.length (current)) do
    try
  let j = ref (0) in
  (try while (!j < String.length (alphabet)) do
    try
  let c = String.sub alphabet (!j) ((!j + 1) - !j) in
  let transformed = ((String.sub current (0) (!i - 0) ^ c) ^ String.sub current ((!i + 1)) (String.length (current) - (!i + 1))) in
  if contains (words) (transformed) then (
  let new_words = ref (remove_item (words) (transformed)) in
  let new_path = ref ((List.append (path) [(Obj.magic (transformed) : string)])) in
  let result = ref (word_ladder (transformed) (!new_path) (target) (!new_words)) in
  if (List.length (!result) > 0) then (
  __ret := (Obj.magic (!result) : string list); raise Return
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((Obj.magic [] : string list)) : string list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let w1 = ref (["hot"; "dot"; "dog"; "lot"; "log"; "cog"]) in
  print_endline ((__str (word_ladder ("hit") (["hit"]) ("cog") (!w1))));
  let w2 = ref (["hot"; "dot"; "dog"; "lot"; "log"]) in
  print_endline ((__str (word_ladder ("hit") (["hit"]) ("cog") (!w2))));
  let w3 = ref (["load"; "goad"; "gold"; "lead"; "lord"]) in
  print_endline ((__str (word_ladder ("lead") (["lead"]) ("gold") (!w3))));
  let w4 = ref (["came"; "cage"; "code"; "cade"; "gave"]) in
  print_endline ((__str (word_ladder ("game") (["game"]) ("code") (!w4))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()