(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec run_maze maze i j dr dc sol =
  let __ret = ref false in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let dr = (Obj.magic dr : int) in
  let dc = (Obj.magic dc : int) in
  let size = List.length (maze) in
  if (((i = dr) && (j = dc)) && (List.nth (List.nth (maze) (i)) (j) = 0)) then (
  sol := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then 0 else __x) (List.nth (!sol) (i))) else __x) (!sol));
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let lower_flag = ((i >= 0) && (j >= 0)) in
  let upper_flag = ((i < size) && (j < size)) in
  if (lower_flag && upper_flag) then (
  let block_flag = ((List.nth (List.nth (!sol) (i)) (j) = 1) && (List.nth (List.nth (maze) (i)) (j) = 0)) in
  if block_flag then (
  sol := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then 0 else __x) (List.nth (!sol) (i))) else __x) (!sol));
  if (((run_maze (maze) (Obj.repr ((i + 1))) (Obj.repr (j)) (Obj.repr (dr)) (Obj.repr (dc)) (sol) || run_maze (maze) (Obj.repr (i)) (Obj.repr ((j + 1))) (Obj.repr (dr)) (Obj.repr (dc)) (sol)) || run_maze (maze) (Obj.repr ((i - 1))) (Obj.repr (j)) (Obj.repr (dr)) (Obj.repr (dc)) (sol)) || run_maze (maze) (Obj.repr (i)) (Obj.repr ((j - 1))) (Obj.repr (dr)) (Obj.repr (dc)) (sol)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  sol := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then 1 else __x) (List.nth (!sol) (i))) else __x) (!sol));
  __ret := (Obj.magic (false) : bool); raise Return
  );
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and solve_maze maze sr sc dr dc =
  let __ret = ref ([] : (int list) list) in
  (try
  let sr = (Obj.magic sr : int) in
  let sc = (Obj.magic sc : int) in
  let dr = (Obj.magic dr : int) in
  let dc = (Obj.magic dc : int) in
  let size = List.length (maze) in
  if not (((((((((0 <= sr) && (sr < size)) && (0 <= sc)) && (sc < size)) && (0 <= dr)) && (dr < size)) && (0 <= dc)) && (dc < size))) then (
  (failwith ("Invalid source or destination coordinates"));
  );
  let sol = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < size) do
    try
  row := (List.append (!row) [(Obj.magic (1) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  sol := (List.append (!sol) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let solved = run_maze (maze) (Obj.repr (sr)) (Obj.repr (sc)) (Obj.repr (dr)) (Obj.repr (dc)) (sol) in
  if solved then (
  __ret := (Obj.magic (!sol) : int list list); raise Return
  ) else (
  (failwith ("No solution exists!"));
  );
    !__ret
  with Return -> !__ret)


let maze = ref ([[0; 1; 0; 1; 1]; [0; 0; 0; 0; 0]; [1; 0; 1; 0; 1]; [0; 0; 1; 0; 0]; [1; 0; 0; 1; 0]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  let n = (List.length (!maze) - 1) in
  print_endline ((__str (solve_maze (!maze) (Obj.repr (0)) (Obj.repr (0)) (Obj.repr (n)) (Obj.repr (n)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()