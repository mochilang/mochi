(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 15:56 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ " " ^ rest
  in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_all_state increment total level current result =
  let __ret = ref ([] : (int list) list) in
  (try
  let increment = (Obj.magic increment : int) in
  let total = (Obj.magic total : int) in
  let level = (Obj.magic level : int) in
  if (level = 0) then (
  __ret := (Obj.magic ((List.append (!result) [(Obj.magic (current) : int list)])) : int list list); raise Return
  );
  let i = ref (increment) in
  (try while (!i <= ((total - level) + 1)) do
    try
  let next_current = ref ((List.append (current) [(Obj.magic (!i) : int)])) in
  result := create_all_state (Obj.repr ((!i + 1))) (Obj.repr (total)) (Obj.repr ((level - 1))) (!next_current) (result);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and generate_all_combinations n k =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let k = (Obj.magic k : int) in
  if ((k < 0) || (n < 0)) then (
  __ret := (Obj.magic ([]) : int list list); raise Return
  );
  let result = ref ([]) in
  __ret := (Obj.magic (create_all_state (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (k)) ((Obj.magic [] : int list)) (result)) : int list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show (__show (generate_all_combinations (Obj.repr (4)) (Obj.repr (2)))));
  print_endline (__show (__show (generate_all_combinations (Obj.repr (3)) (Obj.repr (1)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()