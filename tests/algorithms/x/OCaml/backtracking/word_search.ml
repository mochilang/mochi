(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:51 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec contains xs x =
  let __ret = ref false in
  (try
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and get_point_key len_board len_board_column row column =
  let __ret = ref 0 in
  (try
  let len_board = (Obj.magic len_board : int) in
  let len_board_column = (Obj.magic len_board_column : int) in
  let row = (Obj.magic row : int) in
  let column = (Obj.magic column : int) in
  __ret := (Obj.magic ((((len_board * len_board_column) * row) + column)) : int); raise Return
  with Return -> !__ret)

and search_from board word row column word_index visited =
  let __ret = ref false in
  (try
  let row = (Obj.magic row : int) in
  let column = (Obj.magic column : int) in
  let word_index = (Obj.magic word_index : int) in
  if (List.nth (List.nth (board) (row)) (column) <> String.sub word (word_index) ((word_index + 1) - word_index)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (word_index = (String.length (word) - 1)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let len_board = List.length (board) in
  let len_board_column = List.length (List.nth (board) (0)) in
  let dir_i = ref ([0; 0; -(1); 1]) in
  let dir_j = ref ([1; -(1); 0; 0]) in
  let k = ref (0) in
  (try while (!k < 4) do
    try
  let next_i = (row + List.nth (!dir_i) (!k)) in
  let next_j = (column + List.nth (!dir_j) (!k)) in
  if not (((((0 <= next_i) && (next_i < len_board)) && (0 <= next_j)) && (next_j < len_board_column))) then (
  k := (!k + 1);
  raise Continue;
  );
  let key = get_point_key (Obj.repr (len_board)) (Obj.repr (len_board_column)) (Obj.repr (next_i)) (Obj.repr (next_j)) in
  if contains (visited) (Obj.repr (key)) then (
  k := (!k + 1);
  raise Continue;
  );
  let new_visited = ref ((List.append (visited) [(Obj.magic (key) : int)])) in
  if search_from (board) (word) (Obj.repr (next_i)) (Obj.repr (next_j)) (Obj.repr ((word_index + 1))) (!new_visited) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and word_exists board word =
  let __ret = ref false in
  (try
  let len_board = List.length (board) in
  let len_board_column = List.length (List.nth (board) (0)) in
  let i = ref (0) in
  (try while (!i < len_board) do
    try
  let j = ref (0) in
  (try while (!j < len_board_column) do
    try
  let key = get_point_key (Obj.repr (len_board)) (Obj.repr (len_board_column)) (Obj.repr (!i)) (Obj.repr (!j)) in
  let visited = ref ((List.append ((Obj.magic [] : int list)) [(Obj.magic (key) : int)])) in
  if search_from (board) (word) (Obj.repr (!i)) (Obj.repr (!j)) (Obj.repr (0)) (!visited) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let board = ref ([["A"; "B"; "C"; "E"]; ["S"; "F"; "C"; "S"]; ["A"; "D"; "E"; "E"]]) in
  print_endline (string_of_bool (word_exists (!board) ("ABCCED")));
  print_endline (string_of_bool (word_exists (!board) ("SEE")));
  print_endline (string_of_bool (word_exists (!board) ("ABCB")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()