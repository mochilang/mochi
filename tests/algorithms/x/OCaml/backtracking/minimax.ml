(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec minimax depth node_index is_max scores height =
  let __ret = ref 0 in
  (try
  let depth = (Obj.magic depth : int) in
  let node_index = (Obj.magic node_index : int) in
  let height = (Obj.magic height : int) in
  if (depth < 0) then (
  (failwith ("Depth cannot be less than 0"));
  );
  if (List.length (scores) = 0) then (
  (failwith ("Scores cannot be empty"));
  );
  if (depth = height) then (
  __ret := (Obj.magic (List.nth (scores) (node_index)) : int); raise Return
  );
  if is_max then (
  let left = minimax (Obj.repr ((depth + 1))) (Obj.repr ((node_index * 2))) (false) (scores) (Obj.repr (height)) in
  let right = minimax (Obj.repr ((depth + 1))) (Obj.repr (((node_index * 2) + 1))) (false) (scores) (Obj.repr (height)) in
  if (left > right) then (
  __ret := (Obj.magic (left) : int); raise Return
  ) else (
  __ret := (Obj.magic (right) : int); raise Return
  );
  );
  let left = minimax (Obj.repr ((depth + 1))) (Obj.repr ((node_index * 2))) (true) (scores) (Obj.repr (height)) in
  let right = minimax (Obj.repr ((depth + 1))) (Obj.repr (((node_index * 2) + 1))) (true) (scores) (Obj.repr (height)) in
  if (left < right) then (
  __ret := (Obj.magic (left) : int); raise Return
  ) else (
  __ret := (Obj.magic (right) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and tree_height n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let h = ref (0) in
  let v = ref (n) in
  (try while (!v > 1) do
    try
  v := (!v / 2);
  h := (!h + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!h) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let scores = ref ([90; 23; 6; 33; 21; 65; 123; 34423]) in
  let height = tree_height (Obj.repr (List.length (!scores))) in
  print_endline (("Optimal value : " ^ (string_of_int (minimax (Obj.repr (0)) (Obj.repr (0)) (true) (!scores) (Obj.repr (height))))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()