(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec valid_coloring neighbours colored_vertices color =
  let __ret = ref false in
  (try
  let color = (Obj.magic color : int) in
  let i = ref (0) in
  (try while (!i < List.length (neighbours)) do
    try
  if ((List.nth (neighbours) (!i) = 1) && (List.nth (colored_vertices) (!i) = color)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and util_color graph max_colors colored_vertices index =
  let __ret = ref false in
  (try
  let max_colors = (Obj.magic max_colors : int) in
  let index = (Obj.magic index : int) in
  if (index = List.length (graph)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let c = ref (0) in
  (try while (!c < max_colors) do
    try
  if valid_coloring (List.nth (graph) (index)) (!colored_vertices) (Obj.repr (!c)) then (
  colored_vertices := (List.mapi (fun __i __x -> if __i = index then !c else __x) (!colored_vertices));
  if util_color (graph) (Obj.repr (max_colors)) (colored_vertices) (Obj.repr ((index + 1))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  colored_vertices := (List.mapi (fun __i __x -> if __i = index then -(1) else __x) (!colored_vertices));
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and color graph max_colors =
  let __ret = ref ([] : (int) list) in
  (try
  let max_colors = (Obj.magic max_colors : int) in
  let colored_vertices = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (graph)) do
    try
  colored_vertices := (List.append (!colored_vertices) [(Obj.magic (-(1)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if util_color (graph) (Obj.repr (max_colors)) (colored_vertices) (Obj.repr (0)) then (
  __ret := (Obj.magic (!colored_vertices) : int list); raise Return
  );
  __ret := (Obj.magic ([]) : int list); raise Return
  with Return -> !__ret)


let graph = ref ([[0; 1; 0; 0; 0]; [1; 0; 1; 0; 1]; [0; 1; 0; 1; 0]; [0; 1; 1; 0; 0]; [0; 1; 0; 0; 0]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list (color (!graph) (Obj.repr (3))));
  print_endline ("\n");
  print_endline (string_of_int (List.length (color (!graph) (Obj.repr (2)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()