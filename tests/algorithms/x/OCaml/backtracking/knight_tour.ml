(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_valid_pos position n =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let y = List.nth (position) (0) in
  let x = List.nth (position) (1) in
  let positions = ref ([[(y + 1); (x + 2)]; [(y - 1); (x + 2)]; [(y + 1); (x - 2)]; [(y - 1); (x - 2)]; [(y + 2); (x + 1)]; [(y + 2); (x - 1)]; [(y - 2); (x + 1)]; [(y - 2); (x - 1)]]) in
  let permissible = ref (([] : (int list) list)) in
  (try for idx = 0 to (List.length (!positions) - 1) do
    try
  let inner = ref (List.nth (!positions) (idx)) in
  let y_test = List.nth (!inner) (0) in
  let x_test = List.nth (!inner) (1) in
  if ((((y_test >= 0) && (y_test < n)) && (x_test >= 0)) && (x_test < n)) then (
  permissible := (List.append (!permissible) [(Obj.magic (!inner) : int list)]);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!permissible) : int list list); raise Return
  with Return -> !__ret)

and is_complete board =
  let __ret = ref false in
  (try
  (try for i = 0 to (List.length (board) - 1) do
    try
  let row = ref (List.nth (board) (i)) in
  (try for j = 0 to (List.length (!row) - 1) do
    try
  if (List.nth (!row) (j) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and open_knight_tour_helper board pos curr =
  let __ret = ref false in
  (try
  let curr = (Obj.magic curr : int) in
  if is_complete (!board) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let moves = ref (get_valid_pos (pos) (Obj.repr (List.length (!board)))) in
  (try for i = 0 to (List.length (!moves) - 1) do
    try
  let position = ref (List.nth (!moves) (i)) in
  let y = List.nth (!position) (0) in
  let x = List.nth (!position) (1) in
  if (List.nth (List.nth (!board) (y)) (x) = 0) then (
  board := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = x then (curr + 1) else __x) (List.nth (!board) (y))) else __x) (!board));
  if open_knight_tour_helper (board) (!position) (Obj.repr ((curr + 1))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  board := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = x then 0 else __x) (List.nth (!board) (y))) else __x) (!board));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and open_knight_tour n =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let board = ref (([] : (int list) list)) in
  (try for i = 0 to (n - 1) do
    try
  let row = ref (([] : (int) list)) in
  (try for j = 0 to (n - 1) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
    with Continue -> ()
  done with Break -> ());
  board := (List.append (!board) [(Obj.magic (!row) : int list)]);
    with Continue -> ()
  done with Break -> ());
  (try for i = 0 to (n - 1) do
    try
  (try for j = 0 to (n - 1) do
    try
  board := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then 1 else __x) (List.nth (!board) (i))) else __x) (!board));
  if open_knight_tour_helper (board) ([i; j]) (Obj.repr (1)) then (
  __ret := (Obj.magic (!board) : int list list); raise Return
  );
  board := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then 0 else __x) (List.nth (!board) (i))) else __x) (!board));
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  print_endline (("Open Knight Tour cannot be performed on a board of size " ^ (string_of_int (n))));
  __ret := (Obj.magic (!board) : int list list); raise Return
  with Return -> !__ret)


let board = ref (open_knight_tour (Obj.repr (1)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (List.nth (List.nth (!board) (0)) (0)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()