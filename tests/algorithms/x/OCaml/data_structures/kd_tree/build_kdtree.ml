(* Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let tree = ref (([] : ((string * Obj.t) list) list))
let rec sort_points points axis =
  let __ret = ref ([] : (float list) list) in
  (try
  let points = (Obj.magic points : float list list) in
  let axis = (Obj.magic axis : int) in
  let arr = ref (points) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let j = ref (0) in
  (try while (!j < (List.length (!arr) - 1)) do
    try
  if ((let __l = (let __l = !arr in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = axis in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > (let __l = (let __l = !arr in let __i = (!j + 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = axis in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) then (
  let tmp = ref ((let __l = !arr in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  arr := (List.mapi (fun __i __x -> if __i = !j then (let __l = !arr in let __i = (!j + 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : float list list); raise Return
  with Return -> !__ret)

and build_kdtree points depth =
  let __ret = ref 0 in
  (try
  let points = (Obj.magic points : float list list) in
  let depth = (Obj.magic depth : int) in
  if (List.length (points) = 0) then (
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  );
  let k = List.length ((let __l = points in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let axis = ((depth mod k + k) mod k) in
  let sorted = ref (sort_points (points) (Obj.repr (axis))) in
  let median_idx = (List.length (!sorted) / 2) in
  let left_points = ref (List.of_seq (Seq.take (median_idx - 0) (Seq.drop 0 (List.to_seq (!sorted))))) in
  let right_points = ref (List.of_seq (Seq.take (List.length (!sorted) - (median_idx + 1)) (Seq.drop (median_idx + 1) (List.to_seq (!sorted))))) in
  let idx = ref (List.length (!tree)) in
  tree := (Obj.magic ((List.append (!tree) [(Obj.magic ([(__str (Obj.repr ("point")), Obj.repr ((let __l = !sorted in let __i = median_idx in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))); (__str (Obj.repr ("left")), Obj.repr ((0 - 1))); (__str (Obj.repr ("right")), Obj.repr ((0 - 1)))]) : (string * Obj.t) list)])) : (string * Obj.t) list list);
  let left_idx = build_kdtree (!left_points) (Obj.repr ((depth + 1))) in
  let right_idx = build_kdtree (!right_points) (Obj.repr ((depth + 1))) in
  let node = ref ((let __l = !tree in let __i = !idx in if __i < 0 then ([] : (string * Obj.t) list) else match List.nth_opt __l __i with Some v -> v | None -> ([] : (string * Obj.t) list))) in
  node := ((__str (Obj.repr ("left")), Obj.repr (Obj.magic (left_idx) : int)) :: List.remove_assoc (__str (Obj.repr ("left"))) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str (Obj.repr ("right")), Obj.repr (Obj.magic (right_idx) : int)) :: List.remove_assoc (__str (Obj.repr ("right"))) (Obj.magic (!node) : (string * Obj.t) list));
  tree := (List.mapi (fun __i __x -> if __i = !idx then !node else __x) (!tree));
  __ret := (Obj.magic (!idx) : int); raise Return
  with Return -> !__ret)


let pts = ref ([[2.0; 3.0]; [5.0; 4.0]; [9.0; 6.0]; [4.0; 7.0]; [8.0; 1.0]; [7.0; 2.0]])
let root = build_kdtree (!pts) (Obj.repr (0))
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((__str (Obj.magic (!tree) : Obj.t)));
  print_endline (string_of_int root);
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
