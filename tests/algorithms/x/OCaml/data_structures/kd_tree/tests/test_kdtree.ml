(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000.0
let seed = ref (1)
let rec rand_float () =
  let __ret = ref 0.0 in
  (try
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic ((float_of_int (!seed) /. 2147483648.0)) : float); raise Return
  with Return -> !__ret)

and hypercube_points num_points cube_size num_dimensions =
  let __ret = ref ([] : (float list) list) in
  (try
  let num_points = (Obj.magic num_points : int) in
  let cube_size = (Obj.magic cube_size : float) in
  let num_dimensions = (Obj.magic num_dimensions : int) in
  let pts = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < num_points) do
    try
  let p = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < num_dimensions) do
    try
  let v = (cube_size *. rand_float ()) in
  p := (List.append (!p) [(Obj.magic (v) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  pts := (List.append (!pts) [(Obj.magic (!p) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!pts) : float list list); raise Return
  with Return -> !__ret)

and build_kdtree points depth =
  let __ret = ref ([] : (float list) list) in
  (try
  let depth = (Obj.magic depth : int) in
  __ret := (Obj.magic (points) : float list list); raise Return
  with Return -> !__ret)

and distance_sq a b =
  let __ret = ref 0.0 in
  (try
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  let d = (List.nth (a) (!i) -. List.nth (b) (!i)) in
  sum := (!sum +. (d *. d));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and nearest_neighbour_search points query =
  let __ret = ref ([] : (string * float) list) in
  (try
  if (List.length (points) = 0) then (
  __ret := (Obj.magic ([(__str ("index"), (-.(1.0))); (__str ("dist"), _inf); (__str ("visited"), 0.0)]) : (string * float) list); raise Return
  );
  let nearest_idx = ref (0) in
  let nearest_dist = ref (_inf) in
  let visited = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (points)) do
    try
  let d = distance_sq (query) (List.nth (points) (!i)) in
  visited := (!visited + 1);
  if (d < !nearest_dist) then (
  nearest_dist := d;
  nearest_idx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("index"), float_of_int (!nearest_idx)); (__str ("dist"), !nearest_dist); (__str ("visited"), float_of_int (!visited))]) : (string * float) list); raise Return
  with Return -> !__ret)

and test_build_cases () =
  let __ret = ref (Obj.magic 0) in
  (try
  let empty_pts = ref ([] : float list list) in
  let tree0 = ref (build_kdtree (!empty_pts) (Obj.repr (0))) in
  if (List.length (!tree0) = 0) then (
  print_endline ("case1 true");
  ) else (
  print_endline ("case1 false");
  );
  let pts1 = ref (hypercube_points (Obj.repr (10)) (Obj.repr (10.0)) (Obj.repr (2))) in
  let tree1 = ref (build_kdtree (!pts1) (Obj.repr (2))) in
  if ((List.length (!tree1) > 0) && (List.length (List.nth (!tree1) (0)) = 2)) then (
  print_endline ("case2 true");
  ) else (
  print_endline ("case2 false");
  );
  let pts2 = ref (hypercube_points (Obj.repr (10)) (Obj.repr (10.0)) (Obj.repr (3))) in
  let tree2 = ref (build_kdtree (!pts2) (Obj.repr (-(2)))) in
  if ((List.length (!tree2) > 0) && (List.length (List.nth (!tree2) (0)) = 3)) then (
  print_endline ("case3 true");
  ) else (
  print_endline ("case3 false");
  );
    !__ret
  with Return -> !__ret)

and test_search () =
  let __ret = ref (Obj.magic 0) in
  (try
  let pts = ref (hypercube_points (Obj.repr (10)) (Obj.repr (10.0)) (Obj.repr (2))) in
  let tree = ref (build_kdtree (!pts) (Obj.repr (0))) in
  let qp = ref (List.nth (hypercube_points (Obj.repr (1)) (Obj.repr (10.0)) (Obj.repr (2))) (0)) in
  let res = ref (nearest_neighbour_search (!tree) (!qp)) in
  if (((List.assoc (__str ("index")) (!res) <> (-.(1.0))) && (List.assoc (__str ("dist")) (!res) >= 0.0)) && (List.assoc (__str ("visited")) (!res) > 0.0)) then (
  print_endline ("search true");
  ) else (
  print_endline ("search false");
  );
    !__ret
  with Return -> !__ret)

and test_edge () =
  let __ret = ref (Obj.magic 0) in
  (try
  let empty_pts = ref ([] : float list list) in
  let tree = ref (build_kdtree (!empty_pts) (Obj.repr (0))) in
  let query = ref ([0.0; 0.0]) in
  let res = ref (nearest_neighbour_search (!tree) (!query)) in
  if (((List.assoc (__str ("index")) (!res) = (-.(1.0))) && (List.assoc (__str ("dist")) (!res) > 100000000.0)) && (List.assoc (__str ("visited")) (!res) = 0.0)) then (
  print_endline ("edge true");
  ) else (
  print_endline ("edge false");
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  seed := 1;
  ignore (test_build_cases ());
  ignore (test_search ());
  ignore (test_edge ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()