(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec square_distance a b =
  let __ret = ref 0.0 in
  (try
  let i = ref (0) in
  let total = ref (0.0) in
  (try while (!i < List.length (a)) do
    try
  let diff = (List.nth (a) (!i) -. List.nth (b) (!i)) in
  total := (!total +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and search nodes index query_point depth best =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let depth = (Obj.magic depth : int) in
  if (index = -(1)) then (
  __ret := (Obj.magic (best) : (string * Obj.t) list); raise Return
  );
  let result = ref (best) in
  result := ((__str ("nodes_visited"), Obj.repr (((Obj.obj (List.assoc (__str ("nodes_visited")) (!result) : Obj.t) : int) + 1))) :: List.remove_assoc (__str ("nodes_visited")) (Obj.magic (!result) : (string * Obj.t) list));
  let node = ref (List.nth (nodes) (index)) in
  let current_point = ref ((Obj.obj (List.assoc (__str ("point")) (!node) : Obj.t) : float list)) in
  let current_dist = square_distance (query_point) (!current_point) in
  if ((List.length ((Obj.obj (List.assoc (__str ("point")) (!result) : Obj.t) : float list)) = 0) || (current_dist < (Obj.obj (List.assoc (__str ("distance")) (!result) : Obj.t) : float))) then (
  result := ((__str ("point"), Obj.repr (!current_point)) :: List.remove_assoc (__str ("point")) (Obj.magic (!result) : (string * Obj.t) list));
  result := ((__str ("distance"), Obj.repr (current_dist)) :: List.remove_assoc (__str ("distance")) (Obj.magic (!result) : (string * Obj.t) list));
  );
  let k = List.length (query_point) in
  let axis = ((depth mod k + k) mod k) in
  let nearer = ref ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int)) in
  let further = ref ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int)) in
  if (List.nth (query_point) (axis) > List.nth (!current_point) (axis)) then (
  nearer := (Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int);
  further := (Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int);
  );
  result := search (nodes) (Obj.repr (!nearer)) (query_point) (Obj.repr ((depth + 1))) ((Obj.magic !result : (string * Obj.t) list));
  let diff = (List.nth (query_point) (axis) -. List.nth (!current_point) (axis)) in
  if ((diff *. diff) < (Obj.obj (List.assoc (__str ("distance")) (!result) : Obj.t) : float)) then (
  result := search (nodes) (Obj.repr (!further)) (query_point) (Obj.repr ((depth + 1))) ((Obj.magic !result : (string * Obj.t) list));
  );
  __ret := (Obj.magic (!result) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and nearest_neighbour_search nodes root query_point =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let root = (Obj.magic root : int) in
  let initial = [(__str ("point"), Obj.repr ([])); (__str ("distance"), Obj.repr (1000000000000000000000000000000.0)); (__str ("nodes_visited"), Obj.repr (0))] in
  __ret := (Obj.magic (search (nodes) (Obj.repr (root)) (query_point) (Obj.repr (0)) (initial)) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let nodes = ref ([[(__str ("point"), Obj.repr ([9.0; 1.0])); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (4))]; [(__str ("point"), Obj.repr ([2.0; 7.0])); (__str ("left"), Obj.repr (2)); (__str ("right"), Obj.repr (3))]; [(__str ("point"), Obj.repr ([3.0; 6.0])); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("point"), Obj.repr ([6.0; 12.0])); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("point"), Obj.repr ([17.0; 15.0])); (__str ("left"), Obj.repr (5)); (__str ("right"), Obj.repr (6))]; [(__str ("point"), Obj.repr ([13.0; 15.0])); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("point"), Obj.repr ([10.0; 19.0])); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]])
let queries = ref ([[9.0; 2.0]; [12.0; 15.0]; [1.0; 3.0]])
let q = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!q < List.length (!queries)) do
    try
  let res = nearest_neighbour_search ((Obj.magic !nodes : (string * Obj.t) list list)) (Obj.repr (0)) (List.nth (!queries) (!q)) in
  print_endline (((((((__str ((Obj.obj (List.assoc (__str ("point")) (res) : Obj.t) : float list))) ^ " ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("distance")) (res) : Obj.t) : float)))) ^ " ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("nodes_visited")) (res) : Obj.t) : int)))) ^ "\n"));
  q := (!q + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()