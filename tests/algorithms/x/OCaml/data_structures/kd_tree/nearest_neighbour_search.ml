(* Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec square_distance a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let i = ref (0) in
  let total = ref (0.0) in
  (try while (!i < List.length (a)) do
    try
  let diff = ((let __l = a in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = b in let __i = !i in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  total := (!total +. (diff *. diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and search nodes index query_point depth best =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nodes = (Obj.magic nodes : (string * Obj.t) list list) in
  let index = (Obj.magic index : int) in
  let query_point = (Obj.magic query_point : float list) in
  let depth = (Obj.magic depth : int) in
  let best = (Obj.magic best : (string * Obj.t) list) in
  if (index = -(1)) then (
  __ret := (Obj.magic (best) : (string * Obj.t) list); raise Return
  );
  let result = ref (best) in
  result := ((__str (Obj.repr ("nodes_visited")), Obj.repr (Obj.magic (((match List.assoc_opt (__str (Obj.repr ("nodes_visited"))) (!result) with Some v -> (Obj.magic v : int) | None -> 0) + 1)) : int)) :: List.remove_assoc (__str (Obj.repr ("nodes_visited"))) (Obj.magic (!result) : (string * Obj.t) list));
  let node = ref ((let __l = nodes in let __i = index in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let current_point = ref ((match List.assoc_opt (__str (Obj.repr ("point"))) (!node) with Some v -> (Obj.magic v : float list) | None -> [])) in
  let current_dist = square_distance (query_point) (!current_point) in
  if ((List.length ((match List.assoc_opt (__str (Obj.repr ("point"))) (!result) with Some v -> (Obj.magic v : float list) | None -> [])) = 0) || (current_dist < (match List.assoc_opt (__str (Obj.repr ("distance"))) (!result) with Some v -> (Obj.magic v : float) | None -> 0.))) then (
  result := ((__str (Obj.repr ("point")), Obj.repr (Obj.magic (!current_point) : float list)) :: List.remove_assoc (__str (Obj.repr ("point"))) (Obj.magic (!result) : (string * Obj.t) list));
  result := ((__str (Obj.repr ("distance")), Obj.repr (Obj.magic (current_dist) : float)) :: List.remove_assoc (__str (Obj.repr ("distance"))) (Obj.magic (!result) : (string * Obj.t) list));
  );
  let k = List.length (query_point) in
  let axis = ((depth mod k + k) mod k) in
  let nearer = ref ((match List.assoc_opt (__str (Obj.repr ("left"))) (!node) with Some v -> (Obj.magic v : int) | None -> 0)) in
  let further = ref ((match List.assoc_opt (__str (Obj.repr ("right"))) (!node) with Some v -> (Obj.magic v : int) | None -> 0)) in
  if ((let __l = query_point in let __i = axis in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) > (let __l = !current_point in let __i = axis in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) then (
  nearer := (match List.assoc_opt (__str (Obj.repr ("right"))) (!node) with Some v -> (Obj.magic v : int) | None -> 0);
  further := (match List.assoc_opt (__str (Obj.repr ("left"))) (!node) with Some v -> (Obj.magic v : int) | None -> 0);
  );
  result := search (nodes) (Obj.repr (!nearer)) (query_point) (Obj.repr ((depth + 1))) ((Obj.magic (!result) : (string * Obj.t) list));
  let diff = ((let __l = query_point in let __i = axis in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.) -. (let __l = !current_point in let __i = axis in if __i < 0 then 0. else match List.nth_opt __l __i with Some v -> (Obj.magic v : float) | None -> 0.)) in
  if ((diff *. diff) < (match List.assoc_opt (__str (Obj.repr ("distance"))) (!result) with Some v -> (Obj.magic v : float) | None -> 0.)) then (
  result := search (nodes) (Obj.repr (!further)) (query_point) (Obj.repr ((depth + 1))) ((Obj.magic (!result) : (string * Obj.t) list));
  );
  __ret := (Obj.magic (!result) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and nearest_neighbour_search nodes root query_point =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nodes = (Obj.magic nodes : (string * Obj.t) list list) in
  let root = (Obj.magic root : int) in
  let query_point = (Obj.magic query_point : float list) in
  let initial = ref ([(__str (Obj.repr ("point")), Obj.repr ([])); (__str (Obj.repr ("distance")), Obj.repr (1000000000000000000000000000000.0)); (__str (Obj.repr ("nodes_visited")), Obj.repr (0))]) in
  __ret := (Obj.magic (search (nodes) (Obj.repr (root)) (query_point) (Obj.repr (0)) (!initial)) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let nodes = ref ([[(__str (Obj.repr ("point")), Obj.repr ([9.0; 1.0])); (__str (Obj.repr ("left")), Obj.repr (1)); (__str (Obj.repr ("right")), Obj.repr (4))]; [(__str (Obj.repr ("point")), Obj.repr ([2.0; 7.0])); (__str (Obj.repr ("left")), Obj.repr (2)); (__str (Obj.repr ("right")), Obj.repr (3))]; [(__str (Obj.repr ("point")), Obj.repr ([3.0; 6.0])); (__str (Obj.repr ("left")), Obj.repr (-(1))); (__str (Obj.repr ("right")), Obj.repr (-(1)))]; [(__str (Obj.repr ("point")), Obj.repr ([6.0; 12.0])); (__str (Obj.repr ("left")), Obj.repr (-(1))); (__str (Obj.repr ("right")), Obj.repr (-(1)))]; [(__str (Obj.repr ("point")), Obj.repr ([17.0; 15.0])); (__str (Obj.repr ("left")), Obj.repr (5)); (__str (Obj.repr ("right")), Obj.repr (6))]; [(__str (Obj.repr ("point")), Obj.repr ([13.0; 15.0])); (__str (Obj.repr ("left")), Obj.repr (-(1))); (__str (Obj.repr ("right")), Obj.repr (-(1)))]; [(__str (Obj.repr ("point")), Obj.repr ([10.0; 19.0])); (__str (Obj.repr ("left")), Obj.repr (-(1))); (__str (Obj.repr ("right")), Obj.repr (-(1)))]])
let queries = ref ([[9.0; 2.0]; [12.0; 15.0]; [1.0; 3.0]])
let q = ref (0)
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  (try while (!q < List.length (!queries)) do
    try
  let res = ref (nearest_neighbour_search ((Obj.magic (!nodes) : (string * Obj.t) list list)) (Obj.repr (0)) ((let __l = !queries in let __i = !q in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) in
  print_endline (((((((__str (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("point"))) (!res) with Some v -> (Obj.magic v : float list) | None -> [])) : Obj.t)) ^ " ") ^ (Printf.sprintf "%.16g" (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("distance"))) (!res) with Some v -> (Obj.magic v : float) | None -> 0.)) : float))) ^ " ") ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str (Obj.repr ("nodes_visited"))) (!res) with Some v -> (Obj.magic v : int) | None -> 0)) : int))) ^ "\n"));
  q := (!q + 1);
    with Continue -> ()
  done with Break -> ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
