(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec suffix_tree_new text =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("text"), Obj.repr (text))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and suffix_tree_search st pattern =
  let __ret = ref false in
  (try
  if (String.length (pattern) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let i = ref (0) in
  let n = String.length ((Obj.obj (List.assoc (__str ("text")) (st) : Obj.t) : string)) in
  let m = String.length (pattern) in
  (try while (!i <= (n - m)) do
    try
  let j = ref (0) in
  let found = ref (true) in
  (try while (!j < m) do
    try
  if (String.make 1 (String.get ((Obj.obj (List.assoc (__str ("text")) (st) : Obj.t) : string)) (!i + !j)) <> String.make 1 (String.get (pattern) !j)) then (
  found := false;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !found then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)


let text = "banana"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let st = suffix_tree_new (text) in
  let patterns_exist = ref (["ana"; "ban"; "na"]) in
  let i = ref (0) in
  (try while (!i < List.length (!patterns_exist)) do
    try
  print_endline ((string_of_bool (suffix_tree_search (st) (List.nth (!patterns_exist) (!i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let patterns_none = ref (["xyz"; "apple"; "cat"]) in
  i := 0;
  (try while (!i < List.length (!patterns_none)) do
    try
  print_endline ((string_of_bool (suffix_tree_search (st) (List.nth (!patterns_none) (!i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((string_of_bool (suffix_tree_search (st) (""))));
  print_endline ((string_of_bool (suffix_tree_search (st) (text))));
  let substrings = ref (["ban"; "ana"; "a"; "na"]) in
  i := 0;
  (try while (!i < List.length (!substrings)) do
    try
  print_endline ((string_of_bool (suffix_tree_search (st) (List.nth (!substrings) (!i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()