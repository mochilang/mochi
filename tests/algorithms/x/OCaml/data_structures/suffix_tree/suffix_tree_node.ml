(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_suffix_tree_node children is_end_of_string start end_ suffix_link =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let suffix_link = (Obj.magic suffix_link : int) in
  __ret := (Obj.magic ([(__str ("children"), Obj.repr (children)); (__str ("is_end_of_string"), Obj.repr (is_end_of_string)); (__str ("start"), Obj.repr (start)); (__str ("end"), Obj.repr (end_)); (__str ("suffix_link"), Obj.repr (suffix_link))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and empty_suffix_tree_node () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (new_suffix_tree_node ([]) (false) (Obj.repr ((0 - 1))) (Obj.repr ((0 - 1))) (Obj.repr ((0 - 1)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and has_key m k =
  let __ret = ref false in
  (try
  (try List.iter (fun (key, _) ->
    try
  if (key = k) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let root = new_suffix_tree_node ([(__str ("a"), 1)]) (false) (Obj.repr ((0 - 1))) (Obj.repr ((0 - 1))) (Obj.repr ((0 - 1))) in
  let leaf = new_suffix_tree_node ([]) (true) (Obj.repr (0)) (Obj.repr (2)) (Obj.repr (0)) in
  let nodes = ref ([root; leaf]) in
  let root_check = ref (List.nth (!nodes) (0)) in
  let leaf_check = ref (List.nth (!nodes) (1)) in
  print_endline ((string_of_bool (has_key ((Obj.magic (Obj.obj (List.assoc (__str ("children")) (!root_check) : Obj.t) : ( string * int ) list) : (string * int) list)) ("a"))));
  print_endline ((string_of_bool ((Obj.obj (List.assoc (__str ("is_end_of_string")) (!leaf_check) : Obj.t) : bool))));
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("start")) (!leaf_check) : Obj.t) : int))));
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("end")) (!leaf_check) : Obj.t) : int))));
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("suffix_link")) (!leaf_check) : Obj.t) : int))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()