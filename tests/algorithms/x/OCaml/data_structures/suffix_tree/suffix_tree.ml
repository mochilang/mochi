(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_node () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("children"), Obj.repr ([])); (__str ("is_end_of_string"), Obj.repr (false)); (__str ("start"), Obj.repr (-(1))); (__str ("end"), Obj.repr (-(1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and has_key m k =
  let __ret = ref false in
  (try
  (try List.iter (fun (key, _) ->
    try
  if (key = k) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and add_suffix tree suffix index =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!tree) : Obj.t) : (string * Obj.t) list list)) in
  let node_idx = ref (0) in
  let j = ref (0) in
  (try while (!j < String.length (suffix)) do
    try
  let ch = String.sub (suffix) (!j) ((!j + 1) - !j) in
  let node = ref (List.nth (!nodes) (!node_idx)) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) in
  if not (has_key ((Obj.magic !children : (string * int) list)) (ch)) then (
  nodes := (List.append (!nodes) [(Obj.magic (new_node ()) : (string * Obj.t) list)]);
  let new_idx = (List.length (!nodes) - 1) in
  children := ((__str (ch), new_idx) :: List.remove_assoc (__str (ch)) !children);
  );
  node := ((__str ("children"), Obj.repr (!children)) :: List.remove_assoc (__str ("children")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !node_idx then !node else __x) (!nodes));
  node_idx := List.assoc (__str (ch)) (!children);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let node = ref (List.nth (!nodes) (!node_idx)) in
  node := ((__str ("is_end_of_string"), Obj.repr (true)) :: List.remove_assoc (__str ("is_end_of_string")) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str ("start"), Obj.repr (index)) :: List.remove_assoc (__str ("start")) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str ("end"), Obj.repr (((index + String.length (suffix)) - 1))) :: List.remove_assoc (__str ("end")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !node_idx then !node else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  __ret := (Obj.magic (!tree) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and build_suffix_tree tree =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let text = (Obj.obj (List.assoc (__str ("text")) (tree) : Obj.t) : string) in
  let n = String.length (text) in
  let i = ref (0) in
  let t = ref (tree) in
  (try while (!i < n) do
    try
  let suffix = ref ("") in
  let k = ref (!i) in
  (try while (!k < n) do
    try
  suffix := (!suffix ^ String.sub (text) (!k) ((!k + 1) - !k));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  t := add_suffix (t) (!suffix) (Obj.repr (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!t) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and new_suffix_tree text =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let tree = ref ([(__str ("text"), Obj.repr (text)); (__str ("nodes"), Obj.repr ([]))]) in
  tree := ((__str ("nodes"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("nodes")) (!tree) : Obj.t) : (string * Obj.t) list list)) [(Obj.magic (new_node ()) : (string * Obj.t) list)]))) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  tree := build_suffix_tree (!tree);
  __ret := (Obj.magic (!tree) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and search tree pattern =
  let __ret = ref false in
  (try
  let node_idx = ref (0) in
  let i = ref (0) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (tree) : Obj.t) : (string * Obj.t) list list)) in
  (try while (!i < String.length (pattern)) do
    try
  let ch = String.sub (pattern) (!i) ((!i + 1) - !i) in
  let node = ref (List.nth (!nodes) (!node_idx)) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) in
  if not (has_key ((Obj.magic !children : (string * int) list)) (ch)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  node_idx := List.assoc (__str (ch)) (!children);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let st = new_suffix_tree ("bananas") in
  print_endline ((string_of_bool (search (st) ("ana"))));
  print_endline ((string_of_bool (search (st) ("apple"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()