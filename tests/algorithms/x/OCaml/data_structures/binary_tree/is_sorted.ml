(* Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let _none = (0 - 1)
let rec inorder tree index =
  let __ret = ref ([] : (float) list) in
  (try
  let index = (Obj.magic index : int) in
  let res = ref (([] : (float) list)) in
  if (index = _none) then (
  __ret := (Obj.magic (!res) : float list); raise Return
  );
  let left_idx = List.nth ((Obj.obj (List.assoc (__str ("left")) (tree) : Obj.t) : int list)) (index) in
  if (left_idx <> _none) then (
  res := (!res @ inorder ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (left_idx)));
  );
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (tree) : Obj.t) : float list)) (index)) : float)]);
  let right_idx = List.nth ((Obj.obj (List.assoc (__str ("right")) (tree) : Obj.t) : int list)) (index) in
  if (right_idx <> _none) then (
  res := (!res @ inorder ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (right_idx)));
  );
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and is_sorted tree index =
  let __ret = ref false in
  (try
  let index = (Obj.magic index : int) in
  if (index = _none) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let left_idx = List.nth ((Obj.obj (List.assoc (__str ("left")) (tree) : Obj.t) : int list)) (index) in
  if (left_idx <> _none) then (
  if (List.nth ((Obj.obj (List.assoc (__str ("data")) (tree) : Obj.t) : float list)) (index) < List.nth ((Obj.obj (List.assoc (__str ("data")) (tree) : Obj.t) : float list)) (left_idx)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if not (is_sorted ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (left_idx))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  );
  let right_idx = List.nth ((Obj.obj (List.assoc (__str ("right")) (tree) : Obj.t) : int list)) (index) in
  if (right_idx <> _none) then (
  if (List.nth ((Obj.obj (List.assoc (__str ("data")) (tree) : Obj.t) : float list)) (index) > List.nth ((Obj.obj (List.assoc (__str ("data")) (tree) : Obj.t) : float list)) (right_idx)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if not (is_sorted ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (right_idx))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  );
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let tree1 = [(__str ("data"), Obj.repr ([2.1; 2.0; 2.2])); (__str ("left"), Obj.repr ([1; _none; _none])); (__str ("right"), Obj.repr ([2; _none; _none]))] in
  print_endline (((("Tree " ^ (__str (inorder (tree1) (Obj.repr (0))))) ^ " is sorted: ") ^ (string_of_bool (is_sorted (tree1) (Obj.repr (0))))));
  let tree2 = [(__str ("data"), Obj.repr ([2.1; 2.0; 2.0])); (__str ("left"), Obj.repr ([1; _none; _none])); (__str ("right"), Obj.repr ([2; _none; _none]))] in
  print_endline (((("Tree " ^ (__str (inorder (tree2) (Obj.repr (0))))) ^ " is sorted: ") ^ (string_of_bool (is_sorted (tree2) (Obj.repr (0))))));
  let tree3 = [(__str ("data"), Obj.repr ([2.1; 2.0; 2.1])); (__str ("left"), Obj.repr ([1; _none; _none])); (__str ("right"), Obj.repr ([2; _none; _none]))] in
  print_endline (((("Tree " ^ (__str (inorder (tree3) (Obj.repr (0))))) ^ " is sorted: ") ^ (string_of_bool (is_sorted (tree3) (Obj.repr (0))))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()