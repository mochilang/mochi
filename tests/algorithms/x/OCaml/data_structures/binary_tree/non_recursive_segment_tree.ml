(* Generated by Mochi transpiler v0.10.60 on 2025-08-07 17:13 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec build arr combine =
  let __ret = ref ([] : (int) list) in
  (try
  let n = List.length (arr) in
  let st = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (2 * n)) do
    try
  st := (List.append (!st) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < n) do
    try
  st := (List.mapi (fun __i __x -> if __i = (n + !i) then List.nth (arr) (!i) else __x) (!st));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := (n - 1);
  (try while (!i > 0) do
    try
  st := (List.mapi (fun __i __x -> if __i = !i then combine (Obj.repr (List.nth (!st) ((!i * 2)))) (Obj.repr (List.nth (!st) (((!i * 2) + 1)))) else __x) (!st));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!st) : int list); raise Return
  with Return -> !__ret)

and update st n combine p v =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = (Obj.magic n : int) in
  let p = (Obj.magic p : int) in
  let v = (Obj.magic v : int) in
  let idx = ref ((p + n)) in
  st := (List.mapi (fun __i __x -> if __i = !idx then v else __x) (!st));
  (try while (!idx > 1) do
    try
  idx := (!idx / 2);
  st := (List.mapi (fun __i __x -> if __i = !idx then combine (Obj.repr (List.nth (!st) ((!idx * 2)))) (Obj.repr (List.nth (!st) (((!idx * 2) + 1)))) else __x) (!st));
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and query st n combine left right =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  let l = ref ((left + n)) in
  let r = ref ((right + n)) in
  let res = ref (0) in
  let has = ref (false) in
  (try while (!l <= !r) do
    try
  if (((!l mod 2 + 2) mod 2) = 1) then (
  if not (!has) then (
  res := List.nth (st) (!l);
  has := true;
  ) else (
  res := (Obj.magic combine (Obj.repr (!res)) (Obj.repr (List.nth (st) (!l))) : int);
  );
  l := (!l + 1);
  );
  if (((!r mod 2 + 2) mod 2) = 0) then (
  if not (!has) then (
  res := List.nth (st) (!r);
  has := true;
  ) else (
  res := (Obj.magic combine (Obj.repr (!res)) (Obj.repr (List.nth (st) (!r))) : int);
  );
  r := (!r - 1);
  );
  l := (!l / 2);
  r := (!r / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and add a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  __ret := (Obj.magic ((a + b)) : int); raise Return
  with Return -> !__ret)

and min_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a < b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and max_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)


let arr1 = ref ([1; 2; 3])
let st1 = ref (build (!arr1) ((Obj.magic add : Obj.t -> Obj.t -> int)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (query (!st1) (Obj.repr (List.length (!arr1))) ((Obj.magic add : Obj.t -> Obj.t -> int)) (Obj.repr (0)) (Obj.repr (2)))));
  let arr2 = ref ([3; 1; 2]) in
  let st2 = ref (build (!arr2) ((Obj.magic min_int : Obj.t -> Obj.t -> int))) in
  print_endline ((string_of_int (query (!st2) (Obj.repr (List.length (!arr2))) ((Obj.magic min_int : Obj.t -> Obj.t -> int)) (Obj.repr (0)) (Obj.repr (2)))));
  let arr3 = ref ([2; 3; 1]) in
  let st3 = ref (build (!arr3) ((Obj.magic max_int : Obj.t -> Obj.t -> int))) in
  print_endline ((string_of_int (query (!st3) (Obj.repr (List.length (!arr3))) ((Obj.magic max_int : Obj.t -> Obj.t -> int)) (Obj.repr (0)) (Obj.repr (2)))));
  let arr4 = ref ([1; 5; 7; -(1); 6]) in
  let n4 = List.length (!arr4) in
  let st4 = ref (build (!arr4) ((Obj.magic add : Obj.t -> Obj.t -> int))) in
  ignore (update (st4) (Obj.repr (n4)) ((Obj.magic add : Obj.t -> Obj.t -> int)) (Obj.repr (1)) (Obj.repr (-(1))));
  ignore (update (st4) (Obj.repr (n4)) ((Obj.magic add : Obj.t -> Obj.t -> int)) (Obj.repr (2)) (Obj.repr (3)));
  print_endline ((string_of_int (query (!st4) (Obj.repr (n4)) ((Obj.magic add : Obj.t -> Obj.t -> int)) (Obj.repr (1)) (Obj.repr (2)))));
  print_endline ((string_of_int (query (!st4) (Obj.repr (n4)) ((Obj.magic add : Obj.t -> Obj.t -> int)) (Obj.repr (1)) (Obj.repr (1)))));
  ignore (update (st4) (Obj.repr (n4)) ((Obj.magic add : Obj.t -> Obj.t -> int)) (Obj.repr (4)) (Obj.repr (1)));
  print_endline ((string_of_int (query (!st4) (Obj.repr (n4)) ((Obj.magic add : Obj.t -> Obj.t -> int)) (Obj.repr (3)) (Obj.repr (4)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()