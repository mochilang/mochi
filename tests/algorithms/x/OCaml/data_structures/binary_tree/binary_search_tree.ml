(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_node value =
  let __ret = ref [] in
  (try
  let value = (Obj.magic value : int) in
  __ret := (Obj.magic ([Obj.repr (value); Obj.repr (nil); Obj.repr (nil)]) : Obj.t list); raise Return
  with Return -> !__ret)

and insert node value =
  let __ret = ref [] in
  (try
  let value = (Obj.magic value : int) in
  if ((Obj.repr (!node)) = nil) then (
  __ret := (Obj.magic (create_node (Obj.repr (value))) : Obj.t list); raise Return
  );
  if (value < List.nth (!node) (0)) then (
  node := (List.mapi (fun __i __x -> if __i = 1 then insert (ref (List.nth (!node) (1))) (Obj.repr (value)) else __x) (!node));
  ) else (
  if (value > List.nth (!node) (0)) then (
  node := (List.mapi (fun __i __x -> if __i = 2 then insert (ref (List.nth (!node) (2))) (Obj.repr (value)) else __x) (!node));
  );
  );
  __ret := (Obj.magic (!node) : Obj.t list); raise Return
  with Return -> !__ret)

and search node value =
  let __ret = ref false in
  (try
  let value = (Obj.magic value : int) in
  if ((Obj.repr (node)) = nil) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (value = List.nth (node) (0)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if (value < List.nth (node) (0)) then (
  __ret := (Obj.magic (search ((Obj.magic List.nth (node) (1) : Obj.t list)) (Obj.repr (value))) : bool); raise Return
  );
  __ret := (Obj.magic (search ((Obj.magic List.nth (node) (2) : Obj.t list)) (Obj.repr (value))) : bool); raise Return
  with Return -> !__ret)

and inorder node acc =
  let __ret = ref ([] : (int) list) in
  (try
  if ((Obj.repr (node)) = nil) then (
  __ret := (Obj.magic (acc) : int list); raise Return
  );
  let left_acc = ref (inorder ((Obj.magic List.nth (node) (1) : Obj.t list)) (acc)) in
  let with_node = ref ((List.append (!left_acc) [(Obj.magic ((Obj.magic List.nth (node) (0) : int)) : int)])) in
  __ret := (Obj.magic (inorder ((Obj.magic List.nth (node) (2) : Obj.t list)) (!with_node)) : int list); raise Return
  with Return -> !__ret)

and find_min node =
  let __ret = ref 0 in
  (try
  let current = ref (node) in
  (try while ((Obj.repr (List.nth (!current) (1))) <> nil) do
    try
  current := List.nth (!current) (1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!current) (0)) : int); raise Return
  with Return -> !__ret)

and find_max node =
  let __ret = ref 0 in
  (try
  let current = ref (node) in
  (try while ((Obj.repr (List.nth (!current) (2))) <> nil) do
    try
  current := List.nth (!current) (2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!current) (0)) : int); raise Return
  with Return -> !__ret)

and delete node value =
  let __ret = ref [] in
  (try
  let value = (Obj.magic value : int) in
  if ((Obj.repr (!node)) = nil) then (
  __ret := (Obj.magic (nil) : Obj.t list); raise Return
  );
  if (value < List.nth (!node) (0)) then (
  node := (List.mapi (fun __i __x -> if __i = 1 then delete (ref (List.nth (!node) (1))) (Obj.repr (value)) else __x) (!node));
  ) else (
  if (value > List.nth (!node) (0)) then (
  node := (List.mapi (fun __i __x -> if __i = 2 then delete (ref (List.nth (!node) (2))) (Obj.repr (value)) else __x) (!node));
  ) else (
  if ((Obj.repr (List.nth (!node) (1))) = nil) then (
  __ret := (Obj.magic (List.nth (!node) (2)) : Obj.t list); raise Return
  );
  if ((Obj.repr (List.nth (!node) (2))) = nil) then (
  __ret := (Obj.magic (List.nth (!node) (1)) : Obj.t list); raise Return
  );
  let min_val = find_min ((Obj.magic List.nth (!node) (2) : Obj.t list)) in
  node := (List.mapi (fun __i __x -> if __i = 0 then min_val else __x) (!node));
  node := (List.mapi (fun __i __x -> if __i = 2 then delete (ref (List.nth (!node) (2))) (Obj.repr (min_val)) else __x) (!node));
  );
  );
  __ret := (Obj.magic (!node) : Obj.t list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let root = ref (([] : (Obj.t) list)) in
  let nums = ref ([8; 3; 6; 1; 10; 14; 13; 4; 7]) in
  (try List.iter (fun v ->
    try
  root := insert (root) (Obj.repr (v));
    with Continue -> ()) (!nums) with Break -> ());
  print_endline ((__str (inorder ((Obj.magic !root : Obj.t list)) ((Obj.magic [] : int list)))));
  print_endline (string_of_bool (search ((Obj.magic !root : Obj.t list)) (Obj.repr (6))));
  print_endline (string_of_bool (search ((Obj.magic !root : Obj.t list)) (Obj.repr (20))));
  print_endline (string_of_int (find_min ((Obj.magic !root : Obj.t list))));
  print_endline (string_of_int (find_max ((Obj.magic !root : Obj.t list))));
  root := delete (root) (Obj.repr (6));
  print_endline ((__str (inorder ((Obj.magic !root : Obj.t list)) ((Obj.magic [] : int list)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()