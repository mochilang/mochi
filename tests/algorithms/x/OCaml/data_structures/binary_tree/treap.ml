(* Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let _nil = (0 - 1)
let node_values = ref (([] : (int) list))
let node_priors = ref (([] : (float) list))
let node_lefts = ref (([] : (int) list))
let node_rights = ref (([] : (int) list))
let seed = ref (1)
let rec random () =
  let __ret = ref 0.0 in
  (try
  seed := ((((!seed * 13) + 7) mod 100 + 100) mod 100);
  __ret := (Obj.magic ((float_of_int (!seed) /. 100.0)) : float); raise Return
  with Return -> !__ret)

and new_node value =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  node_values := (List.append (!node_values) [(Obj.magic (value) : int)]);
  node_priors := (List.append (!node_priors) [(Obj.magic (random ()) : float)]);
  node_lefts := (List.append (!node_lefts) [(Obj.magic (_nil) : int)]);
  node_rights := (List.append (!node_rights) [(Obj.magic (_nil) : int)]);
  __ret := (Obj.magic ((List.length (!node_values) - 1)) : int); raise Return
  with Return -> !__ret)

and split root value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let root = (Obj.magic root : int) in
  let value = (Obj.magic value : int) in
  if (root = _nil) then (
  __ret := (Obj.magic ([(__str ("left"), Obj.repr (_nil)); (__str ("right"), Obj.repr (_nil))]) : (string * Obj.t) list); raise Return
  );
  if (value < List.nth (!node_values) (root)) then (
  let res = split (Obj.repr (List.nth (!node_lefts) (root))) (Obj.repr (value)) in
  node_lefts := (List.mapi (fun __i __x -> if __i = root then (Obj.obj (List.assoc (__str ("right")) (res) : Obj.t) : int) else __x) (!node_lefts));
  __ret := (Obj.magic ([(__str ("left"), Obj.repr ((Obj.obj (List.assoc (__str ("left")) (res) : Obj.t) : int))); (__str ("right"), Obj.repr (root))]) : (string * Obj.t) list); raise Return
  );
  let res = split (Obj.repr (List.nth (!node_rights) (root))) (Obj.repr (value)) in
  node_rights := (List.mapi (fun __i __x -> if __i = root then (Obj.obj (List.assoc (__str ("left")) (res) : Obj.t) : int) else __x) (!node_rights));
  __ret := (Obj.magic ([(__str ("left"), Obj.repr (root)); (__str ("right"), Obj.repr ((Obj.obj (List.assoc (__str ("right")) (res) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and merge left right =
  let __ret = ref 0 in
  (try
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  if (left = _nil) then (
  __ret := (Obj.magic (right) : int); raise Return
  );
  if (right = _nil) then (
  __ret := (Obj.magic (left) : int); raise Return
  );
  if (List.nth (!node_priors) (left) < List.nth (!node_priors) (right)) then (
  node_rights := (List.mapi (fun __i __x -> if __i = left then merge (Obj.repr (List.nth (!node_rights) (left))) (Obj.repr (right)) else __x) (!node_rights));
  __ret := (Obj.magic (left) : int); raise Return
  );
  node_lefts := (List.mapi (fun __i __x -> if __i = right then merge (Obj.repr (left)) (Obj.repr (List.nth (!node_lefts) (right))) else __x) (!node_lefts));
  __ret := (Obj.magic (right) : int); raise Return
  with Return -> !__ret)

and insert root value =
  let __ret = ref 0 in
  (try
  let root = (Obj.magic root : int) in
  let value = (Obj.magic value : int) in
  let node = new_node (Obj.repr (value)) in
  let res = split (Obj.repr (root)) (Obj.repr (value)) in
  __ret := (Obj.magic (merge (Obj.repr (merge (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (res) : Obj.t) : int))) (Obj.repr (node)))) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (res) : Obj.t) : int)))) : int); raise Return
  with Return -> !__ret)

and erase root value =
  let __ret = ref 0 in
  (try
  let root = (Obj.magic root : int) in
  let value = (Obj.magic value : int) in
  let res1 = split (Obj.repr (root)) (Obj.repr ((value - 1))) in
  let res2 = split (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (res1) : Obj.t) : int))) (Obj.repr (value)) in
  __ret := (Obj.magic (merge (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (res1) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (res2) : Obj.t) : int)))) : int); raise Return
  with Return -> !__ret)

and inorder i acc =
  let __ret = ref ([] : (int) list) in
  (try
  let i = (Obj.magic i : int) in
  if (i = _nil) then (
  __ret := (Obj.magic (acc) : int list); raise Return
  );
  let left_acc = ref (inorder (Obj.repr (List.nth (!node_lefts) (i))) (acc)) in
  let with_node = ref ((List.append (!left_acc) [(Obj.magic (List.nth (!node_values) (i)) : int)])) in
  __ret := (Obj.magic (inorder (Obj.repr (List.nth (!node_rights) (i))) (!with_node)) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let root = ref (_nil) in
  root := insert (Obj.repr (!root)) (Obj.repr (1));
  print_endline ((__str (inorder (Obj.repr (!root)) ((Obj.magic [] : int list)))));
  root := insert (Obj.repr (!root)) (Obj.repr (3));
  root := insert (Obj.repr (!root)) (Obj.repr (5));
  root := insert (Obj.repr (!root)) (Obj.repr (17));
  root := insert (Obj.repr (!root)) (Obj.repr (19));
  root := insert (Obj.repr (!root)) (Obj.repr (2));
  root := insert (Obj.repr (!root)) (Obj.repr (16));
  root := insert (Obj.repr (!root)) (Obj.repr (4));
  root := insert (Obj.repr (!root)) (Obj.repr (0));
  print_endline ((__str (inorder (Obj.repr (!root)) ((Obj.magic [] : int list)))));
  root := insert (Obj.repr (!root)) (Obj.repr (4));
  root := insert (Obj.repr (!root)) (Obj.repr (4));
  root := insert (Obj.repr (!root)) (Obj.repr (4));
  print_endline ((__str (inorder (Obj.repr (!root)) ((Obj.magic [] : int list)))));
  root := erase (Obj.repr (!root)) (Obj.repr (0));
  print_endline ((__str (inorder (Obj.repr (!root)) ((Obj.magic [] : int list)))));
  root := erase (Obj.repr (!root)) (Obj.repr (4));
  print_endline ((__str (inorder (Obj.repr (!root)) ((Obj.magic [] : int list)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()