(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec count_nodes nodes idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let node = List.nth (nodes) (idx) in
  __ret := (Obj.magic (((count_nodes (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (node) : Obj.t) : int))) + count_nodes (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (node) : Obj.t) : int)))) + 1)) : int); raise Return
  with Return -> !__ret)

and count_coins nodes idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let node = List.nth (nodes) (idx) in
  __ret := (Obj.magic (((count_coins (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (node) : Obj.t) : int))) + count_coins (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (node) : Obj.t) : int)))) + (Obj.obj (List.assoc (__str ("data")) (node) : Obj.t) : int))) : int); raise Return
  with Return -> !__ret)


let total_moves = ref (0)
let rec iabs x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic (-(x)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

and dfs nodes idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let node = List.nth (nodes) (idx) in
  let left_excess = dfs (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (node) : Obj.t) : int))) in
  let right_excess = dfs (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (node) : Obj.t) : int))) in
  let abs_left = iabs (Obj.repr (left_excess)) in
  let abs_right = iabs (Obj.repr (right_excess)) in
  total_moves := ((!total_moves + abs_left) + abs_right);
  __ret := (Obj.magic (((((Obj.obj (List.assoc (__str ("data")) (node) : Obj.t) : int) + left_excess) + right_excess) - 1)) : int); raise Return
  with Return -> !__ret)

and distribute_coins nodes root =
  let __ret = ref 0 in
  (try
  let root = (Obj.magic root : int) in
  if (root = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (count_nodes (nodes) (Obj.repr (root)) <> count_coins (nodes) (Obj.repr (root))) then (
  (failwith ("The nodes number should be same as the number of coins"));
  );
  total_moves := 0;
  ignore (dfs (nodes) (Obj.repr (root)));
  __ret := (Obj.magic (!total_moves) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let example1 = ref ([[(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]; [(__str ("data"), Obj.repr (3)); (__str ("left"), Obj.repr (2)); (__str ("right"), Obj.repr (3))]; [(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]; [(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]]) in
  let example2 = ref ([[(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]; [(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (2)); (__str ("right"), Obj.repr (3))]; [(__str ("data"), Obj.repr (3)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]; [(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]]) in
  let example3 = ref ([[(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]; [(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (2)); (__str ("right"), Obj.repr (3))]; [(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]; [(__str ("data"), Obj.repr (3)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]]) in
  print_endline (string_of_int (distribute_coins ((Obj.magic !example1 : (string * Obj.t) list list)) (Obj.repr (1))));
  print_endline (string_of_int (distribute_coins ((Obj.magic !example2 : (string * Obj.t) list list)) (Obj.repr (1))));
  print_endline (string_of_int (distribute_coins ((Obj.magic !example3 : (string * Obj.t) list list)) (Obj.repr (1))));
  print_endline (string_of_int (distribute_coins ((Obj.magic [[(__str ("data"), Obj.repr (0)); (__str ("left"), Obj.repr (0)); (__str ("right"), Obj.repr (0))]] : (string * Obj.t) list list)) (Obj.repr (0))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()