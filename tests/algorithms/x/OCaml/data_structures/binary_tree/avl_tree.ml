(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _nil = (0 - 1)
let nodes = ref (([] : ((string * int) list) list))
let rec new_node value =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  let node = ref ([(__str ("data"), value); (__str ("left"), _nil); (__str ("right"), _nil); (__str ("height"), 1)]) in
  nodes := (List.append (!nodes) [(Obj.magic (!node) : (string * int) list)]);
  __ret := (Obj.magic ((List.length (!nodes) - 1)) : int); raise Return
  with Return -> !__ret)

and get_height i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  if (i = _nil) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  __ret := (Obj.magic (List.assoc (__str ("height")) (List.nth (!nodes) (i))) : int); raise Return
  with Return -> !__ret)

and my_max a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  );
  __ret := (Obj.magic (b) : int); raise Return
  with Return -> !__ret)

and update_height i =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = (Obj.magic i : int) in
  nodes := (List.mapi (fun __i __x -> if __i = i then ((__str ("height"), Obj.repr ((my_max (Obj.repr (get_height (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (i)))))) (Obj.repr (get_height (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (i)))))) + 1))) :: List.remove_assoc (__str ("height")) (Obj.magic (List.nth (!nodes) (i)) : (string * Obj.t) list)) else __x) (!nodes));
    !__ret
  with Return -> !__ret)

and right_rotation i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let left = List.assoc (__str ("left")) (List.nth (!nodes) (i)) in
  nodes := (List.mapi (fun __i __x -> if __i = i then ((__str ("left"), Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (left)))) :: List.remove_assoc (__str ("left")) (Obj.magic (List.nth (!nodes) (i)) : (string * Obj.t) list)) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = left then ((__str ("right"), Obj.repr (i)) :: List.remove_assoc (__str ("right")) (Obj.magic (List.nth (!nodes) (left)) : (string * Obj.t) list)) else __x) (!nodes));
  ignore (update_height (Obj.repr (i)));
  ignore (update_height (Obj.repr (left)));
  __ret := (Obj.magic (left) : int); raise Return
  with Return -> !__ret)

and left_rotation i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let right = List.assoc (__str ("right")) (List.nth (!nodes) (i)) in
  nodes := (List.mapi (fun __i __x -> if __i = i then ((__str ("right"), Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (right)))) :: List.remove_assoc (__str ("right")) (Obj.magic (List.nth (!nodes) (i)) : (string * Obj.t) list)) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = right then ((__str ("left"), Obj.repr (i)) :: List.remove_assoc (__str ("left")) (Obj.magic (List.nth (!nodes) (right)) : (string * Obj.t) list)) else __x) (!nodes));
  ignore (update_height (Obj.repr (i)));
  ignore (update_height (Obj.repr (right)));
  __ret := (Obj.magic (right) : int); raise Return
  with Return -> !__ret)

and lr_rotation i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  nodes := (List.mapi (fun __i __x -> if __i = i then ((__str ("left"), Obj.repr (left_rotation (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (i)))))) :: List.remove_assoc (__str ("left")) (Obj.magic (List.nth (!nodes) (i)) : (string * Obj.t) list)) else __x) (!nodes));
  __ret := (Obj.magic (right_rotation (Obj.repr (i))) : int); raise Return
  with Return -> !__ret)

and rl_rotation i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  nodes := (List.mapi (fun __i __x -> if __i = i then ((__str ("right"), Obj.repr (right_rotation (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (i)))))) :: List.remove_assoc (__str ("right")) (Obj.magic (List.nth (!nodes) (i)) : (string * Obj.t) list)) else __x) (!nodes));
  __ret := (Obj.magic (left_rotation (Obj.repr (i))) : int); raise Return
  with Return -> !__ret)

and insert_node i value =
  let __ret = ref 0 in
  (try
  i := (Obj.magic !i : int);
  let value = (Obj.magic value : int) in
  if (!i = _nil) then (
  __ret := (Obj.magic (new_node (Obj.repr (value))) : int); raise Return
  );
  if (value < List.assoc (__str ("data")) (List.nth (!nodes) (!i))) then (
  nodes := (List.mapi (fun __i __x -> if __i = !i then ((__str ("left"), Obj.repr (insert_node (ref (List.assoc (__str ("left")) (List.nth (!nodes) (!i)))) (Obj.repr (value)))) :: List.remove_assoc (__str ("left")) (Obj.magic (List.nth (!nodes) (!i)) : (string * Obj.t) list)) else __x) (!nodes));
  if ((get_height (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (!i)))) - get_height (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (!i))))) = 2) then (
  if (value < List.assoc (__str ("data")) (List.nth (!nodes) (List.assoc (__str ("left")) (List.nth (!nodes) (!i))))) then (
  i := right_rotation (Obj.repr (!i));
  ) else (
  i := lr_rotation (Obj.repr (!i));
  );
  );
  ) else (
  nodes := (List.mapi (fun __i __x -> if __i = !i then ((__str ("right"), Obj.repr (insert_node (ref (List.assoc (__str ("right")) (List.nth (!nodes) (!i)))) (Obj.repr (value)))) :: List.remove_assoc (__str ("right")) (Obj.magic (List.nth (!nodes) (!i)) : (string * Obj.t) list)) else __x) (!nodes));
  if ((get_height (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (!i)))) - get_height (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (!i))))) = 2) then (
  if (value < List.assoc (__str ("data")) (List.nth (!nodes) (List.assoc (__str ("right")) (List.nth (!nodes) (!i))))) then (
  i := rl_rotation (Obj.repr (!i));
  ) else (
  i := left_rotation (Obj.repr (!i));
  );
  );
  );
  ignore (update_height (Obj.repr (!i)));
  __ret := (Obj.magic (!i) : int); raise Return
  with Return -> !__ret)

and get_left_most i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let cur = ref (i) in
  (try while (List.assoc (__str ("left")) (List.nth (!nodes) (!cur)) <> _nil) do
    try
  cur := List.assoc (__str ("left")) (List.nth (!nodes) (!cur));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.assoc (__str ("data")) (List.nth (!nodes) (!cur))) : int); raise Return
  with Return -> !__ret)

and del_node i value =
  let __ret = ref 0 in
  (try
  i := (Obj.magic !i : int);
  let value = (Obj.magic value : int) in
  if (!i = _nil) then (
  __ret := (Obj.magic (_nil) : int); raise Return
  );
  if (value < List.assoc (__str ("data")) (List.nth (!nodes) (!i))) then (
  nodes := (List.mapi (fun __i __x -> if __i = !i then ((__str ("left"), Obj.repr (del_node (ref (List.assoc (__str ("left")) (List.nth (!nodes) (!i)))) (Obj.repr (value)))) :: List.remove_assoc (__str ("left")) (Obj.magic (List.nth (!nodes) (!i)) : (string * Obj.t) list)) else __x) (!nodes));
  ) else (
  if (value > List.assoc (__str ("data")) (List.nth (!nodes) (!i))) then (
  nodes := (List.mapi (fun __i __x -> if __i = !i then ((__str ("right"), Obj.repr (del_node (ref (List.assoc (__str ("right")) (List.nth (!nodes) (!i)))) (Obj.repr (value)))) :: List.remove_assoc (__str ("right")) (Obj.magic (List.nth (!nodes) (!i)) : (string * Obj.t) list)) else __x) (!nodes));
  ) else (
  if ((List.assoc (__str ("left")) (List.nth (!nodes) (!i)) <> _nil) && (List.assoc (__str ("right")) (List.nth (!nodes) (!i)) <> _nil)) then (
  let temp = get_left_most (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (!i)))) in
  nodes := (List.mapi (fun __i __x -> if __i = !i then ((__str ("data"), Obj.repr (temp)) :: List.remove_assoc (__str ("data")) (Obj.magic (List.nth (!nodes) (!i)) : (string * Obj.t) list)) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = !i then ((__str ("right"), Obj.repr (del_node (ref (List.assoc (__str ("right")) (List.nth (!nodes) (!i)))) (Obj.repr (temp)))) :: List.remove_assoc (__str ("right")) (Obj.magic (List.nth (!nodes) (!i)) : (string * Obj.t) list)) else __x) (!nodes));
  ) else (
  if (List.assoc (__str ("left")) (List.nth (!nodes) (!i)) <> _nil) then (
  i := List.assoc (__str ("left")) (List.nth (!nodes) (!i));
  ) else (
  i := List.assoc (__str ("right")) (List.nth (!nodes) (!i));
  );
  );
  );
  );
  if (!i = _nil) then (
  __ret := (Obj.magic (_nil) : int); raise Return
  );
  let lh = get_height (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (!i)))) in
  let rh = get_height (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (!i)))) in
  if ((rh - lh) = 2) then (
  if (get_height (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (List.assoc (__str ("right")) (List.nth (!nodes) (!i)))))) > get_height (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (List.assoc (__str ("right")) (List.nth (!nodes) (!i))))))) then (
  i := left_rotation (Obj.repr (!i));
  ) else (
  i := rl_rotation (Obj.repr (!i));
  );
  ) else (
  if ((lh - rh) = 2) then (
  if (get_height (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (List.assoc (__str ("left")) (List.nth (!nodes) (!i)))))) > get_height (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (List.assoc (__str ("left")) (List.nth (!nodes) (!i))))))) then (
  i := right_rotation (Obj.repr (!i));
  ) else (
  i := lr_rotation (Obj.repr (!i));
  );
  );
  );
  ignore (update_height (Obj.repr (!i)));
  __ret := (Obj.magic (!i) : int); raise Return
  with Return -> !__ret)

and inorder i =
  let __ret = ref "" in
  (try
  let i = (Obj.magic i : int) in
  if (i = _nil) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let left = inorder (Obj.repr (List.assoc (__str ("left")) (List.nth (!nodes) (i)))) in
  let right = inorder (Obj.repr (List.assoc (__str ("right")) (List.nth (!nodes) (i)))) in
  let res = ref ((string_of_int (List.assoc (__str ("data")) (List.nth (!nodes) (i))))) in
  if (left <> "") then (
  res := ((left ^ " ") ^ !res);
  );
  if (right <> "") then (
  res := ((!res ^ " ") ^ right);
  );
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  nodes := [];
  let root = ref (_nil) in
  root := insert_node (root) (Obj.repr (4));
  root := insert_node (root) (Obj.repr (2));
  root := insert_node (root) (Obj.repr (3));
  print_endline ((inorder (Obj.repr (!root))));
  print_endline ((string_of_int (get_height (Obj.repr (!root)))));
  root := del_node (root) (Obj.repr (3));
  print_endline ((inorder (Obj.repr (!root))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()