(* Generated by Mochi transpiler v0.10.72 on 2025-08-24 16:59 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec dfs node target current =
  let __ret = ref 0 in
  (try
  let node = (Obj.magic node : (string * Obj.t) list) in
  let target = (Obj.magic target : int) in
  let current = (Obj.magic current : int) in
  __ret := (Obj.magic ((match node with | [("tag", (__tag0 : Obj.t))] when (__str (__tag0) = "Empty") -> (Obj.magic (0) : int) | [("tag", (__tag1 : Obj.t)); ("left", (l : Obj.t)); ("value", (v : Obj.t)); ("right", (r : Obj.t))] when (__str (__tag1) = "Node") -> (Obj.magic (((if ((current + v) = target) then 1 else 0 + dfs (l) (Obj.repr (target)) (Obj.repr ((current + v)))) + dfs (r) (Obj.repr (target)) (Obj.repr ((current + v))))) : int))) : int); raise Return
  with Return -> !__ret)

and path_sum node target =
  let __ret = ref 0 in
  (try
  let node = (Obj.magic node : (string * Obj.t) list) in
  let target = (Obj.magic target : int) in
  __ret := (Obj.magic ((match node with | [("tag", (__tag0 : Obj.t))] when (__str (__tag0) = "Empty") -> (Obj.magic (0) : int) | [("tag", (__tag1 : Obj.t)); ("left", (l : Obj.t)); ("value", (v : Obj.t)); ("right", (r : Obj.t))] when (__str (__tag1) = "Node") -> (Obj.magic (((dfs (node) (Obj.repr (target)) (Obj.repr (0)) + path_sum (l) (Obj.repr (target))) + path_sum (r) (Obj.repr (target)))) : int))) : int); raise Return
  with Return -> !__ret)

and sample_tree_one () =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (10)); (__str (Obj.repr ("left")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (5)); (__str (Obj.repr ("left")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (3)); (__str (Obj.repr ("left")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (3)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))])); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (-(2))); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))]))])); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (2)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (1)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))]))]))])); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (-(3))); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (11)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))]))]))]); raise Return
  with Return -> !__ret)

and sample_tree_two () =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (10)); (__str (Obj.repr ("left")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (5)); (__str (Obj.repr ("left")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (3)); (__str (Obj.repr ("left")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (3)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))])); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (-(2))); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))]))])); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (2)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (1)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))]))]))])); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (-(3))); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr ([(__str (Obj.repr ("tag")), Obj.repr ("Node")); (__str (Obj.repr ("value")), Obj.repr (10)); (__str (Obj.repr ("left")), Obj.repr (_empty)); (__str (Obj.repr ("right")), Obj.repr (_empty))]))]))]); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let tree1 = ref (sample_tree_one ()) in
  print_endline (string_of_int (path_sum (!tree1) (Obj.repr (8))));
  print_endline (string_of_int (path_sum (!tree1) (Obj.repr (7))));
  let tree2 = ref (sample_tree_two ()) in
  print_endline (string_of_int (path_sum (!tree2) (Obj.repr (8))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
