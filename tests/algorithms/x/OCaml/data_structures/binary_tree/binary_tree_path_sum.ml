(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _dyn_add a b =
  if Obj.is_int a && Obj.is_int b then
    Obj.repr ((Obj.magic a : int) + (Obj.magic b : int))
  else
    let af = if Obj.is_int a then float_of_int (Obj.magic a : int) else (Obj.magic a : float) in
    let bf = if Obj.is_int b then float_of_int (Obj.magic b : int) else (Obj.magic b : float) in
    Obj.repr (af +. bf)

let _dyn_sub a b =
  if Obj.is_int a && Obj.is_int b then
    Obj.repr ((Obj.magic a : int) - (Obj.magic b : int))
  else
    let af = if Obj.is_int a then float_of_int (Obj.magic a : int) else (Obj.magic a : float) in
    let bf = if Obj.is_int b then float_of_int (Obj.magic b : int) else (Obj.magic b : float) in
    Obj.repr (af -. bf)

let _dyn_mul a b =
  if Obj.is_int a && Obj.is_int b then
    Obj.repr ((Obj.magic a : int) * (Obj.magic b : int))
  else
    let af = if Obj.is_int a then float_of_int (Obj.magic a : int) else (Obj.magic a : float) in
    let bf = if Obj.is_int b then float_of_int (Obj.magic b : int) else (Obj.magic b : float) in
    Obj.repr (af *. bf)

let _dyn_div a b =
  let af = if Obj.is_int a then float_of_int (Obj.magic a : int) else (Obj.magic a : float) in
  let bf = if Obj.is_int b then float_of_int (Obj.magic b : int) else (Obj.magic b : float) in
  Obj.repr (af /. bf)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec dfs node target current =
  let __ret = ref 0 in
  (try
  let target = (Obj.magic target : int) in
  let current = (Obj.magic current : int) in
  __ret := (Obj.magic ((match node with | _empty -> 0 | [(__str ("tag"), "Node"); (__str ("left"), l); (__str ("value"), v); (__str ("right"), r)] -> ((if ((_dyn_add (current) (v)) = target) then 1 else 0 + dfs ((Obj.magic l : Obj.t)) (Obj.repr (target)) ((Obj.magic (_dyn_add (current) (v)) : int))) + dfs ((Obj.magic r : Obj.t)) (Obj.repr (target)) ((Obj.magic (_dyn_add (current) (v)) : int))))) : int); raise Return
  with Return -> !__ret)

and path_sum node target =
  let __ret = ref 0 in
  (try
  let target = (Obj.magic target : int) in
  __ret := (Obj.magic ((match node with | _empty -> 0 | [(__str ("tag"), "Node"); (__str ("left"), l); (__str ("value"), v); (__str ("right"), r)] -> ((dfs (node) (Obj.repr (target)) (Obj.repr (0)) + path_sum ((Obj.magic l : Obj.t)) (Obj.repr (target))) + path_sum ((Obj.magic r : Obj.t)) (Obj.repr (target))))) : int); raise Return
  with Return -> !__ret)

and sample_tree_one () =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := Obj.repr ([(__str ("tag"), "Node"); (__str ("value"), 10); (__str ("left"), [(__str ("tag"), "Node"); (__str ("value"), 5); (__str ("left"), [(__str ("tag"), "Node"); (__str ("value"), 3); (__str ("left"), [(__str ("tag"), "Node"); (__str ("value"), 3); (__str ("left"), _empty); (__str ("right"), _empty)]); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), -(2)); (__str ("left"), _empty); (__str ("right"), _empty)])]); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), 2); (__str ("left"), _empty); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), 1); (__str ("left"), _empty); (__str ("right"), _empty)])])]); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), -(3)); (__str ("left"), _empty); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), 11); (__str ("left"), _empty); (__str ("right"), _empty)])])]); raise Return
  with Return -> !__ret)

and sample_tree_two () =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := Obj.repr ([(__str ("tag"), "Node"); (__str ("value"), 10); (__str ("left"), [(__str ("tag"), "Node"); (__str ("value"), 5); (__str ("left"), [(__str ("tag"), "Node"); (__str ("value"), 3); (__str ("left"), [(__str ("tag"), "Node"); (__str ("value"), 3); (__str ("left"), _empty); (__str ("right"), _empty)]); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), -(2)); (__str ("left"), _empty); (__str ("right"), _empty)])]); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), 2); (__str ("left"), _empty); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), 1); (__str ("left"), _empty); (__str ("right"), _empty)])])]); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), -(3)); (__str ("left"), _empty); (__str ("right"), [(__str ("tag"), "Node"); (__str ("value"), 10); (__str ("left"), _empty); (__str ("right"), _empty)])])]); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let tree1 = sample_tree_one () in
  print_endline (string_of_int (path_sum (tree1) (Obj.repr (8))));
  print_endline (string_of_int (path_sum (tree1) (Obj.repr (7))));
  let tree2 = sample_tree_two () in
  print_endline (string_of_int (path_sum (tree2) (Obj.repr (8))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()