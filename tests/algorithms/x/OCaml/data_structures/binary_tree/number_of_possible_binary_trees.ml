(* Generated by Mochi transpiler v0.10.60 on 2025-08-07 17:13 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binomial_coefficient n k =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let k = (Obj.magic k : int) in
  let result = ref (1) in
  let kk = ref (k) in
  if (k > (n - k)) then (
  kk := (n - k);
  );
  (try for i = 0 to (!kk - 1) do
    try
  result := (!result * (n - i));
  result := (!result / (i + 1));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and catalan_number node_count =
  let __ret = ref 0 in
  (try
  let node_count = (Obj.magic node_count : int) in
  __ret := (Obj.magic ((binomial_coefficient (Obj.repr ((2 * node_count))) (Obj.repr (node_count)) / (node_count + 1))) : int); raise Return
  with Return -> !__ret)

and factorial n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  print_endline ("factorial() not defined for negative values");
  __ret := (Obj.magic (0) : int); raise Return
  );
  let result = ref (1) in
  (try for i = 1 to ((n + 1) - 1) do
    try
  result := (!result * i);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and binary_tree_count node_count =
  let __ret = ref 0 in
  (try
  let node_count = (Obj.magic node_count : int) in
  __ret := (Obj.magic ((catalan_number (Obj.repr (node_count)) * factorial (Obj.repr (node_count)))) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Enter the number of nodes:");
  let input_str = (try read_line () with End_of_file -> "") in
  let node_count = int_of_string (input_str) in
  if (node_count <= 0) then (
  print_endline ("We need some nodes to work with.");
  ) else (
  let bst = catalan_number (Obj.repr (node_count)) in
  let bt = binary_tree_count (Obj.repr (node_count)) in
  print_endline ("Given");
  print_endline (string_of_int node_count);
  print_endline ("nodes, there are");
  print_endline (string_of_int bt);
  print_endline ("binary trees and");
  print_endline (string_of_int bst);
  print_endline ("binary search trees.");
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()