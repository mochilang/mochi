(* Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:03 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec min_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a < b) then (
  __ret := (Obj.magic (a) : int); raise Return
  );
  __ret := (Obj.magic (b) : int); raise Return
  with Return -> !__ret)

and max_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  );
  __ret := (Obj.magic (b) : int); raise Return
  with Return -> !__ret)

and solver nodes idx =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = (0 - 1)) then (
  __ret := (Obj.magic ([(__str ("is_bst"), Obj.repr (true)); (__str ("min_val"), Obj.repr (2147483647)); (__str ("max_val"), Obj.repr (-(2147483648))); (__str ("total"), Obj.repr (0)); (__str ("best"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let node = ref (List.nth (nodes) (idx)) in
  let left_info = solver (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int))) in
  let right_info = solver (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))) in
  let current_best = ref (max_int (Obj.repr ((Obj.obj (List.assoc (__str ("best")) (left_info) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("best")) (right_info) : Obj.t) : int)))) in
  if ((((Obj.obj (List.assoc (__str ("is_bst")) (left_info) : Obj.t) : bool) && (Obj.obj (List.assoc (__str ("is_bst")) (right_info) : Obj.t) : bool)) && ((Obj.obj (List.assoc (__str ("max_val")) (left_info) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("val")) (!node) : Obj.t) : int))) && ((Obj.obj (List.assoc (__str ("val")) (!node) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("min_val")) (right_info) : Obj.t) : int))) then (
  let sum_val = (((Obj.obj (List.assoc (__str ("total")) (left_info) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("total")) (right_info) : Obj.t) : int)) + (Obj.obj (List.assoc (__str ("val")) (!node) : Obj.t) : int)) in
  current_best := max_int (Obj.repr (!current_best)) (Obj.repr (sum_val));
  __ret := (Obj.magic ([(__str ("is_bst"), Obj.repr (true)); (__str ("min_val"), Obj.repr (min_int (Obj.repr ((Obj.obj (List.assoc (__str ("min_val")) (left_info) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("val")) (!node) : Obj.t) : int))))); (__str ("max_val"), Obj.repr (max_int (Obj.repr ((Obj.obj (List.assoc (__str ("max_val")) (right_info) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("val")) (!node) : Obj.t) : int))))); (__str ("total"), Obj.repr (sum_val)); (__str ("best"), Obj.repr (!current_best))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("is_bst"), Obj.repr (false)); (__str ("min_val"), Obj.repr (0)); (__str ("max_val"), Obj.repr (0)); (__str ("total"), Obj.repr (0)); (__str ("best"), Obj.repr (!current_best))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and max_sum_bst nodes root =
  let __ret = ref 0 in
  (try
  let root = (Obj.magic root : int) in
  let info = solver (nodes) (Obj.repr (root)) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("best")) (info) : Obj.t) : int)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let t1_nodes = ref ([[(__str ("val"), Obj.repr (4)); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr ((0 - 1)))]; [(__str ("val"), Obj.repr (3)); (__str ("left"), Obj.repr (2)); (__str ("right"), Obj.repr (3))]; [(__str ("val"), Obj.repr (1)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]; [(__str ("val"), Obj.repr (2)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]]) in
  print_endline (string_of_int (max_sum_bst ((Obj.magic !t1_nodes : (string * Obj.t) list list)) (Obj.repr (0))));
  let t2_nodes = ref ([[(__str ("val"), Obj.repr (-(4))); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (2))]; [(__str ("val"), Obj.repr (-(2))); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]; [(__str ("val"), Obj.repr (-(5))); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]]) in
  print_endline (string_of_int (max_sum_bst ((Obj.magic !t2_nodes : (string * Obj.t) list list)) (Obj.repr (0))));
  let t3_nodes = ref ([[(__str ("val"), Obj.repr (1)); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (2))]; [(__str ("val"), Obj.repr (4)); (__str ("left"), Obj.repr (3)); (__str ("right"), Obj.repr (4))]; [(__str ("val"), Obj.repr (3)); (__str ("left"), Obj.repr (5)); (__str ("right"), Obj.repr (6))]; [(__str ("val"), Obj.repr (2)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]; [(__str ("val"), Obj.repr (4)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]; [(__str ("val"), Obj.repr (2)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]; [(__str ("val"), Obj.repr (5)); (__str ("left"), Obj.repr (7)); (__str ("right"), Obj.repr (8))]; [(__str ("val"), Obj.repr (4)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]; [(__str ("val"), Obj.repr (6)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]]) in
  print_endline (string_of_int (max_sum_bst ((Obj.magic !t3_nodes : (string * Obj.t) list list)) (Obj.repr (0))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()