(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:56 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let node_data = ref ((Obj.magic [0] : int list))
let left_child = ref ((Obj.magic [0] : int list))
let right_child = ref ((Obj.magic [0] : int list))
let rec new_node value =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  node_data := (List.append (!node_data) [(Obj.magic (value) : int)]);
  left_child := (List.append (!left_child) [(Obj.magic (0) : int)]);
  right_child := (List.append (!right_child) [(Obj.magic (0) : int)]);
  __ret := (Obj.magic ((List.length (!node_data) - 1)) : int); raise Return
  with Return -> !__ret)

and build_tree () =
  let __ret = ref 0 in
  (try
  let root = new_node (Obj.repr (1)) in
  let n2 = new_node (Obj.repr (2)) in
  let n5 = new_node (Obj.repr (5)) in
  let n3 = new_node (Obj.repr (3)) in
  let n4 = new_node (Obj.repr (4)) in
  let n6 = new_node (Obj.repr (6)) in
  left_child := (List.mapi (fun __i __x -> if __i = root then n2 else __x) (!left_child));
  right_child := (List.mapi (fun __i __x -> if __i = root then n5 else __x) (!right_child));
  left_child := (List.mapi (fun __i __x -> if __i = n2 then n3 else __x) (!left_child));
  right_child := (List.mapi (fun __i __x -> if __i = n2 then n4 else __x) (!right_child));
  right_child := (List.mapi (fun __i __x -> if __i = n5 then n6 else __x) (!right_child));
  __ret := (Obj.magic (root) : int); raise Return
  with Return -> !__ret)

and flatten root =
  let __ret = ref ([] : (int) list) in
  (try
  let root = (Obj.magic root : int) in
  if (root = 0) then (
  __ret := (Obj.magic ((Obj.magic [] : int list)) : int list); raise Return
  );
  let res = ref ((Obj.magic [List.nth (!node_data) (root)] : int list)) in
  let left_vals = ref (flatten (Obj.repr (List.nth (!left_child) (root)))) in
  let right_vals = ref (flatten (Obj.repr (List.nth (!right_child) (root)))) in
  let i = ref (0) in
  (try while (!i < List.length (!left_vals)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (!left_vals) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!right_vals)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (!right_vals) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and display values =
  let __ret = ref (Obj.magic 0) in
  (try
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  if (!i = 0) then (
  s := (string_of_int (List.nth (values) (!i)));
  ) else (
  s := ((!s ^ " ") ^ (string_of_int (List.nth (values) (!i))));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!s);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Flattened Linked List:");
  let root = build_tree () in
  let vals = ref (flatten (Obj.repr (root))) in
  ignore (display (!vals));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()