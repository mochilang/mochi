(* Generated by Mochi transpiler v0.10.60 on 2025-08-07 17:13 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _a = ref (([] : (int) list))
let _n = ref (0)
let st = ref (([] : (int) list))
let rec left_child idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic ((idx * 2)) : int); raise Return
  with Return -> !__ret)

and right_child idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic (((idx * 2) + 1)) : int); raise Return
  with Return -> !__ret)

and build idx left right =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  if (left = right) then (
  st := (List.mapi (fun __i __x -> if __i = idx then List.nth (!_a) (left) else __x) (!st));
  ) else (
  let mid = ((left + right) / 2) in
  ignore (build (Obj.repr (left_child (Obj.repr (idx)))) (Obj.repr (left)) (Obj.repr (mid)));
  ignore (build (Obj.repr (right_child (Obj.repr (idx)))) (Obj.repr ((mid + 1))) (Obj.repr (right)));
  let left_val = List.nth (!st) (left_child (Obj.repr (idx))) in
  let right_val = List.nth (!st) (right_child (Obj.repr (idx))) in
  st := (List.mapi (fun __i __x -> if __i = idx then if (left_val > right_val) then left_val else right_val else __x) (!st));
  );
    !__ret
  with Return -> !__ret)

and update_recursive idx left right a b val_ =
  let __ret = ref false in
  (try
  let idx = (Obj.magic idx : int) in
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let val_ = (Obj.magic val_ : int) in
  if ((right < a) || (left > b)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if (left = right) then (
  st := (List.mapi (fun __i __x -> if __i = idx then val_ else __x) (!st));
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let mid = ((left + right) / 2) in
  ignore (update_recursive (Obj.repr (left_child (Obj.repr (idx)))) (Obj.repr (left)) (Obj.repr (mid)) (Obj.repr (a)) (Obj.repr (b)) (Obj.repr (val_)));
  ignore (update_recursive (Obj.repr (right_child (Obj.repr (idx)))) (Obj.repr ((mid + 1))) (Obj.repr (right)) (Obj.repr (a)) (Obj.repr (b)) (Obj.repr (val_)));
  let left_val = List.nth (!st) (left_child (Obj.repr (idx))) in
  let right_val = List.nth (!st) (right_child (Obj.repr (idx))) in
  st := (List.mapi (fun __i __x -> if __i = idx then if (left_val > right_val) then left_val else right_val else __x) (!st));
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and update a b val_ =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let val_ = (Obj.magic val_ : int) in
  __ret := (Obj.magic (update_recursive (Obj.repr (1)) (Obj.repr (0)) (Obj.repr ((!_n - 1))) (Obj.repr ((a - 1))) (Obj.repr ((b - 1))) (Obj.repr (val_))) : bool); raise Return
  with Return -> !__ret)


let _neg_inf = -(1000000000)
let rec query_recursive idx left right a b =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if ((right < a) || (left > b)) then (
  __ret := (Obj.magic (_neg_inf) : int); raise Return
  );
  if ((left >= a) && (right <= b)) then (
  __ret := (Obj.magic (List.nth (!st) (idx)) : int); raise Return
  );
  let mid = ((left + right) / 2) in
  let q1 = query_recursive (Obj.repr (left_child (Obj.repr (idx)))) (Obj.repr (left)) (Obj.repr (mid)) (Obj.repr (a)) (Obj.repr (b)) in
  let q2 = query_recursive (Obj.repr (right_child (Obj.repr (idx)))) (Obj.repr ((mid + 1))) (Obj.repr (right)) (Obj.repr (a)) (Obj.repr (b)) in
  __ret := (Obj.magic (if (q1 > q2) then q1 else q2) : int); raise Return
  with Return -> !__ret)

and query a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  __ret := (Obj.magic (query_recursive (Obj.repr (1)) (Obj.repr (0)) (Obj.repr ((!_n - 1))) (Obj.repr ((a - 1))) (Obj.repr ((b - 1)))) : int); raise Return
  with Return -> !__ret)

and show_data () =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  let show_list = ref (([] : (int) list)) in
  (try while (!i < !_n) do
    try
  show_list := (List.append (!show_list) [(Obj.magic (query (Obj.repr ((!i + 1))) (Obj.repr ((!i + 1)))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show_list !show_list);
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  _a := [1; 2; -(4); 7; 3; -(5); 6; 11; -(20); 9; 14; 15; 5; 2; -(8)];
  _n := List.length (!_a);
  let i = ref (0) in
  (try while (!i < (4 * !_n)) do
    try
  st := (List.append (!st) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!_n > 0) then (
  ignore (build (Obj.repr (1)) (Obj.repr (0)) (Obj.repr ((!_n - 1))));
  );
  print_endline (string_of_int (query (Obj.repr (4)) (Obj.repr (6))));
  print_endline (string_of_int (query (Obj.repr (7)) (Obj.repr (11))));
  print_endline (string_of_int (query (Obj.repr (7)) (Obj.repr (12))));
  ignore (update (Obj.repr (1)) (Obj.repr (3)) (Obj.repr (111)));
  print_endline (string_of_int (query (Obj.repr (1)) (Obj.repr (15))));
  ignore (update (Obj.repr (7)) (Obj.repr (8)) (Obj.repr (235)));
  ignore (show_data ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()