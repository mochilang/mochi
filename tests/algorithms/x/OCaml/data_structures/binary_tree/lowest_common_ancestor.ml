(* Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:03 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow2 exp =
  let __ret = ref 0 in
  (try
  let exp = (Obj.magic exp : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  res := (!res * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and create_sparse max_node parent =
  let __ret = ref ([] : (int list) list) in
  (try
  let max_node = (Obj.magic max_node : int) in
  let j = ref (1) in
  (try while (pow2 (Obj.repr (!j)) < max_node) do
    try
  let i = ref (1) in
  (try while (!i <= max_node) do
    try
  parent := (List.mapi (fun __i __x -> if __i = !j then (List.mapi (fun __i __x -> if __i = !i then List.nth (List.nth (!parent) ((!j - 1))) (List.nth (List.nth (!parent) ((!j - 1))) (!i)) else __x) (List.nth (!parent) (!j))) else __x) (!parent));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!parent) : int list list); raise Return
  with Return -> !__ret)

and lowest_common_ancestor u v level parent =
  let __ret = ref 0 in
  (try
  u := (Obj.magic !u : int);
  v := (Obj.magic !v : int);
  if (List.nth (level) (!u) < List.nth (level) (!v)) then (
  let temp = !u in
  u := !v;
  v := temp;
  );
  let i = ref (18) in
  (try while (!i >= 0) do
    try
  if ((List.nth (level) (!u) - pow2 (Obj.repr (!i))) >= List.nth (level) (!v)) then (
  u := List.nth (List.nth (parent) (!i)) (!u);
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  if (!u = !v) then (
  __ret := (Obj.magic (!u) : int); raise Return
  );
  i := 18;
  (try while (!i >= 0) do
    try
  let pu = List.nth (List.nth (parent) (!i)) (!u) in
  let pv = List.nth (List.nth (parent) (!i)) (!v) in
  if ((pu <> 0) && (pu <> pv)) then (
  u := pu;
  v := pv;
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (List.nth (parent) (0)) (!u)) : int); raise Return
  with Return -> !__ret)

and breadth_first_search level parent max_node graph root =
  let __ret = ref (Obj.magic 0) in
  (try
  let max_node = (Obj.magic max_node : int) in
  let root = (Obj.magic root : int) in
  level := (List.mapi (fun __i __x -> if __i = root then 0 else __x) (!level));
  let q = ref (([] : (int) list)) in
  q := (List.append (!q) [(Obj.magic (root) : int)]);
  let head = ref (0) in
  (try while (!head < List.length (!q)) do
    try
  let u = List.nth (!q) (!head) in
  head := (!head + 1);
  let adj = ref (List.assoc (__str (u)) (graph)) in
  let j = ref (0) in
  (try while (!j < List.length (!adj)) do
    try
  let v = List.nth (!adj) (!j) in
  if (List.nth (!level) (v) = (0 - 1)) then (
  level := (List.mapi (fun __i __x -> if __i = v then (List.nth (!level) (u) + 1) else __x) (!level));
  parent := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = v then u else __x) (List.nth (!parent) (0))) else __x) (!parent));
  q := (List.append (!q) [(Obj.magic (v) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let max_node = 13 in
  let parent = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < (max_node + 10)) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  parent := (List.append (!parent) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let level = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < (max_node + 10)) do
    try
  level := (List.append (!level) [(Obj.magic ((0 - 1)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let graph = ref ([]) in
  graph := ((__str (1), [2; 3; 4]) :: List.remove_assoc (__str (1)) !graph);
  graph := ((__str (2), [5]) :: List.remove_assoc (__str (2)) !graph);
  graph := ((__str (3), [6; 7]) :: List.remove_assoc (__str (3)) !graph);
  graph := ((__str (4), [8]) :: List.remove_assoc (__str (4)) !graph);
  graph := ((__str (5), [9; 10]) :: List.remove_assoc (__str (5)) !graph);
  graph := ((__str (6), [11]) :: List.remove_assoc (__str (6)) !graph);
  graph := ((__str (7), []) :: List.remove_assoc (__str (7)) !graph);
  graph := ((__str (8), [12; 13]) :: List.remove_assoc (__str (8)) !graph);
  graph := ((__str (9), []) :: List.remove_assoc (__str (9)) !graph);
  graph := ((__str (10), []) :: List.remove_assoc (__str (10)) !graph);
  graph := ((__str (11), []) :: List.remove_assoc (__str (11)) !graph);
  graph := ((__str (12), []) :: List.remove_assoc (__str (12)) !graph);
  graph := ((__str (13), []) :: List.remove_assoc (__str (13)) !graph);
  ignore (breadth_first_search (level) (parent) (Obj.repr (max_node)) ((Obj.magic !graph : (string * int list) list)) (Obj.repr (1)));
  parent := create_sparse (Obj.repr (max_node)) (parent);
  print_endline (("LCA of node 1 and 3 is: " ^ (string_of_int (lowest_common_ancestor (ref (1)) (ref (3)) (!level) (!parent)))));
  print_endline (("LCA of node 5 and 6 is: " ^ (string_of_int (lowest_common_ancestor (ref (5)) (ref (6)) (!level) (!parent)))));
  print_endline (("LCA of node 7 and 11 is: " ^ (string_of_int (lowest_common_ancestor (ref (7)) (ref (11)) (!level) (!parent)))));
  print_endline (("LCA of node 6 and 7 is: " ^ (string_of_int (lowest_common_ancestor (ref (6)) (ref (7)) (!level) (!parent)))));
  print_endline (("LCA of node 4 and 12 is: " ^ (string_of_int (lowest_common_ancestor (ref (4)) (ref (12)) (!level) (!parent)))));
  print_endline (("LCA of node 8 and 8 is: " ^ (string_of_int (lowest_common_ancestor (ref (8)) (ref (8)) (!level) (!parent)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()