(* Generated by Mochi transpiler v0.10.60 on 2025-08-07 17:13 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec combine a b op =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let op = (Obj.magic op : int) in
  if (op = 0) then (
  __ret := (Obj.magic ((a + b)) : int); raise Return
  );
  if (op = 1) then (
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  );
  __ret := (Obj.magic (b) : int); raise Return
  );
  if (a < b) then (
  __ret := (Obj.magic (a) : int); raise Return
  );
  __ret := (Obj.magic (b) : int); raise Return
  with Return -> !__ret)

and build_tree nodes arr start end_ op =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let op = (Obj.magic op : int) in
  if (start = end_) then (
  let node = [(__str ("start"), Obj.repr (start)); (__str ("end"), Obj.repr (end_)); (__str ("val"), Obj.repr (List.nth (arr) (start))); (__str ("mid"), Obj.repr (start)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))] in
  let new_nodes = ref ((List.append (nodes) [(Obj.magic (node) : (string * Obj.t) list)])) in
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr (!new_nodes)); (__str ("idx"), Obj.repr ((List.length (!new_nodes) - 1)))]) : (string * Obj.t) list); raise Return
  );
  let mid = ((start + end_) / 2) in
  let left_res = build_tree (nodes) (arr) (Obj.repr (start)) (Obj.repr (mid)) (Obj.repr (op)) in
  let right_res = build_tree ((Obj.obj (List.assoc (__str ("nodes")) (left_res) : Obj.t) : (string * Obj.t) list list)) (arr) (Obj.repr ((mid + 1))) (Obj.repr (end_)) (Obj.repr (op)) in
  let left_node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (right_res) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("idx")) (left_res) : Obj.t) : int))) in
  let right_node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (right_res) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("idx")) (right_res) : Obj.t) : int))) in
  let val_ = combine (Obj.repr ((Obj.obj (List.assoc (__str ("val")) (!left_node) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("val")) (!right_node) : Obj.t) : int))) (Obj.repr (op)) in
  let parent = [(__str ("start"), Obj.repr (start)); (__str ("end"), Obj.repr (end_)); (__str ("val"), Obj.repr (val_)); (__str ("mid"), Obj.repr (mid)); (__str ("left"), Obj.repr ((Obj.obj (List.assoc (__str ("idx")) (left_res) : Obj.t) : int))); (__str ("right"), Obj.repr ((Obj.obj (List.assoc (__str ("idx")) (right_res) : Obj.t) : int)))] in
  let new_nodes = ref ((List.append ((Obj.obj (List.assoc (__str ("nodes")) (right_res) : Obj.t) : (string * Obj.t) list list)) [(Obj.magic (parent) : (string * Obj.t) list)])) in
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr (!new_nodes)); (__str ("idx"), Obj.repr ((List.length (!new_nodes) - 1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and new_segment_tree collection op =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let op = (Obj.magic op : int) in
  __ret := (Obj.magic ([(__str ("arr"), Obj.repr (collection)); (__str ("op"), Obj.repr (op))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and update tree i val_ =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let i = (Obj.magic i : int) in
  let val_ = (Obj.magic val_ : int) in
  let new_arr = ref (([] : (int) list)) in
  let idx = ref (0) in
  (try while (!idx < List.length ((Obj.obj (List.assoc (__str ("arr")) (tree) : Obj.t) : int list))) do
    try
  if (!idx = i) then (
  new_arr := (List.append (!new_arr) [(Obj.magic (val_) : int)]);
  ) else (
  new_arr := (List.append (!new_arr) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("arr")) (tree) : Obj.t) : int list)) (!idx)) : int)]);
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("arr"), Obj.repr (!new_arr)); (__str ("op"), Obj.repr ((Obj.obj (List.assoc (__str ("op")) (tree) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and query_range tree i j =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let result = ref (List.nth ((Obj.obj (List.assoc (__str ("arr")) (tree) : Obj.t) : int list)) (i)) in
  let idx = ref ((i + 1)) in
  (try while (!idx <= j) do
    try
  result := combine (Obj.repr (!result)) (Obj.repr (List.nth ((Obj.obj (List.assoc (__str ("arr")) (tree) : Obj.t) : int list)) (!idx))) (Obj.repr ((Obj.obj (List.assoc (__str ("op")) (tree) : Obj.t) : int)));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and traverse tree =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  if (List.length ((Obj.obj (List.assoc (__str ("arr")) (tree) : Obj.t) : int list)) = 0) then (
  __ret := (Obj.magic ([]) : (string * Obj.t) list list); raise Return
  );
  let res = build_tree ((Obj.magic [] : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("arr")) (tree) : Obj.t) : int list)) (Obj.repr (0)) (Obj.repr ((List.length ((Obj.obj (List.assoc (__str ("arr")) (tree) : Obj.t) : int list)) - 1))) (Obj.repr ((Obj.obj (List.assoc (__str ("op")) (tree) : Obj.t) : int))) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("nodes")) (res) : Obj.t) : (string * Obj.t) list list)) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and node_to_string node =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((((("SegmentTreeNode(start=" ^ (string_of_int ((Obj.obj (List.assoc (__str ("start")) (node) : Obj.t) : int)))) ^ ", end=") ^ (string_of_int ((Obj.obj (List.assoc (__str ("end")) (node) : Obj.t) : int)))) ^ ", val=") ^ (string_of_int ((Obj.obj (List.assoc (__str ("val")) (node) : Obj.t) : int)))) ^ ")")) : string); raise Return
  with Return -> !__ret)

and print_traverse tree =
  let __ret = ref (Obj.magic 0) in
  (try
  let nodes = ref (traverse ((Obj.magic tree : (string * Obj.t) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!nodes)) do
    try
  print_endline ((node_to_string (List.nth (!nodes) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
    !__ret
  with Return -> !__ret)


let arr = ref ([2; 1; 5; 3; 4])
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun op ->
    try
  print_endline ("**************************************************");
  let tree = ref (new_segment_tree (!arr) (Obj.repr (op))) in
  ignore (print_traverse (!tree));
  tree := update (!tree) (Obj.repr (1)) (Obj.repr (5));
  ignore (print_traverse (!tree));
  print_endline (string_of_int (query_range (!tree) (Obj.repr (3)) (Obj.repr (4))));
  print_endline (string_of_int (query_range (!tree) (Obj.repr (2)) (Obj.repr (2))));
  print_endline (string_of_int (query_range (!tree) (Obj.repr (1)) (Obj.repr (3))));
  print_endline ("");
    with Continue -> ()) ([0; 1; 2]) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()