(* Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:33 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec mirror_node left right idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = -(1)) then (
  __ret := (); raise Return
  );
  let temp = List.nth (!left) (idx) in
  left := (List.mapi (fun __i __x -> if __i = idx then List.nth (!right) (idx) else __x) (!left));
  right := (List.mapi (fun __i __x -> if __i = idx then temp else __x) (!right));
  ignore (mirror_node (left) (right) (Obj.repr (List.nth (!left) (idx))));
  ignore (mirror_node (left) (right) (Obj.repr (List.nth (!right) (idx))));
    !__ret
  with Return -> !__ret)

and mirror tree =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  ignore (mirror_node (ref ((Obj.obj (List.assoc (__str ("left")) (tree) : Obj.t) : int list))) (ref ((Obj.obj (List.assoc (__str ("right")) (tree) : Obj.t) : int list))) (Obj.repr ((Obj.obj (List.assoc (__str ("root")) (tree) : Obj.t) : int))));
  __ret := (Obj.magic (tree) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and inorder tree idx =
  let __ret = ref ([] : (int) list) in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = -(1)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let left_vals = ref (inorder ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (List.nth ((Obj.obj (List.assoc (__str ("left")) (tree) : Obj.t) : int list)) (idx)))) in
  let right_vals = ref (inorder ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (List.nth ((Obj.obj (List.assoc (__str ("right")) (tree) : Obj.t) : int list)) (idx)))) in
  __ret := (Obj.magic (((!left_vals @ [List.nth ((Obj.obj (List.assoc (__str ("values")) (tree) : Obj.t) : int list)) (idx)]) @ !right_vals)) : int list); raise Return
  with Return -> !__ret)

and make_tree_zero () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("values"), Obj.repr ([0])); (__str ("left"), Obj.repr ([-(1)])); (__str ("right"), Obj.repr ([-(1)])); (__str ("root"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and make_tree_seven () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("values"), Obj.repr ([1; 2; 3; 4; 5; 6; 7])); (__str ("left"), Obj.repr ([1; 3; 5; -(1); -(1); -(1); -(1)])); (__str ("right"), Obj.repr ([2; 4; 6; -(1); -(1); -(1); -(1)])); (__str ("root"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and make_tree_nine () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("values"), Obj.repr ([1; 2; 3; 4; 5; 6; 7; 8; 9])); (__str ("left"), Obj.repr ([1; 3; -(1); 6; -(1); -(1); -(1); -(1); -(1)])); (__str ("right"), Obj.repr ([2; 4; 5; 7; 8; -(1); -(1); -(1); -(1)])); (__str ("root"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let names = ref (["zero"; "seven"; "nine"]) in
  let trees = ref ([make_tree_zero (); make_tree_seven (); make_tree_nine ()]) in
  let i = ref (0) in
  (try while (!i < List.length (!trees)) do
    try
  let tree = List.nth (!trees) (!i) in
  print_endline (((("      The " ^ List.nth (!names) (!i)) ^ " tree: ") ^ (__str (inorder (tree) (Obj.repr ((Obj.obj (List.assoc (__str ("root")) (tree) : Obj.t) : int)))))));
  let mirrored = mirror (tree) in
  print_endline (((("Mirror of " ^ List.nth (!names) (!i)) ^ " tree: ") ^ (__str (inorder (mirrored) (Obj.repr ((Obj.obj (List.assoc (__str ("root")) (mirrored) : Obj.t) : int)))))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()