(* Generated by Mochi transpiler v0.10.60 on 2025-08-07 17:13 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _label = 0
let _color = 1
let _parent = 2
let _left = 3
let _right = 4
let _neg_one = -(1)
let rec make_tree () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr ([])); (__str ("root"), Obj.repr (-(1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and rotate_left t x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list)) in
  let y = List.nth (List.nth (!nodes) (x)) (_right) in
  let yLeft = List.nth (List.nth (!nodes) (y)) (_left) in
  nodes := (List.mapi (fun __i __x -> if __i = x then (List.mapi (fun __i __x -> if __i = _right then yLeft else __x) (List.nth (!nodes) (x))) else __x) (!nodes));
  if (yLeft <> _neg_one) then (
  nodes := (List.mapi (fun __i __x -> if __i = yLeft then (List.mapi (fun __i __x -> if __i = _parent then x else __x) (List.nth (!nodes) (yLeft))) else __x) (!nodes));
  );
  let xParent = List.nth (List.nth (!nodes) (x)) (_parent) in
  nodes := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = _parent then xParent else __x) (List.nth (!nodes) (y))) else __x) (!nodes));
  if (xParent = _neg_one) then (
  t := ((__str ("root"), Obj.repr (y)) :: List.remove_assoc (__str ("root")) (Obj.magic (!t) : (string * Obj.t) list));
  ) else (
  if (x = List.nth (List.nth (!nodes) (xParent)) (_left)) then (
  nodes := (List.mapi (fun __i __x -> if __i = xParent then (List.mapi (fun __i __x -> if __i = _left then y else __x) (List.nth (!nodes) (xParent))) else __x) (!nodes));
  ) else (
  nodes := (List.mapi (fun __i __x -> if __i = xParent then (List.mapi (fun __i __x -> if __i = _right then y else __x) (List.nth (!nodes) (xParent))) else __x) (!nodes));
  );
  );
  nodes := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = _left then x else __x) (List.nth (!nodes) (y))) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = x then (List.mapi (fun __i __x -> if __i = _parent then y else __x) (List.nth (!nodes) (x))) else __x) (!nodes));
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  __ret := (Obj.magic (!t) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and rotate_right t x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list)) in
  let y = List.nth (List.nth (!nodes) (x)) (_left) in
  let yRight = List.nth (List.nth (!nodes) (y)) (_right) in
  nodes := (List.mapi (fun __i __x -> if __i = x then (List.mapi (fun __i __x -> if __i = _left then yRight else __x) (List.nth (!nodes) (x))) else __x) (!nodes));
  if (yRight <> _neg_one) then (
  nodes := (List.mapi (fun __i __x -> if __i = yRight then (List.mapi (fun __i __x -> if __i = _parent then x else __x) (List.nth (!nodes) (yRight))) else __x) (!nodes));
  );
  let xParent = List.nth (List.nth (!nodes) (x)) (_parent) in
  nodes := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = _parent then xParent else __x) (List.nth (!nodes) (y))) else __x) (!nodes));
  if (xParent = _neg_one) then (
  t := ((__str ("root"), Obj.repr (y)) :: List.remove_assoc (__str ("root")) (Obj.magic (!t) : (string * Obj.t) list));
  ) else (
  if (x = List.nth (List.nth (!nodes) (xParent)) (_right)) then (
  nodes := (List.mapi (fun __i __x -> if __i = xParent then (List.mapi (fun __i __x -> if __i = _right then y else __x) (List.nth (!nodes) (xParent))) else __x) (!nodes));
  ) else (
  nodes := (List.mapi (fun __i __x -> if __i = xParent then (List.mapi (fun __i __x -> if __i = _left then y else __x) (List.nth (!nodes) (xParent))) else __x) (!nodes));
  );
  );
  nodes := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = _right then x else __x) (List.nth (!nodes) (y))) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = x then (List.mapi (fun __i __x -> if __i = _parent then y else __x) (List.nth (!nodes) (x))) else __x) (!nodes));
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  __ret := (Obj.magic (!t) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insert_fix t z =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  z := (Obj.magic !z : int);
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list)) in
  (try while ((!z <> (Obj.obj (List.assoc (__str ("root")) (!t) : Obj.t) : int)) && (List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_color) = 1)) do
    try
  if (List.nth (List.nth (!nodes) (!z)) (_parent) = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_parent))) (_left)) then (
  let y = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_parent))) (_right) in
  if ((y <> _neg_one) && (List.nth (List.nth (!nodes) (y)) (_color) = 1)) then (
  nodes := (List.mapi (fun __i __x -> if __i = List.nth (List.nth (!nodes) (!z)) (_parent) then (List.mapi (fun __i __x -> if __i = _color then 0 else __x) (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent)))) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = _color then 0 else __x) (List.nth (!nodes) (y))) else __x) (!nodes));
  let gp = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_parent) in
  nodes := (List.mapi (fun __i __x -> if __i = gp then (List.mapi (fun __i __x -> if __i = _color then 1 else __x) (List.nth (!nodes) (gp))) else __x) (!nodes));
  z := gp;
  ) else (
  if (!z = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_right)) then (
  z := List.nth (List.nth (!nodes) (!z)) (_parent);
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  t := rotate_left (t) (Obj.repr (!z));
  nodes := (Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list);
  );
  nodes := (List.mapi (fun __i __x -> if __i = List.nth (List.nth (!nodes) (!z)) (_parent) then (List.mapi (fun __i __x -> if __i = _color then 0 else __x) (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent)))) else __x) (!nodes));
  let gp = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_parent) in
  nodes := (List.mapi (fun __i __x -> if __i = gp then (List.mapi (fun __i __x -> if __i = _color then 1 else __x) (List.nth (!nodes) (gp))) else __x) (!nodes));
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  t := rotate_right (t) (Obj.repr (gp));
  nodes := (Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list);
  );
  ) else (
  let y = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_parent))) (_left) in
  if ((y <> _neg_one) && (List.nth (List.nth (!nodes) (y)) (_color) = 1)) then (
  nodes := (List.mapi (fun __i __x -> if __i = List.nth (List.nth (!nodes) (!z)) (_parent) then (List.mapi (fun __i __x -> if __i = _color then 0 else __x) (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent)))) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = _color then 0 else __x) (List.nth (!nodes) (y))) else __x) (!nodes));
  let gp = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_parent) in
  nodes := (List.mapi (fun __i __x -> if __i = gp then (List.mapi (fun __i __x -> if __i = _color then 1 else __x) (List.nth (!nodes) (gp))) else __x) (!nodes));
  z := gp;
  ) else (
  if (!z = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_left)) then (
  z := List.nth (List.nth (!nodes) (!z)) (_parent);
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  t := rotate_right (t) (Obj.repr (!z));
  nodes := (Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list);
  );
  nodes := (List.mapi (fun __i __x -> if __i = List.nth (List.nth (!nodes) (!z)) (_parent) then (List.mapi (fun __i __x -> if __i = _color then 0 else __x) (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent)))) else __x) (!nodes));
  let gp = List.nth (List.nth (!nodes) (List.nth (List.nth (!nodes) (!z)) (_parent))) (_parent) in
  nodes := (List.mapi (fun __i __x -> if __i = gp then (List.mapi (fun __i __x -> if __i = _color then 1 else __x) (List.nth (!nodes) (gp))) else __x) (!nodes));
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  t := rotate_left (t) (Obj.repr (gp));
  nodes := (Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list);
  );
  );
    with Continue -> ()
  done with Break -> ());
  nodes := (Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list);
  nodes := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("root")) (!t) : Obj.t) : int) then (List.mapi (fun __i __x -> if __i = _color then 0 else __x) (List.nth (!nodes) ((Obj.obj (List.assoc (__str ("root")) (!t) : Obj.t) : int)))) else __x) (!nodes));
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  __ret := (Obj.magic (!t) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and tree_insert t v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let v = (Obj.magic v : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!t) : Obj.t) : int list list)) in
  let node = ref ([v; 1; -(1); -(1); -(1)]) in
  nodes := (List.append (!nodes) [(Obj.magic (!node) : int list)]);
  let idx = (List.length (!nodes) - 1) in
  let y = ref (_neg_one) in
  let x = ref ((Obj.obj (List.assoc (__str ("root")) (!t) : Obj.t) : int)) in
  (try while (!x <> _neg_one) do
    try
  y := !x;
  if (v < List.nth (List.nth (!nodes) (!x)) (_label)) then (
  x := List.nth (List.nth (!nodes) (!x)) (_left);
  ) else (
  x := List.nth (List.nth (!nodes) (!x)) (_right);
  );
    with Continue -> ()
  done with Break -> ());
  nodes := (List.mapi (fun __i __x -> if __i = idx then (List.mapi (fun __i __x -> if __i = _parent then !y else __x) (List.nth (!nodes) (idx))) else __x) (!nodes));
  if (!y = _neg_one) then (
  t := ((__str ("root"), Obj.repr (idx)) :: List.remove_assoc (__str ("root")) (Obj.magic (!t) : (string * Obj.t) list));
  ) else (
  if (v < List.nth (List.nth (!nodes) (!y)) (_label)) then (
  nodes := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = _left then idx else __x) (List.nth (!nodes) (!y))) else __x) (!nodes));
  ) else (
  nodes := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = _right then idx else __x) (List.nth (!nodes) (!y))) else __x) (!nodes));
  );
  );
  t := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!t) : (string * Obj.t) list));
  t := insert_fix (t) (ref (idx));
  __ret := (Obj.magic (!t) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and inorder t x acc =
  let __ret = ref ([] : (int) list) in
  (try
  let x = (Obj.magic x : int) in
  if (x = _neg_one) then (
  __ret := (Obj.magic (!acc) : int list); raise Return
  );
  acc := inorder ((Obj.magic t : (string * Obj.t) list)) (Obj.repr (List.nth (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (t) : Obj.t) : int list list)) (x)) (_left))) (acc);
  acc := (List.append (!acc) [(Obj.magic (List.nth (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (t) : Obj.t) : int list list)) (x)) (_label)) : int)]);
  acc := inorder ((Obj.magic t : (string * Obj.t) list)) (Obj.repr (List.nth (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (t) : Obj.t) : int list list)) (x)) (_right))) (acc);
  __ret := (Obj.magic (!acc) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let t = ref (make_tree ()) in
  let values = ref ([10; 20; 30; 15; 25; 5; 1]) in
  let i = ref (0) in
  (try while (!i < List.length (!values)) do
    try
  t := tree_insert (t) (Obj.repr (List.nth (!values) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref (([] : (int) list)) in
  res := inorder (!t) (Obj.repr ((Obj.obj (List.assoc (__str ("root")) (!t) : Obj.t) : int))) (res);
  print_endline ((__str (!res)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()