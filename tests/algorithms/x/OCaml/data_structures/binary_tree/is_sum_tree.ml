(* Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec tree_sum nodes idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = -(1)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let node = ref (List.nth (nodes) (idx)) in
  __ret := (Obj.magic ((((Obj.obj (List.assoc (__str ("value")) (!node) : Obj.t) : int) + tree_sum (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int)))) + tree_sum (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))))) : int); raise Return
  with Return -> !__ret)

and is_sum_node nodes idx =
  let __ret = ref false in
  (try
  let idx = (Obj.magic idx : int) in
  let node = ref (List.nth (nodes) (idx)) in
  if (((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int) = -(1)) && ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int) = -(1))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let left_sum = tree_sum (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int))) in
  let right_sum = tree_sum (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))) in
  if ((Obj.obj (List.assoc (__str ("value")) (!node) : Obj.t) : int) <> (left_sum + right_sum)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let left_ok = ref (true) in
  if ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int) <> -(1)) then (
  left_ok := is_sum_node (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int)));
  );
  let right_ok = ref (true) in
  if ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int) <> -(1)) then (
  right_ok := is_sum_node (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int)));
  );
  __ret := (Obj.magic ((!left_ok && !right_ok)) : bool); raise Return
  with Return -> !__ret)

and build_a_tree () =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  __ret := (Obj.magic ([[(__str ("value"), Obj.repr (11)); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (2))]; [(__str ("value"), Obj.repr (2)); (__str ("left"), Obj.repr (3)); (__str ("right"), Obj.repr (4))]; [(__str ("value"), Obj.repr (29)); (__str ("left"), Obj.repr (5)); (__str ("right"), Obj.repr (6))]; [(__str ("value"), Obj.repr (1)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("value"), Obj.repr (7)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("value"), Obj.repr (15)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("value"), Obj.repr (40)); (__str ("left"), Obj.repr (7)); (__str ("right"), Obj.repr (-(1)))]; [(__str ("value"), Obj.repr (35)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]]) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and build_a_sum_tree () =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  __ret := (Obj.magic ([[(__str ("value"), Obj.repr (26)); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (2))]; [(__str ("value"), Obj.repr (10)); (__str ("left"), Obj.repr (3)); (__str ("right"), Obj.repr (4))]; [(__str ("value"), Obj.repr (3)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (5))]; [(__str ("value"), Obj.repr (4)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("value"), Obj.repr (6)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("value"), Obj.repr (3)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]]) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()