(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binary_tree_mirror_dict tree root =
  let __ret = ref (Obj.magic 0) in
  (try
  let root = (Obj.magic root : int) in
  if ((root = 0) || not ((List.mem_assoc root !tree))) then (
  __ret := (); raise Return
  );
  let children = ref (List.assoc (__str (root)) (!tree)) in
  let left = List.nth (!children) (0) in
  let right = List.nth (!children) (1) in
  tree := ((__str (root), [right; left]) :: List.remove_assoc (__str (root)) !tree);
  ignore (binary_tree_mirror_dict (tree) (Obj.repr (left)));
  ignore (binary_tree_mirror_dict (tree) (Obj.repr (right)));
    !__ret
  with Return -> !__ret)

and binary_tree_mirror binary_tree root =
  let __ret = ref ([] : (string * int list) list) in
  (try
  let root = (Obj.magic root : int) in
  if (List.length (binary_tree) = 0) then (
  (failwith ("binary tree cannot be empty"));
  );
  if not ((List.mem_assoc root binary_tree)) then (
  (failwith ((("root " ^ (string_of_int (root))) ^ " is not present in the binary_tree")));
  );
  let tree_copy = ref ([]) in
  (try List.iter (fun (k, _) ->
    try
  tree_copy := ((__str (k), List.assoc (__str (k)) (binary_tree)) :: List.remove_assoc (__str (k)) !tree_copy);
    with Continue -> ()) (binary_tree) with Break -> ());
  ignore (binary_tree_mirror_dict (tree_copy) (Obj.repr (root)));
  __ret := (Obj.magic (!tree_copy) : (string * int list) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let binary_tree = ref ([(__str (1), [2; 3]); (__str (2), [4; 5]); (__str (3), [6; 7]); (__str (7), [8; 9])]) in
  print_endline (("Binary tree: " ^ __show (!binary_tree)));
  let mirrored = ref (binary_tree_mirror ((Obj.magic !binary_tree : (string * int list) list)) (Obj.repr (1))) in
  print_endline (("Binary tree mirror: " ^ __show (!mirrored)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()