(* Generated by Mochi transpiler v0.10.72 on 2025-08-24 16:59 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic r : int) = 0
  else
    match tag r with
    | 0 -> __is_list (field r 1)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec binary_tree_mirror_dict tree root =
  let __ret = ref (Obj.magic 0) in
  (try
  tree := (Obj.magic !tree : (string * int list) list);
  let root = (Obj.magic root : int) in
  if ((root = 0) || not ((List.mem_assoc (__str (Obj.repr (root))) !tree))) then (
  __ret := (); raise Return
  );
  let children = ref ((match List.assoc_opt (__str (Obj.repr (root))) (!tree) with Some v -> (Obj.magic v : int list) | None -> [])) in
  let left = (let __l = !children in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let right = (let __l = !children in let __i = 1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  tree := ((__str (Obj.repr (root)), [right; left]) :: List.remove_assoc (__str (Obj.repr (root))) (!tree));
  ignore (binary_tree_mirror_dict (tree) (Obj.repr (left)));
  ignore (binary_tree_mirror_dict (tree) (Obj.repr (right)));
    !__ret
  with Return -> !__ret)

and binary_tree_mirror binary_tree root =
  let __ret = ref ([] : (string * int list) list) in
  (try
  let binary_tree = (Obj.magic binary_tree : (string * int list) list) in
  let root = (Obj.magic root : int) in
  if (List.length (binary_tree) = 0) then (
  (failwith ("binary tree cannot be empty"));
  );
  if not ((List.mem_assoc (__str (Obj.repr (root))) binary_tree)) then (
  (failwith ((("root " ^ (string_of_int (Obj.magic (root) : int))) ^ " is not present in the binary_tree")));
  );
  let tree_copy = ref ([] : (string * int list) list) in
  (try List.iter (fun (k, _) ->
    try
  tree_copy := ((__str (Obj.repr (k)), (match List.assoc_opt (__str (Obj.repr (k))) (binary_tree) with Some v -> (Obj.magic v : int list) | None -> [])) :: List.remove_assoc (__str (Obj.repr (k))) (!tree_copy));
    with Continue -> ()) (binary_tree) with Break -> ());
  ignore (binary_tree_mirror_dict (tree_copy) (Obj.repr (root)));
  __ret := (Obj.magic (!tree_copy) : (string * int list) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let binary_tree = ref ([(__str (Obj.repr (1)), [2; 3]); (__str (Obj.repr (2)), [4; 5]); (__str (Obj.repr (3)), [6; 7]); (__str (Obj.repr (7)), [8; 9])]) in
  print_endline (("Binary tree: " ^ __show (Obj.repr (!binary_tree))));
  let mirrored = ref (binary_tree_mirror ((Obj.magic (!binary_tree) : (string * int list) list)) (Obj.repr (1))) in
  print_endline (("Binary tree mirror: " ^ __show (Obj.repr (!mirrored))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
