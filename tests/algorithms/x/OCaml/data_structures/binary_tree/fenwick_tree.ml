(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec fenwick_from_list arr =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let size = List.length (arr) in
  let tree = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  tree := (List.append (!tree) [(Obj.magic (List.nth (arr) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 1;
  (try while (!i < size) do
    try
  let j = fenwick_next (Obj.repr (!i)) in
  if (j < size) then (
  tree := (List.mapi (fun __i __x -> if __i = j then (List.nth (!tree) (j) + List.nth (!tree) (!i)) else __x) (!tree));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("size"), Obj.repr (size)); (__str ("tree"), Obj.repr (!tree))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fenwick_empty size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let size = (Obj.magic size : int) in
  let tree = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  tree := (List.append (!tree) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("size"), Obj.repr (size)); (__str ("tree"), Obj.repr (!tree))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fenwick_get_array f =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int)) do
    try
  arr := (List.append (!arr) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("tree")) (f) : Obj.t) : int list)) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := ((Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int) - 1);
  (try while (!i > 0) do
    try
  let j = fenwick_next (Obj.repr (!i)) in
  if (j < (Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int)) then (
  arr := (List.mapi (fun __i __x -> if __i = j then (List.nth (!arr) (j) - List.nth (!arr) (!i)) else __x) (!arr));
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and bit_and a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (a) in
  let ub = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  (try while ((!ua <> 0) || (!ub <> 0)) do
    try
  if ((((!ua mod 2 + 2) mod 2) = 1) && (((!ub mod 2 + 2) mod 2) = 1)) then (
  res := (!res + !bit);
  );
  ua := (!ua / 2);
  ub := (!ub / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and low_bit x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  __ret := (Obj.magic ((x - bit_and (Obj.repr (x)) (Obj.repr ((x - 1))))) : int); raise Return
  with Return -> !__ret)

and fenwick_next index =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  __ret := (Obj.magic ((index + low_bit (Obj.repr (index)))) : int); raise Return
  with Return -> !__ret)

and fenwick_prev index =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  __ret := (Obj.magic ((index - low_bit (Obj.repr (index)))) : int); raise Return
  with Return -> !__ret)

and fenwick_add f index value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let value = (Obj.magic value : int) in
  let tree = ref ((Obj.obj (List.assoc (__str ("tree")) (f) : Obj.t) : int list)) in
  if (index = 0) then (
  tree := (List.mapi (fun __i __x -> if __i = 0 then (List.nth (!tree) (0) + value) else __x) (!tree));
  __ret := (Obj.magic ([(__str ("size"), Obj.repr ((Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int))); (__str ("tree"), Obj.repr (!tree))]) : (string * Obj.t) list); raise Return
  );
  let i = ref (index) in
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int)) do
    try
  tree := (List.mapi (fun __i __x -> if __i = !i then (List.nth (!tree) (!i) + value) else __x) (!tree));
  i := fenwick_next (Obj.repr (!i));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("size"), Obj.repr ((Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int))); (__str ("tree"), Obj.repr (!tree))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fenwick_update f index value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let value = (Obj.magic value : int) in
  let current = fenwick_get ((Obj.magic f : (string * Obj.t) list)) (Obj.repr (index)) in
  __ret := (Obj.magic (fenwick_add ((Obj.magic f : (string * Obj.t) list)) (Obj.repr (index)) (Obj.repr ((value - current)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fenwick_prefix f right =
  let __ret = ref 0 in
  (try
  let right = (Obj.magic right : int) in
  if (right = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let result = ref (List.nth ((Obj.obj (List.assoc (__str ("tree")) (f) : Obj.t) : int list)) (0)) in
  let r = ref ((right - 1)) in
  (try while (!r > 0) do
    try
  result := (!result + List.nth ((Obj.obj (List.assoc (__str ("tree")) (f) : Obj.t) : int list)) (!r));
  r := fenwick_prev (Obj.repr (!r));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and fenwick_query f left right =
  let __ret = ref 0 in
  (try
  let left = (Obj.magic left : int) in
  let right = (Obj.magic right : int) in
  __ret := (Obj.magic ((fenwick_prefix ((Obj.magic f : (string * Obj.t) list)) (Obj.repr (right)) - fenwick_prefix ((Obj.magic f : (string * Obj.t) list)) (Obj.repr (left)))) : int); raise Return
  with Return -> !__ret)

and fenwick_get f index =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  __ret := (Obj.magic (fenwick_query ((Obj.magic f : (string * Obj.t) list)) (Obj.repr (index)) (Obj.repr ((index + 1)))) : int); raise Return
  with Return -> !__ret)

and fenwick_rank_query f value =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  let v = ref ((value - List.nth ((Obj.obj (List.assoc (__str ("tree")) (f) : Obj.t) : int list)) (0))) in
  if (!v < 0) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let j = ref (1) in
  (try while ((!j * 2) < (Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int)) do
    try
  j := (!j * 2);
    with Continue -> ()
  done with Break -> ());
  let i = ref (0) in
  let jj = ref (!j) in
  (try while (!jj > 0) do
    try
  if (((!i + !jj) < (Obj.obj (List.assoc (__str ("size")) (f) : Obj.t) : int)) && (List.nth ((Obj.obj (List.assoc (__str ("tree")) (f) : Obj.t) : int list)) ((!i + !jj)) <= !v)) then (
  v := (!v - List.nth ((Obj.obj (List.assoc (__str ("tree")) (f) : Obj.t) : int list)) ((!i + !jj)));
  i := (!i + !jj);
  );
  jj := (!jj / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!i) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let f_base = fenwick_from_list ([1; 2; 3; 4; 5]) in
  print_endline (__show_list (fenwick_get_array (f_base)));
  let f = ref (fenwick_from_list ([1; 2; 3; 4; 5])) in
  f := fenwick_add (!f) (Obj.repr (0)) (Obj.repr (1));
  f := fenwick_add (!f) (Obj.repr (1)) (Obj.repr (2));
  f := fenwick_add (!f) (Obj.repr (2)) (Obj.repr (3));
  f := fenwick_add (!f) (Obj.repr (3)) (Obj.repr (4));
  f := fenwick_add (!f) (Obj.repr (4)) (Obj.repr (5));
  print_endline (__show_list (fenwick_get_array (!f)));
  let f2 = fenwick_from_list ([1; 2; 3; 4; 5]) in
  print_endline (string_of_int (fenwick_prefix (f2) (Obj.repr (3))));
  print_endline (string_of_int (fenwick_query (f2) (Obj.repr (1)) (Obj.repr (4))));
  let f3 = fenwick_from_list ([1; 2; 0; 3; 0; 5]) in
  print_endline (string_of_int (fenwick_rank_query (f3) (Obj.repr (0))));
  print_endline (string_of_int (fenwick_rank_query (f3) (Obj.repr (2))));
  print_endline (string_of_int (fenwick_rank_query (f3) (Obj.repr (1))));
  print_endline (string_of_int (fenwick_rank_query (f3) (Obj.repr (3))));
  print_endline (string_of_int (fenwick_rank_query (f3) (Obj.repr (5))));
  print_endline (string_of_int (fenwick_rank_query (f3) (Obj.repr (6))));
  print_endline (string_of_int (fenwick_rank_query (f3) (Obj.repr (11))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()