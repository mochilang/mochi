(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec inorder nodes index acc =
  let __ret = ref ([] : (int) list) in
  (try
  let index = (Obj.magic index : int) in
  if (index = (0 - 1)) then (
  __ret := (Obj.magic (acc) : int list); raise Return
  );
  let node = ref (List.nth (nodes) (index)) in
  let res = ref (inorder (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int))) (acc)) in
  res := (List.append (!res) [(Obj.magic ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int)) : int)]);
  res := inorder (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))) (!res);
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and size nodes index =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  if (index = (0 - 1)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let node = ref (List.nth (nodes) (index)) in
  __ret := (Obj.magic (((1 + size (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int)))) + size (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))))) : int); raise Return
  with Return -> !__ret)

and depth nodes index =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  if (index = (0 - 1)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let node = ref (List.nth (nodes) (index)) in
  let left_depth = depth (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int))) in
  let right_depth = depth (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))) in
  if (left_depth > right_depth) then (
  __ret := (Obj.magic ((left_depth + 1)) : int); raise Return
  );
  __ret := (Obj.magic ((right_depth + 1)) : int); raise Return
  with Return -> !__ret)

and is_full nodes index =
  let __ret = ref false in
  (try
  let index = (Obj.magic index : int) in
  if (index = (0 - 1)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let node = ref (List.nth (nodes) (index)) in
  if (((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int) = (0 - 1)) && ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int) = (0 - 1))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if (((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int) <> (0 - 1)) && ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int) <> (0 - 1))) then (
  __ret := (Obj.magic ((is_full (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int))) && is_full (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))))) : bool); raise Return
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and small_tree () =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let arr = ref (([] : ((string * Obj.t) list) list)) in
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (2)); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (2))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (1)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (3)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]) : (string * Obj.t) list)]);
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and medium_tree () =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let arr = ref (([] : ((string * Obj.t) list) list)) in
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (4)); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (4))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (2)); (__str ("left"), Obj.repr (2)); (__str ("right"), Obj.repr (3))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (1)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (3)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (5)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr (5))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (6)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr (6))]) : (string * Obj.t) list)]);
  arr := (List.append (!arr) [(Obj.magic ([(__str ("data"), Obj.repr (7)); (__str ("left"), Obj.repr ((0 - 1))); (__str ("right"), Obj.repr ((0 - 1)))]) : (string * Obj.t) list)]);
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let small = ref (small_tree ())
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (size ((Obj.magic !small : (string * Obj.t) list list)) (Obj.repr (0))));
  print_endline (__show_list (inorder ((Obj.magic !small : (string * Obj.t) list list)) (Obj.repr (0)) ((Obj.magic [] : int list))));
  print_endline (string_of_int (depth ((Obj.magic !small : (string * Obj.t) list list)) (Obj.repr (0))));
  print_endline (string_of_bool (is_full ((Obj.magic !small : (string * Obj.t) list list)) (Obj.repr (0))));
  let medium = ref (medium_tree ()) in
  print_endline (string_of_int (size ((Obj.magic !medium : (string * Obj.t) list list)) (Obj.repr (0))));
  print_endline (__show_list (inorder ((Obj.magic !medium : (string * Obj.t) list list)) (Obj.repr (0)) ((Obj.magic [] : int list))));
  print_endline (string_of_int (depth ((Obj.magic !medium : (string * Obj.t) list list)) (Obj.repr (0))));
  print_endline (string_of_bool (is_full ((Obj.magic !medium : (string * Obj.t) list list)) (Obj.repr (0))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()