(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _nil = (0 - 1)
let rec make_tree () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("values"), Obj.repr ([3; 9; 20; 15; 7])); (__str ("lefts"), Obj.repr ([1; _nil; 3; _nil; _nil])); (__str ("rights"), Obj.repr ([2; _nil; 4; _nil; _nil])); (__str ("root"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and index_of xs x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (_nil) : int); raise Return
  with Return -> !__ret)

and sort_pairs hds vals =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (!hds)) do
    try
  let j = ref (!i) in
  (try while ((!j > 0) && (List.nth (!hds) ((!j - 1)) > List.nth (!hds) (!j))) do
    try
  let hd_tmp = List.nth (!hds) ((!j - 1)) in
  hds := (List.mapi (fun __i __x -> if __i = (!j - 1) then List.nth (!hds) (!j) else __x) (!hds));
  hds := (List.mapi (fun __i __x -> if __i = !j then hd_tmp else __x) (!hds));
  let val_tmp = List.nth (!vals) ((!j - 1)) in
  vals := (List.mapi (fun __i __x -> if __i = (!j - 1) then List.nth (!vals) (!j) else __x) (!vals));
  vals := (List.mapi (fun __i __x -> if __i = !j then val_tmp else __x) (!vals));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and right_view t =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let queue = ref ([(Obj.obj (List.assoc (__str ("root")) (t) : Obj.t) : int)]) in
  (try while (List.length (!queue) > 0) do
    try
  let size = List.length (!queue) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  let idx = List.nth (!queue) (!i) in
  if (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue := (List.append (!queue) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx)) : int)]);
  );
  if (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue := (List.append (!queue) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx)) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("values")) (t) : Obj.t) : int list)) (List.nth (!queue) ((size - 1)))) : int)]);
  queue := List.of_seq (Seq.take (List.length (!queue) - size) (Seq.drop size (List.to_seq (!queue))));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and left_view t =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let queue = ref ([(Obj.obj (List.assoc (__str ("root")) (t) : Obj.t) : int)]) in
  (try while (List.length (!queue) > 0) do
    try
  let size = List.length (!queue) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  let idx = List.nth (!queue) (!i) in
  if (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue := (List.append (!queue) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx)) : int)]);
  );
  if (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue := (List.append (!queue) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx)) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("values")) (t) : Obj.t) : int list)) (List.nth (!queue) (0))) : int)]);
  queue := List.of_seq (Seq.take (List.length (!queue) - size) (Seq.drop size (List.to_seq (!queue))));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and top_view t =
  let __ret = ref ([] : (int) list) in
  (try
  let hds = ref (([] : (int) list)) in
  let vals = ref (([] : (int) list)) in
  let queue_idx = ref ([(Obj.obj (List.assoc (__str ("root")) (t) : Obj.t) : int)]) in
  let queue_hd = ref ([0]) in
  (try while (List.length (!queue_idx) > 0) do
    try
  let idx = List.nth (!queue_idx) (0) in
  queue_idx := List.of_seq (Seq.take (List.length (!queue_idx) - 1) (Seq.drop 1 (List.to_seq (!queue_idx))));
  let hd = List.nth (!queue_hd) (0) in
  queue_hd := List.of_seq (Seq.take (List.length (!queue_hd) - 1) (Seq.drop 1 (List.to_seq (!queue_hd))));
  if (index_of (!hds) (Obj.repr (hd)) = _nil) then (
  hds := (List.append (!hds) [(Obj.magic (hd) : int)]);
  vals := (List.append (!vals) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("values")) (t) : Obj.t) : int list)) (idx)) : int)]);
  );
  if (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue_idx := (List.append (!queue_idx) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx)) : int)]);
  queue_hd := (List.append (!queue_hd) [(Obj.magic ((hd - 1)) : int)]);
  );
  if (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue_idx := (List.append (!queue_idx) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx)) : int)]);
  queue_hd := (List.append (!queue_hd) [(Obj.magic ((hd + 1)) : int)]);
  );
    with Continue -> ()
  done with Break -> ());
  ignore (sort_pairs (hds) (vals));
  __ret := (Obj.magic (!vals) : int list); raise Return
  with Return -> !__ret)

and bottom_view t =
  let __ret = ref ([] : (int) list) in
  (try
  let hds = ref (([] : (int) list)) in
  let vals = ref (([] : (int) list)) in
  let queue_idx = ref ([(Obj.obj (List.assoc (__str ("root")) (t) : Obj.t) : int)]) in
  let queue_hd = ref ([0]) in
  (try while (List.length (!queue_idx) > 0) do
    try
  let idx = List.nth (!queue_idx) (0) in
  queue_idx := List.of_seq (Seq.take (List.length (!queue_idx) - 1) (Seq.drop 1 (List.to_seq (!queue_idx))));
  let hd = List.nth (!queue_hd) (0) in
  queue_hd := List.of_seq (Seq.take (List.length (!queue_hd) - 1) (Seq.drop 1 (List.to_seq (!queue_hd))));
  let pos = index_of (!hds) (Obj.repr (hd)) in
  if (pos = _nil) then (
  hds := (List.append (!hds) [(Obj.magic (hd) : int)]);
  vals := (List.append (!vals) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("values")) (t) : Obj.t) : int list)) (idx)) : int)]);
  ) else (
  vals := (List.mapi (fun __i __x -> if __i = pos then List.nth ((Obj.obj (List.assoc (__str ("values")) (t) : Obj.t) : int list)) (idx) else __x) (!vals));
  );
  if (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue_idx := (List.append (!queue_idx) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("lefts")) (t) : Obj.t) : int list)) (idx)) : int)]);
  queue_hd := (List.append (!queue_hd) [(Obj.magic ((hd - 1)) : int)]);
  );
  if (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx) <> _nil) then (
  queue_idx := (List.append (!queue_idx) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("rights")) (t) : Obj.t) : int list)) (idx)) : int)]);
  queue_hd := (List.append (!queue_hd) [(Obj.magic ((hd + 1)) : int)]);
  );
    with Continue -> ()
  done with Break -> ());
  ignore (sort_pairs (hds) (vals));
  __ret := (Obj.magic (!vals) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let tree = make_tree () in
  print_endline (__show_list (right_view (tree)));
  print_endline (__show_list (left_view (tree)));
  print_endline (__show_list (top_view (tree)));
  print_endline (__show_list (bottom_view (tree)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()