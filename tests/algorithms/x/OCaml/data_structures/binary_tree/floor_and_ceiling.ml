(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:36 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec inorder nodes idx =
  let __ret = ref ([] : (int) list) in
  (try
  let idx = (Obj.magic idx : int) in
  if (idx = -(1)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let node = ref (List.nth (nodes) (idx)) in
  let result = ref (inorder (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int)))) in
  result := (List.append (!result) [(Obj.magic ((Obj.obj (List.assoc (__str ("key")) (!node) : Obj.t) : int)) : int)]);
  result := (!result @ inorder (nodes) (Obj.repr ((Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int))));
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and floor_ceiling nodes idx key =
  let __ret = ref ([] : (int) list) in
  (try
  let idx = (Obj.magic idx : int) in
  let key = (Obj.magic key : int) in
  let floor_val = ref (0) in
  let ceiling_val = ref (0) in
  let current = ref (idx) in
  (try while (!current <> -(1)) do
    try
  let node = ref (List.nth (nodes) (!current)) in
  if ((Obj.obj (List.assoc (__str ("key")) (!node) : Obj.t) : int) = key) then (
  floor_val := (Obj.obj (List.assoc (__str ("key")) (!node) : Obj.t) : int);
  ceiling_val := (Obj.obj (List.assoc (__str ("key")) (!node) : Obj.t) : int);
  raise Break;
  );
  if (key < (Obj.obj (List.assoc (__str ("key")) (!node) : Obj.t) : int)) then (
  ceiling_val := (Obj.obj (List.assoc (__str ("key")) (!node) : Obj.t) : int);
  current := (Obj.obj (List.assoc (__str ("left")) (!node) : Obj.t) : int);
  ) else (
  floor_val := (Obj.obj (List.assoc (__str ("key")) (!node) : Obj.t) : int);
  current := (Obj.obj (List.assoc (__str ("right")) (!node) : Obj.t) : int);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([!floor_val; !ceiling_val]) : int list); raise Return
  with Return -> !__ret)


let tree = ref ([[(__str ("key"), Obj.repr (10)); (__str ("left"), Obj.repr (1)); (__str ("right"), Obj.repr (2))]; [(__str ("key"), Obj.repr (5)); (__str ("left"), Obj.repr (3)); (__str ("right"), Obj.repr (4))]; [(__str ("key"), Obj.repr (20)); (__str ("left"), Obj.repr (5)); (__str ("right"), Obj.repr (6))]; [(__str ("key"), Obj.repr (3)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("key"), Obj.repr (7)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("key"), Obj.repr (15)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]; [(__str ("key"), Obj.repr (25)); (__str ("left"), Obj.repr (-(1))); (__str ("right"), Obj.repr (-(1)))]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (inorder ((Obj.magic !tree : (string * Obj.t) list list)) (Obj.repr (0)))));
  print_endline ((__str (floor_ceiling ((Obj.magic !tree : (string * Obj.t) list list)) (Obj.repr (0)) (Obj.repr (8)))));
  print_endline ((__str (floor_ceiling ((Obj.magic !tree : (string * Obj.t) list list)) (Obj.repr (0)) (Obj.repr (14)))));
  print_endline ((__str (floor_ceiling ((Obj.magic !tree : (string * Obj.t) list list)) (Obj.repr (0)) (Obj.repr (-(1))))));
  print_endline ((__str (floor_ceiling ((Obj.magic !tree : (string * Obj.t) list list)) (Obj.repr (0)) (Obj.repr (30)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()