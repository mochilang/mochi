(* Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:30 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec init_int_array n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < ((4 * n) + 5)) do
    try
  arr := (List.append (!arr) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and init_bool_array n =
  let __ret = ref ([] : (bool) list) in
  (try
  let n = (Obj.magic n : int) in
  let arr = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < ((4 * n) + 5)) do
    try
  arr := (List.append (!arr) [(Obj.magic (false) : bool)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : bool list); raise Return
  with Return -> !__ret)

and left idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic ((idx * 2)) : int); raise Return
  with Return -> !__ret)

and right idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic (((idx * 2) + 1)) : int); raise Return
  with Return -> !__ret)

and build segment_tree idx l r a =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let l = (Obj.magic l : int) in
  let r = (Obj.magic r : int) in
  if (l = r) then (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then List.nth (a) ((l - 1)) else __x) (!segment_tree));
  ) else (
  let mid = ((l + r) / 2) in
  ignore (build (segment_tree) (Obj.repr (left (Obj.repr (idx)))) (Obj.repr (l)) (Obj.repr (mid)) (a));
  ignore (build (segment_tree) (Obj.repr (right (Obj.repr (idx)))) (Obj.repr ((mid + 1))) (Obj.repr (r)) (a));
  let lv = List.nth (!segment_tree) (left (Obj.repr (idx))) in
  let rv = List.nth (!segment_tree) (right (Obj.repr (idx))) in
  if (lv > rv) then (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then lv else __x) (!segment_tree));
  ) else (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then rv else __x) (!segment_tree));
  );
  );
    !__ret
  with Return -> !__ret)

and update segment_tree lazy_ flag idx l r a b val_ =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let l = (Obj.magic l : int) in
  let r = (Obj.magic r : int) in
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let val_ = (Obj.magic val_ : int) in
  if List.nth (!flag) (idx) then (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then List.nth (!lazy_) (idx) else __x) (!segment_tree));
  flag := (List.mapi (fun __i __x -> if __i = idx then false else __x) (!flag));
  if (l <> r) then (
  lazy_ := (List.mapi (fun __i __x -> if __i = left (Obj.repr (idx)) then List.nth (!lazy_) (idx) else __x) (!lazy_));
  lazy_ := (List.mapi (fun __i __x -> if __i = right (Obj.repr (idx)) then List.nth (!lazy_) (idx) else __x) (!lazy_));
  flag := (List.mapi (fun __i __x -> if __i = left (Obj.repr (idx)) then true else __x) (!flag));
  flag := (List.mapi (fun __i __x -> if __i = right (Obj.repr (idx)) then true else __x) (!flag));
  );
  );
  if ((r < a) || (l > b)) then (
  __ret := (); raise Return
  );
  if ((l >= a) && (r <= b)) then (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then val_ else __x) (!segment_tree));
  if (l <> r) then (
  lazy_ := (List.mapi (fun __i __x -> if __i = left (Obj.repr (idx)) then val_ else __x) (!lazy_));
  lazy_ := (List.mapi (fun __i __x -> if __i = right (Obj.repr (idx)) then val_ else __x) (!lazy_));
  flag := (List.mapi (fun __i __x -> if __i = left (Obj.repr (idx)) then true else __x) (!flag));
  flag := (List.mapi (fun __i __x -> if __i = right (Obj.repr (idx)) then true else __x) (!flag));
  );
  __ret := (); raise Return
  );
  let mid = ((l + r) / 2) in
  ignore (update (segment_tree) (lazy_) (flag) (Obj.repr (left (Obj.repr (idx)))) (Obj.repr (l)) (Obj.repr (mid)) (Obj.repr (a)) (Obj.repr (b)) (Obj.repr (val_)));
  ignore (update (segment_tree) (lazy_) (flag) (Obj.repr (right (Obj.repr (idx)))) (Obj.repr ((mid + 1))) (Obj.repr (r)) (Obj.repr (a)) (Obj.repr (b)) (Obj.repr (val_)));
  let lv = List.nth (!segment_tree) (left (Obj.repr (idx))) in
  let rv = List.nth (!segment_tree) (right (Obj.repr (idx))) in
  if (lv > rv) then (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then lv else __x) (!segment_tree));
  ) else (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then rv else __x) (!segment_tree));
  );
    !__ret
  with Return -> !__ret)


let _neg_inf = -(1000000000)
let rec query segment_tree lazy_ flag idx l r a b =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  let l = (Obj.magic l : int) in
  let r = (Obj.magic r : int) in
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if List.nth (!flag) (idx) then (
  segment_tree := (List.mapi (fun __i __x -> if __i = idx then List.nth (!lazy_) (idx) else __x) (!segment_tree));
  flag := (List.mapi (fun __i __x -> if __i = idx then false else __x) (!flag));
  if (l <> r) then (
  lazy_ := (List.mapi (fun __i __x -> if __i = left (Obj.repr (idx)) then List.nth (!lazy_) (idx) else __x) (!lazy_));
  lazy_ := (List.mapi (fun __i __x -> if __i = right (Obj.repr (idx)) then List.nth (!lazy_) (idx) else __x) (!lazy_));
  flag := (List.mapi (fun __i __x -> if __i = left (Obj.repr (idx)) then true else __x) (!flag));
  flag := (List.mapi (fun __i __x -> if __i = right (Obj.repr (idx)) then true else __x) (!flag));
  );
  );
  if ((r < a) || (l > b)) then (
  __ret := (Obj.magic (_neg_inf) : int); raise Return
  );
  if ((l >= a) && (r <= b)) then (
  __ret := (Obj.magic (List.nth (!segment_tree) (idx)) : int); raise Return
  );
  let mid = ((l + r) / 2) in
  let q1 = query (segment_tree) (lazy_) (flag) (Obj.repr (left (Obj.repr (idx)))) (Obj.repr (l)) (Obj.repr (mid)) (Obj.repr (a)) (Obj.repr (b)) in
  let q2 = query (segment_tree) (lazy_) (flag) (Obj.repr (right (Obj.repr (idx)))) (Obj.repr ((mid + 1))) (Obj.repr (r)) (Obj.repr (a)) (Obj.repr (b)) in
  if (q1 > q2) then (
  __ret := (Obj.magic (q1) : int); raise Return
  ) else (
  __ret := (Obj.magic (q2) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and segtree_to_string segment_tree lazy_ flag n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let res = ref ("[") in
  let i = ref (1) in
  (try while (!i <= n) do
    try
  let v = query (ref (segment_tree)) (ref (lazy_)) (ref (flag)) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (!i)) (Obj.repr (!i)) in
  res := (!res ^ (string_of_int (v)));
  if (!i < n) then (
  res := (!res ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ "]");
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let _a = ref ([1; 2; -(4); 7; 3; -(5); 6; 11; -(20); 9; 14; 15; 5; 2; -(8)])
let n = 15
let segment_tree = ref (init_int_array (Obj.repr (n)))
let lazy_ = ref (init_int_array (Obj.repr (n)))
let flag = ref (init_bool_array (Obj.repr (n)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (build (segment_tree) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (!_a));
  print_endline (string_of_int (query (segment_tree) (lazy_) (flag) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (4)) (Obj.repr (6))));
  print_endline (string_of_int (query (segment_tree) (lazy_) (flag) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (7)) (Obj.repr (11))));
  print_endline (string_of_int (query (segment_tree) (lazy_) (flag) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (7)) (Obj.repr (12))));
  ignore (update (segment_tree) (lazy_) (flag) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (1)) (Obj.repr (3)) (Obj.repr (111)));
  print_endline (string_of_int (query (segment_tree) (lazy_) (flag) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (1)) (Obj.repr (15))));
  ignore (update (segment_tree) (lazy_) (flag) (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (n)) (Obj.repr (7)) (Obj.repr (8)) (Obj.repr (235)));
  print_endline ((segtree_to_string (!segment_tree) (!lazy_) (!flag) (Obj.repr (n))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()