(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:10 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_buckets n =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let n = (Obj.magic n : int) in
  let buckets = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  buckets := (List.append (!buckets) [(Obj.magic ([(__str ("state"), Obj.repr (0)); (__str ("key"), Obj.repr (0)); (__str ("val"), Obj.repr (0))]) : (string * Obj.t) list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!buckets) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and hashmap_new initial_size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let initial_size = (Obj.magic initial_size : int) in
  __ret := (Obj.magic ([(__str ("buckets"), Obj.repr (make_buckets (Obj.repr (initial_size)))); (__str ("len"), Obj.repr (0)); (__str ("cap_num"), Obj.repr (3)); (__str ("cap_den"), Obj.repr (4)); (__str ("initial_size"), Obj.repr (initial_size))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and bucket_index hm key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  let ind = ref (((key mod List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) + List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list))) mod List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)))) in
  if (!ind < 0) then (
  ind := (!ind + List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)));
  );
  __ret := (Obj.magic (!ind) : int); raise Return
  with Return -> !__ret)

and next_index hm ind =
  let __ret = ref 0 in
  (try
  let ind = (Obj.magic ind : int) in
  __ret := (Obj.magic ((((ind + 1) mod List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) + List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list))) mod List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)))) : int); raise Return
  with Return -> !__ret)

and try_set hm ind key val_ =
  let __ret = ref false in
  (try
  let ind = (Obj.magic ind : int) in
  let key = (Obj.magic key : int) in
  let val_ = (Obj.magic val_ : int) in
  let buckets = ref ((Obj.obj (List.assoc (__str ("buckets")) (!hm) : Obj.t) : (string * Obj.t) list list)) in
  let b = ref (List.nth (!buckets) (ind)) in
  if (((Obj.obj (List.assoc (__str ("state")) (!b) : Obj.t) : int) = 0) || ((Obj.obj (List.assoc (__str ("state")) (!b) : Obj.t) : int) = 2)) then (
  buckets := (List.mapi (fun __i __x -> if __i = ind then [(__str ("state"), Obj.repr (1)); (__str ("key"), Obj.repr (key)); (__str ("val"), Obj.repr (val_))] else __x) (!buckets));
  hm := ((__str ("buckets"), Obj.repr (!buckets)) :: List.remove_assoc (__str ("buckets")) (Obj.magic (!hm) : (string * Obj.t) list));
  hm := ((__str ("len"), Obj.repr (((Obj.obj (List.assoc (__str ("len")) (!hm) : Obj.t) : int) + 1))) :: List.remove_assoc (__str ("len")) (Obj.magic (!hm) : (string * Obj.t) list));
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if ((Obj.obj (List.assoc (__str ("key")) (!b) : Obj.t) : int) = key) then (
  buckets := (List.mapi (fun __i __x -> if __i = ind then [(__str ("state"), Obj.repr (1)); (__str ("key"), Obj.repr (key)); (__str ("val"), Obj.repr (val_))] else __x) (!buckets));
  hm := ((__str ("buckets"), Obj.repr (!buckets)) :: List.remove_assoc (__str ("buckets")) (Obj.magic (!hm) : (string * Obj.t) list));
  __ret := (Obj.magic (true) : bool); raise Return
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_full hm =
  let __ret = ref false in
  (try
  let limit = ((List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) * (Obj.obj (List.assoc (__str ("cap_num")) (hm) : Obj.t) : int)) / (Obj.obj (List.assoc (__str ("cap_den")) (hm) : Obj.t) : int)) in
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("len")) (hm) : Obj.t) : int) >= limit)) : bool); raise Return
  with Return -> !__ret)

and is_sparse hm =
  let __ret = ref false in
  (try
  if (List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) <= (Obj.obj (List.assoc (__str ("initial_size")) (hm) : Obj.t) : int)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let limit = ((List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) * (Obj.obj (List.assoc (__str ("cap_num")) (hm) : Obj.t) : int)) / (2 * (Obj.obj (List.assoc (__str ("cap_den")) (hm) : Obj.t) : int))) in
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("len")) (hm) : Obj.t) : int) < limit)) : bool); raise Return
  with Return -> !__ret)

and resize hm new_size =
  let __ret = ref (Obj.magic 0) in
  (try
  let new_size = (Obj.magic new_size : int) in
  let old = ref ((Obj.obj (List.assoc (__str ("buckets")) (!hm) : Obj.t) : (string * Obj.t) list list)) in
  hm := ((__str ("buckets"), Obj.repr (make_buckets (Obj.repr (new_size)))) :: List.remove_assoc (__str ("buckets")) (Obj.magic (!hm) : (string * Obj.t) list));
  hm := ((__str ("len"), Obj.repr (0)) :: List.remove_assoc (__str ("len")) (Obj.magic (!hm) : (string * Obj.t) list));
  let i = ref (0) in
  (try while (!i < List.length (!old)) do
    try
  let it = ref (List.nth (!old) (!i)) in
  if ((Obj.obj (List.assoc (__str ("state")) (!it) : Obj.t) : int) = 1) then (
  ignore (add_item ((Obj.magic !hm : (string * Obj.t) list)) (Obj.repr ((Obj.obj (List.assoc (__str ("key")) (!it) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("val")) (!it) : Obj.t) : int))));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and size_up hm =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (resize (ref (hm)) (Obj.repr ((List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) * 2))));
    !__ret
  with Return -> !__ret)

and size_down hm =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (resize (ref (hm)) (Obj.repr ((List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) / 2))));
    !__ret
  with Return -> !__ret)

and add_item hm key val_ =
  let __ret = ref (Obj.magic 0) in
  (try
  let key = (Obj.magic key : int) in
  let val_ = (Obj.magic val_ : int) in
  let ind = ref (bucket_index ((Obj.magic hm : (string * Obj.t) list)) (Obj.repr (key))) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list))) do
    try
  if try_set (ref (hm)) (Obj.repr (!ind)) (Obj.repr (key)) (Obj.repr (val_)) then (
  raise Break;
  );
  ind := next_index ((Obj.magic hm : (string * Obj.t) list)) (Obj.repr (!ind));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and hashmap_set hm key val_ =
  let __ret = ref (Obj.magic 0) in
  (try
  let key = (Obj.magic key : int) in
  let val_ = (Obj.magic val_ : int) in
  if is_full ((Obj.magic hm : (string * Obj.t) list)) then (
  ignore (size_up ((Obj.magic hm : (string * Obj.t) list)));
  );
  ignore (add_item ((Obj.magic hm : (string * Obj.t) list)) (Obj.repr (key)) (Obj.repr (val_)));
    !__ret
  with Return -> !__ret)

and hashmap_get hm key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  let buckets = ref ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) in
  let ind = ref (bucket_index ((Obj.magic hm : (string * Obj.t) list)) (Obj.repr (key))) in
  let i = ref (0) in
  (try while (!i < List.length (!buckets)) do
    try
  let it = ref (List.nth (!buckets) (!ind)) in
  if ((Obj.obj (List.assoc (__str ("state")) (!it) : Obj.t) : int) = 0) then (
  raise Break;
  );
  if (((Obj.obj (List.assoc (__str ("state")) (!it) : Obj.t) : int) = 1) && ((Obj.obj (List.assoc (__str ("key")) (!it) : Obj.t) : int) = key)) then (
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("val")) (!it) : Obj.t) : int)) : int); raise Return
  );
  ind := next_index ((Obj.magic hm : (string * Obj.t) list)) (Obj.repr (!ind));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and hashmap_del hm key =
  let __ret = ref (Obj.magic 0) in
  (try
  let key = (Obj.magic key : int) in
  let buckets = ref ((Obj.obj (List.assoc (__str ("buckets")) (!hm) : Obj.t) : (string * Obj.t) list list)) in
  let ind = ref (bucket_index ((Obj.magic !hm : (string * Obj.t) list)) (Obj.repr (key))) in
  let i = ref (0) in
  (try while (!i < List.length (!buckets)) do
    try
  let it = ref (List.nth (!buckets) (!ind)) in
  if ((Obj.obj (List.assoc (__str ("state")) (!it) : Obj.t) : int) = 0) then (
  print_endline (("KeyError: " ^ (string_of_int (key))));
  __ret := (); raise Return
  );
  if (((Obj.obj (List.assoc (__str ("state")) (!it) : Obj.t) : int) = 1) && ((Obj.obj (List.assoc (__str ("key")) (!it) : Obj.t) : int) = key)) then (
  buckets := (List.mapi (fun __i __x -> if __i = !ind then [(__str ("state"), Obj.repr (2)); (__str ("key"), Obj.repr (0)); (__str ("val"), Obj.repr (0))] else __x) (!buckets));
  hm := ((__str ("buckets"), Obj.repr (!buckets)) :: List.remove_assoc (__str ("buckets")) (Obj.magic (!hm) : (string * Obj.t) list));
  hm := ((__str ("len"), Obj.repr (((Obj.obj (List.assoc (__str ("len")) (!hm) : Obj.t) : int) - 1))) :: List.remove_assoc (__str ("len")) (Obj.magic (!hm) : (string * Obj.t) list));
  raise Break;
  );
  ind := next_index ((Obj.magic !hm : (string * Obj.t) list)) (Obj.repr (!ind));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if is_sparse ((Obj.magic !hm : (string * Obj.t) list)) then (
  ignore (size_down ((Obj.magic !hm : (string * Obj.t) list)));
  );
    !__ret
  with Return -> !__ret)

and hashmap_len hm =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("len")) (hm) : Obj.t) : int)) : int); raise Return
  with Return -> !__ret)

and hashmap_repr hm =
  let __ret = ref "" in
  (try
  let out = ref ("HashMap(") in
  let first = ref (true) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list))) do
    try
  let b = ref (List.nth ((Obj.obj (List.assoc (__str ("buckets")) (hm) : Obj.t) : (string * Obj.t) list list)) (!i)) in
  if ((Obj.obj (List.assoc (__str ("state")) (!b) : Obj.t) : int) = 1) then (
  if not (!first) then (
  out := (!out ^ ", ");
  ) else (
  first := false;
  );
  out := (((!out ^ (string_of_int ((Obj.obj (List.assoc (__str ("key")) (!b) : Obj.t) : int)))) ^ ": ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("val")) (!b) : Obj.t) : int))));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  out := (!out ^ ")");
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)


let hm = ref (hashmap_new (Obj.repr (5)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (hashmap_set (!hm) (Obj.repr (1)) (Obj.repr (10)));
  ignore (hashmap_set (!hm) (Obj.repr (2)) (Obj.repr (20)));
  ignore (hashmap_set (!hm) (Obj.repr (3)) (Obj.repr (30)));
  print_endline ((hashmap_repr (!hm)));
  print_endline ((string_of_int (hashmap_get (!hm) (Obj.repr (2)))));
  ignore (hashmap_del (hm) (Obj.repr (1)));
  print_endline ((hashmap_repr (!hm)));
  print_endline ((string_of_int (hashmap_len (!hm))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()