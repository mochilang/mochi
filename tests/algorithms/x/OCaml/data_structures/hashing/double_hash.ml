(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:41 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec is_prime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (2) in
  (try while ((!i * !i) <= n) do
    try
  if (((n mod !i + !i) mod !i) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and prev_prime n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref ((n - 1)) in
  (try while (!p >= 2) do
    try
  if is_prime (Obj.repr (!p)) then (
  __ret := (Obj.magic (!p) : int); raise Return
  );
  p := (!p - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (1) : int); raise Return
  with Return -> !__ret)

and create_table size =
  let __ret = ref ([] : (int) list) in
  (try
  let size = (Obj.magic size : int) in
  let vals = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  vals := (List.append (!vals) [(Obj.magic (-(1)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!vals) : int list); raise Return
  with Return -> !__ret)

and hash1 size key =
  let __ret = ref 0 in
  (try
  let size = (Obj.magic size : int) in
  let key = (Obj.magic key : int) in
  __ret := (Obj.magic (((key mod size + size) mod size)) : int); raise Return
  with Return -> !__ret)

and hash2 prime key =
  let __ret = ref 0 in
  (try
  let prime = (Obj.magic prime : int) in
  let key = (Obj.magic key : int) in
  __ret := (Obj.magic ((prime - ((key mod prime + prime) mod prime))) : int); raise Return
  with Return -> !__ret)

and insert_double_hash values size prime value =
  let __ret = ref ([] : (int) list) in
  (try
  let size = (Obj.magic size : int) in
  let prime = (Obj.magic prime : int) in
  let value = (Obj.magic value : int) in
  let vals = ref (values) in
  let idx = ref (hash1 (Obj.repr (size)) (Obj.repr (value))) in
  let step = hash2 (Obj.repr (prime)) (Obj.repr (value)) in
  let count = ref (0) in
  (try while ((List.nth (!vals) (!idx) <> -(1)) && (!count < size)) do
    try
  idx := (((!idx + step) mod size + size) mod size);
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.nth (!vals) (!idx) = -(1)) then (
  vals := (List.mapi (fun __i __x -> if __i = !idx then value else __x) (!vals));
  );
  __ret := (Obj.magic (!vals) : int list); raise Return
  with Return -> !__ret)

and table_keys values =
  let __ret = ref ([] : (string * int) list) in
  (try
  let res = ref ([] : (string * int) list) in
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  if (List.nth (values) (!i) <> -(1)) then (
  res := ((__str (!i), List.nth (values) (!i)) :: List.remove_assoc (__str (!i)) !res);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * int) list); raise Return
  with Return -> !__ret)

and run_example size data =
  let __ret = ref (Obj.magic 0) in
  (try
  let size = (Obj.magic size : int) in
  let prime = prev_prime (Obj.repr (size)) in
  let table = ref (create_table (Obj.repr (size))) in
  let i = ref (0) in
  (try while (!i < List.length (data)) do
    try
  table := insert_double_hash (!table) (Obj.repr (size)) (Obj.repr (prime)) (Obj.repr (List.nth (data) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((__show (table_keys (!table))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (run_example (Obj.repr (3)) ([10; 20; 30]));
  ignore (run_example (Obj.repr (4)) ([10; 20; 30]));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()