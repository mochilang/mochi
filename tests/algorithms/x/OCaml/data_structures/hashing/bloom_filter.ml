(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:41 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
let rec ord ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (ascii)) do
    try
  if (String.sub (ascii) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic ((32 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and new_bloom size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let size = (Obj.magic size : int) in
  let bits = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  bits := (List.append (!bits) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("size"), Obj.repr (size)); (__str ("bits"), Obj.repr (!bits))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and hash1 value size =
  let __ret = ref 0 in
  (try
  let size = (Obj.magic size : int) in
  let h = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (value)) do
    try
  h := ((((!h * 31) + ord (String.sub (value) !i ((!i + 1) - !i))) mod size + size) mod size);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!h) : int); raise Return
  with Return -> !__ret)

and hash2 value size =
  let __ret = ref 0 in
  (try
  let size = (Obj.magic size : int) in
  let h = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (value)) do
    try
  h := ((((!h * 131) + ord (String.sub (value) !i ((!i + 1) - !i))) mod size + size) mod size);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!h) : int); raise Return
  with Return -> !__ret)

and hash_positions value size =
  let __ret = ref ([] : (int) list) in
  (try
  let size = (Obj.magic size : int) in
  let h1 = hash1 (value) (Obj.repr (size)) in
  let h2 = hash2 (value) (Obj.repr (size)) in
  let res = ref (([] : (int) list)) in
  res := (List.append (!res) [(Obj.magic (h1) : int)]);
  res := (List.append (!res) [(Obj.magic (h2) : int)]);
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and bloom_add b value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let pos = ref (hash_positions (value) (Obj.repr ((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int)))) in
  let bits = ref ((Obj.obj (List.assoc (__str ("bits")) (b) : Obj.t) : int list)) in
  let i = ref (0) in
  (try while (!i < List.length (!pos)) do
    try
  let idx = (((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int) - 1) - List.nth (!pos) (!i)) in
  bits := (List.mapi (fun __i __x -> if __i = idx then 1 else __x) (!bits));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("size"), Obj.repr ((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int))); (__str ("bits"), Obj.repr (!bits))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and bloom_exists b value =
  let __ret = ref false in
  (try
  let pos = ref (hash_positions (value) (Obj.repr ((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int)))) in
  let i = ref (0) in
  (try while (!i < List.length (!pos)) do
    try
  let idx = (((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int) - 1) - List.nth (!pos) (!i)) in
  if (List.nth ((Obj.obj (List.assoc (__str ("bits")) (b) : Obj.t) : int list)) (idx) <> 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and bitstring b =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int)) do
    try
  res := (!res ^ (string_of_int (List.nth ((Obj.obj (List.assoc (__str ("bits")) (b) : Obj.t) : int list)) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and format_hash b value =
  let __ret = ref "" in
  (try
  let pos = ref (hash_positions (value) (Obj.repr ((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int)))) in
  let bits = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int)) do
    try
  bits := (List.append (!bits) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!pos)) do
    try
  let idx = (((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int) - 1) - List.nth (!pos) (!i)) in
  bits := (List.mapi (fun __i __x -> if __i = idx then 1 else __x) (!bits));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  i := 0;
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int)) do
    try
  res := (!res ^ (string_of_int (List.nth (!bits) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and estimated_error_rate b =
  let __ret = ref 0.0 in
  (try
  let ones = ref (0) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int)) do
    try
  if (List.nth ((Obj.obj (List.assoc (__str ("bits")) (b) : Obj.t) : int list)) (!i) = 1) then (
  ones := (!ones + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let frac = (float_of_int (!ones) /. float_of_int ((Obj.obj (List.assoc (__str ("size")) (b) : Obj.t) : int))) in
  __ret := (Obj.magic ((frac *. frac)) : float); raise Return
  with Return -> !__ret)

and any_in b items =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (items)) do
    try
  if bloom_exists ((Obj.magic b : (string * Obj.t) list)) (List.nth (items) (!i)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let bloom = ref (new_bloom (Obj.repr (8))) in
  print_endline ((bitstring (!bloom)));
  print_endline (string_of_bool (bloom_exists (!bloom) ("Titanic")));
  bloom := bloom_add (!bloom) ("Titanic");
  print_endline ((bitstring (!bloom)));
  print_endline (string_of_bool (bloom_exists (!bloom) ("Titanic")));
  bloom := bloom_add (!bloom) ("Avatar");
  print_endline (string_of_bool (bloom_exists (!bloom) ("Avatar")));
  print_endline ((format_hash (!bloom) ("Avatar")));
  print_endline ((bitstring (!bloom)));
  let not_present = ref (["The Godfather"; "Interstellar"; "Parasite"; "Pulp Fiction"]) in
  let i = ref (0) in
  (try while (!i < List.length (!not_present)) do
    try
  let film = List.nth (!not_present) (!i) in
  print_endline (((film ^ ":") ^ format_hash (!bloom) (film)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (string_of_bool (any_in (!bloom) (!not_present)));
  print_endline (string_of_bool (bloom_exists (!bloom) ("Ratatouille")));
  print_endline ((format_hash (!bloom) ("Ratatouille")));
  print_endline ((Printf.sprintf "%.16g" (estimated_error_rate (!bloom))));
  bloom := bloom_add (!bloom) ("The Godfather");
  print_endline ((Printf.sprintf "%.16g" (estimated_error_rate (!bloom))));
  print_endline ((bitstring (!bloom)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()