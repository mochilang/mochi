(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:41 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_table size_table charge_factor =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let size_table = (Obj.magic size_table : int) in
  let charge_factor = (Obj.magic charge_factor : int) in
  let vals = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < size_table) do
    try
  vals := (List.append (!vals) [(Obj.magic ([]) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("size_table"), Obj.repr (size_table)); (__str ("charge_factor"), Obj.repr (charge_factor)); (__str ("values"), Obj.repr (!vals)); (__str ("keys"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and hash_function ht key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  let res = ref (((key mod (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int)) mod (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int))) in
  if (!res < 0) then (
  res := (!res + (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int));
  );
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and prepend lst value =
  let __ret = ref ([] : (int) list) in
  (try
  let value = (Obj.magic value : int) in
  let result = ref ([value]) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  result := (List.append (!result) [(Obj.magic (List.nth (lst) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and set_value ht key data =
  let __ret = ref (Obj.magic 0) in
  (try
  let key = (Obj.magic key : int) in
  let data = (Obj.magic data : int) in
  let current = ref (List.nth ((Obj.obj (List.assoc (__str ("values")) (!ht) : Obj.t) : int list list)) (key)) in
  let updated = ref (prepend (!current) (Obj.repr (data))) in
  let vals = ref ((Obj.obj (List.assoc (__str ("values")) (!ht) : Obj.t) : int list list)) in
  vals := (List.mapi (fun __i __x -> if __i = key then !updated else __x) (!vals));
  ht := ((__str ("values"), Obj.repr (!vals)) :: List.remove_assoc (__str ("values")) (Obj.magic (!ht) : (string * Obj.t) list));
  let ks = ref ((Obj.obj (List.assoc (__str ("keys")) (!ht) : Obj.t) : ( string * int list ) list)) in
  ks := ((__str (key), !updated) :: List.remove_assoc (__str (key)) !ks);
  ht := ((__str ("keys"), Obj.repr (!ks)) :: List.remove_assoc (__str ("keys")) (Obj.magic (!ht) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and count_empty ht =
  let __ret = ref 0 in
  (try
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list))) do
    try
  if (List.length (List.nth ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list)) (!i)) = 0) then (
  count := (!count + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and balanced_factor ht =
  let __ret = ref 0.0 in
  (try
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list))) do
    try
  total := (!total + ((Obj.obj (List.assoc (__str ("charge_factor")) (ht) : Obj.t) : int) - List.length (List.nth ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list)) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((float_of_int (!total) /. float_of_int ((Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int))) *. float_of_int ((Obj.obj (List.assoc (__str ("charge_factor")) (ht) : Obj.t) : int)))) : float); raise Return
  with Return -> !__ret)

and collision_resolution ht key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  if not (((List.length (List.nth ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list)) (key)) = (Obj.obj (List.assoc (__str ("charge_factor")) (ht) : Obj.t) : int)) && (count_empty ((Obj.magic ht : (string * Obj.t) list)) = 0))) then (
  __ret := (Obj.magic (key) : int); raise Return
  );
  let new_key = ref ((((key + 1) mod (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int)) mod (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int))) in
  let steps = ref (0) in
  (try while ((List.length (List.nth ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list)) (!new_key)) = (Obj.obj (List.assoc (__str ("charge_factor")) (ht) : Obj.t) : int)) && (!steps < ((Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int) - 1))) do
    try
  new_key := (((!new_key + 1) mod (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int)) mod (Obj.obj (List.assoc (__str ("size_table")) (ht) : Obj.t) : int));
  steps := (!steps + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (List.nth ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list)) (!new_key)) < (Obj.obj (List.assoc (__str ("charge_factor")) (ht) : Obj.t) : int)) then (
  __ret := (Obj.magic (!new_key) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and insert ht data =
  let __ret = ref (Obj.magic 0) in
  (try
  let data = (Obj.magic data : int) in
  let key = ref (hash_function ((Obj.magic ht : (string * Obj.t) list)) (Obj.repr (data))) in
  if ((List.length (List.nth ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list)) (!key)) = 0) || (List.length (List.nth ((Obj.obj (List.assoc (__str ("values")) (ht) : Obj.t) : int list list)) (!key)) < (Obj.obj (List.assoc (__str ("charge_factor")) (ht) : Obj.t) : int))) then (
  ignore (set_value (ref (ht)) (Obj.repr (!key)) (Obj.repr (data)));
  __ret := (); raise Return
  );
  let dest = ref (collision_resolution ((Obj.magic ht : (string * Obj.t) list)) (Obj.repr (!key))) in
  if (!dest >= 0) then (
  ignore (set_value (ref (ht)) (Obj.repr (!dest)) (Obj.repr (data)));
  ) else (
  print_endline ("table full");
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let ht = ref (make_table (Obj.repr (3)) (Obj.repr (2))) in
  ignore (insert (!ht) (Obj.repr (10)));
  ignore (insert (!ht) (Obj.repr (20)));
  ignore (insert (!ht) (Obj.repr (30)));
  ignore (insert (!ht) (Obj.repr (40)));
  ignore (insert (!ht) (Obj.repr (50)));
  print_endline ((__str ((Obj.obj (List.assoc (__str ("values")) (!ht) : Obj.t) : int list list))));
  print_endline ((Printf.sprintf "%.16g" (balanced_factor (!ht))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()