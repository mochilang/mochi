(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_hash_map () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("entries"), Obj.repr ((Obj.magic [] : (string * Obj.t) list list)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and hm_len m =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (List.length ((Obj.obj (List.assoc (__str ("entries")) (m) : Obj.t) : (string * Obj.t) list list))) : int); raise Return
  with Return -> !__ret)

and hm_set m key value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let entries = ref ((Obj.obj (List.assoc (__str ("entries")) (m) : Obj.t) : (string * Obj.t) list list)) in
  let updated = ref (false) in
  let new_entries = ref ((Obj.magic [] : (string * Obj.t) list list)) in
  let i = ref (0) in
  (try while (!i < List.length (!entries)) do
    try
  let e = ref (List.nth (!entries) (!i)) in
  if ((Obj.obj (List.assoc (__str ("key")) (!e) : Obj.t) : string) = key) then (
  new_entries := (List.append (!new_entries) [(Obj.magic ([(__str ("key"), Obj.repr (key)); (__str ("value"), Obj.repr (value))]) : (string * Obj.t) list)]);
  updated := true;
  ) else (
  new_entries := (List.append (!new_entries) [(Obj.magic (!e) : (string * Obj.t) list)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!updated) then (
  new_entries := (List.append (!new_entries) [(Obj.magic ([(__str ("key"), Obj.repr (key)); (__str ("value"), Obj.repr (value))]) : (string * Obj.t) list)]);
  );
  __ret := (Obj.magic ([(__str ("entries"), Obj.repr (!new_entries))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and hm_get m key =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("entries")) (m) : Obj.t) : (string * Obj.t) list list))) do
    try
  let e = ref (List.nth ((Obj.obj (List.assoc (__str ("entries")) (m) : Obj.t) : (string * Obj.t) list list)) (!i)) in
  if ((Obj.obj (List.assoc (__str ("key")) (!e) : Obj.t) : string) = key) then (
  __ret := (Obj.magic ([(__str ("found"), Obj.repr (true)); (__str ("value"), Obj.repr ((Obj.obj (List.assoc (__str ("value")) (!e) : Obj.t) : string)))]) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("found"), Obj.repr (false)); (__str ("value"), Obj.repr (""))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and hm_del m key =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let entries = ref ((Obj.obj (List.assoc (__str ("entries")) (m) : Obj.t) : (string * Obj.t) list list)) in
  let new_entries = ref ((Obj.magic [] : (string * Obj.t) list list)) in
  let removed = ref (false) in
  let i = ref (0) in
  (try while (!i < List.length (!entries)) do
    try
  let e = ref (List.nth (!entries) (!i)) in
  if ((Obj.obj (List.assoc (__str ("key")) (!e) : Obj.t) : string) = key) then (
  removed := true;
  ) else (
  new_entries := (List.append (!new_entries) [(Obj.magic (!e) : (string * Obj.t) list)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !removed then (
  __ret := (Obj.magic ([(__str ("map"), Obj.repr ([(__str ("entries"), Obj.repr (!new_entries))])); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("map"), Obj.repr (m)); (__str ("ok"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and test_add_items () =
  let __ret = ref false in
  (try
  let h = ref (make_hash_map ()) in
  h := hm_set (!h) ("key_a") ("val_a");
  h := hm_set (!h) ("key_b") ("val_b");
  let a = hm_get (!h) ("key_a") in
  let b = hm_get (!h) ("key_b") in
  __ret := (Obj.magic ((((((hm_len (!h) = 2) && (Obj.obj (List.assoc (__str ("found")) (a) : Obj.t) : bool)) && (Obj.obj (List.assoc (__str ("found")) (b) : Obj.t) : bool)) && ((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : string) = "val_a")) && ((Obj.obj (List.assoc (__str ("value")) (b) : Obj.t) : string) = "val_b"))) : bool); raise Return
  with Return -> !__ret)

and test_overwrite_items () =
  let __ret = ref false in
  (try
  let h = ref (make_hash_map ()) in
  h := hm_set (!h) ("key_a") ("val_a");
  h := hm_set (!h) ("key_a") ("val_b");
  let a = hm_get (!h) ("key_a") in
  __ret := (Obj.magic ((((hm_len (!h) = 1) && (Obj.obj (List.assoc (__str ("found")) (a) : Obj.t) : bool)) && ((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : string) = "val_b"))) : bool); raise Return
  with Return -> !__ret)

and test_delete_items () =
  let __ret = ref false in
  (try
  let h = ref (make_hash_map ()) in
  h := hm_set (!h) ("key_a") ("val_a");
  h := hm_set (!h) ("key_b") ("val_b");
  let d1 = hm_del (!h) ("key_a") in
  h := (Obj.obj (List.assoc (__str ("map")) (d1) : Obj.t) : ( string * Obj.t ) list);
  let d2 = hm_del (!h) ("key_b") in
  h := (Obj.obj (List.assoc (__str ("map")) (d2) : Obj.t) : ( string * Obj.t ) list);
  h := hm_set (!h) ("key_a") ("val_a");
  let d3 = hm_del (!h) ("key_a") in
  h := (Obj.obj (List.assoc (__str ("map")) (d3) : Obj.t) : ( string * Obj.t ) list);
  __ret := (Obj.magic ((hm_len (!h) = 0)) : bool); raise Return
  with Return -> !__ret)

and test_access_absent_items () =
  let __ret = ref false in
  (try
  let h = ref (make_hash_map ()) in
  let g1 = hm_get (!h) ("key_a") in
  let d1 = hm_del (!h) ("key_a") in
  h := (Obj.obj (List.assoc (__str ("map")) (d1) : Obj.t) : ( string * Obj.t ) list);
  h := hm_set (!h) ("key_a") ("val_a");
  let d2 = hm_del (!h) ("key_a") in
  h := (Obj.obj (List.assoc (__str ("map")) (d2) : Obj.t) : ( string * Obj.t ) list);
  let d3 = hm_del (!h) ("key_a") in
  h := (Obj.obj (List.assoc (__str ("map")) (d3) : Obj.t) : ( string * Obj.t ) list);
  let g2 = hm_get (!h) ("key_a") in
  __ret := (Obj.magic ((((((((Obj.obj (List.assoc (__str ("found")) (g1) : Obj.t) : bool) = false) && ((Obj.obj (List.assoc (__str ("ok")) (d1) : Obj.t) : bool) = false)) && (Obj.obj (List.assoc (__str ("ok")) (d2) : Obj.t) : bool)) && ((Obj.obj (List.assoc (__str ("ok")) (d3) : Obj.t) : bool) = false)) && ((Obj.obj (List.assoc (__str ("found")) (g2) : Obj.t) : bool) = false)) && (hm_len (!h) = 0))) : bool); raise Return
  with Return -> !__ret)

and test_add_with_resize_up () =
  let __ret = ref false in
  (try
  let h = ref (make_hash_map ()) in
  let i = ref (0) in
  (try while (!i < 5) do
    try
  let s = (string_of_int (!i)) in
  h := hm_set (!h) (s) (s);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((hm_len (!h) = 5)) : bool); raise Return
  with Return -> !__ret)

and test_add_with_resize_down () =
  let __ret = ref false in
  (try
  let h = ref (make_hash_map ()) in
  let i = ref (0) in
  (try while (!i < 5) do
    try
  let s = (string_of_int (!i)) in
  h := hm_set (!h) (s) (s);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < 5) do
    try
  let s = (string_of_int (!j)) in
  let d = hm_del (!h) (s) in
  h := (Obj.obj (List.assoc (__str ("map")) (d) : Obj.t) : ( string * Obj.t ) list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  h := hm_set (!h) ("key_a") ("val_b");
  let a = hm_get (!h) ("key_a") in
  __ret := (Obj.magic ((((hm_len (!h) = 1) && (Obj.obj (List.assoc (__str ("found")) (a) : Obj.t) : bool)) && ((Obj.obj (List.assoc (__str ("value")) (a) : Obj.t) : string) = "val_b"))) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_bool (test_add_items ()));
  print_endline (string_of_bool (test_overwrite_items ()));
  print_endline (string_of_bool (test_delete_items ()));
  print_endline (string_of_bool (test_access_absent_items ()));
  print_endline (string_of_bool (test_add_with_resize_up ()));
  print_endline (string_of_bool (test_add_with_resize_down ()));
  print_endline (string_of_bool true);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()