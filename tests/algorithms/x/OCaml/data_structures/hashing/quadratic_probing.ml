(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:41 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_hash_table size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let size = (Obj.magic size : int) in
  let vals = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  vals := (List.append (!vals) [(Obj.magic ((Obj.magic nil : int)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("size_table"), Obj.repr (size)); (__str ("values"), Obj.repr (!vals)); (__str ("lim_charge"), Obj.repr (0.75))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and hash_function table key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  __ret := (Obj.magic (((key mod (Obj.obj (List.assoc (__str ("size_table")) (table) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("size_table")) (table) : Obj.t) : int)) mod (Obj.obj (List.assoc (__str ("size_table")) (table) : Obj.t) : int))) : int); raise Return
  with Return -> !__ret)

and balanced_factor table =
  let __ret = ref 0.0 in
  (try
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("values")) (table) : Obj.t) : int list))) do
    try
  if ((Obj.repr (List.nth ((Obj.obj (List.assoc (__str ("values")) (table) : Obj.t) : int list)) (!i))) <> nil) then (
  count := (!count + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((float_of_int (!count) /. float_of_int ((Obj.obj (List.assoc (__str ("size_table")) (table) : Obj.t) : int)))) : float); raise Return
  with Return -> !__ret)

and collision_resolution table key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  let i = ref (1) in
  let new_key = ref (hash_function ((Obj.magic table : (string * Obj.t) list)) (Obj.repr ((key + (!i * !i))))) in
  (try while (((Obj.repr (List.nth ((Obj.obj (List.assoc (__str ("values")) (table) : Obj.t) : int list)) (!new_key))) <> nil) && (List.nth ((Obj.obj (List.assoc (__str ("values")) (table) : Obj.t) : int list)) (!new_key) <> key)) do
    try
  i := (!i + 1);
  if (balanced_factor ((Obj.magic table : (string * Obj.t) list)) >= (Obj.obj (List.assoc (__str ("lim_charge")) (table) : Obj.t) : float)) then (
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("size_table")) (table) : Obj.t) : int)) : int); raise Return
  );
  new_key := hash_function ((Obj.magic table : (string * Obj.t) list)) (Obj.repr ((key + (!i * !i))));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!new_key) : int); raise Return
  with Return -> !__ret)

and insert_data table data =
  let __ret = ref (Obj.magic 0) in
  (try
  let data = (Obj.magic data : int) in
  let key = ref (hash_function ((Obj.magic !table : (string * Obj.t) list)) (Obj.repr (data))) in
  let vals = ref ((Obj.obj (List.assoc (__str ("values")) (!table) : Obj.t) : int list)) in
  if ((Obj.repr (List.nth (!vals) (!key))) = nil) then (
  vals := (List.mapi (fun __i __x -> if __i = !key then data else __x) (!vals));
  ) else (
  if (List.nth (!vals) (!key) = data) then (
  table := ((__str ("values"), Obj.repr (!vals)) :: List.remove_assoc (__str ("values")) (Obj.magic (!table) : (string * Obj.t) list));
  __ret := (); raise Return
  ) else (
  let new_key = collision_resolution ((Obj.magic !table : (string * Obj.t) list)) (Obj.repr (!key)) in
  if ((new_key < List.length (!vals)) && ((Obj.repr (List.nth (!vals) (new_key))) = nil)) then (
  vals := (List.mapi (fun __i __x -> if __i = new_key then data else __x) (!vals));
  );
  );
  );
  table := ((__str ("values"), Obj.repr (!vals)) :: List.remove_assoc (__str ("values")) (Obj.magic (!table) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and int_to_string n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let num = ref (n) in
  let neg = ref (false) in
  if (!num < 0) then (
  neg := true;
  num := -(!num);
  );
  let res = ref ("") in
  (try while (!num > 0) do
    try
  let digit = ((!num mod 10 + 10) mod 10) in
  let ch = String.sub ("0123456789") (digit) ((digit + 1) - digit) in
  res := (ch ^ !res);
  num := (!num / 10);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  res := ("-" ^ !res);
  );
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and keys_to_string table =
  let __ret = ref "" in
  (try
  let result = ref ("{") in
  let first = ref (true) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("values")) (table) : Obj.t) : int list))) do
    try
  let v = List.nth ((Obj.obj (List.assoc (__str ("values")) (table) : Obj.t) : int list)) (!i) in
  if ((Obj.repr (v)) <> nil) then (
  if not (!first) then (
  result := (!result ^ ", ");
  );
  result := (((!result ^ int_to_string (Obj.repr (!i))) ^ ": ") ^ int_to_string (Obj.repr (v)));
  first := false;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  result := (!result ^ "}");
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let qp = create_hash_table (Obj.repr (8)) in
  ignore (insert_data (ref (qp)) (Obj.repr (0)));
  ignore (insert_data (ref (qp)) (Obj.repr (999)));
  ignore (insert_data (ref (qp)) (Obj.repr (111)));
  print_endline ((keys_to_string (qp)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()