(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _nil = (0 - 1)
let seed = ref (1)
let rec set_seed s =
  let __ret = ref (Obj.magic 0) in
  (try
  let s = (Obj.magic s : int) in
  seed := s;
    !__ret
  with Return -> !__ret)

and randint a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic ((((!seed mod ((b - a) + 1) + ((b - a) + 1)) mod ((b - a) + 1)) + a)) : int); raise Return
  with Return -> !__ret)

and rand_bool () =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((randint (Obj.repr (0)) (Obj.repr (1)) = 1)) : bool); raise Return
  with Return -> !__ret)


let nodes = ref (([] : ((string * int) list) list))
let root = ref (_nil)
let rec new_heap () =
  let __ret = ref (Obj.magic 0) in
  (try
  nodes := [];
  root := _nil;
    !__ret
  with Return -> !__ret)

and merge r1 r2 =
  let __ret = ref 0 in
  (try
  r1 := (Obj.magic !r1 : int);
  r2 := (Obj.magic !r2 : int);
  if (!r1 = _nil) then (
  __ret := (Obj.magic (!r2) : int); raise Return
  );
  if (!r2 = _nil) then (
  __ret := (Obj.magic (!r1) : int); raise Return
  );
  if (List.assoc (__str ("value")) (List.nth (!nodes) (!r1)) > List.assoc (__str ("value")) (List.nth (!nodes) (!r2))) then (
  let tmp = !r1 in
  r1 := !r2;
  r2 := tmp;
  );
  if rand_bool () then (
  let tmp = List.assoc (__str ("left")) (List.nth (!nodes) (!r1)) in
  nodes := (List.mapi (fun __i __x -> if __i = !r1 then ((__str ("left"), List.assoc (__str ("right")) (List.nth (!nodes) (!r1))) :: List.remove_assoc (__str ("left")) (List.nth (!nodes) (!r1))) else __x) (!nodes));
  nodes := (List.mapi (fun __i __x -> if __i = !r1 then ((__str ("right"), tmp) :: List.remove_assoc (__str ("right")) (List.nth (!nodes) (!r1))) else __x) (!nodes));
  );
  nodes := (List.mapi (fun __i __x -> if __i = !r1 then ((__str ("left"), merge (ref (List.assoc (__str ("left")) (List.nth (!nodes) (!r1)))) (r2)) :: List.remove_assoc (__str ("left")) (List.nth (!nodes) (!r1))) else __x) (!nodes));
  __ret := (Obj.magic (!r1) : int); raise Return
  with Return -> !__ret)

and insert value =
  let __ret = ref (Obj.magic 0) in
  (try
  let value = (Obj.magic value : int) in
  let node = ref ([(__str ("value"), value); (__str ("left"), _nil); (__str ("right"), _nil)]) in
  nodes := (List.append (!nodes) [(Obj.magic (!node) : (string * int) list)]);
  let idx = (List.length (!nodes) - 1) in
  root := merge (root) (ref (idx));
    !__ret
  with Return -> !__ret)

and top () =
  let __ret = ref 0 in
  (try
  if (!root = _nil) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  __ret := (Obj.magic (List.assoc (__str ("value")) (List.nth (!nodes) (!root))) : int); raise Return
  with Return -> !__ret)

and pop () =
  let __ret = ref 0 in
  (try
  let result = top () in
  let l = List.assoc (__str ("left")) (List.nth (!nodes) (!root)) in
  let r = List.assoc (__str ("right")) (List.nth (!nodes) (!root)) in
  root := merge (ref (l)) (ref (r));
  __ret := (Obj.magic (result) : int); raise Return
  with Return -> !__ret)

and is_empty () =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((!root = _nil)) : bool); raise Return
  with Return -> !__ret)

and to_sorted_list () =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  (try while not (is_empty ()) do
    try
  res := (List.append (!res) [(Obj.magic (pop ()) : int)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (set_seed (Obj.repr (1)));
  ignore (new_heap ());
  ignore (insert (Obj.repr (2)));
  ignore (insert (Obj.repr (3)));
  ignore (insert (Obj.repr (1)));
  ignore (insert (Obj.repr (5)));
  ignore (insert (Obj.repr (1)));
  ignore (insert (Obj.repr (7)));
  print_endline (__show_list (to_sorted_list ()));
  ignore (new_heap ());
  ignore (insert (Obj.repr (1)));
  ignore (insert (Obj.repr (-(1))));
  ignore (insert (Obj.repr (0)));
  print_endline (__show_list (to_sorted_list ()));
  ignore (new_heap ());
  ignore (insert (Obj.repr (3)));
  ignore (insert (Obj.repr (1)));
  ignore (insert (Obj.repr (3)));
  ignore (insert (Obj.repr (7)));
  print_endline (string_of_int (pop ()));
  print_endline (string_of_int (pop ()));
  print_endline (string_of_int (pop ()));
  print_endline (string_of_int (pop ()));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()