(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let heap = ref ([0])
let size = ref (0)
let rec swap_up i =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = (Obj.magic i : int) in
  let temp = List.nth (!heap) (i) in
  let idx = ref (i) in
  (try while ((!idx / 2) > 0) do
    try
  if (List.nth (!heap) (!idx) > List.nth (!heap) ((!idx / 2))) then (
  heap := (List.mapi (fun __i __x -> if __i = !idx then List.nth (!heap) ((!idx / 2)) else __x) (!heap));
  heap := (List.mapi (fun __i __x -> if __i = (!idx / 2) then temp else __x) (!heap));
  );
  idx := (!idx / 2);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and insert value =
  let __ret = ref (Obj.magic 0) in
  (try
  let value = (Obj.magic value : int) in
  heap := (List.append (!heap) [(Obj.magic (value) : int)]);
  size := (!size + 1);
  ignore (swap_up (Obj.repr (!size)));
    !__ret
  with Return -> !__ret)

and swap_down i =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = (Obj.magic i : int) in
  let idx = ref (i) in
  (try while (!size >= (2 * !idx)) do
    try
  let bigger_child = if (((2 * !idx) + 1) > !size) then (2 * !idx) else if (List.nth (!heap) ((2 * !idx)) > List.nth (!heap) (((2 * !idx) + 1))) then (2 * !idx) else ((2 * !idx) + 1) in
  let temp = List.nth (!heap) (!idx) in
  if (List.nth (!heap) (!idx) < List.nth (!heap) (bigger_child)) then (
  heap := (List.mapi (fun __i __x -> if __i = !idx then List.nth (!heap) (bigger_child) else __x) (!heap));
  heap := (List.mapi (fun __i __x -> if __i = bigger_child then temp else __x) (!heap));
  );
  idx := bigger_child;
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and shrink () =
  let __ret = ref (Obj.magic 0) in
  (try
  let new_heap = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i <= !size) do
    try
  new_heap := (List.append (!new_heap) [(Obj.magic (List.nth (!heap) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  heap := !new_heap;
    !__ret
  with Return -> !__ret)

and pop () =
  let __ret = ref 0 in
  (try
  let max_value = List.nth (!heap) (1) in
  heap := (List.mapi (fun __i __x -> if __i = 1 then List.nth (!heap) (!size) else __x) (!heap));
  size := (!size - 1);
  ignore (shrink ());
  ignore (swap_down (Obj.repr (1)));
  __ret := (Obj.magic (max_value) : int); raise Return
  with Return -> !__ret)

and get_list () =
  let __ret = ref ([] : (int) list) in
  (try
  let out = ref (([] : (int) list)) in
  let i = ref (1) in
  (try while (!i <= !size) do
    try
  out := (List.append (!out) [(Obj.magic (List.nth (!heap) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list); raise Return
  with Return -> !__ret)

and len () =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (!size) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (insert (Obj.repr (6)));
  ignore (insert (Obj.repr (10)));
  ignore (insert (Obj.repr (15)));
  ignore (insert (Obj.repr (12)));
  print_endline (string_of_int (pop ()));
  print_endline (string_of_int (pop ()));
  print_endline (__show_list (get_list ()));
  print_endline (string_of_int (len ()));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()