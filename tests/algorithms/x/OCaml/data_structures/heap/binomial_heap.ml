(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_heap () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and swap data i j =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let tmp = List.nth (!data) (i) in
  data := (List.mapi (fun __i __x -> if __i = i then List.nth (!data) (j) else __x) (!data));
  data := (List.mapi (fun __i __x -> if __i = j then tmp else __x) (!data));
    !__ret
  with Return -> !__ret)

and sift_up data idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let i = ref (idx) in
  (try while (!i > 0) do
    try
  let parent = ((!i - 1) / 2) in
  if (List.nth (data) (parent) <= List.nth (data) (!i)) then (
  raise Break;
  );
  ignore (swap (ref (data)) (Obj.repr (parent)) (Obj.repr (!i)));
  i := parent;
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and sift_down data idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let i = ref (idx) in
  let n = List.length (data) in
  (try while true do
    try
  let left = ((2 * !i) + 1) in
  let right = (left + 1) in
  let smallest = ref (!i) in
  if ((left < n) && (List.nth (data) (left) < List.nth (data) (!smallest))) then (
  smallest := left;
  );
  if ((right < n) && (List.nth (data) (right) < List.nth (data) (!smallest))) then (
  smallest := right;
  );
  if (!smallest = !i) then (
  raise Break;
  );
  ignore (swap (ref (data)) (Obj.repr (!i)) (Obj.repr (!smallest)));
  i := !smallest;
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and insert heap v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let v = (Obj.magic v : int) in
  let d = ref ((Obj.obj (List.assoc (__str ("data")) (heap) : Obj.t) : int list)) in
  d := (List.append (!d) [(Obj.magic (v) : int)]);
  ignore (sift_up (!d) (Obj.repr ((List.length (!d) - 1))));
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!d))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and peek heap =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (heap) : Obj.t) : int list)) (0)) : int); raise Return
  with Return -> !__ret)

and is_empty heap =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((List.length ((Obj.obj (List.assoc (__str ("data")) (heap) : Obj.t) : int list)) = 0)) : bool); raise Return
  with Return -> !__ret)

and delete_min heap =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let d = ref ((Obj.obj (List.assoc (__str ("data")) (heap) : Obj.t) : int list)) in
  let min = List.nth (!d) (0) in
  d := (List.mapi (fun __i __x -> if __i = 0 then List.nth (!d) ((List.length (!d) - 1)) else __x) (!d));
  d := List.of_seq (Seq.take ((List.length (!d) - 1) - 0) (Seq.drop 0 (List.to_seq (!d))));
  if (List.length (!d) > 0) then (
  ignore (sift_down (!d) (Obj.repr (0)));
  );
  __ret := (Obj.magic ([(__str ("heap"), Obj.repr ([(__str ("data"), Obj.repr (!d))])); (__str ("value"), Obj.repr (min))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let h = ref (new_heap ()) in
  h := insert (!h) (Obj.repr (10));
  h := insert (!h) (Obj.repr (3));
  h := insert (!h) (Obj.repr (7));
  print_endline ((string_of_int (peek (!h))));
  let d1 = delete_min (!h) in
  h := (Obj.obj (List.assoc (__str ("heap")) (d1) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("value")) (d1) : Obj.t) : int))));
  let d2 = delete_min (!h) in
  h := (Obj.obj (List.assoc (__str ("heap")) (d2) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("value")) (d2) : Obj.t) : int))));
  let d3 = delete_min (!h) in
  h := (Obj.obj (List.assoc (__str ("heap")) (d3) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("value")) (d3) : Obj.t) : int))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()