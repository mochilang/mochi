(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_heap key =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("arr"), Obj.repr ([])); (__str ("pos_map"), Obj.repr ([])); (__str ("size"), Obj.repr (0)); (__str ("key"), Obj.repr (key))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and parent i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  if (i > 0) then (
  __ret := (Obj.magic (((i - 1) / 2)) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and left i size =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let size = (Obj.magic size : int) in
  let l = ((2 * i) + 1) in
  if (l < size) then (
  __ret := (Obj.magic (l) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and right i size =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let size = (Obj.magic size : int) in
  let r = ((2 * i) + 2) in
  if (r < size) then (
  __ret := (Obj.magic (r) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and swap h i j =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let arr = ref ((Obj.obj (List.assoc (__str ("arr")) (!h) : Obj.t) : int list list)) in
  let item_i = List.nth (List.nth (!arr) (i)) (0) in
  let item_j = List.nth (List.nth (!arr) (j)) (0) in
  let pm = ref ((Obj.obj (List.assoc (__str ("pos_map")) (!h) : Obj.t) : ( string * int ) list)) in
  pm := ((__str (item_i), (j + 1)) :: List.remove_assoc (__str (item_i)) !pm);
  pm := ((__str (item_j), (i + 1)) :: List.remove_assoc (__str (item_j)) !pm);
  h := ((__str ("pos_map"), Obj.repr (!pm)) :: List.remove_assoc (__str ("pos_map")) (Obj.magic (!h) : (string * Obj.t) list));
  let tmp = ref (List.nth (!arr) (i)) in
  arr := (List.mapi (fun __i __x -> if __i = i then List.nth (!arr) (j) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = j then !tmp else __x) (!arr));
  h := ((__str ("arr"), Obj.repr (!arr)) :: List.remove_assoc (__str ("arr")) (Obj.magic (!h) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and cmp h i j =
  let __ret = ref false in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let arr = ref ((Obj.obj (List.assoc (__str ("arr")) (h) : Obj.t) : int list list)) in
  __ret := (Obj.magic ((List.nth (List.nth (!arr) (i)) (1) < List.nth (List.nth (!arr) (j)) (1))) : bool); raise Return
  with Return -> !__ret)

and get_valid_parent h i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let vp = ref (i) in
  let l = left (Obj.repr (i)) (Obj.repr ((Obj.obj (List.assoc (__str ("size")) (h) : Obj.t) : int))) in
  if ((l <> (0 - 1)) && (cmp ((Obj.magic h : (string * Obj.t) list)) (Obj.repr (l)) (Obj.repr (!vp)) = false)) then (
  vp := l;
  );
  let r = right (Obj.repr (i)) (Obj.repr ((Obj.obj (List.assoc (__str ("size")) (h) : Obj.t) : int))) in
  if ((r <> (0 - 1)) && (cmp ((Obj.magic h : (string * Obj.t) list)) (Obj.repr (r)) (Obj.repr (!vp)) = false)) then (
  vp := r;
  );
  __ret := (Obj.magic (!vp) : int); raise Return
  with Return -> !__ret)

and heapify_up h index =
  let __ret = ref (Obj.magic 0) in
  (try
  let index = (Obj.magic index : int) in
  let idx = ref (index) in
  let p = ref (parent (Obj.repr (!idx))) in
  (try while ((!p <> (0 - 1)) && (cmp ((Obj.magic h : (string * Obj.t) list)) (Obj.repr (!idx)) (Obj.repr (!p)) = false)) do
    try
  ignore (swap (ref (h)) (Obj.repr (!idx)) (Obj.repr (!p)));
  idx := !p;
  p := parent (Obj.repr (!p));
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and heapify_down h index =
  let __ret = ref (Obj.magic 0) in
  (try
  let index = (Obj.magic index : int) in
  let idx = ref (index) in
  let vp = ref (get_valid_parent ((Obj.magic h : (string * Obj.t) list)) (Obj.repr (!idx))) in
  (try while (!vp <> !idx) do
    try
  ignore (swap (ref (h)) (Obj.repr (!idx)) (Obj.repr (!vp)));
  idx := !vp;
  vp := get_valid_parent ((Obj.magic h : (string * Obj.t) list)) (Obj.repr (!idx));
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and update_item h item item_value =
  let __ret = ref (Obj.magic 0) in
  (try
  let item = (Obj.magic item : int) in
  let item_value = (Obj.magic item_value : int) in
  let pm = ref ((Obj.obj (List.assoc (__str ("pos_map")) (!h) : Obj.t) : ( string * int ) list)) in
  if (List.assoc (__str (item)) (!pm) = 0) then (
  __ret := (); raise Return
  );
  let index = (List.assoc (__str (item)) (!pm) - 1) in
  let arr = ref ((Obj.obj (List.assoc (__str ("arr")) (!h) : Obj.t) : int list list)) in
  arr := (List.mapi (fun __i __x -> if __i = index then [item; ((Obj.obj (List.assoc (__str ("key")) (!h) : Obj.t) : Obj.t -> int) (Obj.repr (item_value)))] else __x) (!arr));
  h := ((__str ("arr"), Obj.repr (!arr)) :: List.remove_assoc (__str ("arr")) (Obj.magic (!h) : (string * Obj.t) list));
  h := ((__str ("pos_map"), Obj.repr (!pm)) :: List.remove_assoc (__str ("pos_map")) (Obj.magic (!h) : (string * Obj.t) list));
  ignore (heapify_up ((Obj.magic !h : (string * Obj.t) list)) (Obj.repr (index)));
  ignore (heapify_down ((Obj.magic !h : (string * Obj.t) list)) (Obj.repr (index)));
    !__ret
  with Return -> !__ret)

and delete_item h item =
  let __ret = ref (Obj.magic 0) in
  (try
  let item = (Obj.magic item : int) in
  let pm = ref ((Obj.obj (List.assoc (__str ("pos_map")) (!h) : Obj.t) : ( string * int ) list)) in
  if (List.assoc (__str (item)) (!pm) = 0) then (
  __ret := (); raise Return
  );
  let index = (List.assoc (__str (item)) (!pm) - 1) in
  pm := ((__str (item), 0) :: List.remove_assoc (__str (item)) !pm);
  let arr = ref ((Obj.obj (List.assoc (__str ("arr")) (!h) : Obj.t) : int list list)) in
  let last_index = ((Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int) - 1) in
  if (index <> last_index) then (
  arr := (List.mapi (fun __i __x -> if __i = index then List.nth (!arr) (last_index) else __x) (!arr));
  let moved = List.nth (List.nth (!arr) (index)) (0) in
  pm := ((__str (moved), (index + 1)) :: List.remove_assoc (__str (moved)) !pm);
  );
  h := ((__str ("size"), Obj.repr (((Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int) - 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!h) : (string * Obj.t) list));
  h := ((__str ("arr"), Obj.repr (!arr)) :: List.remove_assoc (__str ("arr")) (Obj.magic (!h) : (string * Obj.t) list));
  h := ((__str ("pos_map"), Obj.repr (!pm)) :: List.remove_assoc (__str ("pos_map")) (Obj.magic (!h) : (string * Obj.t) list));
  if ((Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int) > index) then (
  ignore (heapify_up ((Obj.magic !h : (string * Obj.t) list)) (Obj.repr (index)));
  ignore (heapify_down ((Obj.magic !h : (string * Obj.t) list)) (Obj.repr (index)));
  );
    !__ret
  with Return -> !__ret)

and insert_item h item item_value =
  let __ret = ref (Obj.magic 0) in
  (try
  let item = (Obj.magic item : int) in
  let item_value = (Obj.magic item_value : int) in
  let arr = ref ((Obj.obj (List.assoc (__str ("arr")) (!h) : Obj.t) : int list list)) in
  let arr_len = List.length (!arr) in
  if (arr_len = (Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int)) then (
  arr := (List.append (!arr) [(Obj.magic ([item; ((Obj.obj (List.assoc (__str ("key")) (!h) : Obj.t) : Obj.t -> int) (Obj.repr (item_value)))]) : int list)]);
  ) else (
  arr := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int) then [item; ((Obj.obj (List.assoc (__str ("key")) (!h) : Obj.t) : Obj.t -> int) (Obj.repr (item_value)))] else __x) (!arr));
  );
  let pm = ref ((Obj.obj (List.assoc (__str ("pos_map")) (!h) : Obj.t) : ( string * int ) list)) in
  pm := ((__str (item), ((Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int) + 1)) :: List.remove_assoc (__str (item)) !pm);
  h := ((__str ("size"), Obj.repr (((Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int) + 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!h) : (string * Obj.t) list));
  h := ((__str ("arr"), Obj.repr (!arr)) :: List.remove_assoc (__str ("arr")) (Obj.magic (!h) : (string * Obj.t) list));
  h := ((__str ("pos_map"), Obj.repr (!pm)) :: List.remove_assoc (__str ("pos_map")) (Obj.magic (!h) : (string * Obj.t) list));
  ignore (heapify_up ((Obj.magic !h : (string * Obj.t) list)) (Obj.repr (((Obj.obj (List.assoc (__str ("size")) (!h) : Obj.t) : int) - 1))));
    !__ret
  with Return -> !__ret)

and get_top h =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = ref ((Obj.obj (List.assoc (__str ("arr")) (h) : Obj.t) : int list list)) in
  if ((Obj.obj (List.assoc (__str ("size")) (h) : Obj.t) : int) > 0) then (
  __ret := (Obj.magic (List.nth (!arr) (0)) : int list); raise Return
  );
  __ret := (Obj.magic ([]) : int list); raise Return
  with Return -> !__ret)

and extract_top h =
  let __ret = ref ([] : (int) list) in
  (try
  let top = ref (get_top ((Obj.magic h : (string * Obj.t) list))) in
  if (List.length (!top) > 0) then (
  ignore (delete_item (ref (h)) (Obj.repr (List.nth (!top) (0))));
  );
  __ret := (Obj.magic (!top) : int list); raise Return
  with Return -> !__ret)

and identity x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

and negate x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic ((0 - x)) : int); raise Return
  with Return -> !__ret)


let h = ref (new_heap ((Obj.magic identity : Obj.t -> int)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (insert_item (h) (Obj.repr (5)) (Obj.repr (34)));
  ignore (insert_item (h) (Obj.repr (6)) (Obj.repr (31)));
  ignore (insert_item (h) (Obj.repr (7)) (Obj.repr (37)));
  print_endline ((__str (get_top (!h))));
  print_endline ((__str (extract_top (!h))));
  print_endline ((__str (extract_top (!h))));
  print_endline ((__str (extract_top (!h))));
  h := new_heap ((Obj.magic negate : Obj.t -> int));
  ignore (insert_item (h) (Obj.repr (5)) (Obj.repr (34)));
  ignore (insert_item (h) (Obj.repr (6)) (Obj.repr (31)));
  ignore (insert_item (h) (Obj.repr (7)) (Obj.repr (37)));
  print_endline ((__str (get_top (!h))));
  print_endline ((__str (extract_top (!h))));
  print_endline ((__str (extract_top (!h))));
  print_endline ((__str (extract_top (!h))));
  ignore (insert_item (h) (Obj.repr (8)) (Obj.repr (45)));
  ignore (insert_item (h) (Obj.repr (9)) (Obj.repr (40)));
  ignore (insert_item (h) (Obj.repr (10)) (Obj.repr (50)));
  print_endline ((__str (get_top (!h))));
  ignore (update_item (h) (Obj.repr (10)) (Obj.repr (30)));
  print_endline ((__str (get_top (!h))));
  ignore (delete_item (h) (Obj.repr (10)));
  print_endline ((__str (get_top (!h))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()