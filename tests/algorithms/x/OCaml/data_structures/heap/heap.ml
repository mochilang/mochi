(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec parent_index child_idx =
  let __ret = ref 0 in
  (try
  let child_idx = (Obj.magic child_idx : int) in
  if (child_idx > 0) then (
  __ret := (Obj.magic (((child_idx - 1) / 2)) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and left_child_idx parent_idx =
  let __ret = ref 0 in
  (try
  let parent_idx = (Obj.magic parent_idx : int) in
  __ret := (Obj.magic (((2 * parent_idx) + 1)) : int); raise Return
  with Return -> !__ret)

and right_child_idx parent_idx =
  let __ret = ref 0 in
  (try
  let parent_idx = (Obj.magic parent_idx : int) in
  __ret := (Obj.magic (((2 * parent_idx) + 2)) : int); raise Return
  with Return -> !__ret)

and max_heapify h heap_size index =
  let __ret = ref (Obj.magic 0) in
  (try
  let heap_size = (Obj.magic heap_size : int) in
  let index = (Obj.magic index : int) in
  let largest = ref (index) in
  let left = left_child_idx (Obj.repr (index)) in
  let right = right_child_idx (Obj.repr (index)) in
  if ((left < heap_size) && (List.nth (!h) (left) > List.nth (!h) (!largest))) then (
  largest := left;
  );
  if ((right < heap_size) && (List.nth (!h) (right) > List.nth (!h) (!largest))) then (
  largest := right;
  );
  if (!largest <> index) then (
  let temp = List.nth (!h) (index) in
  h := (List.mapi (fun __i __x -> if __i = index then List.nth (!h) (!largest) else __x) (!h));
  h := (List.mapi (fun __i __x -> if __i = !largest then temp else __x) (!h));
  ignore (max_heapify (h) (Obj.repr (heap_size)) (Obj.repr (!largest)));
  );
    !__ret
  with Return -> !__ret)

and build_max_heap h =
  let __ret = ref 0 in
  (try
  let heap_size = ref (List.length (h)) in
  let i = ref (((!heap_size / 2) - 1)) in
  (try while (!i >= 0) do
    try
  ignore (max_heapify (ref (h)) (Obj.repr (!heap_size)) (Obj.repr (!i)));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!heap_size) : int); raise Return
  with Return -> !__ret)

and extract_max h heap_size =
  let __ret = ref 0.0 in
  (try
  let heap_size = (Obj.magic heap_size : int) in
  let max_value = List.nth (!h) (0) in
  h := (List.mapi (fun __i __x -> if __i = 0 then List.nth (!h) ((heap_size - 1)) else __x) (!h));
  ignore (max_heapify (h) (Obj.repr ((heap_size - 1))) (Obj.repr (0)));
  __ret := (Obj.magic (max_value) : float); raise Return
  with Return -> !__ret)

and insert h heap_size value =
  let __ret = ref 0 in
  (try
  heap_size := (Obj.magic !heap_size : int);
  let value = (Obj.magic value : float) in
  if (!heap_size < List.length (!h)) then (
  h := (List.mapi (fun __i __x -> if __i = !heap_size then value else __x) (!h));
  ) else (
  h := (List.append (!h) [(Obj.magic (value) : float)]);
  );
  heap_size := (!heap_size + 1);
  let idx = ref (((!heap_size - 1) / 2)) in
  (try while (!idx >= 0) do
    try
  ignore (max_heapify (h) (Obj.repr (!heap_size)) (Obj.repr (!idx)));
  idx := ((!idx - 1) / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!heap_size) : int); raise Return
  with Return -> !__ret)

and heap_sort h heap_size =
  let __ret = ref (Obj.magic 0) in
  (try
  let heap_size = (Obj.magic heap_size : int) in
  let size = ref (heap_size) in
  let j = ref ((!size - 1)) in
  (try while (!j > 0) do
    try
  let temp = List.nth (!h) (0) in
  h := (List.mapi (fun __i __x -> if __i = 0 then List.nth (!h) (!j) else __x) (!h));
  h := (List.mapi (fun __i __x -> if __i = !j then temp else __x) (!h));
  size := (!size - 1);
  ignore (max_heapify (h) (Obj.repr (!size)) (Obj.repr (0)));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and heap_to_string h heap_size =
  let __ret = ref "" in
  (try
  let heap_size = (Obj.magic heap_size : int) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < heap_size) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" (List.nth (h) (!i))));
  if (!i < (heap_size - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)


let heap = ref ([103.0; 9.0; 1.0; 7.0; 11.0; 15.0; 25.0; 201.0; 209.0; 107.0; 5.0])
let size = ref (build_max_heap (!heap))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((heap_to_string (!heap) (Obj.repr (!size))));
  let m = extract_max (heap) (Obj.repr (!size)) in
  size := (!size - 1);
  print_endline ((Printf.sprintf "%.16g" (m)));
  print_endline ((heap_to_string (!heap) (Obj.repr (!size))));
  size := insert (heap) (size) (Obj.repr (100.0));
  print_endline ((heap_to_string (!heap) (Obj.repr (!size))));
  ignore (heap_sort (heap) (Obj.repr (!size)));
  print_endline ((heap_to_string (!heap) (Obj.repr (!size))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()