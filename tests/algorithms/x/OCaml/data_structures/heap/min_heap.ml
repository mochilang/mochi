(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec get_parent_idx idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic (((idx - 1) / 2)) : int); raise Return
  with Return -> !__ret)

and get_left_child_idx idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic (((idx * 2) + 1)) : int); raise Return
  with Return -> !__ret)

and get_right_child_idx idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic (((idx * 2) + 2)) : int); raise Return
  with Return -> !__ret)

and remove_key m k =
  let __ret = ref ([] : (string * int) list) in
  (try
  let out = ref ([] : (string * int) list) in
  (try List.iter (fun (key, _) ->
    try
  if (key <> k) then (
  out := ((__str (key), List.assoc (__str (key)) (m)) :: List.remove_assoc (__str (key)) !out);
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!out) : (string * int) list); raise Return
  with Return -> !__ret)

and slice_without_last xs =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let res = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < (List.length (xs) - 1)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : (string * Obj.t) list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and sift_down mh idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let heap = ref ((Obj.obj (List.assoc (__str ("heap")) (!mh) : Obj.t) : (string * Obj.t) list list)) in
  let idx_map = ref ((Obj.obj (List.assoc (__str ("idx_of_element")) (!mh) : Obj.t) : ( string * int ) list)) in
  let i = ref (idx) in
  (try while true do
    try
  let left = get_left_child_idx (Obj.repr (!i)) in
  let right = get_right_child_idx (Obj.repr (!i)) in
  let smallest = ref (!i) in
  if ((left < List.length (!heap)) && ((Obj.obj (List.assoc (__str ("val")) (List.nth (!heap) (left)) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("val")) (List.nth (!heap) (!smallest)) : Obj.t) : int))) then (
  smallest := left;
  );
  if ((right < List.length (!heap)) && ((Obj.obj (List.assoc (__str ("val")) (List.nth (!heap) (right)) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("val")) (List.nth (!heap) (!smallest)) : Obj.t) : int))) then (
  smallest := right;
  );
  if (!smallest <> !i) then (
  let tmp = ref (List.nth (!heap) (!i)) in
  heap := (List.mapi (fun __i __x -> if __i = !i then List.nth (!heap) (!smallest) else __x) (!heap));
  heap := (List.mapi (fun __i __x -> if __i = !smallest then !tmp else __x) (!heap));
  idx_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!i)) : Obj.t) : string)), !i) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!i)) : Obj.t) : string))) !idx_map);
  idx_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!smallest)) : Obj.t) : string)), !smallest) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!smallest)) : Obj.t) : string))) !idx_map);
  i := !smallest;
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  mh := ((__str ("heap"), Obj.repr (!heap)) :: List.remove_assoc (__str ("heap")) (Obj.magic (!mh) : (string * Obj.t) list));
  mh := ((__str ("idx_of_element"), Obj.repr (!idx_map)) :: List.remove_assoc (__str ("idx_of_element")) (Obj.magic (!mh) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and sift_up mh idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let heap = ref ((Obj.obj (List.assoc (__str ("heap")) (!mh) : Obj.t) : (string * Obj.t) list list)) in
  let idx_map = ref ((Obj.obj (List.assoc (__str ("idx_of_element")) (!mh) : Obj.t) : ( string * int ) list)) in
  let i = ref (idx) in
  let p = ref (get_parent_idx (Obj.repr (!i))) in
  (try while ((!p >= 0) && ((Obj.obj (List.assoc (__str ("val")) (List.nth (!heap) (!p)) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("val")) (List.nth (!heap) (!i)) : Obj.t) : int))) do
    try
  let tmp = ref (List.nth (!heap) (!p)) in
  heap := (List.mapi (fun __i __x -> if __i = !p then List.nth (!heap) (!i) else __x) (!heap));
  heap := (List.mapi (fun __i __x -> if __i = !i then !tmp else __x) (!heap));
  idx_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!p)) : Obj.t) : string)), !p) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!p)) : Obj.t) : string))) !idx_map);
  idx_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!i)) : Obj.t) : string)), !i) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (List.nth (!heap) (!i)) : Obj.t) : string))) !idx_map);
  i := !p;
  p := get_parent_idx (Obj.repr (!i));
    with Continue -> ()
  done with Break -> ());
  mh := ((__str ("heap"), Obj.repr (!heap)) :: List.remove_assoc (__str ("heap")) (Obj.magic (!mh) : (string * Obj.t) list));
  mh := ((__str ("idx_of_element"), Obj.repr (!idx_map)) :: List.remove_assoc (__str ("idx_of_element")) (Obj.magic (!mh) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and new_min_heap array =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let idx_map = ref ([] : (string * int) list) in
  let val_map = ref ([] : (string * int) list) in
  let heap = ref (array) in
  let i = ref (0) in
  (try while (!i < List.length (array)) do
    try
  let n = ref (List.nth (array) (!i)) in
  idx_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (!n) : Obj.t) : string)), !i) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (!n) : Obj.t) : string))) !idx_map);
  val_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (!n) : Obj.t) : string)), (Obj.obj (List.assoc (__str ("val")) (!n) : Obj.t) : int)) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (!n) : Obj.t) : string))) !val_map);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let mh = ref ([(__str ("heap"), Obj.repr (!heap)); (__str ("idx_of_element"), Obj.repr (!idx_map)); (__str ("heap_dict"), Obj.repr (!val_map))]) in
  let start = ref (get_parent_idx (Obj.repr ((List.length (array) - 1)))) in
  (try while (!start >= 0) do
    try
  ignore (sift_down (mh) (Obj.repr (!start)));
  start := (!start - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!mh) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and peek mh =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("heap")) (mh) : Obj.t) : (string * Obj.t) list list)) (0)) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_min mh =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let heap = ref ((Obj.obj (List.assoc (__str ("heap")) (!mh) : Obj.t) : (string * Obj.t) list list)) in
  let idx_map = ref ((Obj.obj (List.assoc (__str ("idx_of_element")) (!mh) : Obj.t) : ( string * int ) list)) in
  let val_map = ref ((Obj.obj (List.assoc (__str ("heap_dict")) (!mh) : Obj.t) : ( string * int ) list)) in
  let last_idx = (List.length (!heap) - 1) in
  let top = ref (List.nth (!heap) (0)) in
  let last = ref (List.nth (!heap) (last_idx)) in
  heap := (List.mapi (fun __i __x -> if __i = 0 then !last else __x) (!heap));
  idx_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (!last) : Obj.t) : string)), 0) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (!last) : Obj.t) : string))) !idx_map);
  heap := slice_without_last (!heap);
  idx_map := remove_key ((Obj.magic !idx_map : (string * int) list)) ((Obj.obj (List.assoc (__str ("name")) (!top) : Obj.t) : string));
  val_map := remove_key ((Obj.magic !val_map : (string * int) list)) ((Obj.obj (List.assoc (__str ("name")) (!top) : Obj.t) : string));
  mh := ((__str ("heap"), Obj.repr (!heap)) :: List.remove_assoc (__str ("heap")) (Obj.magic (!mh) : (string * Obj.t) list));
  mh := ((__str ("idx_of_element"), Obj.repr (!idx_map)) :: List.remove_assoc (__str ("idx_of_element")) (Obj.magic (!mh) : (string * Obj.t) list));
  mh := ((__str ("heap_dict"), Obj.repr (!val_map)) :: List.remove_assoc (__str ("heap_dict")) (Obj.magic (!mh) : (string * Obj.t) list));
  if (List.length (!heap) > 0) then (
  ignore (sift_down (mh) (Obj.repr (0)));
  );
  __ret := (Obj.magic (!top) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insert mh node =
  let __ret = ref (Obj.magic 0) in
  (try
  let heap = ref ((Obj.obj (List.assoc (__str ("heap")) (!mh) : Obj.t) : (string * Obj.t) list list)) in
  let idx_map = ref ((Obj.obj (List.assoc (__str ("idx_of_element")) (!mh) : Obj.t) : ( string * int ) list)) in
  let val_map = ref ((Obj.obj (List.assoc (__str ("heap_dict")) (!mh) : Obj.t) : ( string * int ) list)) in
  heap := (List.append (!heap) [(Obj.magic (node) : (string * Obj.t) list)]);
  let idx = (List.length (!heap) - 1) in
  idx_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (node) : Obj.t) : string)), idx) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (node) : Obj.t) : string))) !idx_map);
  val_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (node) : Obj.t) : string)), (Obj.obj (List.assoc (__str ("val")) (node) : Obj.t) : int)) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (node) : Obj.t) : string))) !val_map);
  mh := ((__str ("heap"), Obj.repr (!heap)) :: List.remove_assoc (__str ("heap")) (Obj.magic (!mh) : (string * Obj.t) list));
  mh := ((__str ("idx_of_element"), Obj.repr (!idx_map)) :: List.remove_assoc (__str ("idx_of_element")) (Obj.magic (!mh) : (string * Obj.t) list));
  mh := ((__str ("heap_dict"), Obj.repr (!val_map)) :: List.remove_assoc (__str ("heap_dict")) (Obj.magic (!mh) : (string * Obj.t) list));
  ignore (sift_up (mh) (Obj.repr (idx)));
    !__ret
  with Return -> !__ret)

and is_empty mh =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((List.length ((Obj.obj (List.assoc (__str ("heap")) (mh) : Obj.t) : (string * Obj.t) list list)) = 0)) : bool); raise Return
  with Return -> !__ret)

and get_value mh key =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (List.assoc (__str (key)) ((Obj.obj (List.assoc (__str ("heap_dict")) (mh) : Obj.t) : ( string * int ) list))) : int); raise Return
  with Return -> !__ret)

and decrease_key mh node new_value =
  let __ret = ref (Obj.magic 0) in
  (try
  let new_value = (Obj.magic new_value : int) in
  let heap = ref ((Obj.obj (List.assoc (__str ("heap")) (!mh) : Obj.t) : (string * Obj.t) list list)) in
  let val_map = ref ((Obj.obj (List.assoc (__str ("heap_dict")) (!mh) : Obj.t) : ( string * int ) list)) in
  let idx_map = ref ((Obj.obj (List.assoc (__str ("idx_of_element")) (!mh) : Obj.t) : ( string * int ) list)) in
  let idx = List.assoc (__str ((Obj.obj (List.assoc (__str ("name")) (!node) : Obj.t) : string))) (!idx_map) in
  if not (((Obj.obj (List.assoc (__str ("val")) (List.nth (!heap) (idx)) : Obj.t) : int) > new_value)) then (
  (failwith ("newValue must be less than current value"));
  );
  node := ((__str ("val"), Obj.repr (new_value)) :: List.remove_assoc (__str ("val")) (Obj.magic (!node) : (string * Obj.t) list));
  heap := (List.mapi (fun __i __x -> if __i = idx then ((__str ("val"), Obj.repr (new_value)) :: List.remove_assoc (__str ("val")) (Obj.magic (List.nth (!heap) (idx)) : (string * Obj.t) list)) else __x) (!heap));
  val_map := ((__str ((Obj.obj (List.assoc (__str ("name")) (!node) : Obj.t) : string)), new_value) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (!node) : Obj.t) : string))) !val_map);
  mh := ((__str ("heap"), Obj.repr (!heap)) :: List.remove_assoc (__str ("heap")) (Obj.magic (!mh) : (string * Obj.t) list));
  mh := ((__str ("heap_dict"), Obj.repr (!val_map)) :: List.remove_assoc (__str ("heap_dict")) (Obj.magic (!mh) : (string * Obj.t) list));
  ignore (sift_up (mh) (Obj.repr (idx)));
    !__ret
  with Return -> !__ret)

and node_to_string n =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((("Node(" ^ (Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string)) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("val")) (n) : Obj.t) : int)))) ^ ")")) : string); raise Return
  with Return -> !__ret)


let r = ref ([(__str ("name"), Obj.repr ("R")); (__str ("val"), Obj.repr (-(1)))])
let b = ref ([(__str ("name"), Obj.repr ("B")); (__str ("val"), Obj.repr (6))])
let a = ref ([(__str ("name"), Obj.repr ("A")); (__str ("val"), Obj.repr (3))])
let x = ref ([(__str ("name"), Obj.repr ("X")); (__str ("val"), Obj.repr (1))])
let e = ref ([(__str ("name"), Obj.repr ("E")); (__str ("val"), Obj.repr (4))])
let my_min_heap = ref (new_min_heap ((Obj.magic [!r; !b; !a; !x; !e] : (string * Obj.t) list list)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Min Heap - before decrease key");
  (try List.iter (fun n ->
    try
  print_endline ((node_to_string ((Obj.magic n : (string * Obj.t) list))));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("heap")) (!my_min_heap) : Obj.t) : (string * Obj.t) list list)) with Break -> ());
  print_endline ("Min Heap - After decrease key of node [B -> -17]");
  ignore (decrease_key (my_min_heap) (b) (Obj.repr (-(17))));
  (try List.iter (fun n ->
    try
  print_endline ((node_to_string ((Obj.magic n : (string * Obj.t) list))));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("heap")) (!my_min_heap) : Obj.t) : (string * Obj.t) list list)) with Break -> ());
  print_endline ((string_of_int (get_value (!my_min_heap) ("B"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()