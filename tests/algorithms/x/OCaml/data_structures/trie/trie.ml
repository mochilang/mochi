(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_trie () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr ([[(__str ("children"), Obj.repr ([])); (__str ("is_leaf"), Obj.repr (false))]]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_key m k =
  let __ret = ref ([] : (string * int) list) in
  (try
  let out = ref ([]) in
  (try List.iter (fun (key, _) ->
    try
  if (key <> k) then (
  out := ((__str (key), List.assoc (__str (key)) (m)) :: List.remove_assoc (__str (key)) !out);
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!out) : (string * int) list); raise Return
  with Return -> !__ret)

and insert trie word =
  let __ret = ref (Obj.magic 0) in
  (try
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!trie) : Obj.t) : (string * Obj.t) list list)) in
  let curr = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (word)) do
    try
  let ch = String.make 1 (String.get (word) !i) in
  let child_idx = ref (-(1)) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (List.nth (!nodes) (!curr)) : Obj.t) : ( string * int ) list)) in
  if (List.mem_assoc ch !children) then (
  child_idx := List.assoc (__str (ch)) (!children);
  ) else (
  let new_node = [(__str ("children"), Obj.repr ([])); (__str ("is_leaf"), Obj.repr (false))] in
  nodes := (List.append (!nodes) [(Obj.magic (new_node) : (string * Obj.t) list)]);
  child_idx := (List.length (!nodes) - 1);
  let new_children = ref (!children) in
  new_children := ((__str (ch), !child_idx) :: List.remove_assoc (__str (ch)) !new_children);
  let node = ref (List.nth (!nodes) (!curr)) in
  node := ((__str ("children"), Obj.repr (!new_children)) :: List.remove_assoc (__str ("children")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !curr then !node else __x) (!nodes));
  );
  curr := !child_idx;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let node = ref (List.nth (!nodes) (!curr)) in
  node := ((__str ("is_leaf"), Obj.repr (true)) :: List.remove_assoc (__str ("is_leaf")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !curr then !node else __x) (!nodes));
  trie := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!trie) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and insert_many trie words =
  let __ret = ref (Obj.magic 0) in
  (try
  (try List.iter (fun w ->
    try
  ignore (insert (ref (trie)) (w));
    with Continue -> ()) (words) with Break -> ());
    !__ret
  with Return -> !__ret)

and find trie word =
  let __ret = ref false in
  (try
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (trie) : Obj.t) : (string * Obj.t) list list)) in
  let curr = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (word)) do
    try
  let ch = String.make 1 (String.get (word) !i) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (List.nth (!nodes) (!curr)) : Obj.t) : ( string * int ) list)) in
  if not ((List.mem_assoc ch !children)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  curr := List.assoc (__str (ch)) (!children);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let node = ref (List.nth (!nodes) (!curr)) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("is_leaf")) (!node) : Obj.t) : bool)) : bool); raise Return
  with Return -> !__ret)

and delete trie word =
  let __ret = ref (Obj.magic 0) in
  (try
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!trie) : Obj.t) : (string * Obj.t) list list)) in
let rec _delete idx pos =
  let __ret = ref false in
  (try
  let idx = (Obj.magic idx : int) in
  let pos = (Obj.magic pos : int) in
  if (pos = String.length (word)) then (
  let node = ref (List.nth (!nodes) (idx)) in
  if ((Obj.obj (List.assoc (__str ("is_leaf")) (!node) : Obj.t) : bool) = false) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  node := ((__str ("is_leaf"), Obj.repr (false)) :: List.remove_assoc (__str ("is_leaf")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  __ret := (Obj.magic ((List.length ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) = 0)) : bool); raise Return
  );
  let node = ref (List.nth (!nodes) (idx)) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) in
  let ch = String.make 1 (String.get (word) pos) in
  if not ((List.mem_assoc ch !children)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let child_idx = List.assoc (__str (ch)) (!children) in
  let should_delete = _delete (Obj.repr (child_idx)) (Obj.repr ((pos + 1))) in
  node := List.nth (!nodes) (idx);
  if should_delete then (
  let new_children = ref (remove_key ((Obj.magic (Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list) : (string * int) list)) (ch)) in
  node := ((__str ("children"), Obj.repr (!new_children)) :: List.remove_assoc (__str ("children")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  __ret := (Obj.magic (((List.length (!new_children) = 0) && ((Obj.obj (List.assoc (__str ("is_leaf")) (!node) : Obj.t) : bool) = false))) : bool); raise Return
  );
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret) in
  ignore (_delete (Obj.repr (0)) (Obj.repr (0)));
  trie := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!trie) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and print_words trie =
  let __ret = ref (Obj.magic 0) in
  (try
let rec dfs idx word =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (trie) : Obj.t) : (string * Obj.t) list list)) (idx)) in
  if (Obj.obj (List.assoc (__str ("is_leaf")) (!node) : Obj.t) : bool) then (
  print_endline (word);
  );
  (try List.iter (fun (key, _) ->
    try
  ignore (dfs (Obj.repr (List.assoc (__str (key)) ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)))) ((word ^ key)));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) with Break -> ());
    !__ret
  with Return -> !__ret) in
  ignore (dfs (Obj.repr (0)) (""));
    !__ret
  with Return -> !__ret)

and test_trie () =
  let __ret = ref false in
  (try
  let words = ref (["banana"; "bananas"; "bandana"; "band"; "apple"; "all"; "beast"]) in
  let trie = new_trie () in
  ignore (insert_many (trie) (!words));
  let ok = ref (true) in
  (try List.iter (fun w ->
    try
  ok := (!ok && find (trie) (w));
    with Continue -> ()) (!words) with Break -> ());
  ok := (!ok && find (trie) ("banana"));
  let t = ref (find (trie) ("bandanas")) in
  ok := (!ok && (!t = false));
  let t2 = ref (find (trie) ("apps")) in
  ok := (!ok && (!t2 = false));
  ok := (!ok && find (trie) ("apple"));
  ok := (!ok && find (trie) ("all"));
  ignore (delete (ref (trie)) ("all"));
  let t3 = ref (find (trie) ("all")) in
  ok := (!ok && (!t3 = false));
  ignore (delete (ref (trie)) ("banana"));
  let t4 = ref (find (trie) ("banana")) in
  ok := (!ok && (!t4 = false));
  ok := (!ok && find (trie) ("bananas"));
  __ret := (Obj.magic (!ok) : bool); raise Return
  with Return -> !__ret)

and print_results msg passes =
  let __ret = ref (Obj.magic 0) in
  (try
  if passes then (
  print_endline ((msg ^ " works!"));
  ) else (
  print_endline ((msg ^ " doesn't work :("));
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let trie = new_trie () in
  ignore (print_results ("Testing trie functionality") (test_trie ()));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()