(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_node prefix is_leaf =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("prefix"), Obj.repr (prefix)); (__str ("is_leaf"), Obj.repr (is_leaf)); (__str ("children"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and new_tree () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nodes = ref ([new_node ("") (false)]) in
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr (!nodes))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and match_prefix node word =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = ref (0) in
  let p = ref ((Obj.obj (List.assoc (__str ("prefix")) (node) : Obj.t) : string)) in
  let w = ref (word) in
  let min_len = ref (String.length (!p)) in
  if (String.length (!w) < !min_len) then (
  min_len := String.length (!w);
  );
  (try while (!x < !min_len) do
    try
  if (String.sub (!p) (!x) ((!x + 1) - !x) <> String.sub (!w) (!x) ((!x + 1) - !x)) then (
  raise Break;
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  let common = String.sub (!p) (0) (!x - 0) in
  let rem_prefix = String.sub (!p) (!x) (String.length (!p) - !x) in
  let rem_word = String.sub (!w) (!x) (String.length (!w) - !x) in
  __ret := (Obj.magic ([(__str ("common"), Obj.repr (common)); (__str ("rem_prefix"), Obj.repr (rem_prefix)); (__str ("rem_word"), Obj.repr (rem_word))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insert_many tree words =
  let __ret = ref (Obj.magic 0) in
  (try
  (try List.iter (fun w ->
    try
  ignore (insert (ref (tree)) (Obj.repr (0)) (w));
    with Continue -> ()) (words) with Break -> ());
    !__ret
  with Return -> !__ret)

and insert tree idx word =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!tree) : Obj.t) : (string * Obj.t) list list)) in
  let node = ref (List.nth (!nodes) (idx)) in
  if (((Obj.obj (List.assoc (__str ("prefix")) (!node) : Obj.t) : string) = word) && not ((Obj.obj (List.assoc (__str ("is_leaf")) (!node) : Obj.t) : bool))) then (
  node := ((__str ("is_leaf"), Obj.repr (true)) :: List.remove_assoc (__str ("is_leaf")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  __ret := (); raise Return
  );
  let first = String.sub (word) (0) (1 - 0) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) in
  if not (has_key ((Obj.magic !children : (string * int) list)) (first)) then (
  let new_idx = List.length (!nodes) in
  nodes := (List.append (!nodes) [(Obj.magic (new_node (word) (true)) : (string * Obj.t) list)]);
  children := ((__str (first), new_idx) :: List.remove_assoc (__str (first)) !children);
  node := ((__str ("children"), Obj.repr (!children)) :: List.remove_assoc (__str ("children")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  __ret := (); raise Return
  );
  let child_idx = List.assoc (__str (first)) (!children) in
  let child = ref (List.nth (!nodes) (child_idx)) in
  let res = match_prefix ((Obj.magic !child : (string * Obj.t) list)) (word) in
  if ((Obj.obj (List.assoc (__str ("rem_prefix")) (res) : Obj.t) : string) = "") then (
  ignore (insert (tree) (Obj.repr (child_idx)) ((Obj.obj (List.assoc (__str ("rem_word")) (res) : Obj.t) : string)));
  __ret := (); raise Return
  );
  child := ((__str ("prefix"), Obj.repr ((Obj.obj (List.assoc (__str ("rem_prefix")) (res) : Obj.t) : string))) :: List.remove_assoc (__str ("prefix")) (Obj.magic (!child) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = child_idx then !child else __x) (!nodes));
  let new_children = ref ([]) in
  new_children := ((__str (String.sub ((Obj.obj (List.assoc (__str ("rem_prefix")) (res) : Obj.t) : string)) (0) (1 - 0)), child_idx) :: List.remove_assoc (__str (String.sub ((Obj.obj (List.assoc (__str ("rem_prefix")) (res) : Obj.t) : string)) (0) (1 - 0))) !new_children);
  let new_idx = List.length (!nodes) in
  nodes := (List.append (!nodes) [(Obj.magic (new_node ((Obj.obj (List.assoc (__str ("common")) (res) : Obj.t) : string)) (false)) : (string * Obj.t) list)]);
  nodes := (List.mapi (fun __i __x -> if __i = new_idx then ((__str ("children"), Obj.repr (!new_children)) :: List.remove_assoc (__str ("children")) (Obj.magic (List.nth (!nodes) (new_idx)) : (string * Obj.t) list)) else __x) (!nodes));
  if ((Obj.obj (List.assoc (__str ("rem_word")) (res) : Obj.t) : string) = "") then (
  nodes := (List.mapi (fun __i __x -> if __i = new_idx then ((__str ("is_leaf"), Obj.repr (true)) :: List.remove_assoc (__str ("is_leaf")) (Obj.magic (List.nth (!nodes) (new_idx)) : (string * Obj.t) list)) else __x) (!nodes));
  ) else (
  ignore (insert (tree) (Obj.repr (new_idx)) ((Obj.obj (List.assoc (__str ("rem_word")) (res) : Obj.t) : string)));
  );
  children := ((__str (first), new_idx) :: List.remove_assoc (__str (first)) !children);
  node := ((__str ("children"), Obj.repr (!children)) :: List.remove_assoc (__str ("children")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and find tree idx word =
  let __ret = ref false in
  (try
  let idx = (Obj.magic idx : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (tree) : Obj.t) : (string * Obj.t) list list)) in
  let node = ref (List.nth (!nodes) (idx)) in
  let first = String.sub (word) (0) (1 - 0) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) in
  if not (has_key ((Obj.magic !children : (string * int) list)) (first)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let child_idx = List.assoc (__str (first)) (!children) in
  let child = ref (List.nth (!nodes) (child_idx)) in
  let res = match_prefix ((Obj.magic !child : (string * Obj.t) list)) (word) in
  if ((Obj.obj (List.assoc (__str ("rem_prefix")) (res) : Obj.t) : string) <> "") then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((Obj.obj (List.assoc (__str ("rem_word")) (res) : Obj.t) : string) = "") then (
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("is_leaf")) (!child) : Obj.t) : bool)) : bool); raise Return
  );
  __ret := (Obj.magic (find ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (child_idx)) ((Obj.obj (List.assoc (__str ("rem_word")) (res) : Obj.t) : string))) : bool); raise Return
  with Return -> !__ret)

and remove_key m k =
  let __ret = ref ([] : (string * int) list) in
  (try
  let out = ref ([]) in
  (try List.iter (fun (key, _) ->
    try
  if (key <> k) then (
  out := ((__str (key), List.assoc (__str (key)) (m)) :: List.remove_assoc (__str (key)) !out);
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!out) : (string * int) list); raise Return
  with Return -> !__ret)

and has_key m k =
  let __ret = ref false in
  (try
  (try List.iter (fun (key, _) ->
    try
  if (key = k) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and delete tree idx word =
  let __ret = ref false in
  (try
  let idx = (Obj.magic idx : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!tree) : Obj.t) : (string * Obj.t) list list)) in
  let node = ref (List.nth (!nodes) (idx)) in
  let first = String.sub (word) (0) (1 - 0) in
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) in
  if not (has_key ((Obj.magic !children : (string * int) list)) (first)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let child_idx = List.assoc (__str (first)) (!children) in
  let child = ref (List.nth (!nodes) (child_idx)) in
  let res = match_prefix ((Obj.magic !child : (string * Obj.t) list)) (word) in
  if ((Obj.obj (List.assoc (__str ("rem_prefix")) (res) : Obj.t) : string) <> "") then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((Obj.obj (List.assoc (__str ("rem_word")) (res) : Obj.t) : string) <> "") then (
  let deleted = delete (tree) (Obj.repr (child_idx)) ((Obj.obj (List.assoc (__str ("rem_word")) (res) : Obj.t) : string)) in
  if deleted then (
  nodes := (Obj.obj (List.assoc (__str ("nodes")) (!tree) : Obj.t) : (string * Obj.t) list list);
  node := List.nth (!nodes) (idx);
  );
  __ret := (Obj.magic (deleted) : bool); raise Return
  );
  if not ((Obj.obj (List.assoc (__str ("is_leaf")) (!child) : Obj.t) : bool)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (List.length ((Obj.obj (List.assoc (__str ("children")) (!child) : Obj.t) : ( string * int ) list)) = 0) then (
  children := remove_key ((Obj.magic !children : (string * int) list)) (first);
  node := ((__str ("children"), Obj.repr (!children)) :: List.remove_assoc (__str ("children")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  if ((List.length (!children) = 1) && not ((Obj.obj (List.assoc (__str ("is_leaf")) (!node) : Obj.t) : bool))) then (
  let only_key = ref ("") in
  (try List.iter (fun (k, _) ->
    try
  only_key := k;
    with Continue -> ()) (!children) with Break -> ());
  let merge_idx = List.assoc (__str (!only_key)) (!children) in
  let merge_node = ref (List.nth (!nodes) (merge_idx)) in
  node := ((__str ("is_leaf"), Obj.repr ((Obj.obj (List.assoc (__str ("is_leaf")) (!merge_node) : Obj.t) : bool))) :: List.remove_assoc (__str ("is_leaf")) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str ("prefix"), Obj.repr (((Obj.obj (List.assoc (__str ("prefix")) (!node) : Obj.t) : string) ^ (Obj.obj (List.assoc (__str ("prefix")) (!merge_node) : Obj.t) : string)))) :: List.remove_assoc (__str ("prefix")) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str ("children"), Obj.repr ((Obj.obj (List.assoc (__str ("children")) (!merge_node) : Obj.t) : ( string * int ) list))) :: List.remove_assoc (__str ("children")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  );
  ) else (
  if (List.length ((Obj.obj (List.assoc (__str ("children")) (!child) : Obj.t) : ( string * int ) list)) > 1) then (
  child := ((__str ("is_leaf"), Obj.repr (false)) :: List.remove_assoc (__str ("is_leaf")) (Obj.magic (!child) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = child_idx then !child else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  ) else (
  let only_key = ref ("") in
  (try List.iter (fun (k, _) ->
    try
  only_key := k;
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("children")) (!child) : Obj.t) : ( string * int ) list)) with Break -> ());
  let merge_idx = List.assoc (__str (!only_key)) ((Obj.obj (List.assoc (__str ("children")) (!child) : Obj.t) : ( string * int ) list)) in
  let merge_node = ref (List.nth (!nodes) (merge_idx)) in
  child := ((__str ("is_leaf"), Obj.repr ((Obj.obj (List.assoc (__str ("is_leaf")) (!merge_node) : Obj.t) : bool))) :: List.remove_assoc (__str ("is_leaf")) (Obj.magic (!child) : (string * Obj.t) list));
  child := ((__str ("prefix"), Obj.repr (((Obj.obj (List.assoc (__str ("prefix")) (!child) : Obj.t) : string) ^ (Obj.obj (List.assoc (__str ("prefix")) (!merge_node) : Obj.t) : string)))) :: List.remove_assoc (__str ("prefix")) (Obj.magic (!child) : (string * Obj.t) list));
  child := ((__str ("children"), Obj.repr ((Obj.obj (List.assoc (__str ("children")) (!merge_node) : Obj.t) : ( string * int ) list))) :: List.remove_assoc (__str ("children")) (Obj.magic (!child) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = child_idx then !child else __x) (!nodes));
  tree := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!tree) : (string * Obj.t) list));
  );
  );
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and print_tree tree idx height =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let height = (Obj.magic height : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (tree) : Obj.t) : (string * Obj.t) list list)) in
  let node = ref (List.nth (!nodes) (idx)) in
  if ((Obj.obj (List.assoc (__str ("prefix")) (!node) : Obj.t) : string) <> "") then (
  let line = ref ("") in
  let i = ref (0) in
  (try while (!i < height) do
    try
  line := (!line ^ "-");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  line := ((!line ^ " ") ^ (Obj.obj (List.assoc (__str ("prefix")) (!node) : Obj.t) : string));
  if (Obj.obj (List.assoc (__str ("is_leaf")) (!node) : Obj.t) : bool) then (
  line := (!line ^ "  (leaf)");
  );
  print_endline (!line);
  );
  let children = ref ((Obj.obj (List.assoc (__str ("children")) (!node) : Obj.t) : ( string * int ) list)) in
  (try List.iter (fun (k, _) ->
    try
  let child_idx = List.assoc (__str (k)) (!children) in
  ignore (print_tree ((Obj.magic tree : (string * Obj.t) list)) (Obj.repr (child_idx)) (Obj.repr ((height + 1))));
    with Continue -> ()) (!children) with Break -> ());
    !__ret
  with Return -> !__ret)

and test_trie () =
  let __ret = ref false in
  (try
  let words = ref (["banana"; "bananas"; "bandana"; "band"; "apple"; "all"; "beast"]) in
  let tree = new_tree () in
  ignore (insert_many (tree) (!words));
  let ok = ref (true) in
  (try List.iter (fun w ->
    try
  if not (find (tree) (Obj.repr (0)) (w)) then (
  ok := false;
  );
    with Continue -> ()) (!words) with Break -> ());
  if find (tree) (Obj.repr (0)) ("bandanas") then (
  ok := false;
  );
  if find (tree) (Obj.repr (0)) ("apps") then (
  ok := false;
  );
  ignore (delete (ref (tree)) (Obj.repr (0)) ("all"));
  if find (tree) (Obj.repr (0)) ("all") then (
  ok := false;
  );
  ignore (delete (ref (tree)) (Obj.repr (0)) ("banana"));
  if find (tree) (Obj.repr (0)) ("banana") then (
  ok := false;
  );
  if not (find (tree) (Obj.repr (0)) ("bananas")) then (
  ok := false;
  );
  __ret := (Obj.magic (!ok) : bool); raise Return
  with Return -> !__ret)

and pytests () =
  let __ret = ref (Obj.magic 0) in
  (try
  if not (test_trie ()) then (
  (failwith ("test failed"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let tree = new_tree () in
  let words = ref (["banana"; "bananas"; "bandanas"; "bandana"; "band"; "apple"; "all"; "beast"]) in
  ignore (insert_many (tree) (!words));
  print_endline (("Words: " ^ (__str (!words))));
  print_endline ("Tree:");
  ignore (print_tree (tree) (Obj.repr (0)) (Obj.repr (0)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()