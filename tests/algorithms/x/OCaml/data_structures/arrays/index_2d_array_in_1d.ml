(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec iterator_values matrix =
  let __ret = ref ([] : (int) list) in
  (try
  let result = ref (([] : (int) list)) in
  (try List.iter (fun row ->
    try
  (try List.iter (fun value ->
    try
  result := (List.append (!result) [(Obj.magic (value) : int)]);
    with Continue -> ()) (row) with Break -> ());
    with Continue -> ()) (matrix) with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and index_2d_array_in_1d array index =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  let rows = List.length (array) in
  let cols = List.length (List.nth (array) (0)) in
  if ((rows = 0) || (cols = 0)) then (
  (failwith ("no items in array"));
  );
  if ((index < 0) || (index >= (rows * cols))) then (
  (failwith ("index out of range"));
  );
  __ret := (Obj.magic (List.nth (List.nth (array) ((index / cols))) (((index mod cols + cols) mod cols))) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (iterator_values ([[5]; [-(523)]; [-(1)]; [34]; [0]]))));
  print_endline ((__str (iterator_values ([[5; -(523); -(1)]; [34; 0]]))));
  print_endline ((string_of_int (index_2d_array_in_1d ([[0; 1; 2; 3]; [4; 5; 6; 7]; [8; 9; 10; 11]]) (Obj.repr (5)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()