(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_prefix_sum arr =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let prefix = ref (([] : (int) list)) in
  let running = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  running := (!running + List.nth (arr) (!i));
  prefix := (List.append (!prefix) [(Obj.magic (!running) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("prefix_sum"), Obj.repr (!prefix))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get_sum ps start end_ =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let prefix = ref ((Obj.obj (List.assoc (__str ("prefix_sum")) (ps) : Obj.t) : int list)) in
  if (List.length (!prefix) = 0) then (
  (failwith ("The array is empty."));
  );
  if (((start < 0) || (end_ >= List.length (!prefix))) || (start > end_)) then (
  (failwith ("Invalid range specified."));
  );
  if (start = 0) then (
  __ret := (Obj.magic (List.nth (!prefix) (end_)) : int); raise Return
  );
  __ret := (Obj.magic ((List.nth (!prefix) (end_) - List.nth (!prefix) ((start - 1)))) : int); raise Return
  with Return -> !__ret)

and contains_sum ps target_sum =
  let __ret = ref false in
  (try
  let target_sum = (Obj.magic target_sum : int) in
  let prefix = ref ((Obj.obj (List.assoc (__str ("prefix_sum")) (ps) : Obj.t) : int list)) in
  let sums = ref ([0]) in
  let i = ref (0) in
  (try while (!i < List.length (!prefix)) do
    try
  let sum_item = List.nth (!prefix) (!i) in
  let j = ref (0) in
  (try while (!j < List.length (!sums)) do
    try
  if (List.nth (!sums) (!j) = (sum_item - target_sum)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  sums := (List.append (!sums) [(Obj.magic (sum_item) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let ps = make_prefix_sum ([1; 2; 3]) in
  print_endline ((string_of_int (get_sum (ps) (Obj.repr (0)) (Obj.repr (2)))));
  print_endline ((string_of_int (get_sum (ps) (Obj.repr (1)) (Obj.repr (2)))));
  print_endline ((string_of_int (get_sum (ps) (Obj.repr (2)) (Obj.repr (2)))));
  print_endline ((string_of_bool (contains_sum (ps) (Obj.repr (6)))));
  print_endline ((string_of_bool (contains_sum (ps) (Obj.repr (5)))));
  print_endline ((string_of_bool (contains_sum (ps) (Obj.repr (3)))));
  print_endline ((string_of_bool (contains_sum (ps) (Obj.repr (4)))));
  print_endline ((string_of_bool (contains_sum (ps) (Obj.repr (7)))));
  let ps2 = make_prefix_sum ([1; -(2); 3]) in
  print_endline ((string_of_bool (contains_sum (ps2) (Obj.repr (2)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()