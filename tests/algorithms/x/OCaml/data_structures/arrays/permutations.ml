(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec tail xs =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let i = ref (1) in
  (try while (!i < List.length (xs)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and rotate_left xs =
  let __ret = ref ([] : (int) list) in
  (try
  if (List.length (xs) = 0) then (
  __ret := (Obj.magic (xs) : int list); raise Return
  );
  let res = ref (([] : (int) list)) in
  let i = ref (1) in
  (try while (!i < List.length (xs)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (0)) : int)]);
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and permute_recursive nums =
  let __ret = ref ([] : (int list) list) in
  (try
  if (List.length (nums) = 0) then (
  let base = ref ([]) in
  __ret := (Obj.magic ((List.append (!base) [(Obj.magic ((Obj.magic [] : int list)) : int list)])) : int list list); raise Return
  );
  let result = ref (([] : (int list) list)) in
  let current = ref (nums) in
  let count = ref (0) in
  (try while (!count < List.length (nums)) do
    try
  let n = List.nth (!current) (0) in
  let rest = ref (tail (!current)) in
  let perms = ref (permute_recursive (!rest)) in
  let j = ref (0) in
  (try while (!j < List.length (!perms)) do
    try
  let perm = ref ((List.append (List.nth (!perms) (!j)) [(Obj.magic (n) : int)])) in
  result := (List.append (!result) [(Obj.magic (!perm) : int list)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  current := rotate_left (!current);
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and swap xs i j =
  let __ret = ref ([] : (int) list) in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let res = ref (([] : (int) list)) in
  let k = ref (0) in
  (try while (!k < List.length (xs)) do
    try
  if (!k = i) then (
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (j)) : int)]);
  ) else (
  if (!k = j) then (
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (i)) : int)]);
  ) else (
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!k)) : int)]);
  );
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and permute_backtrack_helper nums start output =
  let __ret = ref ([] : (int list) list) in
  (try
  let start = (Obj.magic start : int) in
  if (start = (List.length (nums) - 1)) then (
  __ret := (Obj.magic ((List.append (output) [(Obj.magic (nums) : int list)])) : int list list); raise Return
  );
  let i = ref (start) in
  let res = ref (output) in
  (try while (!i < List.length (nums)) do
    try
  let swapped = ref (swap (nums) (Obj.repr (start)) (Obj.repr (!i))) in
  res := permute_backtrack_helper (!swapped) (Obj.repr ((start + 1))) (!res);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and permute_backtrack nums =
  let __ret = ref ([] : (int list) list) in
  (try
  let output = ref ([]) in
  __ret := (Obj.magic (permute_backtrack_helper (nums) (Obj.repr (0)) (!output)) : int list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (permute_recursive ([1; 2; 3]))));
  print_endline ((__str (permute_backtrack ([1; 2; 3]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()