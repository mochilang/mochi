(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec partition arr low high =
  let __ret = ref 0 in
  (try
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  let pivot = List.nth (!arr) (high) in
  let i = ref ((low - 1)) in
  let j = ref (low) in
  (try while (!j < high) do
    try
  if (List.nth (!arr) (!j) >= pivot) then (
  i := (!i + 1);
  let tmp = ref (List.nth (!arr) (!i)) in
  arr := (List.mapi (fun __i __x -> if __i = !i then List.nth (!arr) (!j) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !j then !tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref ((!i + 1)) in
  let tmp = ref (List.nth (!arr) (!k)) in
  arr := (List.mapi (fun __i __x -> if __i = !k then List.nth (!arr) (high) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = high then !tmp else __x) (!arr));
  __ret := (Obj.magic (!k) : int); raise Return
  with Return -> !__ret)

and kth_largest_element arr position =
  let __ret = ref 0 in
  (try
  let position = (Obj.magic position : int) in
  if (List.length (arr) = 0) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  if ((position < 1) || (position > List.length (arr))) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let low = ref (0) in
  let high = ref ((List.length (arr) - 1)) in
  (try while (!low <= !high) do
    try
  if ((!low > (List.length (arr) - 1)) || (!high < 0)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let pivot_index = ref (partition (ref (arr)) (Obj.repr (!low)) (Obj.repr (!high))) in
  if (!pivot_index = (position - 1)) then (
  __ret := (Obj.magic (List.nth (arr) (!pivot_index)) : int); raise Return
  ) else (
  if (!pivot_index > (position - 1)) then (
  high := (!pivot_index - 1);
  ) else (
  low := (!pivot_index + 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)


let arr1 = ref ([3; 1; 4; 1; 5; 9; 2; 6; 5; 3; 5])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (kth_largest_element (!arr1) (Obj.repr (3))));
  print_string "\n";
  let arr2 = ref ([2; 5; 6; 1; 9; 3; 8; 4; 7; 3; 5]) in
  print_endline (string_of_int (kth_largest_element (!arr2) (Obj.repr (1))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()