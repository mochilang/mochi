(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow2 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  result := (!result * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and int_log2 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let v = ref (n) in
  let res = ref (0) in
  (try while (!v > 1) do
    try
  v := (!v / 2);
  res := (!res + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and build_sparse_table number_list =
  let __ret = ref ([] : (int list) list) in
  (try
  if (List.length (number_list) = 0) then (
  (failwith ("empty number list not allowed"));
  );
  let length = List.length (number_list) in
  let row = (int_log2 (Obj.repr (length)) + 1) in
  let sparse_table = ref (([] : (int list) list)) in
  let j = ref (0) in
  (try while (!j < row) do
    try
  let inner = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < length) do
    try
  inner := (List.append (!inner) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  sparse_table := (List.append (!sparse_table) [(Obj.magic (!inner) : int list)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (0) in
  (try while (!i < length) do
    try
  sparse_table := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = !i then List.nth (number_list) (!i) else __x) (List.nth (!sparse_table) (0))) else __x) (!sparse_table));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  j := 1;
  (try while (pow2 (Obj.repr (!j)) <= length) do
    try
  i := 0;
  (try while (((!i + pow2 (Obj.repr (!j))) - 1) < length) do
    try
  let left = List.nth (List.nth (!sparse_table) ((!j - 1))) ((!i + pow2 (Obj.repr ((!j - 1))))) in
  let right = List.nth (List.nth (!sparse_table) ((!j - 1))) (!i) in
  if (left < right) then (
  sparse_table := (List.mapi (fun __i __x -> if __i = !j then (List.mapi (fun __i __x -> if __i = !i then left else __x) (List.nth (!sparse_table) (!j))) else __x) (!sparse_table));
  ) else (
  sparse_table := (List.mapi (fun __i __x -> if __i = !j then (List.mapi (fun __i __x -> if __i = !i then right else __x) (List.nth (!sparse_table) (!j))) else __x) (!sparse_table));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sparse_table) : int list list); raise Return
  with Return -> !__ret)

and query sparse_table left_bound right_bound =
  let __ret = ref 0 in
  (try
  let left_bound = (Obj.magic left_bound : int) in
  let right_bound = (Obj.magic right_bound : int) in
  if ((left_bound < 0) || (right_bound >= List.length (List.nth (sparse_table) (0)))) then (
  (failwith ("list index out of range"));
  );
  let interval = ((right_bound - left_bound) + 1) in
  let j = int_log2 (Obj.repr (interval)) in
  let val1 = List.nth (List.nth (sparse_table) (j)) (((right_bound - pow2 (Obj.repr (j))) + 1)) in
  let val2 = List.nth (List.nth (sparse_table) (j)) (left_bound) in
  if (val1 < val2) then (
  __ret := (Obj.magic (val1) : int); raise Return
  );
  __ret := (Obj.magic (val2) : int); raise Return
  with Return -> !__ret)


let st1 = ref (build_sparse_table ([8; 1; 0; 3; 4; 9; 3]))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (!st1)));
  let st2 = ref (build_sparse_table ([3; 1; 9])) in
  print_endline ((__str (!st2)));
  print_endline ((string_of_int (query (!st1) (Obj.repr (0)) (Obj.repr (4)))));
  print_endline ((string_of_int (query (!st1) (Obj.repr (4)) (Obj.repr (6)))));
  print_endline ((string_of_int (query (!st2) (Obj.repr (2)) (Obj.repr (2)))));
  print_endline ((string_of_int (query (!st2) (Obj.repr (0)) (Obj.repr (1)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()