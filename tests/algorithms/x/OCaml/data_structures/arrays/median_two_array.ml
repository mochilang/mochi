(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sortFloats xs =
  let __ret = ref ([] : (float) list) in
  (try
  let arr = ref (xs) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let j = ref (0) in
  (try while (!j < (List.length (!arr) - 1)) do
    try
  if (List.nth (!arr) (!j) > List.nth (!arr) ((!j + 1))) then (
  let t = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j + 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then t else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : float list); raise Return
  with Return -> !__ret)

and find_median_sorted_arrays nums1 nums2 =
  let __ret = ref 0.0 in
  (try
  if ((List.length (nums1) = 0) && (List.length (nums2) = 0)) then (
  (failwith ("Both input arrays are empty."));
  );
  let merged = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (nums1)) do
    try
  merged := (List.append (!merged) [(Obj.magic (List.nth (nums1) (!i)) : float)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < List.length (nums2)) do
    try
  merged := (List.append (!merged) [(Obj.magic (List.nth (nums2) (!j)) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let sorted = ref (sortFloats (!merged)) in
  let total = List.length (!sorted) in
  if (((total mod 2 + 2) mod 2) = 1) then (
  __ret := (Obj.magic (List.nth (!sorted) ((total / 2))) : float); raise Return
  );
  let middle1 = List.nth (!sorted) (((total / 2) - 1)) in
  let middle2 = List.nth (!sorted) ((total / 2)) in
  __ret := (Obj.magic (((middle1 +. middle2) /. 2.0)) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_float (find_median_sorted_arrays ([1.0; 3.0]) ([2.0])));
  print_endline (string_of_float (find_median_sorted_arrays ([1.0; 2.0]) ([3.0; 4.0])));
  print_endline (string_of_float (find_median_sorted_arrays ([0.0; 0.0]) ([0.0; 0.0])));
  print_endline (string_of_float (find_median_sorted_arrays ((Obj.magic [] : float list)) ([1.0])));
  print_endline (string_of_float (find_median_sorted_arrays ([(-.(1000.0))]) ([1000.0])));
  print_endline (string_of_float (find_median_sorted_arrays ([(-.(1.1)); (-.(2.2))]) ([(-.(3.3)); (-.(4.4))])));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()