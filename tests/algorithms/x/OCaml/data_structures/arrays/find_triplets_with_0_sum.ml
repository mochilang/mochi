(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_triplet a b c =
  let __ret = ref ([] : (int) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let x = ref (a) in
  let y = ref (b) in
  let z = ref (c) in
  if (!x > !y) then (
  let t = !x in
  x := !y;
  y := t;
  );
  if (!y > !z) then (
  let t = !y in
  y := !z;
  z := t;
  );
  if (!x > !y) then (
  let t = !x in
  x := !y;
  y := t;
  );
  __ret := (Obj.magic ([!x; !y; !z]) : int list); raise Return
  with Return -> !__ret)

and contains_triplet arr target =
  let __ret = ref false in
  (try
  (try for i = 0 to (List.length (arr) - 1) do
    try
  let item = ref (List.nth (arr) (i)) in
  let same = ref (true) in
  (try for j = 0 to (List.length (target) - 1) do
    try
  if (List.nth (!item) (j) <> List.nth (target) (j)) then (
  same := false;
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  if !same then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and contains_int arr value =
  let __ret = ref false in
  (try
  let value = (Obj.magic value : int) in
  (try for i = 0 to (List.length (arr) - 1) do
    try
  if (List.nth (arr) (i) = value) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and find_triplets_with_0_sum nums =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = List.length (nums) in
  let result = ref (([] : (int list) list)) in
  (try for i = 0 to (n - 1) do
    try
  (try for j = (i + 1) to (n - 1) do
    try
  (try for k = (j + 1) to (n - 1) do
    try
  let a = List.nth (nums) (i) in
  let b = List.nth (nums) (j) in
  let c = List.nth (nums) (k) in
  if (((a + b) + c) = 0) then (
  let trip = ref (sort_triplet (Obj.repr (a)) (Obj.repr (b)) (Obj.repr (c))) in
  if not (contains_triplet (!result) (!trip)) then (
  result := (List.append (!result) [(Obj.magic (!trip) : int list)]);
  );
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list list); raise Return
  with Return -> !__ret)

and find_triplets_with_0_sum_hashing arr =
  let __ret = ref ([] : (int list) list) in
  (try
  let target_sum = 0 in
  let output = ref (([] : (int list) list)) in
  (try for i = 0 to (List.length (arr) - 1) do
    try
  let seen = ref (([] : (int) list)) in
  let current_sum = (target_sum - List.nth (arr) (i)) in
  (try for j = (i + 1) to (List.length (arr) - 1) do
    try
  let other = List.nth (arr) (j) in
  let required = (current_sum - other) in
  if contains_int (!seen) (Obj.repr (required)) then (
  let trip = ref (sort_triplet (Obj.repr (List.nth (arr) (i))) (Obj.repr (other)) (Obj.repr (required))) in
  if not (contains_triplet (!output) (!trip)) then (
  output := (List.append (!output) [(Obj.magic (!trip) : int list)]);
  );
  );
  seen := (List.append (!seen) [(Obj.magic (other) : int)]);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : int list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (find_triplets_with_0_sum ([-(1); 0; 1; 2; -(1); -(4)]))));
  print_endline ((__str (find_triplets_with_0_sum ((Obj.magic [] : int list)))));
  print_endline ((__str (find_triplets_with_0_sum ([0; 0; 0]))));
  print_endline ((__str (find_triplets_with_0_sum ([1; 2; 3; 0; -(1); -(2); -(3)]))));
  print_endline ((__str (find_triplets_with_0_sum_hashing ([-(1); 0; 1; 2; -(1); -(4)]))));
  print_endline ((__str (find_triplets_with_0_sum_hashing ((Obj.magic [] : int list)))));
  print_endline ((__str (find_triplets_with_0_sum_hashing ([0; 0; 0]))));
  print_endline ((__str (find_triplets_with_0_sum_hashing ([1; 2; 3; 0; -(1); -(2); -(3)]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()