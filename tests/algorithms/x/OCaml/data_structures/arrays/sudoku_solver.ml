(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec string_to_grid s =
  let __ret = ref ([] : (int list) list) in
  (try
  let grid = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < 9) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < 9) do
    try
  let ch = String.sub (s) (((!i * 9) + !j)) ((((!i * 9) + !j) + 1) - ((!i * 9) + !j)) in
  let val_ = ref (0) in
  if ((ch <> "0") && (ch <> ".")) then (
  val_ := int_of_string (ch);
  );
  row := (List.append (!row) [(Obj.magic (!val_) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  grid := (List.append (!grid) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!grid) : int list list); raise Return
  with Return -> !__ret)

and print_grid grid =
  let __ret = ref (Obj.magic 0) in
  (try
  (try for r = 0 to (9 - 1) do
    try
  let line = ref ("") in
  (try for c = 0 to (9 - 1) do
    try
  line := (!line ^ (string_of_int (List.nth (List.nth (grid) (r)) (c))));
  if (c < 8) then (
  line := (!line ^ " ");
  );
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and is_safe grid row column n =
  let __ret = ref false in
  (try
  let row = (Obj.magic row : int) in
  let column = (Obj.magic column : int) in
  let n = (Obj.magic n : int) in
  (try for i = 0 to (9 - 1) do
    try
  if ((List.nth (List.nth (grid) (row)) (i) = n) || (List.nth (List.nth (grid) (i)) (column) = n)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  (try for i = 0 to (3 - 1) do
    try
  (try for j = 0 to (3 - 1) do
    try
  if (List.nth (List.nth (grid) (((row - ((row mod 3 + 3) mod 3)) + i))) (((column - ((column mod 3 + 3) mod 3)) + j)) = n) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and find_empty grid =
  let __ret = ref ([] : (int) list) in
  (try
  (try for i = 0 to (9 - 1) do
    try
  (try for j = 0 to (9 - 1) do
    try
  if (List.nth (List.nth (grid) (i)) (j) = 0) then (
  __ret := (Obj.magic ([i; j]) : int list); raise Return
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([]) : int list); raise Return
  with Return -> !__ret)

and solve grid =
  let __ret = ref false in
  (try
  let loc = ref (find_empty (!grid)) in
  if (List.length (!loc) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let row = List.nth (!loc) (0) in
  let column = List.nth (!loc) (1) in
  (try for digit = 1 to (10 - 1) do
    try
  if is_safe (!grid) (Obj.repr (row)) (Obj.repr (column)) (Obj.repr (digit)) then (
  grid := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = column then digit else __x) (List.nth (!grid) (row))) else __x) (!grid));
  if solve (grid) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  grid := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = column then 0 else __x) (List.nth (!grid) (row))) else __x) (!grid));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)


let puzzle = "003020600900305001001806400008102900700000008006708200002609500800203009005010300"
let grid = ref (string_to_grid (puzzle))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Original grid:");
  ignore (print_grid (!grid));
  if solve (grid) then (
  print_endline ("\nSolved grid:");
  ignore (print_grid (!grid));
  ) else (
  print_endline ("\nNo solution found");
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()