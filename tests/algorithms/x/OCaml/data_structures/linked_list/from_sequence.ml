(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _nil = (0 - 1)
let nodes = ref (([] : ((string * Obj.t) list) list))
let rec make_linked_list elements =
  let __ret = ref 0 in
  (try
  if (List.length (elements) = 0) then (
  (failwith ("The Elements List is empty"));
  );
  nodes := [];
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (List.nth (elements) (0))); (__str ("next"), Obj.repr (_nil))]) : (string * Obj.t) list)]);
  let head = ref (0) in
  let current = ref (!head) in
  let i = ref (1) in
  (try while (!i < List.length (elements)) do
    try
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (List.nth (elements) (!i))); (__str ("next"), Obj.repr (_nil))]) : (string * Obj.t) list)]);
  nodes := (List.mapi (fun __i __x -> if __i = !current then ((__str ("next"), Obj.repr ((List.length (!nodes) - 1))) :: List.remove_assoc (__str ("next")) (Obj.magic (List.nth (!nodes) (!current)) : (string * Obj.t) list)) else __x) (!nodes));
  current := (List.length (!nodes) - 1);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!head) : int); raise Return
  with Return -> !__ret)

and node_to_string head =
  let __ret = ref "" in
  (try
  let head = (Obj.magic head : int) in
  let s = ref ("") in
  let index = ref (head) in
  (try while (!index <> _nil) do
    try
  let node = List.nth (!nodes) (!index) in
  s := (((!s ^ "<") ^ (string_of_int ((Obj.obj (List.assoc (__str ("data")) (node) : Obj.t) : int)))) ^ "> ---> ");
  index := (Obj.obj (List.assoc (__str ("next")) (node) : Obj.t) : int);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "<END>");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let list_data = ref ([1; 3; 5; 32; 44; 12; 43]) in
  print_endline (("List: " ^ (__str (!list_data))));
  print_endline ("Creating Linked List from List.");
  let head = make_linked_list (!list_data) in
  print_endline ("Linked List:");
  print_endline ((node_to_string (Obj.repr (head))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()