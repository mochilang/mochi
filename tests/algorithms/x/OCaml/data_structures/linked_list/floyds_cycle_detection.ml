(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _null = (0 - 1)
let rec empty_list () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("next"), Obj.repr ((Obj.magic [] : int list))); (__str ("head"), Obj.repr (_null))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_node list value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let value = (Obj.magic value : int) in
  let nexts = ref ((Obj.obj (List.assoc (__str ("next")) (list) : Obj.t) : int list)) in
  let new_index = List.length (!nexts) in
  nexts := (List.append (!nexts) [(Obj.magic (_null) : int)]);
  if ((Obj.obj (List.assoc (__str ("head")) (list) : Obj.t) : int) = _null) then (
  __ret := (Obj.magic ([(__str ("next"), Obj.repr (!nexts)); (__str ("head"), Obj.repr (new_index))]) : (string * Obj.t) list); raise Return
  );
  let last = ref ((Obj.obj (List.assoc (__str ("head")) (list) : Obj.t) : int)) in
  (try while (List.nth (!nexts) (!last) <> _null) do
    try
  last := List.nth (!nexts) (!last);
    with Continue -> ()
  done with Break -> ());
  let new_nexts = ref ((Obj.magic [] : int list)) in
  let i = ref (0) in
  (try while (!i < List.length (!nexts)) do
    try
  if (!i = !last) then (
  new_nexts := (List.append (!new_nexts) [(Obj.magic (new_index) : int)]);
  ) else (
  new_nexts := (List.append (!new_nexts) [(Obj.magic (List.nth (!nexts) (!i)) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("next"), Obj.repr (!new_nexts)); (__str ("head"), Obj.repr ((Obj.obj (List.assoc (__str ("head")) (list) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and set_next list index next_index =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let next_index = (Obj.magic next_index : int) in
  let nexts = ref ((Obj.obj (List.assoc (__str ("next")) (list) : Obj.t) : int list)) in
  let new_nexts = ref ((Obj.magic [] : int list)) in
  let i = ref (0) in
  (try while (!i < List.length (!nexts)) do
    try
  if (!i = index) then (
  new_nexts := (List.append (!new_nexts) [(Obj.magic (next_index) : int)]);
  ) else (
  new_nexts := (List.append (!new_nexts) [(Obj.magic (List.nth (!nexts) (!i)) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("next"), Obj.repr (!new_nexts)); (__str ("head"), Obj.repr ((Obj.obj (List.assoc (__str ("head")) (list) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and detect_cycle list =
  let __ret = ref false in
  (try
  if ((Obj.obj (List.assoc (__str ("head")) (list) : Obj.t) : int) = _null) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let nexts = ref ((Obj.obj (List.assoc (__str ("next")) (list) : Obj.t) : int list)) in
  let slow = ref ((Obj.obj (List.assoc (__str ("head")) (list) : Obj.t) : int)) in
  let fast = ref ((Obj.obj (List.assoc (__str ("head")) (list) : Obj.t) : int)) in
  (try while ((!fast <> _null) && (List.nth (!nexts) (!fast) <> _null)) do
    try
  slow := List.nth (!nexts) (!slow);
  fast := List.nth (!nexts) (List.nth (!nexts) (!fast));
  if (!slow = !fast) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let ll = ref (empty_list ()) in
  ll := add_node (!ll) (Obj.repr (1));
  ll := add_node (!ll) (Obj.repr (2));
  ll := add_node (!ll) (Obj.repr (3));
  ll := add_node (!ll) (Obj.repr (4));
  ll := set_next (!ll) (Obj.repr (3)) (Obj.repr (1));
  print_endline (string_of_bool (detect_cycle (!ll)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()