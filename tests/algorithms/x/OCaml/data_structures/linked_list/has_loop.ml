(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec has_loop nodes head =
  let __ret = ref false in
  (try
  let head = (Obj.magic head : int) in
  let slow = ref (head) in
  let fast = ref (head) in
  (try while (!fast <> (0 - 1)) do
    try
  let fast_node1 = ref (List.nth (nodes) (!fast)) in
  if ((Obj.obj (List.assoc (__str ("next")) (!fast_node1) : Obj.t) : int) = (0 - 1)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let fast_node2 = ref (List.nth (nodes) ((Obj.obj (List.assoc (__str ("next")) (!fast_node1) : Obj.t) : int))) in
  if ((Obj.obj (List.assoc (__str ("next")) (!fast_node2) : Obj.t) : int) = (0 - 1)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let slow_node = ref (List.nth (nodes) (!slow)) in
  slow := (Obj.obj (List.assoc (__str ("next")) (!slow_node) : Obj.t) : int);
  fast := (Obj.obj (List.assoc (__str ("next")) (!fast_node2) : Obj.t) : int);
  if (!slow = !fast) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and make_nodes values =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let nodes = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (values)) do
    try
  let next_idx = if (!i = (List.length (values) - 1)) then (0 - 1) else (!i + 1) in
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (List.nth (values) (!i))); (__str ("next"), Obj.repr (next_idx))]) : (string * Obj.t) list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!nodes) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let list1 = ref (make_nodes ([1; 2; 3; 4])) in
  print_endline ((string_of_bool (has_loop ((Obj.magic !list1 : (string * Obj.t) list list)) (Obj.repr (0)))));
  list1 := (List.mapi (fun __i __x -> if __i = 3 then ((__str ("next"), Obj.repr (1)) :: List.remove_assoc (__str ("next")) (Obj.magic (List.nth (!list1) (3)) : (string * Obj.t) list)) else __x) (!list1));
  print_endline ((string_of_bool (has_loop ((Obj.magic !list1 : (string * Obj.t) list list)) (Obj.repr (0)))));
  let list2 = ref (make_nodes ([5; 6; 5; 6])) in
  print_endline ((string_of_bool (has_loop ((Obj.magic !list2 : (string * Obj.t) list list)) (Obj.repr (0)))));
  let list3 = ref (make_nodes ([1])) in
  print_endline ((string_of_bool (has_loop ((Obj.magic !list3 : (string * Obj.t) list list)) (Obj.repr (0)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()