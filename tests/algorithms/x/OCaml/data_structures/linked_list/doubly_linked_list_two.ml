(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec empty_list () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr ([])); (__str ("head_idx"), Obj.repr (-(1))); (__str ("tail_idx"), Obj.repr (-(1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get_head_data ll =
  let __ret = ref 0 in
  (try
  if ((Obj.obj (List.assoc (__str ("head_idx")) (ll) : Obj.t) : int) = -(1)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (ll) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("head_idx")) (ll) : Obj.t) : int))) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int)) : int); raise Return
  with Return -> !__ret)

and get_tail_data ll =
  let __ret = ref 0 in
  (try
  if ((Obj.obj (List.assoc (__str ("tail_idx")) (ll) : Obj.t) : int) = -(1)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (ll) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("tail_idx")) (ll) : Obj.t) : int))) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int)) : int); raise Return
  with Return -> !__ret)

and insert_before_node ll idx new_idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let new_idx = (Obj.magic new_idx : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) in
  let new_node = ref (List.nth (!nodes) (new_idx)) in
  new_node := ((__str ("next_index"), Obj.repr (idx)) :: List.remove_assoc (__str ("next_index")) (Obj.magic (!new_node) : (string * Obj.t) list));
  let node = ref (List.nth (!nodes) (idx)) in
  let p = (Obj.obj (List.assoc (__str ("prev_index")) (!node) : Obj.t) : int) in
  new_node := ((__str ("prev_index"), Obj.repr (p)) :: List.remove_assoc (__str ("prev_index")) (Obj.magic (!new_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = new_idx then !new_node else __x) (!nodes));
  if (p = -(1)) then (
  ll := ((__str ("head_idx"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("head_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ) else (
  let prev_node = ref (List.nth (!nodes) (p)) in
  prev_node := ((__str ("next_index"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("next_index")) (Obj.magic (!prev_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = p then !prev_node else __x) (!nodes));
  );
  node := ((__str ("prev_index"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("prev_index")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  ll := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!ll) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and insert_after_node ll idx new_idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let new_idx = (Obj.magic new_idx : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) in
  let new_node = ref (List.nth (!nodes) (new_idx)) in
  new_node := ((__str ("prev_index"), Obj.repr (idx)) :: List.remove_assoc (__str ("prev_index")) (Obj.magic (!new_node) : (string * Obj.t) list));
  let node = ref (List.nth (!nodes) (idx)) in
  let nxt = (Obj.obj (List.assoc (__str ("next_index")) (!node) : Obj.t) : int) in
  new_node := ((__str ("next_index"), Obj.repr (nxt)) :: List.remove_assoc (__str ("next_index")) (Obj.magic (!new_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = new_idx then !new_node else __x) (!nodes));
  if (nxt = -(1)) then (
  ll := ((__str ("tail_idx"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("tail_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ) else (
  let next_node = ref (List.nth (!nodes) (nxt)) in
  next_node := ((__str ("prev_index"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("prev_index")) (Obj.magic (!next_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = nxt then !next_node else __x) (!nodes));
  );
  node := ((__str ("next_index"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("next_index")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  ll := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!ll) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and set_head ll idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  if ((Obj.obj (List.assoc (__str ("head_idx")) (!ll) : Obj.t) : int) = -(1)) then (
  ll := ((__str ("head_idx"), Obj.repr (idx)) :: List.remove_assoc (__str ("head_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ll := ((__str ("tail_idx"), Obj.repr (idx)) :: List.remove_assoc (__str ("tail_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ) else (
  ignore (insert_before_node (ll) (Obj.repr ((Obj.obj (List.assoc (__str ("head_idx")) (!ll) : Obj.t) : int))) (Obj.repr (idx)));
  );
    !__ret
  with Return -> !__ret)

and set_tail ll idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  if ((Obj.obj (List.assoc (__str ("tail_idx")) (!ll) : Obj.t) : int) = -(1)) then (
  ll := ((__str ("head_idx"), Obj.repr (idx)) :: List.remove_assoc (__str ("head_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ll := ((__str ("tail_idx"), Obj.repr (idx)) :: List.remove_assoc (__str ("tail_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ) else (
  ignore (insert_after_node (ll) (Obj.repr ((Obj.obj (List.assoc (__str ("tail_idx")) (!ll) : Obj.t) : int))) (Obj.repr (idx)));
  );
    !__ret
  with Return -> !__ret)

and insert ll value =
  let __ret = ref (Obj.magic 0) in
  (try
  let value = (Obj.magic value : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) in
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (value)); (__str ("prev_index"), Obj.repr (-(1))); (__str ("next_index"), Obj.repr (-(1)))]) : (string * Obj.t) list)]);
  let idx = (List.length (!nodes) - 1) in
  ll := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!ll) : (string * Obj.t) list));
  if ((Obj.obj (List.assoc (__str ("head_idx")) (!ll) : Obj.t) : int) = -(1)) then (
  ll := ((__str ("head_idx"), Obj.repr (idx)) :: List.remove_assoc (__str ("head_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ll := ((__str ("tail_idx"), Obj.repr (idx)) :: List.remove_assoc (__str ("tail_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  ) else (
  ignore (insert_after_node (ll) (Obj.repr ((Obj.obj (List.assoc (__str ("tail_idx")) (!ll) : Obj.t) : int))) (Obj.repr (idx)));
  );
    !__ret
  with Return -> !__ret)

and insert_at_position ll position value =
  let __ret = ref (Obj.magic 0) in
  (try
  let position = (Obj.magic position : int) in
  let value = (Obj.magic value : int) in
  let current = ref ((Obj.obj (List.assoc (__str ("head_idx")) (!ll) : Obj.t) : int)) in
  let current_pos = ref (1) in
  (try while (!current <> -(1)) do
    try
  if (!current_pos = position) then (
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) in
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (value)); (__str ("prev_index"), Obj.repr (-(1))); (__str ("next_index"), Obj.repr (-(1)))]) : (string * Obj.t) list)]);
  let new_idx = (List.length (!nodes) - 1) in
  ll := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!ll) : (string * Obj.t) list));
  ignore (insert_before_node (ll) (Obj.repr (!current)) (Obj.repr (new_idx)));
  __ret := (); raise Return
  );
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) (!current)) in
  current := (Obj.obj (List.assoc (__str ("next_index")) (!node) : Obj.t) : int);
  current_pos := (!current_pos + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (insert (ll) (Obj.repr (value)));
    !__ret
  with Return -> !__ret)

and get_node ll item =
  let __ret = ref 0 in
  (try
  let item = (Obj.magic item : int) in
  let current = ref ((Obj.obj (List.assoc (__str ("head_idx")) (ll) : Obj.t) : int)) in
  (try while (!current <> -(1)) do
    try
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (ll) : Obj.t) : (string * Obj.t) list list)) (!current)) in
  if ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int) = item) then (
  __ret := (Obj.magic (!current) : int); raise Return
  );
  current := (Obj.obj (List.assoc (__str ("next_index")) (!node) : Obj.t) : int);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and remove_node_pointers ll idx =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = (Obj.magic idx : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) in
  let node = ref (List.nth (!nodes) (idx)) in
  let nxt = (Obj.obj (List.assoc (__str ("next_index")) (!node) : Obj.t) : int) in
  let p = (Obj.obj (List.assoc (__str ("prev_index")) (!node) : Obj.t) : int) in
  if (nxt <> -(1)) then (
  let nxt_node = ref (List.nth (!nodes) (nxt)) in
  nxt_node := ((__str ("prev_index"), Obj.repr (p)) :: List.remove_assoc (__str ("prev_index")) (Obj.magic (!nxt_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = nxt then !nxt_node else __x) (!nodes));
  );
  if (p <> -(1)) then (
  let prev_node = ref (List.nth (!nodes) (p)) in
  prev_node := ((__str ("next_index"), Obj.repr (nxt)) :: List.remove_assoc (__str ("next_index")) (Obj.magic (!prev_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = p then !prev_node else __x) (!nodes));
  );
  node := ((__str ("next_index"), Obj.repr (-(1))) :: List.remove_assoc (__str ("next_index")) (Obj.magic (!node) : (string * Obj.t) list));
  node := ((__str ("prev_index"), Obj.repr (-(1))) :: List.remove_assoc (__str ("prev_index")) (Obj.magic (!node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = idx then !node else __x) (!nodes));
  ll := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!ll) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and delete_value ll value =
  let __ret = ref (Obj.magic 0) in
  (try
  let value = (Obj.magic value : int) in
  let idx = get_node ((Obj.magic !ll : (string * Obj.t) list)) (Obj.repr (value)) in
  if (idx = -(1)) then (
  __ret := (); raise Return
  );
  if (idx = (Obj.obj (List.assoc (__str ("head_idx")) (!ll) : Obj.t) : int)) then (
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) (idx)) in
  ll := ((__str ("head_idx"), Obj.repr ((Obj.obj (List.assoc (__str ("next_index")) (!node) : Obj.t) : int))) :: List.remove_assoc (__str ("head_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  );
  if (idx = (Obj.obj (List.assoc (__str ("tail_idx")) (!ll) : Obj.t) : int)) then (
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) (idx)) in
  ll := ((__str ("tail_idx"), Obj.repr ((Obj.obj (List.assoc (__str ("prev_index")) (!node) : Obj.t) : int))) :: List.remove_assoc (__str ("tail_idx")) (Obj.magic (!ll) : (string * Obj.t) list));
  );
  ignore (remove_node_pointers (ll) (Obj.repr (idx)));
    !__ret
  with Return -> !__ret)

and contains ll value =
  let __ret = ref false in
  (try
  let value = (Obj.magic value : int) in
  __ret := (Obj.magic ((get_node ((Obj.magic ll : (string * Obj.t) list)) (Obj.repr (value)) <> -(1))) : bool); raise Return
  with Return -> !__ret)

and is_empty ll =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("head_idx")) (ll) : Obj.t) : int) = -(1))) : bool); raise Return
  with Return -> !__ret)

and to_string ll =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let first = ref (true) in
  let current = ref ((Obj.obj (List.assoc (__str ("head_idx")) (ll) : Obj.t) : int)) in
  (try while (!current <> -(1)) do
    try
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (ll) : Obj.t) : (string * Obj.t) list list)) (!current)) in
  let val_ = (string_of_int ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int))) in
  if !first then (
  res := val_;
  first := false;
  ) else (
  res := ((!res ^ " ") ^ val_);
  );
  current := (Obj.obj (List.assoc (__str ("next_index")) (!node) : Obj.t) : int);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and print_list ll =
  let __ret = ref (Obj.magic 0) in
  (try
  let current = ref ((Obj.obj (List.assoc (__str ("head_idx")) (ll) : Obj.t) : int)) in
  (try while (!current <> -(1)) do
    try
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (ll) : Obj.t) : (string * Obj.t) list list)) (!current)) in
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int))));
  current := (Obj.obj (List.assoc (__str ("next_index")) (!node) : Obj.t) : int);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let ll = ref (empty_list ()) in
  print_endline ((string_of_int (get_head_data (!ll))));
  print_endline ((string_of_int (get_tail_data (!ll))));
  print_endline ((string_of_bool (is_empty (!ll))));
  ignore (insert (ll) (Obj.repr (10)));
  print_endline ((string_of_int (get_head_data (!ll))));
  print_endline ((string_of_int (get_tail_data (!ll))));
  ignore (insert_at_position (ll) (Obj.repr (3)) (Obj.repr (20)));
  print_endline ((string_of_int (get_head_data (!ll))));
  print_endline ((string_of_int (get_tail_data (!ll))));
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list)) in
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (1000)); (__str ("prev_index"), Obj.repr (-(1))); (__str ("next_index"), Obj.repr (-(1)))]) : (string * Obj.t) list)]);
  let idx_head = (List.length (!nodes) - 1) in
  ll := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!ll) : (string * Obj.t) list));
  ignore (set_head (ll) (Obj.repr (idx_head)));
  nodes := (Obj.obj (List.assoc (__str ("nodes")) (!ll) : Obj.t) : (string * Obj.t) list list);
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (2000)); (__str ("prev_index"), Obj.repr (-(1))); (__str ("next_index"), Obj.repr (-(1)))]) : (string * Obj.t) list)]);
  let idx_tail = (List.length (!nodes) - 1) in
  ll := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!ll) : (string * Obj.t) list));
  ignore (set_tail (ll) (Obj.repr (idx_tail)));
  ignore (print_list (!ll));
  print_endline ((string_of_bool (is_empty (!ll))));
  ignore (print_list (!ll));
  print_endline ((string_of_bool (contains (!ll) (Obj.repr (10)))));
  ignore (delete_value (ll) (Obj.repr (10)));
  print_endline ((string_of_bool (contains (!ll) (Obj.repr (10)))));
  ignore (delete_value (ll) (Obj.repr (2000)));
  print_endline ((string_of_int (get_tail_data (!ll))));
  ignore (delete_value (ll) (Obj.repr (1000)));
  print_endline ((string_of_int (get_tail_data (!ll))));
  print_endline ((string_of_int (get_head_data (!ll))));
  ignore (print_list (!ll));
  ignore (delete_value (ll) (Obj.repr (20)));
  ignore (print_list (!ll));
  let i = ref (1) in
  (try while (!i < 10) do
    try
  ignore (insert (ll) (Obj.repr (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (print_list (!ll));
  let ll2 = ref (empty_list ()) in
  ignore (insert_at_position (ll2) (Obj.repr (1)) (Obj.repr (10)));
  print_endline ((to_string (!ll2)));
  ignore (insert_at_position (ll2) (Obj.repr (2)) (Obj.repr (20)));
  print_endline ((to_string (!ll2)));
  ignore (insert_at_position (ll2) (Obj.repr (1)) (Obj.repr (30)));
  print_endline ((to_string (!ll2)));
  ignore (insert_at_position (ll2) (Obj.repr (3)) (Obj.repr (40)));
  print_endline ((to_string (!ll2)));
  ignore (insert_at_position (ll2) (Obj.repr (5)) (Obj.repr (50)));
  print_endline ((to_string (!ll2)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()