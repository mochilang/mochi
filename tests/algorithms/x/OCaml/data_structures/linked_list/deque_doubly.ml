(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec new_deque () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let nodes = ref (([] : ((string * Obj.t) list) list)) in
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr ("")); (__str ("prev"), Obj.repr (-(1))); (__str ("next"), Obj.repr (1))]) : (string * Obj.t) list)]);
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr ("")); (__str ("prev"), Obj.repr (0)); (__str ("next"), Obj.repr (-(1)))]) : (string * Obj.t) list)]);
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr (!nodes)); (__str ("header"), Obj.repr (0)); (__str ("trailer"), Obj.repr (1)); (__str ("size"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and is_empty d =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("size")) (d) : Obj.t) : int) = 0)) : bool); raise Return
  with Return -> !__ret)

and front d =
  let __ret = ref "" in
  (try
  if is_empty ((Obj.magic d : (string * Obj.t) list)) then (
  (failwith ("List is empty"));
  );
  let head = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("header")) (d) : Obj.t) : int))) in
  let idx = (Obj.obj (List.assoc (__str ("next")) (!head) : Obj.t) : int) in
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) (idx)) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : string)) : string); raise Return
  with Return -> !__ret)

and back d =
  let __ret = ref "" in
  (try
  if is_empty ((Obj.magic d : (string * Obj.t) list)) then (
  (failwith ("List is empty"));
  );
  let tail = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("trailer")) (d) : Obj.t) : int))) in
  let idx = (Obj.obj (List.assoc (__str ("prev")) (!tail) : Obj.t) : int) in
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) (idx)) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : string)) : string); raise Return
  with Return -> !__ret)

and insert d pred value succ =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let pred = (Obj.magic pred : int) in
  let succ = (Obj.magic succ : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!d) : Obj.t) : (string * Obj.t) list list)) in
  let new_idx = List.length (!nodes) in
  nodes := (List.append (!nodes) [(Obj.magic ([(__str ("data"), Obj.repr (value)); (__str ("prev"), Obj.repr (pred)); (__str ("next"), Obj.repr (succ))]) : (string * Obj.t) list)]);
  let pred_node = ref (List.nth (!nodes) (pred)) in
  pred_node := ((__str ("next"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("next")) (Obj.magic (!pred_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = pred then !pred_node else __x) (!nodes));
  let succ_node = ref (List.nth (!nodes) (succ)) in
  succ_node := ((__str ("prev"), Obj.repr (new_idx)) :: List.remove_assoc (__str ("prev")) (Obj.magic (!succ_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = succ then !succ_node else __x) (!nodes));
  d := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!d) : (string * Obj.t) list));
  d := ((__str ("size"), Obj.repr (((Obj.obj (List.assoc (__str ("size")) (!d) : Obj.t) : int) + 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!d) : (string * Obj.t) list));
  __ret := (Obj.magic (!d) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete d idx =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let idx = (Obj.magic idx : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (!d) : Obj.t) : (string * Obj.t) list list)) in
  let node = ref (List.nth (!nodes) (idx)) in
  let pred = (Obj.obj (List.assoc (__str ("prev")) (!node) : Obj.t) : int) in
  let succ = (Obj.obj (List.assoc (__str ("next")) (!node) : Obj.t) : int) in
  let pred_node = ref (List.nth (!nodes) (pred)) in
  pred_node := ((__str ("next"), Obj.repr (succ)) :: List.remove_assoc (__str ("next")) (Obj.magic (!pred_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = pred then !pred_node else __x) (!nodes));
  let succ_node = ref (List.nth (!nodes) (succ)) in
  succ_node := ((__str ("prev"), Obj.repr (pred)) :: List.remove_assoc (__str ("prev")) (Obj.magic (!succ_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = succ then !succ_node else __x) (!nodes));
  let val_ = (Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : string) in
  d := ((__str ("nodes"), Obj.repr (!nodes)) :: List.remove_assoc (__str ("nodes")) (Obj.magic (!d) : (string * Obj.t) list));
  d := ((__str ("size"), Obj.repr (((Obj.obj (List.assoc (__str ("size")) (!d) : Obj.t) : int) - 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!d) : (string * Obj.t) list));
  __ret := (Obj.magic ([(__str ("deque"), Obj.repr (!d)); (__str ("value"), Obj.repr (val_))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_first d value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let head = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("header")) (d) : Obj.t) : int))) in
  let succ = (Obj.obj (List.assoc (__str ("next")) (!head) : Obj.t) : int) in
  __ret := (Obj.magic (insert (ref (d)) (Obj.repr ((Obj.obj (List.assoc (__str ("header")) (d) : Obj.t) : int))) (value) (Obj.repr (succ))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_last d value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let tail = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("trailer")) (d) : Obj.t) : int))) in
  let pred = (Obj.obj (List.assoc (__str ("prev")) (!tail) : Obj.t) : int) in
  __ret := (Obj.magic (insert (ref (d)) (Obj.repr (pred)) (value) (Obj.repr ((Obj.obj (List.assoc (__str ("trailer")) (d) : Obj.t) : int)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_first d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if is_empty ((Obj.magic d : (string * Obj.t) list)) then (
  (failwith ("remove_first from empty list"));
  );
  let head = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("header")) (d) : Obj.t) : int))) in
  let idx = (Obj.obj (List.assoc (__str ("next")) (!head) : Obj.t) : int) in
  __ret := (Obj.magic (delete (ref (d)) (Obj.repr (idx))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_last d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if is_empty ((Obj.magic d : (string * Obj.t) list)) then (
  (failwith ("remove_first from empty list"));
  );
  let tail = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (d) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("trailer")) (d) : Obj.t) : int))) in
  let idx = (Obj.obj (List.assoc (__str ("prev")) (!tail) : Obj.t) : int) in
  __ret := (Obj.magic (delete (ref (d)) (Obj.repr (idx))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let d = ref (new_deque ()) in
  d := add_first (!d) ("A");
  print_endline ((front (!d)));
  d := add_last (!d) ("B");
  print_endline ((back (!d)));
  let r = ref (remove_first (!d)) in
  d := (Obj.obj (List.assoc (__str ("deque")) (!r) : Obj.t) : ( string * Obj.t ) list);
  print_endline (__show (Obj.obj (List.assoc (__str ("value")) (!r) : Obj.t) : string));
  r := remove_last (!d);
  d := (Obj.obj (List.assoc (__str ("deque")) (!r) : Obj.t) : ( string * Obj.t ) list);
  print_endline (__show (Obj.obj (List.assoc (__str ("value")) (!r) : Obj.t) : string));
  print_endline ((string_of_bool (is_empty (!d))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()