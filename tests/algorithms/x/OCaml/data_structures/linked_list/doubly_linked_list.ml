(* Generated by Mochi transpiler v0.10.72 on 2025-08-24 22:16 +0700 *)


let rec __is_list v =
  let open Obj in
  let rec loop x =
    let r = repr x in
    if is_int r then (magic r : int) = 0
    else
      match tag r with
      | 0 -> loop (field r 1)
      | _ -> false
  in
  loop v

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec empty_list () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str (Obj.repr ("data")), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and length list =
  let __ret = ref 0 in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  __ret := (Obj.magic (List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []))) : int); raise Return
  with Return -> !__ret)

and is_empty list =
  let __ret = ref false in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  __ret := (Obj.magic ((List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> [])) = 0)) : bool); raise Return
  with Return -> !__ret)

and to_string list =
  let __ret = ref "" in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  if (List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> [])) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let s = ref ((string_of_int (Obj.magic ((let __l = (match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int))) in
  let i = ref (1) in
  (try while (!i < List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []))) do
    try
  s := ((!s ^ "->") ^ (string_of_int (Obj.magic ((let __l = (match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and insert_nth list index value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  let index = (Obj.magic index : int) in
  let value = (Obj.magic value : int) in
  if ((index < 0) || (index > List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> [])))) then (
  (failwith ("index out of range"));
  );
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < index) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = (match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic ((List.append (!res) [(Obj.magic (value) : int)])) : int list);
  (try while (!i < List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []))) do
    try
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = (match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str (Obj.repr ("data")), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insert_head list value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  let value = (Obj.magic value : int) in
  __ret := (Obj.magic (insert_nth ((Obj.magic (list) : (string * Obj.t) list)) (Obj.repr (0)) (Obj.repr (value))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insert_tail list value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  let value = (Obj.magic value : int) in
  __ret := (Obj.magic (insert_nth ((Obj.magic (list) : (string * Obj.t) list)) (Obj.repr (List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> [])))) (Obj.repr (value))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete_nth list index =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  let index = (Obj.magic index : int) in
  if ((index < 0) || (index >= List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> [])))) then (
  (failwith ("index out of range"));
  );
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  let removed = ref (0) in
  (try while (!i < List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []))) do
    try
  if (!i = index) then (
  removed := (let __l = (match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0);
  ) else (
  res := (Obj.magic ((List.append (!res) [(Obj.magic ((let __l = (match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)])) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str (Obj.repr ("list")), Obj.repr ([(__str (Obj.repr ("data")), Obj.repr (!res))])); (__str (Obj.repr ("value")), Obj.repr (!removed))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete_head list =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  __ret := (Obj.magic (delete_nth ((Obj.magic (list) : (string * Obj.t) list)) (Obj.repr (0))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete_tail list =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  __ret := (Obj.magic (delete_nth ((Obj.magic (list) : (string * Obj.t) list)) (Obj.repr ((List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> [])) - 1)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete_value list value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let list = (Obj.magic list : (string * Obj.t) list) in
  let value = (Obj.magic value : int) in
  let idx = ref (0) in
  let found = ref (false) in
  (try while (!idx < List.length ((match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []))) do
    try
  if ((let __l = (match List.assoc_opt (__str (Obj.repr ("data"))) (list) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) in let __i = !idx in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = value) then (
  found := true;
  raise Break;
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  (failwith ("value not found"));
  );
  __ret := (Obj.magic (delete_nth ((Obj.magic (list) : (string * Obj.t) list)) (Obj.repr (!idx))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let dll = ref (empty_list ()) in
  dll := insert_tail (!dll) (Obj.repr (1));
  dll := insert_tail (!dll) (Obj.repr (2));
  dll := insert_tail (!dll) (Obj.repr (3));
  print_endline ((to_string (!dll)));
  dll := insert_head (!dll) (Obj.repr (0));
  print_endline ((to_string (!dll)));
  dll := insert_nth (!dll) (Obj.repr (2)) (Obj.repr (9));
  print_endline ((to_string (!dll)));
  let res = ref (delete_nth (!dll) (Obj.repr (2))) in
  dll := (match List.assoc_opt (__str (Obj.repr ("list"))) (!res) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  print_endline (string_of_int (match List.assoc_opt (__str (Obj.repr ("value"))) (!res) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0));
  print_endline ((to_string (!dll)));
  res := delete_tail (!dll);
  dll := (match List.assoc_opt (__str (Obj.repr ("list"))) (!res) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  print_endline (string_of_int (match List.assoc_opt (__str (Obj.repr ("value"))) (!res) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0));
  print_endline ((to_string (!dll)));
  res := delete_value (!dll) (Obj.repr (1));
  dll := (match List.assoc_opt (__str (Obj.repr ("list"))) (!res) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []);
  print_endline (string_of_int (match List.assoc_opt (__str (Obj.repr ("value"))) (!res) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0));
  print_endline ((to_string (!dll)));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
