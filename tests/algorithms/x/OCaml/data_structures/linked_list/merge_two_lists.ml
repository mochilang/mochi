(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_list nums =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  arr := (List.append (!arr) [(Obj.magic (List.nth (nums) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < List.length (!arr)) do
    try
  let k = ref ((!j + 1)) in
  (try while (!k < List.length (!arr)) do
    try
  if (List.nth (!arr) (!k) < List.nth (!arr) (!j)) then (
  let tmp = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) (!k) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !k then tmp else __x) (!arr));
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and make_sorted_linked_list ints =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("values"), Obj.repr (sort_list (ints)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and len_sll sll =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (List.length ((Obj.obj (List.assoc (__str ("values")) (sll) : Obj.t) : int list))) : int); raise Return
  with Return -> !__ret)

and str_sll sll =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("values")) (sll) : Obj.t) : int list))) do
    try
  res := (!res ^ (string_of_int (List.nth ((Obj.obj (List.assoc (__str ("values")) (sll) : Obj.t) : int list)) (!i))));
  if ((!i + 1) < List.length ((Obj.obj (List.assoc (__str ("values")) (sll) : Obj.t) : int list))) then (
  res := (!res ^ " -> ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and merge_lists a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let combined = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("values")) (a) : Obj.t) : int list))) do
    try
  combined := (List.append (!combined) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("values")) (a) : Obj.t) : int list)) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("values")) (b) : Obj.t) : int list))) do
    try
  combined := (List.append (!combined) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("values")) (b) : Obj.t) : int list)) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (make_sorted_linked_list (!combined)) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let test_data_odd = ref ([3; 9; -(11); 0; 7; 5; 1; -(1)]) in
  let test_data_even = ref ([4; 6; 2; 0; 8; 10; 3; -(2)]) in
  let sll_one = make_sorted_linked_list (!test_data_odd) in
  let sll_two = make_sorted_linked_list (!test_data_even) in
  let merged = merge_lists (sll_one) (sll_two) in
  print_endline ((string_of_int (len_sll (merged))));
  print_endline ((str_sll (merged)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()