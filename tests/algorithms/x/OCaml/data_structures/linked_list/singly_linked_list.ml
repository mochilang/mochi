(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec empty_list () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and length list =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list))) : int); raise Return
  with Return -> !__ret)

and is_empty list =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) = 0)) : bool); raise Return
  with Return -> !__ret)

and to_string list =
  let __ret = ref "" in
  (try
  if (List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let s = ref ((string_of_int (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (0)))) in
  let i = ref (1) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list))) do
    try
  s := ((!s ^ " -> ") ^ (string_of_int (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and insert_nth list index value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let value = (Obj.magic value : int) in
  if ((index < 0) || (index > List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)))) then (
  (failwith ("index out of range"));
  );
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < index) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (value) : int)]);
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list))) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insert_head list value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let value = (Obj.magic value : int) in
  __ret := (Obj.magic (insert_nth ((Obj.magic list : (string * Obj.t) list)) (Obj.repr (0)) (Obj.repr (value))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insert_tail list value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let value = (Obj.magic value : int) in
  __ret := (Obj.magic (insert_nth ((Obj.magic list : (string * Obj.t) list)) (Obj.repr (List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)))) (Obj.repr (value))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete_nth list index =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  if ((index < 0) || (index >= List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)))) then (
  (failwith ("index out of range"));
  );
  let res = ref (([] : (int) list)) in
  let val_ = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list))) do
    try
  if (!i = index) then (
  val_ := List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (!i);
  ) else (
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (!i)) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("list"), Obj.repr ([(__str ("data"), Obj.repr (!res))])); (__str ("value"), Obj.repr (!val_))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete_head list =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (delete_nth ((Obj.magic list : (string * Obj.t) list)) (Obj.repr (0))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and delete_tail list =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (delete_nth ((Obj.magic list : (string * Obj.t) list)) (Obj.repr ((List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) - 1)))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get_item list index =
  let __ret = ref 0 in
  (try
  let index = (Obj.magic index : int) in
  if ((index < 0) || (index >= List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)))) then (
  (failwith ("index out of range"));
  );
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (index)) : int); raise Return
  with Return -> !__ret)

and set_item list index value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let value = (Obj.magic value : int) in
  if ((index < 0) || (index >= List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)))) then (
  (failwith ("index out of range"));
  );
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list))) do
    try
  if (!i = index) then (
  res := (List.append (!res) [(Obj.magic (value) : int)]);
  ) else (
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (!i)) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and reverse_list list =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let res = ref (([] : (int) list)) in
  let i = ref ((List.length ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) - 1)) in
  (try while (!i >= 0) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (list) : Obj.t) : int list)) (!i)) : int)]);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let lst = ref (empty_list ()) in
  let i = ref (1) in
  (try while (!i <= 5) do
    try
  lst := insert_tail (!lst) (Obj.repr (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((to_string (!lst)));
  lst := insert_head (!lst) (Obj.repr (0));
  print_endline ((to_string (!lst)));
  let del = ref (delete_head (!lst)) in
  lst := (Obj.obj (List.assoc (__str ("list")) (!del) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("value")) (!del) : Obj.t) : int))));
  del := delete_tail (!lst);
  lst := (Obj.obj (List.assoc (__str ("list")) (!del) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("value")) (!del) : Obj.t) : int))));
  del := delete_nth (!lst) (Obj.repr (2));
  lst := (Obj.obj (List.assoc (__str ("list")) (!del) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("value")) (!del) : Obj.t) : int))));
  lst := set_item (!lst) (Obj.repr (1)) (Obj.repr (99));
  print_endline ((string_of_int (get_item (!lst) (Obj.repr (1)))));
  lst := reverse_list (!lst);
  print_endline ((to_string (!lst)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()