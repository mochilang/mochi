(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _nil = (0 - 1)
let _max_level = 6
let _p = 0.5
let seed = ref (1)
let rec random () =
  let __ret = ref 0.0 in
  (try
  seed := ((((!seed * 13) + 7) mod 100 + 100) mod 100);
  __ret := (Obj.magic ((float_of_int (!seed) /. 100.0)) : float); raise Return
  with Return -> !__ret)

and random_level () =
  let __ret = ref 0 in
  (try
  let lvl = ref (1) in
  (try while ((random () < _p) && (!lvl < _max_level)) do
    try
  lvl := (!lvl + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!lvl) : int); raise Return
  with Return -> !__ret)

and empty_forward () =
  let __ret = ref ([] : (int) list) in
  (try
  let f = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < _max_level) do
    try
  f := (List.append (!f) [(Obj.magic (_nil) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!f) : int list); raise Return
  with Return -> !__ret)


let node_keys = ref (([] : (int) list))
let node_vals = ref (([] : (int) list))
let node_forwards = ref (([] : (int list) list))
let level = ref (1)
let rec init () =
  let __ret = ref (Obj.magic 0) in
  (try
  node_keys := [-(1)];
  node_vals := [0];
  node_forwards := [empty_forward ()];
  level := 1;
    !__ret
  with Return -> !__ret)

and insert key value =
  let __ret = ref (Obj.magic 0) in
  (try
  let key = (Obj.magic key : int) in
  let value = (Obj.magic value : int) in
  let update = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < _max_level) do
    try
  update := (List.append (!update) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let x = ref (0) in
  i := (!level - 1);
  (try while (!i >= 0) do
    try
  (try while ((List.nth (List.nth (!node_forwards) (!x)) (!i) <> _nil) && (List.nth (!node_keys) (List.nth (List.nth (!node_forwards) (!x)) (!i)) < key)) do
    try
  x := List.nth (List.nth (!node_forwards) (!x)) (!i);
    with Continue -> ()
  done with Break -> ());
  update := (List.mapi (fun __i __x -> if __i = !i then !x else __x) (!update));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  x := List.nth (List.nth (!node_forwards) (!x)) (0);
  if ((!x <> _nil) && (List.nth (!node_keys) (!x) = key)) then (
  node_vals := (List.mapi (fun __i __x -> if __i = !x then value else __x) (!node_vals));
  __ret := (); raise Return
  );
  let lvl = random_level () in
  if (lvl > !level) then (
  let j = ref (!level) in
  (try while (!j < lvl) do
    try
  update := (List.mapi (fun __i __x -> if __i = !j then 0 else __x) (!update));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  level := lvl;
  );
  node_keys := (List.append (!node_keys) [(Obj.magic (key) : int)]);
  node_vals := (List.append (!node_vals) [(Obj.magic (value) : int)]);
  let forwards = ref (empty_forward ()) in
  let idx = (List.length (!node_keys) - 1) in
  i := 0;
  (try while (!i < lvl) do
    try
  forwards := (List.mapi (fun __i __x -> if __i = !i then List.nth (List.nth (!node_forwards) (List.nth (!update) (!i))) (!i) else __x) (!forwards));
  node_forwards := (List.mapi (fun __i __x -> if __i = List.nth (!update) (!i) then (List.mapi (fun __i __x -> if __i = !i then idx else __x) (List.nth (!node_forwards) (List.nth (!update) (!i)))) else __x) (!node_forwards));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  node_forwards := (List.append (!node_forwards) [(Obj.magic (!forwards) : int list)]);
    !__ret
  with Return -> !__ret)

and find key =
  let __ret = ref 0 in
  (try
  let key = (Obj.magic key : int) in
  let x = ref (0) in
  let i = ref ((!level - 1)) in
  (try while (!i >= 0) do
    try
  (try while ((List.nth (List.nth (!node_forwards) (!x)) (!i) <> _nil) && (List.nth (!node_keys) (List.nth (List.nth (!node_forwards) (!x)) (!i)) < key)) do
    try
  x := List.nth (List.nth (!node_forwards) (!x)) (!i);
    with Continue -> ()
  done with Break -> ());
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  x := List.nth (List.nth (!node_forwards) (!x)) (0);
  if ((!x <> _nil) && (List.nth (!node_keys) (!x) = key)) then (
  __ret := (Obj.magic (List.nth (!node_vals) (!x)) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and delete key =
  let __ret = ref (Obj.magic 0) in
  (try
  let key = (Obj.magic key : int) in
  let update = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < _max_level) do
    try
  update := (List.append (!update) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let x = ref (0) in
  i := (!level - 1);
  (try while (!i >= 0) do
    try
  (try while ((List.nth (List.nth (!node_forwards) (!x)) (!i) <> _nil) && (List.nth (!node_keys) (List.nth (List.nth (!node_forwards) (!x)) (!i)) < key)) do
    try
  x := List.nth (List.nth (!node_forwards) (!x)) (!i);
    with Continue -> ()
  done with Break -> ());
  update := (List.mapi (fun __i __x -> if __i = !i then !x else __x) (!update));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  x := List.nth (List.nth (!node_forwards) (!x)) (0);
  if ((!x = _nil) || (List.nth (!node_keys) (!x) <> key)) then (
  __ret := (); raise Return
  );
  i := 0;
  (try while (!i < !level) do
    try
  if (List.nth (List.nth (!node_forwards) (List.nth (!update) (!i))) (!i) = !x) then (
  node_forwards := (List.mapi (fun __i __x -> if __i = List.nth (!update) (!i) then (List.mapi (fun __i __x -> if __i = !i then List.nth (List.nth (!node_forwards) (!x)) (!i) else __x) (List.nth (!node_forwards) (List.nth (!update) (!i)))) else __x) (!node_forwards));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while ((!level > 1) && (List.nth (List.nth (!node_forwards) (0)) ((!level - 1)) = _nil)) do
    try
  level := (!level - 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and to_string () =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let x = ref (List.nth (List.nth (!node_forwards) (0)) (0)) in
  (try while (!x <> _nil) do
    try
  if (!s <> "") then (
  s := (!s ^ " -> ");
  );
  s := (((!s ^ (string_of_int (List.nth (!node_keys) (!x)))) ^ ":") ^ (string_of_int (List.nth (!node_vals) (!x))));
  x := List.nth (List.nth (!node_forwards) (!x)) (0);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (init ());
  ignore (insert (Obj.repr (2)) (Obj.repr (2)));
  ignore (insert (Obj.repr (4)) (Obj.repr (4)));
  ignore (insert (Obj.repr (6)) (Obj.repr (4)));
  ignore (insert (Obj.repr (4)) (Obj.repr (5)));
  ignore (insert (Obj.repr (8)) (Obj.repr (4)));
  ignore (insert (Obj.repr (9)) (Obj.repr (4)));
  ignore (delete (Obj.repr (4)));
  print_endline ((to_string ()));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()