(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_queue items =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("stack1"), Obj.repr (items)); (__str ("stack2"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and len_queue q =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic ((List.length ((Obj.obj (List.assoc (__str ("stack1")) (q) : Obj.t) : int list)) + List.length ((Obj.obj (List.assoc (__str ("stack2")) (q) : Obj.t) : int list)))) : int); raise Return
  with Return -> !__ret)

and str_queue q =
  let __ret = ref "" in
  (try
  let items = ref (([] : (int) list)) in
  let i = ref ((List.length ((Obj.obj (List.assoc (__str ("stack2")) (q) : Obj.t) : int list)) - 1)) in
  (try while (!i >= 0) do
    try
  items := (List.append (!items) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("stack2")) (q) : Obj.t) : int list)) (!i)) : int)]);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < List.length ((Obj.obj (List.assoc (__str ("stack1")) (q) : Obj.t) : int list))) do
    try
  items := (List.append (!items) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("stack1")) (q) : Obj.t) : int list)) (!j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let s = ref ("Queue((") in
  let k = ref (0) in
  (try while (!k < List.length (!items)) do
    try
  s := (!s ^ (string_of_int (List.nth (!items) (!k))));
  if (!k < (List.length (!items) - 1)) then (
  s := (!s ^ ", ");
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "))");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and put q item =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let item = (Obj.magic item : int) in
  let s1 = ref ((Obj.obj (List.assoc (__str ("stack1")) (q) : Obj.t) : int list)) in
  s1 := (List.append (!s1) [(Obj.magic (item) : int)]);
  __ret := (Obj.magic ([(__str ("stack1"), Obj.repr (!s1)); (__str ("stack2"), Obj.repr ((Obj.obj (List.assoc (__str ("stack2")) (q) : Obj.t) : int list)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let s1 = ref ((Obj.obj (List.assoc (__str ("stack1")) (q) : Obj.t) : int list)) in
  let s2 = ref ((Obj.obj (List.assoc (__str ("stack2")) (q) : Obj.t) : int list)) in
  if (List.length (!s2) = 0) then (
  (try while (List.length (!s1) > 0) do
    try
  let idx = (List.length (!s1) - 1) in
  let v = List.nth (!s1) (idx) in
  let new_s1 = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < idx) do
    try
  new_s1 := (List.append (!new_s1) [(Obj.magic (List.nth (!s1) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s1 := !new_s1;
  s2 := (List.append (!s2) [(Obj.magic (v) : int)]);
    with Continue -> ()
  done with Break -> ());
  );
  if (List.length (!s2) = 0) then (
  (failwith ("Queue is empty"));
  );
  let idx2 = (List.length (!s2) - 1) in
  let value = List.nth (!s2) (idx2) in
  let new_s2 = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < idx2) do
    try
  new_s2 := (List.append (!new_s2) [(Obj.magic (List.nth (!s2) (!j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  s2 := !new_s2;
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr ([(__str ("stack1"), Obj.repr (!s1)); (__str ("stack2"), Obj.repr (!s2))])); (__str ("value"), Obj.repr (value))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let q = ref (new_queue ([10; 20; 30]))
let () =
  let mem_start = _mem () in
  let start = _now () in
  let r1 = get (!q) in
  q := (Obj.obj (List.assoc (__str ("queue")) (r1) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (r1) : Obj.t) : int));
  q := put (!q) (Obj.repr (40));
  let r2 = get (!q) in
  q := (Obj.obj (List.assoc (__str ("queue")) (r2) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (r2) : Obj.t) : int));
  let r3 = get (!q) in
  q := (Obj.obj (List.assoc (__str ("queue")) (r3) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (r3) : Obj.t) : int));
  print_endline (string_of_int (len_queue (!q)));
  let r4 = get (!q) in
  q := (Obj.obj (List.assoc (__str ("queue")) (r4) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (r4) : Obj.t) : int));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()