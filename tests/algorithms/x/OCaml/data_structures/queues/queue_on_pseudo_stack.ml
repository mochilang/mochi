(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec empty_queue () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("stack"), Obj.repr ([])); (__str ("length"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and put q item =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let item = (Obj.magic item : int) in
  let s = ref ((List.append ((Obj.obj (List.assoc (__str ("stack")) (q) : Obj.t) : int list)) [(Obj.magic (item) : int)])) in
  __ret := (Obj.magic ([(__str ("stack"), Obj.repr (!s)); (__str ("length"), Obj.repr (((Obj.obj (List.assoc (__str ("length")) (q) : Obj.t) : int) + 1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and drop_first xs =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let i = ref (1) in
  (try while (!i < List.length (xs)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and drop_last xs =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (List.length (xs) - 1)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and rotate q rotation =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let rotation = (Obj.magic rotation : int) in
  let s = ref ((Obj.obj (List.assoc (__str ("stack")) (q) : Obj.t) : int list)) in
  let i = ref (0) in
  (try while ((!i < rotation) && (List.length (!s) > 0)) do
    try
  let temp = List.nth (!s) (0) in
  s := drop_first (!s);
  s := (List.append (!s) [(Obj.magic (temp) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("stack"), Obj.repr (!s)); (__str ("length"), Obj.repr ((Obj.obj (List.assoc (__str ("length")) (q) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if ((Obj.obj (List.assoc (__str ("length")) (q) : Obj.t) : int) = 0) then (
  (failwith ("queue empty"));
  );
  let q1 = ref (rotate ((Obj.magic q : (string * Obj.t) list)) (Obj.repr (1))) in
  let v = List.nth ((Obj.obj (List.assoc (__str ("stack")) (!q1) : Obj.t) : int list)) (((Obj.obj (List.assoc (__str ("length")) (!q1) : Obj.t) : int) - 1)) in
  let s = ref (drop_last ((Obj.obj (List.assoc (__str ("stack")) (!q1) : Obj.t) : int list))) in
  let q2 = ref ([(__str ("stack"), Obj.repr (!s)); (__str ("length"), Obj.repr ((Obj.obj (List.assoc (__str ("length")) (!q1) : Obj.t) : int)))]) in
  q2 := rotate (!q2) (Obj.repr (((Obj.obj (List.assoc (__str ("length")) (!q2) : Obj.t) : int) - 1)));
  q2 := [(__str ("stack"), Obj.repr ((Obj.obj (List.assoc (__str ("stack")) (!q2) : Obj.t) : int list))); (__str ("length"), Obj.repr (((Obj.obj (List.assoc (__str ("length")) (!q2) : Obj.t) : int) - 1)))];
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!q2)); (__str ("value"), Obj.repr (v))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and front q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let r = get ((Obj.magic q : (string * Obj.t) list)) in
  let q2 = ref (put ((Obj.magic (Obj.obj (List.assoc (__str ("queue")) (r) : Obj.t) : ( string * Obj.t ) list) : (string * Obj.t) list)) (Obj.repr ((Obj.obj (List.assoc (__str ("value")) (r) : Obj.t) : int)))) in
  q2 := rotate (!q2) (Obj.repr (((Obj.obj (List.assoc (__str ("length")) (!q2) : Obj.t) : int) - 1)));
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!q2)); (__str ("value"), Obj.repr ((Obj.obj (List.assoc (__str ("value")) (r) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and size q =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("length")) (q) : Obj.t) : int)) : int); raise Return
  with Return -> !__ret)

and to_string q =
  let __ret = ref "" in
  (try
  let s = ref ("<") in
  if ((Obj.obj (List.assoc (__str ("length")) (q) : Obj.t) : int) > 0) then (
  s := (!s ^ (string_of_int (List.nth ((Obj.obj (List.assoc (__str ("stack")) (q) : Obj.t) : int list)) (0))));
  let i = ref (1) in
  (try while (!i < (Obj.obj (List.assoc (__str ("length")) (q) : Obj.t) : int)) do
    try
  s := ((!s ^ ", ") ^ (string_of_int (List.nth ((Obj.obj (List.assoc (__str ("stack")) (q) : Obj.t) : int list)) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  s := (!s ^ ">");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let q = ref (empty_queue ()) in
  q := put (!q) (Obj.repr (1));
  q := put (!q) (Obj.repr (2));
  q := put (!q) (Obj.repr (3));
  print_endline ((to_string (!q)));
  let g = get (!q) in
  q := (Obj.obj (List.assoc (__str ("queue")) (g) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (g) : Obj.t) : int));
  print_endline ((to_string (!q)));
  let f = front (!q) in
  q := (Obj.obj (List.assoc (__str ("queue")) (f) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (f) : Obj.t) : int));
  print_endline ((to_string (!q)));
  print_endline (string_of_int (size (!q)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()