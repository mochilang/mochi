(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec panic msg =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (msg);
    !__ret
  with Return -> !__ret)

and fpq_new () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("queues"), Obj.repr ([[]; []; []]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fpq_enqueue fpq priority data =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let priority = (Obj.magic priority : int) in
  let data = (Obj.magic data : int) in
  if ((priority < 0) || (priority >= List.length ((Obj.obj (List.assoc (__str ("queues")) (!fpq) : Obj.t) : int list list)))) then (
  (failwith ("Valid priorities are 0, 1, and 2"));
  __ret := (Obj.magic (!fpq) : (string * Obj.t) list); raise Return
  );
  if (List.length (List.nth ((Obj.obj (List.assoc (__str ("queues")) (!fpq) : Obj.t) : int list list)) (priority)) >= 100) then (
  (failwith ("Maximum queue size is 100"));
  __ret := (Obj.magic (!fpq) : (string * Obj.t) list); raise Return
  );
  let qs = ref ((Obj.obj (List.assoc (__str ("queues")) (!fpq) : Obj.t) : int list list)) in
  qs := (List.mapi (fun __i __x -> if __i = priority then (List.append (List.nth (!qs) (priority)) [(Obj.magic (data) : int)]) else __x) (!qs));
  fpq := ((__str ("queues"), Obj.repr (!qs)) :: List.remove_assoc (__str ("queues")) (Obj.magic (!fpq) : (string * Obj.t) list));
  __ret := (Obj.magic (!fpq) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fpq_dequeue fpq =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let qs = ref ((Obj.obj (List.assoc (__str ("queues")) (!fpq) : Obj.t) : int list list)) in
  let i = ref (0) in
  (try while (!i < List.length (!qs)) do
    try
  let q = ref (List.nth (!qs) (!i)) in
  if (List.length (!q) > 0) then (
  let val_ = List.nth (!q) (0) in
  let new_q = ref (([] : (int) list)) in
  let j = ref (1) in
  (try while (!j < List.length (!q)) do
    try
  new_q := (List.append (!new_q) [(Obj.magic (List.nth (!q) (!j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  qs := (List.mapi (fun __i __x -> if __i = !i then !new_q else __x) (!qs));
  fpq := ((__str ("queues"), Obj.repr (!qs)) :: List.remove_assoc (__str ("queues")) (Obj.magic (!fpq) : (string * Obj.t) list));
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!fpq)); (__str ("value"), Obj.repr (val_))]) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (failwith ("All queues are empty"));
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!fpq)); (__str ("value"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fpq_to_string fpq =
  let __ret = ref "" in
  (try
  let lines = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("queues")) (fpq) : Obj.t) : int list list))) do
    try
  let q_str = ref ("[") in
  let q = ref (List.nth ((Obj.obj (List.assoc (__str ("queues")) (fpq) : Obj.t) : int list list)) (!i)) in
  let j = ref (0) in
  (try while (!j < List.length (!q)) do
    try
  if (!j > 0) then (
  q_str := (!q_str ^ ", ");
  );
  q_str := (!q_str ^ (string_of_int (List.nth (!q) (!j))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  q_str := (!q_str ^ "]");
  lines := (List.append (!lines) [(Obj.magic (((("Priority " ^ (string_of_int (!i))) ^ ": ") ^ !q_str)) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  i := 0;
  (try while (!i < List.length (!lines)) do
    try
  if (!i > 0) then (
  res := (!res ^ "\n");
  );
  res := (!res ^ List.nth (!lines) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and epq_new () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and epq_enqueue epq data =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let data = (Obj.magic data : int) in
  if (List.length ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list)) >= 100) then (
  (failwith ("Maximum queue size is 100"));
  __ret := (Obj.magic (!epq) : (string * Obj.t) list); raise Return
  );
  epq := ((__str ("queue"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list)) [(Obj.magic (data) : int)]))) :: List.remove_assoc (__str ("queue")) (Obj.magic (!epq) : (string * Obj.t) list));
  __ret := (Obj.magic (!epq) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and epq_dequeue epq =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if (List.length ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list)) = 0) then (
  (failwith ("The queue is empty"));
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!epq)); (__str ("value"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let min_val = ref (List.nth ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list)) (0)) in
  let idx = ref (0) in
  let i = ref (1) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list))) do
    try
  let v = List.nth ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list)) (!i) in
  if (v < !min_val) then (
  min_val := v;
  idx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let new_q = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list))) do
    try
  if (!i <> !idx) then (
  new_q := (List.append (!new_q) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("queue")) (!epq) : Obj.t) : int list)) (!i)) : int)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  epq := ((__str ("queue"), Obj.repr (!new_q)) :: List.remove_assoc (__str ("queue")) (Obj.magic (!epq) : (string * Obj.t) list));
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!epq)); (__str ("value"), Obj.repr (!min_val))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and epq_to_string epq =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((__str ((Obj.obj (List.assoc (__str ("queue")) (epq) : Obj.t) : int list)))) : string); raise Return
  with Return -> !__ret)

and fixed_priority_queue () =
  let __ret = ref (Obj.magic 0) in
  (try
  let fpq = ref (fpq_new ()) in
  fpq := fpq_enqueue (fpq) (Obj.repr (0)) (Obj.repr (10));
  fpq := fpq_enqueue (fpq) (Obj.repr (1)) (Obj.repr (70));
  fpq := fpq_enqueue (fpq) (Obj.repr (0)) (Obj.repr (100));
  fpq := fpq_enqueue (fpq) (Obj.repr (2)) (Obj.repr (1));
  fpq := fpq_enqueue (fpq) (Obj.repr (2)) (Obj.repr (5));
  fpq := fpq_enqueue (fpq) (Obj.repr (1)) (Obj.repr (7));
  fpq := fpq_enqueue (fpq) (Obj.repr (2)) (Obj.repr (4));
  fpq := fpq_enqueue (fpq) (Obj.repr (1)) (Obj.repr (64));
  fpq := fpq_enqueue (fpq) (Obj.repr (0)) (Obj.repr (128));
  print_endline ((fpq_to_string (!fpq)));
  let res = ref (fpq_dequeue (fpq)) in
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  print_endline ((fpq_to_string (!fpq)));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := fpq_dequeue (fpq);
  fpq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
    !__ret
  with Return -> !__ret)

and element_priority_queue () =
  let __ret = ref (Obj.magic 0) in
  (try
  let epq = ref (epq_new ()) in
  epq := epq_enqueue (epq) (Obj.repr (10));
  epq := epq_enqueue (epq) (Obj.repr (70));
  epq := epq_enqueue (epq) (Obj.repr (100));
  epq := epq_enqueue (epq) (Obj.repr (1));
  epq := epq_enqueue (epq) (Obj.repr (5));
  epq := epq_enqueue (epq) (Obj.repr (7));
  epq := epq_enqueue (epq) (Obj.repr (4));
  epq := epq_enqueue (epq) (Obj.repr (64));
  epq := epq_enqueue (epq) (Obj.repr (128));
  print_endline ((epq_to_string (!epq)));
  let res = ref (epq_dequeue (epq)) in
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  print_endline ((epq_to_string (!epq)));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
  res := epq_dequeue (epq);
  epq := (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : int));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (fixed_priority_queue ());
  ignore (element_priority_queue ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()