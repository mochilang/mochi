(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_queue capacity =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let capacity = (Obj.magic capacity : int) in
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < capacity) do
    try
  arr := (List.append (!arr) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!arr)); (__str ("front"), Obj.repr (0)); (__str ("rear"), Obj.repr (0)); (__str ("size"), Obj.repr (0)); (__str ("capacity"), Obj.repr (capacity))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and length q =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("size")) (q) : Obj.t) : int)) : int); raise Return
  with Return -> !__ret)

and is_empty q =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("size")) (q) : Obj.t) : int) = 0)) : bool); raise Return
  with Return -> !__ret)

and front q =
  let __ret = ref 0 in
  (try
  if is_empty ((Obj.magic q : (string * Obj.t) list)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("data")) (q) : Obj.t) : int list)) ((Obj.obj (List.assoc (__str ("front")) (q) : Obj.t) : int))) : int); raise Return
  with Return -> !__ret)

and enqueue q value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let value = (Obj.magic value : int) in
  if ((Obj.obj (List.assoc (__str ("size")) (!q) : Obj.t) : int) >= (Obj.obj (List.assoc (__str ("capacity")) (!q) : Obj.t) : int)) then (
  (failwith ("QUEUE IS FULL"));
  );
  let arr = ref ((Obj.obj (List.assoc (__str ("data")) (!q) : Obj.t) : int list)) in
  arr := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("rear")) (!q) : Obj.t) : int) then value else __x) (!arr));
  q := ((__str ("data"), Obj.repr (!arr)) :: List.remove_assoc (__str ("data")) (Obj.magic (!q) : (string * Obj.t) list));
  q := ((__str ("rear"), Obj.repr (((((Obj.obj (List.assoc (__str ("rear")) (!q) : Obj.t) : int) + 1) mod (Obj.obj (List.assoc (__str ("capacity")) (!q) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("capacity")) (!q) : Obj.t) : int)) mod (Obj.obj (List.assoc (__str ("capacity")) (!q) : Obj.t) : int)))) :: List.remove_assoc (__str ("rear")) (Obj.magic (!q) : (string * Obj.t) list));
  q := ((__str ("size"), Obj.repr (((Obj.obj (List.assoc (__str ("size")) (!q) : Obj.t) : int) + 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!q) : (string * Obj.t) list));
  __ret := (Obj.magic (!q) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dequeue q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if ((Obj.obj (List.assoc (__str ("size")) (!q) : Obj.t) : int) = 0) then (
  (failwith ("UNDERFLOW"));
  );
  let value = List.nth ((Obj.obj (List.assoc (__str ("data")) (!q) : Obj.t) : int list)) ((Obj.obj (List.assoc (__str ("front")) (!q) : Obj.t) : int)) in
  let arr2 = ref ((Obj.obj (List.assoc (__str ("data")) (!q) : Obj.t) : int list)) in
  arr2 := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("front")) (!q) : Obj.t) : int) then 0 else __x) (!arr2));
  q := ((__str ("data"), Obj.repr (!arr2)) :: List.remove_assoc (__str ("data")) (Obj.magic (!q) : (string * Obj.t) list));
  q := ((__str ("front"), Obj.repr (((((Obj.obj (List.assoc (__str ("front")) (!q) : Obj.t) : int) + 1) mod (Obj.obj (List.assoc (__str ("capacity")) (!q) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("capacity")) (!q) : Obj.t) : int)) mod (Obj.obj (List.assoc (__str ("capacity")) (!q) : Obj.t) : int)))) :: List.remove_assoc (__str ("front")) (Obj.magic (!q) : (string * Obj.t) list));
  q := ((__str ("size"), Obj.repr (((Obj.obj (List.assoc (__str ("size")) (!q) : Obj.t) : int) - 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!q) : (string * Obj.t) list));
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!q)); (__str ("value"), Obj.repr (value))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let q = ref (create_queue (Obj.repr (5))) in
  print_endline (string_of_bool (is_empty (!q)));
  q := enqueue (q) (Obj.repr (10));
  print_endline (string_of_bool (is_empty (!q)));
  q := enqueue (q) (Obj.repr (20));
  q := enqueue (q) (Obj.repr (30));
  print_endline (string_of_int (front (!q)));
  let r = ref (dequeue (q)) in
  q := (Obj.obj (List.assoc (__str ("queue")) (!r) : Obj.t) : ( string * Obj.t ) list);
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (!r) : Obj.t) : int));
  print_endline (string_of_int (front (!q)));
  print_endline (string_of_int (length (!q)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()