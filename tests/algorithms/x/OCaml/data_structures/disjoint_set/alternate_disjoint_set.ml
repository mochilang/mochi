(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:41 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec max_list xs =
  let __ret = ref 0 in
  (try
  let m = ref (List.nth (xs) (0)) in
  let i = ref (1) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) > !m) then (
  m := List.nth (xs) (!i);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and disjoint_set_new set_counts =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let max_set = max_list (set_counts) in
  let num_sets = List.length (set_counts) in
  let ranks = ref (([] : (int) list)) in
  let parents = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < num_sets) do
    try
  ranks := (List.append (!ranks) [(Obj.magic (1) : int)]);
  parents := (List.append (!parents) [(Obj.magic (!i) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("set_counts"), Obj.repr (set_counts)); (__str ("max_set"), Obj.repr (max_set)); (__str ("ranks"), Obj.repr (!ranks)); (__str ("parents"), Obj.repr (!parents))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and get_parent ds idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  if (List.nth ((Obj.obj (List.assoc (__str ("parents")) (!ds) : Obj.t) : int list)) (idx) = idx) then (
  __ret := (Obj.magic (idx) : int); raise Return
  );
  let parents = ref ((Obj.obj (List.assoc (__str ("parents")) (!ds) : Obj.t) : int list)) in
  parents := (List.mapi (fun __i __x -> if __i = idx then get_parent (ds) (Obj.repr (List.nth (!parents) (idx))) else __x) (!parents));
  ds := ((__str ("parents"), Obj.repr (!parents)) :: List.remove_assoc (__str ("parents")) (Obj.magic (!ds) : (string * Obj.t) list));
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("parents")) (!ds) : Obj.t) : int list)) (idx)) : int); raise Return
  with Return -> !__ret)

and merge ds src dst =
  let __ret = ref false in
  (try
  let src = (Obj.magic src : int) in
  let dst = (Obj.magic dst : int) in
  let src_parent = get_parent (ds) (Obj.repr (src)) in
  let dst_parent = get_parent (ds) (Obj.repr (dst)) in
  if (src_parent = dst_parent) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (List.nth ((Obj.obj (List.assoc (__str ("ranks")) (!ds) : Obj.t) : int list)) (dst_parent) >= List.nth ((Obj.obj (List.assoc (__str ("ranks")) (!ds) : Obj.t) : int list)) (src_parent)) then (
  let counts = ref ((Obj.obj (List.assoc (__str ("set_counts")) (!ds) : Obj.t) : int list)) in
  counts := (List.mapi (fun __i __x -> if __i = dst_parent then (List.nth (!counts) (dst_parent) + List.nth (!counts) (src_parent)) else __x) (!counts));
  counts := (List.mapi (fun __i __x -> if __i = src_parent then 0 else __x) (!counts));
  ds := ((__str ("set_counts"), Obj.repr (!counts)) :: List.remove_assoc (__str ("set_counts")) (Obj.magic (!ds) : (string * Obj.t) list));
  let parents = ref ((Obj.obj (List.assoc (__str ("parents")) (!ds) : Obj.t) : int list)) in
  parents := (List.mapi (fun __i __x -> if __i = src_parent then dst_parent else __x) (!parents));
  ds := ((__str ("parents"), Obj.repr (!parents)) :: List.remove_assoc (__str ("parents")) (Obj.magic (!ds) : (string * Obj.t) list));
  if (List.nth ((Obj.obj (List.assoc (__str ("ranks")) (!ds) : Obj.t) : int list)) (dst_parent) = List.nth ((Obj.obj (List.assoc (__str ("ranks")) (!ds) : Obj.t) : int list)) (src_parent)) then (
  let ranks = ref ((Obj.obj (List.assoc (__str ("ranks")) (!ds) : Obj.t) : int list)) in
  ranks := (List.mapi (fun __i __x -> if __i = dst_parent then (List.nth (!ranks) (dst_parent) + 1) else __x) (!ranks));
  ds := ((__str ("ranks"), Obj.repr (!ranks)) :: List.remove_assoc (__str ("ranks")) (Obj.magic (!ds) : (string * Obj.t) list));
  );
  let joined = List.nth ((Obj.obj (List.assoc (__str ("set_counts")) (!ds) : Obj.t) : int list)) (dst_parent) in
  if (joined > (Obj.obj (List.assoc (__str ("max_set")) (!ds) : Obj.t) : int)) then (
  ds := ((__str ("max_set"), Obj.repr (joined)) :: List.remove_assoc (__str ("max_set")) (Obj.magic (!ds) : (string * Obj.t) list));
  );
  ) else (
  let counts = ref ((Obj.obj (List.assoc (__str ("set_counts")) (!ds) : Obj.t) : int list)) in
  counts := (List.mapi (fun __i __x -> if __i = src_parent then (List.nth (!counts) (src_parent) + List.nth (!counts) (dst_parent)) else __x) (!counts));
  counts := (List.mapi (fun __i __x -> if __i = dst_parent then 0 else __x) (!counts));
  ds := ((__str ("set_counts"), Obj.repr (!counts)) :: List.remove_assoc (__str ("set_counts")) (Obj.magic (!ds) : (string * Obj.t) list));
  let parents = ref ((Obj.obj (List.assoc (__str ("parents")) (!ds) : Obj.t) : int list)) in
  parents := (List.mapi (fun __i __x -> if __i = dst_parent then src_parent else __x) (!parents));
  ds := ((__str ("parents"), Obj.repr (!parents)) :: List.remove_assoc (__str ("parents")) (Obj.magic (!ds) : (string * Obj.t) list));
  let joined = List.nth ((Obj.obj (List.assoc (__str ("set_counts")) (!ds) : Obj.t) : int list)) (src_parent) in
  if (joined > (Obj.obj (List.assoc (__str ("max_set")) (!ds) : Obj.t) : int)) then (
  ds := ((__str ("max_set"), Obj.repr (joined)) :: List.remove_assoc (__str ("max_set")) (Obj.magic (!ds) : (string * Obj.t) list));
  );
  );
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let ds = ref (disjoint_set_new ([1; 1; 1]))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_bool (merge (ds) (Obj.repr (1)) (Obj.repr (2))));
  print_endline (string_of_bool (merge (ds) (Obj.repr (0)) (Obj.repr (2))));
  print_endline (string_of_bool (merge (ds) (Obj.repr (0)) (Obj.repr (1))));
  print_endline (string_of_int (get_parent (ds) (Obj.repr (0))));
  print_endline (string_of_int (get_parent (ds) (Obj.repr (1))));
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("max_set")) (!ds) : Obj.t) : int));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()