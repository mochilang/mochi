(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:41 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_set ds x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : int) in
  let p = ref ((Obj.obj (List.assoc (__str ("parent")) (ds) : Obj.t) : int list)) in
  let r = ref ((Obj.obj (List.assoc (__str ("rank")) (ds) : Obj.t) : int list)) in
  p := (List.mapi (fun __i __x -> if __i = x then x else __x) (!p));
  r := (List.mapi (fun __i __x -> if __i = x then 0 else __x) (!r));
  __ret := (Obj.magic ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr (!r))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and find_set ds x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : int) in
  if (List.nth ((Obj.obj (List.assoc (__str ("parent")) (ds) : Obj.t) : int list)) (x) = x) then (
  __ret := (Obj.magic ([(__str ("ds"), Obj.repr (ds)); (__str ("root"), Obj.repr (x))]) : (string * Obj.t) list); raise Return
  );
  let res = find_set ((Obj.magic ds : (string * Obj.t) list)) (Obj.repr (List.nth ((Obj.obj (List.assoc (__str ("parent")) (ds) : Obj.t) : int list)) (x))) in
  let p = ref ((Obj.obj (List.assoc (__str ("parent")) ((Obj.obj (List.assoc (__str ("ds")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : int list)) in
  p := (List.mapi (fun __i __x -> if __i = x then (Obj.obj (List.assoc (__str ("root")) (res) : Obj.t) : int) else __x) (!p));
  __ret := (Obj.magic ([(__str ("ds"), Obj.repr ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr ((Obj.obj (List.assoc (__str ("rank")) ((Obj.obj (List.assoc (__str ("ds")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : int list)))])); (__str ("root"), Obj.repr ((Obj.obj (List.assoc (__str ("root")) (res) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and union_set ds x y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let fx = find_set ((Obj.magic ds : (string * Obj.t) list)) (Obj.repr (x)) in
  let ds1 = ref ((Obj.obj (List.assoc (__str ("ds")) (fx) : Obj.t) : ( string * Obj.t ) list)) in
  let x_root = (Obj.obj (List.assoc (__str ("root")) (fx) : Obj.t) : int) in
  let fy = find_set ((Obj.magic !ds1 : (string * Obj.t) list)) (Obj.repr (y)) in
  let ds2 = ref ((Obj.obj (List.assoc (__str ("ds")) (fy) : Obj.t) : ( string * Obj.t ) list)) in
  let y_root = (Obj.obj (List.assoc (__str ("root")) (fy) : Obj.t) : int) in
  if (x_root = y_root) then (
  __ret := (Obj.magic (!ds2) : (string * Obj.t) list); raise Return
  );
  let p = ref ((Obj.obj (List.assoc (__str ("parent")) (!ds2) : Obj.t) : int list)) in
  let r = ref ((Obj.obj (List.assoc (__str ("rank")) (!ds2) : Obj.t) : int list)) in
  if (List.nth (!r) (x_root) > List.nth (!r) (y_root)) then (
  p := (List.mapi (fun __i __x -> if __i = y_root then x_root else __x) (!p));
  ) else (
  p := (List.mapi (fun __i __x -> if __i = x_root then y_root else __x) (!p));
  if (List.nth (!r) (x_root) = List.nth (!r) (y_root)) then (
  r := (List.mapi (fun __i __x -> if __i = y_root then (List.nth (!r) (y_root) + 1) else __x) (!r));
  );
  );
  __ret := (Obj.magic ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr (!r))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and same_python_set a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if ((a < 3) && (b < 3)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if ((((a >= 3) && (a < 6)) && (b >= 3)) && (b < 6)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)


let ds = ref ([(__str ("parent"), Obj.repr ([])); (__str ("rank"), Obj.repr ([]))])
let i = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!i < 6) do
    try
  ds := ((__str ("parent"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("parent")) (!ds) : Obj.t) : int list)) [(Obj.magic (0) : int)]))) :: List.remove_assoc (__str ("parent")) (Obj.magic (!ds) : (string * Obj.t) list));
  ds := ((__str ("rank"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("rank")) (!ds) : Obj.t) : int list)) [(Obj.magic (0) : int)]))) :: List.remove_assoc (__str ("rank")) (Obj.magic (!ds) : (string * Obj.t) list));
  ds := make_set (!ds) (Obj.repr (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ds := union_set (!ds) (Obj.repr (0)) (Obj.repr (1));
  ds := union_set (!ds) (Obj.repr (1)) (Obj.repr (2));
  ds := union_set (!ds) (Obj.repr (3)) (Obj.repr (4));
  ds := union_set (!ds) (Obj.repr (3)) (Obj.repr (5));
  i := 0;
  (try while (!i < 6) do
    try
  let j = ref (0) in
  (try while (!j < 6) do
    try
  let res_i = find_set (!ds) (Obj.repr (!i)) in
  ds := (Obj.obj (List.assoc (__str ("ds")) (res_i) : Obj.t) : ( string * Obj.t ) list);
  let root_i = (Obj.obj (List.assoc (__str ("root")) (res_i) : Obj.t) : int) in
  let res_j = find_set (!ds) (Obj.repr (!j)) in
  ds := (Obj.obj (List.assoc (__str ("ds")) (res_j) : Obj.t) : ( string * Obj.t ) list);
  let root_j = (Obj.obj (List.assoc (__str ("root")) (res_j) : Obj.t) : int) in
  let same = same_python_set (Obj.repr (!i)) (Obj.repr (!j)) in
  let root_same = (root_i = root_j) in
  if same then (
  if not (root_same) then (
  (failwith ("nodes should be in same set"));
  );
  ) else (
  if root_same then (
  (failwith ("nodes should be in different sets"));
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < 6) do
    try
  let res = find_set (!ds) (Obj.repr (!i)) in
  ds := (Obj.obj (List.assoc (__str ("ds")) (res) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((string_of_int ((Obj.obj (List.assoc (__str ("root")) (res) : Obj.t) : int))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()