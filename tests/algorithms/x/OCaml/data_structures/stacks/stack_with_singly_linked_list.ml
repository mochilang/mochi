(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec empty_stack () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr ([])); (__str ("top"), Obj.repr (-(1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and is_empty stack =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("top")) (stack) : Obj.t) : int) = -(1))) : bool); raise Return
  with Return -> !__ret)

and push stack item =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let new_node = [(__str ("value"), Obj.repr (item)); (__str ("next"), Obj.repr ((Obj.obj (List.assoc (__str ("top")) (stack) : Obj.t) : int)))] in
  let new_nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) in
  new_nodes := (List.append (!new_nodes) [(Obj.magic (new_node) : (string * Obj.t) list)]);
  let new_top = (List.length (!new_nodes) - 1) in
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr (!new_nodes)); (__str ("top"), Obj.repr (new_top))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and pop stack =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if ((Obj.obj (List.assoc (__str ("top")) (stack) : Obj.t) : int) = -(1)) then (
  (failwith ("pop from empty stack"));
  );
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("top")) (stack) : Obj.t) : int))) in
  let new_top = (Obj.obj (List.assoc (__str ("next")) (!node) : Obj.t) : int) in
  let new_stack = [(__str ("nodes"), Obj.repr ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list))); (__str ("top"), Obj.repr (new_top))] in
  __ret := (Obj.magic ([(__str ("stack"), Obj.repr (new_stack)); (__str ("value"), Obj.repr ((Obj.obj (List.assoc (__str ("value")) (!node) : Obj.t) : string)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and peek stack =
  let __ret = ref "" in
  (try
  if ((Obj.obj (List.assoc (__str ("top")) (stack) : Obj.t) : int) = -(1)) then (
  (failwith ("peek from empty stack"));
  );
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("top")) (stack) : Obj.t) : int))) in
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("value")) (!node) : Obj.t) : string)) : string); raise Return
  with Return -> !__ret)

and clear stack =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr ([])); (__str ("top"), Obj.repr (-(1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let stack = ref (empty_stack ()) in
  print_endline (string_of_bool (is_empty (!stack)));
  stack := push (!stack) ("5");
  stack := push (!stack) ("9");
  stack := push (!stack) ("python");
  print_endline (string_of_bool (is_empty (!stack)));
  let res = ref (pop (!stack)) in
  stack := (Obj.obj (List.assoc (__str ("stack")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (__show (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : string));
  stack := push (!stack) ("algorithms");
  res := pop (!stack);
  stack := (Obj.obj (List.assoc (__str ("stack")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (__show (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : string));
  res := pop (!stack);
  stack := (Obj.obj (List.assoc (__str ("stack")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (__show (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : string));
  res := pop (!stack);
  stack := (Obj.obj (List.assoc (__str ("stack")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline (__show (Obj.obj (List.assoc (__str ("value")) (!res) : Obj.t) : string));
  print_endline (string_of_bool (is_empty (!stack)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()