(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec split_custom s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) (!i) ((!i + 1) - !i) in
  if (ch = sep) then (
  res := (List.append (!res) [(Obj.magic (!current) : string)]);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!current) : string)]);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and tokenize s =
  let __ret = ref ([] : (string) list) in
  (try
  let parts = ref (split_custom (s) (" ")) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!parts)) do
    try
  let p = List.nth (!parts) (!i) in
  if (p <> "") then (
  res := (List.append (!res) [(Obj.magic (p) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and is_digit ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((ch >= "0") && (ch <= "9"))) : bool); raise Return
  with Return -> !__ret)

and is_operand token =
  let __ret = ref false in
  (try
  if (token = "") then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < String.length (token)) do
    try
  let ch = String.sub (token) (!i) ((!i + 1) - !i) in
  if not (is_digit (ch)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and to_int token =
  let __ret = ref 0 in
  (try
  let res = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (token)) do
    try
  res := ((!res * 10) + Char.code (String.get (token) !i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and apply_op op a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  if (op = "+") then (
  __ret := (Obj.magic ((a +. b)) : float); raise Return
  );
  if (op = "-") then (
  __ret := (Obj.magic ((a -. b)) : float); raise Return
  );
  if (op = "*") then (
  __ret := (Obj.magic ((a *. b)) : float); raise Return
  );
  if (op = "/") then (
  __ret := (Obj.magic ((a /. b)) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and evaluate expression =
  let __ret = ref 0.0 in
  (try
  let tokens = ref (tokenize (expression)) in
  let stack = ref (([] : (float) list)) in
  let i = ref ((List.length (!tokens) - 1)) in
  (try while (!i >= 0) do
    try
  let token = List.nth (!tokens) (!i) in
  if (token <> "") then (
  if is_operand (token) then (
  stack := (List.append (!stack) [(Obj.magic (float_of_int (to_int (token))) : float)]);
  ) else (
  let o1 = List.nth (!stack) ((List.length (!stack) - 1)) in
  let o2 = List.nth (!stack) ((List.length (!stack) - 2)) in
  stack := List.of_seq (Seq.take ((List.length (!stack) - 2) - 0) (Seq.drop 0 (List.to_seq (!stack))));
  let res = apply_op (token) (Obj.repr (o1)) (Obj.repr (o2)) in
  stack := (List.append (!stack) [(Obj.magic (res) : float)]);
  );
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!stack) (0)) : float); raise Return
  with Return -> !__ret)

and eval_rec tokens pos =
  let __ret = ref ([] : (float) list) in
  (try
  let pos = (Obj.magic pos : int) in
  let token = List.nth (tokens) (pos) in
  let next = (pos + 1) in
  if is_operand (token) then (
  __ret := (Obj.magic ([float_of_int (to_int (token)); float_of_int (next)]) : float list); raise Return
  );
  let left = ref (eval_rec (tokens) (Obj.repr (next))) in
  let a = List.nth (!left) (0) in
  let p1 = (Obj.magic List.nth (!left) (1) : int) in
  let right = ref (eval_rec (tokens) (Obj.repr (p1))) in
  let b = List.nth (!right) (0) in
  let p2 = List.nth (!right) (1) in
  __ret := (Obj.magic ([apply_op (token) (Obj.repr (a)) (Obj.repr (b)); p2]) : float list); raise Return
  with Return -> !__ret)

and evaluate_recursive expression =
  let __ret = ref 0.0 in
  (try
  let tokens = ref (tokenize (expression)) in
  let res = ref (eval_rec (!tokens) (Obj.repr (0))) in
  __ret := (Obj.magic (List.nth (!res) (0)) : float); raise Return
  with Return -> !__ret)


let test_expression = "+ 9 * 2 6"
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (evaluate (test_expression))));
  let test_expression2 = "/ * 10 2 + 4 1 " in
  print_endline ((Printf.sprintf "%.16g" (evaluate (test_expression2))));
  let test_expression3 = "+ * 2 3 / 8 4" in
  print_endline ((Printf.sprintf "%.16g" (evaluate_recursive (test_expression3))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()