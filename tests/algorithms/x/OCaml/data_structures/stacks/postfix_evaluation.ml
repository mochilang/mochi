(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec slice_without_last xs =
  let __ret = ref ([] : (float) list) in
  (try
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < (List.length (xs) - 1)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : float)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and parse_float token =
  let __ret = ref 0.0 in
  (try
  let sign = ref (1.0) in
  let idx = ref (0) in
  if (String.length (token) > 0) then (
  let first = String.sub (token) (0) (1 - 0) in
  if (first = "-") then (
  sign := (-.(1.0));
  idx := 1;
  ) else (
  if (first = "+") then (
  idx := 1;
  );
  );
  );
  let int_part = ref (0) in
  (try while ((!idx < String.length (token)) && (String.sub (token) (!idx) ((!idx + 1) - !idx) <> ".")) do
    try
  int_part := ((!int_part * 10) + Char.code (String.get (token) !idx));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref ((1.0 *. float_of_int (!int_part))) in
  if ((!idx < String.length (token)) && (String.sub (token) (!idx) ((!idx + 1) - !idx) = ".")) then (
  idx := (!idx + 1);
  let place = ref (0.1) in
  (try while (!idx < String.length (token)) do
    try
  let digit = Char.code (String.get (token) !idx) in
  result := (!result +. (!place *. (1.0 *. float_of_int (digit))));
  place := (!place /. 10.0);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic ((!sign *. !result)) : float); raise Return
  with Return -> !__ret)

and pow_float base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : float) in
  let result = ref (1.0) in
  let i = ref (0) in
  let e = int_of_float (exp) in
  (try while (!i < e) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and apply_op a b op =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  if (op = "+") then (
  __ret := (Obj.magic ((a +. b)) : float); raise Return
  );
  if (op = "-") then (
  __ret := (Obj.magic ((a -. b)) : float); raise Return
  );
  if (op = "*") then (
  __ret := (Obj.magic ((a *. b)) : float); raise Return
  );
  if (op = "/") then (
  __ret := (Obj.magic ((a /. b)) : float); raise Return
  );
  if (op = "^") then (
  __ret := (Obj.magic (pow_float (Obj.repr (a)) (Obj.repr (b))) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and evaluate tokens =
  let __ret = ref 0.0 in
  (try
  if (List.length (tokens) = 0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let stack = ref (([] : (float) list)) in
  (try List.iter (fun token ->
    try
  if (((((token = "+") || (token = "-")) || (token = "*")) || (token = "/")) || (token = "^")) then (
  if (((token = "+") || (token = "-")) && (List.length (!stack) < 2)) then (
  let b = List.nth (!stack) ((List.length (!stack) - 1)) in
  stack := slice_without_last (!stack);
  if (token = "-") then (
  stack := (List.append (!stack) [(Obj.magic ((0.0 -. b)) : float)]);
  ) else (
  stack := (List.append (!stack) [(Obj.magic (b) : float)]);
  );
  ) else (
  let b = List.nth (!stack) ((List.length (!stack) - 1)) in
  stack := slice_without_last (!stack);
  let a = List.nth (!stack) ((List.length (!stack) - 1)) in
  stack := slice_without_last (!stack);
  let result = apply_op (Obj.repr (a)) (Obj.repr (b)) (token) in
  stack := (List.append (!stack) [(Obj.magic (result) : float)]);
  );
  ) else (
  stack := (List.append (!stack) [(Obj.magic (parse_float (token)) : float)]);
  );
    with Continue -> ()) (tokens) with Break -> ());
  if (List.length (!stack) <> 1) then (
  (failwith ("Invalid postfix expression"));
  );
  __ret := (Obj.magic (List.nth (!stack) (0)) : float); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (evaluate (["2"; "1"; "+"; "3"; "*"]))));
  print_endline ((Printf.sprintf "%.16g" (evaluate (["4"; "13"; "5"; "/"; "+"]))));
  print_endline ((Printf.sprintf "%.16g" (evaluate (["5"; "6"; "9"; "*"; "+"]))));
  print_endline ((Printf.sprintf "%.16g" (evaluate (["2"; "-"; "3"; "+"]))));
  print_endline ((Printf.sprintf "%.16g" (evaluate ((Obj.magic [] : string list)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()