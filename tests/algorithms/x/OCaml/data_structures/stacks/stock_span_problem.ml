(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec calculation_span price =
  let __ret = ref ([] : (int) list) in
  (try
  let n = List.length (price) in
  let st = ref ((Obj.magic [] : int list)) in
  let span = ref ((Obj.magic [] : int list)) in
  st := (List.append (!st) [(Obj.magic (0) : int)]);
  span := (List.append (!span) [(Obj.magic (1) : int)]);
  (try for i = 1 to (n - 1) do
    try
  (try while ((List.length (!st) > 0) && (List.nth (price) (List.nth (!st) ((List.length (!st) - 1))) <= List.nth (price) (i))) do
    try
  st := List.of_seq (Seq.take ((List.length (!st) - 1) - 0) (Seq.drop 0 (List.to_seq (!st))));
    with Continue -> ()
  done with Break -> ());
  let s = if (List.length (!st) <= 0) then (i + 1) else (i - List.nth (!st) ((List.length (!st) - 1))) in
  span := (List.append (!span) [(Obj.magic (s) : int)]);
  st := (List.append (!st) [(Obj.magic (i) : int)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!span) : int list); raise Return
  with Return -> !__ret)

and print_array arr =
  let __ret = ref (Obj.magic 0) in
  (try
  (try for i = 0 to (List.length (arr) - 1) do
    try
  print_endline (string_of_int (List.nth (arr) (i)));
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let price = ref ([10; 4; 5; 90; 120; 80])
let spans = ref (calculation_span (!price))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_array (!spans));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()