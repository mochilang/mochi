(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_stack () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("main_queue"), Obj.repr ([])); (__str ("temp_queue"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and push s item =
  let __ret = ref (Obj.magic 0) in
  (try
  let item = (Obj.magic item : int) in
  s := ((__str ("temp_queue"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("temp_queue")) (!s) : Obj.t) : int list)) [(Obj.magic (item) : int)]))) :: List.remove_assoc (__str ("temp_queue")) (Obj.magic (!s) : (string * Obj.t) list));
  (try while (List.length ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list)) > 0) do
    try
  s := ((__str ("temp_queue"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("temp_queue")) (!s) : Obj.t) : int list)) [(Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list)) (0)) : int)]))) :: List.remove_assoc (__str ("temp_queue")) (Obj.magic (!s) : (string * Obj.t) list));
  s := ((__str ("main_queue"), Obj.repr (List.of_seq (Seq.take (List.length ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list)) - 1) (Seq.drop 1 (List.to_seq ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list))))))) :: List.remove_assoc (__str ("main_queue")) (Obj.magic (!s) : (string * Obj.t) list));
    with Continue -> ()
  done with Break -> ());
  let new_main = ref ((Obj.obj (List.assoc (__str ("temp_queue")) (!s) : Obj.t) : int list)) in
  s := ((__str ("temp_queue"), Obj.repr ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list))) :: List.remove_assoc (__str ("temp_queue")) (Obj.magic (!s) : (string * Obj.t) list));
  s := ((__str ("main_queue"), Obj.repr (!new_main)) :: List.remove_assoc (__str ("main_queue")) (Obj.magic (!s) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and pop s =
  let __ret = ref 0 in
  (try
  if (List.length ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list)) = 0) then (
  (failwith ("pop from empty stack"));
  );
  let item = List.nth ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list)) (0) in
  s := ((__str ("main_queue"), Obj.repr (List.of_seq (Seq.take (List.length ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list)) - 1) (Seq.drop 1 (List.to_seq ((Obj.obj (List.assoc (__str ("main_queue")) (!s) : Obj.t) : int list))))))) :: List.remove_assoc (__str ("main_queue")) (Obj.magic (!s) : (string * Obj.t) list));
  __ret := (Obj.magic (item) : int); raise Return
  with Return -> !__ret)

and peek s =
  let __ret = ref 0 in
  (try
  if (List.length ((Obj.obj (List.assoc (__str ("main_queue")) (s) : Obj.t) : int list)) = 0) then (
  (failwith ("peek from empty stack"));
  );
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("main_queue")) (s) : Obj.t) : int list)) (0)) : int); raise Return
  with Return -> !__ret)

and is_empty s =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((List.length ((Obj.obj (List.assoc (__str ("main_queue")) (s) : Obj.t) : int list)) = 0)) : bool); raise Return
  with Return -> !__ret)


let stack = ref (make_stack ())
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (push (stack) (Obj.repr (1)));
  ignore (push (stack) (Obj.repr (2)));
  ignore (push (stack) (Obj.repr (3)));
  print_endline ((string_of_int (peek (!stack))));
  print_endline ((string_of_int (pop (stack))));
  print_endline ((string_of_int (peek (!stack))));
  print_endline ((string_of_int (pop (stack))));
  print_endline ((string_of_int (pop (stack))));
  print_endline ((string_of_bool (is_empty (!stack))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()