(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec empty_stack () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr ([])); (__str ("head"), Obj.repr ((0 - 1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and push stack value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let value = (Obj.magic value : int) in
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) in
  let idx = List.length (!nodes) in
  let new_node = ref ([(__str ("data"), Obj.repr (value)); (__str ("next"), Obj.repr ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int))); (__str ("prev"), Obj.repr ((0 - 1)))]) in
  nodes := (List.append (!nodes) [(Obj.magic (!new_node) : (string * Obj.t) list)]);
  if ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int) <> (0 - 1)) then (
  let head_node = ref (List.nth (!nodes) ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int))) in
  head_node := ((__str ("prev"), Obj.repr (idx)) :: List.remove_assoc (__str ("prev")) (Obj.magic (!head_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int) then !head_node else __x) (!nodes));
  );
  __ret := (Obj.magic ([(__str ("nodes"), Obj.repr (!nodes)); (__str ("head"), Obj.repr (idx))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and pop stack =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int) = (0 - 1)) then (
  __ret := (Obj.magic ([(__str ("stack"), Obj.repr (stack)); (__str ("value"), Obj.repr (0)); (__str ("ok"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  );
  let nodes = ref ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) in
  let head_node = ref (List.nth (!nodes) ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int))) in
  let value = (Obj.obj (List.assoc (__str ("data")) (!head_node) : Obj.t) : int) in
  let next_idx = (Obj.obj (List.assoc (__str ("next")) (!head_node) : Obj.t) : int) in
  if (next_idx <> (0 - 1)) then (
  let next_node = ref (List.nth (!nodes) (next_idx)) in
  next_node := ((__str ("prev"), Obj.repr ((0 - 1))) :: List.remove_assoc (__str ("prev")) (Obj.magic (!next_node) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = next_idx then !next_node else __x) (!nodes));
  );
  let new_stack = [(__str ("nodes"), Obj.repr (!nodes)); (__str ("head"), Obj.repr (next_idx))] in
  __ret := (Obj.magic ([(__str ("stack"), Obj.repr (new_stack)); (__str ("value"), Obj.repr (value)); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and top stack =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int) = (0 - 1)) then (
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (0)); (__str ("ok"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  );
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int))) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int))); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and size stack =
  let __ret = ref 0 in
  (try
  let count = ref (0) in
  let idx = ref ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int)) in
  (try while (!idx <> (0 - 1)) do
    try
  count := (!count + 1);
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) (!idx)) in
  idx := (Obj.obj (List.assoc (__str ("next")) (!node) : Obj.t) : int);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and is_empty stack =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int) = (0 - 1))) : bool); raise Return
  with Return -> !__ret)

and print_stack stack =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("stack elements are:");
  let idx = ref ((Obj.obj (List.assoc (__str ("head")) (stack) : Obj.t) : int)) in
  let s = ref ("") in
  (try while (!idx <> (0 - 1)) do
    try
  let node = ref (List.nth ((Obj.obj (List.assoc (__str ("nodes")) (stack) : Obj.t) : (string * Obj.t) list list)) (!idx)) in
  s := ((!s ^ (string_of_int ((Obj.obj (List.assoc (__str ("data")) (!node) : Obj.t) : int)))) ^ "->");
  idx := (Obj.obj (List.assoc (__str ("next")) (!node) : Obj.t) : int);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!s) > 0) then (
  print_endline (!s);
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let stack = ref (empty_stack ()) in
  print_endline ("Stack operations using Doubly LinkedList");
  stack := push (!stack) (Obj.repr (4));
  stack := push (!stack) (Obj.repr (5));
  stack := push (!stack) (Obj.repr (6));
  stack := push (!stack) (Obj.repr (7));
  ignore (print_stack (!stack));
  let t = top (!stack) in
  if (Obj.obj (List.assoc (__str ("ok")) (t) : Obj.t) : bool) then (
  print_endline (("Top element is " ^ (string_of_int ((Obj.obj (List.assoc (__str ("value")) (t) : Obj.t) : int)))));
  ) else (
  print_endline ("Top element is None");
  );
  print_endline (("Size of the stack is " ^ (string_of_int (size (!stack)))));
  let p = ref (pop (!stack)) in
  stack := (Obj.obj (List.assoc (__str ("stack")) (!p) : Obj.t) : ( string * Obj.t ) list);
  p := pop (!stack);
  stack := (Obj.obj (List.assoc (__str ("stack")) (!p) : Obj.t) : ( string * Obj.t ) list);
  ignore (print_stack (!stack));
  print_endline (("stack is empty: " ^ (string_of_bool (is_empty (!stack)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()