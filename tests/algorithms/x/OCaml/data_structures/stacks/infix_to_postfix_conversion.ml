(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _precedences = ref ([(__str ("+"), 1); (__str ("-"), 1); (__str ("*"), 2); (__str ("/"), 2); (__str ("^"), 3)])
let _associativities = ref ([(__str ("+"), "LR"); (__str ("-"), "LR"); (__str ("*"), "LR"); (__str ("/"), "LR"); (__str ("^"), "RL")])
let rec precedence ch =
  let __ret = ref 0 in
  (try
  if (List.mem_assoc ch !_precedences) then (
  __ret := (Obj.magic (List.assoc (__str (ch)) (!_precedences)) : int); raise Return
  );
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and associativity ch =
  let __ret = ref "" in
  (try
  if (List.mem_assoc ch !_associativities) then (
  __ret := (Obj.magic (List.assoc (__str (ch)) (!_associativities)) : string); raise Return
  );
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and balanced_parentheses expr =
  let __ret = ref false in
  (try
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (expr)) do
    try
  let ch = String.sub (expr) (!i) ((!i + 1) - !i) in
  if (ch = "(") then (
  count := (!count + 1);
  );
  if (ch = ")") then (
  count := (!count - 1);
  if (!count < 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!count = 0)) : bool); raise Return
  with Return -> !__ret)

and is_letter ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((("a" <= ch) && (ch <= "z")) || (("A" <= ch) && (ch <= "Z")))) : bool); raise Return
  with Return -> !__ret)

and is_digit ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((("0" <= ch) && (ch <= "9"))) : bool); raise Return
  with Return -> !__ret)

and is_alnum ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((is_letter (ch) || is_digit (ch))) : bool); raise Return
  with Return -> !__ret)

and infix_to_postfix expression =
  let __ret = ref "" in
  (try
  if (balanced_parentheses (expression) = false) then (
  (failwith ("Mismatched parentheses"));
  );
  let stack = ref (([] : (string) list)) in
  let postfix = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (expression)) do
    try
  let ch = String.sub (expression) (!i) ((!i + 1) - !i) in
  if is_alnum (ch) then (
  postfix := (List.append (!postfix) [(Obj.magic (ch) : string)]);
  ) else (
  if (ch = "(") then (
  stack := (List.append (!stack) [(Obj.magic (ch) : string)]);
  ) else (
  if (ch = ")") then (
  (try while ((List.length (!stack) > 0) && (List.nth (!stack) ((List.length (!stack) - 1)) <> "(")) do
    try
  postfix := (List.append (!postfix) [(Obj.magic (List.nth (!stack) ((List.length (!stack) - 1))) : string)]);
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq (!stack))));
    with Continue -> ()
  done with Break -> ());
  if (List.length (!stack) > 0) then (
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq (!stack))));
  );
  ) else (
  if (ch = " ") then (
  ) else (
  (try while true do
    try
  if (List.length (!stack) = 0) then (
  stack := (List.append (!stack) [(Obj.magic (ch) : string)]);
  raise Break;
  );
  let cp = precedence (ch) in
  let tp = precedence (List.nth (!stack) ((List.length (!stack) - 1))) in
  if (cp > tp) then (
  stack := (List.append (!stack) [(Obj.magic (ch) : string)]);
  raise Break;
  );
  if (cp < tp) then (
  postfix := (List.append (!postfix) [(Obj.magic (List.nth (!stack) ((List.length (!stack) - 1))) : string)]);
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq (!stack))));
  raise Continue;
  );
  if (associativity (ch) = "RL") then (
  stack := (List.append (!stack) [(Obj.magic (ch) : string)]);
  raise Break;
  );
  postfix := (List.append (!postfix) [(Obj.magic (List.nth (!stack) ((List.length (!stack) - 1))) : string)]);
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq (!stack))));
    with Continue -> ()
  done with Break -> ());
  );
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (List.length (!stack) > 0) do
    try
  postfix := (List.append (!postfix) [(Obj.magic (List.nth (!stack) ((List.length (!stack) - 1))) : string)]);
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq (!stack))));
    with Continue -> ()
  done with Break -> ());
  let res = ref ("") in
  let j = ref (0) in
  (try while (!j < List.length (!postfix)) do
    try
  if (!j > 0) then (
  res := (!res ^ " ");
  );
  res := (!res ^ List.nth (!postfix) (!j));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let expression = "a+b*(c^d-e)^(f+g*h)-i" in
  print_endline (expression);
  print_endline ((infix_to_postfix (expression)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()