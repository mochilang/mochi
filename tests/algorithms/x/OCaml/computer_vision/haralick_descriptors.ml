(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs_int n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  __ret := (Obj.magic (-(n)) : int); raise Return
  );
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

and sqrt x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let e = 2.718281828 in
  let n = ref (0) in
  let y = ref (x) in
  (try while (!y >= e) do
    try
  y := (!y /. e);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!y <= (1.0 /. e)) do
    try
  y := (!y *. e);
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y -. 1.0);
  let term = ref (!y) in
  let result = ref (0.0) in
  let k = ref (1) in
  (try while (!k <= 20) do
    try
  if (((!k mod 2 + 2) mod 2) = 1) then (
  result := (!result +. (!term /. (1.0 *. float_of_int (!k))));
  ) else (
  result := (!result -. (!term /. (1.0 *. float_of_int (!k))));
  );
  term := (!term *. !y);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!result +. (1.0 *. float_of_int (!n)))) : float); raise Return
  with Return -> !__ret)

and matrix_concurrency image coord =
  let __ret = ref ([] : (float list) list) in
  (try
  let offset_x = List.nth (coord) (0) in
  let offset_y = List.nth (coord) (1) in
  let max_val = ref (0) in
  (try for r = 0 to (List.length (image) - 1) do
    try
  (try for c = 0 to (List.length (List.nth (image) (r)) - 1) do
    try
  if (List.nth (List.nth (image) (r)) (c) > !max_val) then (
  max_val := List.nth (List.nth (image) (r)) (c);
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let size = (!max_val + 1) in
  let matrix = ref (([] : (float list) list)) in
  (try for i = 0 to (size - 1) do
    try
  let row = ref (([] : (float) list)) in
  (try for j = 0 to (size - 1) do
    try
  row := (List.append (!row) [(Obj.magic (0.0) : float)]);
    with Continue -> ()
  done with Break -> ());
  matrix := (List.append (!matrix) [(Obj.magic (!row) : float list)]);
    with Continue -> ()
  done with Break -> ());
  (try for x = 1 to ((List.length (image) - 1) - 1) do
    try
  (try for y = 1 to ((List.length (List.nth (image) (x)) - 1) - 1) do
    try
  let base = List.nth (List.nth (image) (x)) (y) in
  let offset = List.nth (List.nth (image) ((x + offset_x))) ((y + offset_y)) in
  matrix := (List.mapi (fun __i __x -> if __i = base then (List.mapi (fun __i __x -> if __i = offset then (List.nth (List.nth (!matrix) (base)) (offset) +. 1.0) else __x) (List.nth (!matrix) (base))) else __x) (!matrix));
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let total = ref (0.0) in
  (try for i = 0 to (size - 1) do
    try
  (try for j = 0 to (size - 1) do
    try
  total := (!total +. List.nth (List.nth (!matrix) (i)) (j));
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  if (!total = 0.0) then (
  __ret := (Obj.magic (!matrix) : float list list); raise Return
  );
  (try for i = 0 to (size - 1) do
    try
  (try for j = 0 to (size - 1) do
    try
  matrix := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then (List.nth (List.nth (!matrix) (i)) (j) /. !total) else __x) (List.nth (!matrix) (i))) else __x) (!matrix));
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix) : float list list); raise Return
  with Return -> !__ret)

and haralick_descriptors matrix =
  let __ret = ref ([] : (float) list) in
  (try
  let rows = List.length (matrix) in
  let cols = List.length (List.nth (matrix) (0)) in
  let maximum_prob = ref (0.0) in
  let correlation = ref (0.0) in
  let energy = ref (0.0) in
  let contrast = ref (0.0) in
  let dissimilarity = ref (0.0) in
  let inverse_difference = ref (0.0) in
  let homogeneity = ref (0.0) in
  let entropy = ref (0.0) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let j = ref (0) in
  (try while (!j < cols) do
    try
  let val_ = List.nth (List.nth (matrix) (!i)) (!j) in
  if (val_ > !maximum_prob) then (
  maximum_prob := val_;
  );
  correlation := (!correlation +. (((1.0 *. float_of_int (!i)) *. float_of_int (!j)) *. val_));
  energy := (!energy +. (val_ *. val_));
  let diff = (!i - !j) in
  let adiff = abs_int (Obj.repr (diff)) in
  contrast := (!contrast +. (val_ *. ((1.0 *. float_of_int (diff)) *. float_of_int (diff))));
  dissimilarity := (!dissimilarity +. (val_ *. (1.0 *. float_of_int (adiff))));
  inverse_difference := (!inverse_difference +. (val_ /. (1.0 +. (1.0 *. float_of_int (adiff)))));
  homogeneity := (!homogeneity +. (val_ /. (1.0 +. ((1.0 *. float_of_int (diff)) *. float_of_int (diff)))));
  if (val_ > 0.0) then (
  entropy := (!entropy -. (val_ *. ln (Obj.repr (val_))));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([!maximum_prob; !correlation; !energy; !contrast; !dissimilarity; !inverse_difference; !homogeneity; !entropy]) : float list); raise Return
  with Return -> !__ret)


let image = ref ([[0; 1; 0]; [1; 0; 1]; [0; 1; 0]])
let glcm = ref (matrix_concurrency (!image) ([0; 1]))
let descriptors = ref (haralick_descriptors (!glcm))
let idx = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!idx < List.length (!descriptors)) do
    try
  print_endline ((Printf.sprintf "%.16g" (List.nth (!descriptors) (!idx))));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()