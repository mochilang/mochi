(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec zeros h w =
  let __ret = ref ([] : (float list) list) in
  (try
  let h = (Obj.magic h : int) in
  let w = (Obj.magic w : int) in
  let m = ref (([] : (float list) list)) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let row = ref (([] : (float) list)) in
  let x = ref (0) in
  (try while (!x < w) do
    try
  row := (List.append (!row) [(Obj.magic (0.0) : float)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  m := (List.append (!m) [(Obj.magic (!row) : float list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : float list list); raise Return
  with Return -> !__ret)

and gradient img =
  let __ret = ref ([] : (float list list) list) in
  (try
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let dx = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let dy = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let y = ref (1) in
  (try while (!y < (h - 1)) do
    try
  let x = ref (1) in
  (try while (!x < (w - 1)) do
    try
  dx := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then (float_of_int (List.nth (List.nth (img) (!y)) ((!x + 1))) -. float_of_int (List.nth (List.nth (img) (!y)) ((!x - 1)))) else __x) (List.nth (!dx) (!y))) else __x) (!dx));
  dy := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then (float_of_int (List.nth (List.nth (img) ((!y + 1))) (!x)) -. float_of_int (List.nth (List.nth (img) ((!y - 1))) (!x))) else __x) (List.nth (!dy) (!y))) else __x) (!dy));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((Obj.magic [!dx; !dy] : float list list list)) : float list list list); raise Return
  with Return -> !__ret)

and harris img k window thresh =
  let __ret = ref ([] : (int list) list) in
  (try
  let k = (Obj.magic k : float) in
  let window = (Obj.magic window : int) in
  let thresh = (Obj.magic thresh : float) in
  let h = List.length (img) in
  let w = List.length (List.nth (img) (0)) in
  let grads = ref (gradient (img)) in
  let dx = ref (List.nth (!grads) (0)) in
  let dy = ref (List.nth (!grads) (1)) in
  let ixx = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let iyy = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let ixy = ref (zeros (Obj.repr (h)) (Obj.repr (w))) in
  let y = ref (0) in
  (try while (!y < h) do
    try
  let x = ref (0) in
  (try while (!x < w) do
    try
  let gx = List.nth (List.nth (!dx) (!y)) (!x) in
  let gy = List.nth (List.nth (!dy) (!y)) (!x) in
  ixx := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then (gx *. gx) else __x) (List.nth (!ixx) (!y))) else __x) (!ixx));
  iyy := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then (gy *. gy) else __x) (List.nth (!iyy) (!y))) else __x) (!iyy));
  ixy := (List.mapi (fun __i __x -> if __i = !y then (List.mapi (fun __i __x -> if __i = !x then (gx *. gy) else __x) (List.nth (!ixy) (!y))) else __x) (!ixy));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  let offset = (window / 2) in
  let corners = ref (([] : (int list) list)) in
  y := offset;
  (try while (!y < (h - offset)) do
    try
  let x = ref (offset) in
  (try while (!x < (w - offset)) do
    try
  let wxx = ref (0.0) in
  let wyy = ref (0.0) in
  let wxy = ref (0.0) in
  let yy = ref ((!y - offset)) in
  (try while (!yy <= (!y + offset)) do
    try
  let xx = ref ((!x - offset)) in
  (try while (!xx <= (!x + offset)) do
    try
  wxx := (!wxx +. List.nth (List.nth (!ixx) (!yy)) (!xx));
  wyy := (!wyy +. List.nth (List.nth (!iyy) (!yy)) (!xx));
  wxy := (!wxy +. List.nth (List.nth (!ixy) (!yy)) (!xx));
  xx := (!xx + 1);
    with Continue -> ()
  done with Break -> ());
  yy := (!yy + 1);
    with Continue -> ()
  done with Break -> ());
  let det = ((!wxx *. !wyy) -. (!wxy *. !wxy)) in
  let trace = (!wxx +. !wyy) in
  let r = (det -. (k *. (trace *. trace))) in
  if (r > thresh) then (
  corners := (List.append (!corners) [(Obj.magic ((Obj.magic [!x; !y] : int list)) : int list)]);
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!corners) : int list list); raise Return
  with Return -> !__ret)


let img = ref ([[1; 1; 1; 1; 1]; [1; 255; 255; 255; 1]; [1; 255; 0; 255; 1]; [1; 255; 255; 255; 1]; [1; 1; 1; 1; 1]])
let corners = ref (harris (!img) (Obj.repr (0.04)) (Obj.repr (3)) (Obj.repr (10000000000.0)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list !corners);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()