(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec conv2d image kernel =
  let __ret = ref ([] : (float list) list) in
  (try
  let rows = List.length (image) in
  let cols = List.length (List.nth (image) (0)) in
  let k = List.length (kernel) in
  let output = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i <= (rows - k)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j <= (cols - k)) do
    try
  let sum = ref (0.0) in
  let ki = ref (0) in
  (try while (!ki < k) do
    try
  let kj = ref (0) in
  (try while (!kj < k) do
    try
  sum := (!sum +. (List.nth (List.nth (image) ((!i + !ki))) ((!j + !kj)) *. List.nth (List.nth (kernel) (!ki)) (!kj)));
  kj := (!kj + 1);
    with Continue -> ()
  done with Break -> ());
  ki := (!ki + 1);
    with Continue -> ()
  done with Break -> ());
  row := (List.append (!row) [(Obj.magic (!sum) : float)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  output := (List.append (!output) [(Obj.magic (!row) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : float list list); raise Return
  with Return -> !__ret)

and relu_matrix m =
  let __ret = ref ([] : (float list) list) in
  (try
  let out = ref (([] : (float list) list)) in
  (try List.iter (fun row ->
    try
  let new_row = ref (([] : (float) list)) in
  (try List.iter (fun v ->
    try
  if (v > 0.0) then (
  new_row := (List.append (!new_row) [(Obj.magic (v) : float)]);
  ) else (
  new_row := (List.append (!new_row) [(Obj.magic (0.0) : float)]);
  );
    with Continue -> ()) (row) with Break -> ());
  out := (List.append (!out) [(Obj.magic (!new_row) : float list)]);
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and max_pool2x2 m =
  let __ret = ref ([] : (float list) list) in
  (try
  let rows = List.length (m) in
  let cols = List.length (List.nth (m) (0)) in
  let out = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let new_row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < cols) do
    try
  let max_val = ref (List.nth (List.nth (m) (!i)) (!j)) in
  if (List.nth (List.nth (m) (!i)) ((!j + 1)) > !max_val) then (
  max_val := List.nth (List.nth (m) (!i)) ((!j + 1));
  );
  if (List.nth (List.nth (m) ((!i + 1))) (!j) > !max_val) then (
  max_val := List.nth (List.nth (m) ((!i + 1))) (!j);
  );
  if (List.nth (List.nth (m) ((!i + 1))) ((!j + 1)) > !max_val) then (
  max_val := List.nth (List.nth (m) ((!i + 1))) ((!j + 1));
  );
  new_row := (List.append (!new_row) [(Obj.magic (!max_val) : float)]);
  j := (!j + 2);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!new_row) : float list)]);
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : float list list); raise Return
  with Return -> !__ret)

and flatten m =
  let __ret = ref ([] : (float) list) in
  (try
  let res = ref (([] : (float) list)) in
  (try List.iter (fun row ->
    try
  (try List.iter (fun v ->
    try
  res := (List.append (!res) [(Obj.magic (v) : float)]);
    with Continue -> ()) (row) with Break -> ());
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and dense inputs weights bias =
  let __ret = ref 0.0 in
  (try
  let bias = (Obj.magic bias : float) in
  let s = ref (bias) in
  let i = ref (0) in
  (try while (!i < List.length (inputs)) do
    try
  s := (!s +. (List.nth (inputs) (!i) *. List.nth (weights) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : float); raise Return
  with Return -> !__ret)

and exp_approx x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let sum = ref (1.0) in
  let term = ref (1.0) in
  let i = ref (1) in
  (try while (!i <= 10) do
    try
  term := ((!term *. x) /. float_of_int (!i));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and sigmoid x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((1.0 /. (1.0 +. exp_approx (Obj.repr ((-.(x))))))) : float); raise Return
  with Return -> !__ret)


let image = ref ([[0.0; 1.0; 1.0; 0.0; 0.0; 0.0]; [0.0; 1.0; 1.0; 0.0; 0.0; 0.0]; [0.0; 0.0; 1.0; 1.0; 0.0; 0.0]; [0.0; 0.0; 1.0; 1.0; 0.0; 0.0]; [0.0; 0.0; 0.0; 0.0; 0.0; 0.0]; [0.0; 0.0; 0.0; 0.0; 0.0; 0.0]])
let kernel = ref ([[1.0; 0.0; (-.(1.0))]; [1.0; 0.0; (-.(1.0))]; [1.0; 0.0; (-.(1.0))]])
let conv = ref (conv2d (!image) (!kernel))
let activated = ref (relu_matrix (!conv))
let pooled = ref (max_pool2x2 (!activated))
let flat = ref (flatten (!pooled))
let weights = ref ([0.5; (-.(0.4)); 0.3; 0.1])
let bias = 0.0
let () =
  let mem_start = _mem () in
  let start = _now () in
  let output = dense (!flat) (!weights) (Obj.repr (bias)) in
  let probability = sigmoid (Obj.repr (output)) in
  if (probability >= 0.5) then (
  print_endline ("Abnormality detected");
  ) else (
  print_endline ("Normal");
  );
  print_endline ("Probability:");
  print_endline (Printf.sprintf "%.15f" (probability));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()