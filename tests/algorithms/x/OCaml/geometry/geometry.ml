(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let _pi = 3.141592653589793
let rec make_angle deg =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let deg = (Obj.magic deg : float) in
  if ((deg < 0.0) || (deg > 360.0)) then (
  (failwith ("degrees must be between 0 and 360"));
  );
  __ret := (Obj.magic ([(__str ("degrees"), Obj.repr (deg))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and make_side length angle =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let length = (Obj.magic length : float) in
  if (length <= 0.0) then (
  (failwith ("length must be positive"));
  );
  __ret := (Obj.magic ([(__str ("length"), Obj.repr (length)); (__str ("angle"), Obj.repr (angle)); (__str ("next"), Obj.repr (-(1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and ellipse_area e =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic (((_pi *. (Obj.obj (List.assoc (__str ("major")) (e) : Obj.t) : float)) *. (Obj.obj (List.assoc (__str ("minor")) (e) : Obj.t) : float))) : float); raise Return
  with Return -> !__ret)

and ellipse_perimeter e =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic ((_pi *. ((Obj.obj (List.assoc (__str ("major")) (e) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("minor")) (e) : Obj.t) : float)))) : float); raise Return
  with Return -> !__ret)

and circle_area c =
  let __ret = ref 0.0 in
  (try
  let e = [(__str ("major"), Obj.repr ((Obj.obj (List.assoc (__str ("radius")) (c) : Obj.t) : float))); (__str ("minor"), Obj.repr ((Obj.obj (List.assoc (__str ("radius")) (c) : Obj.t) : float)))] in
  let area = ellipse_area (e) in
  __ret := (Obj.magic (area) : float); raise Return
  with Return -> !__ret)

and circle_perimeter c =
  let __ret = ref 0.0 in
  (try
  let e = [(__str ("major"), Obj.repr ((Obj.obj (List.assoc (__str ("radius")) (c) : Obj.t) : float))); (__str ("minor"), Obj.repr ((Obj.obj (List.assoc (__str ("radius")) (c) : Obj.t) : float)))] in
  let per = ellipse_perimeter (e) in
  __ret := (Obj.magic (per) : float); raise Return
  with Return -> !__ret)

and circle_diameter c =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("radius")) (c) : Obj.t) : float) *. 2.0)) : float); raise Return
  with Return -> !__ret)

and circle_max_parts num_cuts =
  let __ret = ref 0.0 in
  (try
  let num_cuts = (Obj.magic num_cuts : float) in
  if (num_cuts < 0.0) then (
  (failwith ("num_cuts must be positive"));
  );
  __ret := (Obj.magic ((((num_cuts +. 2.0) +. (num_cuts *. num_cuts)) *. 0.5)) : float); raise Return
  with Return -> !__ret)

and make_polygon () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let s = ref (([] : ((string * Obj.t) list) list)) in
  __ret := (Obj.magic ([(__str ("sides"), Obj.repr (!s))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and polygon_add_side p s =
  let __ret = ref (Obj.magic 0) in
  (try
  p := ((__str ("sides"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("sides")) (!p) : Obj.t) : (string * Obj.t) list list)) [(Obj.magic (s) : (string * Obj.t) list)]))) :: List.remove_assoc (__str ("sides")) (Obj.magic (!p) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and polygon_get_side p index =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc (__str ("sides")) (p) : Obj.t) : (string * Obj.t) list list)) (index)) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and polygon_set_side p index s =
  let __ret = ref (Obj.magic 0) in
  (try
  let index = (Obj.magic index : int) in
  let tmp = ref ((Obj.obj (List.assoc (__str ("sides")) (!p) : Obj.t) : (string * Obj.t) list list)) in
  tmp := (List.mapi (fun __i __x -> if __i = index then s else __x) (!tmp));
  p := ((__str ("sides"), Obj.repr (!tmp)) :: List.remove_assoc (__str ("sides")) (Obj.magic (!p) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and make_rectangle short_len long_len =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let short_len = (Obj.magic short_len : float) in
  let long_len = (Obj.magic long_len : float) in
  if ((short_len <= 0.0) || (long_len <= 0.0)) then (
  (failwith ("length must be positive"));
  );
  let short = make_side (Obj.repr (short_len)) (make_angle (Obj.repr (90.0))) in
  let long = make_side (Obj.repr (long_len)) (make_angle (Obj.repr (90.0))) in
  let p = ref (make_polygon ()) in
  ignore (polygon_add_side (p) (short));
  ignore (polygon_add_side (p) (long));
  __ret := (Obj.magic ([(__str ("short_side"), Obj.repr (short)); (__str ("long_side"), Obj.repr (long)); (__str ("poly"), Obj.repr (!p))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and rectangle_perimeter r =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic ((((Obj.obj (List.assoc (__str ("length")) ((Obj.obj (List.assoc (__str ("short_side")) (r) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("length")) ((Obj.obj (List.assoc (__str ("long_side")) (r) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : float)) *. 2.0)) : float); raise Return
  with Return -> !__ret)

and rectangle_area r =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("length")) ((Obj.obj (List.assoc (__str ("short_side")) (r) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("length")) ((Obj.obj (List.assoc (__str ("long_side")) (r) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : float))) : float); raise Return
  with Return -> !__ret)

and make_square side_len =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let side_len = (Obj.magic side_len : float) in
  let rect = make_rectangle (Obj.repr (side_len)) (Obj.repr (side_len)) in
  __ret := (Obj.magic ([(__str ("side"), Obj.repr ((Obj.obj (List.assoc (__str ("short_side")) (rect) : Obj.t) : ( string * Obj.t ) list))); (__str ("rect"), Obj.repr (rect))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and square_perimeter s =
  let __ret = ref 0.0 in
  (try
  let p = rectangle_perimeter ((Obj.magic (Obj.obj (List.assoc (__str ("rect")) (s) : Obj.t) : ( string * Obj.t ) list) : (string * Obj.t) list)) in
  __ret := (Obj.magic (p) : float); raise Return
  with Return -> !__ret)

and square_area s =
  let __ret = ref 0.0 in
  (try
  let a = rectangle_area ((Obj.magic (Obj.obj (List.assoc (__str ("rect")) (s) : Obj.t) : ( string * Obj.t ) list) : (string * Obj.t) list)) in
  __ret := (Obj.magic (a) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = make_angle (Obj.repr (90.0)) in
  print_endline (string_of_float (Obj.obj (List.assoc (__str ("degrees")) (a) : Obj.t) : float));
  let s = make_side (Obj.repr (5.0)) (a) in
  print_endline (string_of_float (Obj.obj (List.assoc (__str ("length")) (s) : Obj.t) : float));
  let e = [(__str ("major"), Obj.repr (5.0)); (__str ("minor"), Obj.repr (10.0))] in
  print_endline (string_of_float (ellipse_area (e)));
  print_endline (string_of_float (ellipse_perimeter (e)));
  let c = [(__str ("radius"), Obj.repr (5.0))] in
  print_endline (string_of_float (circle_area (c)));
  print_endline (string_of_float (circle_perimeter (c)));
  print_endline (string_of_float (circle_diameter (c)));
  print_endline (string_of_float (circle_max_parts (Obj.repr (7.0))));
  let r = make_rectangle (Obj.repr (5.0)) (Obj.repr (10.0)) in
  print_endline (string_of_float (rectangle_perimeter (r)));
  print_endline (string_of_float (rectangle_area (r)));
  let q = make_square (Obj.repr (5.0)) in
  print_endline (string_of_float (square_perimeter (q)));
  print_endline (string_of_float (square_area (q)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
