(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec n_choose_k n k =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let k = (Obj.magic k : int) in
  if ((k < 0) || (k > n)) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if ((k = 0) || (k = n)) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  let result = ref (1.0) in
  let i = ref (1) in
  (try while (!i <= k) do
    try
  result := ((!result *. (1.0 *. float_of_int (((n - k) + !i)))) /. (1.0 *. float_of_int (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and pow_float base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and basis_function points t =
  let __ret = ref ([] : (float) list) in
  (try
  let t = (Obj.magic t : float) in
  let degree = (List.length (points) - 1) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i <= degree) do
    try
  let coef = n_choose_k (Obj.repr (degree)) (Obj.repr (!i)) in
  let term = (pow_float (Obj.repr ((1.0 -. t))) (Obj.repr ((degree - !i))) *. pow_float (Obj.repr (t)) (Obj.repr (!i))) in
  res := (Obj.magic (List.append (!res) [(Obj.magic ((coef *. term)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and bezier_point points t =
  let __ret = ref ([] : (float) list) in
  (try
  let t = (Obj.magic t : float) in
  let basis = ref (basis_function (points) (Obj.repr (t))) in
  let x = ref (0.0) in
  let y = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (points)) do
    try
  x := (!x +. (List.nth (!basis) (!i) *. List.nth (List.nth (points) (!i)) (0)));
  y := (!y +. (List.nth (!basis) (!i) *. List.nth (List.nth (points) (!i)) (1)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([!x; !y]) : float list); raise Return
  with Return -> !__ret)


let control = ref ([[1.0; 1.0]; [1.0; 2.0]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (basis_function (!control) (Obj.repr (0.0)))));
  print_endline ((__str (basis_function (!control) (Obj.repr (1.0)))));
  print_endline ((__str (bezier_point (!control) (Obj.repr (0.0)))));
  print_endline ((__str (bezier_point (!control) (Obj.repr (1.0)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
