(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref ((Obj.magic x : int)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and modf x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (floor ((x /. m)) *. m))) : float); raise Return
  with Return -> !__ret)

and sin_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = (2.0 *. float_of_int (!i)) in
  let k2 = (k1 +. 1.0) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cos_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = ((2.0 *. float_of_int (!i)) -. 1.0) in
  let k2 = (2.0 *. float_of_int (!i)) in
  term := ((((-.(!term)) *. x) *. x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and convert_to_2d x y z scale distance =
  let __ret = ref ([] : (float) list) in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  let z = (Obj.magic z : float) in
  let scale = (Obj.magic scale : float) in
  let distance = (Obj.magic distance : float) in
  let projected_x = (((x *. distance) /. (z +. distance)) *. scale) in
  let projected_y = (((y *. distance) /. (z +. distance)) *. scale) in
  __ret := (Obj.magic ([projected_x; projected_y]) : float list); raise Return
  with Return -> !__ret)

and rotate x y z axis angle =
  let __ret = ref ([] : (float) list) in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  let z = (Obj.magic z : float) in
  angle := (Obj.magic !angle : float);
  let angle = ref ((((modf (Obj.repr (!angle)) (Obj.repr (360.0)) /. 450.0) *. 180.0) /. _pi)) in
  angle := modf (Obj.repr (!angle)) (Obj.repr ((2.0 *. _pi)));
  if (!angle > _pi) then (
  angle := (!angle -. (2.0 *. _pi));
  );
  if (axis = "z") then (
  let new_x = ((x *. cos_taylor (Obj.repr (!angle))) -. (y *. sin_taylor (Obj.repr (!angle)))) in
  let new_y = ((y *. cos_taylor (Obj.repr (!angle))) +. (x *. sin_taylor (Obj.repr (!angle)))) in
  let new_z = z in
  __ret := (Obj.magic ([new_x; new_y; new_z]) : float list); raise Return
  );
  if (axis = "x") then (
  let new_y = ((y *. cos_taylor (Obj.repr (!angle))) -. (z *. sin_taylor (Obj.repr (!angle)))) in
  let new_z = ((z *. cos_taylor (Obj.repr (!angle))) +. (y *. sin_taylor (Obj.repr (!angle)))) in
  let new_x = x in
  __ret := (Obj.magic ([new_x; new_y; new_z]) : float list); raise Return
  );
  if (axis = "y") then (
  let new_x = ((x *. cos_taylor (Obj.repr (!angle))) -. (z *. sin_taylor (Obj.repr (!angle)))) in
  let new_z = ((z *. cos_taylor (Obj.repr (!angle))) +. (x *. sin_taylor (Obj.repr (!angle)))) in
  let new_y = y in
  __ret := (Obj.magic ([new_x; new_y; new_z]) : float list); raise Return
  );
  print_endline ("not a valid axis, choose one of 'x', 'y', 'z'");
  __ret := (Obj.magic ([0.0; 0.0; 0.0]) : float list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (convert_to_2d (Obj.repr (1.0)) (Obj.repr (2.0)) (Obj.repr (3.0)) (Obj.repr (10.0)) (Obj.repr (10.0)))));
  print_endline ((__str (rotate (Obj.repr (1.0)) (Obj.repr (2.0)) (Obj.repr (3.0)) ("y") (ref (90.0)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
