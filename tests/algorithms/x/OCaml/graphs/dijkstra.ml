(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _g = ref ([(__str ("A"), Obj.repr ([(__str ("B"), 2); (__str ("C"), 5)])); (__str ("B"), Obj.repr ([(__str ("A"), 2); (__str ("D"), 3); (__str ("E"), 1); (__str ("F"), 1)])); (__str ("C"), Obj.repr ([(__str ("A"), 5); (__str ("F"), 3)])); (__str ("D"), Obj.repr ([(__str ("B"), 3)])); (__str ("E"), Obj.repr ([(__str ("B"), 4); (__str ("F"), 3)])); (__str ("F"), Obj.repr ([(__str ("C"), 3); (__str ("E"), 3)]))])
let heap = ref ([[(__str ("node"), Obj.repr ("E")); (__str ("cost"), Obj.repr (0))]])
let visited = ref ([] : (string * bool) list)
let result = ref (-(1))
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (List.length (!heap) > 0) do
    try
  let best_idx = ref (0) in
  let i = ref (1) in
  (try while (!i < List.length (!heap)) do
    try
  if ((Obj.obj (List.assoc (__str ("cost")) (List.nth (!heap) (!i)) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("cost")) (List.nth (!heap) (!best_idx)) : Obj.t) : int)) then (
  best_idx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let best = ref (List.nth (!heap) (!best_idx)) in
  let new_heap = ref (([] : ((string * Obj.t) list) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!heap)) do
    try
  if (!j <> !best_idx) then (
  new_heap := (Obj.magic (List.append (!new_heap) [(Obj.magic (List.nth (!heap) (!j)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  heap := (Obj.magic !new_heap : (string * Obj.t) list list);
  let u = (Obj.obj (List.assoc (__str ("node")) (!best) : Obj.t) : string) in
  let cost = (Obj.obj (List.assoc (__str ("cost")) (!best) : Obj.t) : int) in
  if (List.mem_assoc u !visited) then (
  raise Continue;
  );
  visited := ((__str (u), true) :: List.remove_assoc (__str (u)) (!visited));
  if (u = "C") then (
  result := cost;
  raise Break;
  );
  (try List.iter (fun (v, _) ->
    try
  if (List.mem_assoc v !visited) then (
  raise Continue;
  );
  let next_cost = (cost + List.assoc (__str (v)) (List.assoc (__str (u)) (!_g))) in
  heap := (Obj.magic (List.append (!heap) [(Obj.magic ([(__str ("node"), Obj.repr (v)); (__str ("cost"), Obj.repr (next_cost))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()) (List.assoc (__str (u)) (!_g)) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  print_endline (string_of_int !result);
  let _g2 = ref ([(__str ("B"), Obj.repr ([(__str ("C"), 1)])); (__str ("C"), Obj.repr ([(__str ("D"), 1)])); (__str ("D"), Obj.repr ([(__str ("F"), 1)])); (__str ("E"), Obj.repr ([(__str ("B"), 1); (__str ("F"), 3)])); (__str ("F"), Obj.repr ([]))]) in
  let heap2 = ref ([[(__str ("node"), Obj.repr ("E")); (__str ("cost"), Obj.repr (0))]]) in
  let visited2 = ref ([] : (string * bool) list) in
  let result2 = ref (-(1)) in
  (try while (List.length (!heap2) > 0) do
    try
  let best2_idx = ref (0) in
  let i2 = ref (1) in
  (try while (!i2 < List.length (!heap2)) do
    try
  if ((Obj.obj (List.assoc (__str ("cost")) (List.nth (!heap2) (!i2)) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("cost")) (List.nth (!heap2) (!best2_idx)) : Obj.t) : int)) then (
  best2_idx := !i2;
  );
  i2 := (!i2 + 1);
    with Continue -> ()
  done with Break -> ());
  let best2 = ref (List.nth (!heap2) (!best2_idx)) in
  let new_heap2 = ref (([] : ((string * Obj.t) list) list)) in
  let j2 = ref (0) in
  (try while (!j2 < List.length (!heap2)) do
    try
  if (!j2 <> !best2_idx) then (
  new_heap2 := (Obj.magic (List.append (!new_heap2) [(Obj.magic (List.nth (!heap2) (!j2)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  j2 := (!j2 + 1);
    with Continue -> ()
  done with Break -> ());
  heap2 := (Obj.magic !new_heap2 : (string * Obj.t) list list);
  let u2 = (Obj.obj (List.assoc (__str ("node")) (!best2) : Obj.t) : string) in
  let cost2 = (Obj.obj (List.assoc (__str ("cost")) (!best2) : Obj.t) : int) in
  if (List.mem_assoc u2 !visited2) then (
  raise Continue;
  );
  visited2 := ((__str (u2), true) :: List.remove_assoc (__str (u2)) (!visited2));
  if (u2 = "F") then (
  result2 := cost2;
  raise Break;
  );
  (try List.iter (fun (v2, _) ->
    try
  if (List.mem_assoc v2 !visited2) then (
  raise Continue;
  );
  let next_cost2 = (cost2 + List.assoc (__str (v2)) (List.assoc (__str (u2)) (!_g2))) in
  heap2 := (Obj.magic (List.append (!heap2) [(Obj.magic ([(__str ("node"), Obj.repr (v2)); (__str ("cost"), Obj.repr (next_cost2))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()) (List.assoc (__str (u2)) (!_g2)) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  print_endline (string_of_int !result2);
  let _g3 = ref ([(__str ("B"), Obj.repr ([(__str ("C"), 1)])); (__str ("C"), Obj.repr ([(__str ("D"), 1)])); (__str ("D"), Obj.repr ([(__str ("F"), 1)])); (__str ("E"), Obj.repr ([(__str ("B"), 1); (__str ("G"), 2)])); (__str ("F"), Obj.repr ([])); (__str ("G"), Obj.repr ([(__str ("F"), 1)]))]) in
  let heap3 = ref ([[(__str ("node"), Obj.repr ("E")); (__str ("cost"), Obj.repr (0))]]) in
  let visited3 = ref ([] : (string * bool) list) in
  let result3 = ref (-(1)) in
  (try while (List.length (!heap3) > 0) do
    try
  let best3_idx = ref (0) in
  let i3 = ref (1) in
  (try while (!i3 < List.length (!heap3)) do
    try
  if ((Obj.obj (List.assoc (__str ("cost")) (List.nth (!heap3) (!i3)) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("cost")) (List.nth (!heap3) (!best3_idx)) : Obj.t) : int)) then (
  best3_idx := !i3;
  );
  i3 := (!i3 + 1);
    with Continue -> ()
  done with Break -> ());
  let best3 = ref (List.nth (!heap3) (!best3_idx)) in
  let new_heap3 = ref (([] : ((string * Obj.t) list) list)) in
  let j3 = ref (0) in
  (try while (!j3 < List.length (!heap3)) do
    try
  if (!j3 <> !best3_idx) then (
  new_heap3 := (Obj.magic (List.append (!new_heap3) [(Obj.magic (List.nth (!heap3) (!j3)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  j3 := (!j3 + 1);
    with Continue -> ()
  done with Break -> ());
  heap3 := (Obj.magic !new_heap3 : (string * Obj.t) list list);
  let u3 = (Obj.obj (List.assoc (__str ("node")) (!best3) : Obj.t) : string) in
  let cost3 = (Obj.obj (List.assoc (__str ("cost")) (!best3) : Obj.t) : int) in
  if (List.mem_assoc u3 !visited3) then (
  raise Continue;
  );
  visited3 := ((__str (u3), true) :: List.remove_assoc (__str (u3)) (!visited3));
  if (u3 = "F") then (
  result3 := cost3;
  raise Break;
  );
  (try List.iter (fun (v3, _) ->
    try
  if (List.mem_assoc v3 !visited3) then (
  raise Continue;
  );
  let next_cost3 = (cost3 + List.assoc (__str (v3)) (List.assoc (__str (u3)) (!_g3))) in
  heap3 := (Obj.magic (List.append (!heap3) [(Obj.magic ([(__str ("node"), Obj.repr (v3)); (__str ("cost"), Obj.repr (next_cost3))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()) (List.assoc (__str (u3)) (!_g3)) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  print_endline (string_of_int !result3);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
