(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec fill_row current_row row_above =
  let __ret = ref ([] : (int) list) in
  (try
  current_row := (Obj.magic !current_row : int list);
  let row_above = (Obj.magic row_above : int list) in
  current_row := (List.mapi (fun __i __x -> if __i = 0 then (List.nth (!current_row) (0) + List.nth (row_above) (0)) else __x) (!current_row));
  let cell_n = ref (1) in
  (try while (!cell_n < List.length (!current_row)) do
    try
  let left = List.nth (!current_row) ((!cell_n - 1)) in
  let up = List.nth (row_above) (!cell_n) in
  if (left < up) then (
  current_row := (List.mapi (fun __i __x -> if __i = !cell_n then (List.nth (!current_row) (!cell_n) + left) else __x) (!current_row));
  ) else (
  current_row := (List.mapi (fun __i __x -> if __i = !cell_n then (List.nth (!current_row) (!cell_n) + up) else __x) (!current_row));
  );
  cell_n := (!cell_n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!current_row) : int list); raise Return
  with Return -> !__ret)

and min_path_sum grid =
  let __ret = ref 0 in
  (try
  grid := (Obj.magic !grid : int list list);
  if ((List.length (!grid) = 0) || (List.length (List.nth (!grid) (0)) = 0)) then (
  (failwith ("The grid does not contain the appropriate information"));
  );
  let cell_n = ref (1) in
  (try while (!cell_n < List.length (List.nth (!grid) (0))) do
    try
  grid := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = !cell_n then (List.nth (List.nth (!grid) (0)) (!cell_n) + List.nth (List.nth (!grid) (0)) ((!cell_n - 1))) else __x) (List.nth (!grid) (0))) else __x) (!grid));
  cell_n := (!cell_n + 1);
    with Continue -> ()
  done with Break -> ());
  let row_above = ref (List.nth (!grid) (0)) in
  let row_n = ref (1) in
  (try while (!row_n < List.length (!grid)) do
    try
  let current_row = ref (List.nth (!grid) (!row_n)) in
  grid := (List.mapi (fun __i __x -> if __i = !row_n then fill_row (current_row) (!row_above) else __x) (!grid));
  row_above := (Obj.magic List.nth (!grid) (!row_n) : int list);
  row_n := (!row_n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (List.nth (!grid) ((List.length (!grid) - 1))) ((List.length (List.nth (!grid) (0)) - 1))) : int); raise Return
  with Return -> !__ret)


let grid1 = ref ([[1; 3; 1]; [1; 5; 1]; [4; 2; 1]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (min_path_sum (grid1))));
  let grid2 = ref ([[1; 0; 5; 6; 7]; [8; 9; 0; 4; 2]; [4; 4; 4; 5; 1]; [9; 6; 3; 1; 0]; [8; 4; 3; 2; 7]]) in
  print_endline ((string_of_int (min_path_sum (grid2))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
