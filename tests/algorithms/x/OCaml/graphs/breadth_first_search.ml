(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec add_edge graph from to_ =
  let __ret = ref (Obj.magic 0) in
  (try
  graph := (Obj.magic !graph : (string * int list) list);
  let from = (Obj.magic from : int) in
  let to_ = (Obj.magic to_ : int) in
  if (List.mem_assoc from !graph) then (
  graph := ((__str (from), (List.append (List.assoc (__str (from)) (!graph)) [(Obj.magic (to_) : int)])) :: List.remove_assoc (__str (from)) (!graph));
  ) else (
  graph := ((__str (from), [to_]) :: List.remove_assoc (__str (from)) (!graph));
  );
    !__ret
  with Return -> !__ret)

and print_graph graph =
  let __ret = ref (Obj.magic 0) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  (try List.iter (fun v ->
    try
  let adj = ref (List.assoc (__str (v)) (graph)) in
  let line = ref ((__show (v) ^ "  :  ")) in
  let i = ref (0) in
  (try while (!i < List.length (!adj)) do
    try
  line := (!line ^ (string_of_int (List.nth (!adj) (!i))));
  if (!i < (List.length (!adj) - 1)) then (
  line := (!line ^ " -> ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
    with Continue -> ()) ((List.map fst graph)) with Break -> ());
    !__ret
  with Return -> !__ret)

and bfs graph start =
  let __ret = ref ([] : (int) list) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  let start = (Obj.magic start : int) in
  let visited = ref ([] : (string * bool) list) in
  let queue = ref (([] : (int) list)) in
  let order = ref (([] : (int) list)) in
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (start) : int)]) : int list);
  visited := ((__str (start), true) :: List.remove_assoc (__str (start)) (!visited));
  let head = ref (0) in
  (try while (!head < List.length (!queue)) do
    try
  let vertex = List.nth (!queue) (!head) in
  head := (!head + 1);
  order := (Obj.magic (List.append (!order) [(Obj.magic (vertex) : int)]) : int list);
  let neighbors = ref (List.assoc (__str (vertex)) (graph)) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  let neighbor = List.nth (!neighbors) (!i) in
  if not ((List.mem_assoc neighbor !visited)) then (
  visited := ((__str (neighbor), true) :: List.remove_assoc (__str (neighbor)) (!visited));
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (neighbor) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)


let g = ref ([] : (string * int list) list)
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (add_edge (g) (Obj.repr (0)) (Obj.repr (1)));
  ignore (add_edge (g) (Obj.repr (0)) (Obj.repr (2)));
  ignore (add_edge (g) (Obj.repr (1)) (Obj.repr (2)));
  ignore (add_edge (g) (Obj.repr (2)) (Obj.repr (0)));
  ignore (add_edge (g) (Obj.repr (2)) (Obj.repr (3)));
  ignore (add_edge (g) (Obj.repr (3)) (Obj.repr (3)));
  ignore (print_graph ((Obj.magic !g : (string * int list) list)));
  print_endline (__show_list (bfs ((Obj.magic !g : (string * int list) list)) (Obj.repr (2))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
