(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec rand () =
  let __ret = ref 0 in
  (try
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)

and random () =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic (((1.0 *. float_of_int (rand ())) /. 2147483648.0)) : float); raise Return
  with Return -> !__ret)

and get_nodes trans =
  let __ret = ref ([] : (string) list) in
  (try
  let trans = (Obj.magic trans : (string * Obj.t) list list) in
  let seen = ref ([] : (string * bool) list) in
  (try List.iter (fun t ->
    try
  seen := ((__str ((Obj.obj (List.assoc (__str ("src")) (t) : Obj.t) : string)), true) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("src")) (t) : Obj.t) : string))) (!seen));
  seen := ((__str ((Obj.obj (List.assoc (__str ("dst")) (t) : Obj.t) : string)), true) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("dst")) (t) : Obj.t) : string))) (!seen));
    with Continue -> ()) (trans) with Break -> ());
  let nodes = ref (([] : (string) list)) in
  (try List.iter (fun k ->
    try
  nodes := (Obj.magic (List.append (!nodes) [(Obj.magic ((Obj.magic k : string)) : string)]) : string list);
    with Continue -> ()) ((List.map fst !seen)) with Break -> ());
  __ret := (Obj.magic (!nodes) : string list); raise Return
  with Return -> !__ret)

and transition current trans =
  let __ret = ref "" in
  (try
  let trans = (Obj.magic trans : (string * Obj.t) list list) in
  let current_probability = ref (0.0) in
  let random_value = random () in
  (try List.iter (fun t ->
    try
  if ((Obj.obj (List.assoc (__str ("src")) (t) : Obj.t) : string) = current) then (
  current_probability := (!current_probability +. (Obj.obj (List.assoc (__str ("prob")) (t) : Obj.t) : float));
  if (!current_probability > random_value) then (
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("dst")) (t) : Obj.t) : string)) : string); raise Return
  );
  );
    with Continue -> ()) (trans) with Break -> ());
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

and get_transitions start trans steps =
  let __ret = ref ([] : (string * int) list) in
  (try
  let trans = (Obj.magic trans : (string * Obj.t) list list) in
  let steps = (Obj.magic steps : int) in
  let visited = ref ([] : (string * int) list) in
  (try List.iter (fun node ->
    try
  let one = ref (1) in
  visited := ((__str (node), !one) :: List.remove_assoc (__str (node)) (!visited));
    with Continue -> ()) (get_nodes (trans)) with Break -> ());
  let node = ref (start) in
  let i = ref (0) in
  (try while (!i < steps) do
    try
  node := transition (!node) (trans);
  let count = ref (List.assoc (__str (!node)) (!visited)) in
  count := (!count + 1);
  visited := ((__str (!node), !count) :: List.remove_assoc (__str (!node)) (!visited));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!visited) : (string * int) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let transitions = ref ([[(__str ("src"), Obj.repr ("a")); (__str ("dst"), Obj.repr ("a")); (__str ("prob"), Obj.repr (0.9))]; [(__str ("src"), Obj.repr ("a")); (__str ("dst"), Obj.repr ("b")); (__str ("prob"), Obj.repr (0.075))]; [(__str ("src"), Obj.repr ("a")); (__str ("dst"), Obj.repr ("c")); (__str ("prob"), Obj.repr (0.025))]; [(__str ("src"), Obj.repr ("b")); (__str ("dst"), Obj.repr ("a")); (__str ("prob"), Obj.repr (0.15))]; [(__str ("src"), Obj.repr ("b")); (__str ("dst"), Obj.repr ("b")); (__str ("prob"), Obj.repr (0.8))]; [(__str ("src"), Obj.repr ("b")); (__str ("dst"), Obj.repr ("c")); (__str ("prob"), Obj.repr (0.05))]; [(__str ("src"), Obj.repr ("c")); (__str ("dst"), Obj.repr ("a")); (__str ("prob"), Obj.repr (0.25))]; [(__str ("src"), Obj.repr ("c")); (__str ("dst"), Obj.repr ("b")); (__str ("prob"), Obj.repr (0.25))]; [(__str ("src"), Obj.repr ("c")); (__str ("dst"), Obj.repr ("c")); (__str ("prob"), Obj.repr (0.5))]]) in
  let result = ref (get_transitions ("a") ((Obj.magic !transitions : (string * Obj.t) list list)) (Obj.repr (5000))) in
  print_endline ((((((string_of_int (List.assoc (__str ("a")) (!result))) ^ " ") ^ (string_of_int (List.assoc (__str ("b")) (!result)))) ^ " ") ^ (string_of_int (List.assoc (__str ("c")) (!result)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
