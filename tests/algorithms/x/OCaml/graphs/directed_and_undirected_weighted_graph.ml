(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec list_contains_int xs x =
  let __ret = ref false in
  (try
  let xs = (Obj.magic xs : int list) in
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and edge_exists edges w v =
  let __ret = ref false in
  (try
  let edges = (Obj.magic edges : int list list) in
  let w = (Obj.magic w : int) in
  let v = (Obj.magic v : int) in
  let i = ref (0) in
  (try while (!i < List.length (edges)) do
    try
  if ((List.nth (List.nth (edges) (!i)) (0) = w) && (List.nth (List.nth (edges) (!i)) (1) = v)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and first_key m =
  let __ret = ref 0 in
  (try
  let m = (Obj.magic m : (string * int list list) list) in
  (try List.iter (fun (k, _) ->
    try
  __ret := (Obj.magic (k) : int); raise Return
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and rand_range low high =
  let __ret = ref 0 in
  (try
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  __ret := (Obj.magic ((((_now () mod (high - low) + (high - low)) mod (high - low)) + low)) : int); raise Return
  with Return -> !__ret)

and dg_make_graph () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("graph"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dg_add_pair g u v w =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  let w = (Obj.magic w : int) in
  if (List.mem_assoc u (Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) then (
  let edges = ref (List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list))) in
  if not (edge_exists (!edges) (Obj.repr (w)) (Obj.repr (v))) then (
  edges := (Obj.magic (List.append (!edges) [(Obj.magic ([w; v]) : int list)]) : int list list);
  let m = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m := ((__str (u), !edges) :: List.remove_assoc (__str (u)) (!m));
  g := ((__str ("graph"), Obj.repr (!m)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  ) else (
  let m0 = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m0 := ((__str (u), [[w; v]]) :: List.remove_assoc (__str (u)) (!m0));
  g := ((__str ("graph"), Obj.repr (!m0)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  if not ((List.mem_assoc v (Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list))) then (
  let m1 = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m1 := ((__str (v), []) :: List.remove_assoc (__str (v)) (!m1));
  g := ((__str ("graph"), Obj.repr (!m1)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
    !__ret
  with Return -> !__ret)

and dg_remove_pair g u v =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  if (List.mem_assoc u (Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) then (
  let edges = ref (List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list))) in
  let new_edges = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  if (List.nth (List.nth (!edges) (!i)) (1) <> v) then (
  new_edges := (Obj.magic (List.append (!new_edges) [(Obj.magic (List.nth (!edges) (!i)) : int list)]) : int list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let m = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m := ((__str (u), !new_edges) :: List.remove_assoc (__str (u)) (!m));
  g := ((__str ("graph"), Obj.repr (!m)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
    !__ret
  with Return -> !__ret)

and dg_all_nodes g =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let res = ref (([] : (int) list)) in
  (try List.iter (fun (k, _) ->
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (k) : int)]) : int list);
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and dg_dfs_util g node visited order d =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  visited := (Obj.magic !visited : (string * bool) list);
  order := (Obj.magic !order : int list);
  let d = (Obj.magic d : int) in
  visited := ((__str (node), true) :: List.remove_assoc (__str (node)) (!visited));
  order := (Obj.magic (List.append (!order) [(Obj.magic (node) : int)]) : int list);
  if ((d <> -(1)) && (node = d)) then (
  __ret := (Obj.magic (!order) : int list); raise Return
  );
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  order := (Obj.magic dg_dfs_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (neigh)) (visited) (order) (Obj.repr (d)) : int list);
  if ((d <> -(1)) && (List.nth (!order) ((List.length (!order) - 1)) = d)) then (
  __ret := (Obj.magic (!order) : int list); raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and dg_dfs g s d =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let d = (Obj.magic d : int) in
  if (s = d) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let start = if (s = -(2)) then first_key ((Obj.magic (Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list) : (string * int list list) list)) else s in
  let visited = ref ([] : (string * bool) list) in
  let order = ref (([] : (int) list)) in
  order := (Obj.magic dg_dfs_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (start)) (visited) (order) (Obj.repr (d)) : int list);
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and dg_bfs g s =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let queue = ref (([] : (int) list)) in
  let visited = ref ([] : (string * bool) list) in
  let order = ref (([] : (int) list)) in
  let start = if (s = -(2)) then first_key ((Obj.magic (Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list) : (string * int list list) list)) else s in
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (start) : int)]) : int list);
  visited := ((__str (start), true) :: List.remove_assoc (__str (start)) (!visited));
  (try while (List.length (!queue) > 0) do
    try
  let node = List.nth (!queue) (0) in
  queue := (Obj.magic List.of_seq (Seq.take (List.length (!queue) - 1) (Seq.drop 1 (List.to_seq (!queue)))) : int list);
  order := (Obj.magic (List.append (!order) [(Obj.magic (node) : int)]) : int list);
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (neigh) : int)]) : int list);
  visited := ((__str (neigh), true) :: List.remove_assoc (__str (neigh)) (!visited));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and dg_in_degree g u =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let u = (Obj.magic u : int) in
  let count = ref (0) in
  (try List.iter (fun (k, _) ->
    try
  let edges = ref (List.assoc (__str (k)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  if (List.nth (List.nth (!edges) (!i)) (1) = u) then (
  count := (!count + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  __ret := (Obj.magic (!count) : int); raise Return
  with Return -> !__ret)

and dg_out_degree g u =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let u = (Obj.magic u : int) in
  if (List.mem_assoc u (Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) then (
  __ret := (Obj.magic (List.length (List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)))) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and dg_topo_util g node visited stack =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  visited := (Obj.magic !visited : (string * bool) list);
  stack := (Obj.magic !stack : int list);
  visited := ((__str (node), true) :: List.remove_assoc (__str (node)) (!visited));
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  stack := (Obj.magic dg_topo_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (neigh)) (visited) (stack) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  stack := (Obj.magic (List.append (!stack) [(Obj.magic (node) : int)]) : int list);
  __ret := (Obj.magic (!stack) : int list); raise Return
  with Return -> !__ret)

and dg_topological_sort g =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let visited = ref ([] : (string * bool) list) in
  let stack = ref (([] : (int) list)) in
  (try List.iter (fun (k, _) ->
    try
  if not ((List.mem_assoc k !visited)) then (
  stack := (Obj.magic dg_topo_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (k)) (visited) (stack) : int list);
  );
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  let res = ref (([] : (int) list)) in
  let i = ref ((List.length (!stack) - 1)) in
  (try while (!i >= 0) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (!stack) (!i)) : int)]) : int list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and dg_cycle_util g node visited rec_ res =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  visited := (Obj.magic !visited : (string * bool) list);
  rec_ := (Obj.magic !rec_ : (string * bool) list);
  res := (Obj.magic !res : int list);
  visited := ((__str (node), true) :: List.remove_assoc (__str (node)) (!visited));
  rec_ := ((__str (node), true) :: List.remove_assoc (__str (node)) (!rec_));
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  res := (Obj.magic dg_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (neigh)) (visited) (rec_) (res) : int list);
  ) else (
  if List.assoc (__str (neigh)) (!rec_) then (
  if not (list_contains_int (!res) (Obj.repr (neigh))) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (neigh) : int)]) : int list);
  );
  if not (list_contains_int (!res) (Obj.repr (node))) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (node) : int)]) : int list);
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  rec_ := ((__str (node), false) :: List.remove_assoc (__str (node)) (!rec_));
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and dg_cycle_nodes g =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let visited = ref ([] : (string * bool) list) in
  let rec_ = ref ([] : (string * bool) list) in
  let res = ref (([] : (int) list)) in
  (try List.iter (fun (k, _) ->
    try
  if not ((List.mem_assoc k !visited)) then (
  res := (Obj.magic dg_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (k)) (visited) (rec_) (res) : int list);
  );
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and dg_has_cycle_util g node visited rec_ =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  visited := (Obj.magic !visited : (string * bool) list);
  rec_ := (Obj.magic !rec_ : (string * bool) list);
  visited := ((__str (node), true) :: List.remove_assoc (__str (node)) (!visited));
  rec_ := ((__str (node), true) :: List.remove_assoc (__str (node)) (!rec_));
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  if dg_has_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (neigh)) (visited) (rec_) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  ) else (
  if List.assoc (__str (neigh)) (!rec_) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  rec_ := ((__str (node), false) :: List.remove_assoc (__str (node)) (!rec_));
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and dg_has_cycle g =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let visited = ref ([] : (string * bool) list) in
  let rec_ = ref ([] : (string * bool) list) in
  (try List.iter (fun (k, _) ->
    try
  if not ((List.mem_assoc k !visited)) then (
  if dg_has_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (k)) (visited) (rec_) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  );
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and dg_fill_graph_randomly g c =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let c = (Obj.magic c : int) in
  let count = ref (c) in
  if (!count = -(1)) then (
  count := rand_range (Obj.repr (10)) (Obj.repr (10010));
  );
  let i = ref (0) in
  (try while (!i < !count) do
    try
  let edge_count = ref (rand_range (Obj.repr (1)) (Obj.repr (103))) in
  let j = ref (0) in
  (try while (!j < !edge_count) do
    try
  let n = rand_range (Obj.repr (0)) (Obj.repr (!count)) in
  if (n <> !i) then (
  ignore (dg_add_pair (ref (g)) (Obj.repr (!i)) (Obj.repr (n)) (Obj.repr (1)));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and dg_dfs_time g s e =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let e = (Obj.magic e : int) in
  let begin_ = _now () in
  ignore (dg_dfs ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (s)) (Obj.repr (e)));
  let end_ = _now () in
  __ret := (Obj.magic ((end_ - begin_)) : int); raise Return
  with Return -> !__ret)

and dg_bfs_time g s =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let begin_ = _now () in
  ignore (dg_bfs ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (s)));
  let end_ = _now () in
  __ret := (Obj.magic ((end_ - begin_)) : int); raise Return
  with Return -> !__ret)

and g_make_graph () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("graph"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and g_add_pair g u v w =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  let w = (Obj.magic w : int) in
  if (List.mem_assoc u (Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) then (
  let edges = ref (List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list))) in
  if not (edge_exists (!edges) (Obj.repr (w)) (Obj.repr (v))) then (
  edges := (Obj.magic (List.append (!edges) [(Obj.magic ([w; v]) : int list)]) : int list list);
  let m = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m := ((__str (u), !edges) :: List.remove_assoc (__str (u)) (!m));
  g := ((__str ("graph"), Obj.repr (!m)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  ) else (
  let m0 = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m0 := ((__str (u), [[w; v]]) :: List.remove_assoc (__str (u)) (!m0));
  g := ((__str ("graph"), Obj.repr (!m0)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  if (List.mem_assoc v (Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) then (
  let edges2 = ref (List.assoc (__str (v)) ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list))) in
  if not (edge_exists (!edges2) (Obj.repr (w)) (Obj.repr (u))) then (
  edges2 := (Obj.magic (List.append (!edges2) [(Obj.magic ([w; u]) : int list)]) : int list list);
  let m2 = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m2 := ((__str (v), !edges2) :: List.remove_assoc (__str (v)) (!m2));
  g := ((__str ("graph"), Obj.repr (!m2)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  ) else (
  let m3 = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m3 := ((__str (v), [[w; u]]) :: List.remove_assoc (__str (v)) (!m3));
  g := ((__str ("graph"), Obj.repr (!m3)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
    !__ret
  with Return -> !__ret)

and g_remove_pair g u v =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  if (List.mem_assoc u (Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) then (
  let edges = ref (List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list))) in
  let new_edges = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  if (List.nth (List.nth (!edges) (!i)) (1) <> v) then (
  new_edges := (Obj.magic (List.append (!new_edges) [(Obj.magic (List.nth (!edges) (!i)) : int list)]) : int list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let m = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m := ((__str (u), !new_edges) :: List.remove_assoc (__str (u)) (!m));
  g := ((__str ("graph"), Obj.repr (!m)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  if (List.mem_assoc v (Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) then (
  let edges2 = ref (List.assoc (__str (v)) ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list))) in
  let new_edges2 = ref (([] : (int list) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!edges2)) do
    try
  if (List.nth (List.nth (!edges2) (!j)) (1) <> u) then (
  new_edges2 := (Obj.magic (List.append (!new_edges2) [(Obj.magic (List.nth (!edges2) (!j)) : int list)]) : int list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let m2 = ref ((Obj.obj (List.assoc (__str ("graph")) (!g) : Obj.t) : ( string * int list list ) list)) in
  m2 := ((__str (v), !new_edges2) :: List.remove_assoc (__str (v)) (!m2));
  g := ((__str ("graph"), Obj.repr (!m2)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!g) : (string * Obj.t) list));
  );
    !__ret
  with Return -> !__ret)

and g_all_nodes g =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let res = ref (([] : (int) list)) in
  (try List.iter (fun (k, _) ->
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (k) : int)]) : int list);
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and g_dfs_util g node visited order d =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  visited := (Obj.magic !visited : (string * bool) list);
  order := (Obj.magic !order : int list);
  let d = (Obj.magic d : int) in
  visited := ((__str (node), true) :: List.remove_assoc (__str (node)) (!visited));
  order := (Obj.magic (List.append (!order) [(Obj.magic (node) : int)]) : int list);
  if ((d <> -(1)) && (node = d)) then (
  __ret := (Obj.magic (!order) : int list); raise Return
  );
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  order := (Obj.magic g_dfs_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (neigh)) (visited) (order) (Obj.repr (d)) : int list);
  if ((d <> -(1)) && (List.nth (!order) ((List.length (!order) - 1)) = d)) then (
  __ret := (Obj.magic (!order) : int list); raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and g_dfs g s d =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let d = (Obj.magic d : int) in
  if (s = d) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let start = if (s = -(2)) then first_key ((Obj.magic (Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list) : (string * int list list) list)) else s in
  let visited = ref ([] : (string * bool) list) in
  let order = ref (([] : (int) list)) in
  order := (Obj.magic g_dfs_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (start)) (visited) (order) (Obj.repr (d)) : int list);
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and g_bfs g s =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let queue = ref (([] : (int) list)) in
  let visited = ref ([] : (string * bool) list) in
  let order = ref (([] : (int) list)) in
  let start = if (s = -(2)) then first_key ((Obj.magic (Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list) : (string * int list list) list)) else s in
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (start) : int)]) : int list);
  visited := ((__str (start), true) :: List.remove_assoc (__str (start)) (!visited));
  (try while (List.length (!queue) > 0) do
    try
  let node = List.nth (!queue) (0) in
  queue := (Obj.magic List.of_seq (Seq.take (List.length (!queue) - 1) (Seq.drop 1 (List.to_seq (!queue)))) : int list);
  order := (Obj.magic (List.append (!order) [(Obj.magic (node) : int)]) : int list);
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (neigh) : int)]) : int list);
  visited := ((__str (neigh), true) :: List.remove_assoc (__str (neigh)) (!visited));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and g_degree g u =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let u = (Obj.magic u : int) in
  if (List.mem_assoc u (Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) then (
  __ret := (Obj.magic (List.length (List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)))) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and g_cycle_util g node visited parent res =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  visited := (Obj.magic !visited : (string * bool) list);
  let parent = (Obj.magic parent : int) in
  res := (Obj.magic !res : int list);
  visited := ((__str (node), true) :: List.remove_assoc (__str (node)) (!visited));
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  res := (Obj.magic g_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (neigh)) (visited) (Obj.repr (node)) (res) : int list);
  ) else (
  if (neigh <> parent) then (
  if not (list_contains_int (!res) (Obj.repr (neigh))) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (neigh) : int)]) : int list);
  );
  if not (list_contains_int (!res) (Obj.repr (node))) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (node) : int)]) : int list);
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and g_cycle_nodes g =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let visited = ref ([] : (string * bool) list) in
  let res = ref (([] : (int) list)) in
  (try List.iter (fun (k, _) ->
    try
  if not ((List.mem_assoc k !visited)) then (
  res := (Obj.magic g_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (k)) (visited) (Obj.repr (-(1))) (res) : int list);
  );
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and g_has_cycle_util g node visited parent =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  visited := (Obj.magic !visited : (string * bool) list);
  let parent = (Obj.magic parent : int) in
  visited := ((__str (node), true) :: List.remove_assoc (__str (node)) (!visited));
  let edges = ref (List.assoc (__str (node)) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!edges)) do
    try
  let neigh = List.nth (List.nth (!edges) (!i)) (1) in
  if not ((List.mem_assoc neigh !visited)) then (
  if g_has_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (neigh)) (visited) (Obj.repr (node)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  ) else (
  if (neigh <> parent) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and g_has_cycle g =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let visited = ref ([] : (string * bool) list) in
  (try List.iter (fun (k, _) ->
    try
  if not ((List.mem_assoc k !visited)) then (
  if g_has_cycle_util ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (k)) (visited) (Obj.repr (-(1))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  );
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("graph")) (g) : Obj.t) : ( string * int list list ) list)) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and g_fill_graph_randomly g c =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let c = (Obj.magic c : int) in
  let count = ref (c) in
  if (!count = -(1)) then (
  count := rand_range (Obj.repr (10)) (Obj.repr (10010));
  );
  let i = ref (0) in
  (try while (!i < !count) do
    try
  let edge_count = ref (rand_range (Obj.repr (1)) (Obj.repr (103))) in
  let j = ref (0) in
  (try while (!j < !edge_count) do
    try
  let n = rand_range (Obj.repr (0)) (Obj.repr (!count)) in
  if (n <> !i) then (
  ignore (g_add_pair (ref (g)) (Obj.repr (!i)) (Obj.repr (n)) (Obj.repr (1)));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and g_dfs_time g s e =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let e = (Obj.magic e : int) in
  let begin_ = _now () in
  ignore (g_dfs ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (s)) (Obj.repr (e)));
  let end_ = _now () in
  __ret := (Obj.magic ((end_ - begin_)) : int); raise Return
  with Return -> !__ret)

and g_bfs_time g s =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let s = (Obj.magic s : int) in
  let begin_ = _now () in
  ignore (g_bfs ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (s)));
  let end_ = _now () in
  __ret := (Obj.magic ((end_ - begin_)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let dg = ref (dg_make_graph ()) in
  ignore (dg_add_pair (dg) (Obj.repr (0)) (Obj.repr (1)) (Obj.repr (5)));
  ignore (dg_add_pair (dg) (Obj.repr (0)) (Obj.repr (2)) (Obj.repr (3)));
  ignore (dg_add_pair (dg) (Obj.repr (1)) (Obj.repr (3)) (Obj.repr (2)));
  ignore (dg_add_pair (dg) (Obj.repr (2)) (Obj.repr (3)) (Obj.repr (4)));
  print_endline ((__str (dg_dfs (!dg) (Obj.repr (-(2))) (Obj.repr (-(1))))));
  print_endline ((__str (dg_bfs (!dg) (Obj.repr (-(2))))));
  print_endline ((string_of_int (dg_in_degree (!dg) (Obj.repr (3)))));
  print_endline ((string_of_int (dg_out_degree (!dg) (Obj.repr (0)))));
  print_endline ((__str (dg_topological_sort (!dg))));
  print_endline ((string_of_bool (dg_has_cycle (!dg))));
  let ug = ref (g_make_graph ()) in
  ignore (g_add_pair (ug) (Obj.repr (0)) (Obj.repr (1)) (Obj.repr (1)));
  ignore (g_add_pair (ug) (Obj.repr (1)) (Obj.repr (2)) (Obj.repr (1)));
  ignore (g_add_pair (ug) (Obj.repr (2)) (Obj.repr (0)) (Obj.repr (1)));
  print_endline ((__str (g_dfs (!ug) (Obj.repr (-(2))) (Obj.repr (-(1))))));
  print_endline ((__str (g_bfs (!ug) (Obj.repr (-(2))))));
  print_endline ((string_of_int (g_degree (!ug) (Obj.repr (1)))));
  print_endline ((string_of_bool (g_has_cycle (!ug))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
