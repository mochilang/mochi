(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_adjacency_list size =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let size = (Obj.magic size : int) in
  let g = ref (([] : ((string * Obj.t) list list) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  g := (Obj.magic (List.append (!g) [(Obj.magic ([]) : (string * Obj.t) list list)]) : (string * Obj.t) list list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("graph"), Obj.repr (!g)); (__str ("size"), Obj.repr (size))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_edge al from_vertex to_vertex weight =
  let __ret = ref (Obj.magic 0) in
  (try
  al := (Obj.magic !al : (string * Obj.t) list);
  let from_vertex = (Obj.magic from_vertex : int) in
  let to_vertex = (Obj.magic to_vertex : int) in
  let weight = (Obj.magic weight : int) in
  if not (((weight = 0) || (weight = 1))) then (
  (failwith ("Edge weight must be either 0 or 1."));
  );
  if ((to_vertex < 0) || (to_vertex >= (Obj.obj (List.assoc (__str ("size")) (!al) : Obj.t) : int))) then (
  (failwith ("Vertex indexes must be in [0; size)."));
  );
  let g = ref ((Obj.obj (List.assoc (__str ("graph")) (!al) : Obj.t) : (string * Obj.t) list list list)) in
  let edges = ref (List.nth (!g) (from_vertex)) in
  g := (List.mapi (fun __i __x -> if __i = from_vertex then (List.append (!edges) [(Obj.magic ([(__str ("destination_vertex"), Obj.repr (to_vertex)); (__str ("weight"), Obj.repr (weight))]) : (string * Obj.t) list)]) else __x) (!g));
  al := ((__str ("graph"), Obj.repr (!g)) :: List.remove_assoc (__str ("graph")) (Obj.magic (!al) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and push_front q v =
  let __ret = ref ([] : (int) list) in
  (try
  let q = (Obj.magic q : int list) in
  let v = (Obj.magic v : int) in
  let res = ref ([v]) in
  let i = ref (0) in
  (try while (!i < List.length (q)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (q) (!i)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and pop_front q =
  let __ret = ref ([] : (int) list) in
  (try
  let q = (Obj.magic q : int list) in
  let res = ref (([] : (int) list)) in
  let i = ref (1) in
  (try while (!i < List.length (q)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (q) (!i)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and front q =
  let __ret = ref 0 in
  (try
  let q = (Obj.magic q : int list) in
  __ret := (Obj.magic (List.nth (q) (0)) : int); raise Return
  with Return -> !__ret)

and get_shortest_path al start_vertex finish_vertex =
  let __ret = ref 0 in
  (try
  let al = (Obj.magic al : (string * Obj.t) list) in
  let start_vertex = (Obj.magic start_vertex : int) in
  let finish_vertex = (Obj.magic finish_vertex : int) in
  let queue = ref ([start_vertex]) in
  let distances = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (al) : Obj.t) : int)) do
    try
  distances := (Obj.magic (List.append (!distances) [(Obj.magic (-(1)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  distances := (List.mapi (fun __i __x -> if __i = start_vertex then 0 else __x) (!distances));
  (try while (List.length (!queue) > 0) do
    try
  let current_vertex = front (!queue) in
  queue := (Obj.magic pop_front (!queue) : int list);
  let current_distance = List.nth (!distances) (current_vertex) in
  let edges = ref (List.nth ((Obj.obj (List.assoc (__str ("graph")) (al) : Obj.t) : (string * Obj.t) list list list)) (current_vertex)) in
  let j = ref (0) in
  (try while (!j < List.length (!edges)) do
    try
  let edge = ref (List.nth (!edges) (!j)) in
  let new_distance = (current_distance + (Obj.obj (List.assoc (__str ("weight")) (!edge) : Obj.t) : int)) in
  let dest = (Obj.obj (List.assoc (__str ("destination_vertex")) (!edge) : Obj.t) : int) in
  let dest_distance = List.nth (!distances) (dest) in
  if ((dest_distance >= 0) && (new_distance >= dest_distance)) then (
  j := (!j + 1);
  raise Continue;
  );
  distances := (List.mapi (fun __i __x -> if __i = dest then new_distance else __x) (!distances));
  if ((Obj.obj (List.assoc (__str ("weight")) (!edge) : Obj.t) : int) = 0) then (
  queue := (Obj.magic push_front (!queue) (Obj.repr (dest)) : int list);
  ) else (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (dest) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let result = List.nth (!distances) (finish_vertex) in
  if (result < 0) then (
  (failwith ("No path from start_vertex to finish_vertex."));
  );
  __ret := (Obj.magic (result) : int); raise Return
  with Return -> !__ret)


let g = new_adjacency_list (Obj.repr (11))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (add_edge (ref (g)) (Obj.repr (0)) (Obj.repr (1)) (Obj.repr (0)));
  ignore (add_edge (ref (g)) (Obj.repr (0)) (Obj.repr (3)) (Obj.repr (1)));
  ignore (add_edge (ref (g)) (Obj.repr (1)) (Obj.repr (2)) (Obj.repr (0)));
  ignore (add_edge (ref (g)) (Obj.repr (2)) (Obj.repr (3)) (Obj.repr (0)));
  ignore (add_edge (ref (g)) (Obj.repr (4)) (Obj.repr (2)) (Obj.repr (1)));
  ignore (add_edge (ref (g)) (Obj.repr (4)) (Obj.repr (5)) (Obj.repr (1)));
  ignore (add_edge (ref (g)) (Obj.repr (4)) (Obj.repr (6)) (Obj.repr (1)));
  ignore (add_edge (ref (g)) (Obj.repr (5)) (Obj.repr (9)) (Obj.repr (0)));
  ignore (add_edge (ref (g)) (Obj.repr (6)) (Obj.repr (7)) (Obj.repr (1)));
  ignore (add_edge (ref (g)) (Obj.repr (7)) (Obj.repr (8)) (Obj.repr (1)));
  ignore (add_edge (ref (g)) (Obj.repr (8)) (Obj.repr (10)) (Obj.repr (1)));
  ignore (add_edge (ref (g)) (Obj.repr (9)) (Obj.repr (7)) (Obj.repr (0)));
  ignore (add_edge (ref (g)) (Obj.repr (9)) (Obj.repr (10)) (Obj.repr (1)));
  print_endline ((string_of_int (get_shortest_path (g) (Obj.repr (0)) (Obj.repr (3)))));
  print_endline ((string_of_int (get_shortest_path (g) (Obj.repr (4)) (Obj.repr (10)))));
  print_endline ((string_of_int (get_shortest_path (g) (Obj.repr (4)) (Obj.repr (8)))));
  print_endline ((string_of_int (get_shortest_path (g) (Obj.repr (0)) (Obj.repr (1)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
