(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _directions = ref ([[-(1); 0]; [0; -(1)]; [1; 0]; [0; 1]])
let rec iabs x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic (-(x)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

and search grid init goal cost heuristic =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let cost = (Obj.magic cost : int) in
  let closed = ref (([] : (int list) list)) in
  let r = ref (0) in
  (try while (!r < List.length (grid)) do
    try
  let row = ref (([] : (int) list)) in
  let c = ref (0) in
  (try while (!c < List.length (List.nth (grid) (0))) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (0) : int)]) : int list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  closed := (Obj.magic (List.append (!closed) [(Obj.magic (!row) : int list)]) : int list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  closed := (List.mapi (fun __i __x -> if __i = List.nth (init) (0) then (List.mapi (fun __i __x -> if __i = List.nth (init) (1) then 1 else __x) (List.nth (!closed) (List.nth (init) (0)))) else __x) (!closed));
  let action = ref (([] : (int list) list)) in
  r := 0;
  (try while (!r < List.length (grid)) do
    try
  let row = ref (([] : (int) list)) in
  let c = ref (0) in
  (try while (!c < List.length (List.nth (grid) (0))) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (0) : int)]) : int list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  action := (Obj.magic (List.append (!action) [(Obj.magic (!row) : int list)]) : int list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let x = ref (List.nth (init) (0)) in
  let y = ref (List.nth (init) (1)) in
  let g = ref (0) in
  let f = ref ((!g + List.nth (List.nth (heuristic) (!x)) (!y))) in
  let cell = ref ([[!f; !g; !x; !y]]) in
  let found = ref (false) in
  let resign = ref (false) in
  (try while (not (!found) && not (!resign)) do
    try
  if (List.length (!cell) = 0) then (
  (failwith ("Algorithm is unable to find solution"));
  ) else (
  let best_i = ref (0) in
  let best_f = ref (List.nth (List.nth (!cell) (0)) (0)) in
  let i = ref (1) in
  (try while (!i < List.length (!cell)) do
    try
  if (List.nth (List.nth (!cell) (!i)) (0) < !best_f) then (
  best_f := List.nth (List.nth (!cell) (!i)) (0);
  best_i := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let next_cell = ref (List.nth (!cell) (!best_i)) in
  let new_cell = ref (([] : (int list) list)) in
  i := 0;
  (try while (!i < List.length (!cell)) do
    try
  if (!i <> !best_i) then (
  new_cell := (Obj.magic (List.append (!new_cell) [(Obj.magic (List.nth (!cell) (!i)) : int list)]) : int list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  cell := (Obj.magic !new_cell : int list list);
  x := List.nth (!next_cell) (2);
  y := List.nth (!next_cell) (3);
  g := List.nth (!next_cell) (1);
  if ((!x = List.nth (goal) (0)) && (!y = List.nth (goal) (1))) then (
  found := true;
  ) else (
  let d = ref (0) in
  (try while (!d < List.length (!_directions)) do
    try
  let x2 = (!x + List.nth (List.nth (!_directions) (!d)) (0)) in
  let y2 = (!y + List.nth (List.nth (!_directions) (!d)) (1)) in
  if ((((((x2 >= 0) && (x2 < List.length (grid))) && (y2 >= 0)) && (y2 < List.length (List.nth (grid) (0)))) && (List.nth (List.nth (!closed) (x2)) (y2) = 0)) && (List.nth (List.nth (grid) (x2)) (y2) = 0)) then (
  let g2 = (!g + cost) in
  let f2 = (g2 + List.nth (List.nth (heuristic) (x2)) (y2)) in
  cell := (Obj.magic (List.append (!cell) [(Obj.magic ([f2; g2; x2; y2]) : int list)]) : int list list);
  closed := (List.mapi (fun __i __x -> if __i = x2 then (List.mapi (fun __i __x -> if __i = y2 then 1 else __x) (List.nth (!closed) (x2))) else __x) (!closed));
  action := (List.mapi (fun __i __x -> if __i = x2 then (List.mapi (fun __i __x -> if __i = y2 then !d else __x) (List.nth (!action) (x2))) else __x) (!action));
  );
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  );
  );
    with Continue -> ()
  done with Break -> ());
  let invpath = ref (([] : (int list) list)) in
  x := List.nth (goal) (0);
  y := List.nth (goal) (1);
  invpath := (Obj.magic (List.append (!invpath) [(Obj.magic ([!x; !y]) : int list)]) : int list list);
  (try while ((!x <> List.nth (init) (0)) || (!y <> List.nth (init) (1))) do
    try
  let dir = List.nth (List.nth (!action) (!x)) (!y) in
  let x2 = (!x - List.nth (List.nth (!_directions) (dir)) (0)) in
  let y2 = (!y - List.nth (List.nth (!_directions) (dir)) (1)) in
  x := x2;
  y := y2;
  invpath := (Obj.magic (List.append (!invpath) [(Obj.magic ([!x; !y]) : int list)]) : int list list);
    with Continue -> ()
  done with Break -> ());
  let path = ref (([] : (int list) list)) in
  let idx = ref ((List.length (!invpath) - 1)) in
  (try while (!idx >= 0) do
    try
  path := (Obj.magic (List.append (!path) [(Obj.magic (List.nth (!invpath) (!idx)) : int list)]) : int list list);
  idx := (!idx - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("path"), Obj.repr (!path)); (__str ("action"), Obj.repr (!action))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let grid = ref ([[0; 1; 0; 0; 0; 0]; [0; 1; 0; 0; 0; 0]; [0; 1; 0; 0; 0; 0]; [0; 1; 0; 0; 1; 0]; [0; 0; 0; 0; 1; 0]]) in
  let init = ref ([0; 0]) in
  let goal = ref ([(List.length (!grid) - 1); (List.length (List.nth (!grid) (0)) - 1)]) in
  let cost = 1 in
  let heuristic = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!grid)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (List.nth (!grid) (0))) do
    try
  let h = (iabs (Obj.repr ((!i - List.nth (!goal) (0)))) + iabs (Obj.repr ((!j - List.nth (!goal) (1))))) in
  if (List.nth (List.nth (!grid) (!i)) (!j) = 1) then (
  row := (Obj.magic (List.append (!row) [(Obj.magic (99) : int)]) : int list);
  ) else (
  row := (Obj.magic (List.append (!row) [(Obj.magic (h) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  heuristic := (Obj.magic (List.append (!heuristic) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = search (!grid) (!init) (!goal) (Obj.repr (cost)) (!heuristic) in
  print_endline ("ACTION MAP");
  let rr = ref (0) in
  (try while (!rr < List.length ((Obj.obj (List.assoc (__str ("action")) (result) : Obj.t) : int list list))) do
    try
  print_endline (__show_list (List.nth ((Obj.obj (List.assoc (__str ("action")) (result) : Obj.t) : int list list)) (!rr)));
  rr := (!rr + 1);
    with Continue -> ()
  done with Break -> ());
  let p = ref (0) in
  (try while (!p < List.length ((Obj.obj (List.assoc (__str ("path")) (result) : Obj.t) : int list list))) do
    try
  print_endline (__show_list (List.nth ((Obj.obj (List.assoc (__str ("path")) (result) : Obj.t) : int list list)) (!p)));
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
