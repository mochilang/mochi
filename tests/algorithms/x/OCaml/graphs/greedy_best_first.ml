(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic ((0 - x)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

and manhattan x1 y1 x2 y2 =
  let __ret = ref 0 in
  (try
  let x1 = (Obj.magic x1 : int) in
  let y1 = (Obj.magic y1 : int) in
  let x2 = (Obj.magic x2 : int) in
  let y2 = (Obj.magic y2 : int) in
  __ret := (Obj.magic ((abs (x1 - x2) + abs (y1 - y2))) : int); raise Return
  with Return -> !__ret)

and clone_path p =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let p = (Obj.magic p : (string * Obj.t) list list) in
  let res = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (p)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (p) (!i)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and make_node pos_x pos_y goal_x goal_y g_cost path =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let pos_x = (Obj.magic pos_x : int) in
  let pos_y = (Obj.magic pos_y : int) in
  let goal_x = (Obj.magic goal_x : int) in
  let goal_y = (Obj.magic goal_y : int) in
  let g_cost = (Obj.magic g_cost : int) in
  let path = (Obj.magic path : (string * Obj.t) list list) in
  let f = manhattan (Obj.repr (pos_x)) (Obj.repr (pos_y)) (Obj.repr (goal_x)) (Obj.repr (goal_y)) in
  __ret := (Obj.magic ([(__str ("pos_x"), Obj.repr (pos_x)); (__str ("pos_y"), Obj.repr (pos_y)); (__str ("goal_x"), Obj.repr (goal_x)); (__str ("goal_y"), Obj.repr (goal_y)); (__str ("g_cost"), Obj.repr (g_cost)); (__str ("f_cost"), Obj.repr (f)); (__str ("path"), Obj.repr (path))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let delta = ref ([[(__str ("y"), Obj.repr (-(1))); (__str ("x"), Obj.repr (0))]; [(__str ("y"), Obj.repr (0)); (__str ("x"), Obj.repr (-(1)))]; [(__str ("y"), Obj.repr (1)); (__str ("x"), Obj.repr (0))]; [(__str ("y"), Obj.repr (0)); (__str ("x"), Obj.repr (1))]])
let rec node_equal a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ((((Obj.obj (List.assoc (__str ("pos_x")) (a) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("pos_x")) (b) : Obj.t) : int)) && ((Obj.obj (List.assoc (__str ("pos_y")) (a) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("pos_y")) (b) : Obj.t) : int)))) : bool); raise Return
  with Return -> !__ret)

and contains nodes node =
  let __ret = ref false in
  (try
  let nodes = (Obj.magic nodes : (string * Obj.t) list list) in
  let node = (Obj.magic node : (string * Obj.t) list) in
  let i = ref (0) in
  (try while (!i < List.length (nodes)) do
    try
  if node_equal ((Obj.magic List.nth (nodes) (!i) : (string * Obj.t) list)) ((Obj.magic node : (string * Obj.t) list)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and sort_nodes nodes =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let nodes = (Obj.magic nodes : (string * Obj.t) list list) in
  let arr = ref (nodes) in
  let i = ref (1) in
  (try while (!i < List.length (!arr)) do
    try
  let key_node = ref (List.nth (!arr) (!i)) in
  let j = ref ((!i - 1)) in
  (try while (!j >= 0) do
    try
  let temp = ref (List.nth (!arr) (!j)) in
  if ((Obj.obj (List.assoc (__str ("f_cost")) (!temp) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("f_cost")) (!key_node) : Obj.t) : int)) then (
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !temp else __x) (!arr));
  j := (!j - 1);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !key_node else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and get_successors grid parent target =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let grid = (Obj.magic grid : int list list) in
  let parent = (Obj.magic parent : (string * Obj.t) list) in
  let target = (Obj.magic target : (string * Obj.t) list) in
  let res = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!delta)) do
    try
  let d = List.nth (!delta) (!i) in
  let pos_x = ((Obj.obj (List.assoc (__str ("pos_x")) (parent) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("x")) (d) : Obj.t) : int)) in
  let pos_y = ((Obj.obj (List.assoc (__str ("pos_y")) (parent) : Obj.t) : int) + (Obj.obj (List.assoc (__str ("y")) (d) : Obj.t) : int)) in
  if (((((pos_x >= 0) && (pos_x < List.length (List.nth (grid) (0)))) && (pos_y >= 0)) && (pos_y < List.length (grid))) && (List.nth (List.nth (grid) (pos_y)) (pos_x) = 0)) then (
  let new_path = ref (clone_path ((Obj.obj (List.assoc (__str ("path")) (parent) : Obj.t) : (string * Obj.t) list list))) in
  new_path := (Obj.magic (List.append (!new_path) [(Obj.magic ([(__str ("y"), Obj.repr (pos_y)); (__str ("x"), Obj.repr (pos_x))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  res := (Obj.magic (List.append (!res) [(Obj.magic (make_node (Obj.repr (pos_x)) (Obj.repr (pos_y)) (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (target) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (target) : Obj.t) : int))) (Obj.repr (((Obj.obj (List.assoc (__str ("g_cost")) (parent) : Obj.t) : int) + 1))) ((Obj.magic !new_path : (string * Obj.t) list list))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and greedy_best_first grid init goal =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let grid = (Obj.magic grid : int list list) in
  let init = (Obj.magic init : (string * Obj.t) list) in
  let goal = (Obj.magic goal : (string * Obj.t) list) in
  let start_path = ref ([init]) in
  let start = make_node (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (init) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (init) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("x")) (goal) : Obj.t) : int))) (Obj.repr ((Obj.obj (List.assoc (__str ("y")) (goal) : Obj.t) : int))) (Obj.repr (0)) ((Obj.magic !start_path : (string * Obj.t) list list)) in
  let open_nodes = ref ([start]) in
  let closed_nodes = ref (([] : ((string * Obj.t) list) list)) in
  (try while (List.length (!open_nodes) > 0) do
    try
  open_nodes := sort_nodes (!open_nodes);
  let current = ref (List.nth (!open_nodes) (0)) in
  let new_open = ref (([] : ((string * Obj.t) list) list)) in
  let idx = ref (1) in
  (try while (!idx < List.length (!open_nodes)) do
    try
  new_open := (Obj.magic (List.append (!new_open) [(Obj.magic (List.nth (!open_nodes) (!idx)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  open_nodes := (Obj.magic !new_open : (string * Obj.t) list list);
  if (((Obj.obj (List.assoc (__str ("pos_x")) (!current) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("x")) (goal) : Obj.t) : int)) && ((Obj.obj (List.assoc (__str ("pos_y")) (!current) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("y")) (goal) : Obj.t) : int))) then (
  __ret := (Obj.magic ((Obj.obj (List.assoc (__str ("path")) (!current) : Obj.t) : (string * Obj.t) list list)) : (string * Obj.t) list list); raise Return
  );
  closed_nodes := (Obj.magic (List.append (!closed_nodes) [(Obj.magic (!current) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  let successors = ref (get_successors (grid) ((Obj.magic !current : (string * Obj.t) list)) ((Obj.magic goal : (string * Obj.t) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!successors)) do
    try
  let child = List.nth (!successors) (!i) in
  if (not (contains (!closed_nodes) (child)) && not (contains (!open_nodes) (child))) then (
  open_nodes := (Obj.magic (List.append (!open_nodes) [(Obj.magic (child) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let r = ref ([init]) in
  __ret := (Obj.magic (!r) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let _test_grids = ref ([[[0; 0; 0; 0; 0; 0; 0]; [0; 1; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0]; [0; 0; 1; 0; 0; 0; 0]; [1; 0; 1; 0; 0; 0; 0]; [0; 0; 0; 0; 0; 0; 0]; [0; 0; 0; 0; 1; 0; 0]]; [[0; 0; 0; 1; 1; 0; 0]; [0; 0; 0; 0; 1; 0; 1]; [0; 0; 0; 1; 1; 0; 0]; [0; 1; 0; 0; 1; 0; 0]; [1; 0; 0; 1; 1; 0; 1]; [0; 0; 0; 0; 0; 0; 0]]; [[0; 0; 1; 0; 0]; [0; 1; 0; 0; 0]; [0; 0; 1; 0; 1]; [1; 0; 0; 1; 1]; [0; 0; 0; 0; 0]]])
let rec print_grid grid =
  let __ret = ref (Obj.magic 0) in
  (try
  let grid = (Obj.magic grid : int list list) in
  let i = ref (0) in
  (try while (!i < List.length (grid)) do
    try
  print_endline ((__str (List.nth (grid) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let idx = ref (0) in
  (try while (!idx < List.length (!_test_grids)) do
    try
  print_endline ((("==grid-" ^ (string_of_int ((!idx + 1)))) ^ "=="));
  let grid = ref (List.nth (!_test_grids) (!idx)) in
  let init = [(__str ("y"), Obj.repr (0)); (__str ("x"), Obj.repr (0))] in
  let goal = [(__str ("y"), Obj.repr ((List.length (!grid) - 1))); (__str ("x"), Obj.repr ((List.length (List.nth (!grid) (0)) - 1)))] in
  ignore (print_grid (!grid));
  print_endline ("------");
  let path = ref (greedy_best_first (!grid) (init) (goal)) in
  let j = ref (0) in
  (try while (!j < List.length (!path)) do
    try
  let p = List.nth (!path) (!j) in
  grid := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : int) then (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : int) then 2 else __x) (List.nth (!grid) ((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : int)))) else __x) (!grid));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (print_grid (!grid));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
