(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000
let rec pairs_to_string edges =
  let __ret = ref "" in
  (try
  let edges = (Obj.magic edges : (string * Obj.t) list list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (edges)) do
    try
  let e = ref (List.nth (edges) (!i)) in
  s := (((((!s ^ "(") ^ (string_of_int ((Obj.obj (List.assoc (__str ("u")) (!e) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("v")) (!e) : Obj.t) : int)))) ^ ")");
  if (!i < (List.length (edges) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!s ^ "]")) : string); raise Return
  with Return -> !__ret)

and prim_mst graph =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list list list) in
  let n = List.length (graph) in
  let visited = ref (([] : (bool) list)) in
  let dist = ref (([] : (int) list)) in
  let parent = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  visited := (Obj.magic (List.append (!visited) [(Obj.magic (false) : bool)]) : bool list);
  dist := (Obj.magic (List.append (!dist) [(Obj.magic (_inf) : int)]) : int list);
  parent := (Obj.magic (List.append (!parent) [(Obj.magic (-(1)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  dist := (List.mapi (fun __i __x -> if __i = 0 then 0 else __x) (!dist));
  let result = ref (([] : ((string * Obj.t) list) list)) in
  let count = ref (0) in
  (try while (!count < n) do
    try
  let min_val = ref (_inf) in
  let u = ref (0) in
  let v = ref (0) in
  (try while (!v < n) do
    try
  if ((List.nth (!visited) (!v) = false) && (List.nth (!dist) (!v) < !min_val)) then (
  min_val := List.nth (!dist) (!v);
  u := !v;
  );
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  if (!min_val = _inf) then (
  raise Break;
  );
  visited := (List.mapi (fun __i __x -> if __i = !u then true else __x) (!visited));
  if (!u <> 0) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ([(__str ("u"), Obj.repr (List.nth (!parent) (!u))); (__str ("v"), Obj.repr (!u))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  (try List.iter (fun e ->
    try
  if ((List.nth (!visited) ((Obj.obj (List.assoc (__str ("to")) (e) : Obj.t) : int)) = false) && ((Obj.obj (List.assoc (__str ("weight")) (e) : Obj.t) : int) < List.nth (!dist) ((Obj.obj (List.assoc (__str ("to")) (e) : Obj.t) : int)))) then (
  dist := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("to")) (e) : Obj.t) : int) then (Obj.obj (List.assoc (__str ("weight")) (e) : Obj.t) : int) else __x) (!dist));
  parent := (List.mapi (fun __i __x -> if __i = (Obj.obj (List.assoc (__str ("to")) (e) : Obj.t) : int) then !u else __x) (!parent));
  );
    with Continue -> ()) (List.nth (graph) (!u)) with Break -> ());
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)


let adjacency_list = ref ([[[(__str ("to"), Obj.repr (1)); (__str ("weight"), Obj.repr (1))]; [(__str ("to"), Obj.repr (3)); (__str ("weight"), Obj.repr (3))]]; [[(__str ("to"), Obj.repr (0)); (__str ("weight"), Obj.repr (1))]; [(__str ("to"), Obj.repr (2)); (__str ("weight"), Obj.repr (6))]; [(__str ("to"), Obj.repr (3)); (__str ("weight"), Obj.repr (5))]; [(__str ("to"), Obj.repr (4)); (__str ("weight"), Obj.repr (1))]]; [[(__str ("to"), Obj.repr (1)); (__str ("weight"), Obj.repr (6))]; [(__str ("to"), Obj.repr (4)); (__str ("weight"), Obj.repr (5))]; [(__str ("to"), Obj.repr (5)); (__str ("weight"), Obj.repr (2))]]; [[(__str ("to"), Obj.repr (0)); (__str ("weight"), Obj.repr (3))]; [(__str ("to"), Obj.repr (1)); (__str ("weight"), Obj.repr (5))]; [(__str ("to"), Obj.repr (4)); (__str ("weight"), Obj.repr (1))]]; [[(__str ("to"), Obj.repr (1)); (__str ("weight"), Obj.repr (1))]; [(__str ("to"), Obj.repr (2)); (__str ("weight"), Obj.repr (5))]; [(__str ("to"), Obj.repr (3)); (__str ("weight"), Obj.repr (1))]; [(__str ("to"), Obj.repr (5)); (__str ("weight"), Obj.repr (4))]]; [[(__str ("to"), Obj.repr (2)); (__str ("weight"), Obj.repr (2))]; [(__str ("to"), Obj.repr (4)); (__str ("weight"), Obj.repr (4))]]])
let mst_edges = ref (prim_mst ((Obj.magic !adjacency_list : (string * Obj.t) list list list)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((pairs_to_string ((Obj.magic !mst_edges : (string * Obj.t) list list))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
