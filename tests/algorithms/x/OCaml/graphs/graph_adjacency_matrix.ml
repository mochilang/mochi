(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_graph vertices edges directed =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let vertices = (Obj.magic vertices : int list) in
  let edges = (Obj.magic edges : int list list) in
  let g = ref ([(__str ("directed"), Obj.repr (directed)); (__str ("vertex_to_index"), Obj.repr ([])); (__str ("adj_matrix"), Obj.repr ([]))]) in
  let i = ref (0) in
  (try while (!i < List.length (vertices)) do
    try
  ignore (add_vertex (g) (Obj.repr (List.nth (vertices) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < List.length (edges)) do
    try
  let e = ref (List.nth (edges) (!j)) in
  ignore (add_edge (g) (Obj.repr (List.nth (!e) (0))) (Obj.repr (List.nth (!e) (1))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!g) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and contains_vertex g v =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let v = (Obj.magic v : int) in
  __ret := (Obj.magic ((List.mem_assoc v (Obj.obj (List.assoc (__str ("vertex_to_index")) (g) : Obj.t) : ( string * int ) list))) : bool); raise Return
  with Return -> !__ret)

and add_vertex g v =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let v = (Obj.magic v : int) in
  if contains_vertex ((Obj.magic !g : (string * Obj.t) list)) (Obj.repr (v)) then (
  (failwith ("vertex already exists"));
  );
  let matrix = ref ((Obj.obj (List.assoc (__str ("adj_matrix")) (!g) : Obj.t) : int list list)) in
  let i = ref (0) in
  (try while (!i < List.length (!matrix)) do
    try
  matrix := (List.mapi (fun __i __x -> if __i = !i then (List.append (List.nth (!matrix) (!i)) [(Obj.magic (0) : int)]) else __x) (!matrix));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < (List.length (!matrix) + 1)) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (0) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic (List.append (!matrix) [(Obj.magic (!row) : int list)]) : int list list);
  g := ((__str ("adj_matrix"), Obj.repr (!matrix)) :: List.remove_assoc (__str ("adj_matrix")) (Obj.magic (!g) : (string * Obj.t) list));
  let idx_map = ref ((Obj.obj (List.assoc (__str ("vertex_to_index")) (!g) : Obj.t) : ( string * int ) list)) in
  idx_map := ((__str (v), (List.length (!matrix) - 1)) :: List.remove_assoc (__str (v)) (!idx_map));
  g := ((__str ("vertex_to_index"), Obj.repr (!idx_map)) :: List.remove_assoc (__str ("vertex_to_index")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and remove_key m k =
  let __ret = ref ([] : (string * int) list) in
  (try
  let m = (Obj.magic m : (string * int) list) in
  let k = (Obj.magic k : int) in
  let out = ref ([] : (string * int) list) in
  (try List.iter (fun (key, _) ->
    try
  if (key <> k) then (
  out := ((__str (key), List.assoc (__str (key)) (m)) :: List.remove_assoc (__str (key)) (!out));
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!out) : (string * int) list); raise Return
  with Return -> !__ret)

and decrement_indices m start =
  let __ret = ref ([] : (string * int) list) in
  (try
  let m = (Obj.magic m : (string * int) list) in
  let start = (Obj.magic start : int) in
  let out = ref ([] : (string * int) list) in
  (try List.iter (fun (key, _) ->
    try
  let idx = List.assoc (__str (key)) (m) in
  if (idx > start) then (
  out := ((__str (key), (idx - 1)) :: List.remove_assoc (__str (key)) (!out));
  ) else (
  out := ((__str (key), idx) :: List.remove_assoc (__str (key)) (!out));
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!out) : (string * int) list); raise Return
  with Return -> !__ret)

and remove_vertex g v =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let v = (Obj.magic v : int) in
  if not (contains_vertex ((Obj.magic !g : (string * Obj.t) list)) (Obj.repr (v))) then (
  (failwith ("vertex does not exist"));
  );
  let idx = List.assoc (__str (v)) ((Obj.obj (List.assoc (__str ("vertex_to_index")) (!g) : Obj.t) : ( string * int ) list)) in
  let new_matrix = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("adj_matrix")) (!g) : Obj.t) : int list list))) do
    try
  if (!i <> idx) then (
  let row = ref (List.nth ((Obj.obj (List.assoc (__str ("adj_matrix")) (!g) : Obj.t) : int list list)) (!i)) in
  let new_row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  if (!j <> idx) then (
  new_row := (Obj.magic (List.append (!new_row) [(Obj.magic (List.nth (!row) (!j)) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  new_matrix := (Obj.magic (List.append (!new_matrix) [(Obj.magic (!new_row) : int list)]) : int list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  g := ((__str ("adj_matrix"), Obj.repr (!new_matrix)) :: List.remove_assoc (__str ("adj_matrix")) (Obj.magic (!g) : (string * Obj.t) list));
  let m = ref (remove_key ((Obj.magic (Obj.obj (List.assoc (__str ("vertex_to_index")) (!g) : Obj.t) : ( string * int ) list) : (string * int) list)) (Obj.repr (v))) in
  g := ((__str ("vertex_to_index"), Obj.repr (decrement_indices ((Obj.magic !m : (string * int) list)) (Obj.repr (idx)))) :: List.remove_assoc (__str ("vertex_to_index")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and add_edge g u v =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  if not ((contains_vertex ((Obj.magic !g : (string * Obj.t) list)) (Obj.repr (u)) && contains_vertex ((Obj.magic !g : (string * Obj.t) list)) (Obj.repr (v)))) then (
  (failwith ("missing vertex"));
  );
  let i = List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("vertex_to_index")) (!g) : Obj.t) : ( string * int ) list)) in
  let j = List.assoc (__str (v)) ((Obj.obj (List.assoc (__str ("vertex_to_index")) (!g) : Obj.t) : ( string * int ) list)) in
  let matrix = ref ((Obj.obj (List.assoc (__str ("adj_matrix")) (!g) : Obj.t) : int list list)) in
  matrix := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then 1 else __x) (List.nth (!matrix) (i))) else __x) (!matrix));
  if not ((Obj.obj (List.assoc (__str ("directed")) (!g) : Obj.t) : bool)) then (
  matrix := (List.mapi (fun __i __x -> if __i = j then (List.mapi (fun __i __x -> if __i = i then 1 else __x) (List.nth (!matrix) (j))) else __x) (!matrix));
  );
  g := ((__str ("adj_matrix"), Obj.repr (!matrix)) :: List.remove_assoc (__str ("adj_matrix")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and remove_edge g u v =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  if not ((contains_vertex ((Obj.magic !g : (string * Obj.t) list)) (Obj.repr (u)) && contains_vertex ((Obj.magic !g : (string * Obj.t) list)) (Obj.repr (v)))) then (
  (failwith ("missing vertex"));
  );
  let i = List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("vertex_to_index")) (!g) : Obj.t) : ( string * int ) list)) in
  let j = List.assoc (__str (v)) ((Obj.obj (List.assoc (__str ("vertex_to_index")) (!g) : Obj.t) : ( string * int ) list)) in
  let matrix = ref ((Obj.obj (List.assoc (__str ("adj_matrix")) (!g) : Obj.t) : int list list)) in
  matrix := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then 0 else __x) (List.nth (!matrix) (i))) else __x) (!matrix));
  if not ((Obj.obj (List.assoc (__str ("directed")) (!g) : Obj.t) : bool)) then (
  matrix := (List.mapi (fun __i __x -> if __i = j then (List.mapi (fun __i __x -> if __i = i then 0 else __x) (List.nth (!matrix) (j))) else __x) (!matrix));
  );
  g := ((__str ("adj_matrix"), Obj.repr (!matrix)) :: List.remove_assoc (__str ("adj_matrix")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and contains_edge g u v =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  if not ((contains_vertex ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (u)) && contains_vertex ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (v)))) then (
  (failwith ("missing vertex"));
  );
  let i = List.assoc (__str (u)) ((Obj.obj (List.assoc (__str ("vertex_to_index")) (g) : Obj.t) : ( string * int ) list)) in
  let j = List.assoc (__str (v)) ((Obj.obj (List.assoc (__str ("vertex_to_index")) (g) : Obj.t) : ( string * int ) list)) in
  let matrix = ref ((Obj.obj (List.assoc (__str ("adj_matrix")) (g) : Obj.t) : int list list)) in
  __ret := (Obj.magic ((List.nth (List.nth (!matrix) (i)) (j) = 1)) : bool); raise Return
  with Return -> !__ret)

and clear_graph g =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  g := ((__str ("vertex_to_index"), Obj.repr ([])) :: List.remove_assoc (__str ("vertex_to_index")) (Obj.magic (!g) : (string * Obj.t) list));
  g := ((__str ("adj_matrix"), Obj.repr ([])) :: List.remove_assoc (__str ("adj_matrix")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)


let g = ref (make_graph ([1; 2; 3]) ([[1; 2]; [2; 3]]) (false))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str ((Obj.obj (List.assoc (__str ("adj_matrix")) (!g) : Obj.t) : int list list))));
  print_endline ((string_of_bool (contains_edge (!g) (Obj.repr (1)) (Obj.repr (2)))));
  print_endline ((string_of_bool (contains_edge (!g) (Obj.repr (2)) (Obj.repr (1)))));
  ignore (remove_edge (g) (Obj.repr (1)) (Obj.repr (2)));
  print_endline ((string_of_bool (contains_edge (!g) (Obj.repr (1)) (Obj.repr (2)))));
  ignore (remove_vertex (g) (Obj.repr (2)));
  print_endline ((__str ((Obj.obj (List.assoc (__str ("adj_matrix")) (!g) : Obj.t) : int list list))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
