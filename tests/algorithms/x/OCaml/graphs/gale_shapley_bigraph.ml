(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec index_of xs x =
  let __ret = ref 0 in
  (try
  let xs = (Obj.magic xs : int list) in
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = x) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and remove_item xs x =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let x = (Obj.magic x : int) in
  let res = ref (([] : (int) list)) in
  let removed = ref (false) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (not (!removed) && (List.nth (xs) (!i) = x)) then (
  removed := true;
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and stable_matching donor_pref recipient_pref =
  let __ret = ref ([] : (int) list) in
  (try
  let donor_pref = (Obj.magic donor_pref : int list list) in
  let recipient_pref = (Obj.magic recipient_pref : int list list) in
  if (List.length (donor_pref) <> List.length (recipient_pref)) then (
  (failwith ("unequal groups"));
  );
  let n = List.length (donor_pref) in
  let unmatched = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  unmatched := (Obj.magic (List.append (!unmatched) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let donor_record = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < n) do
    try
  donor_record := (Obj.magic (List.append (!donor_record) [(Obj.magic (-(1)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let rec_record = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < n) do
    try
  rec_record := (Obj.magic (List.append (!rec_record) [(Obj.magic (-(1)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let num_donations = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < n) do
    try
  num_donations := (Obj.magic (List.append (!num_donations) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (List.length (!unmatched) > 0) do
    try
  let donor = List.nth (!unmatched) (0) in
  let donor_preference = ref (List.nth (donor_pref) (donor)) in
  let recipient = List.nth (!donor_preference) (List.nth (!num_donations) (donor)) in
  num_donations := (List.mapi (fun __i __x -> if __i = donor then (List.nth (!num_donations) (donor) + 1) else __x) (!num_donations));
  let rec_preference = ref (List.nth (recipient_pref) (recipient)) in
  let prev_donor = List.nth (!rec_record) (recipient) in
  if (prev_donor <> (0 - 1)) then (
  let prev_index = index_of (!rec_preference) (Obj.repr (prev_donor)) in
  let new_index = index_of (!rec_preference) (Obj.repr (donor)) in
  if (prev_index > new_index) then (
  rec_record := (List.mapi (fun __i __x -> if __i = recipient then donor else __x) (!rec_record));
  donor_record := (List.mapi (fun __i __x -> if __i = donor then recipient else __x) (!donor_record));
  unmatched := (Obj.magic (List.append (!unmatched) [(Obj.magic (prev_donor) : int)]) : int list);
  unmatched := (Obj.magic remove_item (!unmatched) (Obj.repr (donor)) : int list);
  );
  ) else (
  rec_record := (List.mapi (fun __i __x -> if __i = recipient then donor else __x) (!rec_record));
  donor_record := (List.mapi (fun __i __x -> if __i = donor then recipient else __x) (!donor_record));
  unmatched := (Obj.magic remove_item (!unmatched) (Obj.repr (donor)) : int list);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!donor_record) : int list); raise Return
  with Return -> !__ret)


let donor_pref = ref ([[0; 1; 3; 2]; [0; 2; 3; 1]; [1; 0; 2; 3]; [0; 3; 1; 2]])
let recipient_pref = ref ([[3; 1; 2; 0]; [3; 1; 0; 2]; [0; 3; 1; 2]; [1; 0; 3; 2]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (stable_matching (!donor_pref) (!recipient_pref))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
