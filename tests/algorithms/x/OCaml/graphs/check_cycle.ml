(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec depth_first_search graph vertex visited rec_stk =
  let __ret = ref false in
  (try
  let graph = (Obj.magic graph : int list list) in
  let vertex = (Obj.magic vertex : int) in
  visited := (Obj.magic !visited : bool list);
  rec_stk := (Obj.magic !rec_stk : bool list);
  visited := (List.mapi (fun __i __x -> if __i = vertex then true else __x) (!visited));
  rec_stk := (List.mapi (fun __i __x -> if __i = vertex then true else __x) (!rec_stk));
  (try List.iter (fun node ->
    try
  if not (List.nth (!visited) (node)) then (
  if depth_first_search (graph) (Obj.repr (node)) (visited) (rec_stk) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  ) else (
  if List.nth (!rec_stk) (node) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  );
    with Continue -> ()) (List.nth (graph) (vertex)) with Break -> ());
  rec_stk := (List.mapi (fun __i __x -> if __i = vertex then false else __x) (!rec_stk));
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and check_cycle graph =
  let __ret = ref false in
  (try
  let graph = (Obj.magic graph : int list list) in
  let n = List.length (graph) in
  let visited = ref (([] : (bool) list)) in
  let rec_stk = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  visited := (Obj.magic (List.append (!visited) [(Obj.magic (false) : bool)]) : bool list);
  rec_stk := (Obj.magic (List.append (!rec_stk) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < n) do
    try
  if not (List.nth (!visited) (!i)) then (
  if depth_first_search (graph) (Obj.repr (!i)) (visited) (rec_stk) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and print_bool b =
  let __ret = ref (Obj.magic 0) in
  (try
  if b then (
  print_endline (string_of_bool true);
  ) else (
  print_endline (string_of_bool false);
  );
    !__ret
  with Return -> !__ret)


let g1 = ref ([Obj.repr ([]); Obj.repr ([0; 3]); Obj.repr ([0; 4]); Obj.repr ([5]); Obj.repr ([5]); Obj.repr ([])])
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_bool (check_cycle (!g1)));
  let g2 = ref ([[1; 2]; [2]; [0; 3]; [3]]) in
  ignore (print_bool (check_cycle (!g2)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
