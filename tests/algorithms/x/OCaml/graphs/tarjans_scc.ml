(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec tarjan g =
  let __ret = ref ([] : (int list) list) in
  (try
  let g = (Obj.magic g : int list list) in
  let n = List.length (g) in
  let stack = ref (([] : (int) list)) in
  let on_stack = ref (([] : (bool) list)) in
  let index_of = ref (([] : (int) list)) in
  let lowlink_of = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  on_stack := (Obj.magic (List.append (!on_stack) [(Obj.magic (false) : bool)]) : bool list);
  index_of := (Obj.magic (List.append (!index_of) [(Obj.magic ((0 - 1)) : int)]) : int list);
  lowlink_of := (Obj.magic (List.append (!lowlink_of) [(Obj.magic ((0 - 1)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let components = ref (([] : (int list) list)) in
let rec strong_connect v index =
  let __ret = ref 0 in
  (try
  let v = (Obj.magic v : int) in
  let index = (Obj.magic index : int) in
  index_of := (List.mapi (fun __i __x -> if __i = v then index else __x) (!index_of));
  lowlink_of := (List.mapi (fun __i __x -> if __i = v then index else __x) (!lowlink_of));
  let current_index = ref ((index + 1)) in
  stack := (Obj.magic (List.append (!stack) [(Obj.magic (v) : int)]) : int list);
  on_stack := (List.mapi (fun __i __x -> if __i = v then true else __x) (!on_stack));
  (try List.iter (fun w ->
    try
  if ((let __l = !index_of in let __i = w in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (0 - 1)) then (
  current_index := strong_connect (Obj.repr (w)) (Obj.repr (!current_index));
  if ((let __l = !lowlink_of in let __i = w in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = !lowlink_of in let __i = v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  lowlink_of := (List.mapi (fun __i __x -> if __i = v then (let __l = !lowlink_of in let __i = w in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!lowlink_of));
  );
  ) else (
  if (let __l = !on_stack in let __i = w in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) then (
  if ((let __l = !lowlink_of in let __i = w in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < (let __l = !lowlink_of in let __i = v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  lowlink_of := (List.mapi (fun __i __x -> if __i = v then (let __l = !lowlink_of in let __i = w in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!lowlink_of));
  );
  );
  );
    with Continue -> ()) ((let __l = g in let __i = v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) with Break -> ());
  if ((let __l = !lowlink_of in let __i = v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (let __l = !index_of in let __i = v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  let component = ref (([] : (int) list)) in
  let w = ref ((let __l = !stack in let __i = (List.length (!stack) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  stack := (Obj.magic List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq (!stack)))) : int list);
  on_stack := (List.mapi (fun __i __x -> if __i = !w then false else __x) (!on_stack));
  component := (Obj.magic (List.append (!component) [(Obj.magic (!w) : int)]) : int list);
  (try while (!w <> v) do
    try
  w := (let __l = !stack in let __i = (List.length (!stack) - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  stack := (Obj.magic List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq (!stack)))) : int list);
  on_stack := (List.mapi (fun __i __x -> if __i = !w then false else __x) (!on_stack));
  component := (Obj.magic (List.append (!component) [(Obj.magic (!w) : int)]) : int list);
    with Continue -> ()
  done with Break -> ());
  components := (Obj.magic (List.append (!components) [(Obj.magic (!component) : int list)]) : int list list);
  );
  __ret := (Obj.magic (!current_index) : int); raise Return
  with Return -> !__ret) in
  let v = ref (0) in
  (try while (!v < n) do
    try
  if ((let __l = !index_of in let __i = !v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (0 - 1)) then (
  ignore (strong_connect (Obj.repr (!v)) (Obj.repr (0)));
  );
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!components) : int list list); raise Return
  with Return -> !__ret)

and create_graph n edges =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let edges = (Obj.magic edges : int list list) in
  let g = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  g := (Obj.magic (List.append (!g) [(Obj.magic ([]) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun e ->
    try
  let u = (let __l = e in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let v = (let __l = e in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  g := (List.mapi (fun __i __x -> if __i = u then (List.append ((let __l = !g in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) [(Obj.magic (v) : int)]) else __x) (!g));
    with Continue -> ()) (edges) with Break -> ());
  __ret := (Obj.magic (!g) : int list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let n_vertices = 7 in
  let source = ref ([0; 0; 1; 2; 3; 3; 4; 4; 6]) in
  let target = ref ([1; 3; 2; 0; 1; 4; 5; 6; 5]) in
  let edges = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!source)) do
    try
  edges := (Obj.magic (List.append (!edges) [(Obj.magic ([(let __l = !source in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)); (let __l = !target in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))]) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let g = ref (create_graph (Obj.repr (n_vertices)) (!edges)) in
  print_endline ((__str (Obj.magic (tarjan (!g)) : Obj.t)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
