(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000
let rec connect graph a b w =
  let __ret = ref ([] : (string * int list list) list) in
  (try
  let graph = (Obj.magic graph : (string * int list list) list) in
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let w = (Obj.magic w : int) in
  let u = (a - 1) in
  let v = (b - 1) in
  let g = ref (graph) in
  g := ((__str (u), (List.append (List.assoc (__str (u)) (!g)) [(Obj.magic ([v; w]) : int list)])) :: List.remove_assoc (__str (u)) (!g));
  g := ((__str (v), (List.append (List.assoc (__str (v)) (!g)) [(Obj.magic ([u; w]) : int list)])) :: List.remove_assoc (__str (v)) (!g));
  __ret := (Obj.magic (!g) : (string * int list list) list); raise Return
  with Return -> !__ret)

and in_list arr x =
  let __ret = ref false in
  (try
  let arr = (Obj.magic arr : int list) in
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  if (List.nth (arr) (!i) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and prim graph s n =
  let __ret = ref ([] : (int list) list) in
  (try
  let graph = (Obj.magic graph : (string * int list list) list) in
  let s = (Obj.magic s : int) in
  let n = (Obj.magic n : int) in
  let dist = ref ([] : (string * int) list) in
  let parent = ref ([] : (string * int) list) in
  dist := ((__str (s), 0) :: List.remove_assoc (__str (s)) (!dist));
  parent := ((__str (s), -(1)) :: List.remove_assoc (__str (s)) (!parent));
  let known = ref (([] : (int) list)) in
  let keys = ref ([s]) in
  (try while (List.length (!known) < n) do
    try
  let mini = ref (_inf) in
  let u = ref (-(1)) in
  let i = ref (0) in
  (try while (!i < List.length (!keys)) do
    try
  let k = List.nth (!keys) (!i) in
  let d = List.assoc (__str (k)) (!dist) in
  if (not (in_list (!known) (Obj.repr (k))) && (d < !mini)) then (
  mini := d;
  u := k;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  known := (Obj.magic (List.append (!known) [(Obj.magic (!u) : int)]) : int list);
  (try List.iter (fun e ->
    try
  let v = List.nth (e) (0) in
  let w = List.nth (e) (1) in
  if not (in_list (!keys) (Obj.repr (v))) then (
  keys := (Obj.magic (List.append (!keys) [(Obj.magic (v) : int)]) : int list);
  );
  let cur = if (List.mem_assoc v !dist) then List.assoc (__str (v)) (!dist) else _inf in
  if (not (in_list (!known) (Obj.repr (v))) && (w < cur)) then (
  dist := ((__str (v), w) :: List.remove_assoc (__str (v)) (!dist));
  parent := ((__str (v), !u) :: List.remove_assoc (__str (v)) (!parent));
  );
    with Continue -> ()) (List.assoc (__str (!u)) (graph)) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let edges = ref (([] : (int list) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!keys)) do
    try
  let v = List.nth (!keys) (!j) in
  if (v <> s) then (
  edges := (Obj.magic (List.append (!edges) [(Obj.magic ([(v + 1); (List.assoc (__str (v)) (!parent) + 1)]) : int list)]) : int list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!edges) : int list list); raise Return
  with Return -> !__ret)

and sort_heap h dist =
  let __ret = ref ([] : (int) list) in
  (try
  let h = (Obj.magic h : int list) in
  let dist = (Obj.magic dist : (string * int) list) in
  let a = ref (h) in
  let i = ref (0) in
  (try while (!i < List.length (!a)) do
    try
  let j = ref (0) in
  (try while (!j < ((List.length (!a) - !i) - 1)) do
    try
  let dj = if (List.mem_assoc List.nth (!a) (!j) dist) then List.assoc (__str (List.nth (!a) (!j))) (dist) else _inf in
  let dj1 = if (List.mem_assoc List.nth (!a) ((!j + 1)) dist) then List.assoc (__str (List.nth (!a) ((!j + 1)))) (dist) else _inf in
  if (dj > dj1) then (
  let t = List.nth (!a) (!j) in
  a := (List.mapi (fun __i __x -> if __i = !j then List.nth (!a) ((!j + 1)) else __x) (!a));
  a := (List.mapi (fun __i __x -> if __i = (!j + 1) then t else __x) (!a));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : int list); raise Return
  with Return -> !__ret)

and prim_heap graph s n =
  let __ret = ref ([] : (int list) list) in
  (try
  let graph = (Obj.magic graph : (string * int list list) list) in
  let s = (Obj.magic s : int) in
  let n = (Obj.magic n : int) in
  let dist = ref ([] : (string * int) list) in
  let parent = ref ([] : (string * int) list) in
  dist := ((__str (s), 0) :: List.remove_assoc (__str (s)) (!dist));
  parent := ((__str (s), -(1)) :: List.remove_assoc (__str (s)) (!parent));
  let h = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  h := (Obj.magic (List.append (!h) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  h := (Obj.magic sort_heap (!h) ((Obj.magic !dist : (string * int) list)) : int list);
  let known = ref (([] : (int) list)) in
  (try while (List.length (!h) > 0) do
    try
  let u = List.nth (!h) (0) in
  h := (Obj.magic List.of_seq (Seq.take (List.length (!h) - 1) (Seq.drop 1 (List.to_seq (!h)))) : int list);
  known := (Obj.magic (List.append (!known) [(Obj.magic (u) : int)]) : int list);
  (try List.iter (fun e ->
    try
  let v = List.nth (e) (0) in
  let w = List.nth (e) (1) in
  let cur = if (List.mem_assoc v !dist) then List.assoc (__str (v)) (!dist) else _inf in
  if (not (in_list (!known) (Obj.repr (v))) && (w < cur)) then (
  dist := ((__str (v), w) :: List.remove_assoc (__str (v)) (!dist));
  parent := ((__str (v), u) :: List.remove_assoc (__str (v)) (!parent));
  );
    with Continue -> ()) (List.assoc (__str (u)) (graph)) with Break -> ());
  h := (Obj.magic sort_heap (!h) ((Obj.magic !dist : (string * int) list)) : int list);
    with Continue -> ()
  done with Break -> ());
  let edges = ref (([] : (int list) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!j <> s) then (
  edges := (Obj.magic (List.append (!edges) [(Obj.magic ([(!j + 1); (List.assoc (__str (!j)) (!parent) + 1)]) : int list)]) : int list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!edges) : int list list); raise Return
  with Return -> !__ret)

and print_edges edges =
  let __ret = ref (Obj.magic 0) in
  (try
  let edges = (Obj.magic edges : int list list) in
  let i = ref (0) in
  (try while (!i < List.length (edges)) do
    try
  let e = ref (List.nth (edges) (!i)) in
  print_endline ((((("(" ^ (string_of_int (List.nth (!e) (0)))) ^ ", ") ^ (string_of_int (List.nth (!e) (1)))) ^ ")"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and test_vector () =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = 5 in
  let _g = ref ([] : (string * int list list) list) in
  let i = ref (0) in
  (try while (!i < x) do
    try
  _g := ((__str (!i), []) :: List.remove_assoc (__str (!i)) (!_g));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  _g := (Obj.magic connect ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (1)) (Obj.repr (2)) (Obj.repr (15)) : (string * int list list) list);
  _g := (Obj.magic connect ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (1)) (Obj.repr (3)) (Obj.repr (12)) : (string * int list list) list);
  _g := (Obj.magic connect ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (2)) (Obj.repr (4)) (Obj.repr (13)) : (string * int list list) list);
  _g := (Obj.magic connect ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (2)) (Obj.repr (5)) (Obj.repr (5)) : (string * int list list) list);
  _g := (Obj.magic connect ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (3)) (Obj.repr (2)) (Obj.repr (6)) : (string * int list list) list);
  _g := (Obj.magic connect ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (3)) (Obj.repr (4)) (Obj.repr (6)) : (string * int list list) list);
  let mst = ref (prim ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (0)) (Obj.repr (x))) in
  ignore (print_edges (!mst));
  let mst_heap = ref (prim_heap ((Obj.magic !_g : (string * int list list) list)) (Obj.repr (0)) (Obj.repr (x))) in
  ignore (print_edges (!mst_heap));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (test_vector ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
