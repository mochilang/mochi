(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec node_to_string n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : (string * Obj.t) list) in
  __ret := (Obj.magic ((((((("<node=" ^ (Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string)) ^ " inbound=") ^ __show ((Obj.obj (List.assoc (__str ("inbound")) (n) : Obj.t) : string list))) ^ " outbound=") ^ __show ((Obj.obj (List.assoc (__str ("outbound")) (n) : Obj.t) : string list))) ^ ">")) : string); raise Return
  with Return -> !__ret)

and page_rank nodes limit d =
  let __ret = ref ([] : (string * float) list) in
  (try
  let nodes = (Obj.magic nodes : (string * Obj.t) list list) in
  let limit = (Obj.magic limit : int) in
  let d = (Obj.magic d : float) in
  let ranks = ref ([] : (string * float) list) in
  (try List.iter (fun n ->
    try
  ranks := ((__str ((Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string)), 1.0) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string))) (!ranks));
    with Continue -> ()) (nodes) with Break -> ());
  let outbounds = ref ([] : (string * float) list) in
  (try List.iter (fun n ->
    try
  outbounds := ((__str ((Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string)), (1.0 *. float_of_int (List.length ((Obj.obj (List.assoc (__str ("outbound")) (n) : Obj.t) : string list))))) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string))) (!outbounds));
    with Continue -> ()) (nodes) with Break -> ());
  let i = ref (0) in
  (try while (!i < limit) do
    try
  print_endline ((("======= Iteration " ^ (string_of_int ((!i + 1)))) ^ " ======="));
  (try List.iter (fun n ->
    try
  let sum_val = ref (0.0) in
  (try List.iter (fun ib ->
    try
  sum_val := (!sum_val +. (List.assoc (__str (ib)) (!ranks) /. List.assoc (__str (ib)) (!outbounds)));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("inbound")) (n) : Obj.t) : string list)) with Break -> ());
  ranks := ((__str ((Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string)), ((1.0 -. d) +. (d *. !sum_val))) :: List.remove_assoc (__str ((Obj.obj (List.assoc (__str ("name")) (n) : Obj.t) : string))) (!ranks));
    with Continue -> ()) (nodes) with Break -> ());
  print_endline (__show !ranks);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ranks) : (string * float) list); raise Return
  with Return -> !__ret)


let names = ref (["A"; "B"; "C"])
let graph = ref ([[0; 1; 1]; [0; 0; 1]; [1; 0; 0]])
let nodes = ref (([] : ((string * Obj.t) list) list))
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun name ->
    try
  nodes := (Obj.magic (List.append (!nodes) [(Obj.magic ([(__str ("name"), Obj.repr (name)); (__str ("inbound"), Obj.repr ([])); (__str ("outbound"), Obj.repr ([]))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()) (!names) with Break -> ());
  let ri = ref (0) in
  (try while (!ri < List.length (!graph)) do
    try
  let row = ref (List.nth (!graph) (!ri)) in
  let ci = ref (0) in
  (try while (!ci < List.length (!row)) do
    try
  if (List.nth (!row) (!ci) = 1) then (
  let n_in = ref (List.nth (!nodes) (!ci)) in
  n_in := ((__str ("inbound"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("inbound")) (!n_in) : Obj.t) : string list)) [(Obj.magic (List.nth (!names) (!ri)) : string)]))) :: List.remove_assoc (__str ("inbound")) (Obj.magic (!n_in) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !ci then !n_in else __x) (!nodes));
  let n_out = ref (List.nth (!nodes) (!ri)) in
  n_out := ((__str ("outbound"), Obj.repr ((List.append ((Obj.obj (List.assoc (__str ("outbound")) (!n_out) : Obj.t) : string list)) [(Obj.magic (List.nth (!names) (!ci)) : string)]))) :: List.remove_assoc (__str ("outbound")) (Obj.magic (!n_out) : (string * Obj.t) list));
  nodes := (List.mapi (fun __i __x -> if __i = !ri then !n_out else __x) (!nodes));
  );
  ci := (!ci + 1);
    with Continue -> ()
  done with Break -> ());
  ri := (!ri + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("======= Nodes =======");
  (try List.iter (fun n ->
    try
  print_endline (__show n);
    with Continue -> ()) (!nodes) with Break -> ());
  ignore (page_rank (!nodes) (Obj.repr (3)) (Obj.repr (0.85)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
