(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec dfs graph at parent visited ids low id bridges =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  let at = (Obj.magic at : int) in
  let parent = (Obj.magic parent : int) in
  visited := (Obj.magic !visited : bool list);
  ids := (Obj.magic !ids : int list);
  low := (Obj.magic !low : int list);
  let id = (Obj.magic id : int) in
  let bridges = (Obj.magic bridges : int list list) in
  visited := (List.mapi (fun __i __x -> if __i = at then true else __x) (!visited));
  ids := (List.mapi (fun __i __x -> if __i = at then id else __x) (!ids));
  low := (List.mapi (fun __i __x -> if __i = at then id else __x) (!low));
  let current_id = ref ((id + 1)) in
  let res_bridges = ref (bridges) in
  (try List.iter (fun to_ ->
    try
  if (to_ = parent) then (
  raise Continue;
  ) else (
  if not (List.nth (!visited) (to_)) then (
  let result = dfs ((Obj.magic graph : (string * int list) list)) (Obj.repr (to_)) (Obj.repr (at)) (visited) (ids) (low) (Obj.repr (!current_id)) (!res_bridges) in
  current_id := (Obj.obj (List.assoc (__str ("id")) (result) : Obj.t) : int);
  res_bridges := (Obj.magic (Obj.obj (List.assoc (__str ("bridges")) (result) : Obj.t) : int list list) : int list list);
  if (List.nth (!low) (at) > List.nth (!low) (to_)) then (
  low := (List.mapi (fun __i __x -> if __i = at then List.nth (!low) (to_) else __x) (!low));
  );
  if (List.nth (!ids) (at) < List.nth (!low) (to_)) then (
  let edge = ref (if (at < to_) then [at; to_] else [to_; at]) in
  res_bridges := (Obj.magic (List.append (!res_bridges) [(Obj.magic (!edge) : int list)]) : int list list);
  );
  ) else (
  if (List.nth (!low) (at) > List.nth (!ids) (to_)) then (
  low := (List.mapi (fun __i __x -> if __i = at then List.nth (!ids) (to_) else __x) (!low));
  );
  );
  );
    with Continue -> ()) (List.assoc (__str (at)) (graph)) with Break -> ());
  __ret := (Obj.magic ([(__str ("id"), Obj.repr (!current_id)); (__str ("bridges"), Obj.repr (!res_bridges))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and compute_bridges graph =
  let __ret = ref ([] : (int list) list) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  let n = List.length (graph) in
  let visited = ref (([] : (bool) list)) in
  let ids = ref (([] : (int) list)) in
  let low = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  visited := (Obj.magic (List.append (!visited) [(Obj.magic (false) : bool)]) : bool list);
  ids := (Obj.magic (List.append (!ids) [(Obj.magic (0) : int)]) : int list);
  low := (Obj.magic (List.append (!low) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let bridges = ref (([] : (int list) list)) in
  let id = ref (0) in
  i := 0;
  (try while (!i < n) do
    try
  if not (List.nth (!visited) (!i)) then (
  let result = dfs ((Obj.magic graph : (string * int list) list)) (Obj.repr (!i)) (Obj.repr (-(1))) (visited) (ids) (low) (Obj.repr (!id)) (!bridges) in
  id := (Obj.obj (List.assoc (__str ("id")) (result) : Obj.t) : int);
  bridges := (Obj.magic (Obj.obj (List.assoc (__str ("bridges")) (result) : Obj.t) : int list list) : int list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!bridges) : int list list); raise Return
  with Return -> !__ret)

and get_demo_graph index =
  let __ret = ref ([] : (string * int list) list) in
  (try
  let index = (Obj.magic index : int) in
  if (index = 0) then (
  __ret := (Obj.magic ([(__str (0), [1; 2]); (__str (1), [0; 2]); (__str (2), [0; 1; 3; 5]); (__str (3), [2; 4]); (__str (4), [3]); (__str (5), [2; 6; 8]); (__str (6), [5; 7]); (__str (7), [6; 8]); (__str (8), [5; 7])]) : (string * int list) list); raise Return
  );
  if (index = 1) then (
  __ret := (Obj.magic ([(__str (0), Obj.repr ([6])); (__str (1), Obj.repr ([9])); (__str (2), Obj.repr ([4; 5])); (__str (3), Obj.repr ([4])); (__str (4), Obj.repr ([2; 3])); (__str (5), Obj.repr ([2])); (__str (6), Obj.repr ([0; 7])); (__str (7), Obj.repr ([6])); (__str (8), Obj.repr ([])); (__str (9), Obj.repr ([1]))]) : (string * int list) list); raise Return
  );
  if (index = 2) then (
  __ret := (Obj.magic ([(__str (0), Obj.repr ([4])); (__str (1), Obj.repr ([6])); (__str (2), Obj.repr ([])); (__str (3), Obj.repr ([5; 6; 7])); (__str (4), Obj.repr ([0; 6])); (__str (5), Obj.repr ([3; 8; 9])); (__str (6), Obj.repr ([1; 3; 4; 7])); (__str (7), Obj.repr ([3; 6; 8; 9])); (__str (8), Obj.repr ([5; 7])); (__str (9), Obj.repr ([5; 7]))]) : (string * int list) list); raise Return
  );
  __ret := (Obj.magic ([(__str (0), [1; 3]); (__str (1), [0; 2; 4]); (__str (2), [1; 3; 4]); (__str (3), [0; 2; 4]); (__str (4), [1; 2; 3])]) : (string * int list) list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list (compute_bridges ((Obj.magic get_demo_graph (Obj.repr (0)) : (string * int list) list))));
  print_endline (__show_list (compute_bridges ((Obj.magic get_demo_graph (Obj.repr (1)) : (string * int list) list))));
  print_endline (__show_list (compute_bridges ((Obj.magic get_demo_graph (Obj.repr (2)) : (string * int list) list))));
  print_endline (__show_list (compute_bridges ((Obj.magic get_demo_graph (Obj.repr (3)) : (string * int list) list))));
  print_endline (__show_list (compute_bridges ([])));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
