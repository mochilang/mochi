(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000
let rec pow2 k =
  let __ret = ref 0 in
  (try
  let k = (Obj.magic k : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  res := (!res * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and min2 a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a < b) then (
  __ret := (Obj.magic (a) : int); raise Return
  );
  __ret := (Obj.magic (b) : int); raise Return
  with Return -> !__ret)

and new_dinic n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  let lvl = ref (([] : (int) list)) in
  let ptr = ref (([] : (int) list)) in
  let q = ref (([] : (int) list)) in
  let adj = ref (([] : (int list list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  lvl := (Obj.magic (List.append (!lvl) [(Obj.magic (0) : int)]) : int list);
  ptr := (Obj.magic (List.append (!ptr) [(Obj.magic (0) : int)]) : int list);
  q := (Obj.magic (List.append (!q) [(Obj.magic (0) : int)]) : int list);
  let edges = ref (([] : (int list) list)) in
  adj := (Obj.magic (List.append (!adj) [(Obj.magic (!edges) : int list list)]) : int list list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("n"), Obj.repr (n)); (__str ("lvl"), Obj.repr (!lvl)); (__str ("ptr"), Obj.repr (!ptr)); (__str ("q"), Obj.repr (!q)); (__str ("adj"), Obj.repr (!adj))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_edge g a b c rcap =
  let __ret = ref (Obj.magic 0) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let rcap = (Obj.magic rcap : int) in
  let adj = ref ((Obj.obj (List.assoc (__str ("adj")) (!g) : Obj.t) : int list list list)) in
  let list_a = ref (List.nth (!adj) (a)) in
  let list_b = ref (List.nth (!adj) (b)) in
  let e1 = ref ([b; List.length (!list_b); c; 0]) in
  let e2 = ref ([a; List.length (!list_a); rcap; 0]) in
  list_a := (Obj.magic (List.append (!list_a) [(Obj.magic (!e1) : int list)]) : int list list);
  list_b := (Obj.magic (List.append (!list_b) [(Obj.magic (!e2) : int list)]) : int list list);
  adj := (List.mapi (fun __i __x -> if __i = a then !list_a else __x) (!adj));
  adj := (List.mapi (fun __i __x -> if __i = b then !list_b else __x) (!adj));
  g := ((__str ("adj"), Obj.repr (!adj)) :: List.remove_assoc (__str ("adj")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and dfs g v sink flow =
  let __ret = ref 0 in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let v = (Obj.magic v : int) in
  let sink = (Obj.magic sink : int) in
  let flow = (Obj.magic flow : int) in
  if ((v = sink) || (flow = 0)) then (
  __ret := (Obj.magic (flow) : int); raise Return
  );
  let ptr = ref ((Obj.obj (List.assoc (__str ("ptr")) (!g) : Obj.t) : int list)) in
  let i = ref (List.nth (!ptr) (v)) in
  let adj_all = ref ((Obj.obj (List.assoc (__str ("adj")) (!g) : Obj.t) : int list list list)) in
  let adj_v = ref (List.nth (!adj_all) (v)) in
  (try while (!i < List.length (!adj_v)) do
    try
  let e = ref (List.nth (!adj_v) (!i)) in
  let to_ = List.nth (!e) (0) in
  if (List.nth ((Obj.obj (List.assoc (__str ("lvl")) (!g) : Obj.t) : int list)) (to_) = (List.nth ((Obj.obj (List.assoc (__str ("lvl")) (!g) : Obj.t) : int list)) (v) + 1)) then (
  let avail = (List.nth (!e) (2) - List.nth (!e) (3)) in
  let pushed = dfs (g) (Obj.repr (to_)) (Obj.repr (sink)) (Obj.repr (min2 (Obj.repr (flow)) (Obj.repr (avail)))) in
  if (pushed > 0) then (
  e := (List.mapi (fun __i __x -> if __i = 3 then (List.nth (!e) (3) + pushed) else __x) (!e));
  adj_v := (List.mapi (fun __i __x -> if __i = !i then !e else __x) (!adj_v));
  let adj_to = ref (List.nth (!adj_all) (to_)) in
  let back = ref (List.nth (!adj_to) (List.nth (!e) (1))) in
  back := (List.mapi (fun __i __x -> if __i = 3 then (List.nth (!back) (3) - pushed) else __x) (!back));
  adj_to := (List.mapi (fun __i __x -> if __i = List.nth (!e) (1) then !back else __x) (!adj_to));
  adj_all := (List.mapi (fun __i __x -> if __i = to_ then !adj_to else __x) (!adj_all));
  adj_all := (List.mapi (fun __i __x -> if __i = v then !adj_v else __x) (!adj_all));
  g := ((__str ("adj"), Obj.repr (!adj_all)) :: List.remove_assoc (__str ("adj")) (Obj.magic (!g) : (string * Obj.t) list));
  __ret := (Obj.magic (pushed) : int); raise Return
  );
  );
  i := (!i + 1);
  ptr := (List.mapi (fun __i __x -> if __i = v then !i else __x) (!ptr));
    with Continue -> ()
  done with Break -> ());
  g := ((__str ("ptr"), Obj.repr (!ptr)) :: List.remove_assoc (__str ("ptr")) (Obj.magic (!g) : (string * Obj.t) list));
  adj_all := (List.mapi (fun __i __x -> if __i = v then !adj_v else __x) (!adj_all));
  g := ((__str ("adj"), Obj.repr (!adj_all)) :: List.remove_assoc (__str ("adj")) (Obj.magic (!g) : (string * Obj.t) list));
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and max_flow g source sink =
  let __ret = ref 0 in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let source = (Obj.magic source : int) in
  let sink = (Obj.magic sink : int) in
  let flow = ref (0) in
  let l = ref (0) in
  (try while (!l < 31) do
    try
  let threshold = pow2 (Obj.repr ((30 - !l))) in
  (try while true do
    try
  let lvl = ref (([] : (int) list)) in
  let ptr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("n")) (!g) : Obj.t) : int)) do
    try
  lvl := (Obj.magic (List.append (!lvl) [(Obj.magic (0) : int)]) : int list);
  ptr := (Obj.magic (List.append (!ptr) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  g := ((__str ("lvl"), Obj.repr (!lvl)) :: List.remove_assoc (__str ("lvl")) (Obj.magic (!g) : (string * Obj.t) list));
  g := ((__str ("ptr"), Obj.repr (!ptr)) :: List.remove_assoc (__str ("ptr")) (Obj.magic (!g) : (string * Obj.t) list));
  let qi = ref (0) in
  let qe = ref (1) in
  lvl := (List.mapi (fun __i __x -> if __i = source then 1 else __x) (!lvl));
  g := ((__str ("lvl"), Obj.repr (!lvl)) :: List.remove_assoc (__str ("lvl")) (Obj.magic (!g) : (string * Obj.t) list));
  let q = ref ((Obj.obj (List.assoc (__str ("q")) (!g) : Obj.t) : int list)) in
  q := (List.mapi (fun __i __x -> if __i = 0 then source else __x) (!q));
  (try while ((!qi < !qe) && (List.nth ((Obj.obj (List.assoc (__str ("lvl")) (!g) : Obj.t) : int list)) (sink) = 0)) do
    try
  let v = List.nth (!q) (!qi) in
  qi := (!qi + 1);
  let edges = ref (List.nth ((Obj.obj (List.assoc (__str ("adj")) (!g) : Obj.t) : int list list list)) (v)) in
  let j = ref (0) in
  (try while (!j < List.length (!edges)) do
    try
  let e = ref (List.nth (!edges) (!j)) in
  let to_ = List.nth (!e) (0) in
  let residual = (List.nth (!e) (2) - List.nth (!e) (3)) in
  let lvl_inner = ref ((Obj.obj (List.assoc (__str ("lvl")) (!g) : Obj.t) : int list)) in
  if ((List.nth (!lvl_inner) (to_) = 0) && (residual >= threshold)) then (
  q := (List.mapi (fun __i __x -> if __i = !qe then to_ else __x) (!q));
  qe := (!qe + 1);
  lvl_inner := (List.mapi (fun __i __x -> if __i = to_ then (List.nth (!lvl_inner) (v) + 1) else __x) (!lvl_inner));
  g := ((__str ("lvl"), Obj.repr (!lvl_inner)) :: List.remove_assoc (__str ("lvl")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let p = ref (dfs (g) (Obj.repr (source)) (Obj.repr (sink)) (Obj.repr (_inf))) in
  (try while (!p > 0) do
    try
  flow := (!flow + !p);
  p := dfs (g) (Obj.repr (source)) (Obj.repr (sink)) (Obj.repr (_inf));
    with Continue -> ()
  done with Break -> ());
  if (List.nth ((Obj.obj (List.assoc (__str ("lvl")) (!g) : Obj.t) : int list)) (sink) = 0) then (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  l := (!l + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!flow) : int); raise Return
  with Return -> !__ret)


let graph = ref (new_dinic (Obj.repr (10)))
let source = 0
let sink = 9
let v = ref (1)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!v < 5) do
    try
  ignore (add_edge (graph) (Obj.repr (source)) (Obj.repr (!v)) (Obj.repr (1)) (Obj.repr (0)));
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  v := 5;
  (try while (!v < 9) do
    try
  ignore (add_edge (graph) (Obj.repr (!v)) (Obj.repr (sink)) (Obj.repr (1)) (Obj.repr (0)));
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  v := 1;
  (try while (!v < 5) do
    try
  ignore (add_edge (graph) (Obj.repr (!v)) (Obj.repr ((!v + 4))) (Obj.repr (1)) (Obj.repr (0)));
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((string_of_int (max_flow (graph) (Obj.repr (source)) (Obj.repr (sink)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
