(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec longest_distance graph =
  let __ret = ref 0 in
  (try
  let graph = (Obj.magic graph : int list list) in
  let n = List.length (graph) in
  let indegree = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  indegree := (Obj.magic (List.append (!indegree) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let long_dist = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  long_dist := (Obj.magic (List.append (!long_dist) [(Obj.magic (1) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let u = ref (0) in
  (try while (!u < n) do
    try
  (try List.iter (fun v ->
    try
  indegree := (List.mapi (fun __i __x -> if __i = v then (List.nth (!indegree) (v) + 1) else __x) (!indegree));
    with Continue -> ()) (List.nth (graph) (!u)) with Break -> ());
  u := (!u + 1);
    with Continue -> ()
  done with Break -> ());
  let queue = ref (([] : (int) list)) in
  let head = ref (0) in
  let k = ref (0) in
  (try while (!k < n) do
    try
  if (List.nth (!indegree) (!k) = 0) then (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (!k) : int)]) : int list);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!head < List.length (!queue)) do
    try
  let vertex = List.nth (!queue) (!head) in
  head := (!head + 1);
  (try List.iter (fun x ->
    try
  indegree := (List.mapi (fun __i __x -> if __i = x then (List.nth (!indegree) (x) - 1) else __x) (!indegree));
  let new_dist = (List.nth (!long_dist) (vertex) + 1) in
  if (new_dist > List.nth (!long_dist) (x)) then (
  long_dist := (List.mapi (fun __i __x -> if __i = x then new_dist else __x) (!long_dist));
  );
  if (List.nth (!indegree) (x) = 0) then (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (x) : int)]) : int list);
  );
    with Continue -> ()) (List.nth (graph) (vertex)) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let max_len = ref (List.nth (!long_dist) (0)) in
  let m = ref (1) in
  (try while (!m < n) do
    try
  if (List.nth (!long_dist) (!m) > !max_len) then (
  max_len := List.nth (!long_dist) (!m);
  );
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!max_len) : int); raise Return
  with Return -> !__ret)


let graph = ref ([Obj.repr ([2; 3; 4]); Obj.repr ([2; 7]); Obj.repr ([5]); Obj.repr ([5; 7]); Obj.repr ([7]); Obj.repr ([6]); Obj.repr ([7]); Obj.repr ([])])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (longest_distance (!graph)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
