(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec make_graph directed =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = ref ([] : (string * string list) list) in
  __ret := (Obj.magic ([(__str ("adj_list"), Obj.repr (!m)); (__str ("directed"), Obj.repr (directed))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and contains_vertex m v =
  let __ret = ref false in
  (try
  let m = (Obj.magic m : (string * string list) list) in
  __ret := (Obj.magic ((List.mem_assoc v m)) : bool); raise Return
  with Return -> !__ret)

and add_edge g s d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let adj = ref ((Obj.obj (List.assoc (__str ("adj_list")) (!g) : Obj.t) : ( string * string list ) list)) in
  if not ((Obj.obj (List.assoc (__str ("directed")) (!g) : Obj.t) : bool)) then (
  if (contains_vertex ((Obj.magic !adj : (string * string list) list)) (s) && contains_vertex ((Obj.magic !adj : (string * string list) list)) (d)) then (
  adj := ((__str (s), (List.append (List.assoc (__str (s)) (!adj)) [(Obj.magic (d) : string)])) :: List.remove_assoc (__str (s)) (!adj));
  adj := ((__str (d), (List.append (List.assoc (__str (d)) (!adj)) [(Obj.magic (s) : string)])) :: List.remove_assoc (__str (d)) (!adj));
  ) else (
  if contains_vertex ((Obj.magic !adj : (string * string list) list)) (s) then (
  adj := ((__str (s), (List.append (List.assoc (__str (s)) (!adj)) [(Obj.magic (d) : string)])) :: List.remove_assoc (__str (s)) (!adj));
  adj := ((__str (d), [s]) :: List.remove_assoc (__str (d)) (!adj));
  ) else (
  if contains_vertex ((Obj.magic !adj : (string * string list) list)) (d) then (
  adj := ((__str (d), (List.append (List.assoc (__str (d)) (!adj)) [(Obj.magic (s) : string)])) :: List.remove_assoc (__str (d)) (!adj));
  adj := ((__str (s), [d]) :: List.remove_assoc (__str (s)) (!adj));
  ) else (
  adj := ((__str (s), [d]) :: List.remove_assoc (__str (s)) (!adj));
  adj := ((__str (d), [s]) :: List.remove_assoc (__str (d)) (!adj));
  );
  );
  );
  ) else (
  if (contains_vertex ((Obj.magic !adj : (string * string list) list)) (s) && contains_vertex ((Obj.magic !adj : (string * string list) list)) (d)) then (
  adj := ((__str (s), (List.append (List.assoc (__str (s)) (!adj)) [(Obj.magic (d) : string)])) :: List.remove_assoc (__str (s)) (!adj));
  ) else (
  if contains_vertex ((Obj.magic !adj : (string * string list) list)) (s) then (
  adj := ((__str (s), (List.append (List.assoc (__str (s)) (!adj)) [(Obj.magic (d) : string)])) :: List.remove_assoc (__str (s)) (!adj));
  adj := ((__str (d), []) :: List.remove_assoc (__str (d)) (!adj));
  ) else (
  if contains_vertex ((Obj.magic !adj : (string * string list) list)) (d) then (
  adj := ((__str (s), [d]) :: List.remove_assoc (__str (s)) (!adj));
  ) else (
  adj := ((__str (s), [d]) :: List.remove_assoc (__str (s)) (!adj));
  adj := ((__str (d), []) :: List.remove_assoc (__str (d)) (!adj));
  );
  );
  );
  );
  g := ((__str ("adj_list"), Obj.repr (!adj)) :: List.remove_assoc (__str ("adj_list")) (Obj.magic (!g) : (string * Obj.t) list));
  __ret := (Obj.magic (!g) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and graph_to_string g =
  let __ret = ref "" in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  __ret := (Obj.magic (__show ((Obj.obj (List.assoc (__str ("adj_list")) (g) : Obj.t) : ( string * string list ) list))) : string); raise Return
  with Return -> !__ret)


let d_graph = ref (make_graph (true))
let () =
  let mem_start = _mem () in
  let start = _now () in
  d_graph := add_edge (d_graph) ((string_of_int (0))) ((string_of_int (1)));
  print_endline ((graph_to_string (!d_graph)));
  d_graph := add_edge (d_graph) ((string_of_int (1))) ((string_of_int (2)));
  d_graph := add_edge (d_graph) ((string_of_int (1))) ((string_of_int (4)));
  d_graph := add_edge (d_graph) ((string_of_int (1))) ((string_of_int (5)));
  print_endline ((graph_to_string (!d_graph)));
  d_graph := add_edge (d_graph) ((string_of_int (2))) ((string_of_int (0)));
  d_graph := add_edge (d_graph) ((string_of_int (2))) ((string_of_int (6)));
  d_graph := add_edge (d_graph) ((string_of_int (2))) ((string_of_int (7)));
  print_endline ((graph_to_string (!d_graph)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
