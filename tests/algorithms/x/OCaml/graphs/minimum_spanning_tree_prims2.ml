(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec prims_algo graph =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * (string * int) list) list) in
  let _inf = 2147483647 in
  let dist = ref ([] : (string * int) list) in
  let parent = ref ([] : (string * string) list) in
  let queue = ref (([] : ((string * Obj.t) list) list)) in
  (try List.iter (fun (node, _) ->
    try
  dist := ((__str (node), _inf) :: List.remove_assoc (__str (node)) (!dist));
  parent := ((__str (node), "") :: List.remove_assoc (__str (node)) (!parent));
  queue := (Obj.magic (List.append (!queue) [(Obj.magic ([(__str ("node"), Obj.repr (node)); (__str ("weight"), Obj.repr (_inf))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()) (graph) with Break -> ());
  if (List.length (!queue) = 0) then (
  __ret := (Obj.magic ([(__str ("dist"), Obj.repr (!dist)); (__str ("parent"), Obj.repr (!parent))]) : (string * Obj.t) list); raise Return
  );
  let min_idx = ref (0) in
  let i = ref (1) in
  (try while (!i < List.length (!queue)) do
    try
  if ((Obj.obj (List.assoc (__str ("weight")) (List.nth (!queue) (!i)) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("weight")) (List.nth (!queue) (!min_idx)) : Obj.t) : int)) then (
  min_idx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let start_node = ref (List.nth (!queue) (!min_idx)) in
  let start = (Obj.obj (List.assoc (__str ("node")) (!start_node) : Obj.t) : string) in
  let new_q = ref (([] : ((string * Obj.t) list) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!queue)) do
    try
  if (!j <> !min_idx) then (
  new_q := (Obj.magic (List.append (!new_q) [(Obj.magic (List.nth (!queue) (!j)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  queue := (Obj.magic !new_q : (string * Obj.t) list list);
  dist := ((__str (start), 0) :: List.remove_assoc (__str (start)) (!dist));
  (try List.iter (fun (neighbour, _) ->
    try
  let w = List.assoc (__str (neighbour)) (List.assoc (__str (start)) (graph)) in
  if (List.assoc (__str (neighbour)) (!dist) > (List.assoc (__str (start)) (!dist) + w)) then (
  dist := ((__str (neighbour), (List.assoc (__str (start)) (!dist) + w)) :: List.remove_assoc (__str (neighbour)) (!dist));
  parent := ((__str (neighbour), start) :: List.remove_assoc (__str (neighbour)) (!parent));
  let k = ref (0) in
  (try while (!k < List.length (!queue)) do
    try
  if ((Obj.obj (List.assoc (__str ("node")) (List.nth (!queue) (!k)) : Obj.t) : string) = neighbour) then (
  queue := (List.mapi (fun __i __x -> if __i = !k then ((__str ("weight"), Obj.repr (List.assoc (__str (neighbour)) (!dist))) :: List.remove_assoc (__str ("weight")) (Obj.magic (List.nth (!queue) (!k)) : (string * Obj.t) list)) else __x) (!queue));
  raise Break;
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  );
    with Continue -> ()) (List.assoc (__str (start)) (graph)) with Break -> ());
  (try while (List.length (!queue) > 0) do
    try
  let best_idx = ref (0) in
  let p = ref (1) in
  (try while (!p < List.length (!queue)) do
    try
  if ((Obj.obj (List.assoc (__str ("weight")) (List.nth (!queue) (!p)) : Obj.t) : int) < (Obj.obj (List.assoc (__str ("weight")) (List.nth (!queue) (!best_idx)) : Obj.t) : int)) then (
  best_idx := !p;
  );
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  let node_entry = ref (List.nth (!queue) (!best_idx)) in
  let node = (Obj.obj (List.assoc (__str ("node")) (!node_entry) : Obj.t) : string) in
  let tmp = ref (([] : ((string * Obj.t) list) list)) in
  let q = ref (0) in
  (try while (!q < List.length (!queue)) do
    try
  if (!q <> !best_idx) then (
  tmp := (Obj.magic (List.append (!tmp) [(Obj.magic (List.nth (!queue) (!q)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  q := (!q + 1);
    with Continue -> ()
  done with Break -> ());
  queue := (Obj.magic !tmp : (string * Obj.t) list list);
  (try List.iter (fun (neighbour, _) ->
    try
  let w = List.assoc (__str (neighbour)) (List.assoc (__str (node)) (graph)) in
  if (List.assoc (__str (neighbour)) (!dist) > (List.assoc (__str (node)) (!dist) + w)) then (
  dist := ((__str (neighbour), (List.assoc (__str (node)) (!dist) + w)) :: List.remove_assoc (__str (neighbour)) (!dist));
  parent := ((__str (neighbour), node) :: List.remove_assoc (__str (neighbour)) (!parent));
  let r = ref (0) in
  (try while (!r < List.length (!queue)) do
    try
  if ((Obj.obj (List.assoc (__str ("node")) (List.nth (!queue) (!r)) : Obj.t) : string) = neighbour) then (
  queue := (List.mapi (fun __i __x -> if __i = !r then ((__str ("weight"), Obj.repr (List.assoc (__str (neighbour)) (!dist))) :: List.remove_assoc (__str ("weight")) (Obj.magic (List.nth (!queue) (!r)) : (string * Obj.t) list)) else __x) (!queue));
  raise Break;
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  );
    with Continue -> ()) (List.assoc (__str (node)) (graph)) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("dist"), Obj.repr (!dist)); (__str ("parent"), Obj.repr (!parent))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and iabs x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic (-(x)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)


let graph = ref ([] : (string * (string * int) list) list)
let () =
  let mem_start = _mem () in
  let start = _now () in
  graph := ((__str ("a"), [(__str ("b"), 3); (__str ("c"), 15)]) :: List.remove_assoc (__str ("a")) (!graph));
  graph := ((__str ("b"), [(__str ("a"), 3); (__str ("c"), 10); (__str ("d"), 100)]) :: List.remove_assoc (__str ("b")) (!graph));
  graph := ((__str ("c"), [(__str ("a"), 15); (__str ("b"), 10); (__str ("d"), 5)]) :: List.remove_assoc (__str ("c")) (!graph));
  graph := ((__str ("d"), [(__str ("b"), 100); (__str ("c"), 5)]) :: List.remove_assoc (__str ("d")) (!graph));
  let res = prims_algo ((Obj.magic !graph : (string * (string * int) list) list)) in
  let dist = ref ((Obj.obj (List.assoc (__str ("dist")) (res) : Obj.t) : ( string * int ) list)) in
  print_endline ((string_of_int (iabs (Obj.repr ((List.assoc (__str ("a")) (!dist) - List.assoc (__str ("b")) (!dist)))))));
  print_endline ((string_of_int (iabs (Obj.repr ((List.assoc (__str ("d")) (!dist) - List.assoc (__str ("b")) (!dist)))))));
  print_endline ((string_of_int (iabs (Obj.repr ((List.assoc (__str ("a")) (!dist) - List.assoc (__str ("c")) (!dist)))))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
