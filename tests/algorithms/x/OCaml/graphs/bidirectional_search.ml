(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec expand_search graph queue head parents visited opposite_visited =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  let queue = (Obj.magic queue : int list) in
  head := (Obj.magic !head : int);
  let parents = (Obj.magic parents : (string * int) list) in
  let visited = (Obj.magic visited : (string * bool) list) in
  let opposite_visited = (Obj.magic opposite_visited : (string * bool) list) in
  if (!head >= List.length (queue)) then (
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (queue)); (__str ("head"), Obj.repr (!head)); (__str ("parents"), Obj.repr (parents)); (__str ("visited"), Obj.repr (visited)); (__str ("intersection"), Obj.repr ((0 - 1))); (__str ("found"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  );
  let current = List.nth (queue) (!head) in
  head := (!head + 1);
  let neighbors = ref (List.assoc (__str (current)) (graph)) in
  let q = ref (queue) in
  let p = ref (parents) in
  let v = ref (visited) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  let neighbor = List.nth (!neighbors) (!i) in
  if List.assoc (__str (neighbor)) (!v) then (
  i := (!i + 1);
  raise Continue;
  );
  v := ((__str (neighbor), true) :: List.remove_assoc (__str (neighbor)) (!v));
  p := ((__str (neighbor), current) :: List.remove_assoc (__str (neighbor)) (!p));
  q := (Obj.magic (List.append (!q) [(Obj.magic (neighbor) : int)]) : int list);
  if List.assoc (__str (neighbor)) (opposite_visited) then (
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!q)); (__str ("head"), Obj.repr (!head)); (__str ("parents"), Obj.repr (!p)); (__str ("visited"), Obj.repr (!v)); (__str ("intersection"), Obj.repr (neighbor)); (__str ("found"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("queue"), Obj.repr (!q)); (__str ("head"), Obj.repr (!head)); (__str ("parents"), Obj.repr (!p)); (__str ("visited"), Obj.repr (!v)); (__str ("intersection"), Obj.repr ((0 - 1))); (__str ("found"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and construct_path current parents =
  let __ret = ref ([] : (int) list) in
  (try
  let current = (Obj.magic current : int) in
  let parents = (Obj.magic parents : (string * int) list) in
  let path = ref (([] : (int) list)) in
  let node = ref (current) in
  (try while (!node <> (0 - 1)) do
    try
  path := (Obj.magic (List.append (!path) [(Obj.magic (!node) : int)]) : int list);
  node := List.assoc (__str (!node)) (parents);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!path) : int list); raise Return
  with Return -> !__ret)

and reverse_list xs =
  let __ret = ref ([] : (int) list) in
  (try
  let xs = (Obj.magic xs : int list) in
  let res = ref (([] : (int) list)) in
  let i = ref (List.length (xs)) in
  (try while (!i > 0) do
    try
  i := (!i - 1);
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : int)]) : int list);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and bidirectional_search g start goal =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let g = (Obj.magic g : (string * int list) list) in
  let start = (Obj.magic start : int) in
  let goal = (Obj.magic goal : int) in
  if (start = goal) then (
  __ret := (Obj.magic ([(__str ("path"), Obj.repr ([start])); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  );
  let forward_parents = ref ([] : (string * int) list) in
  forward_parents := ((__str (start), (0 - 1)) :: List.remove_assoc (__str (start)) (!forward_parents));
  let backward_parents = ref ([] : (string * int) list) in
  backward_parents := ((__str (goal), (0 - 1)) :: List.remove_assoc (__str (goal)) (!backward_parents));
  let forward_visited = ref ([] : (string * bool) list) in
  forward_visited := ((__str (start), true) :: List.remove_assoc (__str (start)) (!forward_visited));
  let backward_visited = ref ([] : (string * bool) list) in
  backward_visited := ((__str (goal), true) :: List.remove_assoc (__str (goal)) (!backward_visited));
  let forward_queue = ref ([start]) in
  let backward_queue = ref ([goal]) in
  let forward_head = ref (0) in
  let backward_head = ref (0) in
  let intersection = ref ((0 - 1)) in
  (try while (((!forward_head < List.length (!forward_queue)) && (!backward_head < List.length (!backward_queue))) && (!intersection = (0 - 1))) do
    try
  let res = ref (expand_search ((Obj.magic g : (string * int list) list)) (!forward_queue) (forward_head) ((Obj.magic !forward_parents : (string * int) list)) ((Obj.magic !forward_visited : (string * bool) list)) ((Obj.magic !backward_visited : (string * bool) list))) in
  forward_queue := (Obj.magic (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : int list) : int list);
  forward_head := (Obj.obj (List.assoc (__str ("head")) (!res) : Obj.t) : int);
  forward_parents := (Obj.magic (Obj.obj (List.assoc (__str ("parents")) (!res) : Obj.t) : ( string * int ) list) : (string * int) list);
  forward_visited := (Obj.magic (Obj.obj (List.assoc (__str ("visited")) (!res) : Obj.t) : ( string * bool ) list) : (string * bool) list);
  if (Obj.obj (List.assoc (__str ("found")) (!res) : Obj.t) : bool) then (
  intersection := (Obj.obj (List.assoc (__str ("intersection")) (!res) : Obj.t) : int);
  raise Break;
  );
  res := expand_search ((Obj.magic g : (string * int list) list)) (!backward_queue) (backward_head) ((Obj.magic !backward_parents : (string * int) list)) ((Obj.magic !backward_visited : (string * bool) list)) ((Obj.magic !forward_visited : (string * bool) list));
  backward_queue := (Obj.magic (Obj.obj (List.assoc (__str ("queue")) (!res) : Obj.t) : int list) : int list);
  backward_head := (Obj.obj (List.assoc (__str ("head")) (!res) : Obj.t) : int);
  backward_parents := (Obj.magic (Obj.obj (List.assoc (__str ("parents")) (!res) : Obj.t) : ( string * int ) list) : (string * int) list);
  backward_visited := (Obj.magic (Obj.obj (List.assoc (__str ("visited")) (!res) : Obj.t) : ( string * bool ) list) : (string * bool) list);
  if (Obj.obj (List.assoc (__str ("found")) (!res) : Obj.t) : bool) then (
  intersection := (Obj.obj (List.assoc (__str ("intersection")) (!res) : Obj.t) : int);
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  if (!intersection = (0 - 1)) then (
  __ret := (Obj.magic ([(__str ("path"), Obj.repr ([])); (__str ("ok"), Obj.repr (false))]) : (string * Obj.t) list); raise Return
  );
  let forward_path = ref (construct_path (Obj.repr (!intersection)) ((Obj.magic !forward_parents : (string * int) list))) in
  forward_path := (Obj.magic reverse_list (!forward_path) : int list);
  let back_start = ref (List.assoc (__str (!intersection)) (!backward_parents)) in
  let backward_path = ref (construct_path (Obj.repr (!back_start)) ((Obj.magic !backward_parents : (string * int) list))) in
  let result = ref (!forward_path) in
  let j = ref (0) in
  (try while (!j < List.length (!backward_path)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic (List.nth (!backward_path) (!j)) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("path"), Obj.repr (!result)); (__str ("ok"), Obj.repr (true))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and is_edge g u v =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * int list) list) in
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  let neighbors = ref (List.assoc (__str (u)) (g)) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  if (List.nth (!neighbors) (!i) = v) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and path_exists g path =
  let __ret = ref false in
  (try
  let g = (Obj.magic g : (string * int list) list) in
  let path = (Obj.magic path : int list) in
  if (List.length (path) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while ((!i + 1) < List.length (path)) do
    try
  if not (is_edge ((Obj.magic g : (string * int list) list)) (Obj.repr (List.nth (path) (!i))) (Obj.repr (List.nth (path) ((!i + 1))))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and print_path g s t =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = (Obj.magic g : (string * int list) list) in
  let s = (Obj.magic s : int) in
  let t = (Obj.magic t : int) in
  let res = bidirectional_search ((Obj.magic g : (string * int list) list)) (Obj.repr (s)) (Obj.repr (t)) in
  if ((Obj.obj (List.assoc (__str ("ok")) (res) : Obj.t) : bool) && path_exists ((Obj.magic g : (string * int list) list)) ((Obj.obj (List.assoc (__str ("path")) (res) : Obj.t) : int list))) then (
  print_endline (((((("Path from " ^ (string_of_int (s))) ^ " to ") ^ (string_of_int (t))) ^ ": ") ^ (__str ((Obj.obj (List.assoc (__str ("path")) (res) : Obj.t) : int list)))));
  ) else (
  print_endline ((((("Path from " ^ (string_of_int (s))) ^ " to ") ^ (string_of_int (t))) ^ ": None"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let graph = ref ([(__str (0), [1; 2]); (__str (1), [0; 3; 4]); (__str (2), [0; 5; 6]); (__str (3), [1; 7]); (__str (4), [1; 8]); (__str (5), [2; 9]); (__str (6), [2; 10]); (__str (7), [3; 11]); (__str (8), [4; 11]); (__str (9), [5; 11]); (__str (10), [6; 11]); (__str (11), [7; 8; 9; 10])]) in
  ignore (print_path ((Obj.magic !graph : (string * int list) list)) (Obj.repr (0)) (Obj.repr (11)));
  ignore (print_path ((Obj.magic !graph : (string * int list) list)) (Obj.repr (5)) (Obj.repr (5)));
  let disconnected = ref ([(__str (0), [1; 2]); (__str (1), [0]); (__str (2), [0]); (__str (3), [4]); (__str (4), [3])]) in
  ignore (print_path ((Obj.magic !disconnected : (string * int list) list)) (Obj.repr (0)) (Obj.repr (3)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
