(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_matrix n =
  let __ret = ref ([] : (bool list) list) in
  (try
  let n = (Obj.magic n : int) in
  let matrix = ref (([] : (bool list) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  let row = ref (([] : (bool) list)) in
  let j = ref (0) in
  (try while (!j <= n) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (false) : bool)]) : bool list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic (List.append (!matrix) [(Obj.magic (!row) : bool list)]) : bool list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix) : bool list list); raise Return
  with Return -> !__ret)

and dfs u graph visited_edge path =
  let __ret = ref ([] : (int) list) in
  (try
  let u = (Obj.magic u : int) in
  let graph = (Obj.magic graph : (string * int list) list) in
  visited_edge := (Obj.magic !visited_edge : bool list list);
  path := (Obj.magic !path : int list);
  path := (Obj.magic (List.append (!path) [(Obj.magic (u) : int)]) : int list);
  if (List.mem_assoc u graph) then (
  let neighbors = ref (List.assoc (__str (u)) (graph)) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  let v = List.nth (!neighbors) (!i) in
  if (List.nth (List.nth (!visited_edge) (u)) (v) = false) then (
  visited_edge := (List.mapi (fun __i __x -> if __i = u then (List.mapi (fun __i __x -> if __i = v then true else __x) (List.nth (!visited_edge) (u))) else __x) (!visited_edge));
  visited_edge := (List.mapi (fun __i __x -> if __i = v then (List.mapi (fun __i __x -> if __i = u then true else __x) (List.nth (!visited_edge) (v))) else __x) (!visited_edge));
  path := (Obj.magic dfs (Obj.repr (v)) ((Obj.magic graph : (string * int list) list)) (visited_edge) (path) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!path) : int list); raise Return
  with Return -> !__ret)

and check_circuit_or_path graph max_node =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  let max_node = (Obj.magic max_node : int) in
  let odd_degree_nodes = ref (0) in
  let odd_node = ref (-(1)) in
  let i = ref (0) in
  (try while (!i < max_node) do
    try
  if (List.mem_assoc !i graph) then (
  if (((List.length (List.assoc (__str (!i)) (graph)) mod 2 + 2) mod 2) = 1) then (
  odd_degree_nodes := (!odd_degree_nodes + 1);
  odd_node := !i;
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!odd_degree_nodes = 0) then (
  __ret := (Obj.magic ([(__str ("status"), Obj.repr (1)); (__str ("odd_node"), Obj.repr (!odd_node))]) : (string * Obj.t) list); raise Return
  );
  if (!odd_degree_nodes = 2) then (
  __ret := (Obj.magic ([(__str ("status"), Obj.repr (2)); (__str ("odd_node"), Obj.repr (!odd_node))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("status"), Obj.repr (3)); (__str ("odd_node"), Obj.repr (!odd_node))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and check_euler graph max_node =
  let __ret = ref (Obj.magic 0) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  let max_node = (Obj.magic max_node : int) in
  let visited_edge = ref (make_matrix (Obj.repr (max_node))) in
  let res = check_circuit_or_path ((Obj.magic graph : (string * int list) list)) (Obj.repr (max_node)) in
  if ((Obj.obj (List.assoc (__str ("status")) (res) : Obj.t) : int) = 3) then (
  print_endline ("graph is not Eulerian");
  print_endline ("no path");
  __ret := (); raise Return
  );
  let start_node = ref (1) in
  if ((Obj.obj (List.assoc (__str ("status")) (res) : Obj.t) : int) = 2) then (
  start_node := (Obj.obj (List.assoc (__str ("odd_node")) (res) : Obj.t) : int);
  print_endline ("graph has a Euler path");
  );
  if ((Obj.obj (List.assoc (__str ("status")) (res) : Obj.t) : int) = 1) then (
  print_endline ("graph has a Euler cycle");
  );
  let path = ref (dfs (Obj.repr (!start_node)) ((Obj.magic graph : (string * int list) list)) (visited_edge) (ref ([]))) in
  print_endline ((__str (!path)));
    !__ret
  with Return -> !__ret)


let g1 = ref ([(__str (1), [2; 3; 4]); (__str (2), [1; 3]); (__str (3), [1; 2]); (__str (4), [1; 5]); (__str (5), [4])])
let g2 = ref ([(__str (1), [2; 3; 4; 5]); (__str (2), [1; 3]); (__str (3), [1; 2]); (__str (4), [1; 5]); (__str (5), [1; 4])])
let g3 = ref ([(__str (1), [2; 3; 4]); (__str (2), [1; 3; 4]); (__str (3), [1; 2]); (__str (4), [1; 2; 5]); (__str (5), [4])])
let g4 = ref ([(__str (1), [2; 3]); (__str (2), [1; 3]); (__str (3), [1; 2])])
let g5 = ref ([(__str (1), []); (__str (2), [])])
let max_node = 10
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (check_euler ((Obj.magic !g1 : (string * int list) list)) (Obj.repr (max_node)));
  ignore (check_euler ((Obj.magic !g2 : (string * int list) list)) (Obj.repr (max_node)));
  ignore (check_euler ((Obj.magic !g3 : (string * int list) list)) (Obj.repr (max_node)));
  ignore (check_euler ((Obj.magic !g4 : (string * int list) list)) (Obj.repr (max_node)));
  ignore (check_euler ((Obj.magic !g5 : (string * int list) list)) (Obj.repr (max_node)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
