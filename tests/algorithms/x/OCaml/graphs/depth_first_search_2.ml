(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec add_edge g from_vertex to_vertex =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let from_vertex = (Obj.magic from_vertex : int) in
  let to_vertex = (Obj.magic to_vertex : int) in
  let v = ref ((Obj.obj (List.assoc (__str ("vertex")) (!g) : Obj.t) : ( string * int list ) list)) in
  if (List.mem_assoc from_vertex !v) then (
  let lst = ref (List.assoc (__str (from_vertex)) (!v)) in
  lst := (Obj.magic (List.append (!lst) [(Obj.magic (to_vertex) : int)]) : int list);
  v := ((__str (from_vertex), !lst) :: List.remove_assoc (__str (from_vertex)) (!v));
  ) else (
  v := ((__str (from_vertex), [to_vertex]) :: List.remove_assoc (__str (from_vertex)) (!v));
  );
  g := ((__str ("vertex"), Obj.repr (!v)) :: List.remove_assoc (__str ("vertex")) (Obj.magic (!g) : (string * Obj.t) list));
  if ((from_vertex + 1) > (Obj.obj (List.assoc (__str ("size")) (!g) : Obj.t) : int)) then (
  g := ((__str ("size"), Obj.repr ((from_vertex + 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  if ((to_vertex + 1) > (Obj.obj (List.assoc (__str ("size")) (!g) : Obj.t) : int)) then (
  g := ((__str ("size"), Obj.repr ((to_vertex + 1))) :: List.remove_assoc (__str ("size")) (Obj.magic (!g) : (string * Obj.t) list));
  );
  __ret := (Obj.magic (!g) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and list_to_string lst =
  let __ret = ref "" in
  (try
  let lst = (Obj.magic lst : int list) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  res := (!res ^ (string_of_int (List.nth (lst) (!i))));
  if (!i < (List.length (lst) - 1)) then (
  res := (!res ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and list_to_arrow lst =
  let __ret = ref "" in
  (try
  let lst = (Obj.magic lst : int list) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  res := (!res ^ (string_of_int (List.nth (lst) (!i))));
  if (!i < (List.length (lst) - 1)) then (
  res := (!res ^ " -> ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and print_graph g =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  print_endline ((__show ((Obj.obj (List.assoc (__str ("vertex")) (g) : Obj.t) : ( string * int list ) list))));
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("size")) (g) : Obj.t) : int)) do
    try
  let edges = ref (([] : (int) list)) in
  if (List.mem_assoc !i (Obj.obj (List.assoc (__str ("vertex")) (g) : Obj.t) : ( string * int list ) list)) then (
  edges := (Obj.magic List.assoc (__str (!i)) ((Obj.obj (List.assoc (__str ("vertex")) (g) : Obj.t) : ( string * int list ) list)) : int list);
  );
  let line = (((string_of_int (!i)) ^ "  ->  ") ^ list_to_arrow (!edges)) in
  print_endline (line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and dfs_recursive g start_vertex visited order =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let start_vertex = (Obj.magic start_vertex : int) in
  visited := (Obj.magic !visited : bool list);
  order := (Obj.magic !order : int list);
  visited := (List.mapi (fun __i __x -> if __i = start_vertex then true else __x) (!visited));
  order := (Obj.magic (List.append (!order) [(Obj.magic (start_vertex) : int)]) : int list);
  if (List.mem_assoc start_vertex (Obj.obj (List.assoc (__str ("vertex")) (g) : Obj.t) : ( string * int list ) list)) then (
  let neighbors = ref (List.assoc (__str (start_vertex)) ((Obj.obj (List.assoc (__str ("vertex")) (g) : Obj.t) : ( string * int list ) list))) in
  let i = ref (0) in
  (try while (!i < List.length (!neighbors)) do
    try
  let nb = List.nth (!neighbors) (!i) in
  if not (List.nth (!visited) (nb)) then (
  order := (Obj.magic dfs_recursive ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (nb)) (visited) (order) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and dfs g =
  let __ret = ref ([] : (int) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let n = (Obj.obj (List.assoc (__str ("size")) (g) : Obj.t) : int) in
  let visited = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  visited := (Obj.magic (List.append (!visited) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let order = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < n) do
    try
  if not (List.nth (!visited) (!i)) then (
  order := (Obj.magic dfs_recursive ((Obj.magic g : (string * Obj.t) list)) (Obj.repr (!i)) (visited) (order) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)


let g = ref ([(__str ("vertex"), Obj.repr ([])); (__str ("size"), Obj.repr (0))])
let () =
  let mem_start = _mem () in
  let start = _now () in
  g := add_edge (g) (Obj.repr (0)) (Obj.repr (1));
  g := add_edge (g) (Obj.repr (0)) (Obj.repr (2));
  g := add_edge (g) (Obj.repr (1)) (Obj.repr (2));
  g := add_edge (g) (Obj.repr (2)) (Obj.repr (0));
  g := add_edge (g) (Obj.repr (2)) (Obj.repr (3));
  g := add_edge (g) (Obj.repr (3)) (Obj.repr (3));
  ignore (print_graph (!g));
  print_endline ("DFS:");
  print_endline ((list_to_string (dfs (!g))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
