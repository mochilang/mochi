(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec minimum_distance distances visited =
  let __ret = ref 0 in
  (try
  let distances = (Obj.magic distances : int list) in
  let visited = (Obj.magic visited : bool list) in
  let minimum = ref (10000000) in
  let min_index = ref (0) in
  let vertex = ref (0) in
  (try while (!vertex < List.length (distances)) do
    try
  if ((List.nth (distances) (!vertex) < !minimum) && (List.nth (visited) (!vertex) = false)) then (
  minimum := List.nth (distances) (!vertex);
  min_index := !vertex;
  );
  vertex := (!vertex + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!min_index) : int); raise Return
  with Return -> !__ret)

and dijkstra graph source =
  let __ret = ref ([] : (int) list) in
  (try
  let graph = (Obj.magic graph : int list list) in
  let source = (Obj.magic source : int) in
  let vertices = List.length (graph) in
  let distances = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < vertices) do
    try
  distances := (Obj.magic (List.append (!distances) [(Obj.magic (10000000) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  distances := (List.mapi (fun __i __x -> if __i = source then 0 else __x) (!distances));
  let visited = ref (([] : (bool) list)) in
  i := 0;
  (try while (!i < vertices) do
    try
  visited := (Obj.magic (List.append (!visited) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let count = ref (0) in
  (try while (!count < vertices) do
    try
  let u = minimum_distance (!distances) (!visited) in
  visited := (List.mapi (fun __i __x -> if __i = u then true else __x) (!visited));
  let v = ref (0) in
  (try while (!v < vertices) do
    try
  if (((List.nth (List.nth (graph) (u)) (!v) > 0) && (List.nth (!visited) (!v) = false)) && (List.nth (!distances) (!v) > (List.nth (!distances) (u) + List.nth (List.nth (graph) (u)) (!v)))) then (
  distances := (List.mapi (fun __i __x -> if __i = !v then (List.nth (!distances) (u) + List.nth (List.nth (graph) (u)) (!v)) else __x) (!distances));
  );
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!distances) : int list); raise Return
  with Return -> !__ret)

and print_solution distances =
  let __ret = ref (Obj.magic 0) in
  (try
  let distances = (Obj.magic distances : int list) in
  print_endline ("Vertex \t Distance from Source");
  let v = ref (0) in
  (try while (!v < List.length (distances)) do
    try
  print_endline ((((string_of_int (!v)) ^ "\t\t") ^ (string_of_int (List.nth (distances) (!v)))));
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let graph = ref ([[0; 4; 0; 0; 0; 0; 0; 8; 0]; [4; 0; 8; 0; 0; 0; 0; 11; 0]; [0; 8; 0; 7; 0; 4; 0; 0; 2]; [0; 0; 7; 0; 9; 14; 0; 0; 0]; [0; 0; 0; 9; 0; 10; 0; 0; 0]; [0; 0; 4; 14; 10; 0; 2; 0; 0]; [0; 0; 0; 0; 0; 2; 0; 1; 6]; [8; 11; 0; 0; 0; 0; 1; 0; 7]; [0; 0; 2; 0; 0; 0; 6; 7; 0]])
let distances = ref (dijkstra (!graph) (Obj.repr (0)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_solution (!distances));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
