(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_edges edges =
  let __ret = ref ([] : (int list) list) in
  (try
  let edges = (Obj.magic edges : int list list) in
  let es = ref (edges) in
  let i = ref (0) in
  (try while (!i < List.length (!es)) do
    try
  let j = ref (0) in
  (try while (!j < ((List.length (!es) - !i) - 1)) do
    try
  if (List.nth (List.nth (!es) (!j)) (2) > List.nth (List.nth (!es) ((!j + 1))) (2)) then (
  let temp = ref (List.nth (!es) (!j)) in
  es := (List.mapi (fun __i __x -> if __i = !j then List.nth (!es) ((!j + 1)) else __x) (!es));
  es := (List.mapi (fun __i __x -> if __i = (!j + 1) then !temp else __x) (!es));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!es) : int list list); raise Return
  with Return -> !__ret)

and find_parent parent i =
  let __ret = ref 0 in
  (try
  parent := (Obj.magic !parent : int list);
  let i = (Obj.magic i : int) in
  if (List.nth (!parent) (i) <> i) then (
  parent := (List.mapi (fun __i __x -> if __i = i then find_parent (parent) (Obj.repr (List.nth (!parent) (i))) else __x) (!parent));
  );
  __ret := (Obj.magic (List.nth (!parent) (i)) : int); raise Return
  with Return -> !__ret)

and kruskal num_nodes edges =
  let __ret = ref ([] : (int list) list) in
  (try
  let num_nodes = (Obj.magic num_nodes : int) in
  let edges = (Obj.magic edges : int list list) in
  let es = ref (sort_edges (edges)) in
  let parent = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < num_nodes) do
    try
  parent := (Obj.magic (List.append (!parent) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let mst = ref (([] : (int list) list)) in
  let idx = ref (0) in
  (try while (!idx < List.length (!es)) do
    try
  let e = ref (List.nth (!es) (!idx)) in
  let pa = find_parent (parent) (Obj.repr (List.nth (!e) (0))) in
  let pb = find_parent (parent) (Obj.repr (List.nth (!e) (1))) in
  if (pa <> pb) then (
  mst := (Obj.magic (List.append (!mst) [(Obj.magic (!e) : int list)]) : int list list);
  parent := (List.mapi (fun __i __x -> if __i = pa then pb else __x) (!parent));
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!mst) : int list list); raise Return
  with Return -> !__ret)

and edges_to_string es =
  let __ret = ref "" in
  (try
  let es = (Obj.magic es : int list list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (es)) do
    try
  let e = ref (List.nth (es) (!i)) in
  s := (((((((!s ^ "(") ^ (string_of_int (List.nth (!e) (0)))) ^ ", ") ^ (string_of_int (List.nth (!e) (1)))) ^ ", ") ^ (string_of_int (List.nth (!e) (2)))) ^ ")");
  if (!i < (List.length (es) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)


let edges1 = ref ([[0; 1; 3]; [1; 2; 5]; [2; 3; 1]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((edges_to_string (kruskal (Obj.repr (4)) (!edges1))));
  let edges2 = ref ([[0; 1; 3]; [1; 2; 5]; [2; 3; 1]; [0; 2; 1]; [0; 3; 2]]) in
  print_endline ((edges_to_string (kruskal (Obj.repr (4)) (!edges2))));
  let edges3 = ref ([[0; 1; 3]; [1; 2; 5]; [2; 3; 1]; [0; 2; 1]; [0; 3; 2]; [2; 1; 1]]) in
  print_endline ((edges_to_string (kruskal (Obj.repr (4)) (!edges3))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
