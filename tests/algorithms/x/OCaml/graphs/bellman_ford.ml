(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000.0
let rec list_to_string arr =
  let __ret = ref "" in
  (try
  let arr = (Obj.magic arr : float list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" (List.nth (arr) (!i))));
  if (!i < (List.length (arr) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!s ^ "]")) : string); raise Return
  with Return -> !__ret)

and check_negative_cycle graph distance edge_count =
  let __ret = ref false in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list list) in
  let distance = (Obj.magic distance : float list) in
  let edge_count = (Obj.magic edge_count : int) in
  let j = ref (0) in
  (try while (!j < edge_count) do
    try
  let e = ref (List.nth (graph) (!j)) in
  let u = (Obj.obj (List.assoc (__str ("src")) (!e) : Obj.t) : int) in
  let v = (Obj.obj (List.assoc (__str ("dst")) (!e) : Obj.t) : int) in
  let w = float_of_int ((Obj.obj (List.assoc (__str ("weight")) (!e) : Obj.t) : int)) in
  if ((List.nth (distance) (u) < _inf) && ((List.nth (distance) (u) +. w) < List.nth (distance) (v))) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and bellman_ford graph vertex_count edge_count src =
  let __ret = ref ([] : (float) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list list) in
  let vertex_count = (Obj.magic vertex_count : int) in
  let edge_count = (Obj.magic edge_count : int) in
  let src = (Obj.magic src : int) in
  let distance = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < vertex_count) do
    try
  distance := (Obj.magic (List.append (!distance) [(Obj.magic (_inf) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  distance := (List.mapi (fun __i __x -> if __i = src then 0.0 else __x) (!distance));
  let k = ref (0) in
  (try while (!k < (vertex_count - 1)) do
    try
  let j = ref (0) in
  (try while (!j < edge_count) do
    try
  let e = ref (List.nth (graph) (!j)) in
  let u = (Obj.obj (List.assoc (__str ("src")) (!e) : Obj.t) : int) in
  let v = (Obj.obj (List.assoc (__str ("dst")) (!e) : Obj.t) : int) in
  let w = float_of_int ((Obj.obj (List.assoc (__str ("weight")) (!e) : Obj.t) : int)) in
  if ((List.nth (!distance) (u) < _inf) && ((List.nth (!distance) (u) +. w) < List.nth (!distance) (v))) then (
  distance := (List.mapi (fun __i __x -> if __i = v then (List.nth (!distance) (u) +. w) else __x) (!distance));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if check_negative_cycle (graph) (!distance) (Obj.repr (edge_count)) then (
  (failwith ("Negative cycle found"));
  );
  __ret := (Obj.magic (!distance) : float list); raise Return
  with Return -> !__ret)


let edges = ref ([[(__str ("src"), Obj.repr (2)); (__str ("dst"), Obj.repr (1)); (__str ("weight"), Obj.repr (-(10)))]; [(__str ("src"), Obj.repr (3)); (__str ("dst"), Obj.repr (2)); (__str ("weight"), Obj.repr (3))]; [(__str ("src"), Obj.repr (0)); (__str ("dst"), Obj.repr (3)); (__str ("weight"), Obj.repr (5))]; [(__str ("src"), Obj.repr (0)); (__str ("dst"), Obj.repr (1)); (__str ("weight"), Obj.repr (4))]])
let distances = ref (bellman_ford ((Obj.magic !edges : (string * Obj.t) list list)) (Obj.repr (4)) (Obj.repr (List.length (!edges))) (Obj.repr (0)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((list_to_string (!distances)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
