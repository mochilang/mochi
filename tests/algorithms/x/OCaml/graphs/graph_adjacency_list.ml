(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_graph vertices edges directed =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let vertices = (Obj.magic vertices : string list) in
  let edges = (Obj.magic edges : string list list) in
  let adj = ref ([] : (string * string list) list) in
  (try List.iter (fun v ->
    try
  adj := ((__str (v), []) :: List.remove_assoc (__str (v)) (!adj));
    with Continue -> ()) (vertices) with Break -> ());
  (try List.iter (fun e ->
    try
  let s = List.nth (e) (0) in
  let d = List.nth (e) (1) in
  if not ((List.mem_assoc s !adj)) then (
  adj := ((__str (s), []) :: List.remove_assoc (__str (s)) (!adj));
  );
  if not ((List.mem_assoc d !adj)) then (
  adj := ((__str (d), []) :: List.remove_assoc (__str (d)) (!adj));
  );
  adj := ((__str (s), (List.append (List.assoc (__str (s)) (!adj)) [(Obj.magic (d) : string)])) :: List.remove_assoc (__str (s)) (!adj));
  if not (directed) then (
  adj := ((__str (d), (List.append (List.assoc (__str (d)) (!adj)) [(Obj.magic (s) : string)])) :: List.remove_assoc (__str (d)) (!adj));
  );
    with Continue -> ()) (edges) with Break -> ());
  __ret := (Obj.magic ([(__str ("adj"), Obj.repr (!adj)); (__str ("directed"), Obj.repr (directed))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_vertex graph v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  if (List.mem_assoc v (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)) then (
  (failwith ("vertex exists"));
  );
  let adj = ref ([] : (string * string list) list) in
  (try List.iter (fun (k, _) ->
    try
  adj := ((__str (k), List.assoc (__str (k)) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) :: List.remove_assoc (__str (k)) (!adj));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)) with Break -> ());
  adj := ((__str (v), []) :: List.remove_assoc (__str (v)) (!adj));
  __ret := (Obj.magic ([(__str ("adj"), Obj.repr (!adj)); (__str ("directed"), Obj.repr ((Obj.obj (List.assoc (__str ("directed")) (graph) : Obj.t) : bool)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_from_list lst value =
  let __ret = ref ([] : (string) list) in
  (try
  let lst = (Obj.magic lst : string list) in
  let res = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  if (List.nth (lst) (!i) <> value) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (List.nth (lst) (!i)) : string)]) : string list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and remove_key m key =
  let __ret = ref ([] : (string * string list) list) in
  (try
  let m = (Obj.magic m : (string * string list) list) in
  let res = ref ([] : (string * string list) list) in
  (try List.iter (fun (k, _) ->
    try
  if (k <> key) then (
  res := ((__str (k), List.assoc (__str (k)) (m)) :: List.remove_assoc (__str (k)) (!res));
  );
    with Continue -> ()) (m) with Break -> ());
  __ret := (Obj.magic (!res) : (string * string list) list); raise Return
  with Return -> !__ret)

and add_edge graph s d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  if (not ((List.mem_assoc s (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) || not ((List.mem_assoc d (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)))) then (
  (failwith ("vertex missing"));
  );
  if contains_edge ((Obj.magic graph : (string * Obj.t) list)) (s) (d) then (
  (failwith ("edge exists"));
  );
  let adj = ref ([] : (string * string list) list) in
  (try List.iter (fun (k, _) ->
    try
  adj := ((__str (k), List.assoc (__str (k)) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) :: List.remove_assoc (__str (k)) (!adj));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)) with Break -> ());
  let list_s = ref (List.assoc (__str (s)) (!adj)) in
  list_s := (Obj.magic (List.append (!list_s) [(Obj.magic (d) : string)]) : string list);
  adj := ((__str (s), !list_s) :: List.remove_assoc (__str (s)) (!adj));
  if not ((Obj.obj (List.assoc (__str ("directed")) (graph) : Obj.t) : bool)) then (
  let list_d = ref (List.assoc (__str (d)) (!adj)) in
  list_d := (Obj.magic (List.append (!list_d) [(Obj.magic (s) : string)]) : string list);
  adj := ((__str (d), !list_d) :: List.remove_assoc (__str (d)) (!adj));
  );
  __ret := (Obj.magic ([(__str ("adj"), Obj.repr (!adj)); (__str ("directed"), Obj.repr ((Obj.obj (List.assoc (__str ("directed")) (graph) : Obj.t) : bool)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_edge graph s d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  if (not ((List.mem_assoc s (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) || not ((List.mem_assoc d (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)))) then (
  (failwith ("vertex missing"));
  );
  if not (contains_edge ((Obj.magic graph : (string * Obj.t) list)) (s) (d)) then (
  (failwith ("edge missing"));
  );
  let adj = ref ([] : (string * string list) list) in
  (try List.iter (fun (k, _) ->
    try
  adj := ((__str (k), List.assoc (__str (k)) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) :: List.remove_assoc (__str (k)) (!adj));
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)) with Break -> ());
  adj := ((__str (s), remove_from_list (List.assoc (__str (s)) (!adj)) (d)) :: List.remove_assoc (__str (s)) (!adj));
  if not ((Obj.obj (List.assoc (__str ("directed")) (graph) : Obj.t) : bool)) then (
  adj := ((__str (d), remove_from_list (List.assoc (__str (d)) (!adj)) (s)) :: List.remove_assoc (__str (d)) (!adj));
  );
  __ret := (Obj.magic ([(__str ("adj"), Obj.repr (!adj)); (__str ("directed"), Obj.repr ((Obj.obj (List.assoc (__str ("directed")) (graph) : Obj.t) : bool)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and remove_vertex graph v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  if not ((List.mem_assoc v (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) then (
  (failwith ("vertex missing"));
  );
  let adj = ref ([] : (string * string list) list) in
  (try List.iter (fun (k, _) ->
    try
  if (k <> v) then (
  adj := ((__str (k), remove_from_list (List.assoc (__str (k)) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) (v)) :: List.remove_assoc (__str (k)) (!adj));
  );
    with Continue -> ()) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)) with Break -> ());
  __ret := (Obj.magic ([(__str ("adj"), Obj.repr (!adj)); (__str ("directed"), Obj.repr ((Obj.obj (List.assoc (__str ("directed")) (graph) : Obj.t) : bool)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and contains_vertex graph v =
  let __ret = ref false in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  __ret := (Obj.magic ((List.mem_assoc v (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) : bool); raise Return
  with Return -> !__ret)

and contains_edge graph s d =
  let __ret = ref false in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  if (not ((List.mem_assoc s (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) || not ((List.mem_assoc d (Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list)))) then (
  (failwith ("vertex missing"));
  );
  (try List.iter (fun x ->
    try
  if (x = d) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (List.assoc (__str (s)) ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and clear_graph graph =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("adj"), Obj.repr ([])); (__str ("directed"), Obj.repr ((Obj.obj (List.assoc (__str ("directed")) (graph) : Obj.t) : bool)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and to_string graph =
  let __ret = ref "" in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list) in
  __ret := (Obj.magic (__show ((Obj.obj (List.assoc (__str ("adj")) (graph) : Obj.t) : ( string * string list ) list))) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let vertices = ref (["1"; "2"; "3"; "4"]) in
  let edges = ref ([["1"; "2"]; ["2"; "3"]; ["3"; "4"]]) in
  let g = ref (create_graph (!vertices) (!edges) (false)) in
  print_endline ((to_string (!g)));
  g := add_vertex (!g) ("5");
  g := add_edge (!g) ("4") ("5");
  print_endline ((string_of_bool (contains_edge (!g) ("4") ("5"))));
  g := remove_edge (!g) ("1") ("2");
  g := remove_vertex (!g) ("3");
  print_endline ((to_string (!g)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
