(* Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:16 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_graph num_nodes =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let num_nodes = (Obj.magic num_nodes : int) in
  __ret := (Obj.magic ([(__str ("num_nodes"), Obj.repr (num_nodes)); (__str ("edges"), Obj.repr ([])); (__str ("component"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_edge g u v w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  let w = (Obj.magic w : int) in
  let es = ref ((match List.assoc_opt (__str ("edges")) (g) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> [])) in
  es := (Obj.magic (List.append (!es) [(Obj.magic ([(__str ("u"), Obj.repr (u)); (__str ("v"), Obj.repr (v)); (__str ("w"), Obj.repr (w))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  __ret := (Obj.magic ([(__str ("num_nodes"), Obj.repr ((match List.assoc_opt (__str ("num_nodes")) (g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("edges"), Obj.repr (!es)); (__str ("component"), Obj.repr ((match List.assoc_opt (__str ("component")) (g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and find_component g node =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let node = (Obj.magic node : int) in
  if ((match List.assoc_opt (__str (node)) ((match List.assoc_opt (__str ("component")) (g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0) = node) then (
  __ret := (Obj.magic (node) : int); raise Return
  );
  __ret := (Obj.magic (find_component ((Obj.magic g : (string * Obj.t) list)) (Obj.repr ((match List.assoc_opt (__str (node)) ((match List.assoc_opt (__str ("component")) (g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0)))) : int); raise Return
  with Return -> !__ret)

and set_component g node =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let node = (Obj.magic node : int) in
  if ((match List.assoc_opt (__str (node)) ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0) <> node) then (
  let comp = ref ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) in
  let k = ref (0) in
  (try while (!k < (match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  comp := ((__str (!k), find_component ((Obj.magic !g : (string * Obj.t) list)) (Obj.repr (!k))) :: List.remove_assoc (__str (!k)) (!comp));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  g := [(__str ("num_nodes"), Obj.repr ((match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("edges"), Obj.repr ((match List.assoc_opt (__str ("edges")) (!g) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []))); (__str ("component"), Obj.repr (!comp))];
  );
  __ret := (Obj.magic (!g) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and union g component_size u v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let component_size = (Obj.magic component_size : int list) in
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  let comp_size = ref (component_size) in
  let comp = ref ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) in
  if ((let __l = !comp_size in let __i = u in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) <= (let __l = !comp_size in let __i = v in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  comp := ((__str (u), v) :: List.remove_assoc (__str (u)) (!comp));
  comp_size := (List.mapi (fun __i __x -> if __i = v then ((let __l = !comp_size in let __i = v in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = !comp_size in let __i = u in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) else __x) (!comp_size));
  g := [(__str ("num_nodes"), Obj.repr ((match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("edges"), Obj.repr ((match List.assoc_opt (__str ("edges")) (!g) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []))); (__str ("component"), Obj.repr (!comp))];
  g := set_component (g) (Obj.repr (u));
  ) else (
  comp := ((__str (v), u) :: List.remove_assoc (__str (v)) (!comp));
  comp_size := (List.mapi (fun __i __x -> if __i = u then ((let __l = !comp_size in let __i = u in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = !comp_size in let __i = v in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) else __x) (!comp_size));
  g := [(__str ("num_nodes"), Obj.repr ((match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("edges"), Obj.repr ((match List.assoc_opt (__str ("edges")) (!g) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []))); (__str ("component"), Obj.repr (!comp))];
  g := set_component (g) (Obj.repr (v));
  );
  __ret := (Obj.magic ([(__str ("graph"), Obj.repr (!g)); (__str ("component_size"), Obj.repr (!comp_size))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and create_empty_edges n =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ([(__str ("u"), Obj.repr ((0 - 1))); (__str ("v"), Obj.repr ((0 - 1))); (__str ("w"), Obj.repr ((0 - 1)))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and boruvka g =
  let __ret = ref 0 in
  (try
  g := (Obj.magic !g : (string * Obj.t) list);
  let component_size = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < (match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) do
    try
  component_size := (Obj.magic (List.append (!component_size) [(Obj.magic (1) : int)]) : int list);
  let comp = ref ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) in
  comp := ((__str (!i), !i) :: List.remove_assoc (__str (!i)) (!comp));
  g := [(__str ("num_nodes"), Obj.repr ((match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))); (__str ("edges"), Obj.repr ((match List.assoc_opt (__str ("edges")) (!g) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> []))); (__str ("component"), Obj.repr (!comp))];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let mst_weight = ref (0) in
  let num_components = ref ((match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) in
  let minimum_weight_edge = ref (create_empty_edges (Obj.repr ((match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)))) in
  (try while (!num_components > 1) do
    try
  (try List.iter (fun e ->
    try
  let u = (match List.assoc_opt (__str ("u")) (e) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let v = (match List.assoc_opt (__str ("v")) (e) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let w = (match List.assoc_opt (__str ("w")) (e) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let u_comp = (match List.assoc_opt (__str (u)) ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0) in
  let v_comp = (match List.assoc_opt (__str (v)) ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0) in
  if (u_comp <> v_comp) then (
  let current_u = ref ((let __l = !minimum_weight_edge in let __i = u_comp in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if (((match List.assoc_opt (__str ("u")) (!current_u) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (0 - 1)) || ((match List.assoc_opt (__str ("w")) (!current_u) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) > w)) then (
  minimum_weight_edge := (List.mapi (fun __i __x -> if __i = u_comp then [(__str ("u"), Obj.repr (u)); (__str ("v"), Obj.repr (v)); (__str ("w"), Obj.repr (w))] else __x) (!minimum_weight_edge));
  );
  let current_v = ref ((let __l = !minimum_weight_edge in let __i = v_comp in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  if (((match List.assoc_opt (__str ("u")) (!current_v) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) = (0 - 1)) || ((match List.assoc_opt (__str ("w")) (!current_v) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) > w)) then (
  minimum_weight_edge := (List.mapi (fun __i __x -> if __i = v_comp then [(__str ("u"), Obj.repr (u)); (__str ("v"), Obj.repr (v)); (__str ("w"), Obj.repr (w))] else __x) (!minimum_weight_edge));
  );
  );
    with Continue -> ()) ((match List.assoc_opt (__str ("edges")) (!g) with Some v -> (Obj.obj (v : Obj.t) : (string * Obj.t) list list) | None -> [])) with Break -> ());
  (try List.iter (fun e ->
    try
  if ((match List.assoc_opt (__str ("u")) (e) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) <> (0 - 1)) then (
  let u = (match List.assoc_opt (__str ("u")) (e) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let v = (match List.assoc_opt (__str ("v")) (e) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let w = (match List.assoc_opt (__str ("w")) (e) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0) in
  let u_comp = (match List.assoc_opt (__str (u)) ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0) in
  let v_comp = (match List.assoc_opt (__str (v)) ((match List.assoc_opt (__str ("component")) (!g) with Some v -> (Obj.obj (v : Obj.t) : ( string * int ) list) | None -> [])) with Some v -> v | None -> 0) in
  if (u_comp <> v_comp) then (
  mst_weight := (!mst_weight + w);
  let res = ref (union (g) (!component_size) (Obj.repr (u_comp)) (Obj.repr (v_comp))) in
  g := (Obj.magic (match List.assoc_opt (__str ("graph")) (!res) with Some v -> (Obj.obj (v : Obj.t) : ( string * Obj.t ) list) | None -> []) : (string * Obj.t) list);
  component_size := (Obj.magic (match List.assoc_opt (__str ("component_size")) (!res) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []) : int list);
  print_endline ((((("Added edge [" ^ (string_of_int (Obj.magic (u) : int))) ^ " - ") ^ (string_of_int (Obj.magic (v) : int))) ^ "]"));
  print_endline (("Added weight: " ^ (string_of_int (Obj.magic (w) : int))));
  print_endline ("");
  num_components := (!num_components - 1);
  );
  );
    with Continue -> ()) (!minimum_weight_edge) with Break -> ());
  minimum_weight_edge := (Obj.magic create_empty_edges (Obj.repr ((match List.assoc_opt (__str ("num_nodes")) (!g) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0))) : (string * Obj.t) list list);
    with Continue -> ()
  done with Break -> ());
  print_endline (("The total weight of the minimal spanning tree is: " ^ (string_of_int (Obj.magic (!mst_weight) : int))));
  __ret := (Obj.magic (!mst_weight) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = ref (new_graph (Obj.repr (8))) in
  let edges = ref ([[0; 1; 10]; [0; 2; 6]; [0; 3; 5]; [1; 3; 15]; [2; 3; 4]; [3; 4; 8]; [4; 5; 10]; [4; 6; 6]; [4; 7; 5]; [5; 7; 15]; [6; 7; 4]]) in
  (try List.iter (fun e ->
    try
  g := add_edge (!g) (Obj.repr ((let __l = e in let __i = 0 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) (Obj.repr ((let __l = e in let __i = 1 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0))) (Obj.repr ((let __l = e in let __i = 2 in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)));
    with Continue -> ()) (!edges) with Break -> ());
  ignore (boruvka (g));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
