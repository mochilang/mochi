(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_int_list n value =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let value = (Obj.magic value : int) in
  let lst = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  lst := (Obj.magic (List.append (!lst) [(Obj.magic (value) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!lst) : int list); raise Return
  with Return -> !__ret)

and make_bool_list n =
  let __ret = ref ([] : (bool) list) in
  (try
  let n = (Obj.magic n : int) in
  let lst = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  lst := (Obj.magic (List.append (!lst) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!lst) : bool list); raise Return
  with Return -> !__ret)

and dijkstra graph src =
  let __ret = ref ([] : (int) list) in
  (try
  let graph = (Obj.magic graph : (string * Obj.t) list list list) in
  let src = (Obj.magic src : int) in
  let n = List.length (graph) in
  let dist = ref (make_int_list (Obj.repr (n)) (Obj.repr (1000000000))) in
  let visited = ref (make_bool_list (Obj.repr (n))) in
  dist := (List.mapi (fun __i __x -> if __i = src then 0 else __x) (!dist));
  let count = ref (0) in
  (try while (!count < n) do
    try
  let u = ref (-(1)) in
  let min_dist = ref (1000000000) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  if (not (List.nth (!visited) (!i)) && (List.nth (!dist) (!i) < !min_dist)) then (
  min_dist := List.nth (!dist) (!i);
  u := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!u < 0) then (
  raise Break;
  );
  visited := (List.mapi (fun __i __x -> if __i = !u then true else __x) (!visited));
  let j = ref (0) in
  (try while (!j < List.length (List.nth (graph) (!u))) do
    try
  let e = ref (List.nth (List.nth (graph) (!u)) (!j)) in
  let v = (Obj.obj (List.assoc (__str ("node")) (!e) : Obj.t) : int) in
  let w = (Obj.obj (List.assoc (__str ("weight")) (!e) : Obj.t) : int) in
  if not (List.nth (!visited) (v)) then (
  let new_dist = (List.nth (!dist) (!u) + w) in
  if (new_dist < List.nth (!dist) (v)) then (
  dist := (List.mapi (fun __i __x -> if __i = v then new_dist else __x) (!dist));
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!dist) : int list); raise Return
  with Return -> !__ret)


let graph = ref ([[[(__str ("node"), Obj.repr (1)); (__str ("weight"), Obj.repr (10))]; [(__str ("node"), Obj.repr (3)); (__str ("weight"), Obj.repr (5))]]; [[(__str ("node"), Obj.repr (2)); (__str ("weight"), Obj.repr (1))]; [(__str ("node"), Obj.repr (3)); (__str ("weight"), Obj.repr (2))]]; [[(__str ("node"), Obj.repr (4)); (__str ("weight"), Obj.repr (4))]]; [[(__str ("node"), Obj.repr (1)); (__str ("weight"), Obj.repr (3))]; [(__str ("node"), Obj.repr (2)); (__str ("weight"), Obj.repr (9))]; [(__str ("node"), Obj.repr (4)); (__str ("weight"), Obj.repr (2))]]; [[(__str ("node"), Obj.repr (0)); (__str ("weight"), Obj.repr (7))]; [(__str ("node"), Obj.repr (2)); (__str ("weight"), Obj.repr (6))]]])
let dist = ref (dijkstra ((Obj.magic !graph : (string * Obj.t) list list list)) (Obj.repr (0)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (List.nth (!dist) (0))));
  print_endline ((string_of_int (List.nth (!dist) (1))));
  print_endline ((string_of_int (List.nth (!dist) (2))));
  print_endline ((string_of_int (List.nth (!dist) (3))));
  print_endline ((string_of_int (List.nth (!dist) (4))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
