(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec dfs u graph visit stack =
  let __ret = ref ([] : (int) list) in
  (try
  let u = (Obj.magic u : int) in
  let graph = (Obj.magic graph : int list list) in
  visit := (Obj.magic !visit : bool list);
  stack := (Obj.magic !stack : int list);
  if (let __l = !visit in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) then (
  __ret := (Obj.magic (!stack) : int list); raise Return
  );
  visit := (List.mapi (fun __i __x -> if __i = u then true else __x) (!visit));
  (try List.iter (fun v ->
    try
  stack := (Obj.magic dfs (Obj.repr (v)) (graph) (visit) (stack) : int list);
    with Continue -> ()) ((let __l = graph in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) with Break -> ());
  stack := (Obj.magic (List.append (!stack) [(Obj.magic (u) : int)]) : int list);
  __ret := (Obj.magic (!stack) : int list); raise Return
  with Return -> !__ret)

and dfs2 u reversed_graph visit component =
  let __ret = ref ([] : (int) list) in
  (try
  let u = (Obj.magic u : int) in
  let reversed_graph = (Obj.magic reversed_graph : int list list) in
  visit := (Obj.magic !visit : bool list);
  component := (Obj.magic !component : int list);
  if (let __l = !visit in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) then (
  __ret := (Obj.magic (!component) : int list); raise Return
  );
  visit := (List.mapi (fun __i __x -> if __i = u then true else __x) (!visit));
  component := (Obj.magic (List.append (!component) [(Obj.magic (u) : int)]) : int list);
  (try List.iter (fun v ->
    try
  component := (Obj.magic dfs2 (Obj.repr (v)) (reversed_graph) (visit) (component) : int list);
    with Continue -> ()) ((let __l = reversed_graph in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) with Break -> ());
  __ret := (Obj.magic (!component) : int list); raise Return
  with Return -> !__ret)

and kosaraju graph =
  let __ret = ref ([] : (int list) list) in
  (try
  let graph = (Obj.magic graph : int list list) in
  let n = List.length (graph) in
  let reversed_graph = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  reversed_graph := (Obj.magic (List.append (!reversed_graph) [(Obj.magic ([]) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < n) do
    try
  (try List.iter (fun v ->
    try
  reversed_graph := (List.mapi (fun __i __x -> if __i = v then (List.append ((let __l = !reversed_graph in let __i = v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) [(Obj.magic (!i) : int)]) else __x) (!reversed_graph));
    with Continue -> ()) ((let __l = graph in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let visit = ref (([] : (bool) list)) in
  i := 0;
  (try while (!i < n) do
    try
  visit := (Obj.magic (List.append (!visit) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let stack = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < n) do
    try
  if ((let __l = !visit in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = false) then (
  stack := (Obj.magic dfs (Obj.repr (!i)) (graph) (visit) (stack) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < n) do
    try
  visit := (List.mapi (fun __i __x -> if __i = !i then false else __x) (!visit));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let scc = ref (([] : (int list) list)) in
  let idx = ref ((List.length (!stack) - 1)) in
  (try while (!idx >= 0) do
    try
  let node = (let __l = !stack in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if ((let __l = !visit in let __i = node in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = false) then (
  let component = ref (([] : (int) list)) in
  component := (Obj.magic dfs2 (Obj.repr (node)) (!reversed_graph) (visit) (component) : int list);
  scc := (Obj.magic (List.append (!scc) [(Obj.magic (!component) : int list)]) : int list list);
  );
  idx := (!idx - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!scc) : int list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let graph = ref ([Obj.repr ([1]); Obj.repr ([2]); Obj.repr ([0; 3]); Obj.repr ([4]); Obj.repr ([])]) in
  let comps = ref (kosaraju (!graph)) in
  let i = ref (0) in
  (try while (!i < List.length (!comps)) do
    try
  print_endline (__show_list ((let __l = !comps in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
