(* Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:17 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0 else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec topological_sort graph =
  let __ret = ref ([] : (int) list) in
  (try
  let graph = (Obj.magic graph : (string * int list) list) in
  let indegree = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (graph)) do
    try
  indegree := (Obj.magic (List.append (!indegree) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun edges ->
    try
  let j = ref (0) in
  (try while (!j < List.length (edges)) do
    try
  let v = (let __l = edges in let __i = !j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  indegree := (List.mapi (fun __i __x -> if __i = v then ((let __l = !indegree in let __i = v in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + 1) else __x) (!indegree));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()) ((List.map snd graph)) with Break -> ());
  let queue = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (!indegree)) do
    try
  if ((let __l = !indegree in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = 0) then (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (!i) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let order = ref (([] : (int) list)) in
  let head = ref (0) in
  let processed = ref (0) in
  (try while (!head < List.length (!queue)) do
    try
  let v = (let __l = !queue in let __i = !head in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  head := (!head + 1);
  processed := (!processed + 1);
  order := (Obj.magic (List.append (!order) [(Obj.magic (v) : int)]) : int list);
  let neighbors = ref ((match List.assoc_opt (__str (v)) (graph) with Some v -> v | None -> [])) in
  let k = ref (0) in
  (try while (!k < List.length (!neighbors)) do
    try
  let nb = (let __l = !neighbors in let __i = !k in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  indegree := (List.mapi (fun __i __x -> if __i = nb then ((let __l = !indegree in let __i = nb in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) - 1) else __x) (!indegree));
  if ((let __l = !indegree in let __i = nb in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = 0) then (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (nb) : int)]) : int list);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  if (!processed <> List.length (graph)) then (
  __ret := (Obj.magic (nil) : int list); raise Return
  );
  __ret := (Obj.magic (!order) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let graph = ref ([(__str (0), Obj.repr ([1; 2])); (__str (1), Obj.repr ([3])); (__str (2), Obj.repr ([3])); (__str (3), Obj.repr ([4; 5])); (__str (4), Obj.repr ([])); (__str (5), Obj.repr ([]))]) in
  print_endline (__show_list (topological_sort ((Obj.magic !graph : (string * int list) list))));
  let cyclic = ref ([(__str (0), [1]); (__str (1), [2]); (__str (2), [0])]) in
  print_endline (__show_list (topological_sort ((Obj.magic !cyclic : (string * int list) list))));
    !__ret
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  ignore (main ());
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
