(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec rand () =
  let __ret = ref 0 in
  (try
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)

and random () =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic (((1.0 *. float_of_int (rand ())) /. 2147483648.0)) : float); raise Return
  with Return -> !__ret)

and complete_graph vertices_number =
  let __ret = ref ([] : (string * int list) list) in
  (try
  let vertices_number = (Obj.magic vertices_number : int) in
  let graph = ref ([] : (string * int list) list) in
  let i = ref (0) in
  (try while (!i < vertices_number) do
    try
  let neighbors = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < vertices_number) do
    try
  if (!j <> !i) then (
  neighbors := (Obj.magic (List.append (!neighbors) [(Obj.magic (!j) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  graph := ((__str (!i), !neighbors) :: List.remove_assoc (__str (!i)) (!graph));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!graph) : (string * int list) list); raise Return
  with Return -> !__ret)

and random_graph vertices_number probability directed =
  let __ret = ref ([] : (string * int list) list) in
  (try
  let vertices_number = (Obj.magic vertices_number : int) in
  let probability = (Obj.magic probability : float) in
  let graph = ref ([] : (string * int list) list) in
  let i = ref (0) in
  (try while (!i < vertices_number) do
    try
  graph := ((__str (!i), []) :: List.remove_assoc (__str (!i)) (!graph));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (probability >= 1.0) then (
  __ret := (Obj.magic (complete_graph (Obj.repr (vertices_number))) : (string * int list) list); raise Return
  );
  if (probability <= 0.0) then (
  __ret := (Obj.magic (!graph) : (string * int list) list); raise Return
  );
  i := 0;
  (try while (!i < vertices_number) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < vertices_number) do
    try
  if (random () < probability) then (
  graph := ((__str (!i), (List.append (List.assoc (__str (!i)) (!graph)) [(Obj.magic (!j) : int)])) :: List.remove_assoc (__str (!i)) (!graph));
  if not (directed) then (
  graph := ((__str (!j), (List.append (List.assoc (__str (!j)) (!graph)) [(Obj.magic (!i) : int)])) :: List.remove_assoc (__str (!j)) (!graph));
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!graph) : (string * int list) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  seed := 1;
  let g1 = ref (random_graph (Obj.repr (4)) (Obj.repr (0.5)) (false)) in
  print_endline (__show !g1);
  seed := 1;
  let g2 = ref (random_graph (Obj.repr (4)) (Obj.repr (0.5)) (true)) in
  print_endline (__show !g2);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
