(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec key p =
  let __ret = ref "" in
  (try
  let p = (Obj.magic p : (string * Obj.t) list) in
  __ret := (Obj.magic ((((string_of_int ((Obj.obj (List.assoc (__str ("x")) (p) : Obj.t) : int))) ^ ",") ^ (string_of_int ((Obj.obj (List.assoc (__str ("y")) (p) : Obj.t) : int))))) : string); raise Return
  with Return -> !__ret)

and path_to_string path =
  let __ret = ref "" in
  (try
  let path = (Obj.magic path : (string * Obj.t) list list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (path)) do
    try
  let pt = ref (List.nth (path) (!i)) in
  s := (((((!s ^ "(") ^ (string_of_int ((Obj.obj (List.assoc (__str ("x")) (!pt) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("y")) (!pt) : Obj.t) : int)))) ^ ")");
  if (!i < (List.length (path) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and dijkstra grid source destination allow_diagonal =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let grid = (Obj.magic grid : int list list) in
  let source = (Obj.magic source : (string * Obj.t) list) in
  let destination = (Obj.magic destination : (string * Obj.t) list) in
  let rows = List.length (grid) in
  let cols = List.length (List.nth (grid) (0)) in
  let dx = ref ([-(1); 1; 0; 0]) in
  let dy = ref ([0; 0; -(1); 1]) in
  if allow_diagonal then (
  dx := (Obj.magic (!dx @ [-(1); -(1); 1; 1]) : int list);
  dy := (Obj.magic (!dy @ [-(1); 1; -(1); 1]) : int list);
  );
  let _inf = 1000000000000.0 in
  let queue = ref ([source]) in
  let front = ref (0) in
  let dist_map = ref ([(__str (key ((Obj.magic source : (string * Obj.t) list))), 0.0)]) in
  let prev = ref ([] : (string * (string * Obj.t) list) list) in
  (try while (!front < List.length (!queue)) do
    try
  let current = ref (List.nth (!queue) (!front)) in
  front := (!front + 1);
  let cur_key = key ((Obj.magic !current : (string * Obj.t) list)) in
  if (((Obj.obj (List.assoc (__str ("x")) (!current) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("x")) (destination) : Obj.t) : int)) && ((Obj.obj (List.assoc (__str ("y")) (!current) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("y")) (destination) : Obj.t) : int))) then (
  raise Break;
  );
  let i = ref (0) in
  (try while (!i < List.length (!dx)) do
    try
  let nx = ((Obj.obj (List.assoc (__str ("x")) (!current) : Obj.t) : int) + List.nth (!dx) (!i)) in
  let ny = ((Obj.obj (List.assoc (__str ("y")) (!current) : Obj.t) : int) + List.nth (!dy) (!i)) in
  if ((((nx >= 0) && (nx < rows)) && (ny >= 0)) && (ny < cols)) then (
  if (List.nth (List.nth (grid) (nx)) (ny) = 1) then (
  let n_key = (((string_of_int (nx)) ^ ",") ^ (string_of_int (ny))) in
  if not ((List.mem_assoc n_key !dist_map)) then (
  dist_map := ((__str (n_key), (List.assoc (__str (cur_key)) (!dist_map) +. 1.0)) :: List.remove_assoc (__str (n_key)) (!dist_map));
  prev := ((__str (n_key), Obj.repr (!current)) :: List.remove_assoc (__str (n_key)) (Obj.magic (!prev) : (string * Obj.t) list));
  queue := (Obj.magic (List.append (!queue) [(Obj.magic ([(__str ("x"), Obj.repr (nx)); (__str ("y"), Obj.repr (ny))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let dest_key = key ((Obj.magic destination : (string * Obj.t) list)) in
  if (List.mem_assoc dest_key !dist_map) then (
  let path_rev = ref ([destination]) in
  let step_key = ref (dest_key) in
  let step_pt = ref (destination) in
  (try while (!step_key <> key ((Obj.magic source : (string * Obj.t) list))) do
    try
  step_pt := (Obj.magic (Obj.obj (List.assoc (__str (!step_key)) (!prev) : Obj.t) : ( string * Obj.t ) list) : (string * Obj.t) list);
  step_key := key ((Obj.magic !step_pt : (string * Obj.t) list));
  path_rev := (Obj.magic (List.append (!path_rev) [(Obj.magic (!step_pt) : (string * Obj.t) list)]) : (string * Obj.t) list list);
    with Continue -> ()
  done with Break -> ());
  let path = ref (([] : ((string * Obj.t) list) list)) in
  let k = ref ((List.length (!path_rev) - 1)) in
  (try while (!k >= 0) do
    try
  path := (Obj.magic (List.append (!path) [(Obj.magic (List.nth (!path_rev) (!k)) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("distance"), Obj.repr (List.assoc (__str (dest_key)) (!dist_map))); (__str ("path"), Obj.repr (!path))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("distance"), Obj.repr (_inf)); (__str ("path"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and print_result res =
  let __ret = ref (Obj.magic 0) in
  (try
  let res = (Obj.magic res : (string * Obj.t) list) in
  print_endline ((((Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("distance")) (res) : Obj.t) : float))) ^ ", ") ^ path_to_string ((Obj.obj (List.assoc (__str ("path")) (res) : Obj.t) : (string * Obj.t) list list))));
    !__ret
  with Return -> !__ret)


let grid1 = ref ([[1; 1; 1]; [0; 1; 0]; [0; 1; 1]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_result (dijkstra (!grid1) ([(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr (0))]) ([(__str ("x"), Obj.repr (2)); (__str ("y"), Obj.repr (2))]) (false)));
  ignore (print_result (dijkstra (!grid1) ([(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr (0))]) ([(__str ("x"), Obj.repr (2)); (__str ("y"), Obj.repr (2))]) (true)));
  let grid2 = ref ([[1; 1; 1]; [0; 0; 1]; [0; 1; 1]]) in
  ignore (print_result (dijkstra (!grid2) ([(__str ("x"), Obj.repr (0)); (__str ("y"), Obj.repr (0))]) ([(__str ("x"), Obj.repr (2)); (__str ("y"), Obj.repr (2))]) (false)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
