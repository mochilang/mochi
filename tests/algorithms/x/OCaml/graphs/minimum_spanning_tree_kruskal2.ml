(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec new_graph () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("edges"), Obj.repr ([])); (__str ("num_nodes"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_edge g u v w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  let w = (Obj.magic w : int) in
  let es = ref ((Obj.obj (List.assoc (__str ("edges")) (g) : Obj.t) : (string * Obj.t) list list)) in
  es := (Obj.magic (List.append (!es) [(Obj.magic ([(__str ("u"), Obj.repr (u)); (__str ("v"), Obj.repr (v)); (__str ("w"), Obj.repr (w))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  let n = ref ((Obj.obj (List.assoc (__str ("num_nodes")) (g) : Obj.t) : int)) in
  if (u > !n) then (
  n := u;
  );
  if (v > !n) then (
  n := v;
  );
  __ret := (Obj.magic ([(__str ("edges"), Obj.repr (!es)); (__str ("num_nodes"), Obj.repr (!n))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and make_ds n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  let parent = ref (([] : (int) list)) in
  let rank = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  parent := (Obj.magic (List.append (!parent) [(Obj.magic (!i) : int)]) : int list);
  rank := (Obj.magic (List.append (!rank) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("parent"), Obj.repr (!parent)); (__str ("rank"), Obj.repr (!rank))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and find_set ds x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let ds = (Obj.magic ds : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  if (List.nth ((Obj.obj (List.assoc (__str ("parent")) (ds) : Obj.t) : int list)) (x) = x) then (
  __ret := (Obj.magic ([(__str ("ds"), Obj.repr (ds)); (__str ("root"), Obj.repr (x))]) : (string * Obj.t) list); raise Return
  );
  let res = find_set ((Obj.magic ds : (string * Obj.t) list)) (Obj.repr (List.nth ((Obj.obj (List.assoc (__str ("parent")) (ds) : Obj.t) : int list)) (x))) in
  let p = ref ((Obj.obj (List.assoc (__str ("parent")) ((Obj.obj (List.assoc (__str ("ds")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : int list)) in
  p := (List.mapi (fun __i __x -> if __i = x then (Obj.obj (List.assoc (__str ("root")) (res) : Obj.t) : int) else __x) (!p));
  __ret := (Obj.magic ([(__str ("ds"), Obj.repr ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr ((Obj.obj (List.assoc (__str ("rank")) ((Obj.obj (List.assoc (__str ("ds")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : int list)))])); (__str ("root"), Obj.repr ((Obj.obj (List.assoc (__str ("root")) (res) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and union_set ds x y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let ds = (Obj.magic ds : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let fx = find_set ((Obj.magic ds : (string * Obj.t) list)) (Obj.repr (x)) in
  let ds1 = ref ((Obj.obj (List.assoc (__str ("ds")) (fx) : Obj.t) : ( string * Obj.t ) list)) in
  let x_root = (Obj.obj (List.assoc (__str ("root")) (fx) : Obj.t) : int) in
  let fy = find_set ((Obj.magic !ds1 : (string * Obj.t) list)) (Obj.repr (y)) in
  let ds2 = ref ((Obj.obj (List.assoc (__str ("ds")) (fy) : Obj.t) : ( string * Obj.t ) list)) in
  let y_root = (Obj.obj (List.assoc (__str ("root")) (fy) : Obj.t) : int) in
  if (x_root = y_root) then (
  __ret := (Obj.magic (!ds2) : (string * Obj.t) list); raise Return
  );
  let p = ref ((Obj.obj (List.assoc (__str ("parent")) (!ds2) : Obj.t) : int list)) in
  let r = ref ((Obj.obj (List.assoc (__str ("rank")) (!ds2) : Obj.t) : int list)) in
  if (List.nth (!r) (x_root) > List.nth (!r) (y_root)) then (
  p := (List.mapi (fun __i __x -> if __i = y_root then x_root else __x) (!p));
  ) else (
  p := (List.mapi (fun __i __x -> if __i = x_root then y_root else __x) (!p));
  if (List.nth (!r) (x_root) = List.nth (!r) (y_root)) then (
  r := (List.mapi (fun __i __x -> if __i = y_root then (List.nth (!r) (y_root) + 1) else __x) (!r));
  );
  );
  __ret := (Obj.magic ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr (!r))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sort_edges edges =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let edges = (Obj.magic edges : (string * Obj.t) list list) in
  let arr = ref (edges) in
  let i = ref (1) in
  (try while (!i < List.length (!arr)) do
    try
  let key = ref (List.nth (!arr) (!i)) in
  let j = ref ((!i - 1)) in
  (try while (!j >= 0) do
    try
  let temp = ref (List.nth (!arr) (!j)) in
  if (((Obj.obj (List.assoc (__str ("w")) (!temp) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("w")) (!key) : Obj.t) : int)) || (((Obj.obj (List.assoc (__str ("w")) (!temp) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("w")) (!key) : Obj.t) : int)) && (((Obj.obj (List.assoc (__str ("u")) (!temp) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("u")) (!key) : Obj.t) : int)) || (((Obj.obj (List.assoc (__str ("u")) (!temp) : Obj.t) : int) = (Obj.obj (List.assoc (__str ("u")) (!key) : Obj.t) : int)) && ((Obj.obj (List.assoc (__str ("v")) (!temp) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("v")) (!key) : Obj.t) : int)))))) then (
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !temp else __x) (!arr));
  j := (!j - 1);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !key else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and kruskal g =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let edges = ref (sort_edges ((Obj.obj (List.assoc (__str ("edges")) (g) : Obj.t) : (string * Obj.t) list list))) in
  let ds = ref (make_ds (Obj.repr ((Obj.obj (List.assoc (__str ("num_nodes")) (g) : Obj.t) : int)))) in
  let mst_edges = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  let added = ref (0) in
  (try while ((!added < ((Obj.obj (List.assoc (__str ("num_nodes")) (g) : Obj.t) : int) - 1)) && (!i < List.length (!edges))) do
    try
  let e = List.nth (!edges) (!i) in
  i := (!i + 1);
  let fu = find_set (!ds) (Obj.repr ((Obj.obj (List.assoc (__str ("u")) (e) : Obj.t) : int))) in
  ds := (Obj.obj (List.assoc (__str ("ds")) (fu) : Obj.t) : ( string * Obj.t ) list);
  let ru = (Obj.obj (List.assoc (__str ("root")) (fu) : Obj.t) : int) in
  let fv = find_set (!ds) (Obj.repr ((Obj.obj (List.assoc (__str ("v")) (e) : Obj.t) : int))) in
  ds := (Obj.obj (List.assoc (__str ("ds")) (fv) : Obj.t) : ( string * Obj.t ) list);
  let rv = (Obj.obj (List.assoc (__str ("root")) (fv) : Obj.t) : int) in
  if (ru <> rv) then (
  mst_edges := (Obj.magic (List.append (!mst_edges) [(Obj.magic (e) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  added := (!added + 1);
  ds := union_set (!ds) (Obj.repr (ru)) (Obj.repr (rv));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("edges"), Obj.repr (!mst_edges)); (__str ("num_nodes"), Obj.repr ((Obj.obj (List.assoc (__str ("num_nodes")) (g) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and print_mst g =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = (Obj.magic g : (string * Obj.t) list) in
  let es = ref (sort_edges ((Obj.obj (List.assoc (__str ("edges")) (g) : Obj.t) : (string * Obj.t) list list))) in
  (try List.iter (fun e ->
    try
  print_endline ((((((string_of_int ((Obj.obj (List.assoc (__str ("u")) (e) : Obj.t) : int))) ^ "-") ^ (string_of_int ((Obj.obj (List.assoc (__str ("v")) (e) : Obj.t) : int)))) ^ ":") ^ (string_of_int ((Obj.obj (List.assoc (__str ("w")) (e) : Obj.t) : int)))));
    with Continue -> ()) (!es) with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = ref (new_graph ()) in
  g := add_edge (!g) (Obj.repr (1)) (Obj.repr (2)) (Obj.repr (1));
  g := add_edge (!g) (Obj.repr (2)) (Obj.repr (3)) (Obj.repr (2));
  g := add_edge (!g) (Obj.repr (3)) (Obj.repr (4)) (Obj.repr (1));
  g := add_edge (!g) (Obj.repr (3)) (Obj.repr (5)) (Obj.repr (100));
  g := add_edge (!g) (Obj.repr (4)) (Obj.repr (5)) (Obj.repr (5));
  let mst = kruskal (!g) in
  ignore (print_mst (mst));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
