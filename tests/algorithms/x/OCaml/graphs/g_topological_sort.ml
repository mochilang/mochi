(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec depth_first_search u visited graph stack =
  let __ret = ref ([] : (int) list) in
  (try
  let u = (Obj.magic u : int) in
  visited := (Obj.magic !visited : bool list);
  let graph = (Obj.magic graph : int list list) in
  stack := (Obj.magic !stack : int list);
  visited := (List.mapi (fun __i __x -> if __i = u then true else __x) (!visited));
  let i = ref (0) in
  (try while (!i < List.length (List.nth (graph) (u))) do
    try
  let v = List.nth (List.nth (graph) (u)) (!i) in
  if not (List.nth (!visited) (v)) then (
  stack := (Obj.magic depth_first_search (Obj.repr (v)) (visited) (graph) (stack) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  stack := (Obj.magic (List.append (!stack) [(Obj.magic (u) : int)]) : int list);
  __ret := (Obj.magic (!stack) : int list); raise Return
  with Return -> !__ret)

and topological_sort graph =
  let __ret = ref ([] : (int) list) in
  (try
  let graph = (Obj.magic graph : int list list) in
  let visited = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < List.length (graph)) do
    try
  visited := (Obj.magic (List.append (!visited) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let stack = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (graph)) do
    try
  if not (List.nth (!visited) (!i)) then (
  stack := (Obj.magic depth_first_search (Obj.repr (!i)) (visited) (graph) (stack) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!stack) : int list); raise Return
  with Return -> !__ret)

and print_stack stack clothes =
  let __ret = ref (Obj.magic 0) in
  (try
  let stack = (Obj.magic stack : int list) in
  let clothes = (Obj.magic clothes : (string * string) list) in
  let order = ref (1) in
  let s = ref (stack) in
  (try while (List.length (!s) > 0) do
    try
  let idx = List.nth (!s) ((List.length (!s) - 1)) in
  s := (Obj.magic List.of_seq (Seq.take ((List.length (!s) - 1) - 0) (Seq.drop 0 (List.to_seq (!s)))) : int list);
  print_endline ((((string_of_int (!order)) ^ " ") ^ List.assoc (__str (idx)) (clothes)));
  order := (!order + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and format_list xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : int list) in
  let res = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  res := (!res ^ (string_of_int (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  res := (!res ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ "]");
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let clothes = ref ([(__str (0), "underwear"); (__str (1), "pants"); (__str (2), "belt"); (__str (3), "suit"); (__str (4), "shoe"); (__str (5), "socks"); (__str (6), "shirt"); (__str (7), "tie"); (__str (8), "watch")]) in
  let graph = ref ([Obj.repr ([1; 4]); Obj.repr ([2; 4]); Obj.repr ([3]); Obj.repr ([]); Obj.repr ([]); Obj.repr ([4]); Obj.repr ([2; 7]); Obj.repr ([3]); Obj.repr ([])]) in
  let stack = ref (topological_sort (!graph)) in
  print_endline ((format_list (!stack)));
  ignore (print_stack (!stack) ((Obj.magic !clothes : (string * string) list)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
