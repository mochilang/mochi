(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000.0
let rec floyd_warshall graph =
  let __ret = ref ([] : (float list) list) in
  (try
  let graph = (Obj.magic graph : float list list) in
  let v = List.length (graph) in
  let dist = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < v) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < v) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (List.nth (List.nth (graph) (!i)) (!j)) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  dist := (Obj.magic (List.append (!dist) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref (0) in
  (try while (!k < v) do
    try
  let i = ref (0) in
  (try while (!i < v) do
    try
  let j = ref (0) in
  (try while (!j < v) do
    try
  if (((List.nth (List.nth (!dist) (!i)) (!k) < _inf) && (List.nth (List.nth (!dist) (!k)) (!j) < _inf)) && ((List.nth (List.nth (!dist) (!i)) (!k) +. List.nth (List.nth (!dist) (!k)) (!j)) < List.nth (List.nth (!dist) (!i)) (!j))) then (
  dist := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then (List.nth (List.nth (!dist) (!i)) (!k) +. List.nth (List.nth (!dist) (!k)) (!j)) else __x) (List.nth (!dist) (!i))) else __x) (!dist));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!dist) : float list list); raise Return
  with Return -> !__ret)

and print_dist dist =
  let __ret = ref (Obj.magic 0) in
  (try
  let dist = (Obj.magic dist : float list list) in
  print_string "\nThe shortest path matrix using Floyd Warshall algorithm\n";
  let i = ref (0) in
  (try while (!i < List.length (dist)) do
    try
  let j = ref (0) in
  let line = ref ("") in
  (try while (!j < List.length (List.nth (dist) (!i))) do
    try
  if (List.nth (List.nth (dist) (!i)) (!j) >= (_inf /. 2.0)) then (
  line := (!line ^ "INF\t");
  ) else (
  line := ((!line ^ (string_of_int (int_of_float (List.nth (List.nth (dist) (!i)) (!j))))) ^ "\t");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let graph = ref ([[0.0; 5.0; _inf; 10.0]; [_inf; 0.0; 3.0; _inf]; [_inf; _inf; 0.0; 1.0]; [_inf; _inf; _inf; 0.0]])
let result = ref (floyd_warshall (!graph))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_dist (!result));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
