(* Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:24 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec uf_make n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (([] : (int) list)) in
  let r = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  p := (Obj.magic (List.append (!p) [(Obj.magic (!i) : int)]) : int list);
  r := (Obj.magic (List.append (!r) [(Obj.magic (0) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr (!r))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and uf_find uf x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let uf = (Obj.magic uf : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  let p = ref ((Obj.obj (List.assoc (__str ("parent")) (uf) : Obj.t) : int list)) in
  if (List.nth (!p) (x) <> x) then (
  let res = uf_find ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr ((Obj.obj (List.assoc (__str ("rank")) (uf) : Obj.t) : int list)))]) (Obj.repr (List.nth (!p) (x))) in
  p := (Obj.magic (Obj.obj (List.assoc (__str ("parent")) ((Obj.obj (List.assoc (__str ("uf")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : int list) : int list);
  p := (List.mapi (fun __i __x -> if __i = x then (Obj.obj (List.assoc (__str ("root")) (res) : Obj.t) : int) else __x) (!p));
  __ret := (Obj.magic ([(__str ("root"), Obj.repr ((Obj.obj (List.assoc (__str ("root")) (res) : Obj.t) : int))); (__str ("uf"), Obj.repr ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr ((Obj.obj (List.assoc (__str ("rank")) ((Obj.obj (List.assoc (__str ("uf")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : int list)))]))]) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic ([(__str ("root"), Obj.repr (x)); (__str ("uf"), Obj.repr (uf))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and uf_union uf x y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let uf = (Obj.magic uf : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let fr1 = uf_find ((Obj.magic uf : (string * Obj.t) list)) (Obj.repr (x)) in
  let uf1 = ref ((Obj.obj (List.assoc (__str ("uf")) (fr1) : Obj.t) : ( string * Obj.t ) list)) in
  let root1 = (Obj.obj (List.assoc (__str ("root")) (fr1) : Obj.t) : int) in
  let fr2 = uf_find ((Obj.magic !uf1 : (string * Obj.t) list)) (Obj.repr (y)) in
  uf1 := (Obj.magic (Obj.obj (List.assoc (__str ("uf")) (fr2) : Obj.t) : ( string * Obj.t ) list) : (string * Obj.t) list);
  let root2 = (Obj.obj (List.assoc (__str ("root")) (fr2) : Obj.t) : int) in
  if (root1 = root2) then (
  __ret := (Obj.magic (!uf1) : (string * Obj.t) list); raise Return
  );
  let p = ref ((Obj.obj (List.assoc (__str ("parent")) (!uf1) : Obj.t) : int list)) in
  let r = ref ((Obj.obj (List.assoc (__str ("rank")) (!uf1) : Obj.t) : int list)) in
  if (List.nth (!r) (root1) > List.nth (!r) (root2)) then (
  p := (List.mapi (fun __i __x -> if __i = root2 then root1 else __x) (!p));
  ) else (
  if (List.nth (!r) (root1) < List.nth (!r) (root2)) then (
  p := (List.mapi (fun __i __x -> if __i = root1 then root2 else __x) (!p));
  ) else (
  p := (List.mapi (fun __i __x -> if __i = root2 then root1 else __x) (!p));
  r := (List.mapi (fun __i __x -> if __i = root1 then (List.nth (!r) (root1) + 1) else __x) (!r));
  );
  );
  __ret := (Obj.magic ([(__str ("parent"), Obj.repr (!p)); (__str ("rank"), Obj.repr (!r))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and boruvka n edges =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let n = (Obj.magic n : int) in
  let edges = (Obj.magic edges : (string * Obj.t) list list) in
  let uf = ref (uf_make (Obj.repr (n))) in
  let num_components = ref (n) in
  let mst = ref (([] : ((string * Obj.t) list) list)) in
  (try while (!num_components > 1) do
    try
  let cheap = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  cheap := (Obj.magic (List.append (!cheap) [(Obj.magic ((0 - 1)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = ref (0) in
  (try while (!idx < List.length (edges)) do
    try
  let e = ref (List.nth (edges) (!idx)) in
  let fr1 = uf_find (!uf) (Obj.repr ((Obj.obj (List.assoc (__str ("u")) (!e) : Obj.t) : int))) in
  uf := (Obj.obj (List.assoc (__str ("uf")) (fr1) : Obj.t) : ( string * Obj.t ) list);
  let set1 = (Obj.obj (List.assoc (__str ("root")) (fr1) : Obj.t) : int) in
  let fr2 = uf_find (!uf) (Obj.repr ((Obj.obj (List.assoc (__str ("v")) (!e) : Obj.t) : int))) in
  uf := (Obj.obj (List.assoc (__str ("uf")) (fr2) : Obj.t) : ( string * Obj.t ) list);
  let set2 = (Obj.obj (List.assoc (__str ("root")) (fr2) : Obj.t) : int) in
  if (set1 <> set2) then (
  if ((List.nth (!cheap) (set1) = (0 - 1)) || ((Obj.obj (List.assoc (__str ("w")) (List.nth (edges) (List.nth (!cheap) (set1))) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("w")) (!e) : Obj.t) : int))) then (
  cheap := (List.mapi (fun __i __x -> if __i = set1 then !idx else __x) (!cheap));
  );
  if ((List.nth (!cheap) (set2) = (0 - 1)) || ((Obj.obj (List.assoc (__str ("w")) (List.nth (edges) (List.nth (!cheap) (set2))) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("w")) (!e) : Obj.t) : int))) then (
  cheap := (List.mapi (fun __i __x -> if __i = set2 then !idx else __x) (!cheap));
  );
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let v = ref (0) in
  (try while (!v < n) do
    try
  let idxe = List.nth (!cheap) (!v) in
  if (idxe <> (0 - 1)) then (
  let e = ref (List.nth (edges) (idxe)) in
  let fr1 = uf_find (!uf) (Obj.repr ((Obj.obj (List.assoc (__str ("u")) (!e) : Obj.t) : int))) in
  uf := (Obj.obj (List.assoc (__str ("uf")) (fr1) : Obj.t) : ( string * Obj.t ) list);
  let set1 = (Obj.obj (List.assoc (__str ("root")) (fr1) : Obj.t) : int) in
  let fr2 = uf_find (!uf) (Obj.repr ((Obj.obj (List.assoc (__str ("v")) (!e) : Obj.t) : int))) in
  uf := (Obj.obj (List.assoc (__str ("uf")) (fr2) : Obj.t) : ( string * Obj.t ) list);
  let set2 = (Obj.obj (List.assoc (__str ("root")) (fr2) : Obj.t) : int) in
  if (set1 <> set2) then (
  mst := (Obj.magic (List.append (!mst) [(Obj.magic (!e) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  uf := uf_union (!uf) (Obj.repr (set1)) (Obj.repr (set2));
  num_components := (!num_components - 1);
  );
  );
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!mst) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let edges = ref ([[(__str ("u"), Obj.repr (0)); (__str ("v"), Obj.repr (1)); (__str ("w"), Obj.repr (1))]; [(__str ("u"), Obj.repr (0)); (__str ("v"), Obj.repr (2)); (__str ("w"), Obj.repr (2))]; [(__str ("u"), Obj.repr (2)); (__str ("v"), Obj.repr (3)); (__str ("w"), Obj.repr (3))]]) in
  let mst = ref (boruvka (Obj.repr (4)) ((Obj.magic !edges : (string * Obj.t) list list))) in
  (try List.iter (fun e ->
    try
  print_endline ((((((string_of_int ((Obj.obj (List.assoc (__str ("u")) (e) : Obj.t) : int))) ^ " - ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("v")) (e) : Obj.t) : int)))) ^ " : ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("w")) (e) : Obj.t) : int)))));
    with Continue -> ()) (!mst) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
