(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_edges edges =
  let __ret = ref ([] : (int list) list) in
  (try
  let edges = (Obj.magic edges : int list list) in
  let es = ref (edges) in
  let i = ref (0) in
  (try while (!i < List.length (!es)) do
    try
  let j = ref (0) in
  (try while (!j < ((List.length (!es) - !i) - 1)) do
    try
  if ((let __l = (let __l = !es in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > (let __l = (let __l = !es in let __i = (!j + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  let tmp = ref ((let __l = !es in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  es := (List.mapi (fun __i __x -> if __i = !j then (let __l = !es in let __i = (!j + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!es));
  es := (List.mapi (fun __i __x -> if __i = (!j + 1) then !tmp else __x) (!es));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!es) : int list list); raise Return
  with Return -> !__ret)

and find parent x =
  let __ret = ref 0 in
  (try
  let parent = (Obj.magic parent : int list) in
  let x = (Obj.magic x : int) in
  let r = ref (x) in
  (try while ((let __l = parent in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> !r) do
    try
  r := (let __l = parent in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and kruskal n edges =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let edges = (Obj.magic edges : int list list) in
  let parent = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  parent := (Obj.magic (List.append (!parent) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sorted = ref (sort_edges (edges)) in
  let mst = ref (([] : (int list) list)) in
  let e = ref (0) in
  (try while (!e < List.length (!sorted)) do
    try
  if (List.length (!mst) = (n - 1)) then (
  raise Break;
  );
  let edge = ref ((let __l = !sorted in let __i = !e in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  e := (!e + 1);
  let u = (let __l = !edge in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let v = (let __l = !edge in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let w = (let __l = !edge in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let ru = find (!parent) (Obj.repr (u)) in
  let rv = find (!parent) (Obj.repr (v)) in
  if (ru <> rv) then (
  parent := (List.mapi (fun __i __x -> if __i = ru then rv else __x) (!parent));
  mst := (Obj.magic (List.append (!mst) [(Obj.magic ([u; v; w]) : int list)]) : int list list);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!mst) : int list list); raise Return
  with Return -> !__ret)

and edges_equal a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int list list) in
  let b = (Obj.magic b : int list list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  let e1 = ref ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let e2 = ref ((let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if ((((let __l = !e1 in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = !e2 in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) || ((let __l = !e1 in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = !e2 in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) || ((let __l = !e1 in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = !e2 in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let num_nodes = 9 in
  let edges = ref ([[0; 1; 4]; [0; 7; 8]; [1; 2; 8]; [7; 8; 7]; [7; 6; 1]; [2; 8; 2]; [8; 6; 6]; [2; 3; 7]; [2; 5; 4]; [6; 5; 2]; [3; 5; 14]; [3; 4; 9]; [5; 4; 10]; [1; 7; 11]]) in
  let expected = ref ([[7; 6; 1]; [2; 8; 2]; [6; 5; 2]; [0; 1; 4]; [2; 5; 4]; [2; 3; 7]; [0; 7; 8]; [3; 4; 9]]) in
  let result = ref (kruskal (Obj.repr (num_nodes)) (!edges)) in
  let sorted_result = ref (sort_edges (!result)) in
  let sorted_expected = ref (sort_edges (!expected)) in
  print_endline ((__str (Obj.magic (!sorted_result) : Obj.t)));
  if edges_equal (!sorted_expected) (!sorted_result) then (
  print_endline (string_of_bool true);
  ) else (
  print_endline (string_of_bool false);
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
