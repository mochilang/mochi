(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec prims_algorithm adjacency =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let adjacency = (Obj.magic adjacency : (string * Obj.t) list) in
  let visited = ref ([] : (string * bool) list) in
  visited := ((__str (0), true) :: List.remove_assoc (__str (0)) (!visited));
  let mst = ref (([] : ((string * Obj.t) list) list)) in
  let count = ref (1) in
  let total = ref (0) in
  (try List.iter (fun (k, _) ->
    try
  total := (!total + 1);
    with Continue -> ()) (adjacency) with Break -> ());
  (try while (!count < !total) do
    try
  let best_u = ref (0) in
  let best_v = ref (0) in
  let best_cost = ref (2147483647) in
  (try List.iter (fun (u_str, _) ->
    try
  let u = int_of_string (u_str) in
  if List.assoc (__str (u)) (!visited) then (
  (try List.iter (fun n ->
    try
  if (not (List.assoc (__str ((Obj.obj (List.assoc (__str ("node")) (n) : Obj.t) : int))) (!visited)) && ((Obj.obj (List.assoc (__str ("cost")) (n) : Obj.t) : int) < !best_cost)) then (
  best_cost := (Obj.obj (List.assoc (__str ("cost")) (n) : Obj.t) : int);
  best_u := u;
  best_v := (Obj.obj (List.assoc (__str ("node")) (n) : Obj.t) : int);
  );
    with Continue -> ()) ((Obj.obj (List.assoc (__str (u)) (adjacency) : Obj.t) : (string * Obj.t) list list)) with Break -> ());
  );
    with Continue -> ()) (adjacency) with Break -> ());
  visited := ((__str (!best_v), true) :: List.remove_assoc (__str (!best_v)) (!visited));
  mst := (Obj.magic (List.append (!mst) [(Obj.magic ([(__str ("u"), Obj.repr (!best_u)); (__str ("v"), Obj.repr (!best_v))]) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!mst) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and test_prim_successful_result () =
  let __ret = ref false in
  (try
  let edges = ref ([[0; 1; 4]; [0; 7; 8]; [1; 2; 8]; [7; 8; 7]; [7; 6; 1]; [2; 8; 2]; [8; 6; 6]; [2; 3; 7]; [2; 5; 4]; [6; 5; 2]; [3; 5; 14]; [3; 4; 9]; [5; 4; 10]; [1; 7; 11]]) in
  let adjacency = ref ([] : (string * Obj.t) list) in
  (try List.iter (fun e ->
    try
  let u = (let __l = e in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let v = (let __l = e in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let w = (let __l = e in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if not ((List.mem_assoc (__str (u)) !adjacency)) then (
  adjacency := ((__str (u), Obj.repr (Obj.magic ([]) : Obj.t list)) :: List.remove_assoc (__str (u)) (Obj.magic (!adjacency) : (string * Obj.t) list));
  );
  if not ((List.mem_assoc (__str (v)) !adjacency)) then (
  adjacency := ((__str (v), Obj.repr (Obj.magic ([]) : Obj.t list)) :: List.remove_assoc (__str (v)) (Obj.magic (!adjacency) : (string * Obj.t) list));
  );
  adjacency := ((__str (u), Obj.repr (Obj.magic ((List.append ((Obj.obj (List.assoc (__str (u)) (!adjacency) : Obj.t) : (string * Obj.t) list list)) [(Obj.magic ([(__str ("node"), Obj.repr (v)); (__str ("cost"), Obj.repr (w))]) : (string * Obj.t) list)])) : (string * Obj.t) list list)) :: List.remove_assoc (__str (u)) (Obj.magic (!adjacency) : (string * Obj.t) list));
  adjacency := ((__str (v), Obj.repr (Obj.magic ((List.append ((Obj.obj (List.assoc (__str (v)) (!adjacency) : Obj.t) : (string * Obj.t) list list)) [(Obj.magic ([(__str ("node"), Obj.repr (u)); (__str ("cost"), Obj.repr (w))]) : (string * Obj.t) list)])) : (string * Obj.t) list list)) :: List.remove_assoc (__str (v)) (Obj.magic (!adjacency) : (string * Obj.t) list));
    with Continue -> ()) (!edges) with Break -> ());
  let result = ref (prims_algorithm ((Obj.magic !adjacency : (string * Obj.t) list))) in
  let seen = ref ([] : (string * bool) list) in
  (try List.iter (fun e ->
    try
  let key1 = (((string_of_int ((Obj.obj (List.assoc (__str ("u")) (e) : Obj.t) : int))) ^ ",") ^ (string_of_int ((Obj.obj (List.assoc (__str ("v")) (e) : Obj.t) : int)))) in
  let key2 = (((string_of_int ((Obj.obj (List.assoc (__str ("v")) (e) : Obj.t) : int))) ^ ",") ^ (string_of_int ((Obj.obj (List.assoc (__str ("u")) (e) : Obj.t) : int)))) in
  seen := ((__str (key1), true) :: List.remove_assoc (__str (key1)) (!seen));
  seen := ((__str (key2), true) :: List.remove_assoc (__str (key2)) (!seen));
    with Continue -> ()) (!result) with Break -> ());
  let expected = ref ([[7; 6; 1]; [2; 8; 2]; [6; 5; 2]; [0; 1; 4]; [2; 5; 4]; [2; 3; 7]; [0; 7; 8]; [3; 4; 9]]) in
  (try List.iter (fun ans ->
    try
  let key = (((string_of_int ((let __l = ans in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) ^ ",") ^ (string_of_int ((let __l = ans in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) in
  if not (List.assoc (__str (key)) (!seen)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) (!expected) with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_bool (test_prim_successful_result ()));
  print_endline (string_of_bool true);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
