(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec invert_matrix matrix =
  let __ret = ref ([] : (float list) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let n = List.length (matrix) in
  let aug = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = matrix in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref (0) in
  (try while (!k < n) do
    try
  if (!i = !k) then (
  row := (Obj.magic (List.append (!row) [(Obj.magic (1.0) : float)]) : float list);
  ) else (
  row := (Obj.magic (List.append (!row) [(Obj.magic (0.0) : float)]) : float list);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  aug := (Obj.magic (List.append (!aug) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let col = ref (0) in
  (try while (!col < n) do
    try
  let pivot_row = ref (!col) in
  let r = ref (!col) in
  (try while (!r < n) do
    try
  if ((let __l = (let __l = !aug in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> 0.0) then (
  pivot_row := !r;
  raise Break;
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  if ((let __l = (let __l = !aug in let __i = !pivot_row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 0.0) then (
  (failwith ("Matrix is not invertible"));
  );
  if (!pivot_row <> !col) then (
  let temp = ref ((let __l = !aug in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  aug := (List.mapi (fun __i __x -> if __i = !col then (let __l = !aug in let __i = !pivot_row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!aug));
  aug := (List.mapi (fun __i __x -> if __i = !pivot_row then !temp else __x) (!aug));
  );
  let pivot = (let __l = (let __l = !aug in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let c = ref (0) in
  (try while (!c < (2 * n)) do
    try
  aug := (List.mapi (fun __i __x -> if __i = !col then (List.mapi (fun __i __x -> if __i = !c then ((let __l = (let __l = !aug in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !c in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. pivot) else __x) ((let __l = !aug in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!aug));
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  let r2 = ref (0) in
  (try while (!r2 < n) do
    try
  if (!r2 <> !col) then (
  let factor = (let __l = (let __l = !aug in let __i = !r2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let c2 = ref (0) in
  (try while (!c2 < (2 * n)) do
    try
  aug := (List.mapi (fun __i __x -> if __i = !r2 then (List.mapi (fun __i __x -> if __i = !c2 then ((let __l = (let __l = !aug in let __i = !r2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !c2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (factor *. (let __l = (let __l = !aug in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !c2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) ((let __l = !aug in let __i = !r2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!aug));
  c2 := (!c2 + 1);
    with Continue -> ()
  done with Break -> ());
  );
  r2 := (!r2 + 1);
    with Continue -> ()
  done with Break -> ());
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  let inv = ref (([] : (float list) list)) in
  let r3 = ref (0) in
  (try while (!r3 < n) do
    try
  let row = ref (([] : (float) list)) in
  let c3 = ref (0) in
  (try while (!c3 < n) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = !aug in let __i = !r3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!c3 + n) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  c3 := (!c3 + 1);
    with Continue -> ()
  done with Break -> ());
  inv := (Obj.magic (List.append (!inv) [(Obj.magic (!row) : float list)]) : float list list);
  r3 := (!r3 + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!inv) : float list list); raise Return
  with Return -> !__ret)


let mat = ref ([[4.0; 7.0]; [2.0; 6.0]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Original Matrix:");
  print_endline (__show_list !mat);
  print_endline ("Inverted Matrix:");
  print_endline (__show_list (invert_matrix (!mat)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
