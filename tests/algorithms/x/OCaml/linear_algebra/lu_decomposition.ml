(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec lu_decomposition mat =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let mat = (Obj.magic mat : float list list) in
  let n = List.length (mat) in
  if (n = 0) then (
  __ret := (Obj.magic ([(__str ("lower"), Obj.repr ([])); (__str ("upper"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  );
  let m = List.length ((let __l = mat in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if (n <> m) then (
  (failwith ("Matrix must be square"));
  );
  let lower = ref (([] : (float list) list)) in
  let upper = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let lrow = ref (([] : (float) list)) in
  let urow = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  lrow := (Obj.magic (List.append (!lrow) [(Obj.magic (0.0) : float)]) : float list);
  urow := (Obj.magic (List.append (!urow) [(Obj.magic (0.0) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  lower := (Obj.magic (List.append (!lower) [(Obj.magic (!lrow) : float list)]) : float list list);
  upper := (Obj.magic (List.append (!upper) [(Obj.magic (!urow) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < n) do
    try
  let j1 = ref (0) in
  (try while (!j1 < !i) do
    try
  let total = ref (0.0) in
  let k = ref (0) in
  (try while (!k < !i) do
    try
  total := (!total +. ((let __l = (let __l = !lower in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = !upper in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  if ((let __l = (let __l = !upper in let __i = !j1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 0.0) then (
  (failwith ("No LU decomposition exists"));
  );
  lower := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j1 then (((let __l = (let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. !total) /. (let __l = (let __l = !upper in let __i = !j1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) ((let __l = !lower in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!lower));
  j1 := (!j1 + 1);
    with Continue -> ()
  done with Break -> ());
  lower := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !i then 1.0 else __x) ((let __l = !lower in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!lower));
  let j2 = ref (!i) in
  (try while (!j2 < n) do
    try
  let total2 = ref (0.0) in
  let k2 = ref (0) in
  (try while (!k2 < !i) do
    try
  total2 := (!total2 +. ((let __l = (let __l = !lower in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = !upper in let __i = !k2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  k2 := (!k2 + 1);
    with Continue -> ()
  done with Break -> ());
  upper := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j2 then ((let __l = (let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. !total2) else __x) ((let __l = !upper in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!upper));
  j2 := (!j2 + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("lower"), Obj.repr (!lower)); (__str ("upper"), Obj.repr (!upper))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and print_matrix mat =
  let __ret = ref (Obj.magic 0) in
  (try
  let mat = (Obj.magic mat : float list list) in
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  line := (!line ^ (Printf.sprintf "%.16g" ((let __l = (let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if ((!j + 1) < List.length ((let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  line := (!line ^ " ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (!line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let matrix = ref ([[2.0; (-.(2.0)); 1.0]; [0.0; 1.0; 2.0]; [5.0; 3.0; 1.0]])
let result = lu_decomposition (!matrix)
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_matrix ((Obj.obj (List.assoc (__str ("lower")) (result) : Obj.t) : float list list)));
  ignore (print_matrix ((Obj.obj (List.assoc (__str ("upper")) (result) : Obj.t) : float list list)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
