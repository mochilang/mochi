(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec panic msg =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (msg);
    !__ret
  with Return -> !__ret)

and abs_float x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and copy_matrix src =
  let __ret = ref ([] : (float list) list) in
  (try
  let src = (Obj.magic src : float list list) in
  let res = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (src)) do
    try
  let row_src = ref ((let __l = src in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!row_src)) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = !row_src in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list list); raise Return
  with Return -> !__ret)

and solve_linear_system matrix =
  let __ret = ref ([] : (float) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let ab = ref (copy_matrix (matrix)) in
  let num_rows = ref (List.length (!ab)) in
  let num_cols = ref ((List.length ((let __l = !ab in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) - 1)) in
  if (!num_rows <> !num_cols) then (
  (failwith ("Matrix is not square"));
  __ret := (Obj.magic ([]) : float list); raise Return
  );
  let column_num = ref (0) in
  (try while (!column_num < !num_rows) do
    try
  let i = ref (!column_num) in
  (try while (!i < !num_cols) do
    try
  if (abs_float (Obj.repr ((let __l = (let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) > abs_float (Obj.repr ((let __l = (let __l = !ab in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) then (
  let temp = ref ((let __l = !ab in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  ab := (List.mapi (fun __i __x -> if __i = !column_num then (let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) else __x) (!ab));
  ab := (List.mapi (fun __i __x -> if __i = !i then !temp else __x) (!ab));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (abs_float (Obj.repr ((let __l = (let __l = !ab in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) < 0.00000001) then (
  (failwith ("Matrix is singular"));
  __ret := (Obj.magic ([]) : float list); raise Return
  );
  if (!column_num <> 0) then (
  i := !column_num;
  (try while (!i < !num_rows) do
    try
  let factor = ref (((let __l = (let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!column_num - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. (let __l = (let __l = !ab in let __i = (!column_num - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = (!column_num - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  ab := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !j then ((let __l = (let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (!factor *. (let __l = (let __l = !ab in let __i = (!column_num - 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) ((let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!ab));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  column_num := (!column_num + 1);
    with Continue -> ()
  done with Break -> ());
  let x_lst = ref (([] : (float) list)) in
  let t = ref (0) in
  (try while (!t < !num_rows) do
    try
  x_lst := (Obj.magic (List.append (!x_lst) [(Obj.magic (0.0) : float)]) : float list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  column_num := (!num_rows - 1);
  (try while (!column_num >= 0) do
    try
  let x = ref (((let __l = (let __l = !ab in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !num_cols in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. (let __l = (let __l = !ab in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  x_lst := (List.mapi (fun __i __x -> if __i = !column_num then !x else __x) (!x_lst));
  let i = ref ((!column_num - 1)) in
  (try while (!i >= 0) do
    try
  ab := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !num_cols then ((let __l = (let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !num_cols in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. ((let __l = (let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !column_num in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. !x)) else __x) ((let __l = !ab in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!ab));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  column_num := (!column_num - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x_lst) : float list); raise Return
  with Return -> !__ret)


let example_matrix = ref ([[5.0; (-.(5.0)); (-.(3.0)); 4.0; (-.(11.0))]; [1.0; (-.(4.0)); 6.0; (-.(4.0)); (-.(10.0))]; [(-.(2.0)); (-.(5.0)); 4.0; (-.(5.0)); (-.(12.0))]; [(-.(3.0)); (-.(3.0)); 5.0; (-.(5.0)); 8.0]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Matrix:");
  print_endline ((__str (Obj.magic (!example_matrix) : Obj.t)));
  let solution = ref (solve_linear_system (!example_matrix)) in
  print_endline ((__str (Obj.magic (!solution) : Obj.t)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
