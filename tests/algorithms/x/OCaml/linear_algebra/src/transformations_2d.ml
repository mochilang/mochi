(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref (int_of_float (x)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and modf x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (floor ((x /. m)) *. m))) : float); raise Return
  with Return -> !__ret)

and sin_taylor angle =
  let __ret = ref 0.0 in
  (try
  let angle = (Obj.magic angle : float) in
  let x = ref (modf (Obj.repr (angle)) (Obj.repr ((2.0 *. _pi)))) in
  if (!x > _pi) then (
  x := (!x -. (2.0 *. _pi));
  );
  let term = ref (!x) in
  let sum = ref (!x) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = (2.0 *. float_of_int (!i)) in
  let k2 = (k1 +. 1.0) in
  term := ((((-.(!term)) *. !x) *. !x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cos_taylor angle =
  let __ret = ref 0.0 in
  (try
  let angle = (Obj.magic angle : float) in
  let x = ref (modf (Obj.repr (angle)) (Obj.repr ((2.0 *. _pi)))) in
  if (!x > _pi) then (
  x := (!x -. (2.0 *. _pi));
  );
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 10) do
    try
  let k1 = ((2.0 *. float_of_int (!i)) -. 1.0) in
  let k2 = (2.0 *. float_of_int (!i)) in
  term := ((((-.(!term)) *. !x) *. !x) /. (k1 *. k2));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and matrix_to_string m =
  let __ret = ref "" in
  (try
  let m = (Obj.magic m : float list list) in
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  let row = ref ((let __l = m in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  s := (!s ^ "[");
  let j = ref (0) in
  (try while (!j < List.length (!row)) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" ((let __l = !row in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!j < (List.length (!row) - 1)) then (
  s := (!s ^ ", ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  if (!i < (List.length (m) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and scaling f =
  let __ret = ref ([] : (float list) list) in
  (try
  let f = (Obj.magic f : float) in
  __ret := (Obj.magic ([[f; 0.0]; [0.0; f]]) : float list list); raise Return
  with Return -> !__ret)

and rotation angle =
  let __ret = ref ([] : (float list) list) in
  (try
  let angle = (Obj.magic angle : float) in
  let c = cos_taylor (Obj.repr (angle)) in
  let s = sin_taylor (Obj.repr (angle)) in
  __ret := (Obj.magic ([[c; (-.(s))]; [s; c]]) : float list list); raise Return
  with Return -> !__ret)

and projection angle =
  let __ret = ref ([] : (float list) list) in
  (try
  let angle = (Obj.magic angle : float) in
  let c = cos_taylor (Obj.repr (angle)) in
  let s = sin_taylor (Obj.repr (angle)) in
  let cs = (c *. s) in
  __ret := (Obj.magic ([[(c *. c); cs]; [cs; (s *. s)]]) : float list list); raise Return
  with Return -> !__ret)

and reflection angle =
  let __ret = ref ([] : (float list) list) in
  (try
  let angle = (Obj.magic angle : float) in
  let c = cos_taylor (Obj.repr (angle)) in
  let s = sin_taylor (Obj.repr (angle)) in
  let cs = (c *. s) in
  __ret := (Obj.magic ([[((2.0 *. c) -. 1.0); (2.0 *. cs)]; [(2.0 *. cs); ((2.0 *. s) -. 1.0)]]) : float list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (("    scaling(5) = " ^ matrix_to_string (scaling (Obj.repr (5.0)))));
  print_endline (("  rotation(45) = " ^ matrix_to_string (rotation (Obj.repr (45.0)))));
  print_endline (("projection(45) = " ^ matrix_to_string (projection (Obj.repr (45.0)))));
  print_endline (("reflection(45) = " ^ matrix_to_string (reflection (Obj.repr (45.0)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
