(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec zeros n =
  let __ret = ref ([] : (float) list) in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (0.0) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and dot a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  sum := (!sum +. ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and mat_vec_mul m v =
  let __ret = ref ([] : (float) list) in
  (try
  let m = (Obj.magic m : float list list) in
  let v = (Obj.magic v : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  let s = ref (0.0) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = m in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  s := (!s +. ((let __l = (let __l = m in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = v in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (!s) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and vec_add a b =
  let __ret = ref ([] : (float) list) in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and vec_sub a b =
  let __ret = ref ([] : (float) list) in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and scalar_mul s v =
  let __ret = ref ([] : (float) list) in
  (try
  let s = (Obj.magic s : float) in
  let v = (Obj.magic v : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (v)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((s *. (let __l = v in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and norm v =
  let __ret = ref 0.0 in
  (try
  let v = (Obj.magic v : float list) in
  __ret := (Obj.magic (sqrtApprox (Obj.repr (dot (v) (v)))) : float); raise Return
  with Return -> !__ret)

and conjugate_gradient _a b max_iterations tol =
  let __ret = ref ([] : (float) list) in
  (try
  let _a = (Obj.magic _a : float list list) in
  let b = (Obj.magic b : float list) in
  let max_iterations = (Obj.magic max_iterations : int) in
  let tol = (Obj.magic tol : float) in
  let n = List.length (b) in
  let x = ref (zeros (Obj.repr (n))) in
  let r = ref (vec_sub (b) (mat_vec_mul (_a) (!x))) in
  let p = ref (!r) in
  let rs_old = ref (dot (!r) (!r)) in
  let i = ref (0) in
  (try while (!i < max_iterations) do
    try
  let _ap = ref (mat_vec_mul (_a) (!p)) in
  let alpha = (!rs_old /. dot (!p) (!_ap)) in
  x := (Obj.magic vec_add (!x) (scalar_mul (Obj.repr (alpha)) (!p)) : float list);
  r := (Obj.magic vec_sub (!r) (scalar_mul (Obj.repr (alpha)) (!_ap)) : float list);
  let rs_new = dot (!r) (!r) in
  if (sqrtApprox (Obj.repr (rs_new)) < tol) then (
  raise Break;
  );
  let beta = (rs_new /. !rs_old) in
  p := (Obj.magic vec_add (!r) (scalar_mul (Obj.repr (beta)) (!p)) : float list);
  rs_old := rs_new;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : float list); raise Return
  with Return -> !__ret)


let _a = ref ([[8.73256573; (-.(5.02034289)); (-.(2.68709226))]; [(-.(5.02034289)); 3.78188322; 0.91980451]; [(-.(2.68709226)); 0.91980451; 1.94746467]])
let b = ref ([(-.(5.80872761)); 3.23807431; 1.95381422])
let x = ref (conjugate_gradient (!_a) (!b) (Obj.repr (1000)) (Obj.repr (0.00000001)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" ((let __l = !x in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  print_endline ((Printf.sprintf "%.16g" ((let __l = !x in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  print_endline ((Printf.sprintf "%.16g" ((let __l = !x in let __i = 2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
