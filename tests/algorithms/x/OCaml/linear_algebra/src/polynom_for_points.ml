(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec contains_int xs x =
  let __ret = ref false in
  (try
  let xs = (Obj.magic xs : int list) in
  let x = (Obj.magic x : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if ((let __l = xs in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = x) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and split s sep =
  let __ret = ref ([] : (string) list) in
  (try
  let res = ref (([] : (string) list)) in
  let current = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = (let __s = s in let __st = !i in let __en = (!i + 1) in let __len_s = String.length __s in let __st = (if __st < 0 then __len_s + __st else __st) in let __en = (if __en < 0 then __len_s + __en else __en) in let __st = if __st < 0 then 0 else if __st > __len_s then __len_s else __st in let __en = if __en < 0 then 0 else if __en > __len_s then __len_s else __en in if __st >= __en then "" else String.sub __s __st (__en - __st)) in
  if (ch = sep) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (!current) : string)]) : string list);
  current := "";
  ) else (
  current := (!current ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (Obj.magic (List.append (!res) [(Obj.magic (!current) : string)]) : string list);
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and pow_int_float base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. float_of_int (base));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and points_to_polynomial coordinates =
  let __ret = ref "" in
  (try
  let coordinates = (Obj.magic coordinates : int list list) in
  if (List.length (coordinates) = 0) then (
  (failwith ("The program cannot work out a fitting polynomial."));
  );
  let i = ref (0) in
  (try while (!i < List.length (coordinates)) do
    try
  if (List.length ((let __l = coordinates in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) <> 2) then (
  (failwith ("The program cannot work out a fitting polynomial."));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < List.length (coordinates)) do
    try
  let k = ref ((!j + 1)) in
  (try while (!k < List.length (coordinates)) do
    try
  if (((let __l = (let __l = coordinates in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (let __l = (let __l = coordinates in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) && ((let __l = (let __l = coordinates in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = (let __l = (let __l = coordinates in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) then (
  (failwith ("The program cannot work out a fitting polynomial."));
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let set_x = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < List.length (coordinates)) do
    try
  let x_val = (let __l = (let __l = coordinates in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if not (contains_int (!set_x) (Obj.repr (x_val))) then (
  set_x := (Obj.magic (List.append (!set_x) [(Obj.magic (x_val) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (!set_x) = 1) then (
  __ret := (Obj.magic (("x=" ^ (string_of_int ((let __l = (let __l = coordinates in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) : string); raise Return
  );
  if (List.length (!set_x) <> List.length (coordinates)) then (
  (failwith ("The program cannot work out a fitting polynomial."));
  );
  let n = List.length (coordinates) in
  let matrix = ref (([] : (float list) list)) in
  let row = ref (0) in
  (try while (!row < n) do
    try
  let line = ref (([] : (float) list)) in
  let col = ref (0) in
  (try while (!col < n) do
    try
  let power = pow_int_float (Obj.repr ((let __l = (let __l = coordinates in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) (Obj.repr ((n - (!col + 1)))) in
  line := (Obj.magic (List.append (!line) [(Obj.magic (power) : float)]) : float list);
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic (List.append (!matrix) [(Obj.magic (!line) : float list)]) : float list list);
  row := (!row + 1);
    with Continue -> ()
  done with Break -> ());
  let vector = ref (([] : (float) list)) in
  row := 0;
  (try while (!row < n) do
    try
  vector := (Obj.magic (List.append (!vector) [(Obj.magic (float_of_int ((let __l = (let __l = coordinates in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  row := (!row + 1);
    with Continue -> ()
  done with Break -> ());
  let count = ref (0) in
  (try while (!count < n) do
    try
  let number = ref (0) in
  (try while (!number < n) do
    try
  if (!count <> !number) then (
  let fraction = ((let __l = (let __l = !matrix in let __i = !number in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. (let __l = (let __l = !matrix in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let cc = ref (0) in
  (try while (!cc < n) do
    try
  matrix := (List.mapi (fun __i __x -> if __i = !number then (List.mapi (fun __i __x -> if __i = !cc then ((let __l = (let __l = !matrix in let __i = !number in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !cc in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. ((let __l = (let __l = !matrix in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !cc in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. fraction)) else __x) ((let __l = !matrix in let __i = !number in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!matrix));
  cc := (!cc + 1);
    with Continue -> ()
  done with Break -> ());
  vector := (List.mapi (fun __i __x -> if __i = !number then ((let __l = !vector in let __i = !number in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. ((let __l = !vector in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. fraction)) else __x) (!vector));
  );
  number := (!number + 1);
    with Continue -> ()
  done with Break -> ());
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  let solution = ref (([] : (string) list)) in
  count := 0;
  (try while (!count < n) do
    try
  let value = ((let __l = !vector in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. (let __l = (let __l = !matrix in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  solution := (Obj.magic (List.append (!solution) [(Obj.magic ((Printf.sprintf "%.16g" (value))) : string)]) : string list);
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  let solved = ref ("f(x)=") in
  count := 0;
  (try while (!count < n) do
    try
  let parts = ref (split ((let __l = !solution in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) ("e")) in
  let coeff = ref ((let __l = !solution in let __i = !count in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if (List.length (!parts) > 1) then (
  coeff := (((let __l = !parts in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) ^ "*10^") ^ (let __l = !parts in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)));
  );
  solved := ((((!solved ^ "x^") ^ (string_of_int ((n - (!count + 1))))) ^ "*") ^ !coeff);
  if ((!count + 1) <> n) then (
  solved := (!solved ^ "+");
  );
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!solved) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((points_to_polynomial ([[1; 0]; [2; 0]; [3; 0]])));
  print_endline ((points_to_polynomial ([[1; 1]; [2; 1]; [3; 1]])));
  print_endline ((points_to_polynomial ([[1; 1]; [2; 4]; [3; 9]])));
  print_endline ((points_to_polynomial ([[1; 3]; [2; 6]; [3; 11]])));
  print_endline ((points_to_polynomial ([[1; -(3)]; [2; -(6)]; [3; -(11)]])));
  print_endline ((points_to_polynomial ([[1; 1]; [1; 2]; [1; 3]])));
  print_endline ((points_to_polynomial ([[1; 5]; [2; 2]; [3; 9]])));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
